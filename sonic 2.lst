 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 1 - 5/14/2025 18:0:23


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; Originally disassembled by: MarkeyJester (DrXInsanity)
       3/       0 :                     ; Redisassembly by: Filter/RepellantMold
       4/       0 :                     ; Special thanks to:
       5/       0 :                     ; -> Hivebrain (for SCHG sonic crackers location guide on SonicRetro)
       6/       0 :                     ; -> Malevolence (for the SST Object defining/labling)
       7/       0 :                     
       8/       0 :                     	cpu 68000
       9/       0 :                     
      10/       0 : =$0                  fixBugs = 0
      11/       0 :                     ;	| If 1, fixes some bugs (mainly sound driver related)
      12/       0 :                     ;	Currently not recommended to be enabled due to corrupted arm art.
      13/       0 : =$0                  zeroOffsetOptimization = 0
      14/       0 :                     ;	| If 1, makes a handful of zero-offset instructions smaller
      15/       0 :                     ; Include SMPS2ASM, for expressing SMPS bytecode in a portable and human-readable form.
      16/       0 : =$3                  SonicDriverVer = 3 ; Tell SMPS2ASM that we are targetting Sonic 3's sound driver
      17/       0 :                     	include "sound/_smps2asm_inc.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; ===========================================================================
(1)    4/       0 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)    5/       0 :                     ; purpose with or without fee is hereby granted.
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)    8/       0 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)    9/       0 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   10/       0 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   11/       0 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   12/       0 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   13/       0 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   14/       0 :                     ; ===========================================================================
(1)   15/       0 :                     
(1)   16/       0 : =$1                  SMPS2ASMVer	= 1
(1)   17/       0 :                     
(1)   18/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   19/       0 : =$C                  psgdelta	EQU 12
(1)   20/       0 :                     ; ---------------------------------------------------------------------------
(1)   21/       0 :                     ; Standard Octave Pitch Equates
(1)   22/       0 :                     	enumconf	$C
(1)   23/       0 : =$88..$B8            	enum		smpsPitch10lo=$88,smpsPitch09lo,smpsPitch08lo,smpsPitch07lo,smpsPitch06lo
(1)   24/       0 : =$C4..$F4            	nextenum	smpsPitch05lo,smpsPitch04lo,smpsPitch03lo,smpsPitch02lo,smpsPitch01lo
(1)   25/       0 : =$0..$30             	enum		smpsPitch00=$00,smpsPitch01hi,smpsPitch02hi,smpsPitch03hi,smpsPitch04hi
(1)   26/       0 : =$3C..$6C            	nextenum	smpsPitch05hi,smpsPitch06hi,smpsPitch07hi,smpsPitch08hi,smpsPitch09hi
(1)   27/       0 : =$78                 	nextenum	smpsPitch10hi
(1)   28/       0 :                     	enumconf	1
(1)   29/       0 :                     ; ---------------------------------------------------------------------------
(1)   30/       0 :                     ; Note Equates
(1)   31/       0 : =$80..$8F            	enum		nRst=$80,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   32/       0 : =$90..$9F            	nextenum	nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   33/       0 : =$A0..$AF            	nextenum	nG2,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   34/       0 : =$B0..$BF            	nextenum	nB3,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   35/       0 : =$C0..$CF            	nextenum	nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   36/       0 : =$D0..$DF            	nextenum	nG6,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   37/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   38/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   39/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   40/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   41/       0 : =>FALSE              	if SonicDriverVer<=2
(1)   42/       0 :                     nMaxPSG				EQU nA5
(1)   43/       0 :                     nMaxPSG1			EQU nA5+psgdelta
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 2 - 5/14/2025 18:0:23


(1)   44/       0 :                     nMaxPSG2			EQU nA5+psgdelta
(1)   45/       0 : =>TRUE               	else
(1)   46/       0 : =$C7                 nMaxPSG				EQU nBb6-psgdelta
(1)   47/       0 : =$D3                 nMaxPSG1			EQU nBb6
(1)   48/       0 : =$D4                 nMaxPSG2			EQU nB6
(1)   49/       0 : [41]                 	endif
(1)   50/       0 :                     ; ---------------------------------------------------------------------------
(1)   51/       0 :                     ; PSG volume envelope equates
(1)   52/       0 : =$1..$6              	enum		sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
(1)   53/       0 : =$7..$C              	nextenum	sTone_07,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(1)   54/       0 :                     ; ---------------------------------------------------------------------------
(1)   55/       0 :                     ; DAC Equates
(1)   56/       0 : =$81..$87            	enum		dKick=$81,dSnare,dHighTom,dMidTom,dLowTom,dLetsGo,dHey
(1)   57/       0 :                     ; ---------------------------------------------------------------------------
(1)   58/       0 :                     ; Channel IDs for SFX
(1)   59/       0 : =$80                 cPSG1				EQU $80
(1)   60/       0 : =$A0                 cPSG2				EQU $A0
(1)   61/       0 : =$C0                 cPSG3				EQU $C0
(1)   62/       0 : =$E0                 cNoise				EQU $E0			; Not for use in S3/S&K/S3D
(1)   63/       0 : =$2                  cFM3				EQU $02
(1)   64/       0 : =$4                  cFM4				EQU $04
(1)   65/       0 : =$5                  cFM5				EQU $05
(1)   66/       0 : =$6                  cFM6				EQU $06			; Only in S3/S&K/S3D, overrides DAC
(1)   67/       0 :                     ; ---------------------------------------------------------------------------
(1)   68/       0 :                     ; Conversion macros and functions
(1)   69/       0 :                     
(1)   70/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)   71/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(1)   72/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(1)   73/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)   74/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)   75/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)   76/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)   77/       0 :                     
(1)   78/       0 :                     convertMainTempoMod macro mod
(1)   79/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)   80/       0 :                     		dc.b	mod
(1)   81/       0 :                     	elseif SourceDriver==1
(1)   82/       0 :                     		if mod==1
(1)   83/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)   84/       0 :                     		endif
(1)   85/       0 :                     		if SonicDriverVer==2
(1)   86/       0 :                     			dc.b	s1TempotoS2(mod)
(1)   87/       0 :                     		else;if SonicDriverVer>=3
(1)   88/       0 :                     			dc.b	s1TempotoS3(mod)
(1)   89/       0 :                     		endif
(1)   90/       0 :                     	elseif SourceDriver==2
(1)   91/       0 :                     		if mod==0
(1)   92/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)   93/       0 :                     		endif
(1)   94/       0 :                     		if SonicDriverVer==1
(1)   95/       0 :                     			dc.b	s2TempotoS1(mod)
(1)   96/       0 :                     		else;if SonicDriverVer>=3
(1)   97/       0 :                     			dc.b	s2TempotoS3(mod)
(1)   98/       0 :                     		endif
(1)   99/       0 :                     	else;if SourceDriver>=3
(1)  100/       0 :                     		if mod==0
(1)  101/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)  102/       0 :                     		endif
(1)  103/       0 :                     		if SonicDriverVer==1
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 3 - 5/14/2025 18:0:23


(1)  104/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  105/       0 :                     		else;if SonicDriverVer==2
(1)  106/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  107/       0 :                     		endif
(1)  108/       0 :                     	endif
(1)  109/       0 :                     	endm
(1)  110/       0 :                     
(1)  111/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  112/       0 :                     PSGPitchConvert macro pitch
(1)  113/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  114/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  115/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  116/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  117/       0 :                     	else
(1)  118/       0 :                     		dc.b	pitch
(1)  119/       0 :                     	endif
(1)  120/       0 :                     	endm
(1)  121/       0 :                     
(1)  122/       0 :                     CheckedChannelPointer macro loc
(1)  123/       0 :                     	if SonicDriverVer<>1
(1)  124/       0 :                     		dc.w	z80_ptr(loc)
(1)  125/       0 :                     	else
(1)  126/       0 :                     		if MOMPASS>1
(1)  127/       0 :                     			if loc<songStart
(1)  128/       0 :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)  129/       0 :                     			endif
(1)  130/       0 :                     		endif
(1)  131/       0 :                     		dc.w	loc-songStart
(1)  132/       0 :                     	endif
(1)  133/       0 :                     	endm
(1)  134/       0 :                     ; ---------------------------------------------------------------------------
(1)  135/       0 :                     ; Header Macros
(1)  136/       0 :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(1)  137/       0 :                     
(1)  138/       0 :                     SourceDriver set ver
(1)  139/       0 :                     
(1)  140/       0 :                     	if ("sourcesmps2asmver"<>"")
(1)  141/       0 :                     		set SourceSMPS2ASM,sourcesmps2asmver
(1)  142/       0 :                     	else
(1)  143/       0 :                     		set SourceSMPS2ASM,0
(1)  144/       0 :                     	endif
(1)  145/       0 :                     
(1)  146/       0 :                     songStart set *
(1)  147/       0 :                     
(1)  148/       0 :                     	if MOMPASS>1
(1)  149/       0 :                     		if SMPS2ASMVer < SourceSMPS2ASM
(1)  150/       0 :                     			message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)  151/       0 :                     		endif
(1)  152/       0 :                     	endif
(1)  153/       0 :                     
(1)  154/       0 :                     	endm
(1)  155/       0 :                     
(1)  156/       0 :                     smpsHeaderVoiceNull macro
(1)  157/       0 :                     	if songStart<>*
(1)  158/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  159/       0 :                     	endif
(1)  160/       0 :                     	dc.w	$0000
(1)  161/       0 :                     	endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; Header - Set up Voice Location
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 4 - 5/14/2025 18:0:23


(1)  164/       0 :                     ; Common to music and SFX
(1)  165/       0 :                     smpsHeaderVoice macro loc
(1)  166/       0 :                     	if songStart<>*
(1)  167/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  168/       0 :                     	endif
(1)  169/       0 :                     	if SonicDriverVer<>1
(1)  170/       0 :                     		dc.w	z80_ptr(loc)
(1)  171/       0 :                     	else
(1)  172/       0 :                     		if MOMPASS>1
(1)  173/       0 :                     			if loc<songStart
(1)  174/       0 :                     				fatal "Voice banks for Sonic 1 songs must come after the song"
(1)  175/       0 :                     			endif
(1)  176/       0 :                     		endif
(1)  177/       0 :                     		dc.w	loc-songStart
(1)  178/       0 :                     	endif
(1)  179/       0 :                     	endm
(1)  180/       0 :                     
(1)  181/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  182/       0 :                     ; Common to music and SFX
(1)  183/       0 :                     smpsHeaderVoiceUVB macro
(1)  184/       0 :                     	if songStart<>*
(1)  185/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  186/       0 :                     	endif
(1)  187/       0 :                     	if SonicDriverVer>=5
(1)  188/       0 :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(1)  189/       0 :                     	elseif SonicDriverVer>=3
(1)  190/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  191/       0 :                     	else
(1)  192/       0 :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(1)  193/       0 :                     	endif
(1)  194/       0 :                     	endm
(1)  195/       0 :                     
(1)  196/       0 :                     ; Header macros for music (not for SFX)
(1)  197/       0 :                     ; Header - Set up Channel Usage
(1)  198/       0 :                     smpsHeaderChan macro fm,psg
(1)  199/       0 :                     	dc.b	fm,psg
(1)  200/       0 :                     	endm
(1)  201/       0 :                     
(1)  202/       0 :                     ; Header - Set up Tempo
(1)  203/       0 :                     smpsHeaderTempo macro div,mod
(1)  204/       0 :                     	dc.b	div
(1)  205/       0 :                     	convertMainTempoMod mod
(1)  206/       0 :                     	endm
(1)  207/       0 :                     
(1)  208/       0 :                     ; Header - Set up DAC Channel
(1)  209/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  210/       0 :                     	CheckedChannelPointer loc
(1)  211/       0 :                     	if ("pitch"<>"")
(1)  212/       0 :                     		dc.b	pitch
(1)  213/       0 :                     		if ("vol"<>"")
(1)  214/       0 :                     			dc.b	vol
(1)  215/       0 :                     		else
(1)  216/       0 :                     			dc.b	$00
(1)  217/       0 :                     		endif
(1)  218/       0 :                     	else
(1)  219/       0 :                     		dc.w	$00
(1)  220/       0 :                     	endif
(1)  221/       0 :                     	endm
(1)  222/       0 :                     
(1)  223/       0 :                     ; Header - Set up FM Channel
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 5 - 5/14/2025 18:0:23


(1)  224/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  225/       0 :                     	CheckedChannelPointer loc
(1)  226/       0 :                     	dc.b	pitch,vol
(1)  227/       0 :                     	endm
(1)  228/       0 :                     
(1)  229/       0 :                     ; Header - Set up PSG Channel
(1)  230/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  231/       0 :                     	CheckedChannelPointer loc
(1)  232/       0 :                     	PSGPitchConvert pitch
(1)  233/       0 :                     	dc.b	vol
(1)  234/       0 :                     	; Frequency envelope
(1)  235/       0 :                     	if (SonicDriverVer>=3) && (SourceDriver<3)
(1)  236/       0 :                     		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)  237/       0 :                     		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)  238/       0 :                     		; other drivers may try to process as valid data, so manually force it to 0 here.
(1)  239/       0 :                     		dc.b	0
(1)  240/       0 :                     	else
(1)  241/       0 :                     		if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && (mod<>0)
(1)  242/       0 :                     			message "This track header specifies a frequency envelope, but this driver does not support them."			
(1)  243/       0 :                     		endif
(1)  244/       0 :                     		dc.b	mod
(1)  245/       0 :                     	endif
(1)  246/       0 :                     	; Volume envelope
(1)  247/       0 :                     	dc.b	voice
(1)  248/       0 :                     	endm
(1)  249/       0 :                     
(1)  250/       0 :                     ; Header macros for SFX (not for music)
(1)  251/       0 :                     ; Header - Set up Tempo
(1)  252/       0 :                     smpsHeaderTempoSFX macro div
(1)  253/       0 :                     	dc.b	div
(1)  254/       0 :                     	endm
(1)  255/       0 :                     
(1)  256/       0 :                     ; Header - Set up Channel Usage
(1)  257/       0 :                     smpsHeaderChanSFX macro chan
(1)  258/       0 :                     	dc.b	chan
(1)  259/       0 :                     	endm
(1)  260/       0 :                     
(1)  261/       0 :                     ; Header - Set up FM Channel
(1)  262/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  263/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  264/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  265/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  266/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  267/       0 :                     	endif
(1)  268/       0 :                     	dc.b	$80,chanid
(1)  269/       0 :                     	CheckedChannelPointer loc
(1)  270/       0 :                     	if (chanid&$80)<>0
(1)  271/       0 :                     		PSGPitchConvert pitch
(1)  272/       0 :                     	else
(1)  273/       0 :                     		dc.b	pitch
(1)  274/       0 :                     	endif
(1)  275/       0 :                     	dc.b	vol
(1)  276/       0 :                     	endm
(1)  277/       0 :                     ; ---------------------------------------------------------------------------
(1)  278/       0 :                     ; Co-ord Flag Macros and Equates
(1)  279/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  280/       0 :                     smpsPan macro direction,amsfms
(1)  281/       0 :                     panNone set $00
(1)  282/       0 :                     panRight set $40
(1)  283/       0 :                     panLeft set $80
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 6 - 5/14/2025 18:0:23


(1)  284/       0 :                     panCentre set $C0
(1)  285/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  286/       0 :                     	dc.b $E0,direction+amsfms
(1)  287/       0 :                     	endm
(1)  288/       0 :                     
(1)  289/       0 :                     ; E1xx - Set channel detune to val
(1)  290/       0 :                     smpsDetune macro val
(1)  291/       0 :                     	dc.b	$E1,val
(1)  292/       0 :                     	endm
(1)  293/       0 :                     
(1)  294/       0 :                     ; E2xx - Useless
(1)  295/       0 :                     smpsNop macro val
(1)  296/       0 :                     		dc.b	$E2,val
(1)  297/       0 :                     	endm
(1)  298/       0 :                     
(1)  299/       0 :                     ; Return (used after smpsCall)
(1)  300/       0 :                     smpsReturn macro val
(1)  301/       0 :                     	if SonicDriverVer>=3
(1)  302/       0 :                     		dc.b	$F9
(1)  303/       0 :                     	else
(1)  304/       0 :                     		dc.b	$E3
(1)  305/       0 :                     	endif
(1)  306/       0 :                     	endm
(1)  307/       0 :                     
(1)  308/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  309/       0 :                     smpsChanTempoDiv macro val
(1)  310/       0 :                     	if SonicDriverVer>=5
(1)  311/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  312/       0 :                     		dc.b	$FF,$08,val
(1)  313/       0 :                     	elseif SonicDriverVer==3
(1)  314/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  315/       0 :                     	else
(1)  316/       0 :                     		dc.b	$E5,val
(1)  317/       0 :                     	endif
(1)  318/       0 :                     	endm
(1)  319/       0 :                     
(1)  320/       0 :                     ; E6xx - Alter Volume by xx
(1)  321/       0 :                     smpsAlterVol macro val
(1)  322/       0 :                     	dc.b	$E6,val
(1)  323/       0 :                     	endm
(1)  324/       0 :                     
(1)  325/       0 :                     ; E7 - Prevent attack of next note
(1)  326/       0 : =$E7                 smpsNoAttack	EQU $E7
(1)  327/       0 :                     
(1)  328/       0 :                     ; E8xx - Set note fill to xx
(1)  329/       0 :                     smpsNoteFill macro val
(1)  330/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  331/       0 :                     		; Unique to Flamewing's modified driver
(1)  332/       0 :                     		dc.b	$FF,$0A,val
(1)  333/       0 :                     	else
(1)  334/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  335/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  336/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  337/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  338/       0 :                     		endif
(1)  339/       0 :                     		dc.b	$E8,val
(1)  340/       0 :                     	endif
(1)  341/       0 :                     	endm
(1)  342/       0 :                     
(1)  343/       0 :                     ; Add xx to channel pitch
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 7 - 5/14/2025 18:0:23


(1)  344/       0 :                     smpsChangeTransposition macro val
(1)  345/       0 :                     	if SonicDriverVer>=3
(1)  346/       0 :                     		dc.b	$FB,val
(1)  347/       0 :                     	else
(1)  348/       0 :                     		dc.b	$E9,val
(1)  349/       0 :                     	endif
(1)  350/       0 :                     	endm
(1)  351/       0 :                     
(1)  352/       0 :                     ; Set music tempo modifier to xx
(1)  353/       0 :                     smpsSetTempoMod macro mod
(1)  354/       0 :                     	if SonicDriverVer>=3
(1)  355/       0 :                     		dc.b	$FF,$00
(1)  356/       0 :                     	else
(1)  357/       0 :                     		dc.b	$EA
(1)  358/       0 :                     	endif
(1)  359/       0 :                     	convertMainTempoMod mod
(1)  360/       0 :                     	endm
(1)  361/       0 :                     
(1)  362/       0 :                     ; Set music tempo divider to xx
(1)  363/       0 :                     smpsSetTempoDiv macro val
(1)  364/       0 :                     	if SonicDriverVer>=3
(1)  365/       0 :                     		dc.b	$FF,$04,val
(1)  366/       0 :                     	else
(1)  367/       0 :                     		dc.b	$EB,val
(1)  368/       0 :                     	endif
(1)  369/       0 :                     	endm
(1)  370/       0 :                     
(1)  371/       0 :                     ; ECxx - Set Volume to xx
(1)  372/       0 :                     smpsSetVol macro val
(1)  373/       0 :                     	if SonicDriverVer>=3
(1)  374/       0 :                     		dc.b	$E4,val
(1)  375/       0 :                     	else
(1)  376/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  377/       0 :                     	endif
(1)  378/       0 :                     	endm
(1)  379/       0 :                     
(1)  380/       0 :                     ; Works on all drivers
(1)  381/       0 :                     smpsPSGAlterVol macro vol
(1)  382/       0 :                     	dc.b	$EC,vol
(1)  383/       0 :                     	endm
(1)  384/       0 :                     
(1)  385/       0 :                     ; Clears pushing sound flag in S1
(1)  386/       0 :                     smpsClearPush macro
(1)  387/       0 :                     	if SonicDriverVer==1
(1)  388/       0 :                     		dc.b	$ED
(1)  389/       0 :                     	else
(1)  390/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  391/       0 :                     	endif
(1)  392/       0 :                     	endm
(1)  393/       0 :                     
(1)  394/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  395/       0 :                     smpsStopSpecial macro
(1)  396/       0 :                     	if SonicDriverVer==1
(1)  397/       0 :                     		dc.b	$EE
(1)  398/       0 :                     	else
(1)  399/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  400/       0 :                     		smpsStop
(1)  401/       0 :                     	endif
(1)  402/       0 :                     	endm
(1)  403/       0 :                     
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 8 - 5/14/2025 18:0:23


(1)  404/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  405/       0 :                     smpsFMvoice macro voice,songID
(1)  406/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  407/       0 :                     		dc.b	$EF,voice|$80,songID+$81
(1)  408/       0 :                     	else
(1)  409/       0 :                     		dc.b	$EF,voice
(1)  410/       0 :                     	endif
(1)  411/       0 :                     	endm
(1)  412/       0 :                     
(1)  413/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  414/       0 :                     smpsModSet macro wait,speed,change,step
(1)  415/       0 :                     	dc.b	$F0
(1)  416/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  417/       0 :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(1)  418/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  419/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  420/       0 :                     	else
(1)  421/       0 :                     		dc.b	wait,speed,change,step
(1)  422/       0 :                     	endif
(1)  423/       0 :                     	;dc.b	speed,change,step
(1)  424/       0 :                     	endm
(1)  425/       0 :                     
(1)  426/       0 :                     ; Turn on Modulation
(1)  427/       0 :                     smpsModOn macro type
(1)  428/       0 :                     	dc.b	$FD, $01
(1)  429/       0 :                     	endm
(1)  430/       0 :                     
(1)  431/       0 :                     ; F2 - End of channel
(1)  432/       0 :                     smpsStop macro
(1)  433/       0 :                     	dc.b	$F2
(1)  434/       0 :                     	endm
(1)  435/       0 :                     
(1)  436/       0 :                     ; F3xx - PSG waveform to xx
(1)  437/       0 :                     smpsPSGform macro form
(1)  438/       0 :                     	dc.b	$F3,form
(1)  439/       0 :                     	endm
(1)  440/       0 :                     
(1)  441/       0 :                     ; Turn off Modulation
(1)  442/       0 :                     smpsModOff macro
(1)  443/       0 :                     	dc.b	$FD, $00
(1)  444/       0 :                     	endm
(1)  445/       0 :                     
(1)  446/       0 :                     ; F5xx - PSG voice to xx
(1)  447/       0 :                     smpsPSGvoice macro voice
(1)  448/       0 :                     	dc.b	$F5,voice
(1)  449/       0 :                     	endm
(1)  450/       0 :                     
(1)  451/       0 :                     ; F6xxxx - Jump to xxxx
(1)  452/       0 :                     smpsJump macro loc
(1)  453/       0 :                     	dc.b	$F6
(1)  454/       0 :                     	if SonicDriverVer<>1
(1)  455/       0 :                     		dc.w	z80_ptr(loc)
(1)  456/       0 :                     	else
(1)  457/       0 :                     		dc.w	loc-*-1
(1)  458/       0 :                     	endif
(1)  459/       0 :                     	endm
(1)  460/       0 :                     
(1)  461/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  462/       0 :                     smpsLoop macro index,loops,loc
(1)  463/       0 :                     	dc.b	$F7
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 9 - 5/14/2025 18:0:23


(1)  464/       0 :                     	dc.b	index,loops
(1)  465/       0 :                     	if SonicDriverVer<>1
(1)  466/       0 :                     		dc.w	z80_ptr(loc)
(1)  467/       0 :                     	else
(1)  468/       0 :                     		dc.w	loc-*-1
(1)  469/       0 :                     	endif
(1)  470/       0 :                     	endm
(1)  471/       0 :                     
(1)  472/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  473/       0 :                     smpsCall macro loc
(1)  474/       0 :                     	dc.b	$F8
(1)  475/       0 :                     	if SonicDriverVer<>1
(1)  476/       0 :                     		dc.w	z80_ptr(loc)
(1)  477/       0 :                     	else
(1)  478/       0 :                     		dc.w	loc-*-1
(1)  479/       0 :                     	endif
(1)  480/       0 :                     	endm
(1)  481/       0 :                     ; ---------------------------------------------------------------------------
(1)  482/       0 :                     ; Alter Volume
(1)  483/       0 :                     smpsFMAlterVol macro val1,val2
(1)  484/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  485/       0 :                     		dc.b	$E5,val1,val2
(1)  486/       0 :                     	else
(1)  487/       0 :                     		dc.b	$E6,val1
(1)  488/       0 :                     	endif
(1)  489/       0 :                     	endm
(1)  490/       0 :                     
(1)  491/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  492/       0 : =>TRUE               	if SonicDriverVer>=3
(1)  493/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  494/       0 :                     smpsStopFM macro
(1)  495/       0 :                     	dc.b	$E3
(1)  496/       0 :                     	endm
(1)  497/       0 :                     
(1)  498/       0 :                     ; Spindash Rev
(1)  499/       0 :                     smpsSpindashRev macro
(1)  500/       0 :                     	dc.b	$E9
(1)  501/       0 :                     	endm
(1)  502/       0 :                     
(1)  503/       0 :                     smpsPlayDACSample macro sample
(1)  504/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  505/       0 :                     	endm
(1)  506/       0 :                     
(1)  507/       0 :                     smpsConditionalJump macro index,loc
(1)  508/       0 :                     	dc.b	$EB
(1)  509/       0 :                     	dc.b	index
(1)  510/       0 :                     	dc.w	z80_ptr(loc)
(1)  511/       0 :                     	endm
(1)  512/       0 :                     
(1)  513/       0 :                     ; Set note values to xx-$40
(1)  514/       0 :                     smpsSetNote macro val
(1)  515/       0 :                     	dc.b	$ED,val
(1)  516/       0 :                     	endm
(1)  517/       0 :                     
(1)  518/       0 :                     smpsFMICommand macro reg,val
(1)  519/       0 :                     	dc.b	$EE,reg,val
(1)  520/       0 :                     	endm
(1)  521/       0 :                     
(1)  522/       0 :                     ; Set Modulation
(1)  523/       0 :                     smpsModChange2 macro fmmod,psgmod
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 10 - 5/14/2025 18:0:23


(1)  524/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  525/       0 :                     	endm
(1)  526/       0 :                     
(1)  527/       0 :                     ; Set Modulation
(1)  528/       0 :                     smpsModChange macro val
(1)  529/       0 :                     	dc.b	$F4,val
(1)  530/       0 :                     	endm
(1)  531/       0 :                     
(1)  532/       0 :                     ; FCxxxx - Jump to xxxx
(1)  533/       0 :                     smpsContinuousLoop macro loc
(1)  534/       0 :                     	dc.b	$FC
(1)  535/       0 :                     	dc.w	z80_ptr(loc)
(1)  536/       0 :                     	endm
(1)  537/       0 :                     
(1)  538/       0 :                     smpsAlternateSMPS macro flag
(1)  539/       0 :                     	dc.b	$FD,flag
(1)  540/       0 :                     	endm
(1)  541/       0 :                     
(1)  542/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  543/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  544/       0 :                     	endm
(1)  545/       0 :                     
(1)  546/       0 :                     smpsPlaySound macro index
(1)  547/       0 :                     	if SonicDriverVer>=5
(1)  548/       0 :                     		message "smpsPlaySound only plays SFX in Flamedriver ; use smpsPlayMusic to play music or fade effects."
(1)  549/       0 :                     	endif
(1)  550/       0 :                     	dc.b	$FF,$01,index
(1)  551/       0 :                     	endm
(1)  552/       0 :                     
(1)  553/       0 :                     smpsHaltMusic macro flag
(1)  554/       0 :                     	dc.b	$FF,$02,flag
(1)  555/       0 :                     	endm
(1)  556/       0 :                     
(1)  557/       0 :                     smpsCopyData macro data,len
(1)  558/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  559/       0 :                     	dc.b	$FF,$03
(1)  560/       0 :                     	dc.w	little_endian(data)
(1)  561/       0 :                     	dc.b	len
(1)  562/       0 :                     	endm
(1)  563/       0 :                     
(1)  564/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  565/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  566/       0 :                     	endm
(1)  567/       0 :                     
(1)  568/       0 :                     smpsFMVolEnv macro tone,mask
(1)  569/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  570/       0 :                     	endm
(1)  571/       0 :                     
(1)  572/       0 :                     smpsResetSpindashRev macro val
(1)  573/       0 :                     	dc.b	$FF,$07
(1)  574/       0 :                     	endm
(1)  575/       0 :                     
(1)  576/       0 :                     	; Flags ported from other drivers.
(1)  577/       0 : =>FALSE              	if SonicDriverVer>=5
(1)  578/       0 :                     smpsChanFMCommand macro reg,val
(1)  579/       0 :                     	dc.b	$FF,$09,reg,val
(1)  580/       0 :                     	endm
(1)  581/       0 :                     
(1)  582/       0 :                     smpsPitchSlide macro enable
(1)  583/       0 :                     	dc.b	$FF,$0B,enable
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 11 - 5/14/2025 18:0:23


(1)  584/       0 :                     	endm
(1)  585/       0 :                     
(1)  586/       0 :                     smpsSetLFO macro enable,amsfms
(1)  587/       0 :                     	dc.b	$FF,$0C,enable,amsfms
(1)  588/       0 :                     	endm
(1)  589/       0 :                     
(1)  590/       0 :                     smpsPlayMusic macro index
(1)  591/       0 :                     	dc.b	$FF,$0D,index
(1)  592/       0 :                     	endm
(1)  593/       0 : [577]                	endif
(1)  594/       0 :                     
(1)  595/       0 : [492]                	endif
(1)  596/       0 :                     ; ---------------------------------------------------------------------------
(1)  597/       0 :                     ; S1/S2 only coordination flag
(1)  598/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  599/       0 :                     smpsMaxRelRate macro
(1)  600/       0 :                     	if SonicDriverVer>=3
(1)  601/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  602/       0 :                     		smpsFMICommand $88,$0F
(1)  603/       0 :                     		smpsFMICommand $8C,$0F
(1)  604/       0 :                     	else
(1)  605/       0 :                     		dc.b	$F9
(1)  606/       0 :                     	endif
(1)  607/       0 :                     	endm
(1)  608/       0 :                     ; ---------------------------------------------------------------------------
(1)  609/       0 :                     ; Backwards compatibility
(1)  610/       0 :                     smpsAlterNote macro
(1)  611/       0 :                     	smpsDetune	ALLARGS
(1)  612/       0 :                     	endm
(1)  613/       0 :                     
(1)  614/       0 :                     smpsAlterPitch macro
(1)  615/       0 :                     	smpsChangeTransposition	ALLARGS
(1)  616/       0 :                     	endm
(1)  617/       0 :                     
(1)  618/       0 :                     smpsFMFlutter macro
(1)  619/       0 :                     	smpsFMVolEnv	ALLARGS
(1)  620/       0 :                     	endm
(1)  621/       0 :                     
(1)  622/       0 :                     smpsWeirdD1LRR macro
(1)  623/       0 :                     	smpsMaxRelRate ALLARGS
(1)  624/       0 :                     	endm
(1)  625/       0 :                     
(1)  626/       0 :                     smpsSetvoice macro
(1)  627/       0 :                     	smpsFMvoice ALLARGS
(1)  628/       0 :                     	endm
(1)  629/       0 :                     ; ---------------------------------------------------------------------------
(1)  630/       0 :                     ; Macros for FM instruments
(1)  631/       0 :                     ; Voices - Feedback
(1)  632/       0 :                     smpsVcFeedback macro val
(1)  633/       0 :                     vcFeedback set val
(1)  634/       0 :                     	endm
(1)  635/       0 :                     
(1)  636/       0 :                     ; Voices - Algorithm
(1)  637/       0 :                     smpsVcAlgorithm macro val
(1)  638/       0 :                     vcAlgorithm set val
(1)  639/       0 :                     	endm
(1)  640/       0 :                     
(1)  641/       0 :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(1)  642/       0 :                     vcUnusedBits set val
(1)  643/       0 :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 12 - 5/14/2025 18:0:23


(1)  644/       0 :                     		set vcD1R1Unk,d1r1<<5
(1)  645/       0 :                     		set vcD1R2Unk,d1r2<<5
(1)  646/       0 :                     		set vcD1R3Unk,d1r3<<5
(1)  647/       0 :                     		set vcD1R4Unk,d1r4<<5
(1)  648/       0 :                     	else
(1)  649/       0 :                     		set vcD1R1Unk,0
(1)  650/       0 :                     		set vcD1R2Unk,0
(1)  651/       0 :                     		set vcD1R3Unk,0
(1)  652/       0 :                     		set vcD1R4Unk,0
(1)  653/       0 :                     	endif
(1)  654/       0 :                     	endm
(1)  655/       0 :                     
(1)  656/       0 :                     ; Voices - Detune
(1)  657/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  658/       0 :                     	set vcDT1,op1
(1)  659/       0 :                     	set vcDT2,op2
(1)  660/       0 :                     	set vcDT3,op3
(1)  661/       0 :                     	set vcDT4,op4
(1)  662/       0 :                     	endm
(1)  663/       0 :                     
(1)  664/       0 :                     ; Voices - Coarse-Frequency
(1)  665/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  666/       0 :                     	set vcCF1,op1
(1)  667/       0 :                     	set vcCF2,op2
(1)  668/       0 :                     	set vcCF3,op3
(1)  669/       0 :                     	set vcCF4,op4
(1)  670/       0 :                     	endm
(1)  671/       0 :                     
(1)  672/       0 :                     ; Voices - Rate Scale
(1)  673/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  674/       0 :                     	set vcRS1,op1
(1)  675/       0 :                     	set vcRS2,op2
(1)  676/       0 :                     	set vcRS3,op3
(1)  677/       0 :                     	set vcRS4,op4
(1)  678/       0 :                     	endm
(1)  679/       0 :                     
(1)  680/       0 :                     ; Voices - Attack Rate
(1)  681/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  682/       0 :                     	set vcAR1,op1
(1)  683/       0 :                     	set vcAR2,op2
(1)  684/       0 :                     	set vcAR3,op3
(1)  685/       0 :                     	set vcAR4,op4
(1)  686/       0 :                     	endm
(1)  687/       0 :                     
(1)  688/       0 :                     ; Voices - Amplitude Modulation
(1)  689/       0 :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(1)  690/       0 :                     ; were the Amplitude Modulation.
(1)  691/       0 :                     ; According to several docs, however, it's actually the high bit.
(1)  692/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  693/       0 :                     	if SourceSMPS2ASM==0
(1)  694/       0 :                     		set vcAM1,op1<<5
(1)  695/       0 :                     		set vcAM2,op2<<5
(1)  696/       0 :                     		set vcAM3,op3<<5
(1)  697/       0 :                     		set vcAM4,op4<<5
(1)  698/       0 :                     	else
(1)  699/       0 :                     		set vcAM1,op1<<7
(1)  700/       0 :                     		set vcAM2,op2<<7
(1)  701/       0 :                     		set vcAM3,op3<<7
(1)  702/       0 :                     		set vcAM4,op4<<7
(1)  703/       0 :                     	endif
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 13 - 5/14/2025 18:0:23


(1)  704/       0 :                     	endm
(1)  705/       0 :                     
(1)  706/       0 :                     ; Voices - First Decay Rate
(1)  707/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  708/       0 :                     	set vcD1R1,op1
(1)  709/       0 :                     	set vcD1R2,op2
(1)  710/       0 :                     	set vcD1R3,op3
(1)  711/       0 :                     	set vcD1R4,op4
(1)  712/       0 :                     	endm
(1)  713/       0 :                     
(1)  714/       0 :                     ; Voices - Second Decay Rate
(1)  715/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  716/       0 :                     	set vcD2R1,op1
(1)  717/       0 :                     	set vcD2R2,op2
(1)  718/       0 :                     	set vcD2R3,op3
(1)  719/       0 :                     	set vcD2R4,op4
(1)  720/       0 :                     	endm
(1)  721/       0 :                     
(1)  722/       0 :                     ; Voices - Decay Level
(1)  723/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  724/       0 :                     	set vcDL1,op1
(1)  725/       0 :                     	set vcDL2,op2
(1)  726/       0 :                     	set vcDL3,op3
(1)  727/       0 :                     	set vcDL4,op4
(1)  728/       0 :                     	endm
(1)  729/       0 :                     
(1)  730/       0 :                     ; Voices - Release Rate
(1)  731/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  732/       0 :                     	set vcRR1,op1
(1)  733/       0 :                     	set vcRR2,op2
(1)  734/       0 :                     	set vcRR3,op3
(1)  735/       0 :                     	set vcRR4,op4
(1)  736/       0 :                     	endm
(1)  737/       0 :                     
(1)  738/       0 :                     ; Voices - Total Level
(1)  739/       0 :                     ; The original SMPS2ASM decides TL high bits automatically,
(1)  740/       0 :                     ; but later versions leave it up to the user.
(1)  741/       0 :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(1)  742/       0 :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(1)  743/       0 :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(1)  744/       0 :                     ; SMPS Z80 does the opposite.
(1)  745/       0 :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(1)  746/       0 :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(1)  747/       0 :                     ; what we do, so we just print a warning.
(1)  748/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  749/       0 :                     	set vcTL1,op1
(1)  750/       0 :                     	set vcTL2,op2
(1)  751/       0 :                     	set vcTL3,op3
(1)  752/       0 :                     	set vcTL4,op4
(1)  753/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  754/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  755/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  756/       0 :                     	if SourceSMPS2ASM==0
(1)  757/       0 :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  758/       0 :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  759/       0 :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  760/       0 :                     		set vcTLMask1,$80
(1)  761/       0 :                     	else
(1)  762/       0 :                     		set vcTLMask4,0
(1)  763/       0 :                     		set vcTLMask3,0
 AS V1.42 Beta [Bld 212] - Source File sonic.asm(sound/_smps2asm_inc.asm) - Page 14 - 5/14/2025 18:0:23


(1)  764/       0 :                     		set vcTLMask2,0
(1)  765/       0 :                     		set vcTLMask1,0
(1)  766/       0 :                     	endif
(1)  767/       0 :                     
(1)  768/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  769/       0 :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  770/       0 :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  771/       0 :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  772/       0 :                     		set vcTLMask1,$80
(1)  773/       0 :                     		set vcTL1,vcTL1&$7F
(1)  774/       0 :                     		set vcTL2,vcTL2&$7F
(1)  775/       0 :                     		set vcTL3,vcTL3&$7F
(1)  776/       0 :                     		set vcTL4,vcTL4&$7F
(1)  777/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  778/       0 :                     		if MOMPASS>1
(1)  779/       0 :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  780/       0 :                     		endif
(1)  781/       0 :                     	endif
(1)  782/       0 :                     
(1)  783/       0 :                     	if SonicDriverVer==2
(1)  784/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  785/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  786/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  787/       0 :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  788/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  789/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  790/       0 :                     	else
(1)  791/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  792/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  793/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  794/       0 :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  795/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  796/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  797/       0 :                     	endif
(1)  798/       0 :                     	endm
(1)  799/       0 :                     
(1)  800/       0 :                     
      18/       0 :                             include "MacroSetup.asm"
(1)    1/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	;listing off		; We don't need to generate anything for a listing file
(1)    3/       0 :                     	listing on			; Want full listing file
(1)    4/       0 :                     	;listing noskipped	; Want listing file, but only the non-skipped part of conditional assembly
(1)    5/       0 :                     	;listing purecode	; Want listing file, but only the final code in expanded macros
(1)    6/       0 :                     	page	0	; Don't want form feeds
(1)    7/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    8/       0 :                     
(1)    9/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   10/       0 :                     
(1)   11/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)   12/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   13/       0 :                     org macro address
(1)   14/       0 :                     	if notZ80(MOMCPU)
(1)   15/       0 :                     		if address < *
(1)   16/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   17/       0 :                     		else
(1)   18/       0 :                     			!org address
(1)   19/       0 :                     		endif
(1)   20/       0 :                     	else
(1)   21/       0 :                     		if address < $
(1)   22/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   23/       0 :                     		else
(1)   24/       0 :                     			while address > $
(1)   25/       0 :                     				db 0
(1)   26/       0 :                     			endm
(1)   27/       0 :                     		endif
(1)   28/       0 :                     	endif
(1)   29/       0 :                         endm
(1)   30/       0 :                     
(1)   31/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   32/       0 :                     org0 macro address
(1)   33/       0 :                     .diff := address - *
(1)   34/       0 :                     	if .diff < 0
(1)   35/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-diff)} bytes)"
(1)   36/       0 :                     	else
(1)   37/       0 :                     		while .diff > 1024
(1)   38/       0 :                     							; AS can only generate 1 kb of code on a single line
(1)   39/       0 :                     			dc.b [1024]0
(1)   40/       0 :                     .diff := .diff - 1024
(1)   41/       0 :                     		endm
(1)   42/       0 :                     		dc.b [.diff]0
(1)   43/       0 :                     	endif
(1)   44/       0 :                         endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; define the cnop pseudo-instruction
(1)   47/       0 :                     cnop macro offset,alignment
(1)   48/       0 :                     	if notZ80(MOMCPU)
(1)   49/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   50/       0 :                     	else
(1)   51/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   52/       0 :                     	endif
(1)   53/       0 :                         endm
(1)   54/       0 :                     
(1)   55/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   56/       0 :                     cnop0 macro offset,alignment
(1)   57/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   58/       0 :                         endm
(1)   59/       0 :                     
(1)   60/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   61/       0 :                     align macro alignment
(1)   62/       0 :                     	cnop 0,alignment
(1)   63/       0 :                         endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   66/       0 :                     align0 macro alignment
(1)   67/       0 :                     	cnop0 0,alignment
(1)   68/       0 :                         endm
(1)   69/       0 :                     
(1)   70/       0 :                     ; define the even pseudo-instruction
(1)   71/       0 :                     even macro
(1)   72/       0 :                     	if notZ80(MOMCPU)
(1)   73/       0 :                     		if (*)&1
(1)   74/       0 :                     			dc.b 0				;ds.b 1
(1)   75/       0 :                     		endif
(1)   76/       0 :                     	else
(1)   77/       0 :                     		if ($)&1
(1)   78/       0 :                     			db 0
(1)   79/       0 :                     		endif
(1)   80/       0 :                     	endif
(1)   81/       0 :                         endm
(1)   82/       0 :                     
(1)   83/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   84/       0 :                     ds macro
(1)   85/       0 :                     	if notZ80(MOMCPU)
(1)   86/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   87/       0 :                     	else
(1)   88/       0 :                     		rept ALLARGS
(1)   89/       0 :                     			db 0
(1)   90/       0 :                     		endm
(1)   91/       0 :                     	endif
(1)   92/       0 :                        endm
(1)   93/       0 :                     
(1)   94/       0 :                     ; define a trace macro
(1)   95/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   96/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   97/       0 :                     	if MOMPASS=1
(1)   98/       0 :                     		if ("ALLARGS"<>"")
(1)   99/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)  100/       0 :                     		else
(1)  101/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)  102/       0 :                     		endif
(1)  103/       0 :                     tracenum := (tracenum+1)
(1)  104/       0 :                     	endif
(1)  105/       0 :                        endm
(1)  106/       0 : =$0                  tracenum := 0
(1)  107/       0 :                     
(1)  108/       0 : =>TRUE                   if zeroOffsetOptimization=0
(1)  109/       0 :                         ; disable a space optimization in AS so we can build a bit-perfect ROM
(1)  110/       0 :                         ; (the hard way, but it requires no modification of AS itself)
(1)  111/       0 :                     
(1)  112/       0 :                     
(1)  113/       0 :                     chkop function op,ref,(substr(lowstring(op),0,strlen(ref))<>ref)
(1)  114/       0 :                     
(1)  115/       0 :                     ; 1-arg instruction that's self-patching to remove 0-offset optimization
(1)  116/       0 :                     insn1op	 macro oper,x
(1)  117/       0 :                     	  if (chkop("x","0("))
(1)  118/       0 :                     		!oper	x
(1)  119/       0 :                     	  else
(1)  120/       0 :                     		!oper	1+x
(1)  121/       0 :                     		!org	*-1
(1)  122/       0 :                     		!dc.b	0
(1)  123/       0 :                     	  endif
(1)  124/       0 :                     	 endm
(1)  125/       0 :                     
(1)  126/       0 :                     ; 2-arg instruction that's self-patching to remove 0-offset optimization
(1)  127/       0 :                     insn2op	 macro oper,x,y
(1)  128/       0 :                     	  if (chkop("x","0("))
(1)  129/       0 :                     		  if (chkop("y","0("))
(1)  130/       0 :                     			!oper	x,y
(1)  131/       0 :                     		  else
(1)  132/       0 :                     			!oper	x,1+y
(1)  133/       0 :                     			!org	*-1
(1)  134/       0 :                     			!dc.b	0
(1)  135/       0 :                     		  endif
(1)  136/       0 :                     	  else
(1)  137/       0 :                     		if chkop("y","d")
(1)  138/       0 :                     		  if (chkop("y","0("))
(1)  139/       0 :                     start:
(1)  140/       0 :                     			!oper	1+x,y
(1)  141/       0 :                     end:
(1)  142/       0 :                     			!org	start+3
(1)  143/       0 :                     			!dc.b	0
(1)  144/       0 :                     			!org	end
(1)  145/       0 :                     		  else
(1)  146/       0 :                     			!oper	1+x,1+y
(1)  147/       0 :                     			!org	*-3
(1)  148/       0 :                     			!dc.b	0
(1)  149/       0 :                     			!org	*+1
(1)  150/       0 :                     			!dc.b	0
(1)  151/       0 :                     		  endif
(1)  152/       0 :                     		else
(1)  153/       0 :                     			!oper	1+x,y
(1)  154/       0 :                     			!org	*-1
(1)  155/       0 :                     			!dc.b	0
(1)  156/       0 :                     		endif
(1)  157/       0 :                     	  endif
(1)  158/       0 :                     	 endm
(1)  159/       0 :                     
(1)  160/       0 :                     	; instructions that were used with 0(a#) syntax
(1)  161/       0 :                     	; defined to assemble as they originally did
(1)  162/       0 :                     _move	macro
(1)  163/       0 :                     		insn2op move.ATTRIBUTE, ALLARGS
(1)  164/       0 :                     	endm
(1)  165/       0 :                     _add	macro
(1)  166/       0 :                     		insn2op add.ATTRIBUTE, ALLARGS
(1)  167/       0 :                     	endm
(1)  168/       0 :                     _addq	macro
(1)  169/       0 :                     		insn2op addq.ATTRIBUTE, ALLARGS
(1)  170/       0 :                     	endm
(1)  171/       0 :                     _cmp	macro
(1)  172/       0 :                     		insn2op cmp.ATTRIBUTE, ALLARGS
(1)  173/       0 :                     	endm
(1)  174/       0 :                     _cmpi	macro
(1)  175/       0 :                     		insn2op cmpi.ATTRIBUTE, ALLARGS
(1)  176/       0 :                     	endm
(1)  177/       0 :                     _clr	macro
(1)  178/       0 :                     		insn1op clr.ATTRIBUTE, ALLARGS
(1)  179/       0 :                     	endm
(1)  180/       0 :                     _tst	macro
(1)  181/       0 :                     		insn1op tst.ATTRIBUTE, ALLARGS
(1)  182/       0 :                     	endm
(1)  183/       0 :                     
(1)  184/       0 : =>FALSE              	else
(1)  185/       0 :                     
(1)  186/       0 :                     	; regular meaning to the assembler; better but unlike original
(1)  187/       0 :                     _move	macro
(1)  188/       0 :                     		!move.ATTRIBUTE ALLARGS
(1)  189/       0 :                     	endm
(1)  190/       0 :                     _add	macro
(1)  191/       0 :                     		!add.ATTRIBUTE ALLARGS
(1)  192/       0 :                     	endm
(1)  193/       0 :                     _addq	macro
(1)  194/       0 :                     		!addq.ATTRIBUTE ALLARGS
(1)  195/       0 :                     	endm
(1)  196/       0 :                     _cmp	macro
(1)  197/       0 :                     		!cmp.ATTRIBUTE ALLARGS
(1)  198/       0 :                     	endm
(1)  199/       0 :                     _cmpi	macro
(1)  200/       0 :                     		!cmpi.ATTRIBUTE ALLARGS
(1)  201/       0 :                     	endm
(1)  202/       0 :                     _clr	macro
(1)  203/       0 :                     		!clr.ATTRIBUTE ALLARGS
(1)  204/       0 :                     	endm
(1)  205/       0 :                     _tst	macro
(1)  206/       0 :                     		!tst.ATTRIBUTE ALLARGS
(1)  207/       0 :                     	endm
(1)  208/       0 :                     
(1)  209/       0 : [108]                    endif
(1)  210/       0 :                     
(1)  211/       0 :                     bit function nBits,1<<(nBits-1)
(1)  212/       0 :                     signmask function val,nBits,-((-(val&bit(nBits)))&bit(nBits))
(1)  213/       0 :                     signextend function val,nBits,(val+signmask(val,nBits))!signmask(val,nBits)
(1)  214/       0 :                     signextendB function val,signextend(val,8)
(1)  215/       0 :                     
      19/       0 :                     	include "Macros.asm"
(1)    1/       0 :                     ; calculates initial loop counter value for a dbf loop
(1)    2/       0 :                     ; that writes n bytes total at 4 bytes per iteration
(1)    3/       0 :                     bytesToLcnt function n,n>>2-1
(1)    4/       0 :                     
(1)    5/       0 :                     ; calculates initial loop counter value for a dbf loop
(1)    6/       0 :                     ; that writes n bytes total at 2 bytes per iteration
(1)    7/       0 :                     bytesToWcnt function n,n>>1-1
(1)    8/       0 :                     
(1)    9/       0 :                     ; calculates initial loop counter value for a dbf loop
(1)   10/       0 :                     ; that writes n bytes total at x bytes per iteration
(1)   11/       0 :                     bytesToXcnt function n,x,n/x-1
(1)   12/       0 :                     
(1)   13/       0 :                     ; ---------------------------------------------------------------------------
(1)   14/       0 :                     ; Fill portion of RAM with contents from d0
(1)   15/       0 :                     ; input: start, end
(1)   16/       0 :                     ; ---------------------------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 :                     FillRAM:	macro start,end
(1)   19/       0 :                     		lea	(start).w,a1
(1)   20/       0 :                     		move.w	#((end)-(start))/4-1,d1
(1)   21/       0 :                     
(1)   22/       0 :                     .loop:
(1)   23/       0 :                     		move.l	d0,(a1)+
(1)   24/       0 :                     		dbf	d1,.loop
(1)   25/       0 :                     
(1)   26/       0 :                     	if (end-start)&2
(1)   27/       0 :                     		move.w	d0,(a1)+
(1)   28/       0 :                     	endif
(1)   29/       0 :                     
(1)   30/       0 :                     	if (end-start)&1
(1)   31/       0 :                     		move.b	d0,(a1)+
(1)   32/       0 :                     	endif
(1)   33/       0 :                     		endm
(1)   34/       0 :                     
(1)   35/       0 :                     ; ---------------------------------------------------------------------------
(1)   36/       0 :                     ; start the Z80
(1)   37/       0 :                     ; ---------------------------------------------------------------------------
(1)   38/       0 :                     startZ80:       macro
(1)   39/       0 :                     		move.w	#0,(z80_bus_request).l
(1)   40/       0 :                     		endm
(1)   41/       0 :                     
(1)   42/       0 :                     ; ---------------------------------------------------------------------------
(1)   43/       0 :                     ; stop the Z80
(1)   44/       0 :                     ; ---------------------------------------------------------------------------
(1)   45/       0 :                     stopZ80:        macro
(1)   46/       0 :                     		move.w	#$100,(z80_bus_request).l
(1)   47/       0 :                     		endm
(1)   48/       0 :                     
(1)   49/       0 :                     ; ---------------------------------------------------------------------------
(1)   50/       0 :                     ; wait for Z80 to stop
(1)   51/       0 :                     ; ---------------------------------------------------------------------------
(1)   52/       0 :                     
(1)   53/       0 :                     waitZ80:	macro
(1)   54/       0 :                     .wait:		btst	#0,(z80_bus_request).l
(1)   55/       0 :                     		bne.s	.wait
(1)   56/       0 :                     		endm
(1)   57/       0 :                     
(1)   58/       0 :                     ; ---------------------------------------------------------------------------
(1)   59/       0 :                     ; reset the Z80
(1)   60/       0 :                     ; ---------------------------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 :                     resetZ80:	macro
(1)   63/       0 :                     		move.w	#$100,(z80_reset).l
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     resetZ80a:	macro
(1)   67/       0 :                     		move.w	#0,(z80_reset).l
(1)   68/       0 :                     		endm
(1)   69/       0 :                     
(1)   70/       0 :                     ; ---------------------------------------------------------------------------
(1)   71/       0 :                     ; disable interrupts
(1)   72/       0 :                     ; ---------------------------------------------------------------------------
(1)   73/       0 :                     
(1)   74/       0 :                     disable_ints:	macro
(1)   75/       0 :                     		move	#$2700,sr
(1)   76/       0 :                     		endm
(1)   77/       0 :                     
(1)   78/       0 :                     ; ---------------------------------------------------------------------------
(1)   79/       0 :                     ; enable interrupts
(1)   80/       0 :                     ; ---------------------------------------------------------------------------
(1)   81/       0 :                     
(1)   82/       0 :                     enable_ints:	macro
(1)   83/       0 :                     		move	#$2300,sr
(1)   84/       0 :                     		endm
(1)   85/       0 :                     		
(1)   86/       0 :                     ; function to make a little-endian 16-bit pointer for the Z80 sound driver
(1)   87/       0 :                     z80_ptr function x,(x)<<8&$FF00|(x)>>8&$7F|$80
(1)   88/       0 :                     
(1)   89/       0 :                     ; Function to make a little endian (z80) pointer
(1)   90/       0 :                     k68z80Pointer function addr,((((addr&$7FFF)+$8000)<<8)&$FF00)+(((addr&$7FFF)+$8000)>>8)
(1)   91/       0 :                     
(1)   92/       0 :                     little_endian function x,(x)<<8&$FF00|(x)>>8&$FF
(1)   93/       0 :                     
(1)   94/       0 :                     startBank macro {INTLABEL}
(1)   95/       0 :                     	align	$8000
(1)   96/       0 :                     __LABEL__ label *
(1)   97/       0 :                     soundBankStart := __LABEL__
(1)   98/       0 :                     soundBankName := "__LABEL__"
(1)   99/       0 :                         endm
(1)  100/       0 :                     
(1)  101/       0 : =$1                  DebugSoundbanks := 1
(1)  102/       0 :                     
(1)  103/       0 :                     finishBank macro
(1)  104/       0 :                     	if * > soundBankStart + $8000
(1)  105/       0 :                     		fatal "soundBank \{soundBankName} must fit in $8000 bytes but was $\{*-soundBankStart}. Try moving something to the other bank."
(1)  106/       0 :                     	elseif (DebugSoundbanks<>0)&&(MOMPASS=1)
(1)  107/       0 :                     		message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end."
(1)  108/       0 :                     	endif
(1)  109/       0 :                         endm
(1)  110/       0 :                         
(1)  111/       0 :                     ; sign-extends a 32-bit integer to 64-bit
(1)  112/       0 :                     ; all RAM addresses are run through this function to allow them to work in both 16-bit and 32-bit addressing modes
(1)  113/       0 :                     ramaddr function x,(-(x&$80000000)<<1)|x   
(1)  114/       0 :                         
(1)  115/       0 :                     ; ---------------------------------------------------------------------------
(1)  116/       0 :                     ; turn a sample rate into a djnz loop counter
(1)  117/       0 :                     ; ---------------------------------------------------------------------------
(1)  118/       0 :                     
(1)  119/       0 :                     pcmLoopCounter function sampleRate,baseCycles, 1+(53693175/15/(sampleRate)-(baseCycles)+(13/2))/13
(1)  120/       0 :                     dpcmLoopCounter function sampleRate, pcmLoopCounter(sampleRate,268/2) ; 268 is the number of cycles zPlayPCMLoop takes.
(1)  121/       0 :                     
      20/       0 :                     	include "Constants.asm"
(1)    1/       0 :                     ; VDP addressses
(1)    2/       0 : =$C00000             vdp_data_port:		equ $C00000
(1)    3/       0 : =$C00004             vdp_control_port:	equ $C00004
(1)    4/       0 :                     
(1)    5/       0 :                     ; Z80 addresses
(1)    6/       0 : =$A00000             z80_ram:		equ $A00000			; start of Z80 RAM
(1)    7/       0 : =$A01FFD             z80_dac_status:		equ z80_ram+zDAC_Status
(1)    8/       0 : =$A01FFF             z80_dac_sample:		equ z80_ram+zDAC_Sample
(1)    9/       0 : =$A02000             z80_ram_end:		equ $A02000			; end of non-reserved Z80 RAM
(1)   10/       0 : =$A10001             z80_version:		equ $A10001
(1)   11/       0 : =$A10008             z80_port_1_control:	equ $A10008
(1)   12/       0 : =$A1000C             z80_expansion_control:	equ $A1000C
(1)   13/       0 : =$A11100             z80_bus_request:	equ $A11100
(1)   14/       0 : =$A11200             z80_reset:		equ $A11200
(1)   15/       0 :                     
(1)   16/       0 : =$0                  id_Sega:	equ ptr_GM_Sega-GameModeArray
(1)   17/       0 : =$8                  id_Title:	equ ptr_GM_Title-GameModeArray
(1)   18/       0 : =$10                 id_Field:	equ ptr_GM_Field-GameModeArray
(1)   19/       0 : =$18                 id_Level:	equ ptr_GM_Level-GameModeArray
(1)   20/       0 : =$20                 id_Null:	equ ptr_GM_Null-GameModeArray
(1)   21/       0 : =$30                 id_LevelSelect:	equ ptr_GM_LevelSelect-GameModeArray
(1)   22/       0 : =$40                 id_Options:	equ ptr_GM_Options-GameModeArray
(1)   23/       0 :                     
(1)   24/       0 :                     ; Colours
(1)   25/       0 : =$0                  cBlack:		equ $000		; colour black
(1)   26/       0 : =$EEE                cWhite:		equ $EEE		; colour white
(1)   27/       0 : =$E00                cBlue:		equ $E00		; colour blue
(1)   28/       0 : =$E0                 cGreen:		equ $0E0		; colour green
(1)   29/       0 : =$E                  cRed:		equ $00E		; colour red
(1)   30/       0 : =$EE                 cYellow:	equ cGreen+cRed		; colour yellow
(1)   31/       0 : =$EE0                cAqua:		equ cGreen+cBlue	; colour aqua
(1)   32/       0 : =$E0E                cMagenta:	equ cBlue+cRed		; colour magenta
(1)   33/       0 :                     
(1)   34/       0 :                     ; Joypad input
(1)   35/       0 : =$80                 btnStart:	equ %10000000 ; Start button	($80)
(1)   36/       0 : =$40                 btnA:		equ %01000000 ; A		($40)
(1)   37/       0 : =$20                 btnC:		equ %00100000 ; C		($20)
(1)   38/       0 : =$10                 btnB:		equ %00010000 ; B		($10)
(1)   39/       0 : =$8                  btnR:		equ %00001000 ; Right		($08)
(1)   40/       0 : =$4                  btnL:		equ %00000100 ; Left		($04)
(1)   41/       0 : =$2                  btnDn:		equ %00000010 ; Down		($02)
(1)   42/       0 : =$1                  btnUp:		equ %00000001 ; Up		($01)
(1)   43/       0 : =$F                  btnDir:		equ %00001111 ; Any direction	($0F)
(1)   44/       0 : =$70                 btnABC:		equ %01110000 ; A, B or C	($70)
(1)   45/       0 : =$7                  bitStart:	equ 7
(1)   46/       0 : =$6                  bitA:		equ 6
(1)   47/       0 : =$5                  bitC:		equ 5
(1)   48/       0 : =$4                  bitB:		equ 4
(1)   49/       0 : =$3                  bitR:		equ 3
(1)   50/       0 : =$2                  bitL:		equ 2
(1)   51/       0 : =$1                  bitDn:		equ 1
(1)   52/       0 : =$0                  bitUp:		equ 0
(1)   53/       0 :                     
(1)   54/       0 :                     ; Object variables
(1)   55/       0 : =$10                 obMap:		equ $10					; mappings address (4 bytes)
(1)   56/       0 :                     
(1)   57/       0 :                     ; Background music
(1)   58/       0 : =$81                 bgm_First:	equ $81
(1)   59/       0 : =$81                 bgm_Electoria:	equ ((ptr_mus81-MusicIndex)/2)+bgm_First
(1)   60/       0 : =$82                 bgm_Walkin:	equ ((ptr_mus82-MusicIndex)/2)+bgm_First
(1)   61/       0 : =$83                 bgm_HyperHyper:	equ ((ptr_mus83-MusicIndex)/2)+bgm_First
(1)   62/       0 : =$84                 bgm_EveningStar:	equ ((ptr_mus84-MusicIndex)/2)+bgm_First
(1)   63/       0 : =$85                 bgm_Moonrise:	equ ((ptr_mus85-MusicIndex)/2)+bgm_First
(1)   64/       0 : =$86                 bgm_GameOver:	equ ((ptr_mus86-MusicIndex)/2)+bgm_First
(1)   65/       0 : =$87                 bgm_Last:	equ ((ptr_musend-MusicIndex)/2)+bgm_First
(1)   66/       0 :                     
(1)   67/       0 :                     ; Sound effects
(1)   68/       0 : =$A0                 sfx_First:	equ $A0
(1)   69/       0 : =$A0                 sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/2)+sfx_First
(1)   70/       0 : =$A1                 sfx_Cash:	equ ((ptr_sndA1-SoundIndex)/2)+sfx_First
(1)   71/       0 : =$A2                 sfx_A2:		equ ((ptr_sndA2-SoundIndex)/2)+sfx_First
(1)   72/       0 : =$A3                 sfx_Bomb:	equ ((ptr_sndA3-SoundIndex)/2)+sfx_First
(1)   73/       0 : =$A4                 sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/2)+sfx_First
(1)   74/       0 : =$A5                 sfx_RingLoss:	equ ((ptr_sndA5-SoundIndex)/2)+sfx_First
(1)   75/       0 : =$A6                 sfx_Ring:	equ ((ptr_sndA6-SoundIndex)/2)+sfx_First
(1)   76/       0 : =$A7                 sfx_BreakItem:	equ ((ptr_sndA7-SoundIndex)/2)+sfx_First
(1)   77/       0 : =$A8                 sfx_Spring:	equ ((ptr_sndA8-SoundIndex)/2)+sfx_First
(1)   78/       0 : =$A9                 sfx_Lamppost:	equ ((ptr_sndA9-SoundIndex)/2)+sfx_First
(1)   79/       0 : =$AA                 sfx_AA:		equ ((ptr_sndAA-SoundIndex)/2)+sfx_First
(1)   80/       0 : =$AB                 sfx_AB:		equ ((ptr_sndAB-SoundIndex)/2)+sfx_First
(1)   81/       0 : =$AC                 sfx_AC:		equ ((ptr_sndAC-SoundIndex)/2)+sfx_First
(1)   82/       0 : =$AD                 sfx_AD:		equ ((ptr_sndAD-SoundIndex)/2)+sfx_First
(1)   83/       0 : =$AE                 sfx_AE:		equ ((ptr_sndAE-SoundIndex)/2)+sfx_First
(1)   84/       0 : =$AF                 sfx_AF:		equ ((ptr_sndAF-SoundIndex)/2)+sfx_First
(1)   85/       0 : =$B0                 sfx_Last:	equ ((ptr_sndend-SoundIndex)/2)+sfx_First
(1)   86/       0 :                     
(1)   87/       0 :                     ; Special sound effects
(1)   88/       0 : =$D0                 spec_First:	equ $D0
(1)   89/       0 : =$D0                 spec_Jump:	equ ((ptr_sndD0-SpecSoundIndex)/2)+spec_First
(1)   90/       0 : =$D1                 spec_Cash:	equ ((ptr_sndD1-SpecSoundIndex)/2)+spec_First
(1)   91/       0 : =$D2                 spec_Bomb:	equ ((ptr_sndD2-SpecSoundIndex)/2)+spec_First
(1)   92/       0 : =$D0                 spec_Last:	equ ((ptr_sndend-SpecSoundIndex)/2)+spec_First
(1)   93/       0 :                     
(1)   94/       0 : =$E0                 flg_First:	= $E0
(1)   95/       0 : =$E0                 flg_FadeOut:	equ ((ptr_flgE0-CmdPtrTable)/2)+flg_First
(1)   96/       0 : =$E1                 flg_Stop:	equ ((ptr_flgE1-CmdPtrTable)/2)+flg_First
(1)   97/       0 : =$E2                 flg_StopPSG:	equ ((ptr_flgE2-CmdPtrTable)/2)+flg_First
(1)   98/       0 : =$E3                 flg_FadeIn:	equ ((ptr_flgE3-CmdPtrTable)/2)+flg_First
(1)   99/       0 : =$E4                 flg_Last:	equ ((ptr_flgend-CmdPtrTable)/2)+flg_First
(1)  100/       0 :                     
      21/       0 :                     	include "Variables.asm"
(1)    1/       0 :                     
(1)    2/FFFFFFFFFFFF0000 :                     	phase	ramaddr($FFFF0000)
(1)    3/FFFFFFFFFFFF0000 : (MACRO)              v_startofram:	ds.b $200
(1)    3/FFFFFFFFFFFF0000 : =>TRUE                       if notZ80(MOMCPU)
(1)    3/FFFFFFFFFFFF0000 :                                     !ds.b $200
(1)    3/FFFFFFFFFFFF0200 : =>FALSE                      else
(1)    3/FFFFFFFFFFFF0200 :                                     rept $200
(1)    3/FFFFFFFFFFFF0200 :                                             db 0
(1)    3/FFFFFFFFFFFF0200 :                                     endm
(1)    3/FFFFFFFFFFFF0200 : [3]                          endif
(1)    4/FFFFFFFFFFFF0200 :                     
(1)    5/FFFFFFFFFFFF0200 :                     v_systemstack:	
(1)    6/FFFFFFFFFFFF0200 : (MACRO)              unk_0200:	ds.b $200
(1)    6/FFFFFFFFFFFF0200 : =>TRUE                       if notZ80(MOMCPU)
(1)    6/FFFFFFFFFFFF0200 :                                     !ds.b $200
(1)    6/FFFFFFFFFFFF0400 : =>FALSE                      else
(1)    6/FFFFFFFFFFFF0400 :                                     rept $200
(1)    6/FFFFFFFFFFFF0400 :                                             db 0
(1)    6/FFFFFFFFFFFF0400 :                                     endm
(1)    6/FFFFFFFFFFFF0400 : [6]                          endif
(1)    7/FFFFFFFFFFFF0400 : (MACRO)              unk_0400:	ds.b $200
(1)    7/FFFFFFFFFFFF0400 : =>TRUE                       if notZ80(MOMCPU)
(1)    7/FFFFFFFFFFFF0400 :                                     !ds.b $200
(1)    7/FFFFFFFFFFFF0600 : =>FALSE                      else
(1)    7/FFFFFFFFFFFF0600 :                                     rept $200
(1)    7/FFFFFFFFFFFF0600 :                                             db 0
(1)    7/FFFFFFFFFFFF0600 :                                     endm
(1)    7/FFFFFFFFFFFF0600 : [7]                          endif
(1)    8/FFFFFFFFFFFF0600 : (MACRO)              unk_0600:	ds.b $200
(1)    8/FFFFFFFFFFFF0600 : =>TRUE                       if notZ80(MOMCPU)
(1)    8/FFFFFFFFFFFF0600 :                                     !ds.b $200
(1)    8/FFFFFFFFFFFF0800 : =>FALSE                      else
(1)    8/FFFFFFFFFFFF0800 :                                     rept $200
(1)    8/FFFFFFFFFFFF0800 :                                             db 0
(1)    8/FFFFFFFFFFFF0800 :                                     endm
(1)    8/FFFFFFFFFFFF0800 : [8]                          endif
(1)    9/FFFFFFFFFFFF0800 : (MACRO)              unk_0800:	ds.b $200
(1)    9/FFFFFFFFFFFF0800 : =>TRUE                       if notZ80(MOMCPU)
(1)    9/FFFFFFFFFFFF0800 :                                     !ds.b $200
(1)    9/FFFFFFFFFFFF0A00 : =>FALSE                      else
(1)    9/FFFFFFFFFFFF0A00 :                                     rept $200
(1)    9/FFFFFFFFFFFF0A00 :                                             db 0
(1)    9/FFFFFFFFFFFF0A00 :                                     endm
(1)    9/FFFFFFFFFFFF0A00 : [9]                          endif
(1)   10/FFFFFFFFFFFF0A00 : (MACRO)              unk_0A00:	ds.b $102
(1)   10/FFFFFFFFFFFF0A00 : =>TRUE                       if notZ80(MOMCPU)
(1)   10/FFFFFFFFFFFF0A00 :                                     !ds.b $102
(1)   10/FFFFFFFFFFFF0B02 : =>FALSE                      else
(1)   10/FFFFFFFFFFFF0B02 :                                     rept $102
(1)   10/FFFFFFFFFFFF0B02 :                                             db 0
(1)   10/FFFFFFFFFFFF0B02 :                                     endm
(1)   10/FFFFFFFFFFFF0B02 : [10]                         endif
(1)   11/FFFFFFFFFFFF0B02 : (MACRO)              unk_0B02:	ds.b $82
(1)   11/FFFFFFFFFFFF0B02 : =>TRUE                       if notZ80(MOMCPU)
(1)   11/FFFFFFFFFFFF0B02 :                                     !ds.b $82
(1)   11/FFFFFFFFFFFF0B84 : =>FALSE                      else
(1)   11/FFFFFFFFFFFF0B84 :                                     rept $82
(1)   11/FFFFFFFFFFFF0B84 :                                             db 0
(1)   11/FFFFFFFFFFFF0B84 :                                     endm
(1)   11/FFFFFFFFFFFF0B84 : [11]                         endif
(1)   12/FFFFFFFFFFFF0B84 : (MACRO)              unk_0B84:	ds.b $102
(1)   12/FFFFFFFFFFFF0B84 : =>TRUE                       if notZ80(MOMCPU)
(1)   12/FFFFFFFFFFFF0B84 :                                     !ds.b $102
(1)   12/FFFFFFFFFFFF0C86 : =>FALSE                      else
(1)   12/FFFFFFFFFFFF0C86 :                                     rept $102
(1)   12/FFFFFFFFFFFF0C86 :                                             db 0
(1)   12/FFFFFFFFFFFF0C86 :                                     endm
(1)   12/FFFFFFFFFFFF0C86 : [12]                         endif
(1)   13/FFFFFFFFFFFF0C86 : (MACRO)              unk_0C86:	ds.b $82
(1)   13/FFFFFFFFFFFF0C86 : =>TRUE                       if notZ80(MOMCPU)
(1)   13/FFFFFFFFFFFF0C86 :                                     !ds.b $82
(1)   13/FFFFFFFFFFFF0D08 : =>FALSE                      else
(1)   13/FFFFFFFFFFFF0D08 :                                     rept $82
(1)   13/FFFFFFFFFFFF0D08 :                                             db 0
(1)   13/FFFFFFFFFFFF0D08 :                                     endm
(1)   13/FFFFFFFFFFFF0D08 : [13]                         endif
(1)   14/FFFFFFFFFFFF0D08 : (MACRO)              v_128x128:	ds.b $BAF8
(1)   14/FFFFFFFFFFFF0D08 : =>TRUE                       if notZ80(MOMCPU)
(1)   14/FFFFFFFFFFFF0D08 :                                     !ds.b $BAF8
(1)   14/FFFFFFFFFFFFC800 : =>FALSE                      else
(1)   14/FFFFFFFFFFFFC800 :                                     rept $BAF8
(1)   14/FFFFFFFFFFFFC800 :                                             db 0
(1)   14/FFFFFFFFFFFFC800 :                                     endm
(1)   14/FFFFFFFFFFFFC800 : [14]                         endif
(1)   15/FFFFFFFFFFFFC800 : (MACRO)              unk_C800:	ds.b $12
(1)   15/FFFFFFFFFFFFC800 : =>TRUE                       if notZ80(MOMCPU)
(1)   15/FFFFFFFFFFFFC800 :                                     !ds.b $12
(1)   15/FFFFFFFFFFFFC812 : =>FALSE                      else
(1)   15/FFFFFFFFFFFFC812 :                                     rept $12
(1)   15/FFFFFFFFFFFFC812 :                                             db 0
(1)   15/FFFFFFFFFFFFC812 :                                     endm
(1)   15/FFFFFFFFFFFFC812 : [15]                         endif
(1)   16/FFFFFFFFFFFFC812 : (MACRO)              unk_C812:	ds.b 6
(1)   16/FFFFFFFFFFFFC812 : =>TRUE                       if notZ80(MOMCPU)
(1)   16/FFFFFFFFFFFFC812 :                                     !ds.b 6
(1)   16/FFFFFFFFFFFFC818 : =>FALSE                      else
(1)   16/FFFFFFFFFFFFC818 :                                     rept 6
(1)   16/FFFFFFFFFFFFC818 :                                             db 0
(1)   16/FFFFFFFFFFFFC818 :                                     endm
(1)   16/FFFFFFFFFFFFC818 : [16]                         endif
(1)   17/FFFFFFFFFFFFC818 : (MACRO)              unk_C818:	ds.b 6
(1)   17/FFFFFFFFFFFFC818 : =>TRUE                       if notZ80(MOMCPU)
(1)   17/FFFFFFFFFFFFC818 :                                     !ds.b 6
(1)   17/FFFFFFFFFFFFC81E : =>FALSE                      else
(1)   17/FFFFFFFFFFFFC81E :                                     rept 6
(1)   17/FFFFFFFFFFFFC81E :                                             db 0
(1)   17/FFFFFFFFFFFFC81E :                                     endm
(1)   17/FFFFFFFFFFFFC81E : [17]                         endif
(1)   18/FFFFFFFFFFFFC81E : (MACRO)              unk_C81E:	ds.b 6
(1)   18/FFFFFFFFFFFFC81E : =>TRUE                       if notZ80(MOMCPU)
(1)   18/FFFFFFFFFFFFC81E :                                     !ds.b 6
(1)   18/FFFFFFFFFFFFC824 : =>FALSE                      else
(1)   18/FFFFFFFFFFFFC824 :                                     rept 6
(1)   18/FFFFFFFFFFFFC824 :                                             db 0
(1)   18/FFFFFFFFFFFFC824 :                                     endm
(1)   18/FFFFFFFFFFFFC824 : [18]                         endif
(1)   19/FFFFFFFFFFFFC824 : (MACRO)              unk_C824:	ds.b 6
(1)   19/FFFFFFFFFFFFC824 : =>TRUE                       if notZ80(MOMCPU)
(1)   19/FFFFFFFFFFFFC824 :                                     !ds.b 6
(1)   19/FFFFFFFFFFFFC82A : =>FALSE                      else
(1)   19/FFFFFFFFFFFFC82A :                                     rept 6
(1)   19/FFFFFFFFFFFFC82A :                                             db 0
(1)   19/FFFFFFFFFFFFC82A :                                     endm
(1)   19/FFFFFFFFFFFFC82A : [19]                         endif
(1)   20/FFFFFFFFFFFFC82A : (MACRO)              unk_C82A:	ds.b 6
(1)   20/FFFFFFFFFFFFC82A : =>TRUE                       if notZ80(MOMCPU)
(1)   20/FFFFFFFFFFFFC82A :                                     !ds.b 6
(1)   20/FFFFFFFFFFFFC830 : =>FALSE                      else
(1)   20/FFFFFFFFFFFFC830 :                                     rept 6
(1)   20/FFFFFFFFFFFFC830 :                                             db 0
(1)   20/FFFFFFFFFFFFC830 :                                     endm
(1)   20/FFFFFFFFFFFFC830 : [20]                         endif
(1)   21/FFFFFFFFFFFFC830 : (MACRO)              unk_C830:	ds.b 2
(1)   21/FFFFFFFFFFFFC830 : =>TRUE                       if notZ80(MOMCPU)
(1)   21/FFFFFFFFFFFFC830 :                                     !ds.b 2
(1)   21/FFFFFFFFFFFFC832 : =>FALSE                      else
(1)   21/FFFFFFFFFFFFC832 :                                     rept 2
(1)   21/FFFFFFFFFFFFC832 :                                             db 0
(1)   21/FFFFFFFFFFFFC832 :                                     endm
(1)   21/FFFFFFFFFFFFC832 : [21]                         endif
(1)   22/FFFFFFFFFFFFC832 : (MACRO)              v_vdpindex:	ds.l 1
(1)   22/FFFFFFFFFFFFC832 : =>TRUE                       if notZ80(MOMCPU)
(1)   22/FFFFFFFFFFFFC832 :                                     !ds.l 1
(1)   22/FFFFFFFFFFFFC836 : =>FALSE                      else
(1)   22/FFFFFFFFFFFFC836 :                                     rept 1
(1)   22/FFFFFFFFFFFFC836 :                                             db 0
(1)   22/FFFFFFFFFFFFC836 :                                     endm
(1)   22/FFFFFFFFFFFFC836 : [22]                         endif
(1)   23/FFFFFFFFFFFFC836 : (MACRO)              unk_C836:	ds.b 6
(1)   23/FFFFFFFFFFFFC836 : =>TRUE                       if notZ80(MOMCPU)
(1)   23/FFFFFFFFFFFFC836 :                                     !ds.b 6
(1)   23/FFFFFFFFFFFFC83C : =>FALSE                      else
(1)   23/FFFFFFFFFFFFC83C :                                     rept 6
(1)   23/FFFFFFFFFFFFC83C :                                             db 0
(1)   23/FFFFFFFFFFFFC83C :                                     endm
(1)   23/FFFFFFFFFFFFC83C : [23]                         endif
(1)   24/FFFFFFFFFFFFC83C : (MACRO)              	ds.b $FA
(1)   24/FFFFFFFFFFFFC83C : =>TRUE                       if notZ80(MOMCPU)
(1)   24/FFFFFFFFFFFFC83C :                                     !ds.b $FA
(1)   24/FFFFFFFFFFFFC936 : =>FALSE                      else
(1)   24/FFFFFFFFFFFFC936 :                                     rept $FA
(1)   24/FFFFFFFFFFFFC936 :                                             db 0
(1)   24/FFFFFFFFFFFFC936 :                                     endm
(1)   24/FFFFFFFFFFFFC936 : [24]                         endif
(1)   25/FFFFFFFFFFFFC936 : (MACRO)              unk_C936:	ds.b 1
(1)   25/FFFFFFFFFFFFC936 : =>TRUE                       if notZ80(MOMCPU)
(1)   25/FFFFFFFFFFFFC936 :                                     !ds.b 1
(1)   25/FFFFFFFFFFFFC937 : =>FALSE                      else
(1)   25/FFFFFFFFFFFFC937 :                                     rept 1
(1)   25/FFFFFFFFFFFFC937 :                                             db 0
(1)   25/FFFFFFFFFFFFC937 :                                     endm
(1)   25/FFFFFFFFFFFFC937 : [25]                         endif
(1)   26/FFFFFFFFFFFFC937 : (MACRO)              unk_C937:	ds.b 1
(1)   26/FFFFFFFFFFFFC937 : =>TRUE                       if notZ80(MOMCPU)
(1)   26/FFFFFFFFFFFFC937 :                                     !ds.b 1
(1)   26/FFFFFFFFFFFFC938 : =>FALSE                      else
(1)   26/FFFFFFFFFFFFC938 :                                     rept 1
(1)   26/FFFFFFFFFFFFC938 :                                             db 0
(1)   26/FFFFFFFFFFFFC938 :                                     endm
(1)   26/FFFFFFFFFFFFC938 : [26]                         endif
(1)   27/FFFFFFFFFFFFC938 : (MACRO)              unk_C938:	ds.b 1
(1)   27/FFFFFFFFFFFFC938 : =>TRUE                       if notZ80(MOMCPU)
(1)   27/FFFFFFFFFFFFC938 :                                     !ds.b 1
(1)   27/FFFFFFFFFFFFC939 : =>FALSE                      else
(1)   27/FFFFFFFFFFFFC939 :                                     rept 1
(1)   27/FFFFFFFFFFFFC939 :                                             db 0
(1)   27/FFFFFFFFFFFFC939 :                                     endm
(1)   27/FFFFFFFFFFFFC939 : [27]                         endif
(1)   28/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFD59A   v_ngfx_buffer:	equ ramaddr($FFFFD59A)
(1)   29/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFD822   v_gamemode:	equ ramaddr($FFFFD822)			; (2 bytes)
(1)   30/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFD824   v_subgamemode =	v_gamemode+2
(1)   31/FFFFFFFFFFFFC939 :                     
(1)   32/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFD826   v_titleselect:	equ ramaddr($FFFFD826)
(1)   33/FFFFFFFFFFFFC939 :                     
(1)   34/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFD82A   v_menu_soundid:	equ ramaddr($FFFFD82A)
(1)   35/FFFFFFFFFFFFC939 :                     
(1)   36/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFFFC9   v_lagger:	equ ramaddr($FFFFFFC9)
(1)   37/FFFFFFFFFFFFC939 :                     
(1)   38/FFFFFFFFFFFFC939 : =$FFFFFFFFFFFFFFC0   v_text:		equ ramaddr($FFFFFFC0)
(1)   39/    C939 :                     	dephase
(1)   40/       0 :                     	!org 0
(1)   41/       0 :                     
      22/       0 :                     
      23/       0 :                     ; ===========================================================================
      24/       0 :                     ; ---------------------------------------------------------------------------
      25/       0 :                     ; Sonic Crackers Disassembly
      26/       0 :                     ; ---------------------------------------------------------------------------
      27/       0 :                     
      28/       0 : 00FF 0200 0000      RomStart:	dc.l v_systemstack&$FFFFFF,	EntryPoint,	ErrorTrap,	ErrorTrap
                6 : 0200 0000 041A 
                C : 0000 041A          
      29/      10 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               16 : 041A 0000 041A 
               1C : 0000 041A          
      30/      20 : 0000 041A FFFF      		dc.l ErrorTrap,	unk_C81E,	unk_C812,	unk_C818
               26 : C81E FFFF C812 
               2C : FFFF C818          
      31/      30 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               36 : 041A 0000 041A 
               3C : 0000 041A          
      32/      40 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               46 : 041A 0000 041A 
               4C : 0000 041A          
      33/      50 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               56 : 041A 0000 041A 
               5C : 0000 041A          
      34/      60 : FFFF C824 0000      		dc.l unk_C824,	ErrorTrap,	unk_C82A,	ErrorTrap
               66 : 041A FFFF C82A 
               6C : 0000 041A          
      35/      70 : FFFF C836 0000      		dc.l unk_C836,	ErrorTrap,	unk_C830,	ErrorTrap
               76 : 041A FFFF C830 
               7C : 0000 041A          
      36/      80 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               86 : 041A 0000 041A 
               8C : 0000 041A          
      37/      90 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               96 : 041A 0000 041A 
               9C : 0000 041A          
      38/      A0 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               A6 : 041A 0000 041A 
               AC : 0000 041A          
      39/      B0 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               B6 : 041A 0000 041A 
               BC : 0000 041A          
      40/      C0 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               C6 : 041A 0000 041A 
               CC : 0000 041A          
      41/      D0 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               D6 : 041A 0000 041A 
               DC : 0000 041A          
      42/      E0 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               E6 : 041A 0000 041A 
               EC : 0000 041A          
      43/      F0 : 0000 041A 0000      		dc.l ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap
               F6 : 041A 0000 041A 
               FC : 0000 041A          
      44/     100 : 5345 4741 204D      		dc.b "SEGA MEGA DRIVE "
              106 : 4547 4120 4452 
              10C : 4956 4520          
      45/     110 : 2843 2953 4547      		dc.b "(C)SEGA 1994.JUL"
              116 : 4120 3139 3934 
              11C : 2E4A 554C          
      46/     120 : 534F 4E49 4320      		dc.b "SONIC STUDIUM                                   "
              126 : 5354 5544 4955 
              12C : 4D20 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
      47/     150 : 534F 4E49 4320      		dc.b "SONIC STUDIUM                                   "
              156 : 5354 5544 4955 
              15C : 4D20 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
      48/     180 : 474D 2058 5858      		dc.b "GM XXXXXXXX-XX"
              186 : 5858 5858 582D 
              18C : 5858             
      49/     18E : 0000                Checksum:	dc.w 0
      50/     190 : 4A20 2020 2020      		dc.b "J               "
              196 : 2020 2020 2020 
              19C : 2020 2020          
      51/     1A0 : 0000 0000           ROM_Start:	dc.l RomStart
      52/     1A4 : 001F FFFF           ROM_Finish:	dc.l (EndofROM*2)-1
      53/     1A8 : 00FF 0000           		dc.l v_startofram&$FFFFFF
      54/     1AC : 00FF FFFF           		dc.l $FFFFFF
      55/     1B0 : 2020 2020           		dc.l $20202020
      56/     1B4 : 2020 2020           		dc.l $20202020
      57/     1B8 : 2020 2020           		dc.l $20202020
      58/     1BC : 2020 2020 2020      		dc.b "                                                    "
              1C2 : 2020 2020 2020 
              1C8 : 2020 2020 2020 
              1CE : 2020 2020 2020 
              1D4 : 2020 2020 2020 
              1DA : 2020 2020 2020 
              1E0 : 2020 2020 2020 
              1E6 : 2020 2020 2020 
              1EC : 2020 2020          
      59/     1F0 : 4A55 4520 2020      		dc.b "JUE             "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
      60/     200 :                     ; ===========================================================================
      61/     200 :                     ; ---------------------------------------------------------------------------
      62/     200 :                     ; Entry Point
      63/     200 :                     ; ---------------------------------------------------------------------------
      64/     200 :                     
      65/     200 :                     EntryPoint:
      66/     200 : 4AB9 00A1 0008      		tst.l	(z80_port_1_control).l
      67/     206 : 6606                		bne.s	.port1okay
      68/     208 : 4A79 00A1 000C      		tst.w	(z80_expansion_control).l
      69/     20E :                     
      70/     20E :                     .port1okay:
      71/     20E : 667C                		bne.s	.skipsetup
      72/     210 : 4BFA 007C           		lea	SetupValues(pc),a5
      73/     214 : 4C9D 00E0           		movem.w	(a5)+,d5-d7
      74/     218 : 4CDD 1F00           		movem.l	(a5)+,a0-a4
      75/     21C : 1029 EF01           		move.b	-$10FF(a1),d0
      76/     220 : 0200 000F           		andi.b	#$F,d0
      77/     224 : 6708                		beq.s	.skipsecurity
      78/     226 : 237C 5345 4741      		move.l	#'SEGA',$2F00(a1)
              22C : 2F00             
      79/     22E :                     
      80/     22E :                     .skipsecurity:
      81/     22E : 3014                		move.w	(a4),d0
      82/     230 : 7000                		moveq	#0,d0
      83/     232 : 2C40                		movea.l	d0,a6
      84/     234 : 4E66                		move.l	a6,usp
      85/     236 : 7217                		moveq	#$17,d1
      86/     238 :                     
      87/     238 :                     .vdploop:
      88/     238 : 1A1D                		move.b	(a5)+,d5
      89/     23A : 3885                		move.w	d5,(a4)
      90/     23C : DA47                		add.w	d7,d5
      91/     23E : 51C9 FFF8           		dbf	d1,.vdploop
      92/     242 : 289D                		move.l	(a5)+,(a4)
      93/     244 : 3680                		move.w	d0,(a3)
      94/     246 : 3287                		move.w	d7,(a1)
      95/     248 : 3487                		move.w	d7,(a2)
      96/     24A :                     
      97/     24A :                     .waitZ80:
      98/     24A : 0111                		btst	d0,(a1)
      99/     24C : 66FC                		bne.s	.waitZ80
     100/     24E : 7425                		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
     101/     250 :                     
     102/     250 :                     .writeZ80:
     103/     250 : 10DD                		move.b	(a5)+,(a0)+
     104/     252 : 51CA FFFC           		dbf	d2,.writeZ80
     105/     256 : 3480                		move.w	d0,(a2)
     106/     258 : 3280                		move.w	d0,(a1)
     107/     25A : 3487                		move.w	d7,(a2)
     108/     25C :                     
     109/     25C :                     .clearRAM:
     110/     25C : 2D00                		move.l	d0,-(a6)
     111/     25E : 51CE FFFC           		dbf	d6,.clearRAM
     112/     262 : 289D                		move.l	(a5)+,(a4)
     113/     264 : 289D                		move.l	(a5)+,(a4)
     114/     266 :                     
     115/     266 : 761F                		moveq	#bytesToLcnt($80),d3
     116/     268 :                     
     117/     268 :                     .clearCRAM:
     118/     268 : 2680                		move.l	d0,(a3)
     119/     26A : 51CB FFFC           		dbf	d3,.clearCRAM
     120/     26E : 289D                		move.l	(a5)+,(a4)
     121/     270 :                     
     122/     270 : 7813                		moveq	#bytesToLcnt($50),d4
     123/     272 :                     
     124/     272 :                     .clearVSRAM:
     125/     272 : 2680                		move.l	d0,(a3)
     126/     274 : 51CC FFFC           		dbf	d4,.clearVSRAM
     127/     278 : 7A03                		moveq	#PSGInitValues_End-PSGInitValues-1,d5
     128/     27A :                     
     129/     27A :                     .psginit:
     130/     27A : 175D 0011           		move.b	(a5)+,$11(a3)
     131/     27E : 51CD FFFA           		dbf	d5,.psginit
     132/     282 : 3480                		move.w	d0,(a2)
     133/     284 : 4CD6 7FFF           		movem.l	(a6),d0-a6
     134/     288 : (MACRO)              		disable_ints
     134/     288 : 46FC 2700                           move    #$2700,sr
     135/     28C :                     
     136/     28C :                     .skipsetup:
     137/     28C : 606C                		bra.s	GameProgram
     138/     28E :                     
     139/     28E :                     ; ===========================================================================
     140/     28E :                     ; ---------------------------------------------------------------------------
     141/     28E : 8000                SetupValues:	dc.w $8000				; VDP register Start
     142/     290 : 3FFF                		dc.w bytesToLcnt($10000)		; Repeat times for clearing 68k ram
     143/     292 : 0100                		dc.w $100				; VDP register Number increase (Used for Z80 functioning too)
     144/     294 :                     
     145/     294 : 00A0 0000           		dc.l z80_ram				; Z80 Ram start
     146/     298 : 00A1 1100           		dc.l z80_bus_request			; Z80 Bus port
     147/     29C : 00A1 1200           		dc.l z80_reset				; Z80 reset port
     148/     2A0 : 00C0 0000           		dc.l vdp_data_port			; VDP Data port
     149/     2A4 : 00C0 0004           		dc.l vdp_control_port			; VDP Address port
     150/     2A8 :                     
     151/     2A8 : 04                  		dc.b 4					; 8004
     152/     2A9 : 14                  		dc.b $14				; 8114 Display Value
     153/     2AA : 30                  		dc.b $30				; 8230 FG Scroll
     154/     2AB : 3C                  		dc.b $3C				; 833C Window
     155/     2AC : 07                  		dc.b 7					; 8407 BG Scroll
     156/     2AD : 6C                  		dc.b $6C				; 856C Sprite Table
     157/     2AE : 00                  		dc.b 0					; 8600
     158/     2AF : 00                  		dc.b 0					; 8700 Background Colour (Backdrop)
     159/     2B0 : 00                  		dc.b 0					; 8800
     160/     2B1 : 00                  		dc.b 0					; 8900
     161/     2B2 : FF                  		dc.b $FF				; 8AFF Horizontal Interupt
     162/     2B3 : 00                  		dc.b 0					; 8B00 Scroll type
     163/     2B4 : 81                  		dc.b $81				; 8C81 40 Cell Display
     164/     2B5 : 37                  		dc.b $37				; 8D37 Horizontal Scroll
     165/     2B6 : 00                  		dc.b 0					; 8E00
     166/     2B7 : 01                  		dc.b 1					; 8F01 VDP Increment on/off
     167/     2B8 : 01                  		dc.b 1					; 9001 64 Cell Display (Out of screen extended)
     168/     2B9 : 00                  		dc.b 0					; 9100 Window horizontal position
     169/     2BA : 00                  		dc.b 0					; 9200 Window vertical position
     170/     2BB : FF                  		dc.b $FF				; 93FF DMA Registers
     171/     2BC : FF                  		dc.b $FF				; 94FF ""
     172/     2BD : 00                  		dc.b 0					; 9500 ""
     173/     2BE : 00                  		dc.b 0					; 9600 ""
     174/     2BF : 80                  		dc.b $80				; 9780 ""
     175/     2C0 :                     
     176/     2C0 : 4000 0080           		dc.l $40000080
     177/     2C4 :                     
     178/     2C4 :                     Z80StartupCodeBegin:					; Z80 instructions (not the sound driver; that gets loaded later)
     179/     2C4 :                     	save
     180/     2C4 :                     	CPU Z80 ; start assembling Z80 code
     181/       0 :                     	phase 0 ; pretend we're at address 0
     182/       0 : AF                  		xor	a	; clear a to 0
     183/       1 : 01 D9 1F            		ld	bc,((z80_ram_end-z80_ram)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
     184/       4 : 11 27 00            		ld	de,zStartupCodeEndLoc+1	; initial destination address
     185/       7 : 21 26 00            		ld	hl,zStartupCodeEndLoc	; initial source address
     186/       A : F9                  		ld	sp,hl	; set the address the stack starts at
     187/       B : 77                  		ld	(hl),a	; set first byte of the stack to 0
     188/       C : ED B0               		ldir		; loop to fill the stack (entire remaining available Z80 RAM) with 0
     189/       E : DD E1               		pop	ix	; clear ix
     190/      10 : FD E1               		pop	iy	; clear iy
     191/      12 : ED 47               		ld	i,a	; clear i
     192/      14 : ED 4F               		ld	r,a	; clear r
     193/      16 : D1                  		pop	de	; clear de
     194/      17 : E1                  		pop	hl	; clear hl
     195/      18 : F1                  		pop	af	; clear af
     196/      19 : 08                  		ex	af,af'	; swap af with af'
     197/      1A : D9                  		exx		; swap bc/de/hl with their shadow registers too
     198/      1B : C1                  		pop	bc	; clear bc
     199/      1C : D1                  		pop	de	; clear de
     200/      1D : E1                  		pop	hl	; clear hl
     201/      1E : F1                  		pop	af	; clear af
     202/      1F : F9                  		ld	sp,hl	; clear sp
     203/      20 : F3                  		di		; clear iff1 (for interrupt handler)
     204/      21 : ED 56               		im	1	; interrupt handling mode = 1
     205/      23 : 36 E9               		ld	(hl),0E9h ; replace the first instruction with a jump to itself
     206/      25 : E9                  		jp	(hl)	  ; jump to the first instruction (to stay there forever)
     207/      26 :                     zStartupCodeEndLoc:
     208/     2EA :                     	dephase ; stop pretending
     209/     2EA : ALL                  		restore
     210/     2EA :                     	padding off ; unfortunately our flags got reset so we have to set them again...
     211/     2EA :                     Z80StartupCodeEnd:
     212/     2EA :                     
     213/     2EA : 8104 8F02           		dc.w $8104,$8F02			; Display and increment register values
     214/     2EE : C000 0000           		dc.l $C0000000				; VDP CRAM address
     215/     2F2 : 4000 0010           		dc.l $40000010
     216/     2F6 : 9FBF DFFF           PSGInitValues:	dc.b $9F,$BF,$DF,$FF			; PSG Values
     217/     2FA :                     PSGInitValues_End:
     218/     2FA : (MACRO)              		even
     218/     2FA : =>TRUE                       if notZ80(MOMCPU)
     218/     2FA : =>FALSE                              if (*)&1
     218/     2FA :                                             dc.b 0                          ;ds.b 1
     218/     2FA : [218]                                endif
     218/     2FA : =>FALSE                      else
     218/     2FA :                                     if ($)&1
     218/     2FA :                                             db 0
     218/     2FA : [218]                                endif
     218/     2FA : [218]                        endif
     219/     2FA :                     ; ---------------------------------------------------------------------------
     220/     2FA :                     ; ===========================================================================
     221/     2FA :                     ; ---------------------------------------------------------------------------
     222/     2FA :                     ; Game Start
     223/     2FA :                     ; ---------------------------------------------------------------------------
     224/     2FA :                     
     225/     2FA :                     GameProgram:
     226/     2FA : 4A79 00C0 0004      		tst.w	(vdp_control_port).l
     227/     300 : 41F8 FFC0           		lea	(v_text).w,a0
     228/     304 : 2010                		move.l	(a0),d0
     229/     306 : 0C80 5345 4741      		cmpi.l	#'SEGA',d0
     230/     30C : 6618                		bne.s	loc_326
     231/     30E : 1039 00A1 0009      		move.b	($A10009).l,d0
     232/     314 : C039 00A1 000B      		and.b	($A1000B).l,d0
     233/     31A : C039 00A1 000D      		and.b	($A1000D).l,d0
     234/     320 : 0800 0006           		btst	#6,d0
     235/     324 : 6610                		bne.s	loc_336
     236/     326 :                     
     237/     326 :                     loc_326:
     238/     326 : 700F                		moveq	#$F,d0
     239/     328 : 43D0                		lea	(a0),a1
     240/     32A :                     
     241/     32A :                     loc_32A:
     242/     32A : 4299                		clr.l	(a1)+
     243/     32C : 51C8 FFFC           		dbf	d0,loc_32A
     244/     330 : 20BC 5345 4741      		move.l	#'SEGA',(a0)
     245/     336 :                     
     246/     336 :                     loc_336:
     247/     336 : 7000                		moveq	#0,d0				; clear registers (d0 to d6 and a2)
     248/     338 : 7200                		moveq	#0,d1
     249/     33A : 7400                		moveq	#0,d2
     250/     33C : 7600                		moveq	#0,d3
     251/     33E : 7800                		moveq	#0,d4
     252/     340 : 7A00                		moveq	#0,d5
     253/     342 : 7C00                		moveq	#0,d6
     254/     344 : 3440                		movea.w	d0,a2
     255/     346 : 3E3C 07FD           		move.w	#$7FD,d7
     256/     34A :                     
     257/     34A :                     .loop:
     258/     34A : 48E0 FE20           		movem.l	d0-d6/a2,-(a0)
     259/     34E : 51CF FFFA           		dbf	d7,.loop
     260/     352 : 41F8 C800           		lea	(unk_C800).w,a0
     261/     356 : 303C 4EF9           		move.w	#$4EF9,d0			; machine code for 'jmp'
     262/     35A : 43FA 00BC           		lea	UnknownRout001(pc),a1		; routine used here just has an 'rts'...
     263/     35E : 7E02                		moveq	#2,d7
     264/     360 :                     
     265/     360 :                     loc_360:
     266/     360 : 30C0                		move.w	d0,(a0)+
     267/     362 : 20C9                		move.l	a1,(a0)+
     268/     364 : 51CF FFFA           		dbf	d7,loc_360			; the result from this is 'jmp	UnknownRout001'
     269/     368 : 43FA 00AC           		lea	UnknownRout000(pc),a1		; routine used here just has 'rte'...
     270/     36C : 7E06                		moveq	#6,d7
     271/     36E :                     
     272/     36E :                     loc_36E:
     273/     36E : 30C0                		move.w	d0,(a0)+
     274/     370 : 20C9                		move.l	a1,(a0)+
     275/     372 : 51CF FFFA           		dbf	d7,loc_36E
     276/     376 : 7040                		moveq	#$40,d0
     277/     378 : 13C0 00A1 0009      		move.b	d0,($A10009).l
     278/     37E : 13C0 00A1 000B      		move.b	d0,($A1000B).l
     279/     384 : 13C0 00A1 000D      		move.b	d0,($A1000D).l
     280/     38A :                     
     281/     38A :                     .waitfordma:
     282/     38A : 3039 00C0 0004      		move.w	(vdp_control_port).l,d0
     283/     390 : 0800 0001           		btst	#1,d0				; is DMA running?
     284/     394 : 66F4                		bne.s	.waitfordma			; if not, wait until it's finished
     285/     396 : 41F9 00C0 0000      		lea	(vdp_data_port).l,a0
     286/     39C : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l
              3A2 : 0004             
     287/     3A4 : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
     288/     3AA :                     
     289/     3AA : 7000                		moveq	#0,d0				; clear d0
     290/     3AC : 23FC 4000 0000      		move.l	#$40000000,(vdp_control_port).l	; set VDP in VRAM write mode
              3B2 : 00C0 0004          
     291/     3B6 : 323C 0FFF           		move.w	#$FFF,d1			; set repeat times
     292/     3BA :                     
     293/     3BA :                     .clrVRAM:
     294/     3BA :                     		rept 4
     295/     3BA :                     		move.l	d0,(a0)				; clear VRAM
     296/     3BA :                     		endm
     295/     3BA : 2080                		move.l	d0,(a0)				; clear VRAM
     295/     3BC : 2080                		move.l	d0,(a0)				; clear VRAM
     295/     3BE : 2080                		move.l	d0,(a0)				; clear VRAM
     295/     3C0 : 2080                		move.l	d0,(a0)				; clear VRAM
     297/     3C2 : 51C9 FFF6           		dbf	d1,.clrVRAM			; repeat til VRAM is cleared
     298/     3C6 :                     
     299/     3C6 : 23FC C000 0000      		move.l	#$C0000000,(vdp_control_port).l	; set VDP in CRAM write mode
              3CC : 00C0 0004          
     300/     3D0 : 323C 0007           		move.w	#7,d1				; set repeat times
     301/     3D4 :                     
     302/     3D4 :                     .clrCRAM:
     303/     3D4 :                     		rept 4
     304/     3D4 :                     		move.l	d0,(a0)				; clear CRAM
     305/     3D4 :                     		endm
     304/     3D4 : 2080                		move.l	d0,(a0)				; clear CRAM
     304/     3D6 : 2080                		move.l	d0,(a0)				; clear CRAM
     304/     3D8 : 2080                		move.l	d0,(a0)				; clear CRAM
     304/     3DA : 2080                		move.l	d0,(a0)				; clear CRAM
     306/     3DC : 51C9 FFF6           		dbf	d1,.clrCRAM			; repeat til CRAM is cleared
     307/     3E0 :                     
     308/     3E0 : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l	; set VDP mode
              3E6 : 00C0 0004          
     309/     3EA : 323C 0004           		move.w	#4,d1				; set repeat times
     310/     3EE :                     
     311/     3EE :                     .clrVSRAM:
     312/     3EE :                     		rept 4
     313/     3EE :                     		move.l	d0,(a0)				; clear VSRAM
     314/     3EE :                     		endm
     313/     3EE : 2080                		move.l	d0,(a0)				; clear VSRAM
     313/     3F0 : 2080                		move.l	d0,(a0)				; clear VSRAM
     313/     3F2 : 2080                		move.l	d0,(a0)				; clear VSRAM
     313/     3F4 : 2080                		move.l	d0,(a0)				; clear VSRAM
     315/     3F6 : 51C9 FFF6           		dbf	d1,.clrVSRAM			; repeat til VSRAM is cleared
     316/     3FA :                     
     317/     3FA : 41FA 0024           		lea	InitialVDPSetupArray(pc),a0	; load VDP setup values address to a0
     318/     3FE : 4EB9 0000 08D0      		jsr	(SetupVDPUsingTable).l
     319/     404 : (MACRO)              		resetZ80				; reset the Z80
     319/     404 : 33FC 0100 00A1                      move.w  #$100,(z80_reset).l
              40A : 1200             
     320/     40C : 46FC 2000           		move	#$2000,sr			; set the stack register
     321/     410 :                     
     322/     410 :                     MAINPROGLOOP:
     323/     410 : 4EB8 5000           		jsr	(MAINPROG).w			; jump to the actual loop (really should be a jmp since there's no way for it to return)
     324/     414 : 60FA                		bra.s	MAINPROGLOOP			; loop indefinitely
     325/     416 :                     
     326/     416 :                     ; ===========================================================================
     327/     416 :                     ; ---------------------------------------------------------------------------
     328/     416 :                     UnknownRout000:
     329/     416 : 4E73                		rte
     330/     418 :                     ; ---------------------------------------------------------------------------
     331/     418 :                     UnknownRout001:
     332/     418 : 4E75                		rts
     333/     41A :                     ; ---------------------------------------------------------------------------
     334/     41A :                     ErrorTrap:
     335/     41A : 4E71                		nop					; Delay
     336/     41C : 4E71                		nop					; Delay
     337/     41E : 60FA                		bra.s	ErrorTrap			; Trap
     338/     420 :                     ; ---------------------------------------------------------------------------
     339/     420 :                     ; ===========================================================================
     340/     420 :                     ; ---------------------------------------------------------------------------
     341/     420 :                     InitialVDPSetupArray:
     342/     420 : 8004                		dc.w $8004
     343/     422 : 8104                		dc.w $8104				; Display mode
     344/     424 : 8230                		dc.w $8230				; FG Scroll
     345/     426 : 832C                		dc.w $832C				; Window
     346/     428 : 8407                		dc.w $8407				; BG Scroll
     347/     42A : 8578                		dc.w $8578				; Sprite Table
     348/     42C : 8600                		dc.w $8600
     349/     42E : 8730                		dc.w $8730				; Background Colour (Backdrop)
     350/     430 : 8800                		dc.w $8800
     351/     432 : 8900                		dc.w $8900
     352/     434 : 8A00                		dc.w $8A00				; Horizontal Interupt
     353/     436 : 8B00                		dc.w $8B00				; Scroll type
     354/     438 : 8C81                		dc.w $8C81				; 40 Cell Display
     355/     43A : 8D34                		dc.w $8D34				; Horizontal Scroll
     356/     43C : 8E00                		dc.w $8E00
     357/     43E : 8F02                		dc.w $8F02				; VDP Increment on
     358/     440 : 9001                		dc.w $9001				; 64 Cell Display (Out of screen extended)
     359/     442 : 9100                		dc.w $9100				; Window horizontal position
     360/     444 : 9200                		dc.w $9200				; Window vertical position
     361/     446 : 0000                		dc.w 0
     362/     448 :                     ; ---------------------------------------------------------------------------
     363/     448 :                     ; ===========================================================================
     364/     448 :                     ; ---------------------------------------------------------------------------
     365/     448 :                     ; subroutine to setup the VDP (Palettes, etc) via DMA
     366/     448 :                     ; ---------------------------------------------------------------------------
     367/     448 :                     
     368/     448 :                     VDPSetup_01:
     369/     448 : (MACRO)              		stopZ80
     369/     448 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              44E : 1100             
     370/     450 : (MACRO)              		waitZ80
     370/     450 : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
              456 : 1100             
     370/     458 : 66F6                                bne.s   .wait
     371/     45A : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l	; set VDP Increment
              460 : 0004             
     372/     462 : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
     373/     468 : 41F9 00C0 0004      		lea	(vdp_control_port).l,a0		; load VDP address port to a0
     374/     46E : 0078 8114 C9BA      		ori.w	#$8114,($FFFFC9BA).w
     375/     474 : 30B8 C9BA           		move.w	($FFFFC9BA).w,(a0)
     376/     478 : 43FA 004A           		lea	VDPClearArr_01(pc),a1		; load VDP values address to a1
     377/     47C : 3099                		move.w	(a1)+,(a0)			; dump DMA values to VDP
     378/     47E : 3091                		move.w	(a1),(a0)
     379/     480 : 303C 9500           		move.w	#$9500,d0			; prepare VDP DMA register value in d0
     380/     484 : 43FA 0046           		lea	VDPClearArr_02(pc),a1		; load location just after VDP values to a1
     381/     488 : 7202                		moveq	#2,d1				; set repeat times
     382/     48A :                     
     383/     48A :                     .setDMA:
     384/     48A : 1021                		move.b	-(a1),d0			; get end value, dump to d0 and move back
     385/     48C : 3080                		move.w	d0,(a0)				; dump Complete Register value to VDP
     386/     48E : 0640 0100           		addi.w	#$100,d0			; increase to next register value
     387/     492 : 51C9 FFF6           		dbf	d1,.setDMA			; repeat 2 more times
     388/     496 : 30BC C000           		move.w	#$C000,(a0)
     389/     49A : 3F3C 0080           		move.w	#$0080,-(sp)
     390/     49E : 309F                		move.w	(sp)+,(a0)
     391/     4A0 : 0278 FFEF C9BA      		andi.w	#$FFEF,($FFFFC9BA).w
     392/     4A6 : 30B8 C9BA           		move.w	($FFFFC9BA).w,(a0)
     393/     4AA : (MACRO)              		startZ80
     393/     4AA : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              4B0 : 1100             
     394/     4B2 : 23FC C000 0000      		move.l	#$C0000000,(vdp_control_port).l	; set VDP in CRAM write mode
              4B8 : 00C0 0004          
     395/     4BC : 3178 D3E4 FFFC      		move.w	($FFFFD3E4).w,-4(a0)		; move colour value in ram to VDP
     396/     4C2 : 4E75                		rts
     397/     4C4 :                     
     398/     4C4 :                     ; ===========================================================================
     399/     4C4 :                     ; ---------------------------------------------------------------------------
     400/     4C4 : 9340 9400           VDPClearArr_01:	dc.w $9340,$9400			; DMA Transfer Size (0040 x 2 = 0080)
     401/     4C8 : 007F E9F2           		dc.l $7FE9F2				; DMA Transfer "From" location  (7FE9F2 x 2 = FFD3E4)
     402/     4CC : (MACRO)              VDPClearArr_02: even
     402/     4CC : =>TRUE                       if notZ80(MOMCPU)
     402/     4CC : =>FALSE                              if (*)&1
     402/     4CC :                                             dc.b 0                          ;ds.b 1
     402/     4CC : [402]                                endif
     402/     4CC : =>FALSE                      else
     402/     4CC :                                     if ($)&1
     402/     4CC :                                             db 0
     402/     4CC : [402]                                endif
     402/     4CC : [402]                        endif
     403/     4CC :                     ; ---------------------------------------------------------------------------
     404/     4CC :                     ; ===========================================================================
     405/     4CC :                     ; ---------------------------------------------------------------------------
     406/     4CC :                     ; another subroutine to set some VDP values
     407/     4CC :                     ; ---------------------------------------------------------------------------
     408/     4CC :                     
     409/     4CC :                     VDPSetup_02:
     410/     4CC : 49F9 00C0 0004      		lea	(vdp_control_port).l,a4		; load VDP address port to a4
     411/     4D2 : 7600                		moveq	#0,d3				; clear d3
     412/     4D4 : (MACRO)              		stopZ80
     412/     4D4 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              4DA : 1100             
     413/     4DC : (MACRO)              		waitZ80
     413/     4DC : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
              4E2 : 1100             
     413/     4E4 : 66F6                                bne.s   .wait
     414/     4E6 : 3038 C9BA           		move.w	($FFFFC9BA).w,d0
     415/     4EA : 08C0 0004           		bset	#4,d0
     416/     4EE : 3880                		move.w	d0,(a4)
     417/     4F0 : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l	; set VDP Increment
              4F6 : 0004             
     418/     4F8 : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
     419/     4FE : 43F8 D4F8           		lea	($FFFFD4F8).w,a1
     420/     502 : 3E19                		move.w	(a1)+,d7			; load repeat times to d7
     421/     504 : 603C                		bra.s	loc_542
     422/     506 :                     
     423/     506 :                     loc_506:
     424/     506 : 41FA 0056           		lea	VDPVAL003(pc),a0
     425/     50A : 4C90 001F           		movem.w	(a0),d0-d4
     426/     50E : 5C88                		addq.l	#6,a0
     427/     510 : 1219                		move.b	(a1)+,d1
     428/     512 : 1019                		move.b	(a1)+,d0
     429/     514 : 1819                		move.b	(a1)+,d4
     430/     516 : 1819                		move.b	(a1)+,d4
     431/     518 : 1619                		move.b	(a1)+,d3
     432/     51A : 1419                		move.b	(a1)+,d2
     433/     51C : 3880                		move.w	d0,(a4)
     434/     51E : 3881                		move.w	d1,(a4)
     435/     520 : 3882                		move.w	d2,(a4)
     436/     522 : 3883                		move.w	d3,(a4)
     437/     524 : 3884                		move.w	d4,(a4)
     438/     526 : 3899                		move.w	(a1)+,(a4)
     439/     528 : 3219                		move.w	(a1)+,d1
     440/     52A : 0041 0080           		ori.w	#$80,d1
     441/     52E : 3F01                		move.w	d1,-(sp)
     442/     530 : 389F                		move.w	(sp)+,(a4)
     443/     532 : 2221                		move.l	-(a1),d1
     444/     534 : 3881                		move.w	d1,(a4)
     445/     536 : 2221                		move.l	-(a1),d1
     446/     538 : E389                		lsl.l	#1,d1
     447/     53A : 2441                		movea.l	d1,a2
     448/     53C : 3952 FFFC           		move.w	(a2),-4(a4)
     449/     540 : 5049                		addq.w	#8,a1
     450/     542 :                     
     451/     542 :                     loc_542:
     452/     542 : 51CF FFC2           		dbf	d7,loc_506
     453/     546 : 3238 C9BA           		move.w	($FFFFC9BA).w,d1
     454/     54A : 0881 0004           		bclr	#4,d1
     455/     54E : 3881                		move.w	d1,(a4)
     456/     550 : (MACRO)              		startZ80
     456/     550 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              556 : 1100             
     457/     558 : 4278 D4F8           		clr.w	($FFFFD4F8).w
     458/     55C : 4E75                		rts
     459/     55E :                     
     460/     55E :                     ; ===========================================================================
     461/     55E :                     ; ---------------------------------------------------------------------------
     462/     55E : 9300                VDPVAL003:	dc.w $9300				; DMA register values (Blank)
     463/     560 : 9400                		dc.w $9400
     464/     562 : 9500                		dc.w $9500
     465/     564 : 9600                		dc.w $9600
     466/     566 : 9700                		dc.w $9700
     467/     568 :                     ; ---------------------------------------------------------------------------
     468/     568 :                     ; ===========================================================================
     469/     568 :                     ; ---------------------------------------------------------------------------
     470/     568 :                     ;
     471/     568 :                     ; ---------------------------------------------------------------------------
     472/     568 :                     
     473/     568 :                     sub_568:
     474/     568 : 7600                		moveq	#0,d3
     475/     56A : 3602                		move.w	d2,d3
     476/     56C : D642                		add.w	d2,d3
     477/     56E : D680                		add.l	d0,d3
     478/     570 : B183                		eor.l	d0,d3
     479/     572 : 0803 0011           		btst	#$11,d3
     480/     576 : 672E                		beq.s	sub_5A6
     481/     578 : B183                		eor.l	d0,d3
     482/     57A : 2803                		move.l	d3,d4
     483/     57C : 0284 FFFE 0000      		andi.l	#$FFFE0000,d4
     484/     582 : 2A04                		move.l	d4,d5
     485/     584 : 9880                		sub.l	d0,d4
     486/     586 : 3C04                		move.w	d4,d6
     487/     588 : DC41                		add.w	d1,d6
     488/     58A : 3404                		move.w	d4,d2
     489/     58C : E24A                		lsr.w	#1,d2
     490/     58E : 2E03                		move.l	d3,d7
     491/     590 : 9E85                		sub.l	d5,d7
     492/     592 : E24F                		lsr.w	#1,d7
     493/     594 : 48E7 0700           		movem.l	d5-d7,-(sp)
     494/     598 : 6100 000C           		bsr.w	sub_5A6
     495/     59C : 4CDF 00E0           		movem.l	(sp)+,d5-d7
     496/     5A0 : 2005                		move.l	d5,d0
     497/     5A2 : 2206                		move.l	d6,d1
     498/     5A4 : 2407                		move.l	d7,d2
     499/     5A6 :                     
     500/     5A6 :                     sub_5A6:
     501/     5A6 : 7600                		moveq	#0,d3
     502/     5A8 : 41F8 D4F8           		lea	($FFFFD4F8).w,a0
     503/     5AC : 3618                		move.w	(a0)+,d3
     504/     5AE : 0C43 0010           		cmpi.w	#$10,d3
     505/     5B2 : 6502                		bcs.s	loc_5B6
     506/     5B4 : 4E75                		rts
     507/     5B6 :                     
     508/     5B6 :                     loc_5B6:
     509/     5B6 : 7800                		moveq	#0,d4
     510/     5B8 : 3803                		move.w	d3,d4
     511/     5BA : 6004                		bra.s	loc_5C0
     512/     5BC :                     
     513/     5BC :                     loc_5BC:
     514/     5BC : D0FC 000A           		adda.w	#$A,a0
     515/     5C0 :                     
     516/     5C0 :                     loc_5C0:
     517/     5C0 : 51CC FFFA           		dbf	d4,loc_5BC
     518/     5C4 : 30C2                		move.w	d2,(a0)+
     519/     5C6 : 0280 00FF FFFF      		andi.l	#$FFFFFF,d0
     520/     5CC : E288                		lsr.l	#1,d0
     521/     5CE : 20C0                		move.l	d0,(a0)+
     522/     5D0 : 0281 0000 FFFF      		andi.l	#$FFFF,d1
     523/     5D6 : E589                		lsl.l	#2,d1
     524/     5D8 : E449                		lsr.w	#2,d1
     525/     5DA : 0041 4000           		ori.w	#$4000,d1
     526/     5DE : 4841                		swap	d1
     527/     5E0 : 2081                		move.l	d1,(a0)
     528/     5E2 : 5278 D4F8           		addq.w	#1,($FFFFD4F8).w
     529/     5E6 : 4E75                		rts
     530/     5E8 :                     
     531/     5E8 :                     ; ===========================================================================
     532/     5E8 :                     ; ---------------------------------------------------------------------------
     533/     5E8 :                     ;
     534/     5E8 :                     ; ---------------------------------------------------------------------------
     535/     5E8 :                     
     536/     5E8 :                     sub_5E8:
     537/     5E8 : 7600                		moveq	#0,d3
     538/     5EA : 3602                		move.w	d2,d3
     539/     5EC : D642                		add.w	d2,d3
     540/     5EE : D680                		add.l	d0,d3
     541/     5F0 : B183                		eor.l	d0,d3
     542/     5F2 : 0803 0011           		btst	#$11,d3
     543/     5F6 : 672E                		beq.s	sub_626
     544/     5F8 : B183                		eor.l	d0,d3
     545/     5FA : 2803                		move.l	d3,d4
     546/     5FC : 0284 FFFE 0000      		andi.l	#$FFFE0000,d4
     547/     602 : 2A04                		move.l	d4,d5
     548/     604 : 9880                		sub.l	d0,d4
     549/     606 : 3C04                		move.w	d4,d6
     550/     608 : DC41                		add.w	d1,d6
     551/     60A : 3404                		move.w	d4,d2
     552/     60C : E24A                		lsr.w	#1,d2
     553/     60E : 2E03                		move.l	d3,d7
     554/     610 : 9E85                		sub.l	d5,d7
     555/     612 : E24F                		lsr.w	#1,d7
     556/     614 : 48E7 0700           		movem.l	d5-d7,-(sp)
     557/     618 : 6100 000C           		bsr.w	sub_626
     558/     61C : 4CDF 00E0           		movem.l	(sp)+,d5-d7
     559/     620 : 2005                		move.l	d5,d0
     560/     622 : 2206                		move.l	d6,d1
     561/     624 : 2407                		move.l	d7,d2
     562/     626 :                     
     563/     626 :                     sub_626:
     564/     626 : 2C00                		move.l	d0,d6
     565/     628 : 0280 00FF FFFF      		andi.l	#$FFFFFF,d0
     566/     62E : E288                		lsr.l	#1,d0
     567/     630 : 3601                		move.w	d1,d3
     568/     632 : 0243 3FFF           		andi.w	#$3FFF,d3
     569/     636 : 0043 4000           		ori.w	#$4000,d3
     570/     63A : E559                		rol.w	#2,d1
     571/     63C : 0241 0003           		andi.w	#3,d1
     572/     640 : 41F9 00C0 0004      		lea	(vdp_control_port).l,a0
     573/     646 : (MACRO)              		stopZ80
     573/     646 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              64C : 1100             
     574/     64E : (MACRO)              		waitZ80
     574/     64E : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
              654 : 1100             
     574/     656 : 66F6                                bne.s   .wait
     575/     658 : 3838 C9BA           		move.w	($FFFFC9BA).w,d4
     576/     65C : 08C4 0004           		bset	#4,d4
     577/     660 : 3084                		move.w	d4,(a0)
     578/     662 : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l
              668 : 0004             
     579/     66A : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
     580/     670 : 3802                		move.w	d2,d4
     581/     672 : 3A3C 9300           		move.w	#$9300,d5
     582/     676 : 1A04                		move.b	d4,d5
     583/     678 : 3085                		move.w	d5,(a0)
     584/     67A : E15A                		rol.w	#8,d2
     585/     67C : 3A3C 9400           		move.w	#$9400,d5
     586/     680 : 1A02                		move.b	d2,d5
     587/     682 : 3085                		move.w	d5,(a0)
     588/     684 : 2400                		move.l	d0,d2
     589/     686 : 3A3C 9500           		move.w	#$9500,d5
     590/     68A : 1A02                		move.b	d2,d5
     591/     68C : 3085                		move.w	d5,(a0)
     592/     68E : E15A                		rol.w	#8,d2
     593/     690 : 3A3C 9600           		move.w	#$9600,d5
     594/     694 : 1A02                		move.b	d2,d5
     595/     696 : 3085                		move.w	d5,(a0)
     596/     698 : 4842                		swap	d2
     597/     69A : 3A3C 9700           		move.w	#$9700,d5
     598/     69E : 1A02                		move.b	d2,d5
     599/     6A0 : 3085                		move.w	d5,(a0)
     600/     6A2 : 3083                		move.w	d3,(a0)
     601/     6A4 : 3401                		move.w	d1,d2
     602/     6A6 : 0042 0080           		ori.w	#$80,d2
     603/     6AA : 3F02                		move.w	d2,-(sp)
     604/     6AC : 309F                		move.w	(sp)+,(a0)
     605/     6AE : 3083                		move.w	d3,(a0)
     606/     6B0 : 3081                		move.w	d1,(a0)
     607/     6B2 : 2246                		movea.l	d6,a1
     608/     6B4 : 3151 FFFC           		move.w	(a1),-4(a0)			; points to vdp_data_port
     609/     6B8 : 3838 C9BA           		move.w	($FFFFC9BA).w,d4
     610/     6BC : 0884 0004           		bclr	#4,d4
     611/     6C0 : 3084                		move.w	d4,(a0)
     612/     6C2 : (MACRO)              		startZ80
     612/     6C2 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              6C8 : 1100             
     613/     6CA : 4E75                		rts
     614/     6CC :                     
     615/     6CC :                     ; ===========================================================================
     616/     6CC :                     ; ---------------------------------------------------------------------------
     617/     6CC :                     ;
     618/     6CC :                     ; ---------------------------------------------------------------------------
     619/     6CC :                     
     620/     6CC :                     PaletteFadeOut:
     621/     6CC : 1238 D4E4           		move.b	($FFFFD4E4).w,d1
     622/     6D0 : 660E                		bne.s	loc_6E0
     623/     6D2 : 11C0 D4E4           		move.b	d0,($FFFFD4E4).w
     624/     6D6 : 11C0 D4E6           		move.b	d0,($FFFFD4E6).w
     625/     6DA : 11FC 0008 D4E5      		move.b	#8,($FFFFD4E5).w
     626/     6E0 :                     
     627/     6E0 :                     loc_6E0:
     628/     6E0 : 5338 D4E6           		subq.b	#1,($FFFFD4E6).w
     629/     6E4 : 6702                		beq.s	loc_6E8
     630/     6E6 : 4E75                		rts
     631/     6E8 :                     
     632/     6E8 :                     loc_6E8:
     633/     6E8 : 11F8 D4E4 D4E6      		move.b	($FFFFD4E4).w,($FFFFD4E6).w
     634/     6EE : 610E                		bsr.s	sub_6FE
     635/     6F0 : 5338 D4E5           		subq.b	#1,($FFFFD4E5).w
     636/     6F4 : 6606                		bne.s	locret_6FC
     637/     6F6 : 11FC 0000 D4E4      		move.b	#0,($FFFFD4E4).w
     638/     6FC :                     
     639/     6FC :                     locret_6FC:
     640/     6FC : 4E75                		rts
     641/     6FE :                     
     642/     6FE :                     sub_6FE:
     643/     6FE : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
     644/     702 : 363C 0040           		move.w	#$40,d3
     645/     706 : 5343                		subq.w	#1,d3
     646/     708 :                     
     647/     708 :                     .loop:
     648/     708 : 3410                		move.w	(a0),d2
     649/     70A : 3002                		move.w	d2,d0
     650/     70C : 611E                		bsr.s	sub_72C
     651/     70E : 3200                		move.w	d0,d1
     652/     710 : 3002                		move.w	d2,d0
     653/     712 : E848                		lsr.w	#4,d0
     654/     714 : 6116                		bsr.s	sub_72C
     655/     716 : E948                		lsl.w	#4,d0
     656/     718 : 8240                		or.w	d0,d1
     657/     71A : 3002                		move.w	d2,d0
     658/     71C : E048                		lsr.w	#8,d0
     659/     71E : 610C                		bsr.s	sub_72C
     660/     720 : E148                		lsl.w	#8,d0
     661/     722 : 8240                		or.w	d0,d1
     662/     724 : 30C1                		move.w	d1,(a0)+
     663/     726 : 51CB FFE0           		dbf	d3,.loop
     664/     72A : 4E75                		rts
     665/     72C :                     
     666/     72C :                     sub_72C:
     667/     72C : 0240 000F           		andi.w	#$F,d0
     668/     730 : 6702                		beq.s	locret_734
     669/     732 : 5540                		subq.w	#2,d0
     670/     734 :                     
     671/     734 :                     locret_734:
     672/     734 : 4E75                		rts
     673/     736 :                     
     674/     736 :                     ; ===========================================================================
     675/     736 :                     ; ---------------------------------------------------------------------------
     676/     736 :                     ; Unused subroutine
     677/     736 :                     ; ---------------------------------------------------------------------------
     678/     736 :                     
     679/     736 : 1238 D4E7           		move.b	($FFFFD4E7).w,d1
     680/     73A : 6614                		bne.s	loc_750
     681/     73C : 11C0 D4E7           		move.b	d0,($FFFFD4E7).w
     682/     740 : 11C0 D4E8           		move.b	d0,($FFFFD4E8).w
     683/     744 : 11FC 0008 D4E9      		move.b	#8,($FFFFD4E9).w
     684/     74A : 31FC 000E D4EA      		move.w	#$E,($FFFFD4EA).w
     685/     750 :                     
     686/     750 :                     loc_750:
     687/     750 : 5338 D4E8           		subq.b	#1,($FFFFD4E8).w
     688/     754 : 6702                		beq.s	loc_758
     689/     756 : 4E75                		rts
     690/     758 :                     
     691/     758 :                     loc_758:
     692/     758 : 11F8 D4E7 D4E8      		move.b	($FFFFD4E7).w,($FFFFD4E8).w
     693/     75E : 610E                		bsr.s	sub_76E
     694/     760 : 5338 D4E9           		subq.b	#1,($FFFFD4E9).w
     695/     764 : 6606                		bne.s	locret_76C
     696/     766 : 11FC 0000 D4E7      		move.b	#0,($FFFFD4E7).w
     697/     76C :                     
     698/     76C :                     locret_76C:
     699/     76C : 4E75                		rts
     700/     76E :                     
     701/     76E :                     sub_76E:
     702/     76E : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
     703/     772 : 43F8 D464           		lea	($FFFFD464).w,a1
     704/     776 : 3438 D4EA           		move.w	($FFFFD4EA).w,d2
     705/     77A : 3E3C 003F           		move.w	#$3F,d7
     706/     77E :                     
     707/     77E :                     loc_77E:
     708/     77E : 3019                		move.w	(a1)+,d0
     709/     780 : 3200                		move.w	d0,d1
     710/     782 : 0241 000F           		andi.w	#$F,d1
     711/     786 : B242                		cmp.w	d2,d1
     712/     788 : 6302                		bls.s	loc_78C
     713/     78A : 5450                		addq.w	#2,(a0)
     714/     78C :                     
     715/     78C :                     loc_78C:
     716/     78C : 3602                		move.w	d2,d3
     717/     78E : E94B                		lsl.w	#4,d3
     718/     790 : 3200                		move.w	d0,d1
     719/     792 : 0241 00F0           		andi.w	#$F0,d1
     720/     796 : B243                		cmp.w	d3,d1
     721/     798 : 6304                		bls.s	loc_79E
     722/     79A : 0650 0020           		addi.w	#$20,(a0)
     723/     79E :                     
     724/     79E :                     loc_79E:
     725/     79E : 3200                		move.w	d0,d1
     726/     7A0 : 3602                		move.w	d2,d3
     727/     7A2 : E14B                		lsl.w	#8,d3
     728/     7A4 : 0241 0F00           		andi.w	#$F00,d1
     729/     7A8 : B243                		cmp.w	d3,d1
     730/     7AA : 6304                		bls.s	loc_7B0
     731/     7AC : 0650 0200           		addi.w	#$200,(a0)
     732/     7B0 :                     
     733/     7B0 :                     loc_7B0:
     734/     7B0 : D1FC 0000 0002      		adda.l	#2,a0
     735/     7B6 : 51CF FFC6           		dbf	d7,loc_77E
     736/     7BA : 5578 D4EA           		subq.w	#2,($FFFFD4EA).w
     737/     7BE : 4E75                		rts
     738/     7C0 :                     
     739/     7C0 :                     ; ===========================================================================
     740/     7C0 :                     ; ---------------------------------------------------------------------------
     741/     7C0 :                     ; Unused subroutine
     742/     7C0 :                     ; ---------------------------------------------------------------------------
     743/     7C0 :                     
     744/     7C0 : 1438 D4EC           		move.b	($FFFFD4EC).w,d2
     745/     7C4 : 6616                		bne.s	loc_7DC
     746/     7C6 : 11C0 D4EC           		move.b	d0,($FFFFD4EC).w
     747/     7CA : 11C0 D4ED           		move.b	d0,($FFFFD4ED).w
     748/     7CE : 5301                		subq.b	#1,d1
     749/     7D0 : 11C1 D4EE           		move.b	d1,($FFFFD4EE).w
     750/     7D4 : 21C9 D4F0           		move.l	a1,($FFFFD4F0).w
     751/     7D8 : 21CA D4F4           		move.l	a2,($FFFFD4F4).w
     752/     7DC :                     
     753/     7DC :                     loc_7DC:
     754/     7DC : 5338 D4ED           		subq.b	#1,($FFFFD4ED).w
     755/     7E0 : 660A                		bne.s	locret_7EC
     756/     7E2 : 11F8 D4EC D4ED      		move.b	($FFFFD4EC).w,($FFFFD4ED).w
     757/     7E8 : 6100 0004           		bsr.w	sub_7EE
     758/     7EC :                     
     759/     7EC :                     locret_7EC:
     760/     7EC : 4E75                		rts
     761/     7EE :                     
     762/     7EE :                     sub_7EE:
     763/     7EE : 2278 D4F0           		movea.l	($FFFFD4F0).w,a1
     764/     7F2 : 2478 D4F4           		movea.l	($FFFFD4F4).w,a2
     765/     7F6 : 7C00                		moveq	#0,d6
     766/     7F8 : 1C38 D4EE           		move.b	($FFFFD4EE).w,d6
     767/     7FC : 7E00                		moveq	#0,d7
     768/     7FE :                     
     769/     7FE :                     loc_7FE:
     770/     7FE : 7A00                		moveq	#0,d5
     771/     800 : 3019                		move.w	(a1)+,d0
     772/     802 : 3212                		move.w	(a2),d1
     773/     804 : 383C 0200           		move.w	#$200,d4
     774/     808 : 3400                		move.w	d0,d2
     775/     80A : 3601                		move.w	d1,d3
     776/     80C : 0242 0F00           		andi.w	#$F00,d2
     777/     810 : 0243 0F00           		andi.w	#$F00,d3
     778/     814 : B642                		cmp.w	d2,d3
     779/     816 : 6708                		beq.s	loc_820
     780/     818 : 6502                		bcs.s	loc_81C
     781/     81A : 4444                		neg.w	d4
     782/     81C :                     
     783/     81C :                     loc_81C:
     784/     81C : D644                		add.w	d4,d3
     785/     81E : 5247                		addq.w	#1,d7
     786/     820 :                     
     787/     820 :                     loc_820:
     788/     820 : 8A43                		or.w	d3,d5
     789/     822 : 383C 0020           		move.w	#$20,d4
     790/     826 : 3400                		move.w	d0,d2
     791/     828 : 3601                		move.w	d1,d3
     792/     82A : 0242 00F0           		andi.w	#$F0,d2
     793/     82E : 0243 00F0           		andi.w	#$F0,d3
     794/     832 : B642                		cmp.w	d2,d3
     795/     834 : 6708                		beq.s	loc_83E
     796/     836 : 6502                		bcs.s	loc_83A
     797/     838 : 4444                		neg.w	d4
     798/     83A :                     
     799/     83A :                     loc_83A:
     800/     83A : D644                		add.w	d4,d3
     801/     83C : 5247                		addq.w	#1,d7
     802/     83E :                     
     803/     83E :                     loc_83E:
     804/     83E : 8A43                		or.w	d3,d5
     805/     840 : 383C 0002           		move.w	#2,d4
     806/     844 : 3400                		move.w	d0,d2
     807/     846 : 3601                		move.w	d1,d3
     808/     848 : 0242 000F           		andi.w	#$F,d2
     809/     84C : 0243 000F           		andi.w	#$F,d3
     810/     850 : B642                		cmp.w	d2,d3
     811/     852 : 6708                		beq.s	loc_85C
     812/     854 : 6502                		bcs.s	loc_858
     813/     856 : 4444                		neg.w	d4
     814/     858 :                     
     815/     858 :                     loc_858:
     816/     858 : D644                		add.w	d4,d3
     817/     85A : 5247                		addq.w	#1,d7
     818/     85C :                     
     819/     85C :                     loc_85C:
     820/     85C : 8A43                		or.w	d3,d5
     821/     85E : 34C5                		move.w	d5,(a2)+
     822/     860 : 51CE FF9C           		dbf	d6,loc_7FE
     823/     864 : 4A47                		tst.w	d7
     824/     866 : 6604                		bne.s	locret_86C
     825/     868 : 4238 D4EC           		clr.b	($FFFFD4EC).w
     826/     86C :                     
     827/     86C :                     locret_86C:
     828/     86C : 4E75                		rts
     829/     86E :                     
     830/     86E :                     ; ===========================================================================
     831/     86E :                     ; ---------------------------------------------------------------------------
     832/     86E :                     ;
     833/     86E :                     ; ---------------------------------------------------------------------------
     834/     86E :                     
     835/     86E :                     sub_86E:
     836/     86E : 43F9 00C0 0000      		lea	(vdp_data_port).l,a1
     837/     874 : 7C00                		moveq	#0,d6
     838/     876 : 3C38 D820           		move.w	($FFFFD820).w,d6
     839/     87A : 4846                		swap	d6
     840/     87C : 5340                		subq.w	#1,d0
     841/     87E : 5341                		subq.w	#1,d1
     842/     880 : E58B                		lsl.l	#2,d3
     843/     882 : E44B                		lsr.w	#2,d3
     844/     884 : 0043 4000           		ori.w	#$4000,d3
     845/     888 : 4843                		swap	d3
     846/     88A : 0243 0003           		andi.w	#3,d3
     847/     88E :                     
     848/     88E :                     loc_88E:
     849/     88E : 2343 0004           		move.l	d3,4(a1)
     850/     892 : 3A00                		move.w	d0,d5
     851/     894 :                     
     852/     894 :                     loc_894:
     853/     894 : 3282                		move.w	d2,(a1)
     854/     896 : 51CD FFFC           		dbf	d5,loc_894
     855/     89A : D686                		add.l	d6,d3
     856/     89C : 51C9 FFF0           		dbf	d1,loc_88E
     857/     8A0 : 4E75                		rts
     858/     8A2 :                     
     859/     8A2 :                     ; ===========================================================================
     860/     8A2 :                     ; ---------------------------------------------------------------------------
     861/     8A2 :                     ; Subroutine to Map tiles to Screen in VDP
     862/     8A2 :                     ; ---------------------------------------------------------------------------
     863/     8A2 :                     
     864/     8A2 :                     MapScreen:
     865/     8A2 : 41F9 00C0 0000      		lea	(vdp_data_port).l,a0		; load VDP data port to a0
     866/     8A8 : 7C00                		moveq	#0,d6				; clear d6
     867/     8AA : 3C38 D820           		move.w	($FFFFD820).w,d6		; load number of tiles to increase to for each set of columns to d6
     868/     8AE : 4846                		swap	d6				; swap words (Sets it to left for long-word amount)
     869/     8B0 :                     
     870/     8B0 :                     .line:
     871/     8B0 : 2140 0004           		move.l	d0,4(a0)			; set to VDP register
     872/     8B4 : 3A01                		move.w	d1,d5				; load number of columns to d5
     873/     8B6 :                     
     874/     8B6 :                     .cell:
     875/     8B6 : 3819                		move.w	(a1)+,d4			; load map
     876/     8B8 : D843                		add.w	d3,d4				; add colour/plane/flip (Render Flag)
     877/     8BA : 3084                		move.w	d4,(a0)				; dump to VRAM
     878/     8BC : 51CD FFF8           		dbf	d5,.cell			; repeat til columns are dumped
     879/     8C0 : D086                		add.l	d6,d0				; increase VRAM location for next set of columns
     880/     8C2 : 51CA FFEC           		dbf	d2,.line			; repeat til all rows are dumped
     881/     8C6 : B040                		cmp.w	d0,d0				; ?? Probably left in by accident
     882/     8C8 : 4E75                		rts
     883/     8CA :                     
     884/     8CA :                     ; ===========================================================================
     885/     8CA :                     ; ---------------------------------------------------------------------------
     886/     8CA : 003C 0001           		ori	#1,ccr
     887/     8CE : 4E75                		rts
     888/     8D0 :                     ; ---------------------------------------------------------------------------
     889/     8D0 :                     ; ===========================================================================
     890/     8D0 :                     ; ---------------------------------------------------------------------------
     891/     8D0 :                     ;
     892/     8D0 :                     ; ---------------------------------------------------------------------------
     893/     8D0 :                     
     894/     8D0 :                     SetupVDPUsingTable:
     895/     8D0 : 43F8 C9B8           		lea	($FFFFC9B8).w,a1
     896/     8D4 :                     
     897/     8D4 :                     .loop:
     898/     8D4 : 3010                		move.w	(a0),d0				; if the currently read word is 0...
     899/     8D6 : 6722                		beq.s	.finish				; we're done, move on...
     900/     8D8 : 727F                		moveq	#$7F,d1
     901/     8DA : C210                		and.b	(a0),d1				; convert the vdp register into an index,
     902/     8DC : 0C01 0013           		cmpi.b	#$13,d1				; are we at the DMA registers?
     903/     8E0 : 6C0E                		bge.s	.next				; if so, increment the address by 2, otherwise...
     904/     8E2 : D241                		add.w	d1,d1				; multiply by 2,
     905/     8E4 : 3390 1000           		move.w	(a0),(a1,d1.w)			; offset into the table...
     906/     8E8 : 33D8 00C0 0004      		move.w	(a0)+,(vdp_control_port).l	; dump it to VDP control
     907/     8EE : 60E4                		bra.s	.loop				; then keep going...
     908/     8F0 :                     
     909/     8F0 :                     .next:
     910/     8F0 : 5448                		addq.w	#2,a0				; increment pointer by 2
     911/     8F2 : 60E0                		bra.s	.loop				; keep going...
     912/     8F4 :                     
     913/     8F4 :                     ; ===========================================================================
     914/     8F4 :                     ; ---------------------------------------------------------------------------
     915/     8F4 : 003C 0001           		ori	#1,ccr				; (???)
     916/     8F8 : 4E75                		rts
     917/     8FA :                     ; ---------------------------------------------------------------------------
     918/     8FA :                     ; ===========================================================================
     919/     8FA :                     ; ---------------------------------------------------------------------------
     920/     8FA :                     ;
     921/     8FA :                     ; ---------------------------------------------------------------------------
     922/     8FA :                     
     923/     8FA :                     .finish:
     924/     8FA : 43E9 0004           		lea	4(a1),a1
     925/     8FE : 3019                		move.w	(a1)+,d0
     926/     900 : E548                		lsl.w	#2,d0
     927/     902 : E148                		lsl.w	#8,d0
     928/     904 : 31C0 D816           		move.w	d0,($FFFFD816).w
     929/     908 : 3019                		move.w	(a1)+,d0
     930/     90A : E548                		lsl.w	#2,d0
     931/     90C : E148                		lsl.w	#8,d0
     932/     90E : 31C0 D81E           		move.w	d0,($FFFFD81E).w
     933/     912 : 3019                		move.w	(a1)+,d0
     934/     914 : EB48                		lsl.w	#5,d0
     935/     916 : E148                		lsl.w	#8,d0
     936/     918 : 31C0 D818           		move.w	d0,($FFFFD818).w
     937/     91C : 3011                		move.w	(a1),d0
     938/     91E : E348                		lsl.w	#1,d0
     939/     920 : E148                		lsl.w	#8,d0
     940/     922 : 31C0 D81A           		move.w	d0,($FFFFD81A).w
     941/     926 : 3038 C9D2           		move.w	($FFFFC9D2).w,d0
     942/     92A : E548                		lsl.w	#2,d0
     943/     92C : E148                		lsl.w	#8,d0
     944/     92E : 31C0 D81C           		move.w	d0,($FFFFD81C).w
     945/     932 : B040                		cmp.w	d0,d0
     946/     934 : 4E75                		rts
     947/     936 :                     
     948/     936 :                     ; ===========================================================================
     949/     936 :                     ; ---------------------------------------------------------------------------
     950/     936 :                     ; Unused subroutine to initialize the control ports,
     951/     936 :                     ; appears leftover from somewhere
     952/     936 :                     ; ---------------------------------------------------------------------------
     953/     936 :                     
     954/     936 :                     ControlInit_Unused:
     955/     936 : 13FC 0001 00A1      		move.b	#1,(z80_reset).l		; (?)
              93C : 1200             
     956/     93E : (MACRO)              		stopZ80
     956/     93E : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              944 : 1100             
     957/     946 : (MACRO)              		waitZ80
     957/     946 : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
              94C : 1100             
     957/     94E : 66F6                                bne.s   .wait
     958/     950 : 7040                		moveq	#$40,d0				; prepare init value
     959/     952 : 13C0 00A1 0009      		move.b	d0,($A10009).l			; ...dump to control port A
     960/     958 : 13C0 00A1 000B      		move.b	d0,($A1000B).l			; ...and port B
     961/     95E : 13C0 00A1 000D      		move.b	d0,($A1000D).l			; ...and extra port
     962/     964 : (MACRO)              		startZ80
     962/     964 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              96A : 1100             
     963/     96C : 4E75                		rts
     964/     96E :                     
     965/     96E :                     ; ===========================================================================
     966/     96E :                     ; ---------------------------------------------------------------------------
     967/     96E :                     ;
     968/     96E :                     ; ---------------------------------------------------------------------------
     969/     96E :                     
     970/     96E :                     sub_96E:
     971/     96E : 43F8 C938           		lea	(unk_C938).w,a1
     972/     972 : 41F9 00A1 0003      		lea	($A10003).l,a0
     973/     978 : 45F8 C936           		lea	(unk_C936).w,a2
     974/     97C : 6100 0056           		bsr.w	sub_9D4
     975/     980 : 41F9 00A1 0005      		lea	($A10005).l,a0
     976/     986 : 45F8 C937           		lea	(unk_C937).w,a2
     977/     98A : 6100 0048           		bsr.w	sub_9D4
     978/     98E : 6102                		bsr.s	sub_992
     979/     990 : 4E75                		rts
     980/     992 :                     
     981/     992 :                     sub_992:
     982/     992 : 7007                		moveq	#7,d0
     983/     994 : 0C38 0007 C936      		cmpi.b	#7,(unk_C936).w
     984/     99A : 6604                		bne.s	loc_9A0
     985/     99C : 5940                		subq.w	#4,d0
     986/     99E : 6002                		bra.s	loc_9A2
     987/     9A0 :                     
     988/     9A0 :                     loc_9A0:
     989/     9A0 : 5340                		subq.w	#1,d0
     990/     9A2 :                     
     991/     9A2 :                     loc_9A2:
     992/     9A2 : 0C38 0007 C937      		cmpi.b	#7,(unk_C937).w
     993/     9A8 : 6606                		bne.s	loc_9B0
     994/     9AA : 5940                		subq.w	#4,d0
     995/     9AC : 6524                		bcs.s	locret_9D2
     996/     9AE : 6002                		bra.s	loc_9B2
     997/     9B0 :                     
     998/     9B0 :                     loc_9B0:
     999/     9B0 : 5340                		subq.w	#1,d0
    1000/     9B2 :                     
    1001/     9B2 :                     loc_9B2:
    1002/     9B2 : 12BC 000F           		move.b	#$F,(a1)
    1003/     9B6 : 4229 0001           		clr.b	1(a1)
    1004/     9BA : 4269 0002           		clr.w	2(a1)
    1005/     9BE : 42A9 0004           		clr.l	4(a1)
    1006/     9C2 : 42A9 0008           		clr.l	8(a1)
    1007/     9C6 : 42A9 000C           		clr.l	$C(a1)
    1008/     9CA : 43E9 0010           		lea	$10(a1),a1
    1009/     9CE : 51C8 FFE2           		dbf	d0,loc_9B2
    1010/     9D2 :                     
    1011/     9D2 :                     locret_9D2:
    1012/     9D2 : 4E75                		rts
    1013/     9D4 :                     
    1014/     9D4 :                     sub_9D4:
    1015/     9D4 : 6100 0030           		bsr.w	sub_A06
    1016/     9D8 : 1480                		move.b	d0,(a2)
    1017/     9DA : 0240 000E           		andi.w	#$E,d0
    1018/     9DE : D040                		add.w	d0,d0
    1019/     9E0 : 4EBB 0004           		jsr	loc_9E6(pc,d0.w)
    1020/     9E4 : 4E75                		rts
    1021/     9E6 :                     
    1022/     9E6 :                     ; ===========================================================================
    1023/     9E6 :                     ; ---------------------------------------------------------------------------
    1024/     9E6 : 4E71                loc_9E6:	nop
    1025/     9E8 : 4E75                		rts
    1026/     9EA :                     ; ---------------------------------------------------------------------------
    1027/     9EA : 6000 006E           		bra.w	loc_A5A
    1028/     9EE :                     
    1029/     9EE :                     ; ---------------------------------------------------------------------------
    1030/     9EE : 4E71                		nop
    1031/     9F0 : 4E75                		rts
    1032/     9F2 :                     ; ---------------------------------------------------------------------------
    1033/     9F2 : 6000 027C           		bra.w	loc_C70
    1034/     9F6 :                     
    1035/     9F6 :                     ; ---------------------------------------------------------------------------
    1036/     9F6 : 4E71                		nop
    1037/     9F8 : 4E75                		rts
    1038/     9FA :                     ; ---------------------------------------------------------------------------
    1039/     9FA : 4E71                		nop
    1040/     9FC : 4E75                		rts
    1041/     9FE :                     ; ---------------------------------------------------------------------------
    1042/     9FE : 6000 0130           		bra.w	loc_B30
    1043/     A02 :                     
    1044/     A02 :                     ; ---------------------------------------------------------------------------
    1045/     A02 : 6000 01B6           		bra.w	loc_BBA
    1046/     A06 :                     
    1047/     A06 :                     ; ---------------------------------------------------------------------------
    1048/     A06 :                     ; ===========================================================================
    1049/     A06 :                     
    1050/     A06 :                     sub_A06:
    1051/     A06 : (MACRO)              		stopZ80
    1051/     A06 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              A0C : 1100             
    1052/     A0E : 117C 0040 0006      		move.b	#$40,6(a0)
    1053/     A14 : 10BC 0040           		move.b	#$40,(a0)
    1054/     A18 : 7000                		moveq	#0,d0
    1055/     A1A : 7200                		moveq	#0,d1
    1056/     A1C : 740F                		moveq	#$F,d2
    1057/     A1E : 4E71                		nop
    1058/     A20 : 1210                		move.b	(a0),d1
    1059/     A22 : C401                		and.b	d1,d2
    1060/     A24 : 4841                		swap	d1
    1061/     A26 : 803B 2022           		or.b	byte_A4A(pc,d2.w),d0
    1062/     A2A : 10BC 0000           		move.b	#0,(a0)
    1063/     A2E : E548                		lsl.w	#2,d0
    1064/     A30 : 740F                		moveq	#$F,d2
    1065/     A32 : 4E71                		nop
    1066/     A34 : 1210                		move.b	(a0),d1
    1067/     A36 : C401                		and.b	d1,d2
    1068/     A38 : 803B 2010           		or.b	byte_A4A(pc,d2.w),d0
    1069/     A3C : 10BC 0040           		move.b	#$40,(a0)
    1070/     A40 : (MACRO)              		startZ80
    1070/     A40 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              A46 : 1100             
    1071/     A48 : 4E75                		rts
    1072/     A4A :                     
    1073/     A4A :                     ; ===========================================================================
    1074/     A4A :                     ; ---------------------------------------------------------------------------
    1075/     A4A : 0001 0101           byte_A4A:	dc.b $00,$01,$01,$01
    1076/     A4E : 0203 0303           		dc.b $02,$03,$03,$03
    1077/     A52 : 0203 0303           		dc.b $02,$03,$03,$03
    1078/     A56 : 0203 0303           		dc.b $02,$03,$03,$03
    1079/     A5A :                     ; ---------------------------------------------------------------------------
    1080/     A5A :                     ; ===========================================================================
    1081/     A5A :                     
    1082/     A5A :                     loc_A5A:
    1083/     A5A : (MACRO)              		_move.b	#2,0(a1)
    1083/     A5A :  (MACRO-2)                           insn2op move.b, #2,0(a1)
    1083/     A5A : =>TRUE                         if (chkop("#2","0("))
    1083/     A5A : =>FALSE                                if (chkop("0(a1)","0("))
    1083/     A5A :                                             !move.b   #2,0(a1)
    1083/     A5A : =>TRUE                                 else
    1083/     A5A : 137C 0002 0001                              !move.b   #2,1+0(a1)
    1083/     A5F :                                             !org    *-1
    1083/     A5F : 00                                          !dc.b   0
    1083/     A60 : [1083]                                 endif
    1083/     A60 : =>FALSE                        else
    1083/     A60 :                                     if chkop("0(a1)","d")
    1083/     A60 :                                       if (chkop("0(a1)","0("))
    1083/     A60 :                     start:
    1083/     A60 :                                             !move.b   1+#2,0(a1)
    1083/     A60 :                     end:
    1083/     A60 :                                             !org    start+3
    1083/     A60 :                                             !dc.b   0
    1083/     A60 :                                             !org    end
    1083/     A60 :                                       else
    1083/     A60 :                                             !move.b   1+#2,1+0(a1)
    1083/     A60 :                                             !org    *-3
    1083/     A60 :                                             !dc.b   0
    1083/     A60 :                                             !org    *+1
    1083/     A60 :                                             !dc.b   0
    1083/     A60 : [1083]                                 endif
    1083/     A60 :                                     else
    1083/     A60 :                                             !move.b   1+#2,0(a1)
    1083/     A60 :                                             !org    *-1
    1083/     A60 :                                             !dc.b   0
    1083/     A60 : [1083]                               endif
    1083/     A60 : [1083]                         endif
    1084/     A60 : 3E3C 00FF           		move.w	#$FF,d7
    1085/     A64 : (MACRO)              		stopZ80
    1085/     A64 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              A6A : 1100             
    1086/     A6C : 117C 0060 0006      		move.b	#$60,6(a0)
    1087/     A72 : 10BC 0020           		move.b	#$20,(a0)
    1088/     A76 : 0810 0004           		btst	#4,(a0)
    1089/     A7A : 6730                		beq.s	loc_AAC
    1090/     A7C : 6100 01CA           		bsr.w	sub_C48
    1091/     A80 : 6500 002A           		bcs.w	loc_AAC
    1092/     A84 : 7C00                		moveq	#0,d6
    1093/     A86 : 6100 01A6           		bsr.w	sub_C2E
    1094/     A8A : 6500 0020           		bcs.w	loc_AAC
    1095/     A8E : 6100 003A           		bsr.w	sub_ACA
    1096/     A92 : 10BC 0060           		move.b	#$60,(a0)
    1097/     A96 :                     
    1098/     A96 :                     loc_A96:
    1099/     A96 : 0810 0004           		btst	#4,(a0)
    1100/     A9A : 56CF FFFA           		dbne	d7,loc_A96
    1101/     A9E : 6700 01C2           		beq.w	loc_C62
    1102/     AA2 : (MACRO)              		startZ80
    1102/     AA2 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              AA8 : 1100             
    1103/     AAA : 4E75                		rts
    1104/     AAC :                     
    1105/     AAC :                     loc_AAC:
    1106/     AAC : 43E9 0010           		lea	$10(a1),a1
    1107/     AB0 : 10BC 0060           		move.b	#$60,(a0)
    1108/     AB4 :                     
    1109/     AB4 :                     loc_AB4:
    1110/     AB4 : 0810 0004           		btst	#4,(a0)
    1111/     AB8 : 56CF FFFA           		dbne	d7,loc_AB4
    1112/     ABC : 6700 01A4           		beq.w	loc_C62
    1113/     AC0 : (MACRO)              		startZ80
    1113/     AC0 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              AC6 : 1100             
    1114/     AC8 : 4E75                		rts
    1115/     ACA :                     
    1116/     ACA :                     sub_ACA:
    1117/     ACA : 6100 0162           		bsr.w	sub_C2E
    1118/     ACE : 6500 018C           		bcs.w	loc_C5C
    1119/     AD2 : 0240 000F           		andi.w	#$F,d0
    1120/     AD6 : 1340 0001           		move.b	d0,1(a1)
    1121/     ADA : 6100 0152           		bsr.w	sub_C2E
    1122/     ADE : 6500 017C           		bcs.w	loc_C5C
    1123/     AE2 : 0240 000F           		andi.w	#$F,d0
    1124/     AE6 : 1340 0002           		move.b	d0,2(a1)
    1125/     AEA : 6100 0142           		bsr.w	sub_C2E
    1126/     AEE : 6500 016C           		bcs.w	loc_C5C
    1127/     AF2 : 0240 000F           		andi.w	#$F,d0
    1128/     AF6 : 1340 0003           		move.b	d0,3(a1)
    1129/     AFA : 6100 0132           		bsr.w	sub_C2E
    1130/     AFE : 6500 015C           		bcs.w	loc_C5C
    1131/     B02 : 0240 000F           		andi.w	#$F,d0
    1132/     B06 : 1340 0004           		move.b	d0,4(a1)
    1133/     B0A : 6100 0122           		bsr.w	sub_C2E
    1134/     B0E : 6500 014C           		bcs.w	loc_C5C
    1135/     B12 : 0240 000F           		andi.w	#$F,d0
    1136/     B16 : 1340 0005           		move.b	d0,5(a1)
    1137/     B1A : 6100 0112           		bsr.w	sub_C2E
    1138/     B1E : 6500 013C           		bcs.w	loc_C5C
    1139/     B22 : 0240 000F           		andi.w	#$F,d0
    1140/     B26 : 1340 0006           		move.b	d0,6(a1)
    1141/     B2A : 43E9 0010           		lea	$10(a1),a1
    1142/     B2E : 4E75                		rts
    1143/     B30 :                     
    1144/     B30 :                     ; ===========================================================================
    1145/     B30 :                     
    1146/     B30 :                     loc_B30:
    1147/     B30 : (MACRO)              		stopZ80
    1147/     B30 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              B36 : 1100             
    1148/     B38 : 117C 0040 0006      		move.b	#$40,6(a0)
    1149/     B3E : 7602                		moveq	#2,d3
    1150/     B40 :                     
    1151/     B40 :                     loc_B40:
    1152/     B40 : 2001                		move.l	d1,d0
    1153/     B42 : 0200 000F           		andi.b	#$F,d0
    1154/     B46 : 6726                		beq.s	loc_B6E
    1155/     B48 : 10BC 0040           		move.b	#$40,(a0)
    1156/     B4C : 7200                		moveq	#0,d1
    1157/     B4E : 4E71                		nop
    1158/     B50 : 4E71                		nop
    1159/     B52 : 4E71                		nop
    1160/     B54 : 1210                		move.b	(a0),d1
    1161/     B56 : 10BC 0000           		move.b	#0,(a0)
    1162/     B5A : 4841                		swap	d1
    1163/     B5C : 4E71                		nop
    1164/     B5E : 4E71                		nop
    1165/     B60 : 4E71                		nop
    1166/     B62 : (MACRO)              		_move.b	0(a0),d1
    1166/     B62 :  (MACRO-2)                           insn2op move.b, 0(a0),d1
    1166/     B62 : =>FALSE                        if (chkop("0(a0)","0("))
    1166/     B62 :                                       if (chkop("d1","0("))
    1166/     B62 :                                             !move.b   0(a0),d1
    1166/     B62 :                                       else
    1166/     B62 :                                             !move.b   0(a0),1+d1
    1166/     B62 :                                             !org    *-1
    1166/     B62 :                                             !dc.b   0
    1166/     B62 : [1166]                                 endif
    1166/     B62 : =>TRUE                         else
    1166/     B62 : =>FALSE                              if chkop("d1","d")
    1166/     B62 :                                       if (chkop("d1","0("))
    1166/     B62 :                     start:
    1166/     B62 :                                             !move.b   1+0(a0),d1
    1166/     B62 :                     end:
    1166/     B62 :                                             !org    start+3
    1166/     B62 :                                             !dc.b   0
    1166/     B62 :                                             !org    end
    1166/     B62 :                                       else
    1166/     B62 :                                             !move.b   1+0(a0),1+d1
    1166/     B62 :                                             !org    *-3
    1166/     B62 :                                             !dc.b   0
    1166/     B62 :                                             !org    *+1
    1166/     B62 :                                             !dc.b   0
    1166/     B62 : [1166]                                 endif
    1166/     B62 : =>TRUE                               else
    1166/     B62 : 1228 0001                                   !move.b   1+0(a0),d1
    1166/     B65 :                                             !org    *-1
    1166/     B65 : 00                                          !dc.b   0
    1166/     B66 : [1166]                               endif
    1166/     B66 : [1166]                         endif
    1167/     B66 : 51CB FFD8           		dbf	d3,loc_B40
    1168/     B6A : 6000 006E           		bra.w	loc_BDA
    1169/     B6E :                     
    1170/     B6E :                     loc_B6E:
    1171/     B6E : 10BC 0040           		move.b	#$40,(a0)
    1172/     B72 : 7400                		moveq	#0,d2
    1173/     B74 : (MACRO)              		_move.b	0(a0),d2
    1173/     B74 :  (MACRO-2)                           insn2op move.b, 0(a0),d2
    1173/     B74 : =>FALSE                        if (chkop("0(a0)","0("))
    1173/     B74 :                                       if (chkop("d2","0("))
    1173/     B74 :                                             !move.b   0(a0),d2
    1173/     B74 :                                       else
    1173/     B74 :                                             !move.b   0(a0),1+d2
    1173/     B74 :                                             !org    *-1
    1173/     B74 :                                             !dc.b   0
    1173/     B74 : [1173]                                 endif
    1173/     B74 : =>TRUE                         else
    1173/     B74 : =>FALSE                              if chkop("d2","d")
    1173/     B74 :                                       if (chkop("d2","0("))
    1173/     B74 :                     start:
    1173/     B74 :                                             !move.b   1+0(a0),d2
    1173/     B74 :                     end:
    1173/     B74 :                                             !org    start+3
    1173/     B74 :                                             !dc.b   0
    1173/     B74 :                                             !org    end
    1173/     B74 :                                       else
    1173/     B74 :                                             !move.b   1+0(a0),1+d2
    1173/     B74 :                                             !org    *-3
    1173/     B74 :                                             !dc.b   0
    1173/     B74 :                                             !org    *+1
    1173/     B74 :                                             !dc.b   0
    1173/     B74 : [1173]                                 endif
    1173/     B74 : =>TRUE                               else
    1173/     B74 : 1428 0001                                   !move.b   1+0(a0),d2
    1173/     B77 :                                             !org    *-1
    1173/     B77 : 00                                          !dc.b   0
    1173/     B78 : [1173]                               endif
    1173/     B78 : [1173]                         endif
    1174/     B78 : 10BC 0000           		move.b	#0,(a0)
    1175/     B7C : 4842                		swap	d2
    1176/     B7E : (MACRO)              		_move.b	0(a0),d2
    1176/     B7E :  (MACRO-2)                           insn2op move.b, 0(a0),d2
    1176/     B7E : =>FALSE                        if (chkop("0(a0)","0("))
    1176/     B7E :                                       if (chkop("d2","0("))
    1176/     B7E :                                             !move.b   0(a0),d2
    1176/     B7E :                                       else
    1176/     B7E :                                             !move.b   0(a0),1+d2
    1176/     B7E :                                             !org    *-1
    1176/     B7E :                                             !dc.b   0
    1176/     B7E : [1176]                                 endif
    1176/     B7E : =>TRUE                         else
    1176/     B7E : =>FALSE                              if chkop("d2","d")
    1176/     B7E :                                       if (chkop("d2","0("))
    1176/     B7E :                     start:
    1176/     B7E :                                             !move.b   1+0(a0),d2
    1176/     B7E :                     end:
    1176/     B7E :                                             !org    start+3
    1176/     B7E :                                             !dc.b   0
    1176/     B7E :                                             !org    end
    1176/     B7E :                                       else
    1176/     B7E :                                             !move.b   1+0(a0),1+d2
    1176/     B7E :                                             !org    *-3
    1176/     B7E :                                             !dc.b   0
    1176/     B7E :                                             !org    *+1
    1176/     B7E :                                             !dc.b   0
    1176/     B7E : [1176]                                 endif
    1176/     B7E : =>TRUE                               else
    1176/     B7E : 1428 0001                                   !move.b   1+0(a0),d2
    1176/     B81 :                                             !org    *-1
    1176/     B81 : 00                                          !dc.b   0
    1176/     B82 : [1176]                               endif
    1176/     B82 : [1176]                         endif
    1177/     B82 : (MACRO)              		startZ80
    1177/     B82 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              B88 : 1100             
    1178/     B8A : (MACRO)              		_move.b	#1,0(a1)
    1178/     B8A :  (MACRO-2)                           insn2op move.b, #1,0(a1)
    1178/     B8A : =>TRUE                         if (chkop("#1","0("))
    1178/     B8A : =>FALSE                                if (chkop("0(a1)","0("))
    1178/     B8A :                                             !move.b   #1,0(a1)
    1178/     B8A : =>TRUE                                 else
    1178/     B8A : 137C 0001 0001                              !move.b   #1,1+0(a1)
    1178/     B8F :                                             !org    *-1
    1178/     B8F : 00                                          !dc.b   0
    1178/     B90 : [1178]                                 endif
    1178/     B90 : =>FALSE                        else
    1178/     B90 :                                     if chkop("0(a1)","d")
    1178/     B90 :                                       if (chkop("0(a1)","0("))
    1178/     B90 :                     start:
    1178/     B90 :                                             !move.b   1+#1,0(a1)
    1178/     B90 :                     end:
    1178/     B90 :                                             !org    start+3
    1178/     B90 :                                             !dc.b   0
    1178/     B90 :                                             !org    end
    1178/     B90 :                                       else
    1178/     B90 :                                             !move.b   1+#1,1+0(a1)
    1178/     B90 :                                             !org    *-3
    1178/     B90 :                                             !dc.b   0
    1178/     B90 :                                             !org    *+1
    1178/     B90 :                                             !dc.b   0
    1178/     B90 : [1178]                                 endif
    1178/     B90 :                                     else
    1178/     B90 :                                             !move.b   1+#1,0(a1)
    1178/     B90 :                                             !org    *-1
    1178/     B90 :                                             !dc.b   0
    1178/     B90 : [1178]                               endif
    1178/     B90 : [1178]                         endif
    1179/     B90 : 3001                		move.w	d1,d0
    1180/     B92 : 4841                		swap	d1
    1181/     B94 : E500                		asl.b	#2,d0
    1182/     B96 : 0240 00C0           		andi.w	#$C0,d0
    1183/     B9A : 0241 003F           		andi.w	#$3F,d1
    1184/     B9E : 8001                		or.b	d1,d0
    1185/     BA0 : 4600                		not.b	d0
    1186/     BA2 : 6100 0066           		bsr.w	sub_C0A
    1187/     BA6 : 4842                		swap	d2
    1188/     BA8 : 3002                		move.w	d2,d0
    1189/     BAA : 4600                		not.b	d0
    1190/     BAC : 0240 000F           		andi.w	#$F,d0
    1191/     BB0 : 6100 006A           		bsr.w	sub_C1C
    1192/     BB4 : 43E9 0010           		lea	$10(a1),a1
    1193/     BB8 : 4E75                		rts
    1194/     BBA :                     
    1195/     BBA :                     loc_BBA:
    1196/     BBA : (MACRO)              		_move.b	#$F,0(a1)
    1196/     BBA :  (MACRO-2)                           insn2op move.b, #$F,0(a1)
    1196/     BBA : =>TRUE                         if (chkop("#$F","0("))
    1196/     BBA : =>FALSE                                if (chkop("0(a1)","0("))
    1196/     BBA :                                             !move.b   #$F,0(a1)
    1196/     BBA : =>TRUE                                 else
    1196/     BBA : 137C 000F 0001                              !move.b   #$F,1+0(a1)
    1196/     BBF :                                             !org    *-1
    1196/     BBF : 00                                          !dc.b   0
    1196/     BC0 : [1196]                                 endif
    1196/     BC0 : =>FALSE                        else
    1196/     BC0 :                                     if chkop("0(a1)","d")
    1196/     BC0 :                                       if (chkop("0(a1)","0("))
    1196/     BC0 :                     start:
    1196/     BC0 :                                             !move.b   1+#$F,0(a1)
    1196/     BC0 :                     end:
    1196/     BC0 :                                             !org    start+3
    1196/     BC0 :                                             !dc.b   0
    1196/     BC0 :                                             !org    end
    1196/     BC0 :                                       else
    1196/     BC0 :                                             !move.b   1+#$F,1+0(a1)
    1196/     BC0 :                                             !org    *-3
    1196/     BC0 :                                             !dc.b   0
    1196/     BC0 :                                             !org    *+1
    1196/     BC0 :                                             !dc.b   0
    1196/     BC0 : [1196]                                 endif
    1196/     BC0 :                                     else
    1196/     BC0 :                                             !move.b   1+#$F,0(a1)
    1196/     BC0 :                                             !org    *-1
    1196/     BC0 :                                             !dc.b   0
    1196/     BC0 : [1196]                               endif
    1196/     BC0 : [1196]                         endif
    1197/     BC0 : 4229 0001           		clr.b	1(a1)
    1198/     BC4 : 4269 0002           		clr.w	2(a1)
    1199/     BC8 : 42A9 0004           		clr.l	4(a1)
    1200/     BCC : 42A9 0008           		clr.l	8(a1)
    1201/     BD0 : 42A9 000C           		clr.l	$C(a1)
    1202/     BD4 : 43E9 0010           		lea	$10(a1),a1
    1203/     BD8 : 4E75                		rts
    1204/     BDA :                     
    1205/     BDA :                     loc_BDA:
    1206/     BDA : (MACRO)              		_clr.b	0(a1)
    1206/     BDA :  (MACRO-2)                           insn1op clr.b, 0(a1)
    1206/     BDA : =>FALSE                        if (chkop("0(a1)","0("))
    1206/     BDA :                                     !clr.b   0(a1)
    1206/     BDA : =>TRUE                         else
    1206/     BDA : 4229 0001                           !clr.b   1+0(a1)
    1206/     BDD :                                     !org    *-1
    1206/     BDD : 00                                  !dc.b   0
    1206/     BDE : [1206]                         endif
    1207/     BDE : 117C 0040 0006      		move.b	#$40,6(a0)
    1208/     BE4 : 3001                		move.w	d1,d0
    1209/     BE6 : 4841                		swap	d1
    1210/     BE8 : 10BC 0040           		move.b	#$40,(a0)
    1211/     BEC : (MACRO)              		startZ80
    1211/     BEC : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              BF2 : 1100             
    1212/     BF4 : E500                		asl.b	#2,d0
    1213/     BF6 : 0240 00C0           		andi.w	#$C0,d0
    1214/     BFA : 0241 003F           		andi.w	#$3F,d1
    1215/     BFE : 8001                		or.b	d1,d0
    1216/     C00 : 4600                		not.b	d0
    1217/     C02 : 6106                		bsr.s	sub_C0A
    1218/     C04 : 43E9 0010           		lea	$10(a1),a1
    1219/     C08 : 4E75                		rts
    1220/     C0A :                     
    1221/     C0A :                     
    1222/     C0A :                     sub_C0A:
    1223/     C0A : 1229 0004           		move.b	4(a1),d1
    1224/     C0E : B101                		eor.b	d0,d1
    1225/     C10 : 1340 0004           		move.b	d0,4(a1)
    1226/     C14 : C200                		and.b	d0,d1
    1227/     C16 : 1341 0005           		move.b	d1,5(a1)
    1228/     C1A : 4E75                		rts
    1229/     C1C :                     
    1230/     C1C :                     sub_C1C:
    1231/     C1C : 1229 0003           		move.b	3(a1),d1
    1232/     C20 : B101                		eor.b	d0,d1
    1233/     C22 : 1340 0003           		move.b	d0,3(a1)
    1234/     C26 : C200                		and.b	d0,d1
    1235/     C28 : 1341 0006           		move.b	d1,6(a1)
    1236/     C2C : 4E75                		rts
    1237/     C2E :                     
    1238/     C2E :                     sub_C2E:
    1239/     C2E : 0846 0000           		bchg	#0,d6
    1240/     C32 : 6614                		bne.s	sub_C48
    1241/     C34 :                     
    1242/     C34 :                     loc_C34:
    1243/     C34 : 10BC 0020           		move.b	#$20,(a0)
    1244/     C38 :                     
    1245/     C38 :                     loc_C38:
    1246/     C38 : 1010                		move.b	(a0),d0
    1247/     C3A : 0800 0004           		btst	#4,d0
    1248/     C3E : 56CF FFF8           		dbne	d7,loc_C38
    1249/     C42 : 6718                		beq.s	loc_C5C
    1250/     C44 : 1010                		move.b	(a0),d0
    1251/     C46 : 4E75                		rts
    1252/     C48 :                     
    1253/     C48 :                     sub_C48:
    1254/     C48 : 10BC 0000           		move.b	#0,(a0)
    1255/     C4C :                     
    1256/     C4C :                     loc_C4C:
    1257/     C4C : 1010                		move.b	(a0),d0
    1258/     C4E : 0800 0004           		btst	#4,d0
    1259/     C52 : 57CF FFF8           		dbeq	d7,loc_C4C
    1260/     C56 : 6604                		bne.s	loc_C5C
    1261/     C58 : 1010                		move.b	(a0),d0
    1262/     C5A : 4E75                		rts
    1263/     C5C :                     
    1264/     C5C :                     loc_C5C:
    1265/     C5C : 003C 0001           		ori	#1,ccr
    1266/     C60 : 4E75                		rts
    1267/     C62 :                     
    1268/     C62 :                     loc_C62:
    1269/     C62 : (MACRO)              		startZ80
    1269/     C62 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              C68 : 1100             
    1270/     C6A : 003C 0001           		ori	#1,ccr
    1271/     C6E : 4E75                		rts
    1272/     C70 :                     
    1273/     C70 :                     ; ===========================================================================
    1274/     C70 :                     
    1275/     C70 :                     loc_C70:
    1276/     C70 : (MACRO)              		stopZ80
    1276/     C70 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              C76 : 1100             
    1277/     C78 : 10BC 0020           		move.b	#$20,(a0)
    1278/     C7C : 117C 0060 0006      		move.b	#$60,6(a0)
    1279/     C82 : 3E3C 00FF           		move.w	#$FF,d7
    1280/     C86 : 0810 0004           		btst	#4,(a0)
    1281/     C8A : 6700 0084           		beq.w	loc_D10
    1282/     C8E : 61B8                		bsr.s	sub_C48
    1283/     C90 : 6500 007E           		bcs.w	loc_D10
    1284/     C94 : 0200 000F           		andi.b	#$F,d0
    1285/     C98 : 619A                		bsr.s	loc_C34
    1286/     C9A : 6500 0074           		bcs.w	loc_D10
    1287/     C9E : 0200 000F           		andi.b	#$F,d0
    1288/     CA2 : 61A4                		bsr.s	sub_C48
    1289/     CA4 : 6500 006A           		bcs.w	loc_D10
    1290/     CA8 : 0200 000F           		andi.b	#$F,d0
    1291/     CAC : (MACRO)              		_move.b	d0,0(a1)
    1291/     CAC :  (MACRO-2)                           insn2op move.b, d0,0(a1)
    1291/     CAC : =>TRUE                         if (chkop("d0","0("))
    1291/     CAC : =>FALSE                                if (chkop("0(a1)","0("))
    1291/     CAC :                                             !move.b   d0,0(a1)
    1291/     CAC : =>TRUE                                 else
    1291/     CAC : 1340 0001                                   !move.b   d0,1+0(a1)
    1291/     CAF :                                             !org    *-1
    1291/     CAF : 00                                          !dc.b   0
    1291/     CB0 : [1291]                                 endif
    1291/     CB0 : =>FALSE                        else
    1291/     CB0 :                                     if chkop("0(a1)","d")
    1291/     CB0 :                                       if (chkop("0(a1)","0("))
    1291/     CB0 :                     start:
    1291/     CB0 :                                             !move.b   1+d0,0(a1)
    1291/     CB0 :                     end:
    1291/     CB0 :                                             !org    start+3
    1291/     CB0 :                                             !dc.b   0
    1291/     CB0 :                                             !org    end
    1291/     CB0 :                                       else
    1291/     CB0 :                                             !move.b   1+d0,1+0(a1)
    1291/     CB0 :                                             !org    *-3
    1291/     CB0 :                                             !dc.b   0
    1291/     CB0 :                                             !org    *+1
    1291/     CB0 :                                             !dc.b   0
    1291/     CB0 : [1291]                                 endif
    1291/     CB0 :                                     else
    1291/     CB0 :                                             !move.b   1+d0,0(a1)
    1291/     CB0 :                                             !org    *-1
    1291/     CB0 :                                             !dc.b   0
    1291/     CB0 : [1291]                               endif
    1291/     CB0 : [1291]                         endif
    1292/     CB0 : 6182                		bsr.s	loc_C34
    1293/     CB2 : 6500 005C           		bcs.w	loc_D10
    1294/     CB6 : 0200 000F           		andi.b	#$F,d0
    1295/     CBA : 1340 0010           		move.b	d0,$10(a1)
    1296/     CBE : 6188                		bsr.s	sub_C48
    1297/     CC0 : 6500 004E           		bcs.w	loc_D10
    1298/     CC4 : 0200 000F           		andi.b	#$F,d0
    1299/     CC8 : 1340 0020           		move.b	d0,$20(a1)
    1300/     CCC : 7C00                		moveq	#0,d6
    1301/     CCE : 6100 FF5E           		bsr.w	sub_C2E
    1302/     CD2 : 6500 003C           		bcs.w	loc_D10
    1303/     CD6 : 0200 000F           		andi.b	#$F,d0
    1304/     CDA : 1340 0030           		move.b	d0,$30(a1)
    1305/     CDE : 615A                		bsr.s	sub_D3A
    1306/     CE0 : 6500 002E           		bcs.w	loc_D10
    1307/     CE4 : 6154                		bsr.s	sub_D3A
    1308/     CE6 : 6500 002C           		bcs.w	loc_D14
    1309/     CEA : 614E                		bsr.s	sub_D3A
    1310/     CEC : 6500 002A           		bcs.w	loc_D18
    1311/     CF0 : 6148                		bsr.s	sub_D3A
    1312/     CF2 : 6500 0028           		bcs.w	loc_D1C
    1313/     CF6 : 10BC 0060           		move.b	#$60,(a0)
    1314/     CFA :                     
    1315/     CFA :                     loc_CFA:
    1316/     CFA : 0810 0004           		btst	#4,(a0)
    1317/     CFE : 56CF FFFA           		dbne	d7,loc_CFA
    1318/     D02 : 6700 FF5E           		beq.w	loc_C62
    1319/     D06 : (MACRO)              		startZ80
    1319/     D06 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              D0C : 1100             
    1320/     D0E : 4E75                		rts
    1321/     D10 :                     
    1322/     D10 :                     loc_D10:
    1323/     D10 : 43E9 0010           		lea	$10(a1),a1
    1324/     D14 :                     
    1325/     D14 :                     loc_D14:
    1326/     D14 : 43E9 0010           		lea	$10(a1),a1
    1327/     D18 :                     
    1328/     D18 :                     loc_D18:
    1329/     D18 : 43E9 0010           		lea	$10(a1),a1
    1330/     D1C :                     
    1331/     D1C :                     loc_D1C:
    1332/     D1C : 43E9 0010           		lea	$10(a1),a1
    1333/     D20 : 10BC 0060           		move.b	#$60,(a0)
    1334/     D24 :                     
    1335/     D24 :                     loc_D24:
    1336/     D24 : 0810 0004           		btst	#4,(a0)
    1337/     D28 : 56CF FFFA           		dbne	d7,loc_D24
    1338/     D2C : 6700 FF34           		beq.w	loc_C62
    1339/     D30 : (MACRO)              		startZ80
    1339/     D30 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              D36 : 1100             
    1340/     D38 : 4E75                		rts
    1341/     D3A :                     
    1342/     D3A :                     sub_D3A:
    1343/     D3A : 7000                		moveq	#0,d0
    1344/     D3C : 1011                		move.b	(a1),d0
    1345/     D3E : 0C00 0002           		cmpi.b	#2,d0
    1346/     D42 : 6214                		bhi.s	loc_D58
    1347/     D44 : D040                		add.w	d0,d0
    1348/     D46 : D040                		add.w	d0,d0
    1349/     D48 : 4EFB 0002           		jmp	loc_D4C(pc,d0.w)
    1350/     D4C :                     ; ===========================================================================
    1351/     D4C :                     ; ---------------------------------------------------------------------------
    1352/     D4C : 6000 004A           loc_D4C:	bra.w	loc_D98
    1353/     D50 : 6000 0020           		bra.w	loc_D72
    1354/     D54 : 6000 FD74           		bra.w	sub_ACA
    1355/     D58 :                     ; ---------------------------------------------------------------------------
    1356/     D58 :                     ; ===========================================================================
    1357/     D58 :                     
    1358/     D58 :                     loc_D58:
    1359/     D58 : 4229 0001           		clr.b	1(a1)
    1360/     D5C : 4269 0002           		clr.w	2(a1)
    1361/     D60 : 42A9 0004           		clr.l	4(a1)
    1362/     D64 : 42A9 0008           		clr.l	8(a1)
    1363/     D68 : 42A9 000C           		clr.l	$C(a1)
    1364/     D6C : 43E9 0010           		lea	$10(a1),a1
    1365/     D70 : 4E75                		rts
    1366/     D72 :                     
    1367/     D72 :                     ; ===========================================================================
    1368/     D72 :                     
    1369/     D72 :                     loc_D72:
    1370/     D72 : 6100 0036           		bsr.w	sub_DAA
    1371/     D76 : 6100 FEB6           		bsr.w	sub_C2E
    1372/     D7A : 6500 FEE0           		bcs.w	loc_C5C
    1373/     D7E : 4600                		not.b	d0
    1374/     D80 : 0240 000F           		andi.w	#$F,d0
    1375/     D84 : 1400                		move.b	d0,d2
    1376/     D86 : 1001                		move.b	d1,d0
    1377/     D88 : 6100 FE80           		bsr.w	sub_C0A
    1378/     D8C : 1002                		move.b	d2,d0
    1379/     D8E : 6100 FE8C           		bsr.w	sub_C1C
    1380/     D92 : 43E9 0010           		lea	$10(a1),a1
    1381/     D96 : 4E75                		rts
    1382/     D98 :                     
    1383/     D98 :                     loc_D98:
    1384/     D98 : 6110                		bsr.s	sub_DAA
    1385/     D9A : 6500 FEC0           		bcs.w	loc_C5C
    1386/     D9E : 1001                		move.b	d1,d0
    1387/     DA0 : 6100 FE68           		bsr.w	sub_C0A
    1388/     DA4 : 43E9 0010           		lea	$10(a1),a1
    1389/     DA8 : 4E75                		rts
    1390/     DAA :                     
    1391/     DAA :                     sub_DAA:
    1392/     DAA : 6100 FE82           		bsr.w	sub_C2E
    1393/     DAE : 6500 FEAC           		bcs.w	loc_C5C
    1394/     DB2 : 0240 000F           		andi.w	#$F,d0
    1395/     DB6 : 3200                		move.w	d0,d1
    1396/     DB8 : 6100 FE74           		bsr.w	sub_C2E
    1397/     DBC : 6500 FE9E           		bcs.w	loc_C5C
    1398/     DC0 : E940                		asl.w	#4,d0
    1399/     DC2 : 8200                		or.b	d0,d1
    1400/     DC4 : 4601                		not.b	d1
    1401/     DC6 : 4E75                		rts
    1402/     DC8 :                     
    1403/     DC8 :                     ; ===========================================================================
    1404/     DC8 :                     
    1405/     DC8 :                     		include "_inc/Nemesis Decompression.asm"
(1)    1/     DC8 :                     ; ---------------------------------------------------------------------------
(1)    2/     DC8 :                     ; Nemesis decompression	subroutine, decompresses art directly to VRAM
(1)    3/     DC8 :                     ; Inputs:
(1)    4/     DC8 :                     ; a0 = art address
(1)    5/     DC8 :                     
(1)    6/     DC8 :                     ; For format explanation see http://info.sonicretro.org/Nemesis_compression
(1)    7/     DC8 :                     ; ---------------------------------------------------------------------------
(1)    8/     DC8 :                     
(1)    9/     DC8 :                     ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
(1)   10/     DC8 :                     
(1)   11/     DC8 :                     ; Nemesis decompression to VRAM
(1)   12/     DC8 :                     NemDec:
(1)   13/     DC8 : 47FA 00AC           		lea	NemPCD_WriteRowToVDP(pc),a3	; write all data to the same location
(1)   14/     DCC : 49F9 00C0 0000      		lea	(vdp_data_port).l,a4		; specifically, to the VDP data port
(1)   15/     DD2 : 6004                		bra.s	NemDecMain
(1)   16/     DD4 :                     
(1)   17/     DD4 :                     ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
(1)   18/     DD4 :                     
(1)   19/     DD4 :                     ; Nemesis decompression subroutine, decompresses art to RAM
(1)   20/     DD4 :                     ; Inputs:
(1)   21/     DD4 :                     ; a0 = art address
(1)   22/     DD4 :                     ; a4 = destination RAM address
(1)   23/     DD4 :                     NemDecToRAM:
(1)   24/     DD4 : 47FA 00B6           		lea	NemPCD_WriteRowToRAM(pc),a3	; advance to the next location after each write
(1)   25/     DD8 :                     
(1)   26/     DD8 :                     NemDecMain:
(1)   27/     DD8 : 43F8 D59A           		lea	(v_ngfx_buffer).w,a1
(1)   28/     DDC : 3418                		move.w	(a0)+,d2			; get number of patterns
(1)   29/     DDE : E34A                		lsl.w	#1,d2
(1)   30/     DE0 : 6404                		bcc.s	loc_DE6				; branch if the sign bit isn't set
(1)   31/     DE2 : D6FC 000A           		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3 ; otherwise the file uses XOR mode
(1)   32/     DE6 :                     
(1)   33/     DE6 :                     loc_DE6:
(1)   34/     DE6 : E54A                		lsl.w	#2,d2				; get number of 8-pixel rows in the uncompressed data
(1)   35/     DE8 : 3A42                		movea.w	d2,a5				; and store it in a5 because there aren't any spare data registers
(1)   36/     DEA : 7608                		moveq	#8,d3				; 8 pixels in a pattern row
(1)   37/     DEC : 7400                		moveq	#0,d2
(1)   38/     DEE : 7800                		moveq	#0,d4
(1)   39/     DF0 : 6100 00B0           		bsr.w	NemDec_BuildCodeTable
(1)   40/     DF4 : 1A18                		move.b	(a0)+,d5			; get first byte of compressed data
(1)   41/     DF6 : E145                		asl.w	#8,d5				; shift up by a byte
(1)   42/     DF8 : 1A18                		move.b	(a0)+,d5			; get second byte of compressed data
(1)   43/     DFA : 3C3C 0010           		move.w	#$10,d6				; set initial shift value
(1)   44/     DFE :                     ; End of function NemDec
(1)   45/     DFE :                     
(1)   46/     DFE :                     ; ---------------------------------------------------------------------------
(1)   47/     DFE :                     ; Part of the Nemesis decompressor, processes the actual compressed data
(1)   48/     DFE :                     ; ---------------------------------------------------------------------------
(1)   49/     DFE :                     
(1)   50/     DFE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)   51/     DFE :                     
(1)   52/     DFE :                     
(1)   53/     DFE :                     NemDec_ProcessCompressedData:
(1)   54/     DFE : 3E06                		move.w	d6,d7
(1)   55/     E00 : 5147                		subq.w	#8,d7				; get shift value
(1)   56/     E02 : 3205                		move.w	d5,d1
(1)   57/     E04 : EE69                		lsr.w	d7,d1				; shift so that high bit of the code is in bit position 7
(1)   58/     E06 : 0C01 00FC           		cmpi.b	#%11111100,d1			; are the high 6 bits set?
(1)   59/     E0A : 643E                		bcc.s	NemPCD_InlineData		; if they are, it signifies inline data
(1)   60/     E0C : 0241 00FF           		andi.w	#$FF,d1
(1)   61/     E10 : D241                		add.w	d1,d1
(1)   62/     E12 : 1031 1000           		move.b	(a1,d1.w),d0			; get the length of the code in bits
(1)   63/     E16 : 4880                		ext.w	d0
(1)   64/     E18 : 9C40                		sub.w	d0,d6				; subtract from shift value so that the next code is read next time around
(1)   65/     E1A : 0C46 0009           		cmpi.w	#9,d6				; does a new byte need to be read?
(1)   66/     E1E : 6406                		bcc.s	loc_E26				; if not, branch
(1)   67/     E20 : 5046                		addq.w	#8,d6
(1)   68/     E22 : E145                		asl.w	#8,d5
(1)   69/     E24 : 1A18                		move.b	(a0)+,d5			; read next byte
(1)   70/     E26 :                     
(1)   71/     E26 :                     loc_E26:
(1)   72/     E26 : 1231 1001           		move.b	1(a1,d1.w),d1
(1)   73/     E2A : 3001                		move.w	d1,d0
(1)   74/     E2C : 0241 000F           		andi.w	#$F,d1				; get palette index for pixel
(1)   75/     E30 : 0240 00F0           		andi.w	#$F0,d0
(1)   76/     E34 :                     
(1)   77/     E34 :                     NemPCD_ProcessCompressedData:
(1)   78/     E34 : E848                		lsr.w	#4,d0				; get repeat count
(1)   79/     E36 :                     
(1)   80/     E36 :                     NemPCD_WritePixel:
(1)   81/     E36 : E98C                		lsl.l	#4,d4				; shift up by a nybble
(1)   82/     E38 : 8801                		or.b	d1,d4				; write pixel
(1)   83/     E3A : 5343                		subq.w	#1,d3				; has an entire 8-pixel row been written?
(1)   84/     E3C : 6606                		bne.s	NemPCD_WritePixel_Loop		; if not, loop
(1)   85/     E3E : 4ED3                		jmp	(a3)				; otherwise, write the row to its destination, by doing a dynamic jump to NemPCD_WriteRowToVDP, NemDec_WriteAndAdvance, NemPCD_WriteRowToVDP_XOR, or NemDec_WriteAndAdvance_XOR
(1)   86/     E40 :                     ; End of function NemDec_ProcessCompressedData
(1)   87/     E40 :                     
(1)   88/     E40 :                     
(1)   89/     E40 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)   90/     E40 :                     
(1)   91/     E40 :                     
(1)   92/     E40 :                     NemPCD_NewRow:
(1)   93/     E40 : 7800                		moveq	#0,d4				; reset row
(1)   94/     E42 : 7608                		moveq	#8,d3				; reset nybble counter
(1)   95/     E44 :                     
(1)   96/     E44 :                     NemPCD_WritePixel_Loop:
(1)   97/     E44 : 51C8 FFF0           		dbf	d0,NemPCD_WritePixel
(1)   98/     E48 : 60B4                		bra.s	NemDec_ProcessCompressedData
(1)   99/     E4A :                     ; ===========================================================================
(1)  100/     E4A :                     
(1)  101/     E4A :                     NemPCD_InlineData:
(1)  102/     E4A : 5D46                		subq.w	#6,d6				; 6 bits needed to signal inline data
(1)  103/     E4C : 0C46 0009           		cmpi.w	#9,d6
(1)  104/     E50 : 6406                		bcc.s	loc_E58
(1)  105/     E52 : 5046                		addq.w	#8,d6
(1)  106/     E54 : E145                		asl.w	#8,d5
(1)  107/     E56 : 1A18                		move.b	(a0)+,d5
(1)  108/     E58 :                     
(1)  109/     E58 :                     loc_E58:
(1)  110/     E58 : 5F46                		subq.w	#7,d6				; and 7 bits needed for the inline data itself
(1)  111/     E5A : 3205                		move.w	d5,d1
(1)  112/     E5C : EC69                		lsr.w	d6,d1				; shift so that low bit of the code is in bit position 0
(1)  113/     E5E : 3001                		move.w	d1,d0
(1)  114/     E60 : 0241 000F           		andi.w	#$F,d1				; get palette index for pixel
(1)  115/     E64 : 0240 0070           		andi.w	#$70,d0				; high nybble is repeat count for pixel
(1)  116/     E68 : 0C46 0009           		cmpi.w	#9,d6
(1)  117/     E6C : 64C6                		bcc.s	NemPCD_ProcessCompressedData
(1)  118/     E6E : 5046                		addq.w	#8,d6
(1)  119/     E70 : E145                		asl.w	#8,d5
(1)  120/     E72 : 1A18                		move.b	(a0)+,d5
(1)  121/     E74 : 60BE                		bra.s	NemPCD_ProcessCompressedData
(1)  122/     E76 :                     ; End of function NemPCD_NewRow
(1)  123/     E76 :                     
(1)  124/     E76 :                     ; ===========================================================================
(1)  125/     E76 :                     
(1)  126/     E76 :                     NemPCD_WriteRowToVDP:
(1)  127/     E76 : 2884                		move.l	d4,(a4)				; write 8-pixel row
(1)  128/     E78 : 534D                		subq.w	#1,a5
(1)  129/     E7A : 380D                		move.w	a5,d4				; have all the 8-pixel rows been written?
(1)  130/     E7C : 66C2                		bne.s	NemPCD_NewRow			; if not, branch
(1)  131/     E7E : 4E75                		rts					; otherwise the decompression is finished
(1)  132/     E80 :                     ; ===========================================================================
(1)  133/     E80 :                     NemPCD_WriteRowToVDP_XOR:
(1)  134/     E80 : B982                		eor.l	d4,d2				; XOR the previous row by the current row
(1)  135/     E82 : 2882                		move.l	d2,(a4)				; and write the result
(1)  136/     E84 : 534D                		subq.w	#1,a5
(1)  137/     E86 : 380D                		move.w	a5,d4
(1)  138/     E88 : 66B6                		bne.s	NemPCD_NewRow
(1)  139/     E8A : 4E75                		rts
(1)  140/     E8C :                     ; ===========================================================================
(1)  141/     E8C :                     
(1)  142/     E8C :                     NemPCD_WriteRowToRAM:
(1)  143/     E8C : 28C4                		move.l	d4,(a4)+
(1)  144/     E8E : 534D                		subq.w	#1,a5
(1)  145/     E90 : 380D                		move.w	a5,d4
(1)  146/     E92 : 66AC                		bne.s	NemPCD_NewRow
(1)  147/     E94 : 4E75                		rts
(1)  148/     E96 :                     ; ===========================================================================
(1)  149/     E96 :                     NemPCD_WriteRowToRAM_XOR:
(1)  150/     E96 : B982                		eor.l	d4,d2
(1)  151/     E98 : 28C2                		move.l	d2,(a4)+
(1)  152/     E9A : 534D                		subq.w	#1,a5
(1)  153/     E9C : 380D                		move.w	a5,d4
(1)  154/     E9E : 66A0                		bne.s	NemPCD_NewRow
(1)  155/     EA0 : 4E75                		rts
(1)  156/     EA2 :                     
(1)  157/     EA2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  158/     EA2 :                     ; ---------------------------------------------------------------------------
(1)  159/     EA2 :                     ; Part of the Nemesis decompressor, builds the code table (in RAM)
(1)  160/     EA2 :                     ; ---------------------------------------------------------------------------
(1)  161/     EA2 :                     
(1)  162/     EA2 :                     
(1)  163/     EA2 :                     NemDec_BuildCodeTable:
(1)  164/     EA2 : 1018                		move.b	(a0)+,d0			; read first byte
(1)  165/     EA4 :                     
(1)  166/     EA4 :                     NemBCT_ChkEnd:
(1)  167/     EA4 : 0C00 00FF           		cmpi.b	#$FF,d0				; has the end of the code table description been reached?
(1)  168/     EA8 : 6602                		bne.s	NemBCT_NewPALIndex		; if not, branch
(1)  169/     EAA : 4E75                		rts					; otherwise, this subroutine's work is done
(1)  170/     EAC :                     ; ===========================================================================
(1)  171/     EAC :                     
(1)  172/     EAC :                     NemBCT_NewPALIndex:
(1)  173/     EAC : 3E00                		move.w	d0,d7
(1)  174/     EAE :                     
(1)  175/     EAE :                     NemBCT_Loop:
(1)  176/     EAE : 1018                		move.b	(a0)+,d0			; read next byte
(1)  177/     EB0 : 0C00 0080           		cmpi.b	#$80,d0				; sign bit being set signifies a new palette index
(1)  178/     EB4 : 64EE                		bcc.s	NemBCT_ChkEnd			; a bmi could have been used instead of a compare and bcc
(1)  179/     EB6 :                     
(1)  180/     EB6 : 1200                		move.b	d0,d1
(1)  181/     EB8 : 0247 000F           		andi.w	#$F,d7				; get palette index
(1)  182/     EBC : 0241 0070           		andi.w	#$70,d1				; get repeat count for palette index
(1)  183/     EC0 : 8E41                		or.w	d1,d7				; combine the two
(1)  184/     EC2 : 0240 000F           		andi.w	#$F,d0				; get the length of the code in bits
(1)  185/     EC6 : 1200                		move.b	d0,d1
(1)  186/     EC8 : E149                		lsl.w	#8,d1
(1)  187/     ECA : 8E41                		or.w	d1,d7				; combine with palette index and repeat count to form code table entry
(1)  188/     ECC : 7208                		moveq	#8,d1
(1)  189/     ECE : 9240                		sub.w	d0,d1				; is the code 8 bits long?
(1)  190/     ED0 : 660A                		bne.s	NemBCT_ShortCode		; if not, a bit of extra processing is needed
(1)  191/     ED2 : 1018                		move.b	(a0)+,d0			; get code
(1)  192/     ED4 : D040                		add.w	d0,d0				; each code gets a word-sized entry in the table
(1)  193/     ED6 : 3387 0000           		move.w	d7,(a1,d0.w)			; store the entry for the code
(1)  194/     EDA : 60D2                		bra.s	NemBCT_Loop			; repeat
(1)  195/     EDC :                     ; ===========================================================================
(1)  196/     EDC :                     
(1)  197/     EDC :                     ; the Nemesis decompressor uses prefix-free codes (no valid code is a prefix of a longer code)
(1)  198/     EDC :                     ; e.g. if 10 is a valid 2-bit code, 110 is a valid 3-bit code but 100 isn't
(1)  199/     EDC :                     ; also, when the actual compressed data is processed the high bit of each code is in bit position 7
(1)  200/     EDC :                     ; so the code needs to be bit-shifted appropriately over here before being used as a code table index
(1)  201/     EDC :                     ; additionally, the code needs multiple entries in the table because no masking is done during compressed data processing
(1)  202/     EDC :                     ; so if 11000 is a valid code then all indices of the form 11000XXX need to have the same entry
(1)  203/     EDC :                     NemBCT_ShortCode:
(1)  204/     EDC : 1018                		move.b	(a0)+,d0			; get code
(1)  205/     EDE : E368                		lsl.w	d1,d0				; get index into code table
(1)  206/     EE0 : D040                		add.w	d0,d0				; shift so that high bit is in bit position 7
(1)  207/     EE2 : 7A01                		moveq	#1,d5
(1)  208/     EE4 : E36D                		lsl.w	d1,d5
(1)  209/     EE6 : 5345                		subq.w	#1,d5				; d5 = 2^d1 - 1
(1)  210/     EE8 :                     
(1)  211/     EE8 :                     NemBCT_ShortCode_Loop:
(1)  212/     EE8 : 3387 0000           		move.w	d7,(a1,d0.w)			; store entry
(1)  213/     EEC : 5440                		addq.w	#2,d0				; increment index
(1)  214/     EEE : 51CD FFF8           		dbf	d5,NemBCT_ShortCode_Loop	; repeat for required number of entries
(1)  215/     EF2 : 60BA                		bra.s	NemBCT_Loop
(1)  216/     EF4 :                     ; End of function NemDec_BuildCodeTable
(1)  217/     EF4 :                     
    1406/     EF4 :                     
    1407/     EF4 :                     ; ===========================================================================
    1408/     EF4 :                     ; ---------------------------------------------------------------------------
    1409/     EF4 :                     ; The Pattern Load Cue routines, unused due to the game not utilizing PLCs.
    1410/     EF4 :                     ; The table reference code seems to be taken out as well.
    1411/     EF4 :                     ; ---------------------------------------------------------------------------
    1412/     EF4 :                     
    1413/     EF4 :                     ;LoadPLC:
    1414/     EF4 : 43F8 D79A           		lea	($FFFFD79A).w,a1
    1415/     EF8 :                     
    1416/     EF8 :                     loc_EF8:
    1417/     EF8 : 4A91                		tst.l	(a1)
    1418/     EFA : 6704                		beq.s	loc_F00
    1419/     EFC : 5C49                		addq.w	#6,a1
    1420/     EFE : 60F8                		bra.s	loc_EF8
    1421/     F00 :                     
    1422/     F00 :                     loc_F00:
    1423/     F00 : 3018                		move.w	(a0)+,d0
    1424/     F02 : 6B08                		bmi.s	locret_F0C
    1425/     F04 :                     
    1426/     F04 :                     loc_F04:
    1427/     F04 : 22D8                		move.l	(a0)+,(a1)+
    1428/     F06 : 32D8                		move.w	(a0)+,(a1)+
    1429/     F08 : 51C8 FFFA           		dbf	d0,loc_F04
    1430/     F0C :                     
    1431/     F0C :                     locret_F0C:
    1432/     F0C : 4E75                		rts
    1433/     F0E :                     
    1434/     F0E :                     ; ===========================================================================
    1435/     F0E :                     
    1436/     F0E :                     ;NewPLC:
    1437/     F0E : 6112                		bsr.s	ClearPLC
    1438/     F10 : 43F8 D79A           		lea	($FFFFD79A).w,a1
    1439/     F14 : 3018                		move.w	(a0)+,d0
    1440/     F16 : 6B08                		bmi.s	locret_F20
    1441/     F18 :                     
    1442/     F18 :                     loc_F18:
    1443/     F18 : 22D8                		move.l	(a0)+,(a1)+
    1444/     F1A : 32D8                		move.w	(a0)+,(a1)+
    1445/     F1C : 51C8 FFFA           		dbf	d0,loc_F18
    1446/     F20 :                     
    1447/     F20 :                     locret_F20:
    1448/     F20 : 4E75                		rts
    1449/     F22 :                     		
    1450/     F22 :                     ; ===========================================================================
    1451/     F22 :                     
    1452/     F22 :                     ClearPLC:
    1453/     F22 : 43F8 D79A           		lea	($FFFFD79A).w,a1
    1454/     F26 : 700F                		moveq	#$F,d0
    1455/     F28 :                     
    1456/     F28 :                     .loop:
    1457/     F28 : 4299                		clr.l	(a1)+
    1458/     F2A : 4259                		clr.w	(a1)+
    1459/     F2C : 51C8 FFFA           		dbf	d0,.loop
    1460/     F30 : 4E75                		rts
    1461/     F32 :                     
    1462/     F32 :                     ; ===========================================================================
    1463/     F32 :                     
    1464/     F32 :                     ;RunPLC:
    1465/     F32 : 4AB8 D79A           		tst.l	($FFFFD79A).w
    1466/     F36 : 674C                		beq.s	locret_F84
    1467/     F38 : 4A78 D812           		tst.w	($FFFFD812).w
    1468/     F3C : 6646                		bne.s	locret_F84
    1469/     F3E : 2078 D79A           		movea.l	($FFFFD79A).w,a0
    1470/     F42 : 47FA FF32           		lea	NemPCD_WriteRowToVDP(pc),a3
    1471/     F46 : 43F8 D59A           		lea	(v_ngfx_buffer).w,a1
    1472/     F4A : 3418                		move.w	(a0)+,d2
    1473/     F4C : 6A04                		bpl.s	loc_F52
    1474/     F4E : D6FC 000A           		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3
    1475/     F52 :                     
    1476/     F52 :                     loc_F52:
    1477/     F52 : 0242 7FFF           		andi.w	#$7FFF,d2
    1478/     F56 : 31C2 D812           		move.w	d2,($FFFFD812).w
    1479/     F5A : 6100 FF46           		bsr.w	NemDec_BuildCodeTable
    1480/     F5E : 1A18                		move.b	(a0)+,d5
    1481/     F60 : E145                		asl.w	#8,d5
    1482/     F62 : 1A18                		move.b	(a0)+,d5
    1483/     F64 : 7C10                		moveq	#$10,d6
    1484/     F66 : 7000                		moveq	#0,d0
    1485/     F68 : 21C8 D79A           		move.l	a0,($FFFFD79A).w
    1486/     F6C : 21CB D80E           		move.l	a3,($FFFFD80E).w
    1487/     F70 : 21C0 D7FA           		move.l	d0,($FFFFD7FA).w
    1488/     F74 : 21C0 D7FE           		move.l	d0,($FFFFD7FE).w
    1489/     F78 : 21C0 D802           		move.l	d0,($FFFFD802).w
    1490/     F7C : 21C5 D806           		move.l	d5,($FFFFD806).w
    1491/     F80 : 21C6 D80A           		move.l	d6,($FFFFD80A).w
    1492/     F84 :                     
    1493/     F84 :                     locret_F84:
    1494/     F84 : 4E75                		rts
    1495/     F86 :                     
    1496/     F86 :                     ; ===========================================================================
    1497/     F86 :                     
    1498/     F86 :                     ;ProcessDPLC:
    1499/     F86 : 4A78 D812           		tst.w	($FFFFD812).w
    1500/     F8A : 6700 0092           		beq.w	locret_101E
    1501/     F8E : 31FC 0006 D814      		move.w	#6,($FFFFD814).w
    1502/     F94 : 7000                		moveq	#0,d0
    1503/     F96 : 3038 D79E           		move.w	($FFFFD79E).w,d0
    1504/     F9A : 0678 00C0 D79E      		addi.w	#$C0,($FFFFD79E).w
    1505/     FA0 : 6018                		bra.s	loc_FBA
    1506/     FA2 :                     
    1507/     FA2 :                     ; ===========================================================================
    1508/     FA2 :                     
    1509/     FA2 :                     ;ProcessDPLC2:
    1510/     FA2 : 4A78 D812           		tst.w	($FFFFD812).w
    1511/     FA6 : 6776                		beq.s	locret_101E
    1512/     FA8 : 31FC 0003 D814      		move.w	#3,($FFFFD814).w
    1513/     FAE : 7000                		moveq	#0,d0
    1514/     FB0 : 3038 D79E           		move.w	($FFFFD79E).w,d0
    1515/     FB4 : 0678 0060 D79E      		addi.w	#$60,($FFFFD79E).w
    1516/     FBA :                     
    1517/     FBA :                     loc_FBA:
    1518/     FBA : 49F9 00C0 0004      		lea	(vdp_control_port).l,a4
    1519/     FC0 : E588                		lsl.l	#2,d0
    1520/     FC2 : E448                		lsr.w	#2,d0
    1521/     FC4 : 0040 4000           		ori.w	#$4000,d0
    1522/     FC8 : 4840                		swap	d0
    1523/     FCA : 2880                		move.l	d0,(a4)
    1524/     FCC : 594C                		subq.w	#4,a4
    1525/     FCE : 2078 D79A           		movea.l	($FFFFD79A).w,a0
    1526/     FD2 : 2038 D7FA           		move.l	($FFFFD7FA).w,d0
    1527/     FD6 : 2238 D7FE           		move.l	($FFFFD7FE).w,d1
    1528/     FDA : 2438 D802           		move.l	($FFFFD802).w,d2
    1529/     FDE : 2A38 D806           		move.l	($FFFFD806).w,d5
    1530/     FE2 : 2C38 D80A           		move.l	($FFFFD80A).w,d6
    1531/     FE6 : 2678 D80E           		movea.l	($FFFFD80E).w,a3
    1532/     FEA : 43F8 D59A           		lea	(v_ngfx_buffer).w,a1
    1533/     FEE :                     
    1534/     FEE :                     loc_FEE:
    1535/     FEE : 3A7C 0008           		movea.w	#8,a5
    1536/     FF2 : 6100 FE4C           		bsr.w	NemPCD_NewRow
    1537/     FF6 : 5378 D812           		subq.w	#1,($FFFFD812).w
    1538/     FFA : 6724                		beq.s	ProcessDPLC_Pop
    1539/     FFC : 5378 D814           		subq.w	#1,($FFFFD814).w
    1540/    1000 : 66EC                		bne.s	loc_FEE
    1541/    1002 : 21C8 D79A           		move.l	a0,($FFFFD79A).w
    1542/    1006 : 21C0 D7FA           		move.l	d0,($FFFFD7FA).w
    1543/    100A : 21C1 D7FE           		move.l	d1,($FFFFD7FE).w
    1544/    100E : 21C2 D802           		move.l	d2,($FFFFD802).w
    1545/    1012 : 21C5 D806           		move.l	d5,($FFFFD806).w
    1546/    1016 : 21C6 D80A           		move.l	d6,($FFFFD80A).w
    1547/    101A : 21CB D80E           		move.l	a3,($FFFFD80E).w
    1548/    101E :                     
    1549/    101E :                     locret_101E:
    1550/    101E : 4E75                		rts
    1551/    1020 :                     		
    1552/    1020 :                     ; ===========================================================================
    1553/    1020 :                     
    1554/    1020 :                     ProcessDPLC_Pop:
    1555/    1020 : 41F8 D79A           		lea	($FFFFD79A).w,a0
    1556/    1024 : 7015                		moveq	#$15,d0
    1557/    1026 :                     
    1558/    1026 :                     loc_1026:
    1559/    1026 : 20E8 0006           		move.l	6(a0),(a0)+
    1560/    102A : 51C8 FFFA           		dbf	d0,loc_1026
    1561/    102E : 4E75                		rts
    1562/    1030 :                     
    1563/    1030 :                     ; ===========================================================================
    1564/    1030 :                     
    1565/    1030 :                     ;QuickPLC:
    1566/    1030 : 43D0                		lea	(a0),a1
    1567/    1032 : 3219                		move.w	(a1)+,d1
    1568/    1034 :                     
    1569/    1034 :                     loc_1034:
    1570/    1034 : 2059                		movea.l	(a1)+,a0
    1571/    1036 : 7000                		moveq	#0,d0
    1572/    1038 : 3019                		move.w	(a1)+,d0
    1573/    103A : E588                		lsl.l	#2,d0
    1574/    103C : E448                		lsr.w	#2,d0
    1575/    103E : 0040 4000           		ori.w	#$4000,d0
    1576/    1042 : 4840                		swap	d0
    1577/    1044 : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    1578/    104A : 48E7 4040           		movem.l	d1/a1,-(sp)
    1579/    104E : 6100 FD78           		bsr.w	NemDec
    1580/    1052 : 4CDF 0202           		movem.l	(sp)+,d1/a1
    1581/    1056 : 51C9 FFDC           		dbf	d1,loc_1034
    1582/    105A : 4E75                		rts
    1583/    105C :                     
    1584/    105C :                     		include "_inc/Enigma Decompression.asm"
(1)    1/    105C :                     ; ---------------------------------------------------------------------------
(1)    2/    105C :                     ; Enigma decompression algorithm
(1)    3/    105C :                     
(1)    4/    105C :                     ; input:
(1)    5/    105C :                     ;	d0 = starting art tile (added to each 8x8 before writing to destination)
(1)    6/    105C :                     ;	a0 = source address
(1)    7/    105C :                     ;	a1 = destination address
(1)    8/    105C :                     
(1)    9/    105C :                     ; usage:
(1)   10/    105C :                     ;	lea	(source).l,a0
(1)   11/    105C :                     ;	lea	(destination).l,a1
(1)   12/    105C :                     ;	move.w	#arttile,d0
(1)   13/    105C :                     ;	bsr.w	EniDec
(1)   14/    105C :                     
(1)   15/    105C :                     ; See http://www.segaretro.org/Enigma_compression for format description
(1)   16/    105C :                     ; ---------------------------------------------------------------------------
(1)   17/    105C :                     
(1)   18/    105C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)   19/    105C :                     
(1)   20/    105C :                     
(1)   21/    105C :                     EniDec:
(1)   22/    105C : 3640                		movea.w	d0,a3				; store starting art tile
(1)   23/    105E : 1018                		move.b	(a0)+,d0
(1)   24/    1060 : 4880                		ext.w	d0
(1)   25/    1062 : 3A40                		movea.w	d0,a5				; store number of bits in inline copy value
(1)   26/    1064 : 1818                		move.b	(a0)+,d4
(1)   27/    1066 : E70C                		lsl.b	#3,d4				; store PCCVH flags bitfield
(1)   28/    1068 : 3458                		movea.w	(a0)+,a2
(1)   29/    106A : D4CB                		adda.w	a3,a2				; store incremental copy word
(1)   30/    106C : 3858                		movea.w	(a0)+,a4
(1)   31/    106E : D8CB                		adda.w	a3,a4				; store literal copy word
(1)   32/    1070 : 1A18                		move.b	(a0)+,d5
(1)   33/    1072 : E145                		asl.w	#8,d5
(1)   34/    1074 : 1A18                		move.b	(a0)+,d5			; get first word in format list
(1)   35/    1076 : 7C10                		moveq	#16,d6				; initial shift value
(1)   36/    1078 :                     ; loc_173E:
(1)   37/    1078 :                     Eni_Loop:
(1)   38/    1078 : 7007                		moveq	#7,d0				; assume a format list entry is 7 bits
(1)   39/    107A : 3E06                		move.w	d6,d7
(1)   40/    107C : 9E40                		sub.w	d0,d7
(1)   41/    107E : 3205                		move.w	d5,d1
(1)   42/    1080 : EE69                		lsr.w	d7,d1
(1)   43/    1082 : 0241 007F           		andi.w	#$7F,d1				; get format list entry
(1)   44/    1086 : 3401                		move.w	d1,d2				; and copy it
(1)   45/    1088 : 0C41 0040           		cmpi.w	#$40,d1				; is the high bit of the entry set?
(1)   46/    108C : 6404                		bhs.s	.sevenbitentry
(1)   47/    108E : 7006                		moveq	#6,d0				; if it isn't, the entry is actually 6 bits
(1)   48/    1090 : E24A                		lsr.w	#1,d2
(1)   49/    1092 :                     ; loc_1758:
(1)   50/    1092 :                     .sevenbitentry:
(1)   51/    1092 : 6100 012E           		bsr.w	EniDec_FetchByte
(1)   52/    1096 : 0242 000F           		andi.w	#$F,d2				; get repeat count
(1)   53/    109A : E849                		lsr.w	#4,d1
(1)   54/    109C : D241                		add.w	d1,d1
(1)   55/    109E : 4EFB 104E           		jmp	EniDec_Index(pc,d1.w)
(1)   56/    10A2 :                     ; End of function EniDec
(1)   57/    10A2 :                     
(1)   58/    10A2 :                     ; ===========================================================================
(1)   59/    10A2 :                     ; loc_1768:
(1)   60/    10A2 :                     EniDec_00:
(1)   61/    10A2 : 32CA                .loop:		move.w	a2,(a1)+			; copy incremental copy word
(1)   62/    10A4 : 524A                		addq.w	#1,a2				; increment it
(1)   63/    10A6 : 51CA FFFA           		dbf	d2,.loop			; repeat
(1)   64/    10AA : 60CC                		bra.s	Eni_Loop
(1)   65/    10AC :                     ; ===========================================================================
(1)   66/    10AC :                     ; loc_1772:
(1)   67/    10AC :                     EniDec_01:
(1)   68/    10AC : 32CC                .loop:		move.w	a4,(a1)+			; copy literal copy word
(1)   69/    10AE : 51CA FFFC           		dbf	d2,.loop			; repeat
(1)   70/    10B2 : 60C4                		bra.s	Eni_Loop
(1)   71/    10B4 :                     ; ===========================================================================
(1)   72/    10B4 :                     ; loc_177A:
(1)   73/    10B4 :                     EniDec_100:
(1)   74/    10B4 : 6100 005C           		bsr.w	EniDec_FetchInlineValue
(1)   75/    10B8 :                     ; loc_177E:
(1)   76/    10B8 : 32C1                .loop:		move.w	d1,(a1)+			; copy inline value
(1)   77/    10BA : 51CA FFFC           		dbf	d2,.loop			; repeat
(1)   78/    10BE :                     
(1)   79/    10BE : 60B8                		bra.s	Eni_Loop
(1)   80/    10C0 :                     ; ===========================================================================
(1)   81/    10C0 :                     ; loc_1786:
(1)   82/    10C0 :                     EniDec_101:
(1)   83/    10C0 : 6100 0050           		bsr.w	EniDec_FetchInlineValue
(1)   84/    10C4 :                     ; loc_178A:
(1)   85/    10C4 : 32C1                .loop:		move.w	d1,(a1)+			; copy inline value
(1)   86/    10C6 : 5241                		addq.w	#1,d1				; increment
(1)   87/    10C8 : 51CA FFFA           		dbf	d2,.loop			; repeat
(1)   88/    10CC :                     
(1)   89/    10CC : 60AA                		bra.s	Eni_Loop
(1)   90/    10CE :                     ; ===========================================================================
(1)   91/    10CE :                     ; loc_1794:
(1)   92/    10CE :                     EniDec_110:
(1)   93/    10CE : 6100 0042           		bsr.w	EniDec_FetchInlineValue
(1)   94/    10D2 :                     ; loc_1798:
(1)   95/    10D2 : 32C1                .loop:		move.w	d1,(a1)+			; copy inline value
(1)   96/    10D4 : 5341                		subq.w	#1,d1				; decrement
(1)   97/    10D6 : 51CA FFFA           		dbf	d2,.loop			; repeat
(1)   98/    10DA :                     
(1)   99/    10DA : 609C                		bra.s	Eni_Loop
(1)  100/    10DC :                     ; ===========================================================================
(1)  101/    10DC :                     ; loc_17A2:
(1)  102/    10DC :                     EniDec_111:
(1)  103/    10DC : 0C42 000F           		cmpi.w	#$F,d2
(1)  104/    10E0 : 671C                		beq.s	EniDec_Done
(1)  105/    10E2 :                     ; loc_17A8:
(1)  106/    10E2 : 6100 002E           .loop:		bsr.w	EniDec_FetchInlineValue		; fetch new inline value
(1)  107/    10E6 : 32C1                		move.w	d1,(a1)+			; copy it
(1)  108/    10E8 : 51CA FFF8           		dbf	d2,.loop			; and repeat
(1)  109/    10EC :                     
(1)  110/    10EC : 608A                		bra.s	Eni_Loop
(1)  111/    10EE :                     ; ===========================================================================
(1)  112/    10EE :                     ; loc_17B4:
(1)  113/    10EE :                     EniDec_Index:
(1)  114/    10EE : 60B2                		bra.s	EniDec_00
(1)  115/    10F0 : 60B0                		bra.s	EniDec_00
(1)  116/    10F2 : 60B8                		bra.s	EniDec_01
(1)  117/    10F4 : 60B6                		bra.s	EniDec_01
(1)  118/    10F6 : 60BC                		bra.s	EniDec_100
(1)  119/    10F8 : 60C6                		bra.s	EniDec_101
(1)  120/    10FA : 60D2                		bra.s	EniDec_110
(1)  121/    10FC : 60DE                		bra.s	EniDec_111
(1)  122/    10FE :                     ; ===========================================================================
(1)  123/    10FE :                     ; loc_17C4:
(1)  124/    10FE :                     EniDec_Done:
(1)  125/    10FE : 5348                		subq.w	#1,a0				; go back by one byte
(1)  126/    1100 : 0C46 0010           		cmpi.w	#16,d6				; were we going to start on a completely new byte?
(1)  127/    1104 : 6602                		bne.s	.notnewbyte			; if not, branch
(1)  128/    1106 : 5348                		subq.w	#1,a0				; and another one if needed
(1)  129/    1108 :                     ; loc_17CE:
(1)  130/    1108 :                     .notnewbyte:
(1)  131/    1108 : 3008                		move.w	a0,d0
(1)  132/    110A : E248                		lsr.w	#1,d0				; are we on an odd byte?
(1)  133/    110C : 6402                		bcc.s	.evenbyte			; if not, branch
(1)  134/    110E : 5248                		addq.w	#1,a0				; ensure we're on an even byte
(1)  135/    1110 :                     ; loc_17D6:
(1)  136/    1110 :                     .evenbyte:
(1)  137/    1110 : 4E75                		rts
(1)  138/    1112 :                     
(1)  139/    1112 :                     ; ---------------------------------------------------------------------------
(1)  140/    1112 :                     ; Part of the Enigma decompressor
(1)  141/    1112 :                     ; Fetches an inline copy value and stores it in d1
(1)  142/    1112 :                     ; ---------------------------------------------------------------------------
(1)  143/    1112 :                     
(1)  144/    1112 :                     ; =============== S U B R O U T I N E =======================================
(1)  145/    1112 :                     
(1)  146/    1112 :                     ; loc_17DC:
(1)  147/    1112 :                     EniDec_FetchInlineValue:
(1)  148/    1112 : 360B                		move.w	a3,d3				; copy starting art tile
(1)  149/    1114 : 1204                		move.b	d4,d1				; copy PCCVH bitfield
(1)  150/    1116 : D201                		add.b	d1,d1				; is the priority bit set?
(1)  151/    1118 : 640A                		bcc.s	.skippriority			; if not, branch
(1)  152/    111A : 5346                		subq.w	#1,d6
(1)  153/    111C : 0D05                		btst	d6,d5				; is the priority bit set in the inline render flags?
(1)  154/    111E : 6704                		beq.s	.skippriority			; if not, branch
(1)  155/    1120 : 0043 8000           		ori.w	#$8000,d3			; otherwise set priority bit in art tile
(1)  156/    1124 :                     ; loc_17EE:
(1)  157/    1124 :                     .skippriority:
(1)  158/    1124 : D201                		add.b	d1,d1				; is the high palette line bit set?
(1)  159/    1126 : 640A                		bcc.s	.skiphighpal			; if not, branch
(1)  160/    1128 : 5346                		subq.w	#1,d6
(1)  161/    112A : 0D05                		btst	d6,d5
(1)  162/    112C : 6704                		beq.s	.skiphighpal
(1)  163/    112E : 0643 4000           		addi.w	#$4000,d3			; set second palette line bit
(1)  164/    1132 :                     ; loc_17FC:
(1)  165/    1132 :                     .skiphighpal:
(1)  166/    1132 : D201                		add.b	d1,d1				; is the low palette line bit set?
(1)  167/    1134 : 640A                		bcc.s	.skiplowpal			; if not, branch
(1)  168/    1136 : 5346                		subq.w	#1,d6
(1)  169/    1138 : 0D05                		btst	d6,d5
(1)  170/    113A : 6704                		beq.s	.skiplowpal
(1)  171/    113C : 0643 2000           		addi.w	#$2000,d3			; set first palette line bit
(1)  172/    1140 :                     ; loc_180A:
(1)  173/    1140 :                     .skiplowpal:
(1)  174/    1140 : D201                		add.b	d1,d1				; is the vertical flip flag set?
(1)  175/    1142 : 640A                		bcc.s	.skipyflip			; if not, branch
(1)  176/    1144 : 5346                		subq.w	#1,d6
(1)  177/    1146 : 0D05                		btst	d6,d5
(1)  178/    1148 : 6704                		beq.s	.skipyflip
(1)  179/    114A : 0043 1000           		ori.w	#$1000,d3			; set Y-flip bit
(1)  180/    114E :                     ; loc_1818:
(1)  181/    114E :                     .skipyflip:
(1)  182/    114E : D201                		add.b	d1,d1				; is the horizontal flip flag set?
(1)  183/    1150 : 640A                		bcc.s	.skipxflip			; if not, branch
(1)  184/    1152 : 5346                		subq.w	#1,d6
(1)  185/    1154 : 0D05                		btst	d6,d5
(1)  186/    1156 : 6704                		beq.s	.skipxflip
(1)  187/    1158 : 0043 0800           		ori.w	#$800,d3			; set X-flip bit
(1)  188/    115C :                     ; loc_1826:
(1)  189/    115C :                     .skipxflip:
(1)  190/    115C : 3205                		move.w	d5,d1
(1)  191/    115E : 3E06                		move.w	d6,d7
(1)  192/    1160 : 9E4D                		sub.w	a5,d7				; subtract length in bits of inline copy value
(1)  193/    1162 : 6428                		bcc.s	.enoughbits			; branch if a new word doesn't need to be read
(1)  194/    1164 : 3C07                		move.w	d7,d6
(1)  195/    1166 : 0646 0010           		addi.w	#16,d6
(1)  196/    116A : 4447                		neg.w	d7				; calculate bit deficit
(1)  197/    116C : EF69                		lsl.w	d7,d1				; and make space for that many bits
(1)  198/    116E : 1A10                		move.b	(a0),d5				; get next byte
(1)  199/    1170 : EF3D                		rol.b	d7,d5				; and rotate the required bits into the lowest positions
(1)  200/    1172 : DE47                		add.w	d7,d7
(1)  201/    1174 : CA7B 702A           		and.w	EniDec_Masks-2(pc,d7.w),d5
(1)  202/    1178 : D245                		add.w	d5,d1				; combine upper bits with lower bits
(1)  203/    117A :                     ; loc_1844:
(1)  204/    117A :                     .maskvalue:
(1)  205/    117A : 300D                		move.w	a5,d0				; get length in bits of inline copy value
(1)  206/    117C : D040                		add.w	d0,d0
(1)  207/    117E : C27B 0020           		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
(1)  208/    1182 : D243                		add.w	d3,d1				; add starting art tile
(1)  209/    1184 : 1A18                		move.b	(a0)+,d5
(1)  210/    1186 : E14D                		lsl.w	#8,d5
(1)  211/    1188 : 1A18                		move.b	(a0)+,d5			; get next word
(1)  212/    118A : 4E75                		rts
(1)  213/    118C :                     ; ===========================================================================
(1)  214/    118C :                     ; loc_1856:
(1)  215/    118C :                     .enoughbits:
(1)  216/    118C : 6710                		beq.s	.justenough			; if the word has been exactly exhausted, branch
(1)  217/    118E : EE69                		lsr.w	d7,d1				; get inline copy value
(1)  218/    1190 : 300D                		move.w	a5,d0
(1)  219/    1192 : D040                		add.w	d0,d0
(1)  220/    1194 : C27B 000A           		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
(1)  221/    1198 : D243                		add.w	d3,d1				; add starting art tile
(1)  222/    119A : 300D                		move.w	a5,d0
(1)  223/    119C : 6024                		bra.s	EniDec_FetchByte
(1)  224/    119E :                     ; ===========================================================================
(1)  225/    119E :                     ; loc_1868:
(1)  226/    119E :                     .justenough:
(1)  227/    119E : 7C10                		moveq	#16,d6				; reset shift value
(1)  228/    11A0 : 60D8                		bra.s	.maskvalue
(1)  229/    11A2 :                     ; ===========================================================================
(1)  230/    11A2 :                     ; word_186C:
(1)  231/    11A2 :                     EniDec_Masks:
(1)  232/    11A2 : 0001 0003 0007      		dc.w	 1,    3,    7,   $F
             11A8 : 000F             
(1)  233/    11AA : 001F 003F 007F      		dc.w   $1F,  $3F,  $7F,  $FF
             11B0 : 00FF             
(1)  234/    11B2 : 01FF 03FF 07FF      		dc.w  $1FF, $3FF, $7FF, $FFF
             11B8 : 0FFF             
(1)  235/    11BA : 1FFF 3FFF 7FFF      		dc.w $1FFF,$3FFF,$7FFF,$FFFF
             11C0 : FFFF             
(1)  236/    11C2 :                     
(1)  237/    11C2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  238/    11C2 :                     
(1)  239/    11C2 :                     ; sub_188C:
(1)  240/    11C2 :                     EniDec_FetchByte:
(1)  241/    11C2 : 9C40                		sub.w	d0,d6				; subtract length of current entry from shift value so that next entry is read next time around
(1)  242/    11C4 : 0C46 0009           		cmpi.w	#9,d6				; does a new byte need to be read?
(1)  243/    11C8 : 6406                		bhs.s	.locret				; if not, branch
(1)  244/    11CA : 5046                		addq.w	#8,d6
(1)  245/    11CC : E145                		asl.w	#8,d5
(1)  246/    11CE : 1A18                		move.b	(a0)+,d5
(1)  247/    11D0 :                     .locret:
(1)  248/    11D0 : 4E75                		rts
(1)  249/    11D2 :                     ; End of function EniDec_FetchByte
(1)  250/    11D2 :                     
    1585/    11D2 :                     		include "_inc/Kosinski Decompression.asm"
(1)    1/    11D2 :                     ; ---------------------------------------------------------------------------
(1)    2/    11D2 :                     ; Kosinski decompression algorithm
(1)    3/    11D2 :                     
(1)    4/    11D2 :                     ; input:
(1)    5/    11D2 :                     ;	a0 = source address
(1)    6/    11D2 :                     ;	a1 = destination address
(1)    7/    11D2 :                     
(1)    8/    11D2 :                     ; usage:
(1)    9/    11D2 :                     ;	lea	(source).l,a0
(1)   10/    11D2 :                     ;	lea	(destination).l,a1
(1)   11/    11D2 :                     ;	bsr.w	KosDec
(1)   12/    11D2 :                     ; ---------------------------------------------------------------------------
(1)   13/    11D2 :                     
(1)   14/    11D2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)   15/    11D2 :                     
(1)   16/    11D2 :                     
(1)   17/    11D2 :                     KosDec:
(1)   18/    11D2 :                     
(1)   19/    11D2 : 558F                		subq.l	#2,sp				; make space for 2 bytes on the stack
(1)   20/    11D4 : 1F58 0001           		move.b	(a0)+,1(sp)
(1)   21/    11D8 : 1E98                		move.b	(a0)+,(sp)
(1)   22/    11DA : 3A17                		move.w	(sp),d5				; get first description field
(1)   23/    11DC : 780F                		moveq	#$F,d4				; set to loop for 16 bits
(1)   24/    11DE :                     
(1)   25/    11DE :                     Kos_Loop:
(1)   26/    11DE : E24D                		lsr.w	#1,d5				; shift bit into the c flag
(1)   27/    11E0 : 40C6                		move	sr,d6
(1)   28/    11E2 : 51CC 000C           		dbf	d4,.chkbit
(1)   29/    11E6 : 1F58 0001           		move.b	(a0)+,1(sp)
(1)   30/    11EA : 1E98                		move.b	(a0)+,(sp)
(1)   31/    11EC : 3A17                		move.w	(sp),d5
(1)   32/    11EE : 780F                		moveq	#$F,d4
(1)   33/    11F0 :                     
(1)   34/    11F0 :                     	.chkbit:
(1)   35/    11F0 : 44C6                		move	d6,ccr				; was the bit set?
(1)   36/    11F2 : 6404                		bcc.s	Kos_RLE				; if not, branch
(1)   37/    11F4 :                     
(1)   38/    11F4 : 12D8                		move.b	(a0)+,(a1)+			; copy byte as-is
(1)   39/    11F6 : 60E6                		bra.s	Kos_Loop
(1)   40/    11F8 :                     ; ===========================================================================
(1)   41/    11F8 :                     
(1)   42/    11F8 :                     Kos_RLE:
(1)   43/    11F8 : 7600                		moveq	#0,d3
(1)   44/    11FA : E24D                		lsr.w	#1,d5				; get next bit
(1)   45/    11FC : 40C6                		move	sr,d6
(1)   46/    11FE : 51CC 000C           		dbf	d4,.chkbit
(1)   47/    1202 : 1F58 0001           		move.b	(a0)+,1(sp)
(1)   48/    1206 : 1E98                		move.b	(a0)+,(sp)
(1)   49/    1208 : 3A17                		move.w	(sp),d5
(1)   50/    120A : 780F                		moveq	#$F,d4
(1)   51/    120C :                     
(1)   52/    120C :                     	.chkbit:
(1)   53/    120C : 44C6                		move	d6,ccr				; was the bit set?
(1)   54/    120E : 652C                		bcs.s	Kos_SeparateRLE			; if yes, branch
(1)   55/    1210 :                     
(1)   56/    1210 : E24D                		lsr.w	#1,d5				; shift bit into the x flag
(1)   57/    1212 : 51CC 000C           		dbf	d4,.loop1
(1)   58/    1216 : 1F58 0001           		move.b	(a0)+,1(sp)
(1)   59/    121A : 1E98                		move.b	(a0)+,(sp)
(1)   60/    121C : 3A17                		move.w	(sp),d5
(1)   61/    121E : 780F                		moveq	#$F,d4
(1)   62/    1220 :                     
(1)   63/    1220 :                     	.loop1:
(1)   64/    1220 : E353                		roxl.w	#1,d3				; get high repeat count bit
(1)   65/    1222 : E24D                		lsr.w	#1,d5
(1)   66/    1224 : 51CC 000C           		dbf	d4,.loop2
(1)   67/    1228 : 1F58 0001           		move.b	(a0)+,1(sp)
(1)   68/    122C : 1E98                		move.b	(a0)+,(sp)
(1)   69/    122E : 3A17                		move.w	(sp),d5
(1)   70/    1230 : 780F                		moveq	#$F,d4
(1)   71/    1232 :                     
(1)   72/    1232 :                     	.loop2:
(1)   73/    1232 : E353                		roxl.w	#1,d3				; get low repeat count bit
(1)   74/    1234 : 5243                		addq.w	#1,d3				; increment repeat count
(1)   75/    1236 : 74FF                		moveq	#-1,d2
(1)   76/    1238 : 1418                		move.b	(a0)+,d2			; calculate offset
(1)   77/    123A : 6016                		bra.s	Kos_RLELoop
(1)   78/    123C :                     ; ===========================================================================
(1)   79/    123C :                     
(1)   80/    123C :                     Kos_SeparateRLE:
(1)   81/    123C : 1018                		move.b	(a0)+,d0			; get first byte
(1)   82/    123E : 1218                		move.b	(a0)+,d1			; get second byte
(1)   83/    1240 : 74FF                		moveq	#-1,d2
(1)   84/    1242 : 1401                		move.b	d1,d2
(1)   85/    1244 : EB4A                		lsl.w	#5,d2
(1)   86/    1246 : 1400                		move.b	d0,d2				; calculate offset
(1)   87/    1248 : 0241 0007           		andi.w	#7,d1				; does a third byte need to be read?
(1)   88/    124C : 6710                		beq.s	Kos_SeparateRLE2		; if yes, branch
(1)   89/    124E : 1601                		move.b	d1,d3				; copy repeat count
(1)   90/    1250 : 5243                		addq.w	#1,d3				; increment
(1)   91/    1252 :                     
(1)   92/    1252 :                     Kos_RLELoop:
(1)   93/    1252 : 1031 2000           		move.b	(a1,d2.w),d0			; copy appropriate byte
(1)   94/    1256 : 12C0                		move.b	d0,(a1)+			; repeat
(1)   95/    1258 : 51CB FFF8           		dbf	d3,Kos_RLELoop
(1)   96/    125C : 6080                		bra.s	Kos_Loop
(1)   97/    125E :                     ; ===========================================================================
(1)   98/    125E :                     
(1)   99/    125E :                     Kos_SeparateRLE2:
(1)  100/    125E : 1218                		move.b	(a0)+,d1
(1)  101/    1260 : 670C                		beq.s	Kos_Done			; 0 indicates end of compressed data
(1)  102/    1262 : 0C01 0001           		cmpi.b	#1,d1
(1)  103/    1266 : 6700 FF76           		beq.w	Kos_Loop			; 1 indicates new description to be read
(1)  104/    126A : 1601                		move.b	d1,d3				; otherwise, copy repeat count
(1)  105/    126C : 60E4                		bra.s	Kos_RLELoop
(1)  106/    126E :                     ; ===========================================================================
(1)  107/    126E :                     
(1)  108/    126E :                     Kos_Done:
(1)  109/    126E : 548F                		addq.l	#2,sp				; restore stack pointer
(1)  110/    1270 : 4E75                		rts
(1)  111/    1272 :                     ; End of function KosDec
(1)  112/    1272 :                     
    1586/    1272 :                     
    1587/    1272 :                     ; ===========================================================================
    1588/    1272 :                     ; ---------------------------------------------------------------------------
    1589/    1272 :                     ;
    1590/    1272 :                     ; ---------------------------------------------------------------------------
    1591/    1272 :                     
    1592/    1272 :                     sub_1272:
    1593/    1272 : 6100 0086           		bsr.w	sub_12FA
    1594/    1276 : 36C2                		move.w	d2,(a3)+
    1595/    1278 : 6100 0098           		bsr.w	sub_1312
    1596/    127C : E848                		lsr.w	#4,d0
    1597/    127E : E849                		lsr.w	#4,d1
    1598/    1280 : 7600                		moveq	#0,d3
    1599/    1282 : 1629 0006           		move.b	6(a1),d3
    1600/    1286 : 7E1F                		moveq	#$1F,d7
    1601/    1288 :                     
    1602/    1288 :                     loc_1288:
    1603/    1288 : 6138                		bsr.s	sub_12C2
    1604/    128A : 2C69 0028           		movea.l	$28(a1),a6
    1605/    128E : 6100 0186           		bsr.w	sub_1416
    1606/    1292 : 5240                		addq.w	#1,d0
    1607/    1294 : 51CF FFF2           		dbf	d7,loc_1288
    1608/    1298 : 4E75                		rts
    1609/    129A :                     
    1610/    129A :                     
    1611/    129A :                     sub_129A:
    1612/    129A : 6100 005E           		bsr.w	sub_12FA
    1613/    129E : 36C2                		move.w	d2,(a3)+
    1614/    12A0 : 6100 0070           		bsr.w	sub_1312
    1615/    12A4 : E848                		lsr.w	#4,d0
    1616/    12A6 : E849                		lsr.w	#4,d1
    1617/    12A8 : 7600                		moveq	#0,d3
    1618/    12AA : 1629 0006           		move.b	6(a1),d3
    1619/    12AE : 7E0F                		moveq	#$F,d7
    1620/    12B0 :                     
    1621/    12B0 :                     loc_12B0:
    1622/    12B0 : 6110                		bsr.s	sub_12C2
    1623/    12B2 : 2C69 0028           		movea.l	$28(a1),a6
    1624/    12B6 : 6100 0090           		bsr.w	sub_1348
    1625/    12BA : 5241                		addq.w	#1,d1
    1626/    12BC : 51CF FFF2           		dbf	d7,loc_12B0
    1627/    12C0 : 4E75                		rts
    1628/    12C2 :                     
    1629/    12C2 :                     sub_12C2:
    1630/    12C2 : 3800                		move.w	d0,d4
    1631/    12C4 : 3A01                		move.w	d1,d5
    1632/    12C6 : 2C69 0020           		movea.l	$20(a1),a6
    1633/    12CA : E64C                		lsr.w	#3,d4
    1634/    12CC : E64D                		lsr.w	#3,d5
    1635/    12CE : E76D                		lsl.w	d3,d5
    1636/    12D0 : D845                		add.w	d5,d4
    1637/    12D2 : 1836 4000           		move.b	(a6,d4.w),d4
    1638/    12D6 : 0244 00FF           		andi.w	#$FF,d4
    1639/    12DA : 2C69 0024           		movea.l	$24(a1),a6
    1640/    12DE : EF4C                		lsl.w	#7,d4
    1641/    12E0 : 3A00                		move.w	d0,d5
    1642/    12E2 : DA45                		add.w	d5,d5
    1643/    12E4 : 0245 000E           		andi.w	#$E,d5
    1644/    12E8 : D845                		add.w	d5,d4
    1645/    12EA : 3A01                		move.w	d1,d5
    1646/    12EC : E94D                		lsl.w	#4,d5
    1647/    12EE : 0245 0070           		andi.w	#$70,d5
    1648/    12F2 : D845                		add.w	d5,d4
    1649/    12F4 : 3836 4000           		move.w	(a6,d4.w),d4
    1650/    12F8 : 4E75                		rts
    1651/    12FA :                     
    1652/    12FA :                     
    1653/    12FA :                     sub_12FA:
    1654/    12FA : 3400                		move.w	d0,d2
    1655/    12FC : 3601                		move.w	d1,d3
    1656/    12FE : E94B                		lsl.w	#4,d3
    1657/    1300 : 0243 0F00           		andi.w	#$F00,d3
    1658/    1304 : E44A                		lsr.w	#2,d2
    1659/    1306 : 0242 007C           		andi.w	#$7C,d2
    1660/    130A : D443                		add.w	d3,d2
    1661/    130C : 8469 0018           		or.w	$18(a1),d2
    1662/    1310 : 4E75                		rts
    1663/    1312 :                     
    1664/    1312 :                     sub_1312:
    1665/    1312 : (MACRO)              		_move.w	0(a1),d2
    1665/    1312 :  (MACRO-2)                           insn2op move.w, 0(a1),d2
    1665/    1312 : =>FALSE                        if (chkop("0(a1)","0("))
    1665/    1312 :                                       if (chkop("d2","0("))
    1665/    1312 :                                             !move.w   0(a1),d2
    1665/    1312 :                                       else
    1665/    1312 :                                             !move.w   0(a1),1+d2
    1665/    1312 :                                             !org    *-1
    1665/    1312 :                                             !dc.b   0
    1665/    1312 : [1665]                                 endif
    1665/    1312 : =>TRUE                         else
    1665/    1312 : =>FALSE                              if chkop("d2","d")
    1665/    1312 :                                       if (chkop("d2","0("))
    1665/    1312 :                     start:
    1665/    1312 :                                             !move.w   1+0(a1),d2
    1665/    1312 :                     end:
    1665/    1312 :                                             !org    start+3
    1665/    1312 :                                             !dc.b   0
    1665/    1312 :                                             !org    end
    1665/    1312 :                                       else
    1665/    1312 :                                             !move.w   1+0(a1),1+d2
    1665/    1312 :                                             !org    *-3
    1665/    1312 :                                             !dc.b   0
    1665/    1312 :                                             !org    *+1
    1665/    1312 :                                             !dc.b   0
    1665/    1312 : [1665]                                 endif
    1665/    1312 : =>TRUE                               else
    1665/    1312 : 3429 0001                                   !move.w   1+0(a1),d2
    1665/    1315 :                                             !org    *-1
    1665/    1315 : 00                                          !dc.b   0
    1665/    1316 : [1665]                               endif
    1665/    1316 : [1665]                         endif
    1666/    1316 : 3629 0010           		move.w	$10(a1),d3
    1667/    131A : E94B                		lsl.w	#4,d3
    1668/    131C : 0243 0F00           		andi.w	#$F00,d3
    1669/    1320 : 383C 1000           		move.w	#$1000,d4
    1670/    1324 : 9843                		sub.w	d3,d4
    1671/    1326 : 0244 0F00           		andi.w	#$F00,d4
    1672/    132A : E04C                		lsr.w	#8,d4
    1673/    132C : 1344 0017           		move.b	d4,$17(a1)
    1674/    1330 : E44A                		lsr.w	#2,d2
    1675/    1332 : 0242 007C           		andi.w	#$7C,d2
    1676/    1336 : 383C 0080           		move.w	#$80,d4
    1677/    133A : 9842                		sub.w	d2,d4
    1678/    133C : 0244 007C           		andi.w	#$7C,d4
    1679/    1340 : E44C                		lsr.w	#2,d4
    1680/    1342 : 1344 0007           		move.b	d4,7(a1)
    1681/    1346 : 4E75                		rts
    1682/    1348 :                     
    1683/    1348 :                     sub_1348:
    1684/    1348 : 0804 000A           		btst	#$A,d4
    1685/    134C : 670A                		beq.s	loc_1358
    1686/    134E : 0804 000B           		btst	#$B,d4
    1687/    1352 : 6600 0090           		bne.w	loc_13E4
    1688/    1356 : 6028                		bra.s	loc_1380
    1689/    1358 :                     
    1690/    1358 :                     loc_1358:
    1691/    1358 : 0804 000B           		btst	#$B,d4
    1692/    135C : 6654                		bne.s	loc_13B2
    1693/    135E : 0244 03FF           		andi.w	#$3FF,d4
    1694/    1362 : E74C                		lsl.w	#3,d4
    1695/    1364 : 3A36 4000           		move.w	(a6,d4.w),d5
    1696/    1368 : 4845                		swap	d5
    1697/    136A : 3A36 4004           		move.w	4(a6,d4.w),d5
    1698/    136E : 26C5                		move.l	d5,(a3)+
    1699/    1370 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1700/    1374 : 4845                		swap	d5
    1701/    1376 : 3A36 4006           		move.w	6(a6,d4.w),d5
    1702/    137A : 2745 003C           		move.l	d5,$3C(a3)
    1703/    137E : 4E75                		rts
    1704/    1380 :                     
    1705/    1380 :                     loc_1380:
    1706/    1380 : 0244 03FF           		andi.w	#$3FF,d4
    1707/    1384 : E74C                		lsl.w	#3,d4
    1708/    1386 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1709/    138A : 0A45 0800           		eori.w	#$800,d5
    1710/    138E : 4845                		swap	d5
    1711/    1390 : 3A36 4006           		move.w	6(a6,d4.w),d5
    1712/    1394 : 0A45 0800           		eori.w	#$800,d5
    1713/    1398 : 26C5                		move.l	d5,(a3)+
    1714/    139A : 3A36 4000           		move.w	(a6,d4.w),d5
    1715/    139E : 0A45 0800           		eori.w	#$800,d5
    1716/    13A2 : 4845                		swap	d5
    1717/    13A4 : 3A36 4004           		move.w	4(a6,d4.w),d5
    1718/    13A8 : 0A45 0800           		eori.w	#$800,d5
    1719/    13AC : 2745 003C           		move.l	d5,$3C(a3)
    1720/    13B0 : 4E75                		rts
    1721/    13B2 :                     
    1722/    13B2 :                     loc_13B2:
    1723/    13B2 : 0244 03FF           		andi.w	#$3FF,d4
    1724/    13B6 : E74C                		lsl.w	#3,d4
    1725/    13B8 : 3A36 4004           		move.w	4(a6,d4.w),d5
    1726/    13BC : 0A45 1000           		eori.w	#$1000,d5
    1727/    13C0 : 4845                		swap	d5
    1728/    13C2 : 3A36 4000           		move.w	(a6,d4.w),d5
    1729/    13C6 : 0A45 1000           		eori.w	#$1000,d5
    1730/    13CA : 26C5                		move.l	d5,(a3)+
    1731/    13CC : 3A36 4006           		move.w	6(a6,d4.w),d5
    1732/    13D0 : 0A45 1000           		eori.w	#$1000,d5
    1733/    13D4 : 4845                		swap	d5
    1734/    13D6 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1735/    13DA : 0A45 1000           		eori.w	#$1000,d5
    1736/    13DE : 2745 003C           		move.l	d5,$3C(a3)
    1737/    13E2 : 4E75                		rts
    1738/    13E4 :                     
    1739/    13E4 :                     loc_13E4:
    1740/    13E4 : 0244 03FF           		andi.w	#$3FF,d4
    1741/    13E8 : E74C                		lsl.w	#3,d4
    1742/    13EA : 3A36 4006           		move.w	6(a6,d4.w),d5
    1743/    13EE : 0A45 1800           		eori.w	#$1800,d5
    1744/    13F2 : 4845                		swap	d5
    1745/    13F4 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1746/    13F8 : 0A45 1800           		eori.w	#$1800,d5
    1747/    13FC : 26C5                		move.l	d5,(a3)+
    1748/    13FE : 3A36 4004           		move.w	4(a6,d4.w),d5
    1749/    1402 : 0A45 1800           		eori.w	#$1800,d5
    1750/    1406 : 4845                		swap	d5
    1751/    1408 : 3A36 4000           		move.w	(a6,d4.w),d5
    1752/    140C : 0A45 1800           		eori.w	#$1800,d5
    1753/    1410 : 2745 003C           		move.l	d5,$3C(a3)
    1754/    1414 : 4E75                		rts
    1755/    1416 :                     
    1756/    1416 :                     sub_1416:
    1757/    1416 : 0804 000A           		btst	#$A,d4
    1758/    141A : 670A                		beq.s	loc_1426
    1759/    141C : 0804 000B           		btst	#$B,d4
    1760/    1420 : 6600 0090           		bne.w	loc_14B2
    1761/    1424 : 6028                		bra.s	loc_144E
    1762/    1426 :                     
    1763/    1426 :                     loc_1426:
    1764/    1426 : 0804 000B           		btst	#$B,d4
    1765/    142A : 6654                		bne.s	loc_1480
    1766/    142C : 0244 03FF           		andi.w	#$3FF,d4
    1767/    1430 :                     
    1768/    1430 :                     loc_1430:
    1769/    1430 : E74C                		lsl.w	#3,d4
    1770/    1432 : 3A36 4000           		move.w	(a6,d4.w),d5
    1771/    1436 : 4845                		swap	d5
    1772/    1438 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1773/    143C : 26C5                		move.l	d5,(a3)+
    1774/    143E : 3A36 4004           		move.w	4(a6,d4.w),d5
    1775/    1442 : 4845                		swap	d5
    1776/    1444 : 3A36 4006           		move.w	6(a6,d4.w),d5
    1777/    1448 : 2745 007C           		move.l	d5,$7C(a3)
    1778/    144C : 4E75                		rts
    1779/    144E :                     
    1780/    144E :                     loc_144E:
    1781/    144E : 0244 03FF           		andi.w	#$3FF,d4
    1782/    1452 : E74C                		lsl.w	#3,d4
    1783/    1454 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1784/    1458 : 0A45 0800           		eori.w	#$800,d5
    1785/    145C : 4845                		swap	d5
    1786/    145E : 3A36 4000           		move.w	(a6,d4.w),d5
    1787/    1462 : 0A45 0800           		eori.w	#$800,d5
    1788/    1466 : 26C5                		move.l	d5,(a3)+
    1789/    1468 : 3A36 4006           		move.w	6(a6,d4.w),d5
    1790/    146C : 0A45 0800           		eori.w	#$800,d5
    1791/    1470 : 4845                		swap	d5
    1792/    1472 : 3A36 4004           		move.w	4(a6,d4.w),d5
    1793/    1476 : 0A45 0800           		eori.w	#$800,d5
    1794/    147A : 2745 007C           		move.l	d5,$7C(a3)
    1795/    147E : 4E75                		rts
    1796/    1480 :                     
    1797/    1480 :                     loc_1480:
    1798/    1480 : 0244 03FF           		andi.w	#$3FF,d4
    1799/    1484 : E74C                		lsl.w	#3,d4
    1800/    1486 : 3A36 4004           		move.w	4(a6,d4.w),d5
    1801/    148A : 0A45 1000           		eori.w	#$1000,d5
    1802/    148E : 4845                		swap	d5
    1803/    1490 : 3A36 4006           		move.w	6(a6,d4.w),d5
    1804/    1494 : 0A45 1000           		eori.w	#$1000,d5
    1805/    1498 : 26C5                		move.l	d5,(a3)+
    1806/    149A : 3A36 4000           		move.w	(a6,d4.w),d5
    1807/    149E : 0A45 1000           		eori.w	#$1000,d5
    1808/    14A2 : 4845                		swap	d5
    1809/    14A4 : 3A36 4002           		move.w	2(a6,d4.w),d5
    1810/    14A8 : 0A45 1000           		eori.w	#$1000,d5
    1811/    14AC : 2745 007C           		move.l	d5,$7C(a3)
    1812/    14B0 : 4E75                		rts
    1813/    14B2 :                     
    1814/    14B2 :                     loc_14B2:
    1815/    14B2 : 0244 03FF           		andi.w	#$3FF,d4
    1816/    14B6 : E74C                		lsl.w	#3,d4
    1817/    14B8 : 3A36 4006           		move.w	6(a6,d4.w),d5
    1818/    14BC : 0A45 1800           		eori.w	#$1800,d5
    1819/    14C0 : 4845                		swap	d5
    1820/    14C2 : 3A36 4004           		move.w	4(a6,d4.w),d5
    1821/    14C6 : 0A45 1800           		eori.w	#$1800,d5
    1822/    14CA : 26C5                		move.l	d5,(a3)+
    1823/    14CC : 3A36 4002           		move.w	2(a6,d4.w),d5
    1824/    14D0 : 0A45 1800           		eori.w	#$1800,d5
    1825/    14D4 : 4845                		swap	d5
    1826/    14D6 : 3A36 4000           		move.w	(a6,d4.w),d5
    1827/    14DA : 0A45 1800           		eori.w	#$1800,d5
    1828/    14DE : 2745 007C           		move.l	d5,$7C(a3)
    1829/    14E2 : 4E75                		rts
    1830/    14E4 :                     
    1831/    14E4 :                     ; ===========================================================================
    1832/    14E4 :                     ; ---------------------------------------------------------------------------
    1833/    14E4 :                     ;
    1834/    14E4 :                     ; ---------------------------------------------------------------------------
    1835/    14E4 :                     
    1836/    14E4 :                     sub_14E4:
    1837/    14E4 : 43F9 00C0 0004      		lea	(vdp_control_port).l,a1
    1838/    14EA : 45E9 FFFC           		lea	-4(a1),a2
    1839/    14EE : 362D 0018           		move.w	$18(a5),d3
    1840/    14F2 : 382D 001A           		move.w	$1A(a5),d4
    1841/    14F6 : 3014                		move.w	(a4),d0
    1842/    14F8 : 6700 0076           		beq.w	loc_1570
    1843/    14FC : 38FC 0000           		move.w	#0,(a4)+
    1844/    1500 : 33FC 8F80 00C0      		move.w	#$8F80,(vdp_control_port).l
             1506 : 0004             
    1845/    1508 : 31FC 8F80 C9D6      		move.w	#$8F80,($FFFFC9D6).w
    1846/    150E : 3200                		move.w	d0,d1
    1847/    1510 : 7E0F                		moveq	#$F,d7
    1848/    1512 : 7C00                		moveq	#0,d6
    1849/    1514 : 1C2D 0017           		move.b	$17(a5),d6
    1850/    1518 : 9E46                		sub.w	d6,d7
    1851/    151A : 3280                		move.w	d0,(a1)
    1852/    151C : 3284                		move.w	d4,(a1)
    1853/    151E : 6002                		bra.s	loc_1522
    1854/    1520 :                     
    1855/    1520 :                     loc_1520:
    1856/    1520 : 249C                		move.l	(a4)+,(a2)
    1857/    1522 :                     
    1858/    1522 :                     loc_1522:
    1859/    1522 : 51CE FFFC           		dbf	d6,loc_1520
    1860/    1526 : 3403                		move.w	d3,d2
    1861/    1528 : 0642 007C           		addi.w	#$7C,d2
    1862/    152C : C042                		and.w	d2,d0
    1863/    152E : 3280                		move.w	d0,(a1)
    1864/    1530 : 3284                		move.w	d4,(a1)
    1865/    1532 :                     
    1866/    1532 :                     loc_1532:
    1867/    1532 : 249C                		move.l	(a4)+,(a2)
    1868/    1534 : 51CF FFFC           		dbf	d7,loc_1532
    1869/    1538 : 5441                		addq.w	#2,d1
    1870/    153A : 7E0F                		moveq	#$F,d7
    1871/    153C : 7C00                		moveq	#0,d6
    1872/    153E : 1C2D 0017           		move.b	$17(a5),d6
    1873/    1542 : 9E46                		sub.w	d6,d7
    1874/    1544 : 3281                		move.w	d1,(a1)
    1875/    1546 : 3284                		move.w	d4,(a1)
    1876/    1548 : 6002                		bra.s	loc_154C
    1877/    154A :                     
    1878/    154A :                     loc_154A:
    1879/    154A : 249C                		move.l	(a4)+,(a2)
    1880/    154C :                     
    1881/    154C :                     loc_154C:
    1882/    154C : 51CE FFFC           		dbf	d6,loc_154A
    1883/    1550 : 3403                		move.w	d3,d2
    1884/    1552 : 0642 007E           		addi.w	#$7E,d2
    1885/    1556 : C242                		and.w	d2,d1
    1886/    1558 : 3281                		move.w	d1,(a1)
    1887/    155A : 3284                		move.w	d4,(a1)
    1888/    155C :                     
    1889/    155C :                     loc_155C:
    1890/    155C : 249C                		move.l	(a4)+,(a2)
    1891/    155E : 51CF FFFC           		dbf	d7,loc_155C
    1892/    1562 : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l
             1568 : 0004             
    1893/    156A : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
    1894/    1570 :                     
    1895/    1570 :                     loc_1570:
    1896/    1570 : 3013                		move.w	(a3),d0
    1897/    1572 : 675A                		beq.s	locret_15CE
    1898/    1574 : 36FC 0000           		move.w	#0,(a3)+
    1899/    1578 : 3200                		move.w	d0,d1
    1900/    157A : 7E1F                		moveq	#$1F,d7
    1901/    157C : 7C00                		moveq	#0,d6
    1902/    157E : 1C2D 0007           		move.b	7(a5),d6
    1903/    1582 : 9E46                		sub.w	d6,d7
    1904/    1584 : 3280                		move.w	d0,(a1)
    1905/    1586 : 3284                		move.w	d4,(a1)
    1906/    1588 : 6002                		bra.s	loc_158C
    1907/    158A :                     
    1908/    158A :                     loc_158A:
    1909/    158A : 249B                		move.l	(a3)+,(a2)
    1910/    158C :                     
    1911/    158C :                     loc_158C:
    1912/    158C : 51CE FFFC           		dbf	d6,loc_158A
    1913/    1590 : 3403                		move.w	d3,d2
    1914/    1592 : 0642 0F00           		addi.w	#$F00,d2
    1915/    1596 : C042                		and.w	d2,d0
    1916/    1598 : 3280                		move.w	d0,(a1)
    1917/    159A : 3284                		move.w	d4,(a1)
    1918/    159C :                     
    1919/    159C :                     loc_159C:
    1920/    159C : 249B                		move.l	(a3)+,(a2)
    1921/    159E : 51CF FFFC           		dbf	d7,loc_159C
    1922/    15A2 : 0641 0080           		addi.w	#$80,d1
    1923/    15A6 : 7E1F                		moveq	#$1F,d7
    1924/    15A8 : 7C00                		moveq	#0,d6
    1925/    15AA : 1C2D 0007           		move.b	7(a5),d6
    1926/    15AE : 9E46                		sub.w	d6,d7
    1927/    15B0 : 3281                		move.w	d1,(a1)
    1928/    15B2 : 3284                		move.w	d4,(a1)
    1929/    15B4 : 6002                		bra.s	loc_15B8
    1930/    15B6 :                     
    1931/    15B6 :                     loc_15B6:
    1932/    15B6 : 249B                		move.l	(a3)+,(a2)
    1933/    15B8 :                     
    1934/    15B8 :                     loc_15B8:
    1935/    15B8 : 51CE FFFC           		dbf	d6,loc_15B6
    1936/    15BC : 3403                		move.w	d3,d2
    1937/    15BE : 0642 0F80           		addi.w	#$F80,d2
    1938/    15C2 : C242                		and.w	d2,d1
    1939/    15C4 : 3281                		move.w	d1,(a1)
    1940/    15C6 : 3284                		move.w	d4,(a1)
    1941/    15C8 :                     
    1942/    15C8 :                     loc_15C8:
    1943/    15C8 : 249B                		move.l	(a3)+,(a2)
    1944/    15CA : 51CF FFFC           		dbf	d7,loc_15C8
    1945/    15CE :                     
    1946/    15CE :                     locret_15CE:
    1947/    15CE : 4E75                		rts
    1948/    15D0 :                     
    1949/    15D0 :                     ; ===========================================================================
    1950/    15D0 :                     ; ---------------------------------------------------------------------------
    1951/    15D0 :                     ;
    1952/    15D0 :                     ; ---------------------------------------------------------------------------
    1953/    15D0 :                     
    1954/    15D0 :                     sub_15D0:
    1955/    15D0 : 7000                		moveq	#0,d0
    1956/    15D2 : 41F8 D84C           		lea	($FFFFD84C).w,a0
    1957/    15D6 : 20C0                		move.l	d0,(a0)+
    1958/    15D8 : 20C0                		move.l	d0,(a0)+
    1959/    15DA : 20C0                		move.l	d0,(a0)+
    1960/    15DC : 20C0                		move.l	d0,(a0)+
    1961/    15DE : 20C0                		move.l	d0,(a0)+
    1962/    15E0 : 30FC 7FFF           		move.w	#$7FFF,(a0)+
    1963/    15E4 : 41F9 00FF AD08      		lea	($FFAD08).l,a0
    1964/    15EA : 323C 0400           		move.w	#$400,d1
    1965/    15EE :                     
    1966/    15EE :                     loc_15EE:
    1967/    15EE : 20C0                		move.l	d0,(a0)+
    1968/    15F0 : 51C9 FFFC           		dbf	d1,loc_15EE
    1969/    15F4 : 41F9 00FF AD08      		lea	($FFAD08).l,a0
    1970/    15FA : 7E3F                		moveq	#$3F,d7
    1971/    15FC : 31C8 D84C           		move.w	a0,($FFFFD84C).w
    1972/    1600 :                     
    1973/    1600 :                     loc_1600:
    1974/    1600 : 43E8 0040           		lea	$40(a0),a1
    1975/    1604 : 3089                		move.w	a1,(a0)
    1976/    1606 : 2049                		movea.l	a1,a0
    1977/    1608 : 51CF FFF6           		dbf	d7,loc_1600
    1978/    160C : 4268 FFC0           		clr.w	-$40(a0)
    1979/    1610 : 41F8 D164           		lea	($FFFFD164).w,a0
    1980/    1614 : 724F                		moveq	#$4F,d1
    1981/    1616 :                     
    1982/    1616 :                     loc_1616:
    1983/    1616 : 20C0                		move.l	d0,(a0)+
    1984/    1618 : 20C0                		move.l	d0,(a0)+
    1985/    161A : 51C9 FFFA           		dbf	d1,loc_1616
    1986/    161E : 21C0 D9F2           		move.l	d0,($FFFFD9F2).w
    1987/    1622 : 21C0 D9F6           		move.l	d0,($FFFFD9F6).w
    1988/    1626 : 31FC 0003 D83C      		move.w	#3,($FFFFD83C).w
    1989/    162C : 31FC 000F D840      		move.w	#$F,($FFFFD840).w
    1990/    1632 : 31FC 001F D844      		move.w	#$1F,($FFFFD844).w
    1991/    1638 : 31FC 003F D848      		move.w	#$3F,($FFFFD848).w
    1992/    163E : 4E75                		rts
    1993/    1640 :                     
    1994/    1640 :                     ; ===========================================================================
    1995/    1640 :                     ; ---------------------------------------------------------------------------
    1996/    1640 :                     ;
    1997/    1640 :                     ; ---------------------------------------------------------------------------
    1998/    1640 :                     
    1999/    1640 :                     ; We think this subroutine is responsible for building object sprites
    2000/    1640 :                     
    2001/    1640 :                     BuildSprites:
    2002/    1640 : 4DF8 D164           		lea	($FFFFD164).w,a6
    2003/    1644 : 7C00                		moveq	#0,d6
    2004/    1646 : 4BF8 D3E4           		lea	($FFFFD3E4).w,a5
    2005/    164A : 7A4F                		moveq	#$4F,d5
    2006/    164C : 49F8 D9F2           		lea	($FFFFD9F2).w,a4
    2007/    1650 :                     
    2008/    1650 :                     loc_1650:
    2009/    1650 : 201C                		move.l	(a4)+,d0
    2010/    1652 : 2CC0                		move.l	d0,(a6)+
    2011/    1654 : 2CDC                		move.l	(a4)+,(a6)+
    2012/    1656 : 5246                		addq.w	#1,d6
    2013/    1658 : 4A00                		tst.b	d0
    2014/    165A : 66F4                		bne.s	loc_1650
    2015/    165C : 1D46 FFFB           		move.b	d6,-5(a6)
    2016/    1660 : 49F8 D850           		lea	($FFFFD850).w,a4
    2017/    1664 :                     
    2018/    1664 :                     loc_1664:
    2019/    1664 : 301C                		move.w	(a4)+,d0
    2020/    1666 : 6B1C                		bmi.s	loc_1684
    2021/    1668 : 67FA                		beq.s	loc_1664
    2022/    166A : 1D7C 004F FFFB      		move.b	#$4F,-5(a6)
    2023/    1670 : 0C45 004F           		cmpi.w	#$4F,d5
    2024/    1674 : 6608                		bne.s	loc_167E
    2025/    1676 : 7000                		moveq	#0,d0
    2026/    1678 : 2B00                		move.l	d0,-(a5)
    2027/    167A : 2B00                		move.l	d0,-(a5)
    2028/    167C : 4E75                		rts
    2029/    167E :                     loc_167E:
    2030/    167E : 422D 0003           		clr.b	3(a5)
    2031/    1682 : 4E75                		rts
    2032/    1684 :                     
    2033/    1684 :                     loc_1684:
    2034/    1684 : 3040                		movea.w	d0,a0
    2035/    1686 : 4EB9 0000 19DA      		jsr	(sub_19DA).l
    2036/    168C : 4A28 0005           		tst.b	5(a0)
    2037/    1690 : 6A28                		bpl.s	loc_16BA
    2038/    1692 : 3142 0014           		move.w	d2,$14(a0)
    2039/    1696 : 3143 0016           		move.w	d3,$16(a0)
    2040/    169A : 2668 0010           		movea.l	$10(a0),a3
    2041/    169E : 1028 0020           		move.b	$20(a0),d0
    2042/    16A2 : 0240 0018           		andi.w	#$18,d0
    2043/    16A6 : 3828 0020           		move.w	$20(a0),d4
    2044/    16AA : 3E04                		move.w	d4,d7
    2045/    16AC : 0244 07FF           		andi.w	#$7FF,d4
    2046/    16B0 : 9E44                		sub.w	d4,d7
    2047/    16B2 : 4A68 0004           		tst.w	4(a0)
    2048/    16B6 : 4EBB 0008           		jsr	loc_16C0(pc,d0.w)
    2049/    16BA :                     
    2050/    16BA :                     loc_16BA:
    2051/    16BA : 3010                		move.w	(a0),d0
    2052/    16BC : 6BC6                		bmi.s	loc_1684
    2053/    16BE : 60A4                		bra.s	loc_1664
    2054/    16C0 :                     
    2055/    16C0 :                     ; ===========================================================================
    2056/    16C0 :                     ; ---------------------------------------------------------------------------
    2057/    16C0 : 6B00 001E           loc_16C0:	bmi.w	loc_16E0
    2058/    16C4 : 6000 0136           		bra.w	loc_17FC
    2059/    16C8 :                     ; ---------------------------------------------------------------------------
    2060/    16C8 : 6B00 004C           		bmi.w	loc_1716
    2061/    16CC : 6000 0164           		bra.w	loc_1832
    2062/    16D0 :                     ; ---------------------------------------------------------------------------
    2063/    16D0 : 6B00 0084           		bmi.w	loc_1756
    2064/    16D4 : 6000 019C           		bra.w	loc_1872
    2065/    16D8 :                     ; ---------------------------------------------------------------------------
    2066/    16D8 : 6B00 00DA           		bmi.w	loc_17B4
    2067/    16DC : 6000 01F2           		bra.w	loc_18D0
    2068/    16E0 :                     ; ---------------------------------------------------------------------------
    2069/    16E0 :                     ; ===========================================================================
    2070/    16E0 :                     
    2071/    16E0 :                     loc_16E0:
    2072/    16E0 : BC45                		cmp.w	d5,d6
    2073/    16E2 : 6430                		bcc.s	locret_1714
    2074/    16E4 : 5246                		addq.w	#1,d6
    2075/    16E6 : 301B                		move.w	(a3)+,d0
    2076/    16E8 : 3200                		move.w	d0,d1
    2077/    16EA : 4880                		ext.w	d0
    2078/    16EC : D043                		add.w	d3,d0
    2079/    16EE : 4840                		swap	d0
    2080/    16F0 : 3001                		move.w	d1,d0
    2081/    16F2 : 1006                		move.b	d6,d0
    2082/    16F4 : 2CC0                		move.l	d0,(a6)+
    2083/    16F6 : 301B                		move.w	(a3)+,d0
    2084/    16F8 : D044                		add.w	d4,d0
    2085/    16FA : BF40                		eor.w	d7,d0
    2086/    16FC : 4840                		swap	d0
    2087/    16FE : 101B                		move.b	(a3)+,d0
    2088/    1700 : 4880                		ext.w	d0
    2089/    1702 : D042                		add.w	d2,d0
    2090/    1704 : 0240 01FF           		andi.w	#$1FF,d0
    2091/    1708 : 6604                		bne.s	loc_170E
    2092/    170A : 303C 0001           		move.w	#1,d0
    2093/    170E :                     
    2094/    170E :                     loc_170E:
    2095/    170E : 2CC0                		move.l	d0,(a6)+
    2096/    1710 : 4A1B                		tst.b	(a3)+
    2097/    1712 : 67CC                		beq.s	loc_16E0
    2098/    1714 :                     
    2099/    1714 :                     locret_1714:
    2100/    1714 : 4E75                		rts
    2101/    1716 :                     ; ===========================================================================
    2102/    1716 :                     
    2103/    1716 :                     loc_1716:
    2104/    1716 : BC45                		cmp.w	d5,d6
    2105/    1718 : 643A                		bcc.s	locret_1754
    2106/    171A : 5246                		addq.w	#1,d6
    2107/    171C : 301B                		move.w	(a3)+,d0
    2108/    171E : 3200                		move.w	d0,d1
    2109/    1720 : 4880                		ext.w	d0
    2110/    1722 : D043                		add.w	d3,d0
    2111/    1724 : 4840                		swap	d0
    2112/    1726 : 3001                		move.w	d1,d0
    2113/    1728 : 1006                		move.b	d6,d0
    2114/    172A : 2CC0                		move.l	d0,(a6)+
    2115/    172C : 301B                		move.w	(a3)+,d0
    2116/    172E : D044                		add.w	d4,d0
    2117/    1730 : BF40                		eor.w	d7,d0
    2118/    1732 : 4840                		swap	d0
    2119/    1734 : 9040                		sub.w	d0,d0
    2120/    1736 : 102B FFFC           		move.b	-4(a3),d0
    2121/    173A : 103B 0058           		move.b	byte_1794(pc,d0.w),d0
    2122/    173E : 901B                		sub.b	(a3)+,d0
    2123/    1740 : 4880                		ext.w	d0
    2124/    1742 : D042                		add.w	d2,d0
    2125/    1744 : 0240 01FF           		andi.w	#$1FF,d0
    2126/    1748 : 6604                		bne.s	loc_174E
    2127/    174A : 303C 0001           		move.w	#1,d0
    2128/    174E :                     
    2129/    174E :                     loc_174E:
    2130/    174E : 2CC0                		move.l	d0,(a6)+
    2131/    1750 : 4A1B                		tst.b	(a3)+
    2132/    1752 : 67C2                		beq.s	loc_1716
    2133/    1754 :                     
    2134/    1754 :                     locret_1754:
    2135/    1754 : 4E75                		rts
    2136/    1756 :                     ; ===========================================================================
    2137/    1756 :                     
    2138/    1756 :                     loc_1756:
    2139/    1756 : BC45                		cmp.w	d5,d6
    2140/    1758 : 6438                		bcc.s	locret_1792
    2141/    175A : 5246                		addq.w	#1,d6
    2142/    175C : 7000                		moveq	#0,d0
    2143/    175E : 1013                		move.b	(a3),d0
    2144/    1760 : 321B                		move.w	(a3)+,d1
    2145/    1762 : 103B 0040           		move.b	byte_17A4(pc,d0.w),d0
    2146/    1766 : 9001                		sub.b	d1,d0
    2147/    1768 : 4880                		ext.w	d0
    2148/    176A : D043                		add.w	d3,d0
    2149/    176C : 4840                		swap	d0
    2150/    176E : 3001                		move.w	d1,d0
    2151/    1770 : 1006                		move.b	d6,d0
    2152/    1772 : 2CC0                		move.l	d0,(a6)+
    2153/    1774 : 301B                		move.w	(a3)+,d0
    2154/    1776 : D044                		add.w	d4,d0
    2155/    1778 : BF40                		eor.w	d7,d0
    2156/    177A : 4840                		swap	d0
    2157/    177C : 101B                		move.b	(a3)+,d0
    2158/    177E : 4880                		ext.w	d0
    2159/    1780 : D042                		add.w	d2,d0
    2160/    1782 : 0240 01FF           		andi.w	#$1FF,d0
    2161/    1786 : 6604                		bne.s	loc_178C
    2162/    1788 : 303C 0001           		move.w	#1,d0
    2163/    178C :                     
    2164/    178C :                     loc_178C:
    2165/    178C : 2CC0                		move.l	d0,(a6)+
    2166/    178E : 4A1B                		tst.b	(a3)+
    2167/    1790 : 67C4                		beq.s	loc_1756
    2168/    1792 :                     
    2169/    1792 :                     locret_1792:
    2170/    1792 : 4E75                		rts
    2171/    1794 :                     ; ===========================================================================
    2172/    1794 :                     ; ---------------------------------------------------------------------------
    2173/    1794 : F8F8 F8F8           byte_1794:	dc.b $F8,$F8,$F8,$F8
    2174/    1798 : F0F0 F0F0           		dc.b $F0,$F0,$F0,$F0
    2175/    179C : E8E8 E8E8           		dc.b $E8,$E8,$E8,$E8
    2176/    17A0 : E0E0 E0E0           		dc.b $E0,$E0,$E0,$E0
    2177/    17A4 : F8F0 E8E0           byte_17A4:	dc.b $F8,$F0,$E8,$E0
    2178/    17A8 : F8F0 E8E0           		dc.b $F8,$F0,$E8,$E0
    2179/    17AC : F8F0 E8E0           		dc.b $F8,$F0,$E8,$E0
    2180/    17B0 : F8F0 E8E0           		dc.b $F8,$F0,$E8,$E0
    2181/    17B4 : (MACRO)              		even
    2181/    17B4 : =>TRUE                       if notZ80(MOMCPU)
    2181/    17B4 : =>FALSE                              if (*)&1
    2181/    17B4 :                                             dc.b 0                          ;ds.b 1
    2181/    17B4 : [2181]                               endif
    2181/    17B4 : =>FALSE                      else
    2181/    17B4 :                                     if ($)&1
    2181/    17B4 :                                             db 0
    2181/    17B4 : [2181]                               endif
    2181/    17B4 : [2181]                       endif
    2182/    17B4 :                     ; ---------------------------------------------------------------------------
    2183/    17B4 :                     ; ===========================================================================
    2184/    17B4 :                     
    2185/    17B4 :                     loc_17B4:
    2186/    17B4 : BC45                		cmp.w	d5,d6
    2187/    17B6 : 6442                		bcc.s	locret_17FA
    2188/    17B8 : 5246                		addq.w	#1,d6
    2189/    17BA : 7000                		moveq	#0,d0
    2190/    17BC : 1013                		move.b	(a3),d0
    2191/    17BE : 321B                		move.w	(a3)+,d1
    2192/    17C0 : 103B 00E2           		move.b	byte_17A4(pc,d0.w),d0
    2193/    17C4 : 9001                		sub.b	d1,d0
    2194/    17C6 : 4880                		ext.w	d0
    2195/    17C8 : D043                		add.w	d3,d0
    2196/    17CA : 4840                		swap	d0
    2197/    17CC : 3001                		move.w	d1,d0
    2198/    17CE : 1006                		move.b	d6,d0
    2199/    17D0 : 2CC0                		move.l	d0,(a6)+
    2200/    17D2 : 301B                		move.w	(a3)+,d0
    2201/    17D4 : D044                		add.w	d4,d0
    2202/    17D6 : BF40                		eor.w	d7,d0
    2203/    17D8 : 4840                		swap	d0
    2204/    17DA : 9040                		sub.w	d0,d0
    2205/    17DC : 102B FFFC           		move.b	-4(a3),d0
    2206/    17E0 : 103B 00B2           		move.b	byte_1794(pc,d0.w),d0
    2207/    17E4 : 901B                		sub.b	(a3)+,d0
    2208/    17E6 : 4880                		ext.w	d0
    2209/    17E8 : D042                		add.w	d2,d0
    2210/    17EA : 0240 01FF           		andi.w	#$1FF,d0
    2211/    17EE : 6604                		bne.s	loc_17F4
    2212/    17F0 : 303C 0001           		move.w	#1,d0
    2213/    17F4 :                     
    2214/    17F4 :                     loc_17F4:
    2215/    17F4 : 2CC0                		move.l	d0,(a6)+
    2216/    17F6 : 4A1B                		tst.b	(a3)+
    2217/    17F8 : 67BA                		beq.s	loc_17B4
    2218/    17FA :                     
    2219/    17FA :                     locret_17FA:
    2220/    17FA : 4E75                		rts
    2221/    17FC :                     
    2222/    17FC :                     ; ===========================================================================
    2223/    17FC :                     
    2224/    17FC :                     loc_17FC:
    2225/    17FC : BA46                		cmp.w	d6,d5
    2226/    17FE : 6330                		bls.s	locret_1830
    2227/    1800 : 5345                		subq.w	#1,d5
    2228/    1802 : 301B                		move.w	(a3)+,d0
    2229/    1804 : 3200                		move.w	d0,d1
    2230/    1806 : 4881                		ext.w	d1
    2231/    1808 : D243                		add.w	d3,d1
    2232/    180A : 4841                		swap	d1
    2233/    180C : 3200                		move.w	d0,d1
    2234/    180E : 1205                		move.b	d5,d1
    2235/    1810 : 301B                		move.w	(a3)+,d0
    2236/    1812 : D044                		add.w	d4,d0
    2237/    1814 : BF40                		eor.w	d7,d0
    2238/    1816 : 4840                		swap	d0
    2239/    1818 : 101B                		move.b	(a3)+,d0
    2240/    181A : 4880                		ext.w	d0
    2241/    181C : D042                		add.w	d2,d0
    2242/    181E : 0240 01FF           		andi.w	#$1FF,d0
    2243/    1822 : 6604                		bne.s	loc_1828
    2244/    1824 : 303C 0001           		move.w	#1,d0
    2245/    1828 :                     
    2246/    1828 :                     loc_1828:
    2247/    1828 : 2B00                		move.l	d0,-(a5)
    2248/    182A : 2B01                		move.l	d1,-(a5)
    2249/    182C : 4A1B                		tst.b	(a3)+
    2250/    182E : 67CC                		beq.s	loc_17FC
    2251/    1830 :                     
    2252/    1830 :                     locret_1830:
    2253/    1830 : 4E75                		rts
    2254/    1832 :                     
    2255/    1832 :                     ; ===========================================================================
    2256/    1832 :                     
    2257/    1832 :                     loc_1832:
    2258/    1832 : BA46                		cmp.w	d6,d5
    2259/    1834 : 633A                		bls.s	locret_1870
    2260/    1836 : 5345                		subq.w	#1,d5
    2261/    1838 : 301B                		move.w	(a3)+,d0
    2262/    183A : 3200                		move.w	d0,d1
    2263/    183C : 4881                		ext.w	d1
    2264/    183E : D243                		add.w	d3,d1
    2265/    1840 : 4841                		swap	d1
    2266/    1842 : 3200                		move.w	d0,d1
    2267/    1844 : 1205                		move.b	d5,d1
    2268/    1846 : 301B                		move.w	(a3)+,d0
    2269/    1848 : D044                		add.w	d4,d0
    2270/    184A : BF40                		eor.w	d7,d0
    2271/    184C : 4840                		swap	d0
    2272/    184E : 9040                		sub.w	d0,d0
    2273/    1850 : 102B FFFC           		move.b	-4(a3),d0
    2274/    1854 : 103B 005A           		move.b	byte_18B0(pc,d0.w),d0
    2275/    1858 : 901B                		sub.b	(a3)+,d0
    2276/    185A : 4880                		ext.w	d0
    2277/    185C : D042                		add.w	d2,d0
    2278/    185E : 0240 01FF           		andi.w	#$1FF,d0
    2279/    1862 : 6604                		bne.s	loc_1868
    2280/    1864 : 303C 0001           		move.w	#1,d0
    2281/    1868 :                     
    2282/    1868 :                     loc_1868:
    2283/    1868 : 2B00                		move.l	d0,-(a5)
    2284/    186A : 2B01                		move.l	d1,-(a5)
    2285/    186C : 4A1B                		tst.b	(a3)+
    2286/    186E : 67C2                		beq.s	loc_1832
    2287/    1870 :                     
    2288/    1870 :                     locret_1870:
    2289/    1870 : 4E75                		rts
    2290/    1872 :                     
    2291/    1872 :                     ; ===========================================================================
    2292/    1872 :                     
    2293/    1872 :                     loc_1872:
    2294/    1872 : BA46                		cmp.w	d6,d5
    2295/    1874 : 6338                		bls.s	locret_18AE
    2296/    1876 : 5345                		subq.w	#1,d5
    2297/    1878 : 7200                		moveq	#0,d1
    2298/    187A : 1213                		move.b	(a3),d1
    2299/    187C : 301B                		move.w	(a3)+,d0
    2300/    187E : 123B 1040           		move.b	byte_18C0(pc,d1.w),d1
    2301/    1882 : 9200                		sub.b	d0,d1
    2302/    1884 : 4881                		ext.w	d1
    2303/    1886 : D243                		add.w	d3,d1
    2304/    1888 : 4841                		swap	d1
    2305/    188A : 3200                		move.w	d0,d1
    2306/    188C : 1205                		move.b	d5,d1
    2307/    188E : 301B                		move.w	(a3)+,d0
    2308/    1890 : D044                		add.w	d4,d0
    2309/    1892 : BF40                		eor.w	d7,d0
    2310/    1894 : 4840                		swap	d0
    2311/    1896 : 101B                		move.b	(a3)+,d0
    2312/    1898 : 4880                		ext.w	d0
    2313/    189A : D042                		add.w	d2,d0
    2314/    189C : 0240 01FF           		andi.w	#$1FF,d0
    2315/    18A0 : 6604                		bne.s	loc_18A6
    2316/    18A2 : 303C 0001           		move.w	#1,d0
    2317/    18A6 :                     
    2318/    18A6 :                     loc_18A6:
    2319/    18A6 : 2B00                		move.l	d0,-(a5)
    2320/    18A8 : 2B01                		move.l	d1,-(a5)
    2321/    18AA : 4A1B                		tst.b	(a3)+
    2322/    18AC : 67C4                		beq.s	loc_1872
    2323/    18AE :                     
    2324/    18AE :                     locret_18AE:
    2325/    18AE : 4E75                		rts
    2326/    18B0 :                     ; ===========================================================================
    2327/    18B0 :                     ; ---------------------------------------------------------------------------
    2328/    18B0 : F8F8 F8F8           byte_18B0:	dc.b $F8,$F8,$F8,$F8
    2329/    18B4 : F0F0 F0F0           		dc.b $F0,$F0,$F0,$F0
    2330/    18B8 : E8E8 E8E8           		dc.b $E8,$E8,$E8,$E8
    2331/    18BC : E0E0 E0E0           		dc.b $E0,$E0,$E0,$E0
    2332/    18C0 : F8F0 E8E0           byte_18C0:	dc.b $F8,$F0,$E8,$E0
    2333/    18C4 : F8F0 E8E0           		dc.b $F8,$F0,$E8,$E0
    2334/    18C8 : F8F0 E8E0           		dc.b $F8,$F0,$E8,$E0
    2335/    18CC : F8F0 E8E0           		dc.b $F8,$F0,$E8,$E0
    2336/    18D0 : (MACRO)              		even
    2336/    18D0 : =>TRUE                       if notZ80(MOMCPU)
    2336/    18D0 : =>FALSE                              if (*)&1
    2336/    18D0 :                                             dc.b 0                          ;ds.b 1
    2336/    18D0 : [2336]                               endif
    2336/    18D0 : =>FALSE                      else
    2336/    18D0 :                                     if ($)&1
    2336/    18D0 :                                             db 0
    2336/    18D0 : [2336]                               endif
    2336/    18D0 : [2336]                       endif
    2337/    18D0 :                     ; ---------------------------------------------------------------------------
    2338/    18D0 :                     ; ===========================================================================
    2339/    18D0 :                     
    2340/    18D0 :                     loc_18D0:
    2341/    18D0 : BA46                		cmp.w	d6,d5
    2342/    18D2 : 6342                		bls.s	locret_1916
    2343/    18D4 : 5345                		subq.w	#1,d5
    2344/    18D6 : 7200                		moveq	#0,d1
    2345/    18D8 : 1213                		move.b	(a3),d1
    2346/    18DA : 301B                		move.w	(a3)+,d0
    2347/    18DC : 123B 10E2           		move.b	byte_18C0(pc,d1.w),d1
    2348/    18E0 : 9200                		sub.b	d0,d1
    2349/    18E2 : 4881                		ext.w	d1
    2350/    18E4 : D243                		add.w	d3,d1
    2351/    18E6 : 4841                		swap	d1
    2352/    18E8 : 3200                		move.w	d0,d1
    2353/    18EA : 1205                		move.b	d5,d1
    2354/    18EC : 301B                		move.w	(a3)+,d0
    2355/    18EE : D044                		add.w	d4,d0
    2356/    18F0 : BF40                		eor.w	d7,d0
    2357/    18F2 : 4840                		swap	d0
    2358/    18F4 : 9040                		sub.w	d0,d0
    2359/    18F6 : 102B FFFC           		move.b	-4(a3),d0
    2360/    18FA : 103B 00B4           		move.b	byte_18B0(pc,d0.w),d0
    2361/    18FE : 901B                		sub.b	(a3)+,d0
    2362/    1900 : 4880                		ext.w	d0
    2363/    1902 : D042                		add.w	d2,d0
    2364/    1904 : 0240 01FF           		andi.w	#$1FF,d0
    2365/    1908 : 6604                		bne.s	loc_190E
    2366/    190A : 303C 0001           		move.w	#1,d0
    2367/    190E :                     
    2368/    190E :                     loc_190E:
    2369/    190E : 2B00                		move.l	d0,-(a5)
    2370/    1910 : 2B01                		move.l	d1,-(a5)
    2371/    1912 : 4A1B                		tst.b	(a3)+
    2372/    1914 : 67BA                		beq.s	loc_18D0
    2373/    1916 :                     
    2374/    1916 :                     locret_1916:
    2375/    1916 : 4E75                		rts
    2376/    1918 :                     
    2377/    1918 :                     ; ===========================================================================
    2378/    1918 :                     ; ---------------------------------------------------------------------------
    2379/    1918 :                     ;
    2380/    1918 :                     ; ---------------------------------------------------------------------------
    2381/    1918 :                     
    2382/    1918 :                     sub_1918:
    2383/    1918 : 2F07                		move.l	d7,-(sp)
    2384/    191A : 41F8 D83C           		lea	($FFFFD83C).w,a0
    2385/    191E : 3E30 00FC           		move.w	-4(a0,d0.w),d7
    2386/    1922 : 41F8 D84C           		lea	($FFFFD84C).w,a0
    2387/    1926 : D0C0                		adda.w	d0,a0
    2388/    1928 : 4A78 D84C           		tst.w	($FFFFD84C).w
    2389/    192C : 6710                		beq.s	loc_193E
    2390/    192E : 4A80                		tst.l	d0
    2391/    1930 : 6A02                		bpl.s	loc_1934
    2392/    1932 : 7EFF                		moveq	#-1,d7
    2393/    1934 :                     
    2394/    1934 :                     loc_1934:
    2395/    1934 : 4A50                		tst.w	(a0)
    2396/    1936 : 670E                		beq.s	loc_1946
    2397/    1938 : 3050                		movea.w	(a0),a0
    2398/    193A : 51CF FFF8           		dbf	d7,loc_1934
    2399/    193E :                     
    2400/    193E :                     loc_193E:
    2401/    193E : 2E1F                		move.l	(sp)+,d7
    2402/    1940 : 007C 0008           		ori	#8,sr
    2403/    1944 : 4E75                		rts
    2404/    1946 :                     
    2405/    1946 :                     loc_1946:
    2406/    1946 : 30B8 D84C           		move.w	($FFFFD84C).w,(a0)
    2407/    194A : 3E08                		move.w	a0,d7
    2408/    194C : 3050                		movea.w	(a0),a0
    2409/    194E : 31D0 D84C           		move.w	(a0),($FFFFD84C).w
    2410/    1952 : 4250                		clr.w	(a0)
    2411/    1954 : 3147 0002           		move.w	d7,2(a0)
    2412/    1958 : 317C 8000 0004      		move.w	#$8000,4(a0)
    2413/    195E : 217C 0000 197A      		move.l	#data_197A,$10(a0)
             1964 : 0010             
    2414/    1966 : 7E00                		moveq	#0,d7
    2415/    1968 : 2147 0020           		move.l	d7,$20(a0)
    2416/    196C : 2147 0008           		move.l	d7,8(a0)
    2417/    1970 : 2147 000C           		move.l	d7,$C(a0)
    2418/    1974 : 4CDF 0080           		movem.l	(sp)+,d7
    2419/    1978 : 4E75                		rts
    2420/    197A :                     ; ===========================================================================
    2421/    197A :                     ; ---------------------------------------------------------------------------
    2422/    197A :                     data_197A:
    2423/    197A : 0000                		dc.b $00,$00
    2424/    197C : 0000                		dc.b $00,$00
    2425/    197E : 00FF                		dc.b $00,$FF
    2426/    1980 :                     ; ---------------------------------------------------------------------------
    2427/    1980 :                     ; ===========================================================================
    2428/    1980 :                     ; ---------------------------------------------------------------------------
    2429/    1980 :                     ;
    2430/    1980 :                     ; ---------------------------------------------------------------------------
    2431/    1980 :                     
    2432/    1980 :                     sub_1980:
    2433/    1980 : 2F09                		move.l	a1,-(sp)
    2434/    1982 : 4A56                		tst.w	(a6)
    2435/    1984 : 6A08                		bpl.s	loc_198E
    2436/    1986 : 3256                		movea.w	(a6),a1
    2437/    1988 : 336E 0002 0002      		move.w	2(a6),2(a1)
    2438/    198E :                     
    2439/    198E :                     loc_198E:
    2440/    198E : 326E 0002           		movea.w	2(a6),a1
    2441/    1992 : 3296                		move.w	(a6),(a1)
    2442/    1994 : 3CB8 D84C           		move.w	($FFFFD84C).w,(a6)
    2443/    1998 : 31CE D84C           		move.w	a6,($FFFFD84C).w
    2444/    199C : 2C49                		movea.l	a1,a6
    2445/    199E : 225F                		movea.l	(sp)+,a1
    2446/    19A0 : 4E75                		rts
    2447/    19A2 :                     
    2448/    19A2 :                     ; ===========================================================================
    2449/    19A2 :                     ; ---------------------------------------------------------------------------
    2450/    19A2 :                     ; Unused subroutine
    2451/    19A2 :                     ; ---------------------------------------------------------------------------
    2452/    19A2 : 2F09                		move.l	a1,-(sp)
    2453/    19A4 : 4A56                		tst.w	(a6)
    2454/    19A6 : 6A08                		bpl.s	loc_19B0
    2455/    19A8 : 3256                		movea.w	(a6),a1
    2456/    19AA : 336E 0002 0002      		move.w	2(a6),2(a1)
    2457/    19B0 :                     
    2458/    19B0 :                     loc_19B0:
    2459/    19B0 : 326E 0002           		movea.w	2(a6),a1
    2460/    19B4 : 3296                		move.w	(a6),(a1)
    2461/    19B6 : 3250                		movea.w	(a0),a1
    2462/    19B8 : 3C89                		move.w	a1,(a6)
    2463/    19BA : 3D48 0002           		move.w	a0,2(a6)
    2464/    19BE : 308E                		move.w	a6,(a0)
    2465/    19C0 : 334E 0002           		move.w	a6,2(a1)
    2466/    19C4 : 225F                		movea.l	(sp)+,a1
    2467/    19C6 : 4E75                		rts
    2468/    19C8 :                     
    2469/    19C8 :                     ; ===========================================================================
    2470/    19C8 :                     ; ---------------------------------------------------------------------------
    2471/    19C8 :                     ; Unused subroutine
    2472/    19C8 :                     ; ---------------------------------------------------------------------------
    2473/    19C8 : 202E 0018           		move.l	$18(a6),d0
    2474/    19CC : D1AE 0008           		add.l	d0,8(a6)
    2475/    19D0 : 202E 001C           		move.l	$1C(a6),d0
    2476/    19D4 : D1AE 000C           		add.l	d0,$C(a6)
    2477/    19D8 : 4E75                		rts
    2478/    19DA :                     
    2479/    19DA :                     ; ===========================================================================
    2480/    19DA :                     ; ---------------------------------------------------------------------------
    2481/    19DA :                     ;
    2482/    19DA :                     ; ---------------------------------------------------------------------------
    2483/    19DA :                     
    2484/    19DA :                     sub_19DA:
    2485/    19DA : 7200                		moveq	#0,d1
    2486/    19DC : 3428 0008           		move.w	8(a0),d2
    2487/    19E0 : 9478 C9DE           		sub.w	($FFFFC9DE).w,d2
    2488/    19E4 : 0C42 FFC0           		cmpi.w	#$FFC0,d2
    2489/    19E8 : 6C02                		bge.s	loc_19EC
    2490/    19EA : 7240                		moveq	#$40,d1
    2491/    19EC :                     
    2492/    19EC :                     loc_19EC:
    2493/    19EC : 0C42 0180           		cmpi.w	#$180,d2
    2494/    19F0 : 6D02                		blt.s	loc_19F4
    2495/    19F2 : 7240                		moveq	#$40,d1
    2496/    19F4 :                     
    2497/    19F4 :                     loc_19F4:
    2498/    19F4 : 0642 0080           		addi.w	#$80,d2
    2499/    19F8 : 3628 000C           		move.w	$C(a0),d3
    2500/    19FC : 9678 C9EE           		sub.w	($FFFFC9EE).w,d3
    2501/    1A00 : 0C43 FFC0           		cmpi.w	#$FFC0,d3
    2502/    1A04 : 6C02                		bge.s	loc_1A08
    2503/    1A06 : 7240                		moveq	#$40,d1
    2504/    1A08 :                     
    2505/    1A08 :                     loc_1A08:
    2506/    1A08 : 0C43 0120           		cmpi.w	#$120,d3
    2507/    1A0C : 6D02                		blt.s	loc_1A10
    2508/    1A0E : 7240                		moveq	#$40,d1
    2509/    1A10 :                     
    2510/    1A10 :                     loc_1A10:
    2511/    1A10 : 0643 0080           		addi.w	#$80,d3
    2512/    1A14 : 0268 FFBF 0004      		andi.w	#$FFBF,4(a0)
    2513/    1A1A : 8368 0004           		or.w	d1,4(a0)
    2514/    1A1E : 4E75                		rts
    2515/    1A20 :                     
    2516/    1A20 :                     ; ===========================================================================
    2517/    1A20 :                     ; ---------------------------------------------------------------------------
    2518/    1A20 :                     ; Unused subroutine
    2519/    1A20 :                     ; ---------------------------------------------------------------------------
    2520/    1A20 :                     
    2521/    1A20 : 6100 001A           		bsr.w	sub_1A3C
    2522/    1A24 : 3207                		move.w	d7,d1
    2523/    1A26 : D240                		add.w	d0,d1
    2524/    1A28 : 3006                		move.w	d6,d0
    2525/    1A2A : 3404                		move.w	d4,d2
    2526/    1A2C : 3605                		move.w	d5,d3
    2527/    1A2E : 380B                		move.w	a3,d4
    2528/    1A30 : 3A10                		move.w	(a0),d5
    2529/    1A32 : 0245 F000           		andi.w	#$F000,d5
    2530/    1A36 : E95D                		rol.w	#4,d5
    2531/    1A38 : B247                		cmp.w	d7,d1
    2532/    1A3A : 4E75                		rts
    2533/    1A3C :                     
    2534/    1A3C :                     ; ===========================================================================
    2535/    1A3C :                     ; ---------------------------------------------------------------------------
    2536/    1A3C :                     ;
    2537/    1A3C :                     ; ---------------------------------------------------------------------------
    2538/    1A3C :                     
    2539/    1A3C :                     ; Something to do with collision rotation
    2540/    1A3C :                     
    2541/    1A3C :                     sub_1A3C:
    2542/    1A3C : 3644                		movea.w	d4,a3
    2543/    1A3E : 3C00                		move.w	d0,d6
    2544/    1A40 : 3E01                		move.w	d1,d7
    2545/    1A42 : 3802                		move.w	d2,d4
    2546/    1A44 : 3A03                		move.w	d3,d5
    2547/    1A46 : 6100 01AE           		bsr.w	sub_1BF6
    2548/    1A4A : 3010                		move.w	(a0),d0
    2549/    1A4C : 0240 F000           		andi.w	#$F000,d0
    2550/    1A50 : E958                		rol.w	#4,d0
    2551/    1A52 : E548                		lsl.w	#2,d0
    2552/    1A54 : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1
    2553/    1A5A : 320B                		move.w	a3,d1
    2554/    1A5C : 6706                		beq.s	loc_1A64
    2555/    1A5E : 43F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a1
    2556/    1A64 :                     
    2557/    1A64 :                     loc_1A64:
    2558/    1A64 : 45F9 0000 2E14      		lea	(CollisionArrayRota).l,a2
    2559/    1A6A : 4EFB 0002           		jmp	loc_1A6E(pc,d0.w)
    2560/    1A6E :                     ; ===========================================================================
    2561/    1A6E :                     ; ---------------------------------------------------------------------------
    2562/    1A6E : 6000 01B4           loc_1A6E:	bra.w	loc_1C24
    2563/    1A72 :                     ; ---------------------------------------------------------------------------
    2564/    1A72 : 6000 01B0           		bra.w	loc_1C24
    2565/    1A76 :                     ; ---------------------------------------------------------------------------
    2566/    1A76 : 6000 01AC           		bra.w	loc_1C24
    2567/    1A7A :                     ; ---------------------------------------------------------------------------
    2568/    1A7A : 6000 01A8           		bra.w	loc_1C24
    2569/    1A7E :                     ; ---------------------------------------------------------------------------
    2570/    1A7E : 6000 01A4           		bra.w	loc_1C24
    2571/    1A82 :                     ; ---------------------------------------------------------------------------
    2572/    1A82 : 6000 01A0           		bra.w	loc_1C24
    2573/    1A86 :                     ; ---------------------------------------------------------------------------
    2574/    1A86 : 6000 019C           		bra.w	loc_1C24
    2575/    1A8A :                     ; ---------------------------------------------------------------------------
    2576/    1A8A : 6000 0198           		bra.w	loc_1C24
    2577/    1A8E :                     ; ---------------------------------------------------------------------------
    2578/    1A8E : 6000 0194           		bra.w	loc_1C24
    2579/    1A92 :                     ; ---------------------------------------------------------------------------
    2580/    1A92 : 6000 0190           		bra.w	loc_1C24
    2581/    1A96 :                     ; ---------------------------------------------------------------------------
    2582/    1A96 : 6000 018C           		bra.w	loc_1C24
    2583/    1A9A :                     ; ---------------------------------------------------------------------------
    2584/    1A9A : 6000 0188           		bra.w	loc_1C24
    2585/    1A9E :                     ; ---------------------------------------------------------------------------
    2586/    1A9E : 6000 0184           		bra.w	loc_1C24
    2587/    1AA2 :                     ; ---------------------------------------------------------------------------
    2588/    1AA2 : 6000 0180           		bra.w	loc_1C24
    2589/    1AA6 :                     ; ---------------------------------------------------------------------------
    2590/    1AA6 : 6000 017C           		bra.w	loc_1C24
    2591/    1AAA :                     ; ---------------------------------------------------------------------------
    2592/    1AAA : 6000 017C           		bra.w	loc_1C28
    2593/    1AAE :                     ; ---------------------------------------------------------------------------
    2594/    1AAE : 6100 0018           		bsr.w	sub_1AC8
    2595/    1AB2 : D047                		add.w	d7,d0
    2596/    1AB4 : 3206                		move.w	d6,d1
    2597/    1AB6 : 3405                		move.w	d5,d2
    2598/    1AB8 : 3604                		move.w	d4,d3
    2599/    1ABA : 380B                		move.w	a3,d4
    2600/    1ABC : 3A10                		move.w	(a0),d5
    2601/    1ABE : 0245 F000           		andi.w	#$F000,d5
    2602/    1AC2 : E95D                		rol.w	#4,d5
    2603/    1AC4 : B047                		cmp.w	d7,d0
    2604/    1AC6 : 4E75                		rts
    2605/    1AC8 :                     ; ---------------------------------------------------------------------------
    2606/    1AC8 :                     ;
    2607/    1AC8 :                     ; ---------------------------------------------------------------------------
    2608/    1AC8 :                     
    2609/    1AC8 :                     ; Something to do with the Collision array
    2610/    1AC8 :                     
    2611/    1AC8 :                     sub_1AC8:
    2612/    1AC8 : 3644                		movea.w	d4,a3
    2613/    1ACA : 3C00                		move.w	d0,d6
    2614/    1ACC : 3E01                		move.w	d1,d7
    2615/    1ACE : 3802                		move.w	d2,d4
    2616/    1AD0 : 3A03                		move.w	d3,d5
    2617/    1AD2 : 6100 0122           		bsr.w	sub_1BF6
    2618/    1AD6 : 3010                		move.w	(a0),d0
    2619/    1AD8 : 0240 F000           		andi.w	#$F000,d0
    2620/    1ADC : E958                		rol.w	#4,d0
    2621/    1ADE : E548                		lsl.w	#2,d0
    2622/    1AE0 : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1
    2623/    1AE6 : 320B                		move.w	a3,d1
    2624/    1AE8 : 6706                		beq.s	loc_1AF0
    2625/    1AEA : 43F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a1
    2626/    1AF0 :                     
    2627/    1AF0 :                     loc_1AF0:
    2628/    1AF0 : CD47                		exg	d6,d7
    2629/    1AF2 : C945                		exg	d4,d5
    2630/    1AF4 : 45F9 0000 1E14      		lea	(CollisionArrayNorm).l,a2
    2631/    1AFA : 4EFB 0002           		jmp	loc_1AFE(pc,d0.w)
    2632/    1AFE :                     ; ===========================================================================
    2633/    1AFE :                     ; ---------------------------------------------------------------------------
    2634/    1AFE : 6000 0124           loc_1AFE:	bra.w	loc_1C24
    2635/    1B02 :                     ; ---------------------------------------------------------------------------
    2636/    1B02 : 6000 0120           		bra.w	loc_1C24
    2637/    1B06 :                     ; ---------------------------------------------------------------------------
    2638/    1B06 : 6000 011C           		bra.w	loc_1C24
    2639/    1B0A :                     ; ---------------------------------------------------------------------------
    2640/    1B0A : 6000 0118           		bra.w	loc_1C24
    2641/    1B0E :                     ; ---------------------------------------------------------------------------
    2642/    1B0E : 6000 0114           		bra.w	loc_1C24
    2643/    1B12 :                     ; ---------------------------------------------------------------------------
    2644/    1B12 : 6000 0110           		bra.w	loc_1C24
    2645/    1B16 :                     ; ---------------------------------------------------------------------------
    2646/    1B16 : 6000 010C           		bra.w	loc_1C24
    2647/    1B1A :                     ; ---------------------------------------------------------------------------
    2648/    1B1A : 6000 0108           		bra.w	loc_1C24
    2649/    1B1E :                     ; ---------------------------------------------------------------------------
    2650/    1B1E : 6000 0104           		bra.w	loc_1C24
    2651/    1B22 :                     ; ---------------------------------------------------------------------------
    2652/    1B22 : 6000 0100           		bra.w	loc_1C24
    2653/    1B26 :                     ; ---------------------------------------------------------------------------
    2654/    1B26 : 6000 00FC           		bra.w	loc_1C24
    2655/    1B2A :                     ; ---------------------------------------------------------------------------
    2656/    1B2A : 6000 00F8           		bra.w	loc_1C24
    2657/    1B2E :                     ; ---------------------------------------------------------------------------
    2658/    1B2E : 6000 00F4           		bra.w	loc_1C24
    2659/    1B32 :                     ; ---------------------------------------------------------------------------
    2660/    1B32 : 6000 00F0           		bra.w	loc_1C24
    2661/    1B36 :                     ; ---------------------------------------------------------------------------
    2662/    1B36 : 6000 00EC           		bra.w	loc_1C24
    2663/    1B3A :                     ; ---------------------------------------------------------------------------
    2664/    1B3A : 6000 00EC           		bra.w	loc_1C28
    2665/    1B3E :                     ; ---------------------------------------------------------------------------
    2666/    1B3E :                     ; ===========================================================================
    2667/    1B3E :                     ; ---------------------------------------------------------------------------
    2668/    1B3E :                     ;
    2669/    1B3E :                     ; ---------------------------------------------------------------------------
    2670/    1B3E :                     
    2671/    1B3E :                     ; Something to do with Collision Array
    2672/    1B3E :                     
    2673/    1B3E :                     sub_1B3E:
    2674/    1B3E : 3C00                		move.w	d0,d6
    2675/    1B40 : 3E01                		move.w	d1,d7
    2676/    1B42 : 6100 00B2           		bsr.w	sub_1BF6
    2677/    1B46 : 3010                		move.w	(a0),d0
    2678/    1B48 : 3600                		move.w	d0,d3
    2679/    1B4A : 4843                		swap	d3
    2680/    1B4C : 3600                		move.w	d0,d3
    2681/    1B4E : 4A44                		tst.w	d4
    2682/    1B50 : 660A                		bne.s	loc_1B5C
    2683/    1B52 : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1
    2684/    1B58 : E55B                		rol.w	#2,d3
    2685/    1B5A : 6008                		bra.s	loc_1B64
    2686/    1B5C :                     
    2687/    1B5C :                     loc_1B5C:
    2688/    1B5C : 43F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a1
    2689/    1B62 : E95B                		rol.w	#4,d3
    2690/    1B64 :                     
    2691/    1B64 :                     loc_1B64:
    2692/    1B64 : 0243 0003           		andi.w	#3,d3
    2693/    1B68 : 4843                		swap	d3
    2694/    1B6A : 0240 03FF           		andi.w	#$3FF,d0
    2695/    1B6E : 1031 0000           		move.b	(a1,d0.w),d0
    2696/    1B72 : 0240 00FF           		andi.w	#$FF,d0
    2697/    1B76 : 47FA 229C           		lea	CurveResistMappings(pc),a3
    2698/    1B7A : 1433 0000           		move.b	(a3,d0.w),d2
    2699/    1B7E : 0C40 00F0           		cmpi.w	#$F0,d0
    2700/    1B82 : 650C                		bcs.s	loc_1B90
    2701/    1B84 : 720A                		moveq	#$A,d1
    2702/    1B86 : 0800 0000           		btst	#0,d0
    2703/    1B8A : 6702                		beq.s	loc_1B8E
    2704/    1B8C : 5241                		addq.w	#1,d1
    2705/    1B8E :                     
    2706/    1B8E :                     loc_1B8E:
    2707/    1B8E : 0343                		bchg	d1,d3
    2708/    1B90 :                     
    2709/    1B90 :                     loc_1B90:
    2710/    1B90 : E948                		lsl.w	#4,d0
    2711/    1B92 : 43F9 0000 2E14      		lea	(CollisionArrayRota).l,a1
    2712/    1B98 : 45F9 0000 1E14      		lea	(CollisionArrayNorm).l,a2
    2713/    1B9E : 43F1 0000           		lea	(a1,d0.w),a1
    2714/    1BA2 : 45F2 0000           		lea	(a2,d0.w),a2
    2715/    1BA6 : 700F                		moveq	#$F,d0
    2716/    1BA8 : 720F                		moveq	#$F,d1
    2717/    1BAA : C046                		and.w	d6,d0
    2718/    1BAC : C247                		and.w	d7,d1
    2719/    1BAE : 0243 0C00           		andi.w	#$C00,d3
    2720/    1BB2 : EF5B                		rol.w	#7,d3
    2721/    1BB4 : 4EBB 3010           		jsr	locret_1BC6(pc,d3.w)
    2722/    1BB8 : EE5B                		ror.w	#7,d3
    2723/    1BBA : 4843                		swap	d3
    2724/    1BBC : D2C0                		adda.w	d0,a1
    2725/    1BBE : D4C1                		adda.w	d1,a2
    2726/    1BC0 : 3006                		move.w	d6,d0
    2727/    1BC2 : 3207                		move.w	d7,d1
    2728/    1BC4 : 4E75                		rts
    2729/    1BC6 :                     ; ===========================================================================
    2730/    1BC6 :                     ; ---------------------------------------------------------------------------
    2731/    1BC6 : 4E75                locret_1BC6:	rts
    2732/    1BC8 :                     ; ---------------------------------------------------------------------------
    2733/    1BC8 : 6014                		bra.s	loc_1BDE
    2734/    1BCA :                     ; ---------------------------------------------------------------------------
    2735/    1BCA : 601C                		bra.s	loc_1BE8
    2736/    1BCC :                     ; ---------------------------------------------------------------------------
    2737/    1BCC : 0602 0080           		addi.b	#-$80,d2
    2738/    1BD0 : 4441                		neg.w	d1
    2739/    1BD2 : 0641 000F           		addi.w	#$F,d1
    2740/    1BD6 : 4440                		neg.w	d0
    2741/    1BD8 : 0640 000F           		addi.w	#$F,d0
    2742/    1BDC : 4E75                		rts
    2743/    1BDE :                     ; ---------------------------------------------------------------------------
    2744/    1BDE :                     ; ===========================================================================
    2745/    1BDE :                     
    2746/    1BDE :                     loc_1BDE:
    2747/    1BDE : 4402                		neg.b	d2
    2748/    1BE0 : 4440                		neg.w	d0
    2749/    1BE2 : 0640 000F           		addi.w	#$F,d0
    2750/    1BE6 : 4E75                		rts
    2751/    1BE8 :                     
    2752/    1BE8 :                     ; ===========================================================================
    2753/    1BE8 :                     
    2754/    1BE8 :                     loc_1BE8:
    2755/    1BE8 : 4402                		neg.b	d2
    2756/    1BEA : 0602 0080           		addi.b	#-$80,d2
    2757/    1BEE : 4441                		neg.w	d1
    2758/    1BF0 : 0641 000F           		addi.w	#$F,d1
    2759/    1BF4 : 4E75                		rts
    2760/    1BF6 :                     
    2761/    1BF6 :                     ; ===========================================================================
    2762/    1BF6 :                     ; ---------------------------------------------------------------------------
    2763/    1BF6 :                     ;
    2764/    1BF6 :                     ; ---------------------------------------------------------------------------
    2765/    1BF6 :                     
    2766/    1BF6 :                     sub_1BF6:
    2767/    1BF6 : 7470                		moveq	#$70,d2
    2768/    1BF8 : 7670                		moveq	#$70,d3
    2769/    1BFA : C440                		and.w	d0,d2
    2770/    1BFC : C641                		and.w	d1,d3
    2771/    1BFE : E64A                		lsr.w	#3,d2
    2772/    1C00 : D642                		add.w	d2,d3
    2773/    1C02 : EE48                		lsr.w	#7,d0
    2774/    1C04 : EE49                		lsr.w	#7,d1
    2775/    1C06 : 1438 C9E4           		move.b	($FFFFC9E4).w,d2
    2776/    1C0A : E569                		lsl.w	d2,d1
    2777/    1C0C : D240                		add.w	d0,d1
    2778/    1C0E : 2078 C9FE           		movea.l	($FFFFC9FE).w,a0
    2779/    1C12 : 1430 1000           		move.b	(a0,d1.w),d2
    2780/    1C16 : EF4A                		lsl.w	#7,d2
    2781/    1C18 : D443                		add.w	d3,d2
    2782/    1C1A : 2078 CA02           		movea.l	($FFFFCA02).w,a0
    2783/    1C1E : 41F0 2000           		lea	(a0,d2.w),a0
    2784/    1C22 : 4E75                		rts
    2785/    1C24 :                     
    2786/    1C24 :                     ; ===========================================================================
    2787/    1C24 :                     
    2788/    1C24 :                     loc_1C24:
    2789/    1C24 : 7000                		moveq	#0,d0
    2790/    1C26 : 4E75                		rts
    2791/    1C28 :                     
    2792/    1C28 :                     ; ===========================================================================
    2793/    1C28 :                     
    2794/    1C28 :                     loc_1C28:
    2795/    1C28 : 3010                		move.w	(a0),d0
    2796/    1C2A : 3400                		move.w	d0,d2
    2797/    1C2C : 7200                		moveq	#0,d1
    2798/    1C2E : 0240 03FF           		andi.w	#$3FF,d0
    2799/    1C32 : 1231 0000           		move.b	(a1,d0.w),d1
    2800/    1C36 : 3001                		move.w	d1,d0
    2801/    1C38 : E948                		lsl.w	#4,d0
    2802/    1C3A : 43F2 0000           		lea	(a2,d0.w),a1
    2803/    1C3E : 0C41 00F0           		cmpi.w	#$F0,d1
    2804/    1C42 : 650C                		bcs.s	loc_1C50
    2805/    1C44 : 700A                		moveq	#$A,d0
    2806/    1C46 : 0801 0000           		btst	#0,d1
    2807/    1C4A : 6702                		beq.s	loc_1C4E
    2808/    1C4C : 5240                		addq.w	#1,d0
    2809/    1C4E :                     
    2810/    1C4E :                     loc_1C4E:
    2811/    1C4E : 0142                		bchg	d0,d2
    2812/    1C50 :                     
    2813/    1C50 :                     loc_1C50:
    2814/    1C50 : 0242 0C00           		andi.w	#$C00,d2
    2815/    1C54 : ED5A                		rol.w	#6,d2
    2816/    1C56 : 700F                		moveq	#$F,d0
    2817/    1C58 : C046                		and.w	d6,d0
    2818/    1C5A : 4A45                		tst.w	d5
    2819/    1C5C : 6B02                		bmi.s	loc_1C60
    2820/    1C5E : 5842                		addq.w	#4,d2
    2821/    1C60 :                     
    2822/    1C60 :                     loc_1C60:
    2823/    1C60 : D442                		add.w	d2,d2
    2824/    1C62 : 343B 2006           		move.w	off_1C6A(pc,d2.w),d2
    2825/    1C66 : 4EFB 2002           		jmp	off_1C6A(pc,d2.w)
    2826/    1C6A :                     ; ===========================================================================
    2827/    1C6A :                     ; ---------------------------------------------------------------------------
    2828/    1C6A : 0022                off_1C6A:	dc.w W1C6A_loc01-off_1C6A
    2829/    1C6C : 0054                		dc.w W1C6A_loc03-off_1C6A
    2830/    1C6E : 008A                		dc.w W1C6A_loc05-off_1C6A
    2831/    1C70 : 00C4                		dc.w W1C6A_loc07-off_1C6A
    2832/    1C72 : 0010                		dc.w W1C6A_loc00-off_1C6A
    2833/    1C74 : 003A                		dc.w W1C6A_loc02-off_1C6A
    2834/    1C76 : 0072                		dc.w W1C6A_loc04-off_1C6A
    2835/    1C78 : 00A8                		dc.w W1C6A_loc06-off_1C6A
    2836/    1C7A :                     ; ---------------------------------------------------------------------------
    2837/    1C7A :                     ; ===========================================================================
    2838/    1C7A :                     ; ---------------------------------------------------------------------------
    2839/    1C7A :                     
    2840/    1C7A :                     W1C6A_loc00:
    2841/    1C7A : D2C0                		adda.w	d0,a1
    2842/    1C7C : 1011                		move.b	(a1),d0
    2843/    1C7E : 3207                		move.w	d7,d1
    2844/    1C80 : 0241 000F           		andi.w	#$F,d1
    2845/    1C84 : 9041                		sub.w	d1,d0
    2846/    1C86 : 5340                		subq.w	#1,d0
    2847/    1C88 : 6A9A                		bpl.s	loc_1C24
    2848/    1C8A : 4E75                		rts
    2849/    1C8C :                     ; ---------------------------------------------------------------------------
    2850/    1C8C :                     W1C6A_loc01:
    2851/    1C8C : D2C0                		adda.w	d0,a1
    2852/    1C8E : 1011                		move.b	(a1),d0
    2853/    1C90 : 0C40 0010           		cmpi.w	#$10,d0
    2854/    1C94 : 678E                		beq.s	loc_1C24
    2855/    1C96 : 3007                		move.w	d7,d0
    2856/    1C98 : 0240 000F           		andi.w	#$F,d0
    2857/    1C9C : 4440                		neg.w	d0
    2858/    1C9E : 0640 0010           		addi.w	#$10,d0
    2859/    1CA2 : 4E75                		rts
    2860/    1CA4 :                     ; ---------------------------------------------------------------------------
    2861/    1CA4 :                     W1C6A_loc02:
    2862/    1CA4 : 4440                		neg.w	d0
    2863/    1CA6 : 43F1 000F           		lea	$F(a1,d0.w),a1
    2864/    1CAA : 1011                		move.b	(a1),d0
    2865/    1CAC : 4880                		ext.w	d0
    2866/    1CAE : 2207                		move.l	d7,d1
    2867/    1CB0 : 0241 000F           		andi.w	#$F,d1
    2868/    1CB4 : 9041                		sub.w	d1,d0
    2869/    1CB6 : 5340                		subq.w	#1,d0
    2870/    1CB8 : 6A00 FF6A           		bpl.w	loc_1C24
    2871/    1CBC : 4E75                		rts
    2872/    1CBE :                     ; ---------------------------------------------------------------------------
    2873/    1CBE :                     W1C6A_loc03:
    2874/    1CBE : 4440                		neg.w	d0
    2875/    1CC0 : 43F1 000F           		lea	$F(a1,d0.w),a1
    2876/    1CC4 : 1011                		move.b	(a1),d0
    2877/    1CC6 : 0C00 0010           		cmpi.b	#$10,d0
    2878/    1CCA : 6700 FF58           		beq.w	loc_1C24
    2879/    1CCE : 3007                		move.w	d7,d0
    2880/    1CD0 : 0240 000F           		andi.w	#$F,d0
    2881/    1CD4 : 4440                		neg.w	d0
    2882/    1CD6 : 0640 0010           		addi.w	#$10,d0
    2883/    1CDA : 4E75                		rts
    2884/    1CDC :                     ; ---------------------------------------------------------------------------
    2885/    1CDC :                     W1C6A_loc04:
    2886/    1CDC : D2C0                		adda.w	d0,a1
    2887/    1CDE : 1011                		move.b	(a1),d0
    2888/    1CE0 : 0C00 0010           		cmpi.b	#$10,d0
    2889/    1CE4 : 6700 FF3E           		beq.w	loc_1C24
    2890/    1CE8 : 3007                		move.w	d7,d0
    2891/    1CEA : 0240 000F           		andi.w	#$F,d0
    2892/    1CEE : 5240                		addq.w	#1,d0
    2893/    1CF0 : 4440                		neg.w	d0
    2894/    1CF2 : 4E75                		rts
    2895/    1CF4 :                     ; ---------------------------------------------------------------------------
    2896/    1CF4 :                     W1C6A_loc05:
    2897/    1CF4 : D2C0                		adda.w	d0,a1
    2898/    1CF6 : 1011                		move.b	(a1),d0
    2899/    1CF8 : 4440                		neg.w	d0
    2900/    1CFA : 0640 000F           		addi.w	#$F,d0
    2901/    1CFE : 3207                		move.w	d7,d1
    2902/    1D00 : 0241 000F           		andi.w	#$F,d1
    2903/    1D04 : 9240                		sub.w	d0,d1
    2904/    1D06 : 6E00 FF1C           		bgt.w	loc_1C24
    2905/    1D0A : 4441                		neg.w	d1
    2906/    1D0C : 5241                		addq.w	#1,d1
    2907/    1D0E : 3001                		move.w	d1,d0
    2908/    1D10 : 4E75                		rts
    2909/    1D12 :                     ; ---------------------------------------------------------------------------
    2910/    1D12 :                     W1C6A_loc06:
    2911/    1D12 : 4440                		neg.w	d0
    2912/    1D14 : 43F1 000F           		lea	$F(a1,d0.w),a1
    2913/    1D18 : 1011                		move.b	(a1),d0
    2914/    1D1A : 0C00 0010           		cmpi.b	#$10,d0
    2915/    1D1E :                     
    2916/    1D1E :                     loc_1D1E:
    2917/    1D1E : 6700 FF04           		beq.w	loc_1C24
    2918/    1D22 : 3007                		move.w	d7,d0
    2919/    1D24 : 0240 000F           		andi.w	#$F,d0
    2920/    1D28 : 5240                		addq.w	#1,d0
    2921/    1D2A : 4440                		neg.w	d0
    2922/    1D2C : 4E75                		rts
    2923/    1D2E :                     ; ---------------------------------------------------------------------------
    2924/    1D2E :                     W1C6A_loc07:
    2925/    1D2E : 4440                		neg.w	d0
    2926/    1D30 : 43F1 000F           		lea	$F(a1,d0.w),a1
    2927/    1D34 : 1011                		move.b	(a1),d0
    2928/    1D36 : 4880                		ext.w	d0
    2929/    1D38 : 4440                		neg.w	d0
    2930/    1D3A : 0640 000F           		addi.w	#$F,d0
    2931/    1D3E : 3207                		move.w	d7,d1
    2932/    1D40 : 0241 000F           		andi.w	#$F,d1
    2933/    1D44 : 9240                		sub.w	d0,d1
    2934/    1D46 : 6E00 FEDC           		bgt.w	loc_1C24
    2935/    1D4A : 4441                		neg.w	d1
    2936/    1D4C : 5241                		addq.w	#1,d1
    2937/    1D4E : 3001                		move.w	d1,d0
    2938/    1D50 : 4E75                		rts
    2939/    1D52 :                     ; ---------------------------------------------------------------------------
    2940/    1D52 :                     W1C6A_loc08:
    2941/    1D52 : 4840                		swap	d0
    2942/    1D54 : 4841                		swap	d1
    2943/    1D56 : 3642                		movea.w	d2,a3
    2944/    1D58 : 3C00                		move.w	d0,d6
    2945/    1D5A : 3E01                		move.w	d1,d7
    2946/    1D5C : 6100 FE98           		bsr.w	sub_1BF6
    2947/    1D60 : 3010                		move.w	(a0),d0
    2948/    1D62 : 320B                		move.w	a3,d1
    2949/    1D64 : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1
    2950/    1D6A : 6706                		beq.s	loc_1D72
    2951/    1D6C : 43F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a1
    2952/    1D72 :                     
    2953/    1D72 :                     loc_1D72:
    2954/    1D72 : 3200                		move.w	d0,d1
    2955/    1D74 : 0240 03FF           		andi.w	#$3FF,d0
    2956/    1D78 : 0241 0C00           		andi.w	#$C00,d1
    2957/    1D7C : ED59                		rol.w	#6,d1
    2958/    1D7E : D2C0                		adda.w	d0,a1
    2959/    1D80 : 7000                		moveq	#0,d0
    2960/    1D82 : 1011                		move.b	(a1),d0
    2961/    1D84 : 43FA 208E           		lea	CurveResistMappings(pc),a1
    2962/    1D88 : 1031 0000           		move.b	(a1,d0.w),d0
    2963/    1D8C : D241                		add.w	d1,d1
    2964/    1D8E : 4EFB 1002           		jmp	locret_1D92(pc,d1.w)
    2965/    1D92 :                     ; ===========================================================================
    2966/    1D92 :                     ; ---------------------------------------------------------------------------
    2967/    1D92 : 4E75                locret_1D92:	rts		; For some reason, this offset table has been disabled? assuming it is
    2968/    1D94 :                     ; ---------------------------------------------------------------------------
    2969/    1D94 : 6006                		bra.s	loc_1D9C
    2970/    1D96 :                     ; ---------------------------------------------------------------------------
    2971/    1D96 : 6004                		bra.s	loc_1D9C
    2972/    1D98 :                     ; ---------------------------------------------------------------------------
    2973/    1D98 : 600A                		bra.s	loc_1DA4
    2974/    1D9A :                     ; ---------------------------------------------------------------------------
    2975/    1D9A : 6002                		bra.s	loc_1D9E
    2976/    1D9C :                     ; ---------------------------------------------------------------------------
    2977/    1D9C :                     ; ===========================================================================
    2978/    1D9C :                     
    2979/    1D9C :                     loc_1D9C:
    2980/    1D9C : 4400                		neg.b	d0
    2981/    1D9E :                     
    2982/    1D9E :                     loc_1D9E:
    2983/    1D9E : 0600 0080           		addi.b	#-$80,d0
    2984/    1DA2 : 4E75                		rts
    2985/    1DA4 :                     
    2986/    1DA4 :                     loc_1DA4:
    2987/    1DA4 : 4400                		neg.b	d0
    2988/    1DA6 : 4E75                		rts
    2989/    1DA8 :                     
    2990/    1DA8 :                     sub_1DA8:
    2991/    1DA8 : 4A2E 001C           		tst.b	$1C(a6)
    2992/    1DAC : 6A04                		bpl.s	loc_1DB2
    2993/    1DAE : B040                		cmp.w	d0,d0
    2994/    1DB0 : 4E75                		rts
    2995/    1DB2 :                     
    2996/    1DB2 :                     loc_1DB2:
    2997/    1DB2 : 3C00                		move.w	d0,d6
    2998/    1DB4 : 3E01                		move.w	d1,d7
    2999/    1DB6 : 6100 FE3E           		bsr.w	sub_1BF6
    3000/    1DBA : 3010                		move.w	(a0),d0
    3001/    1DBC : 3200                		move.w	d0,d1
    3002/    1DBE : 0240 C000           		andi.w	#$C000,d0
    3003/    1DC2 : 6700 0048           		beq.w	loc_1E0C
    3004/    1DC6 : 3001                		move.w	d1,d0
    3005/    1DC8 : 0240 03FF           		andi.w	#$3FF,d0
    3006/    1DCC : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1
    3007/    1DD2 : 1031 0000           		move.b	(a1,d0.w),d0
    3008/    1DD6 : 0240 00FF           		andi.w	#$FF,d0
    3009/    1DDA : E948                		lsl.w	#4,d0
    3010/    1DDC : 43F9 0000 2E14      		lea	(CollisionArrayRota).l,a1
    3011/    1DE2 : D2C0                		adda.w	d0,a1
    3012/    1DE4 : 700F                		moveq	#$F,d0
    3013/    1DE6 : C046                		and.w	d6,d0
    3014/    1DE8 : 0801 000A           		btst	#$A,d1
    3015/    1DEC : 6706                		beq.s	loc_1DF4
    3016/    1DEE : 4440                		neg.w	d0
    3017/    1DF0 : 0640 000F           		addi.w	#$F,d0
    3018/    1DF4 :                     
    3019/    1DF4 :                     loc_1DF4:
    3020/    1DF4 : D2C0                		adda.w	d0,a1
    3021/    1DF6 : 1011                		move.b	(a1),d0
    3022/    1DF8 : 0C00 0010           		cmpi.b	#$10,d0
    3023/    1DFC : 670E                		beq.s	loc_1E0C
    3024/    1DFE : 3006                		move.w	d6,d0
    3025/    1E00 : 323C FFF0           		move.w	#$FFF0,d1
    3026/    1E04 : C247                		and.w	d7,d1
    3027/    1E06 : 5341                		subq.w	#1,d1
    3028/    1E08 : BE41                		cmp.w	d1,d7
    3029/    1E0A : 4E75                		rts
    3030/    1E0C :                     
    3031/    1E0C :                     loc_1E0C:
    3032/    1E0C : 3006                		move.w	d6,d0
    3033/    1E0E : 3207                		move.w	d7,d1
    3034/    1E10 : BE41                		cmp.w	d1,d7
    3035/    1E12 : 4E75                		rts
    3036/    1E14 :                     
    3037/    1E14 :                     ; ===========================================================================
    3038/    1E14 :                     ; ---------------------------------------------------------------------------
    3039/    1E14 :                     CollisionArrayNorm:
    3040/    1E14 :                     		binclude	"collide/Collision Array (Normal).bin"
    3041/    2E14 : (MACRO)              		even
    3041/    2E14 : =>TRUE                       if notZ80(MOMCPU)
    3041/    2E14 : =>FALSE                              if (*)&1
    3041/    2E14 :                                             dc.b 0                          ;ds.b 1
    3041/    2E14 : [3041]                               endif
    3041/    2E14 : =>FALSE                      else
    3041/    2E14 :                                     if ($)&1
    3041/    2E14 :                                             db 0
    3041/    2E14 : [3041]                               endif
    3041/    2E14 : [3041]                       endif
    3042/    2E14 :                     CollisionArrayRota:
    3043/    2E14 :                     		binclude	"collide/Collision Array (Rotated).bin"
    3044/    3E14 : (MACRO)              		even
    3044/    3E14 : =>TRUE                       if notZ80(MOMCPU)
    3044/    3E14 : =>FALSE                              if (*)&1
    3044/    3E14 :                                             dc.b 0                          ;ds.b 1
    3044/    3E14 : [3044]                               endif
    3044/    3E14 : =>FALSE                      else
    3044/    3E14 :                                     if ($)&1
    3044/    3E14 :                                             db 0
    3044/    3E14 : [3044]                               endif
    3044/    3E14 : [3044]                       endif
    3045/    3E14 :                     CurveResistMappings:
    3046/    3E14 :                     		binclude	"collide/Angle Map.bin"
    3047/    3F14 : (MACRO)              		even
    3047/    3F14 : =>TRUE                       if notZ80(MOMCPU)
    3047/    3F14 : =>FALSE                              if (*)&1
    3047/    3F14 :                                             dc.b 0                          ;ds.b 1
    3047/    3F14 : [3047]                               endif
    3047/    3F14 : =>FALSE                      else
    3047/    3F14 :                                     if ($)&1
    3047/    3F14 :                                             db 0
    3047/    3F14 : [3047]                               endif
    3047/    3F14 : [3047]                       endif
    3048/    3F14 :                     ; ---------------------------------------------------------------------------
    3049/    3F14 :                     ; ===========================================================================
    3050/    3F14 :                     ; ---------------------------------------------------------------------------
    3051/    3F14 :                     
    3052/    3F14 :                     ; ---------------------------------------------------------------------------
    3053/    3F14 :                     
    3054/    3F14 :                     CalcSine:
    3055/    3F14 : 3002                		move.w	d2,d0
    3056/    3F16 : D040                		add.w	d0,d0
    3057/    3F18 : 0240 01FE           		andi.w	#$1FE,d0
    3058/    3F1C : 323B 000C           		move.w	Sine_Table(pc,d0.w),d1
    3059/    3F20 : 0640 0080           		addi.w	#$80,d0
    3060/    3F24 : 303B 0004           		move.w	Sine_Table(pc,d0.w),d0
    3061/    3F28 : 4E75                		rts
    3062/    3F2A :                     ; ===========================================================================
    3063/    3F2A :                     ; ---------------------------------------------------------------------------
    3064/    3F2A : 0000 0192 0323      Sine_Table:	dc.w $0000,$0192,$0323,$04B5,$0645,$07D5,$0964,$0AF1,$0C7C,$0E05,$0F8C
             3F30 : 04B5 0645 07D5 
             3F36 : 0964 0AF1 0C7C 
             3F3C : 0E05 0F8C          
    3065/    3F40 : 1111 1294 1413      		dc.w $1111,$1294,$1413,$158F,$1708,$187D,$19EF,$1B5D,$1CC6,$1E2B,$1F8B
             3F46 : 158F 1708 187D 
             3F4C : 19EF 1B5D 1CC6 
             3F52 : 1E2B 1F8B          
    3066/    3F56 : 20E7 223D 238E      		dc.w $20E7,$223D,$238E,$24DA,$261F,$275F,$2899,$29CD,$2AFA,$2C21,$2D41
             3F5C : 24DA 261F 275F 
             3F62 : 2899 29CD 2AFA 
             3F68 : 2C21 2D41          
    3067/    3F6C : 2E5A 2F6B 3076      		dc.w $2E5A,$2F6B,$3076,$3179,$3274,$3367,$3453,$3536,$3612,$36E5,$37AF
             3F72 : 3179 3274 3367 
             3F78 : 3453 3536 3612 
             3F7E : 36E5 37AF          
    3068/    3F82 : 3871 392A 39DA      		dc.w $3871,$392A,$39DA,$3A82,$3B20,$3BB6,$3C42,$3CC5,$3D3E,$3DAE,$3E14
             3F88 : 3A82 3B20 3BB6 
             3F8E : 3C42 3CC5 3D3E 
             3F94 : 3DAE 3E14          
    3069/    3F98 : 3E71 3EC5 3F0E      		dc.w $3E71,$3EC5,$3F0E,$3F4E,$3F84,$3FB1,$3FD3,$3FEC,$3FFB,$4000,$3FFB
             3F9E : 3F4E 3F84 3FB1 
             3FA4 : 3FD3 3FEC 3FFB 
             3FAA : 4000 3FFB          
    3070/    3FAE : 3FEC 3FD3 3FB1      		dc.w $3FEC,$3FD3,$3FB1,$3F84,$3F4E,$3F0E,$3EC5,$3E71,$3E14,$3DAE,$3D3E
             3FB4 : 3F84 3F4E 3F0E 
             3FBA : 3EC5 3E71 3E14 
             3FC0 : 3DAE 3D3E          
    3071/    3FC4 : 3CC5 3C42 3BB6      		dc.w $3CC5,$3C42,$3BB6,$3B20,$3A82,$39DA,$392A,$3871,$37AF,$36E5,$3612
             3FCA : 3B20 3A82 39DA 
             3FD0 : 392A 3871 37AF 
             3FD6 : 36E5 3612          
    3072/    3FDA : 3536 3453 3367      		dc.w $3536,$3453,$3367,$3274,$3179,$3076,$2F6B,$2E5A,$2D41,$2C21,$2AFA
             3FE0 : 3274 3179 3076 
             3FE6 : 2F6B 2E5A 2D41 
             3FEC : 2C21 2AFA          
    3073/    3FF0 : 29CD 2899 275F      		dc.w $29CD,$2899,$275F,$261F,$24DA,$238E,$223D,$20E7,$1F8B,$1E2B,$1CC6
             3FF6 : 261F 24DA 238E 
             3FFC : 223D 20E7 1F8B 
             4002 : 1E2B 1CC6          
    3074/    4006 : 1B5D 19EF 187D      		dc.w $1B5D,$19EF,$187D,$1708,$158F,$1413,$1294,$1111,$0F8C,$0E05,$0C7C
             400C : 1708 158F 1413 
             4012 : 1294 1111 0F8C 
             4018 : 0E05 0C7C          
    3075/    401C : 0AF1 0964 07D5      		dc.w $0AF1,$0964,$07D5,$0645,$04B5,$0323,$0192,$0000
             4022 : 0645 04B5 0323 
             4028 : 0192 0000          
    3076/    402C :                     ; ---------------------------------------------------------------------------
    3077/    402C : FE6D                		dc.w $FE6D
    3078/    402E : FCDC                		dc.w $FCDC
    3079/    4030 : FB4A                		dc.w $FB4A
    3080/    4032 : F9BA                		dc.w $F9BA
    3081/    4034 : F82A                		dc.w $F82A
    3082/    4036 : F69B                		dc.w $F69B
    3083/    4038 : F50E                		dc.w $F50E
    3084/    403A : F383                		dc.w $F383
    3085/    403C : F1FA                		dc.w $F1FA
    3086/    403E : F073                		dc.w $F073
    3087/    4040 : EEEE                		dc.w $EEEE
    3088/    4042 : ED6B                		dc.w $ED6B
    3089/    4044 : EBEC                		dc.w $EBEC
    3090/    4046 : EA70                		dc.w $EA70
    3091/    4048 : E8F7                		dc.w $E8F7
    3092/    404A : E782                		dc.w $E782
    3093/    404C : E610                		dc.w $E610
    3094/    404E : E4A2                		dc.w $E4A2
    3095/    4050 : E339                		dc.w $E339
    3096/    4052 : E1D4                		dc.w $E1D4
    3097/    4054 : E074                		dc.w $E074
    3098/    4056 : DF18                		dc.w $DF18
    3099/    4058 : DDC2                		dc.w $DDC2
    3100/    405A : DC71                		dc.w $DC71
    3101/    405C : DB25                		dc.w $DB25
    3102/    405E : D9E0                		dc.w $D9E0
    3103/    4060 : D8A0                		dc.w $D8A0
    3104/    4062 : D766                		dc.w $D766
    3105/    4064 : D632                		dc.w $D632
    3106/    4066 : D505                		dc.w $D505
    3107/    4068 : D3DE                		dc.w $D3DE
    3108/    406A : D2BE                		dc.w $D2BE
    3109/    406C : D1A5                		dc.w $D1A5
    3110/    406E : D094                		dc.w $D094
    3111/    4070 : CF89                		dc.w $CF89
    3112/    4072 : CE86                		dc.w $CE86
    3113/    4074 : CD8B                		dc.w $CD8B
    3114/    4076 : CC98                		dc.w $CC98
    3115/    4078 : CBAC                		dc.w $CBAC
    3116/    407A : CAC9                		dc.w $CAC9
    3117/    407C : C9ED                		dc.w $C9ED
    3118/    407E : C91A                		dc.w $C91A
    3119/    4080 : C850                		dc.w $C850
    3120/    4082 : C78E                		dc.w $C78E
    3121/    4084 : C6D5                		dc.w $C6D5
    3122/    4086 : C625                		dc.w $C625
    3123/    4088 : C57D                		dc.w $C57D
    3124/    408A : C4DF                		dc.w $C4DF
    3125/    408C : C449                		dc.w $C449
    3126/    408E : C3BD                		dc.w $C3BD
    3127/    4090 : C33A                		dc.w $C33A
    3128/    4092 : C2C1                		dc.w $C2C1
    3129/    4094 : C251                		dc.w $C251
    3130/    4096 : C1EB                		dc.w $C1EB
    3131/    4098 : C18E                		dc.w $C18E
    3132/    409A : C13A                		dc.w $C13A
    3133/    409C : C0F1                		dc.w $C0F1
    3134/    409E : C0B1                		dc.w $C0B1
    3135/    40A0 : C07B                		dc.w $C07B
    3136/    40A2 : C04E                		dc.w $C04E
    3137/    40A4 : C02C                		dc.w $C02C
    3138/    40A6 : C013                		dc.w $C013
    3139/    40A8 : C004                		dc.w $C004
    3140/    40AA : C000                		dc.w $C000
    3141/    40AC : C004                		dc.w $C004
    3142/    40AE : C013                		dc.w $C013
    3143/    40B0 : C02C                		dc.w $C02C
    3144/    40B2 : C04E                		dc.w $C04E
    3145/    40B4 : C07B                		dc.w $C07B
    3146/    40B6 : C0B1                		dc.w $C0B1
    3147/    40B8 : C0F1                		dc.w $C0F1
    3148/    40BA : C13A                		dc.w $C13A
    3149/    40BC : C18E                		dc.w $C18E
    3150/    40BE : C1EB                		dc.w $C1EB
    3151/    40C0 : C251                		dc.w $C251
    3152/    40C2 : C2C1                		dc.w $C2C1
    3153/    40C4 : C33A                		dc.w $C33A
    3154/    40C6 : C3BD                		dc.w $C3BD
    3155/    40C8 : C449                		dc.w $C449
    3156/    40CA : C4DF                		dc.w $C4DF
    3157/    40CC : C57D                		dc.w $C57D
    3158/    40CE : C625                		dc.w $C625
    3159/    40D0 : C6D5                		dc.w $C6D5
    3160/    40D2 : C78E                		dc.w $C78E
    3161/    40D4 : C850                		dc.w $C850
    3162/    40D6 : C91A                		dc.w $C91A
    3163/    40D8 : C9ED                		dc.w $C9ED
    3164/    40DA : CAC9                		dc.w $CAC9
    3165/    40DC : CBAC                		dc.w $CBAC
    3166/    40DE : CC98                		dc.w $CC98
    3167/    40E0 : CD8B                		dc.w $CD8B
    3168/    40E2 : CE86                		dc.w $CE86
    3169/    40E4 : CF89                		dc.w $CF89
    3170/    40E6 : D094                		dc.w $D094
    3171/    40E8 : D1A5                		dc.w $D1A5
    3172/    40EA : D2BE                		dc.w $D2BE
    3173/    40EC : D3DE                		dc.w $D3DE
    3174/    40EE : D505                		dc.w $D505
    3175/    40F0 : D632                		dc.w $D632
    3176/    40F2 : D766                		dc.w $D766
    3177/    40F4 : D8A0                		dc.w $D8A0
    3178/    40F6 : D9E0                		dc.w $D9E0
    3179/    40F8 : DB25                		dc.w $DB25
    3180/    40FA : DC71                		dc.w $DC71
    3181/    40FC : DDC2                		dc.w $DDC2
    3182/    40FE : DF18                		dc.w $DF18
    3183/    4100 : E074                		dc.w $E074
    3184/    4102 : E1D4                		dc.w $E1D4
    3185/    4104 : E339                		dc.w $E339
    3186/    4106 : E4A2                		dc.w $E4A2
    3187/    4108 : E610                		dc.w $E610
    3188/    410A : E782                		dc.w $E782
    3189/    410C : E8F7                		dc.w $E8F7
    3190/    410E : EA70                		dc.w $EA70
    3191/    4110 : EBEC                		dc.w $EBEC
    3192/    4112 : ED6B                		dc.w $ED6B
    3193/    4114 : EEEE                		dc.w $EEEE
    3194/    4116 : F073                		dc.w $F073
    3195/    4118 : F1FA                		dc.w $F1FA
    3196/    411A : F383                		dc.w $F383
    3197/    411C : F50E                		dc.w $F50E
    3198/    411E : F69B                		dc.w $F69B
    3199/    4120 : F82A                		dc.w $F82A
    3200/    4122 : F9BA                		dc.w $F9BA
    3201/    4124 : FB4A                		dc.w $FB4A
    3202/    4126 : FCDC                		dc.w $FCDC
    3203/    4128 : FE6D                		dc.w $FE6D
    3204/    412A : 0000                		dc.w 0
    3205/    412C : 0192                		dc.w $192
    3206/    412E : 0323                		dc.w $323
    3207/    4130 : 04B5                		dc.w $4B5
    3208/    4132 : 0645                		dc.w $645
    3209/    4134 : 07D5                		dc.w $7D5
    3210/    4136 : 0964                		dc.w $964
    3211/    4138 : 0AF1                		dc.w $AF1
    3212/    413A : 0C7C                		dc.w $C7C
    3213/    413C : 0E05                		dc.w $E05
    3214/    413E : 0F8C                		dc.w $F8C
    3215/    4140 : 1111                		dc.w $1111
    3216/    4142 : 1294                		dc.w $1294
    3217/    4144 : 1413                		dc.w $1413
    3218/    4146 : 158F                		dc.w $158F
    3219/    4148 : 1708                		dc.w $1708
    3220/    414A : 187D                		dc.w $187D
    3221/    414C : 19EF                		dc.w $19EF
    3222/    414E : 1B5D                		dc.w $1B5D
    3223/    4150 : 1CC6                		dc.w $1CC6
    3224/    4152 : 1E2B                		dc.w $1E2B
    3225/    4154 : 1F8B                		dc.w $1F8B
    3226/    4156 : 20E7                		dc.w $20E7
    3227/    4158 : 223D                		dc.w $223D
    3228/    415A : 238E                		dc.w $238E
    3229/    415C : 24DA                		dc.w $24DA
    3230/    415E : 261F                		dc.w $261F
    3231/    4160 : 275F                		dc.w $275F
    3232/    4162 : 2899                		dc.w $2899
    3233/    4164 : 29CD                		dc.w $29CD
    3234/    4166 : 2AFA                		dc.w $2AFA
    3235/    4168 : 2C21                		dc.w $2C21
    3236/    416A : 2D41                		dc.w $2D41
    3237/    416C : 2E5A                		dc.w $2E5A
    3238/    416E : 2F6B                		dc.w $2F6B
    3239/    4170 : 3076                		dc.w $3076
    3240/    4172 : 3179                		dc.w $3179
    3241/    4174 : 3274                		dc.w $3274
    3242/    4176 : 3367                		dc.w $3367
    3243/    4178 : 3453                		dc.w $3453
    3244/    417A : 3536                		dc.w $3536
    3245/    417C : 3612                		dc.w $3612
    3246/    417E : 36E5                		dc.w $36E5
    3247/    4180 : 37AF                		dc.w $37AF
    3248/    4182 : 3871                		dc.w $3871
    3249/    4184 : 392A                		dc.w $392A
    3250/    4186 : 39DA                		dc.w $39DA
    3251/    4188 : 3A82                		dc.w $3A82
    3252/    418A : 3B20                		dc.w $3B20
    3253/    418C : 3BB6                		dc.w $3BB6
    3254/    418E : 3C42                		dc.w $3C42
    3255/    4190 : 3CC5                		dc.w $3CC5
    3256/    4192 : 3D3E                		dc.w $3D3E
    3257/    4194 : 3DAE                		dc.w $3DAE
    3258/    4196 : 3E14                		dc.w $3E14
    3259/    4198 : 3E71                		dc.w $3E71
    3260/    419A : 3EC5                		dc.w $3EC5
    3261/    419C : 3F0E                		dc.w $3F0E
    3262/    419E : 3F4E                		dc.w $3F4E
    3263/    41A0 : 3F84                		dc.w $3F84
    3264/    41A2 : 3FB1                		dc.w $3FB1
    3265/    41A4 : 3FD3                		dc.w $3FD3
    3266/    41A6 : 3FEC                		dc.w $3FEC
    3267/    41A8 : 3FFB                		dc.w $3FFB
    3268/    41AA :                     ; ===========================================================================
    3269/    41AA :                     
    3270/    41AA :                     sub_41AA:
    3271/    41AA : 48E7 7C00           		movem.l	d1-d5,-(sp)
    3272/    41AE : 9641                		sub.w	d1,d3
    3273/    41B0 : 6752                		beq.s	loc_4204
    3274/    41B2 : 5BC0                		smi	d0
    3275/    41B4 : 6A02                		bpl.s	loc_41B8
    3276/    41B6 : 4443                		neg.w	d3
    3277/    41B8 :                     
    3278/    41B8 :                     loc_41B8:
    3279/    41B8 : 9842                		sub.w	d2,d4
    3280/    41BA : 675A                		beq.s	loc_4216
    3281/    41BC : 5BC5                		smi	d5
    3282/    41BE : 6A02                		bpl.s	loc_41C2
    3283/    41C0 : 4444                		neg.w	d4
    3284/    41C2 :                     
    3285/    41C2 :                     loc_41C2:
    3286/    41C2 : 48C4                		ext.l	d4
    3287/    41C4 : E184                		asl.l	#8,d4
    3288/    41C6 : 88C3                		divu.w	d3,d4
    3289/    41C8 : 7200                		moveq	#0,d1
    3290/    41CA : 743F                		moveq	#$3F,d2
    3291/    41CC : 4845                		swap	d5
    3292/    41CE :                     
    3293/    41CE :                     loc_41CE:
    3294/    41CE : 3602                		move.w	d2,d3
    3295/    41D0 : D641                		add.w	d1,d3
    3296/    41D2 : E24B                		lsr.w	#1,d3
    3297/    41D4 : 3A03                		move.w	d3,d5
    3298/    41D6 : DA45                		add.w	d5,d5
    3299/    41D8 : B87B 5046           		cmp.w	word_4220(pc,d5.w),d4
    3300/    41DC : 6504                		bcs.s	loc_41E2
    3301/    41DE : 3203                		move.w	d3,d1
    3302/    41E0 : 3602                		move.w	d2,d3
    3303/    41E2 :                     
    3304/    41E2 :                     loc_41E2:
    3305/    41E2 : 3403                		move.w	d3,d2
    3306/    41E4 : 9641                		sub.w	d1,d3
    3307/    41E6 : 5343                		subq.w	#1,d3
    3308/    41E8 : 66E4                		bne.s	loc_41CE
    3309/    41EA : 4845                		swap	d5
    3310/    41EC : 0240 0080           		andi.w	#$80,d0
    3311/    41F0 : B105                		eor.b	d0,d5
    3312/    41F2 : 6A08                		bpl.s	loc_41FC
    3313/    41F4 : 9002                		sub.b	d2,d0
    3314/    41F6 : 4CDF 003E           		movem.l	(sp)+,d1-d5
    3315/    41FA : 4E75                		rts
    3316/    41FC :                     ; ---------------------------------------------------------------------------
    3317/    41FC :                     
    3318/    41FC :                     loc_41FC:
    3319/    41FC : D002                		add.b	d2,d0
    3320/    41FE : 4CDF 003E           		movem.l	(sp)+,d1-d5
    3321/    4202 : 4E75                		rts
    3322/    4204 :                     ; ---------------------------------------------------------------------------
    3323/    4204 :                     
    3324/    4204 :                     loc_4204:
    3325/    4204 : 9842                		sub.w	d2,d4
    3326/    4206 : 5BC0                		smi	d0
    3327/    4208 : 0240 0080           		andi.w	#$80,d0
    3328/    420C : 0640 0040           		addi.w	#$40,d0
    3329/    4210 : 4CDF 003E           		movem.l	(sp)+,d1-d5
    3330/    4214 : 4E75                		rts
    3331/    4216 :                     ; ---------------------------------------------------------------------------
    3332/    4216 :                     
    3333/    4216 :                     loc_4216:
    3334/    4216 : 0240 0080           		andi.w	#$80,d0
    3335/    421A : 4CDF 003E           		movem.l	(sp)+,d1-d5
    3336/    421E : 4E75                		rts
    3337/    4220 :                     ; End of function sub_41AA
    3338/    4220 :                     
    3339/    4220 :                     ; ---------------------------------------------------------------------------
    3340/    4220 : 0000                word_4220:	dc.w 0
    3341/    4222 : 0006                		dc.w 6
    3342/    4224 : 000D                		dc.w $D
    3343/    4226 : 0013                		dc.w $13
    3344/    4228 : 0019                		dc.w $19
    3345/    422A : 0020                		dc.w $20
    3346/    422C : 0026                		dc.w $26
    3347/    422E : 002C                		dc.w $2C
    3348/    4230 : 0033                		dc.w $33
    3349/    4232 : 0039                		dc.w $39
    3350/    4234 : 0040                		dc.w $40
    3351/    4236 : 0047                		dc.w $47
    3352/    4238 : 004E                		dc.w $4E
    3353/    423A : 0055                		dc.w $55
    3354/    423C : 005C                		dc.w $5C
    3355/    423E : 0063                		dc.w $63
    3356/    4240 : 006A                		dc.w $6A
    3357/    4242 : 0071                		dc.w $71
    3358/    4244 : 0079                		dc.w $79
    3359/    4246 : 0081                		dc.w $81
    3360/    4248 : 0089                		dc.w $89
    3361/    424A : 0091                		dc.w $91
    3362/    424C : 0099                		dc.w $99
    3363/    424E : 00A2                		dc.w $A2
    3364/    4250 : 00AB                		dc.w $AB
    3365/    4252 : 00B4                		dc.w $B4
    3366/    4254 : 00BE                		dc.w $BE
    3367/    4256 : 00C8                		dc.w $C8
    3368/    4258 : 00D2                		dc.w $D2
    3369/    425A : 00DD                		dc.w $DD
    3370/    425C : 00E8                		dc.w $E8
    3371/    425E : 00F4                		dc.w $F4
    3372/    4260 : 0100                		dc.w $100
    3373/    4262 : 010D                		dc.w $10D
    3374/    4264 : 011A                		dc.w $11A
    3375/    4266 : 0129                		dc.w $129
    3376/    4268 : 0138                		dc.w $138
    3377/    426A : 0148                		dc.w $148
    3378/    426C : 0159                		dc.w $159
    3379/    426E : 016B                		dc.w $16B
    3380/    4270 : 017F                		dc.w $17F
    3381/    4272 : 0194                		dc.w $194
    3382/    4274 : 01AB                		dc.w $1AB
    3383/    4276 : 01C4                		dc.w $1C4
    3384/    4278 : 01DF                		dc.w $1DF
    3385/    427A : 01FD                		dc.w $1FD
    3386/    427C : 021D                		dc.w $21D
    3387/    427E : 0242                		dc.w $242
    3388/    4280 : 026A                		dc.w $26A
    3389/    4282 : 0298                		dc.w $298
    3390/    4284 : 02CB                		dc.w $2CB
    3391/    4286 : 0307                		dc.w $307
    3392/    4288 : 034C                		dc.w $34C
    3393/    428A : 039D                		dc.w $39D
    3394/    428C : 03FE                		dc.w $3FE
    3395/    428E : 0474                		dc.w $474
    3396/    4290 : 0507                		dc.w $507
    3397/    4292 : 05C3                		dc.w $5C3
    3398/    4294 : 06BE                		dc.w $6BE
    3399/    4296 : 081C                		dc.w $81C
    3400/    4298 : 0A27                		dc.w $A27
    3401/    429A : 0D8F                		dc.w $D8F
    3402/    429C : 145B                		dc.w $145B
    3403/    429E : 28BC                		dc.w $28BC
    3404/    42A0 : 2200                word_42A0:	dc.w $2200
    3405/    42A2 : 7400                		dc.w $7400
    3406/    42A4 : 7600                		dc.w $7600
    3407/    42A6 : 780F                		dc.w $780F
    3408/    42A8 :                     ; ---------------------------------------------------------------------------
    3409/    42A8 :                     
    3410/    42A8 :                     loc_42A8:
    3411/    42A8 : D040                		add.w	d0,d0
    3412/    42AA : D281                		add.l	d1,d1
    3413/    42AC : D783                		addx.l	d3,d3
    3414/    42AE : D281                		add.l	d1,d1
    3415/    42B0 : D783                		addx.l	d3,d3
    3416/    42B2 : D482                		add.l	d2,d2
    3417/    42B4 : 5282                		addq.l	#1,d2
    3418/    42B6 : B682                		cmp.l	d2,d3
    3419/    42B8 : 650C                		bcs.s	loc_42C6
    3420/    42BA : 5240                		addq.w	#1,d0
    3421/    42BC : 9682                		sub.l	d2,d3
    3422/    42BE : 5282                		addq.l	#1,d2
    3423/    42C0 : 51CC FFE6           		dbf	d4,loc_42A8
    3424/    42C4 : 4E75                		rts
    3425/    42C6 :                     ; ---------------------------------------------------------------------------
    3426/    42C6 :                     
    3427/    42C6 :                     loc_42C6:
    3428/    42C6 : 5382                		subq.l	#1,d2
    3429/    42C8 : 51CC FFDE           		dbf	d4,loc_42A8
    3430/    42CC : 4E75                		rts
    3431/    42CE :                     
    3432/    42CE :                     ; =============== S U B	R O U T	I N E =======================================
    3433/    42CE :                     
    3434/    42CE :                     
    3435/    42CE :                     sub_42CE:
    3436/    42CE : 48E7 DC00           		movem.l	d0-d1/d3-d5,-(sp)
    3437/    42D2 : 3600                		move.w	d0,d3
    3438/    42D4 : 3801                		move.w	d1,d4
    3439/    42D6 : 7200                		moveq	#0,d1
    3440/    42D8 : 7400                		moveq	#0,d2
    3441/    42DA : 9641                		sub.w	d1,d3
    3442/    42DC : 6760                		beq.s	loc_433E
    3443/    42DE : 5BC0                		smi	d0
    3444/    42E0 : 6A02                		bpl.s	loc_42E4
    3445/    42E2 : 4443                		neg.w	d3
    3446/    42E4 :                     
    3447/    42E4 :                     loc_42E4:
    3448/    42E4 : 9842                		sub.w	d2,d4
    3449/    42E6 : 676E                		beq.s	loc_4356
    3450/    42E8 : 5BC5                		smi	d5
    3451/    42EA : 6A02                		bpl.s	loc_42EE
    3452/    42EC : 4444                		neg.w	d4
    3453/    42EE :                     
    3454/    42EE :                     loc_42EE:
    3455/    42EE : 48C4                		ext.l	d4
    3456/    42F0 : E184                		asl.l	#8,d4
    3457/    42F2 : 88C3                		divu.w	d3,d4
    3458/    42F4 : 7200                		moveq	#0,d1
    3459/    42F6 : 743F                		moveq	#$3F,d2
    3460/    42F8 : 4845                		swap	d5
    3461/    42FA :                     
    3462/    42FA :                     loc_42FA:
    3463/    42FA : 3602                		move.w	d2,d3
    3464/    42FC : D641                		add.w	d1,d3
    3465/    42FE : E24B                		lsr.w	#1,d3
    3466/    4300 : 3A03                		move.w	d3,d5
    3467/    4302 : DA45                		add.w	d5,d5
    3468/    4304 : B87B 5062           		cmp.w	word_4368(pc,d5.w),d4
    3469/    4308 : 6504                		bcs.s	loc_430E
    3470/    430A : 3203                		move.w	d3,d1
    3471/    430C : 3602                		move.w	d2,d3
    3472/    430E :                     
    3473/    430E :                     loc_430E:
    3474/    430E : 3403                		move.w	d3,d2
    3475/    4310 : 9641                		sub.w	d1,d3
    3476/    4312 : 5343                		subq.w	#1,d3
    3477/    4314 : 66E4                		bne.s	loc_42FA
    3478/    4316 : 4845                		swap	d5
    3479/    4318 : 0240 0080           		andi.w	#$80,d0
    3480/    431C : B105                		eor.b	d0,d5
    3481/    431E : 6A10                		bpl.s	loc_4330
    3482/    4320 : 9002                		sub.b	d2,d0
    3483/    4322 : 1400                		move.b	d0,d2
    3484/    4324 : 4CDF 003B           		movem.l	(sp)+,d0-d1/d3-d5
    3485/    4328 : 5002                		addq.b	#8,d2
    3486/    432A : 0202 00F0           		andi.b	#$F0,d2
    3487/    432E : 4E75                		rts
    3488/    4330 :                     ; ---------------------------------------------------------------------------
    3489/    4330 :                     
    3490/    4330 :                     loc_4330:
    3491/    4330 : D400                		add.b	d0,d2
    3492/    4332 : 4CDF 003B           		movem.l	(sp)+,d0-d1/d3-d5
    3493/    4336 : 5002                		addq.b	#8,d2
    3494/    4338 : 0202 00F0           		andi.b	#$F0,d2
    3495/    433C : 4E75                		rts
    3496/    433E :                     ; ---------------------------------------------------------------------------
    3497/    433E :                     
    3498/    433E :                     loc_433E:
    3499/    433E : 9842                		sub.w	d2,d4
    3500/    4340 : 5BC2                		smi	d2
    3501/    4342 : 0242 0080           		andi.w	#$80,d2
    3502/    4346 : 0642 0040           		addi.w	#$40,d2
    3503/    434A : 4CDF 003B           		movem.l	(sp)+,d0-d1/d3-d5
    3504/    434E : 5002                		addq.b	#8,d2
    3505/    4350 : 0202 00F0           		andi.b	#$F0,d2
    3506/    4354 : 4E75                		rts
    3507/    4356 :                     ; ---------------------------------------------------------------------------
    3508/    4356 :                     
    3509/    4356 :                     loc_4356:
    3510/    4356 : 0240 0080           		andi.w	#$80,d0
    3511/    435A : 1400                		move.b	d0,d2
    3512/    435C : 4CDF 003B           		movem.l	(sp)+,d0-d1/d3-d5
    3513/    4360 : 5002                		addq.b	#8,d2
    3514/    4362 : 0202 00F0           		andi.b	#$F0,d2
    3515/    4366 : 4E75                		rts
    3516/    4368 :                     ; End of function sub_42CE
    3517/    4368 :                     
    3518/    4368 :                     ; ---------------------------------------------------------------------------
    3519/    4368 : 0000                word_4368:	dc.w 0
    3520/    436A : 0006                		dc.w 6
    3521/    436C : 000D                		dc.w $D
    3522/    436E : 0013                		dc.w $13
    3523/    4370 : 0019                		dc.w $19
    3524/    4372 : 0020                		dc.w $20
    3525/    4374 : 0026                		dc.w $26
    3526/    4376 : 002C                		dc.w $2C
    3527/    4378 : 0033                		dc.w $33
    3528/    437A : 0039                		dc.w $39
    3529/    437C : 0040                		dc.w $40
    3530/    437E : 0047                		dc.w $47
    3531/    4380 : 004E                		dc.w $4E
    3532/    4382 : 0055                		dc.w $55
    3533/    4384 : 005C                		dc.w $5C
    3534/    4386 : 0063                		dc.w $63
    3535/    4388 : 006A                		dc.w $6A
    3536/    438A : 0071                		dc.w $71
    3537/    438C : 0079                		dc.w $79
    3538/    438E : 0081                		dc.w $81
    3539/    4390 : 0089                		dc.w $89
    3540/    4392 : 0091                		dc.w $91
    3541/    4394 : 0099                		dc.w $99
    3542/    4396 : 00A2                		dc.w $A2
    3543/    4398 : 00AB                		dc.w $AB
    3544/    439A : 00B4                		dc.w $B4
    3545/    439C : 00BE                		dc.w $BE
    3546/    439E : 00C8                		dc.w $C8
    3547/    43A0 : 00D2                		dc.w $D2
    3548/    43A2 : 00DD                		dc.w $DD
    3549/    43A4 : 00E8                		dc.w $E8
    3550/    43A6 : 00F4                		dc.w $F4
    3551/    43A8 : 0100                		dc.w $100
    3552/    43AA : 010D                		dc.w $10D
    3553/    43AC : 011A                		dc.w $11A
    3554/    43AE : 0129                		dc.w $129
    3555/    43B0 : 0138                		dc.w $138
    3556/    43B2 : 0148                		dc.w $148
    3557/    43B4 : 0159                		dc.w $159
    3558/    43B6 : 016B                		dc.w $16B
    3559/    43B8 : 017F                		dc.w $17F
    3560/    43BA : 0194                		dc.w $194
    3561/    43BC : 01AB                		dc.w $1AB
    3562/    43BE : 01C4                		dc.w $1C4
    3563/    43C0 : 01DF                		dc.w $1DF
    3564/    43C2 : 01FD                		dc.w $1FD
    3565/    43C4 : 021D                		dc.w $21D
    3566/    43C6 : 0242                		dc.w $242
    3567/    43C8 : 026A                		dc.w $26A
    3568/    43CA : 0298                		dc.w $298
    3569/    43CC : 02CB                		dc.w $2CB
    3570/    43CE : 0307                		dc.w $307
    3571/    43D0 : 034C                		dc.w $34C
    3572/    43D2 : 039D                		dc.w $39D
    3573/    43D4 : 03FE                		dc.w $3FE
    3574/    43D6 : 0474                		dc.w $474
    3575/    43D8 : 0507                		dc.w $507
    3576/    43DA : 05C3                		dc.w $5C3
    3577/    43DC : 06BE                		dc.w $6BE
    3578/    43DE : 081C                		dc.w $81C
    3579/    43E0 : 0A27                		dc.w $A27
    3580/    43E2 : 0D8F                		dc.w $D8F
    3581/    43E4 : 145B                		dc.w $145B
    3582/    43E6 : 28BC                		dc.w $28BC
    3583/    43E8 : 0000                		dc.w 0
    3584/    43EA : 0000                		dc.w 0
    3585/    43EC : 0000                		dc.w 0
    3586/    43EE : 008A                		dc.w $8A
    3587/    43F0 : 008D                		dc.w $8D
    3588/    43F2 : 0000                		dc.w 0
    3589/    43F4 : 0000                		dc.w 0
    3590/    43F6 : 0000                		dc.w 0
    3591/    43F8 : 0000                		dc.w 0
    3592/    43FA : 0000                		dc.w 0
    3593/    43FC : 0000                		dc.w 0
    3594/    43FE : 008A                		dc.w $8A
    3595/    4400 : 008D                		dc.w $8D
    3596/    4402 : 0000                		dc.w 0
    3597/    4404 : 0000                		dc.w 0
    3598/    4406 : 0000                		dc.w 0
    3599/    4408 : 0000                		dc.w 0
    3600/    440A : 0000                		dc.w 0
    3601/    440C : 0000                		dc.w 0
    3602/    440E : 008B                		dc.w $8B
    3603/    4410 : 008E                		dc.w $8E
    3604/    4412 : 0000                		dc.w 0
    3605/    4414 : 0000                		dc.w 0
    3606/    4416 : 0000                		dc.w 0
    3607/    4418 : 0000                		dc.w 0
    3608/    441A : 0000                		dc.w 0
    3609/    441C : 0000                		dc.w 0
    3610/    441E : 487F                		dc.w $487F
    3611/    4420 : 3E34                		dc.w $3E34
    3612/    4422 : 023F                		dc.w $23F
    3613/    4424 : BFE5                		dc.w $BFE5
    3614/    4426 : 7292                		dc.w $7292
    3615/    4428 : 74E3                		dc.w $74E3
    3616/    442A : 531A                		dc.w $531A
    3617/    442C : 7CDA                		dc.w $7CDA
    3618/    442E : 6500                		dc.w $6500
    3619/    4430 : 1251                		dc.w $1251
    3620/    4432 : FF51                		dc.w $FF51
    3621/    4434 : FF4C                		dc.w $FF4C
    3622/    4436 : 044E                		dc.w $44E
    3623/    4438 : 7616                		dc.w $7616
    3624/    443A : 38E2                		dc.w $38E2
    3625/    443C : C844                		dc.w $C844
    3626/    443E : 4530                		dc.w $4530
    3627/    4440 : 5212                		dc.w $5212
    3628/    4442 : 51FF                		dc.w $51FF
    3629/    4444 : 51FF                		dc.w $51FF
    3630/    4446 : 51FF                		dc.w $51FF
    3631/    4448 : 4C04                		dc.w $4C04
    3632/    444A : 4E48                		dc.w $4E48
    3633/    444C : 4102                		dc.w $4102
    3634/    444E : 21C8                		dc.w $21C8
    3635/    4450 : 4C01                		dc.w $4C01
    3636/    4452 : 4101                		dc.w $4101
    3637/    4454 : 4E08                		dc.w $4E08
    3638/    4456 : 1000                		dc.w $1000
    3639/    4458 : 4AD8                		dc.w $4AD8
    3640/    445A : 6730                		dc.w $6730
    3641/    445C : D802                		dc.w $D802
    3642/    445E : 0006                		dc.w 6
    3643/    4460 : 004E                		dc.w $4E
    3644/    4462 : 0064                		dc.w $64
    3645/    4464 : 4300                		dc.w $4300
    3646/    4466 : 41D3                		dc.w $41D3
    3647/    4468 : 7220                		dc.w $7220
    3648/    446A : 51FF                		dc.w $51FF
    3649/    446C : 3000                		dc.w $3000
    3650/    446E : 616B                		dc.w $616B
    3651/    4470 : 6171                		dc.w $6171
    3652/    4472 : 0281                		dc.w $281
    3653/    4474 : C933                		dc.w $C933
    3654/    4476 : C900                		dc.w $C900
    3655/    4478 : 0042                		dc.w $42
    3656/    447A : D84E                		dc.w $D84E
    3657/    447C : 0095                		dc.w $95
    3658/    447E : 6103                		dc.w $6103
    3659/    4480 : 4E00                		dc.w $4E00
    3660/    4482 : F14E                		dc.w $F14E
    3661/    4484 : 1531                		dc.w $1531
    3662/    4486 : 00D8                		dc.w $D8
    3663/    4488 : 3100                		dc.w $3100
    3664/    448A : D831                		dc.w $D831
    3665/    448C : 00D8                		dc.w $D8
    3666/    448E : 3100                		dc.w $3100
    3667/    4490 : D84E                		dc.w $D84E
    3668/    4492 : 00BE                		dc.w $BE
    3669/    4494 : 4E00                		dc.w $4E00
    3670/    4496 : D14E                		dc.w $D14E
    3671/    4498 : 00EF                		dc.w $EF
    3672/    449A : 4E00                		dc.w $4E00
    3673/    449C : 8C46                		dc.w $8C46
    3674/    449E : 234E                		dc.w $234E
    3675/    44A0 : 008C                		dc.w $8C
    3676/    44A2 : 4E00                		dc.w $4E00
    3677/    44A4 : ED4A                		dc.w $ED4A
    3678/    44A6 : D866                		dc.w $D866
    3679/    44A8 : 42D8                		dc.w $42D8
    3680/    44AA : 42D8                		dc.w $42D8
    3681/    44AC : 42C9                		dc.w $42C9
    3682/    44AE : 42C9                		dc.w $42C9
    3683/    44B0 : 42CA                		dc.w $42CA
    3684/    44B2 : 42CA                		dc.w $42CA
    3685/    44B4 : 616C                		dc.w $616C
    3686/    44B6 : 0081                		dc.w $81
    3687/    44B8 : C933                		dc.w $C933
    3688/    44BA : C900                		dc.w $C900
    3689/    44BC : 0061                		dc.w $61
    3690/    44BE : 6B4E                		dc.w $6B4E
    3691/    44C0 : 00F9                		dc.w $F9
    3692/    44C2 : 6000                		dc.w $6000
    3693/    44C4 :                     PAL_Unknown_1:	binclude	"Palettes/PalUnknown01.bin"
    3694/    44E4 : (MACRO)              		even
    3694/    44E4 : =>TRUE                       if notZ80(MOMCPU)
    3694/    44E4 : =>FALSE                              if (*)&1
    3694/    44E4 :                                             dc.b 0                          ;ds.b 1
    3694/    44E4 : [3694]                               endif
    3694/    44E4 : =>FALSE                      else
    3694/    44E4 :                                     if ($)&1
    3694/    44E4 :                                             db 0
    3694/    44E4 : [3694]                               endif
    3694/    44E4 : [3694]                       endif
    3695/    44E4 : 8283 8485 8D90      		dc.b $82, $83, $84, $85, $8D, $90, $87,	$8B, $8C, $91, $92, 0, $48, 0, $89, 8
             44EA : 878B 8C91 9200 
             44F0 : 4800 8908          
    3696/    44F4 : 00FF 4AFF 6A61      		dc.b 0,	$FF, $4A, $FF, $6A, $61, $69, $4E, 0, $8A, $4E,	0, $8B,	$4E, 0,	$CC
             44FA : 694E 008A 4E00 
             4500 : 8B4E 00CC          
    3697/    4504 : 4E00 A14E 0095      		dc.b $4E, 0, $A1, $4E, 0, $95, $4E, 0, $F1, $4E, 0, $D2, $4E, 0, $EB, $4E
             450A : 4E00 F14E 00D2 
             4510 : 4E00 EB4E          
    3698/    4514 : 00F9 4627 4E16      		dc.b 0,	$F9, $46, $27, $4E, $16, $46, $23, $4E,	$4E, 9,	$47, $C9, $72, $12, $D8
             451A : 4623 4E4E 0947 
             4520 : C972 12D8          
    3699/    4524 : 70C0 1056 1010      		dc.b $70, $C0, $10, $56, $10, $10, $12,	2, 0, $56, $82,	2, 0, $80, $49,	$FB
             452A : 1202 0056 8202 
             4530 : 0080 49FB          
    3700/    4534 : 12FF 0200 1410      		dc.b $12, $FF, 2, 0, $14, $10, $19, $10, $52, $FF, $19,	$FF, $49, $D8, $61, 0
             453A : 1910 52FF 19FF 
             4540 : 49D8 6100          
    3701/    4544 : 10FA 47C9 7212      		dc.b $10, $FA, $47, $C9, $72, $12, $D8,	$6B, $70, $C0, $10, $56, $10, $10, $12,	2
             454A : D86B 70C0 1056 
             4550 : 1010 1202          
    3702/    4554 : 0056 8202 0080      		dc.b 0,	$56, $82, 2, 0,	$80, $49, $D8, $60, 0, $19, 0, 0, $19, 0, $12
             455A : 49D8 6000 1900 
             4560 : 0019 0012          
    3703/    4564 : 00B1 6742 0052      		dc.b 0,	$B1, $67, $42, 0, $52, 0, $C2, $19, 0, 2, 0, $19, 0, 0,	$72
             456A : 00C2 1900 0200 
             4570 : 1900 0072          
    3704/    4574 : C2E2 4834 4884      		dc.b $C2, $E2, $48, $34, $48, $84, $39,	0, 2, 0, $E6, $48, $32,	$48, $82, $39
             457A : 3900 0200 E648 
             4580 : 3248 8239          
    3705/    4584 : 004E 0040 8060      		dc.b 0,	$4E, 0,	$40, $80, $60, 0, $20, $80, $60, $48, $FF, $4E,	0, $9F,	$4E
             458A : 0020 8060 48FF 
             4590 : 4E00 9F4E          
    3706/    4594 : 044E 044E 00C9      		dc.b 4,	$4E, 4,	$4E, 0,	$C9, $20, $FF, $D1, $32, $D8, $34, 1, $4E, 5, $47
             459A : 20FF D132 D834 
             45A0 : 014E 0547          
    3707/    45A4 : 000A 4900 0B4B      		dc.b 0,	$A, $49, 0, $B,	$4B, $C9, $4E, $14, $47, 0, $B,	$49, 0,	$C, $4B
             45AA : C94E 1447 000B 
             45B0 : 4900 0C4B          
    3708/    45B4 : CA4E 1400 00FF      		dc.b $CA, $4E, $14, 0, 0, $FF, $52, $F0, $4C, $7F, $4E,	$4A, $D8, $6A, 0, $10
             45BA : 52F0 4C7F 4E4A 
             45C0 : D86A 0010          
    3709/    45C4 : C902 000C 0066      		dc.b $C9, 2, 0,	$C, 0, $66, $46, $27, $91, $2E,	$20, $4E, $48, $FF, 8, 0
             45CA : 4627 912E 204E 
             45D0 : 48FF 0800          
    3710/    45D4 : FF4A FF6A 4E00      		dc.b $FF, $4A, $FF, $6A, $4E, 0, $8A, $30, $D8,	$32, $D8, $D0, $D0, $D2, $D2, $30
             45DA : 8A30 D832 D8D0 
             45E0 : D0D2 D230          
    3711/    45E4 : D8D1 00D3 0030      		dc.b $D8, $D1, 0, $D3, 0, $30, $D8, $D1, 0, $D3, 0, $4E, 0, $CC, $4E, 0
             45EA : D8D1 00D3 004E 
             45F0 : 00CC 4E00          
    3712/    45F4 : 954E 1661 674A      		dc.b $95, $4E, $16, $61, $67, $4A, $C9,	$6A, $4C, $7F, $4E, $70, $30, $D8, 2, 0
             45FA : C96A 4C7F 4E70 
             4600 : 30D8 0200          
    3713/    4604 : E520 0043 0034      		dc.b $E5, $20, 0, $43, 0, $34, $36, $4E, $3F, 7, 7, $F,	0, $23,	0, $23
             460A : 364E 3F07 070F 
             4610 : 0023 0023          
    3714/    4614 : 0023 0023 4AD8      		dc.b 0,	$23, 0,	$23, $4A, $D8, $67, $46, $27, $41, 0, $1B, $23,	$40, 0,	0
             461A : 6746 2741 001B 
             4620 : 2340 0000          
    3715/    4624 : 004E 0D46 2741      		dc.b 0,	$4E, $D, $46, $27, $41,	0, $22,	$23, $7E, 0, 0,	0, $4E,	$D, $46
             462A : 0022 237E 0000 
             4630 : 004E 0D46          
    3716/    4634 : 2741 001F 2377      		dc.b $27, $41, 0, $1F, $23, $77, 0, 0, 0, $4E, $D, $4E,	$43, 0,	$8C, $70
             463A : 0000 004E 0D4E 
             4640 : 4300 8C70          
    3717/    4644 : 300C FF67 48FF      		dc.b $30, $C, $FF, $67,	$48, $FF, $20, $E5, $E4, 0, $40, $48, 2, 0, $46, $27
             464A : 20E5 E400 4048 
             4650 : 0200 4627          
    3718/    4654 : 2300 004E 0D4C      		dc.b $23, 0, 0,	$4E, $D, $4C, $7F, $60,	$4E, $80, 0, $1B, $7E, 0, $22, $77
             465A : 7F60 4E80 001B 
             4660 : 7E00 2277          
    3719/    4664 : 001F FF72 32D8      		dc.b 0,	$1F, $FF, $72, $32, $D8, 2, 0, $E3, $4E, $10, $60, $60,	$4E, $70, $30
             466A : 0200 E34E 1060 
             4670 : 604E 7030          
    3720/    4674 : D802 00ED 4300      		dc.b $D8, 2, 0,	$ED, $43, 0, $8D, $D3, $41, $D4, $1E, 0, $30, $51, $FF,	$4E
             467A : 8DD3 41D4 1E00 
             4680 : 3051 FF4E          
    3721/    4684 :                     PAL_Unknown_2:	binclude	"Palettes/PalUnknown02.bin"
    3722/    4704 : (MACRO)              		even
    3722/    4704 : =>TRUE                       if notZ80(MOMCPU)
    3722/    4704 : =>FALSE                              if (*)&1
    3722/    4704 :                                             dc.b 0                          ;ds.b 1
    3722/    4704 : [3722]                               endif
    3722/    4704 : =>FALSE                      else
    3722/    4704 :                                     if ($)&1
    3722/    4704 :                                             db 0
    3722/    4704 : [3722]                               endif
    3722/    4704 : [3722]                       endif
    3723/    4704 : 4E4E 30D8 4E00      		dc.b $4E, $4E, $30, $D8, $4E, 0, $60, 0, $60, 0, $48, $41, 2, $21, $C8,	$4C
             470A : 6000 6000 4841 
             4710 : 0221 C84C          
    3724/    4714 : 0146 2770 7274      		dc.b 1,	$46, $27, $70, $72, $74, $36, $C0, $4E,	8, $41,	2, $23,	$4C, 0,	0
             471A : 36C0 4E08 4102 
             4720 : 234C 0000          
    3725/    4724 : 004E 0D20 4200      		dc.b 0,	$4E, $D, $20, $42, 0, $43, 2, $72, $74,	$36, 0,	$4E, 8,	$23, $78
             472A : 4302 7274 3600 
             4730 : 4E08 2378          
    3726/    4734 : 0000 0023 0100      		dc.b 0,	0, 0, $23, 1, 0, 0, 0, $23, 0, 0, 0, 0,	$23, 0,	$F
             473A : 0000 2300 0000 
             4740 : 0023 000F          
    3727/    4744 : 0000 2300 0100      		dc.b 0,	0, $23,	0, 1, 0, 0, $31, 0, $D8, $31, 0, $D8, $21, 0, $E
             474A : 0031 00D8 3100 
             4750 : D821 000E          
    3728/    4754 : D321 000E D44E      		dc.b $D3, $21, 0, $E, $D4, $4E,	4, $46,	$23, $58, $D8, $4E, 8, 0, $FF, $4A
             475A : 0446 2358 D84E 
             4760 : 0800 FF4A          
    3729/    4764 : FF6A 30C9 D0D8      		dc.b $FF, $6A, $30, $C9, $D0, $D8, $6A,	$70, $C, 0, $63, $70, $31, $D8,	$32, $EB
             476A : 6A70 0C00 6370 
             4770 : 31D8 32EB          
    3730/    4774 : 0400 31D8 4303      		dc.b 4,	0, $31,	$D8, $43, 3, $E9, $D2, $20, $65, 0, $72, $74, $36, 0, $4E
             477A : E9D2 2065 0072 
             4780 : 7436 004E          
    3731/    4784 : 0832 D80C 0064      		dc.b 8,	$32, $D8, $C, 0, $64, $31, 1, $D8, $20,	$66, 0,	$43, 3,	$72, $74
             478A : 3101 D820 6600 
             4790 : 4303 7274          
    3732/    4794 : 3600 4E08 3100      		dc.b $36, 0, $4E, 8, $31, 0, $D8, $60, 0, $C, 0, $64, $70, $23,	$66, 0
             479A : D860 000C 0064 
             47A0 : 7023 6600          
    3733/    47A4 : 0000 3201 2300      		dc.b 0,	0, $32,	1, $23,	0, 0, $51, $FF,	$20, $6B, 0, $43, 4, $72, $74
             47AA : 0051 FF20 6B00 
             47B0 : 4304 7274          
    3734/    47B4 : 3600 4E08 206A      		dc.b $36, 0, $4E, 8, $20, $6A, 0, $72, $74, $36, 0, $4E, 8, $60, $70, $23
             47BA : 0072 7436 004E 
             47C0 : 0860 7023          
    3735/    47C4 : 6600 0000 3201      		dc.b $66, 0, 0,	0, $32,	1, $23,	0, 0, $51, $FF,	$20, $6B, 0, $43, 4
             47CA : 2300 0051 FF20 
             47D0 : 6B00 4304          
    3736/    47D4 : 7274 3600 4E08      		dc.b $72, $74, $36, 0, $4E, 8, $60, 0, 0, 0, 0,	0, 0, 0, 0, 0
             47DA : 6000 0000 0000 
             47E0 : 0000 0000          
    3737/    47E4 : 0032 D8D2 3210      		dc.b 0,	$32, $D8, $D2, $32, $10, $30, $C9, $44,	$D0, $D8, $6A, $70, $B0, $63, $30
             47EA : 30C9 44D0 D86A 
             47F0 : 70B0 6330          
    3738/    47F4 : 31D8 E944 0601      		dc.b $31, $D8, $E9, $44, 6, 1, $31, $D8, $4A, $C9, $6B,	$4E, $42, $D8, $C, 0
             47FA : 31D8 4AC9 6B4E 
             4800 : 42D8 0C00          
    3739/    4804 : D866 3100 D84E      		dc.b $D8, $66, $31, 0, $D8, $4E, $4A, $D8, $66,	$31, 0,	$D8, $4E, $30, $D8, 2
             480A : 4AD8 6631 00D8 
             4810 : 4E30 D802          
    3740/    4814 : 0031 D831 00D8      		dc.b 0,	$31, $D8, $31, 0, $D8, $31, 0, $D8, $4E, $48, $FF, $23,	$7C, 0,	0
             481A : 3100 D84E 48FF 
             4820 : 237C 0000          
    3741/    4824 : 0030 D844 3300      		dc.b 0,	$30, $D8, $44, $33, 0, 0, $23, $78, 0, 0, 0, $33, $D8, 0, 0
             482A : 0023 7800 0000 
             4830 : 33D8 0000          
    3742/    4834 : 4E09 10C9 6131      		dc.b $4E, 9, $10, $C9, $61, $31, $C9, $31, $C9,	$10, $C9, $61, $31, $C9, $31, $C9
             483A : C931 C910 C961 
             4840 : 31C9 31C9          
    3743/    4844 : 4E04 0000 FF4C      		dc.b $4E, 4, 0,	0, $FF,	$4C, $7F, $4E, $72, $C2, $E2, $48, $34,	$48, $84, 2
             484A : 7F4E 72C2 E248 
             4850 : 3448 8402          
    3744/    4854 : 00E6 4832 4882      		dc.b 0,	$E6, $48, $32, $48, $82, $4E, $80, $80,	$C, $D,	0, 5, $44, $72,	$FF
             485A : 4E80 800C 0D00 
             4860 : 0544 72FF          
    3745/    4864 : 56FF 0001 5DFE      		dc.b $56, $FF, 0, 1, $5D, $FE, $40, 0, $95, 0, $2A, $87, $EC, 0, $1B, $1D
             486A : 4000 9500 2A87 
             4870 : EC00 1B1D          
    3746/    4874 : BF00 0000 0000      		dc.b $BF, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
             487A : 0000 0000 0000 
             4880 : 0000 0000          
    3747/    4884 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             488A : 0000 0000 0000 
             4890 : 0000 0000          
    3748/    4894 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             489A : 0000 0000 0000 
             48A0 : 0000 0000          
    3749/    48A4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             48AA : 0000 0000 0000 
             48B0 : 0000 0000          
    3750/    48B4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             48BA : 0000 0000 0000 
             48C0 : 0000 0000          
    3751/    48C4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             48CA : 0000 0000 0000 
             48D0 : 0000 0000          
    3752/    48D4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             48DA : 0000 0000 0000 
             48E0 : 0000 0000          
    3753/    48E4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             48EA : 0000 0000 0000 
             48F0 : 0000 0000          
    3754/    48F4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             48FA : 0000 0000 0000 
             4900 : 0000 0000          
    3755/    4904 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             490A : 0000 0000 0000 
             4910 : 0000 0000          
    3756/    4914 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             491A : 0000 0000 0000 
             4920 : 0000 0000          
    3757/    4924 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             492A : 0000 0000 0000 
             4930 : 0000 0000          
    3758/    4934 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             493A : 0000 0000 0000 
             4940 : 0000 0000          
    3759/    4944 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             494A : 0000 0000 0000 
             4950 : 0000 0000          
    3760/    4954 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             495A : 0000 0000 0000 
             4960 : 0000 0000          
    3761/    4964 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             496A : 0000 0000 0000 
             4970 : 0000 0000          
    3762/    4974 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             497A : 0000 0000 0000 
             4980 : 0000 0000          
    3763/    4984 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             498A : 0000 0000 0000 
             4990 : 0000 0000          
    3764/    4994 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             499A : 0000 0000 0000 
             49A0 : 0000 0000          
    3765/    49A4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             49AA : 0000 0000 0000 
             49B0 : 0000 0000          
    3766/    49B4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             49BA : 0000 0000 0000 
             49C0 : 0000 0000          
    3767/    49C4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             49CA : 0000 0000 0000 
             49D0 : 0000 0000          
    3768/    49D4 : 0000 0000 0000      		dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0
             49DA : 0000 0000 0000 
             49E0 : 0000 0000          
    3769/    49E4 : 004E 30D8 4E00      		dc.b 0,	$4E, $30, $D8, $4E, 0, $60, 0, $60, 0, $48, $41, 0, $21, $C8, $4C
             49EA : 6000 6000 4841 
             49F0 : 0021 C84C          
    3770/    49F4 : 0146 2770 7274      		dc.b 1,	$46, $27, $70, $72, $74, $36, $C0, $4E,	8, $20,	$44, 0,	$43, 0,	$72
             49FA : 36C0 4E08 2044 
             4A00 : 0043 0072          
    3771/    4A04 : 7436 004E 0823      		dc.b $74, $36, 0, $4E, 8, $23, $78, 0, 0, 0, $23, 0, 0,	0, 0, $23
             4A0A : 7800 0000 2300 
             4A10 : 0000 0023          
    3772/    4A14 : 0000 0000 3100      		dc.b 0,	0, 0, 0, $31, 0, $D8, $46, $23,	$58, $D8, $4E, 0, 0, 0,	0
             4A1A : D846 2358 D84E 
             4A20 : 0000 0000          
    3773/    4A24 : 0000 0800 FF4A      		dc.b 0,	0, 8, 0, $FF, $4A, $FF,	$6A, $30, $C9, $D1, $D8, $30, $C9, $E9,	$D1
             4A2A : FF6A 30C9 D1D8 
             4A30 : 30C9 E9D1          
    3774/    4A34 : D846 2730 D832      		dc.b $D8, $46, $27, $30, $D8, $32, $D8,	6, 8, $4E, 0, $50, $46,	$23, $10, $C9
             4A3A : D806 084E 0050 
             4A40 : 4623 10C9          
    3775/    4A44 : 6A10 004E 0064      		dc.b $6A, $10, 0, $4E, 0, $64, $31, 0, $D8, $42, $D8, $4E, 2, 0, $66, $4E
             4A4A : 3100 D842 D84E 
             4A50 : 0200 664E          
    3776/    4A54 : 30D8 4E00 644E      		dc.b $30, $D8, $4E, 0, $64, $4E, $48, $FF, $23,	$78, 0,	0, 0, $33, $D8,	0
             4A5A : 48FF 2378 0000 
             4A60 : 0033 D800          
    3777/    4A64 : 004E 0910 C961      		dc.b 0,	$4E, 9,	$10, $C9, $61, $31, $C9, $31, $C9, $10,	$C9, $61, $31, $C9, $31
             4A6A : 31C9 31C9 10C9 
             4A70 : 6131 C931          
    3778/    4A74 : C900 00FF 4C7F      		dc.b $C9, 0, 0,	$FF, $4C, $7F, $4E, $72, $C2, $E2, $48,	$34, $48, $84, 2, 0
             4A7A : 4E72 C2E2 4834 
             4A80 : 4884 0200          
    3779/    4A84 : E648 3248 824E      		dc.b $E6, $48, $32, $48, $82, $4E, $30,	$D8, $E7, $D0, $D8, $D0, $D0, $4E, 0, $4E
             4A8A : 30D8 E7D0 D8D0 
             4A90 : D04E 004E          
    3780/    4A94 : 60FF 6001 6003      		dc.b $60, $FF, $60, 1, $60, 3, $60, 3, $60, 3, $60, 3, $60, $FF, $60, $FF
             4A9A : 6003 6003 6003 
             4AA0 : 60FF 60FF          
    3781/    4AA4 : 60FF 6003 6006      		dc.b $60, $FF, $60, 3, $60, 6, $60, 6, $60, 6, $60, 6, $60, $FF, $60, $FF
             4AAA : 6006 6006 6006 
             4AB0 : 60FF 60FF          
    3782/    4AB4 : 60FF 6006 6006      		dc.b $60, $FF, $60, 6, $60, 6, $60, 6, $60, 6, $60, 6, $60, $FF, $60, $FF
             4ABA : 6006 6006 6006 
             4AC0 : 60FF 60FF          
    3783/    4AC4 : 60FF 6006 6006      		dc.b $60, $FF, $60, 6, $60, 6, $60, 6, $60, 6, $60, 6, $60, $FF, $60, $FF
             4ACA : 6006 6006 6006 
             4AD0 : 60FF 60FF          
    3784/    4AD4 : 60FF 6006 6006      		dc.b $60, $FF, $60, 6, $60, 6, $60, 6, $60, 6, $60, 6, $60, $FF, $60, $FF
             4ADA : 6006 6006 6006 
             4AE0 : 60FF 60FF          
    3785/    4AE4 : 60FF 6006 6006      		dc.b $60, $FF, $60, 6, $60, 6, $60, 6, $60, 6, $60, 6, $60, $FF, $60, $FF
             4AEA : 6006 6006 6006 
             4AF0 : 60FF 60FF          
    3786/    4AF4 : 60FF 6006 6006      		dc.b $60, $FF, $60, 6, $60, 6, $60, 6, $60, 6, $60, 6, $60, $FF, $60, $FF
             4AFA : 6006 6006 6006 
             4B00 : 60FF 60FF          
    3787/    4B04 : 60FF 6006 60FF      		dc.b $60, $FF, $60, 6, $60, $FF, $60, $FF, $60,	$FF, $60, $FF, $60, $FF, $60, $FF
             4B0A : 60FF 60FF 60FF 
             4B10 : 60FF 60FF          
    3788/    4B14 : 60FE 6005 60FE      		dc.b $60, $FE, $60, 5, $60, $FE, $60, $FE, $60,	$FE, $60, $FE, $60, $FE, $60, $FE
             4B1A : 60FE 60FE 60FE 
             4B20 : 60FE 60FE          
    3789/    4B24 : 60FE 6005 60FE      		dc.b $60, $FE, $60, 5, $60, $FE, $60, $FE, $60,	$FE, $60, $FE, $60, $FE, $60, $FE
             4B2A : 60FE 60FE 60FE 
             4B30 : 60FE 60FE          
    3790/    4B34 : 30D8 4E00 6000      		dc.b $30, $D8, $4E, 0, $60, 0, $60, 0, $60, 0, $46, $27, $43, $C9, $33,	1
             4B3A : 6000 6000 4627 
             4B40 : 43C9 3301          
    3791/    4B44 : 0041 0545 D461      		dc.b 0,	$41, 5,	$45, $D4, $61, 7, $41, 5, $45, $D8, $61, 7, $20, $45, 5
             4B4A : 0741 0545 D861 
             4B50 : 0720 4505          
    3792/    4B54 : 6106 41C9 2100      		dc.b $61, 6, $41, $C9, $21, 0, $D, 0, $45, 5, $61, 6, $21, $CA,	$61, 6
             4B5A : 0D00 4505 6106 
             4B60 : 21CA 6106          
    3793/    4B64 : 4105 43CA 3301      		dc.b $41, 5, $43, $CA, $33, 1, 0, $45, $D8, $61, 7, $20, $45, 5, $61, 6
             4B6A : 0045 D861 0720 
             4B70 : 4505 6106          
    3794/    4B74 : 21FB 2247 000B      		dc.b $21, $FB, $22, $47, 0, $B,	$49, 0,	$C, $42, 0, $A,	$42, 0,	$B, $42
             4B7A : 4900 0C42 000A 
             4B80 : 4200 0B42          
    3795/    4B84 : 000B 4200 0C61      		dc.b 0,	$B, $42, 0, $C,	$61, 6,	$46, $23, $58, $D8, $4E, $4E, 0, $F5, $58
             4B8A : 0646 2358 D84E 
             4B90 : 4E00 F558          
    3796/    4B94 : D830 D843 C947      		dc.b $D8, $30, $D8, $43, $C9, $47, 0, $A, $49, 0, $B, $61, 7, $61, 7, $61
             4B9A : 000A 4900 0B61 
             4BA0 : 0761 0761          
    3797/    4BA4 : 0630 D843 CA47      		dc.b 6,	$30, $D8, $43, $CA, $47, 0, $B,	$49, 0,	$C, $61, $61, 6, $4E, $30
             4BAA : 000B 4900 0C61 
             4BB0 : 6106 4E30          
    3798/    4BB4 : 0033 0032 D892      		dc.b 0,	$33, 0,	$32, $D8, $92, $6D, $C,	0, $6F,	$32, 0,	$60, $C, $FF, $6E
             4BBA : 6D0C 006F 3200 
             4BC0 : 600C FF6E          
    3799/    4BC4 : 32FF D032 3400      		dc.b $32, $FF, $D0, $32, $34, 0, 6, 1, $C2, $33, 0, $32, 0, $B0, $6E, $32
             4BCA : 0601 C233 0032 
             4BD0 : 00B0 6E32          
    3800/    4BD4 : 00B0 6E33 004E      		dc.b 0,	$B0, $6E, $33, 0, $4E, $30, 0, $33, 0, $32, 0, 4, 0, $C2, 0
             4BDA : 3000 3300 3200 
             4BE0 : 0400 C200          
    3801/    4BE4 : 4882 0033 0030      		dc.b $48, $82, 0, $33, 0, $30, 0, $B2, $6E, $30, 0, $B2, $6E, $33, 0, $4E
             4BEA : 00B2 6E30 00B2 
             4BF0 : 6E33 004E          
    3802/    4BF4 : 45CA 42FB 36C9      		dc.b $45, $CA, $42, $FB, $36, $C9, $44,	$56, $FB, $34, $FB, $3E, 0, $30, 0, $32
             4BFA : 4456 FB34 FB3E 
             4C00 : 0030 0032          
    3803/    4C04 : 0200 664E 3F34      		dc.b 2,	0, $66,	$4E, $3F, $34, $E0, $48, $44, $34, $34,	$44, $34, 6, 0,	$10
             4C0A : E048 4434 3444 
             4C10 : 3406 0010          
    3804/    4C14 : FB94 FB51 FF20      		dc.b $FB, $94, $FB, $51, $FF, $20, $FF,	$CA, $32, $D8, $34, 1, $4E, 5, $4E, $4E
             4C1A : FFCA 32D8 3401 
             4C20 : 4E05 4E4E          
    3805/    4C24 : 3F34 E048 3434      		dc.b $3F, $34, $E0, $48, $34, $34, $44,	$34, 6,	0, $10,	$FB, $94, $FB, $51, $FF
             4C2A : 4434 0600 10FB 
             4C30 : 94FB 51FF          
    3806/    4C34 : 20FF CA32 D834      		dc.b $20, $FF, $CA, $32, $D8, $34, 1, $4E, 5, $4E, $4E,	$4E, $4E, $4E, $30, $D8
             4C3A : 014E 054E 4E4E 
             4C40 : 4E4E 30D8          
    3807/    4C44 : 4E00 6000 6000      		dc.b $4E, 0, $60, 0, $60, 0, $60, 0, $46, $27, $43, $C9, $41, 4, $45, $D4
             4C4A : 6000 4627 43C9 
             4C50 : 4104 45D4          
    3808/    4C54 : 6105 4104 45D8      		dc.b $61, 5, $41, 4, $45, $D8, $61, 5, $20, $45, 3, $61, 4, $41, $C9, $21
             4C5A : 6105 2045 0361 
             4C60 : 0441 C921          
    3809/    4C64 : 000D 0045 0361      		dc.b 0,	$D, 0, $45, 3, $61, 4, $21, $CA, $61, 4, $41, 3, $43, $CA, $33
             4C6A : 0421 CA61 0441 
             4C70 : 0343 CA33          
    3810/    4C74 : 0100 45D8 6105      		dc.b 1,	0, $45,	$D8, $61, 5, $20, $45, 3, $61, 4, $21, $FB, $22, $47, 0
             4C7A : 2045 0361 0421 
             4C80 : FB22 4700          
    3811/    4C84 : 0B49 000C 6104      		dc.b $B, $49, 0, $C, $61, 4, $46, $23, $58, $D8, $4E, $4E, 0, $F5, $58,	$D8
             4C8A : 4623 58D8 4E4E 
             4C90 : 00F5 58D8          
    3812/    4C94 : 30D8 43C9 4700      		dc.b $30, $D8, $43, $C9, $47, 0, $A, $49, 0, $B, $61, 5, $61, 5, $61, 4
             4C9A : 0A49 000B 6105 
             4CA0 : 6105 6104          
    3813/    4CA4 : 30D8 43CA 4700      		dc.b $30, $D8, $43, $CA, $47, 0, $B, $49, 0, $C, $61, $61, 5, $4E, 0, $9D
             4CAA : 0B49 000C 6161 
             4CB0 : 054E 009D          
    3814/    4CB4 : 4E72 3000 3300      		dc.b $4E, $72, $30, 0, $33, 0, $32, $D8, $C2, 0, $82, 0, $33, 0, $30, 0
             4CBA : 32D8 C200 8200 
             4CC0 : 3300 3000          
    3815/    4CC4 : B26E 3000 B26E      		dc.b $B2, $6E, $30, 0, $B2, $6E, $33, 0, $4E, $70, $30,	$C9, $32, $C9, $34, $90
             4CCA : 3300 4E70 30C9 
             4CD0 : 32C9 3490          
    3816/    4CD4 : 6748 22E2 D1FB      		dc.b $67, $48, $22, $E2, $D1, $FB, $20,	$E4, $D1, $FB, $20, $E6, $D1, $FB, $20,	$E8
             4CDA : 20E4 D1FB 20E6 
             4CE0 : D1FB 20E8          
    3817/    4CE4 : D1FB 45CD 3200      		dc.b $D1, $FB, $45, $CD, $32, 0, 6, 0, $E4, 2, $FF, $47, $10, $7E, $34,	$28
             4CEA : 0600 E402 FF47 
             4CF0 : 107E 3428          
    3818/    4CF4 : 3451 FF4E FFFB      		dc.b $34, $51, $FF, $4E, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4CFA : FFFB FFFB FFFB 
             4D00 : FFFB FFFB          
    3819/    4D04 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D0A : FFFB FFFB FFFB 
             4D10 : FFFB FFFB          
    3820/    4D14 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D1A : FFFB FFFB FFFB 
             4D20 : FFFB FFFB          
    3821/    4D24 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D2A : FFFB FFFB FFFB 
             4D30 : FFFB FFFB          
    3822/    4D34 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D3A : FFFB FFFB FFFB 
             4D40 : FFFB FFFB          
    3823/    4D44 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D4A : FFFB FFFB FFFB 
             4D50 : FFFB FFFB          
    3824/    4D54 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D5A : FFFB FFFB FFFB 
             4D60 : FFFB FFFB          
    3825/    4D64 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D6A : FFFB FFFB FFFB 
             4D70 : FFFB FFFB          
    3826/    4D74 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D7A : FFFB FFFB FFFB 
             4D80 : FFFB FFFB          
    3827/    4D84 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D8A : FFFB FFFB FFFB 
             4D90 : FFFB FFFB          
    3828/    4D94 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4D9A : FFFB FFFB FFFB 
             4DA0 : FFFB FFFB          
    3829/    4DA4 : FFFB FFFB FFFB      		dc.b $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB, $FF, $FB, $FF, $FB, $FF, $FB, $FF,	$FB
             4DAA : FFFB FFFB FFFB 
             4DB0 : FFFB FFFB          
    3830/    4DB4 : FFFB FFFB 0C0D      		dc.b $FF, $FB, $FF, $FB, $C, $D, $C9, $64, $31,	1, $C9,	$60, $31, 1, $C9, $47
             4DBA : C964 3101 C960 
             4DC0 : 3101 C947          
    3831/    4DC4 : CA36 C944 38CA      		dc.b $CA, $36, $C9, $44, $38, $CA, $44,	$7E, $34, $CA, $52, $31, $CA, $7C, $52,	$4E
             4DCA : 447E 34CA 5231 
             4DD0 : CA7C 524E          
    3832/    4DD4 : 3F02 00D0 3636      		dc.b $3F, 2, 0,	$D0, $36, $36, $51, $FF, $58, $4E, $3F,	2, 0, $D0, $36,	$36
             4DDA : 51FF 584E 3F02 
             4DE0 : 00D0 3636          
    3833/    4DE4 : 51FF 20FF CA32      		dc.b $51, $FF, $20, $FF, $CA, $32, $D8,	$34, 1,	$4E, 5,	$4E, $4E, $4E, $4E, $4E
             4DEA : D834 014E 054E 
             4DF0 : 4E4E 4E4E          
    3834/    4DF4 : 4E4E 4E4E 4E4E      		dc.b $4E, $4E, $4E, $4E, $4E, $4E, $4E,	$4E, $4E, $4E, $4E, $4E, $4E, $4E, $4E,	$4E
             4DFA : 4E4E 4E4E 4E4E 
             4E00 : 4E4E 4E4E          
    3835/    4E04 : 4E4E 4E4E 4E4E      		dc.b $4E, $4E, $4E, $4E, $4E, $4E, $4E,	$4E, $4E, $4E, $4E, $4E, 0, $E,	0, $9B
             4E0A : 4E4E 4E4E 4E4E 
             4E10 : 000E 009B          
    3836/    4E14 : 0000 8080 007E      		dc.b 0,	0, $80,	$80, 0,	$7E, 0,	5, 0, 0, $45, 0, $57, 0, $90, 0
             4E1A : 0005 0000 4500 
             4E20 : 5700 9000          
    3837/    4E24 : 9300 0004 0403      		dc.b $93, 0, 0,	4, 4, 3, 0, 0, 2, 0, 0,	$A5, 0,	$A6, 0,	$A7
             4E2A : 0000 0200 00A5 
             4E30 : 00A6 00A7          
    3838/    4E34 : 0802 0C08 0E02      		dc.b 8,	2, $C, 8, $E, 2, 0, $E,	0, $C, $E, 0, $E, 8, 0,	0
             4E3A : 000E 000C 0E00 
             4E40 : 0E08 0000          
    3839/    4E44 : 080E 0000 020E      		dc.b 8,	$E, 0, 0, 2, $E, $E, $C, $A, 4,	0, 0, 0, 0, 2, $A
             4E4A : 0E0C 0A04 0000 
             4E50 : 0000 020A          
    3840/    4E54 : 00A7 00F6 000D      		dc.b 0,	$A7, 0,	$F6, 0,	$D, $10, $10, 0, 6, 0, $F, 0, 0, $BB, 0
             4E5A : 1010 0006 000F 
             4E60 : 0000 BB00          
    3841/    4E64 : C600 ED00 EE00      		dc.b $C6, 0, $ED, 0, $EE, 0, $A, $10, $C, 1, 4,	0, $B, 0, 0, 9
             4E6A : 0A10 0C01 0400 
             4E70 : 0B00 0009          
    3842/    4E74 : 0010 0018 080E      		dc.b 0,	$10, 0,	$18, 8,	$E, $A,	6, $E, 8, 2, 6,	2, 2, 0, 0
             4E7A : 0A06 0E08 0206 
             4E80 : 0202 0000          
    3843/    4E84 : 0000 020E 080E      		dc.b 0,	0, 2, $E, 8, $E, $A, 6,	4, 2, 0, 0, $E,	$E, $E,	8
             4E8A : 0A06 0402 0000 
             4E90 : 0E0E 0E08          
    3844/    4E94 : 0800 0E00 2F20      		dc.b 8,	0, $E, 0, $2F, $20, $49, 0, 2, $4E, $D,	$20, $4E, $D, $20, $20
             4E9A : 4900 024E 0D20 
             4EA0 : 4E0D 2020          
    3845/    4EA4 : 0002 7232 00EB      		dc.b 0,	2, $72,	$32, 0,	$EB, $24, $94, $44, $E2, $4E, 5, $4E, $22, 0, $30
             4EAA : 2494 44E2 4E05 
             4EB0 : 4E22 0030          
    3846/    4EB4 : 002F 202F 4E10      		dc.b 0,	$2F, $20, $2F, $4E, $10, $24, $20, $21,	0, $2F,	$20, $70, $2F, $4E, $10
             4EBA : 2420 2100 2F20 
             4EC0 : 702F 4E10          
    3847/    4EC4 : 2420 2100 2F20      		dc.b $24, $20, $21, 0, $2F, $20, $70, $2F, $4E,	$10, $24, $20, $4E, $22, $45, 0
             4ECA : 702F 4E10 2420 
             4ED0 : 4E22 4500          
    3848/    4ED4 : 0270 2424 51FF      		dc.b 2,	$70, $24, $24, $51, $FF, $45, 0, 6, $70, $24, $24, $51,	$FF, $4E, $30
             4EDA : 4500 0670 2424 
             4EE0 : 51FF 4E30          
    3849/    4EE4 : 002A 7E48 FF20      		dc.b 0,	$2A, $7E, $48, $FF, $20, $30, 0, $32, 0, $38, 0, $4E, $12, $26,	$4E
             4EEA : 3000 3200 3800 
             4EF0 : 4E12 264E          
    3850/    4EF4 : 144C 7F06 0000      		dc.b $14, $4C, $7F, 6, 0, 0, $51, $FF, $33, 0, $4E, $2F, $30, 0, $32, 0
             4EFA : 51FF 3300 4E2F 
             4F00 : 3000 3200          
    3851/    4F04 : B302 FF67 B200      		dc.b $B3, 2, $FF, $67, $B2, 0, $6D, $30, 0, $32, 0, $26, $4E, $12, $60,	$30
             4F0A : 6D30 0032 0026 
             4F10 : 4E12 6030          
    3852/    4F14 : 0006 0232 0026      		dc.b 0,	6, 2, $32, 0, $26, $4E,	$12, $26, $30, 0, $32, 0, $B3, 2, $FF
             4F1A : 4E12 2630 0032 
             4F20 : 00B3 02FF          
    3853/    4F24 : 67B2 006D 3000      		dc.b $67, $B2, 0, $6D, $30, 0, $32, 0, $4E, $12, $30, 0, $32, 0, 6, 1
             4F2A : 3200 4E12 3000 
             4F30 : 3200 0601          
    3854/    4F34 : 4E12 4E4C 0048      		dc.b $4E, $12, $4E, $4C, 0, $48, 0, $D4, 0, $4C, 0, $48, 0, $4E, $70, $30
             4F3A : 00D4 004C 0048 
             4F40 : 004E 7030          
    3855/    4F44 : E5E4 0040 4802      		dc.b $E5, $E4, 0, $40, $48, 2, 0, $23, 0, $32, $33, 0, $33, 0, $32, $33
             4F4A : 0023 0032 3300 
             4F50 : 3300 3233          
    3856/    4F54 : 0033 0013 0013      		dc.b 0,	$33, 0,	$13, 0,	$13, 0,	$13, 0,	$13, 0,	$33, 0,	$33, 0,	$33
             4F5A : 0013 0013 0033 
             4F60 : 0033 0033          
    3857/    4F64 : 0033 0033 0070      		dc.b 0,	$33, 0,	$33, 0,	$70, $10, 0, $74, $D0, $55, $FF, $13, 0, $70, $10
             4F6A : 1000 74D0 55FF 
             4F70 : 1300 7010          
    3858/    4F74 : 0074 D055 FF13      		dc.b 0,	$74, $D0, $55, $FF, $13, 0, $4E, $30, 0, $33, 0, $32, $D8, $92,	$6D
             4F7A : 004E 3000 3300 
             4F80 : 32D8 926D          
    3859/    4F84 : 0C00 6F32 0060      		dc.b $C, 0, $6F, $32, 0, $60, $C, $FF, $6E, $32, $FF, $D0, $33,	0, $32,	0
             4F8A : 0CFF 6E32 FFD0 
             4F90 : 3300 3200          
    3860/    4F94 : B06E 3200 B06E      		dc.b $B0, $6E, $32, 0, $B0, $6E, $33, 0, $4E, $30, 0, $33, 0, $32, $D8,	$92
             4F9A : 3300 4E30 0033 
             4FA0 : 0032 D892          
    3861/    4FA4 : 6D0C 006F 3200      		dc.b $6D, $C, 0, $6F, $32, 0, $60, $C, $FF, $6E, $32, $FF, $D0,	$33, 0,	$32
             4FAA : 600C FF6E 32FF 
             4FB0 : D033 0032          
    3862/    4FB4 : 00B0 6E32 00B0      		dc.b 0,	$B0, $6E, $32, 0, $B0, $6E, $33, 0, $4E, $61, 0, $4E, $43, $C9,	$70
             4FBA : 6E33 004E 6100 
             4FC0 : 4E43 C970          
    3863/    4FC4 : 1000 4E00 6000      		dc.b $10, 0, $4E, 0, $60, 0, $60, 0, $60, 0, $60, 0, $60, 1, $60, 1
             4FCA : 6000 6000 6000 
             4FD0 : 6001 6001          
    3864/    4FD4 : 6001 1000 6733      		dc.b $60, 1, $10, 0, $67, $33, $8B, 0, 0, $31, $8B, $C9, $70, $23, $40,	0
             4FDA : 8B00 0031 8BC9 
             4FE0 : 7023 4000          
    3865/    4FE4 : 0000 2300 0072      		dc.b 0,	0, $23,	0, 0, $72, $32,	$D8, $E5, $E4, 0, $40, $48, 2, 0, $23
             4FEA : 32D8 E5E4 0040 
             4FF0 : 4802 0023          
    3866/    4FF4 : 0000 2300 0013      		dc.b 0,	0, $23,	0, 0, $13, 0, 0, $4E, $10, 0, $67
             4FFA : 0000 4E10 0067    
    3867/    5000 :                     
    3868/    5000 :                     ; ===========================================================================
    3869/    5000 :                     ; ---------------------------------------------------------------------------
    3870/    5000 :                     ; Main Game Program
    3871/    5000 :                     ; ---------------------------------------------------------------------------
    3872/    5000 :                     
    3873/    5000 :                     MAINPROG:
    3874/    5000 : 3038 D822           		move.w	(v_gamemode).w,d0
    3875/    5004 : 0240 0078           		andi.w	#$78,d0
    3876/    5008 : 4EBB 0004           		jsr	GameModeArray(pc,d0.w)		; run through correct mode routine
    3877/    500C : 60F2                		bra.s	MAINPROG			; loop
    3878/    500E :                     
    3879/    500E :                     ; ===========================================================================
    3880/    500E :                     ; ---------------------------------------------------------------------------
    3881/    500E :                     ; Main Game mode array
    3882/    500E :                     ; ---------------------------------------------------------------------------
    3883/    500E :                     
    3884/    500E :                     GameModeArray:
    3885/    500E : 4EF9 0000 6424      ptr_GM_Sega:	jmp	(SegaScreen).l			; SEGA screen (00)
    3886/    5014 : 4E71                		nop
    3887/    5016 :                     ; ---------------------------------------------------------------------------
    3888/    5016 : 4EF9 0000 7356      ptr_GM_Title:	jmp	(TitleScreen).l			; Title Screen (08)
    3889/    501C : 4E71                		nop
    3890/    501E :                     ; ---------------------------------------------------------------------------
    3891/    501E : 4EF9 0000 7E08      ptr_GM_Field:	jmp	(Fields).l			; Fields Screen (10)
    3892/    5024 : 4E71                		nop
    3893/    5026 :                     ; ---------------------------------------------------------------------------
    3894/    5026 : 4EF9 0000 8896      ptr_GM_Level:	jmp	(Levels).l			; Level Zones (18)
    3895/    502C : 4E71                		nop
    3896/    502E :                     ; ---------------------------------------------------------------------------
    3897/    502E : 4EF9 0000 8E08      ptr_GM_Null:	jmp	(UnkRet001).l			; Null (20)
    3898/    5034 : 4E71                		nop
    3899/    5036 :                     ; ---------------------------------------------------------------------------
    3900/    5036 : 4EF9 0000 8E0A      		jmp	(UnkRet002).l			; Null (28)
    3901/    503C : 4E71                		nop
    3902/    503E :                     ; ---------------------------------------------------------------------------
    3903/    503E :                     ptr_GM_LevelSelect:
    3904/    503E : 4EF9 0000 8E0C      		jmp	(LevelSelect).l			; Level Select (on Main Menu) (30)
    3905/    5044 : 4E71                		nop
    3906/    5046 :                     ; ---------------------------------------------------------------------------
    3907/    5046 : 4EF9 0000 93CA      		jmp	(UnkRet003).l			; Null (38)
    3908/    504C : 4E71                		nop
    3909/    504E :                     ; ---------------------------------------------------------------------------
    3910/    504E : 4EF9 0000 93CC      ptr_GM_Options:	jmp	(OptionSoundTest).l		; Options (Sound Test) (40)
    3911/    5054 : 4E71                		nop
    3912/    5056 :                     ; ---------------------------------------------------------------------------
    3913/    5056 : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (48)
    3914/    505C : 4E71                		nop
    3915/    505E :                     ; ---------------------------------------------------------------------------
    3916/    505E : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (50)
    3917/    5064 : 4E71                		nop
    3918/    5066 :                     ; ---------------------------------------------------------------------------
    3919/    5066 : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (58)
    3920/    506C : 4E71                		nop
    3921/    506E :                     ; ---------------------------------------------------------------------------
    3922/    506E : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (60)
    3923/    5074 : 4E71                		nop
    3924/    5076 :                     ; ---------------------------------------------------------------------------
    3925/    5076 : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (68)
    3926/    507C : 4E71                		nop
    3927/    507E :                     ; ---------------------------------------------------------------------------
    3928/    507E : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (70)
    3929/    5084 : 4E71                		nop
    3930/    5086 :                     ; ---------------------------------------------------------------------------
    3931/    5086 : 4EF9 0000 508E      		jmp	(GMAReturn).l			; Null (78)
    3932/    508C : 4E71                		nop
    3933/    508E :                     ; ---------------------------------------------------------------------------
    3934/    508E :                     
    3935/    508E :                     GMAReturn:
    3936/    508E : 4E75                		rts
    3937/    5090 :                     ; ---------------------------------------------------------------------------
    3938/    5090 :                     ; ===========================================================================
    3939/    5090 :                     ; ---------------------------------------------------------------------------
    3940/    5090 :                     ;
    3941/    5090 :                     ; ---------------------------------------------------------------------------
    3942/    5090 :                     
    3943/    5090 :                     sub_5090:
    3944/    5090 : 7600                		moveq	#0,d3
    3945/    5092 : 3601                		move.w	d1,d3
    3946/    5094 : E58B                		lsl.l	#2,d3
    3947/    5096 : E44B                		lsr.w	#2,d3
    3948/    5098 : 0043 4000           		ori.w	#$4000,d3
    3949/    509C : 4843                		swap	d3
    3950/    509E : 23C3 00C0 0004      		move.l	d3,(vdp_control_port).l
    3951/    50A4 : 3200                		move.w	d0,d1
    3952/    50A6 : E959                		rol.w	#4,d1
    3953/    50A8 : 610A                		bsr.s	sub_50B4
    3954/    50AA : E959                		rol.w	#4,d1
    3955/    50AC : 6106                		bsr.s	sub_50B4
    3956/    50AE : E959                		rol.w	#4,d1
    3957/    50B0 : 6102                		bsr.s	sub_50B4
    3958/    50B2 : E959                		rol.w	#4,d1
    3959/    50B4 :                     
    3960/    50B4 :                     sub_50B4:
    3961/    50B4 : 3401                		move.w	d1,d2
    3962/    50B6 : 0242 000F           		andi.w	#$F,d2
    3963/    50BA : 363C 0000           		move.w	#0,d3
    3964/    50BE : D63B 200A           		add.b	loc_50CA(pc,d2.w),d3
    3965/    50C2 : 33C3 00C0 0000      		move.w	d3,(vdp_data_port).l
    3966/    50C8 : 4E75                		rts
    3967/    50CA :                     ; ===========================================================================
    3968/    50CA :                     ; ---------------------------------------------------------------------------
    3969/    50CA :                     ;
    3970/    50CA :                     ; ---------------------------------------------------------------------------
    3971/    50CA :                     
    3972/    50CA :                     loc_50CA:
    3973/    50CA : 1011                		move.b	(a1),d0
    3974/    50CC : 1213                		move.b	(a3),d1
    3975/    50CE : 1415                		move.b	(a5),d2
    3976/    50D0 : 1617                		move.b	(sp),d3
    3977/    50D2 : 1819                		move.b	(a1)+,d4
    3978/    50D4 : 2122                		move.l	-(a2),-(a0)
    3979/    50D6 : 2324                		move.l	-(a4),-(a1)
    3980/    50D8 : 2526                		move.l	-(a6),-(a2)
    3981/    50DA : 48E7 3EC0           		movem.l	d2-d6/a0-a1,-(sp)
    3982/    50DE : 7600                		moveq	#0,d3
    3983/    50E0 : 3601                		move.w	d1,d3
    3984/    50E2 : E58B                		lsl.l	#2,d3
    3985/    50E4 : E44B                		lsr.w	#2,d3
    3986/    50E6 : 0043 4000           		ori.w	#$4000,d3
    3987/    50EA : 4843                		swap	d3
    3988/    50EC : 23C3 00C0 0004      		move.l	d3,(vdp_control_port).l
    3989/    50F2 : 0C40 FFFF           		cmpi.w	#$FFFF,d0
    3990/    50F6 : 6504                		bcs.s	loc_50FC
    3991/    50F8 : 303C FFFF           		move.w	#$FFFF,d0
    3992/    50FC :                     
    3993/    50FC :                     loc_50FC:
    3994/    50FC : 41FA 0054           		lea	loc_5152(pc),a0
    3995/    5100 : 7204                		moveq	#4,d1
    3996/    5102 : 383C 0000           		move.w	#0,d4
    3997/    5106 : 3A3C 0010           		move.w	#$10,d5
    3998/    510A : 7C00                		moveq	#0,d6
    3999/    510C : 43F9 00C0 0000      		lea	(vdp_data_port).l,a1
    4000/    5112 : 4A40                		tst.w	d0
    4001/    5114 : 672C                		beq.s	loc_5142
    4002/    5116 :                     
    4003/    5116 :                     loc_5116:
    4004/    5116 : 7400                		moveq	#0,d2
    4005/    5118 : 3618                		move.w	(a0)+,d3
    4006/    511A :                     
    4007/    511A :                     loc_511A:
    4008/    511A : 9043                		sub.w	d3,d0
    4009/    511C : 6504                		bcs.s	loc_5122
    4010/    511E : 5242                		addq.w	#1,d2
    4011/    5120 : 60F8                		bra.s	loc_511A
    4012/    5122 :                     ; ---------------------------------------------------------------------------
    4013/    5122 :                     
    4014/    5122 :                     loc_5122:
    4015/    5122 : D043                		add.w	d3,d0
    4016/    5124 : 4A06                		tst.b	d6
    4017/    5126 : 6608                		bne.s	loc_5130
    4018/    5128 : 4A42                		tst.w	d2
    4019/    512A : 670A                		beq.s	loc_5136
    4020/    512C : 1C3C 0001           		move.b	#1,d6
    4021/    5130 :                     
    4022/    5130 :                     loc_5130:
    4023/    5130 : D445                		add.w	d5,d2
    4024/    5132 : 3282                		move.w	d2,(a1)
    4025/    5134 : 6002                		bra.s	loc_5138
    4026/    5136 :                     ; ---------------------------------------------------------------------------
    4027/    5136 :                     
    4028/    5136 :                     loc_5136:
    4029/    5136 : 3284                		move.w	d4,(a1)
    4030/    5138 :                     
    4031/    5138 :                     loc_5138:
    4032/    5138 : 51C9 FFDC           		dbf	d1,loc_5116
    4033/    513C : 4CDF 037C           		movem.l	(sp)+,d2-d6/a0-a1
    4034/    5140 : 4E75                		rts
    4035/    5142 :                     ; ---------------------------------------------------------------------------
    4036/    5142 :                     
    4037/    5142 :                     loc_5142:
    4038/    5142 : 5341                		subq.w	#1,d1
    4039/    5144 :                     
    4040/    5144 :                     loc_5144:
    4041/    5144 : 3284                		move.w	d4,(a1)
    4042/    5146 : 51C9 FFFC           		dbf	d1,loc_5144
    4043/    514A : 3285                		move.w	d5,(a1)
    4044/    514C : 4CDF 037C           		movem.l	(sp)+,d2-d6/a0-a1
    4045/    5150 : 4E75                		rts
    4046/    5152 :                     ; ---------------------------------------------------------------------------
    4047/    5152 : 27                  loc_5152:	dc.b $27
    4048/    5153 : 10                  		dc.b $10
    4049/    5154 : 03                  		dc.b   3
    4050/    5155 : E8                  		dc.b $E8
    4051/    5156 : 00                  		dc.b   0
    4052/    5157 : 64                  		dc.b $64
    4053/    5158 : 00                  		dc.b   0
    4054/    5159 : 0A                  		dc.b  $A
    4055/    515A : 00                  		dc.b   0
    4056/    515B : 01                  		dc.b   1
    4057/    515C : 74                  		dc.b $74
    4058/    515D : 00                  		dc.b   0
    4059/    515E : 34                  		dc.b $34
    4060/    515F : 00                  		dc.b   0
    4061/    5160 : E5                  		dc.b $E5
    4062/    5161 : 8A                  		dc.b $8A
    4063/    5162 : E4                  		dc.b $E4
    4064/    5163 : 4A                  		dc.b $4A
    4065/    5164 : 00                  		dc.b   0
    4066/    5165 : 42                  		dc.b $42
    4067/    5166 : 40                  		dc.b $40
    4068/    5167 : 00                  		dc.b   0
    4069/    5168 : 48                  		dc.b $48
    4070/    5169 : 42                  		dc.b $42
    4071/    516A : 23                  		dc.b $23
    4072/    516B : C2                  		dc.b $C2
    4073/    516C : 00                  		dc.b   0
    4074/    516D : C0                  		dc.b $C0
    4075/    516E : 00                  		dc.b   0
    4076/    516F : 04                  		dc.b   4
    4077/    5170 : 70                  		dc.b $70
    4078/    5171 : 00                  		dc.b   0
    4079/    5172 :                     ; ===========================================================================
    4080/    5172 :                     ; ---------------------------------------------------------------------------
    4081/    5172 :                     ; Unknown subroutine
    4082/    5172 :                     ; ---------------------------------------------------------------------------
    4083/    5172 :                     
    4084/    5172 :                     UnknownRout002:
    4085/    5172 : 1018                		move.b	(a0)+,d0
    4086/    5174 : 6B12                		bmi.s	UR002Return
    4087/    5176 : 0440 0020           		subi.w	#$20,d0
    4088/    517A : 0640 0000           		addi.w	#0,d0
    4089/    517E : 8041                		or.w	d1,d0
    4090/    5180 : 33C0 00C0 0000      		move.w	d0,(vdp_data_port).l
    4091/    5186 : 60EA                		bra.s	UnknownRout002
    4092/    5188 :                     
    4093/    5188 :                     UR002Return:
    4094/    5188 : 4E75                		rts
    4095/    518A :                     
    4096/    518A :                     ; ===========================================================================
    4097/    518A :                     ; ---------------------------------------------------------------------------
    4098/    518A :                     ; subroutine to load the Z80
    4099/    518A :                     ; ---------------------------------------------------------------------------
    4100/    518A :                     
    4101/    518A :                     SoundDriverLoad:
    4102/    518A : (MACRO)              		disable_ints				; set the stack register (Stopping VBlank)
    4102/    518A : 46FC 2700                           move    #$2700,sr
    4103/    518E : (MACRO)              		stopZ80
    4103/    518E : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
             5194 : 1100             
    4104/    5196 : (MACRO)              		waitZ80
    4104/    5196 : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
             519C : 1100             
    4104/    519E : 66F6                                bne.s   .wait
    4105/    51A0 : (MACRO)              		resetZ80
    4105/    51A0 : 33FC 0100 00A1                      move.w  #$100,(z80_reset).l
             51A6 : 1200             
    4106/    51A8 : 41FA 0042           		lea	Z80_Driver(pc),a0		; load Z80 location on ROM to a0
    4107/    51AC : 43F9 00A0 0000      		lea	(z80_ram).l,a1			; load current Z80 RAM
    4108/    51B2 : 303C 1215           		move.w	#(Z80_Driver_end-Z80_Driver)-1,d0 ; set repeat times
    4109/    51B6 :                     
    4110/    51B6 :                     .dumpRAM:
    4111/    51B6 : 12D8                		move.b	(a0)+,(a1)+			; dump Z80 to Z80 RAM
    4112/    51B8 : 51C8 FFFC           		dbf	d0,.dumpRAM			; repeat til Z80 is dumped
    4113/    51BC :                     
    4114/    51BC :                     .wait:
    4115/    51BC : 12FC 0000           		move.b	#0,(a1)+			; clear the remaining Z80 space
    4116/    51C0 : B3FC 00A0 2000      		cmpa.l	#z80_ram_end,a1			; has the end of Z80 been reached?
    4117/    51C6 : 66F4                		bne.s	.wait				; if not, loop til it has
    4118/    51C8 : (MACRO)              		resetZ80a
    4118/    51C8 : 33FC 0000 00A1                      move.w  #0,(z80_reset).l
             51CE : 1200             
    4119/    51D0 : 707F                		moveq	#$7F,d0				; set repeat times
    4120/    51D2 : 51C8 FFFE           		dbf	d0,*				; delay to make sure the YM2612 works correctly
    4121/    51D6 : (MACRO)              		startZ80
    4121/    51D6 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
             51DC : 1100             
    4122/    51DE : (MACRO)              		resetZ80
    4122/    51DE : 33FC 0100 00A1                      move.w  #$100,(z80_reset).l
             51E4 : 1200             
    4123/    51E6 : (MACRO)              		enable_ints				; set the stack register (Starting VBlank)
    4123/    51E6 : 46FC 2300                           move    #$2300,sr
    4124/    51EA : 4E75                		rts
    4125/    51EC :                     
    4126/    51EC :                     ; ===========================================================================
    4127/    51EC :                     ; ---------------------------------------------------------------------------
    4128/    51EC :                     Z80_Driver:
    4129/    51EC :                     		include	"sound/Z80.asm"
(1)    1/    51EC :                     ; ---------------------------------------------------------------------------
(1)    2/    51EC :                     ; Modified Type 1B Z80 Sound Driver
(1)    3/    51EC :                     ; ---------------------------------------------------------------------------
(1)    4/    51EC :                     ; Original disassembly from ValleyBell's SMPS Research Pack
(1)    5/    51EC :                     ; Full disassembly and documentation by Filter
(1)    6/    51EC :                     ; ---------------------------------------------------------------------------
(1)    7/    51EC :                     
(1)    8/    51EC : =$0                  FixDriverBugs = fixBugs
(1)    9/    51EC : =$0                  OptimiseDriver = 0
(1)   10/    51EC :                     
(1)   11/    51EC :                     ; ===========================================================================
(1)   12/    51EC :                     
(1)   13/       0 :                     zTrack STRUCT DOTS
(1)   14/       0 : (MACRO)              PlaybackControl	ds.b 1
(1)   14/       0 : =>TRUE                       if notZ80(MOMCPU)
(1)   14/       0 :                                     !ds.b 1
(1)   14/       1 : =>FALSE                      else
(1)   14/       1 :                                     rept 1
(1)   14/       1 :                                             db 0
(1)   14/       1 :                                     endm
(1)   14/       1 : [14]                         endif
(1)   15/       1 : (MACRO)              VoiceControl	ds.b 1
(1)   15/       1 : =>TRUE                       if notZ80(MOMCPU)
(1)   15/       1 :                                     !ds.b 1
(1)   15/       2 : =>FALSE                      else
(1)   15/       2 :                                     rept 1
(1)   15/       2 :                                             db 0
(1)   15/       2 :                                     endm
(1)   15/       2 : [15]                         endif
(1)   16/       2 : (MACRO)              TempoDivider	ds.b 1
(1)   16/       2 : =>TRUE                       if notZ80(MOMCPU)
(1)   16/       2 :                                     !ds.b 1
(1)   16/       3 : =>FALSE                      else
(1)   16/       3 :                                     rept 1
(1)   16/       3 :                                             db 0
(1)   16/       3 :                                     endm
(1)   16/       3 : [16]                         endif
(1)   17/       3 : (MACRO)              DataPointerLow	ds.b 1
(1)   17/       3 : =>TRUE                       if notZ80(MOMCPU)
(1)   17/       3 :                                     !ds.b 1
(1)   17/       4 : =>FALSE                      else
(1)   17/       4 :                                     rept 1
(1)   17/       4 :                                             db 0
(1)   17/       4 :                                     endm
(1)   17/       4 : [17]                         endif
(1)   18/       4 : (MACRO)              DataPointerHigh	ds.b 1
(1)   18/       4 : =>TRUE                       if notZ80(MOMCPU)
(1)   18/       4 :                                     !ds.b 1
(1)   18/       5 : =>FALSE                      else
(1)   18/       5 :                                     rept 1
(1)   18/       5 :                                             db 0
(1)   18/       5 :                                     endm
(1)   18/       5 : [18]                         endif
(1)   19/       5 : (MACRO)              Transpose	ds.b 1
(1)   19/       5 : =>TRUE                       if notZ80(MOMCPU)
(1)   19/       5 :                                     !ds.b 1
(1)   19/       6 : =>FALSE                      else
(1)   19/       6 :                                     rept 1
(1)   19/       6 :                                             db 0
(1)   19/       6 :                                     endm
(1)   19/       6 : [19]                         endif
(1)   20/       6 : (MACRO)              Volume		ds.b 1
(1)   20/       6 : =>TRUE                       if notZ80(MOMCPU)
(1)   20/       6 :                                     !ds.b 1
(1)   20/       7 : =>FALSE                      else
(1)   20/       7 :                                     rept 1
(1)   20/       7 :                                             db 0
(1)   20/       7 :                                     endm
(1)   20/       7 : [20]                         endif
(1)   21/       7 : (MACRO)              ModulationCtrl	ds.b 1
(1)   21/       7 : =>TRUE                       if notZ80(MOMCPU)
(1)   21/       7 :                                     !ds.b 1
(1)   21/       8 : =>FALSE                      else
(1)   21/       8 :                                     rept 1
(1)   21/       8 :                                             db 0
(1)   21/       8 :                                     endm
(1)   21/       8 : [21]                         endif
(1)   22/       8 : (MACRO)              VoiceIndex	ds.b 1
(1)   22/       8 : =>TRUE                       if notZ80(MOMCPU)
(1)   22/       8 :                                     !ds.b 1
(1)   22/       9 : =>FALSE                      else
(1)   22/       9 :                                     rept 1
(1)   22/       9 :                                             db 0
(1)   22/       9 :                                     endm
(1)   22/       9 : [22]                         endif
(1)   23/       9 : (MACRO)              StackPointer	ds.b 1
(1)   23/       9 : =>TRUE                       if notZ80(MOMCPU)
(1)   23/       9 :                                     !ds.b 1
(1)   23/       A : =>FALSE                      else
(1)   23/       A :                                     rept 1
(1)   23/       A :                                             db 0
(1)   23/       A :                                     endm
(1)   23/       A : [23]                         endif
(1)   24/       A : (MACRO)              AMSFMSPan	ds.b 1
(1)   24/       A : =>TRUE                       if notZ80(MOMCPU)
(1)   24/       A :                                     !ds.b 1
(1)   24/       B : =>FALSE                      else
(1)   24/       B :                                     rept 1
(1)   24/       B :                                             db 0
(1)   24/       B :                                     endm
(1)   24/       B : [24]                         endif
(1)   25/       B : (MACRO)              DurationTimeout	ds.b 1
(1)   25/       B : =>TRUE                       if notZ80(MOMCPU)
(1)   25/       B :                                     !ds.b 1
(1)   25/       C : =>FALSE                      else
(1)   25/       C :                                     rept 1
(1)   25/       C :                                             db 0
(1)   25/       C :                                     endm
(1)   25/       C : [25]                         endif
(1)   26/       C : (MACRO)              SavedDuration	ds.b 1
(1)   26/       C : =>TRUE                       if notZ80(MOMCPU)
(1)   26/       C :                                     !ds.b 1
(1)   26/       D : =>FALSE                      else
(1)   26/       D :                                     rept 1
(1)   26/       D :                                             db 0
(1)   26/       D :                                     endm
(1)   26/       D : [26]                         endif
(1)   27/       D : (MACRO)              FreqLow		ds.b 1
(1)   27/       D : =>TRUE                       if notZ80(MOMCPU)
(1)   27/       D :                                     !ds.b 1
(1)   27/       E : =>FALSE                      else
(1)   27/       E :                                     rept 1
(1)   27/       E :                                             db 0
(1)   27/       E :                                     endm
(1)   27/       E : [27]                         endif
(1)   28/       E : (MACRO)              FreqHigh	ds.b 1
(1)   28/       E : =>TRUE                       if notZ80(MOMCPU)
(1)   28/       E :                                     !ds.b 1
(1)   28/       F : =>FALSE                      else
(1)   28/       F :                                     rept 1
(1)   28/       F :                                             db 0
(1)   28/       F :                                     endm
(1)   28/       F : [28]                         endif
(1)   29/       F : (MACRO)              VoiceSongID	ds.b 1
(1)   29/       F : =>TRUE                       if notZ80(MOMCPU)
(1)   29/       F :                                     !ds.b 1
(1)   29/      10 : =>FALSE                      else
(1)   29/      10 :                                     rept 1
(1)   29/      10 :                                             db 0
(1)   29/      10 :                                     endm
(1)   29/      10 : [29]                         endif
(1)   30/      10 : (MACRO)              Detune		ds.b 1
(1)   30/      10 : =>TRUE                       if notZ80(MOMCPU)
(1)   30/      10 :                                     !ds.b 1
(1)   30/      11 : =>FALSE                      else
(1)   30/      11 :                                     rept 1
(1)   30/      11 :                                             db 0
(1)   30/      11 :                                     endm
(1)   30/      11 : [30]                         endif
(1)   31/      11 : (MACRO)              PanAni1		ds.b 1
(1)   31/      11 : =>TRUE                       if notZ80(MOMCPU)
(1)   31/      11 :                                     !ds.b 1
(1)   31/      12 : =>FALSE                      else
(1)   31/      12 :                                     rept 1
(1)   31/      12 :                                             db 0
(1)   31/      12 :                                     endm
(1)   31/      12 : [31]                         endif
(1)   32/      12 : (MACRO)              PanAni2		ds.b 1
(1)   32/      12 : =>TRUE                       if notZ80(MOMCPU)
(1)   32/      12 :                                     !ds.b 1
(1)   32/      13 : =>FALSE                      else
(1)   32/      13 :                                     rept 1
(1)   32/      13 :                                             db 0
(1)   32/      13 :                                     endm
(1)   32/      13 : [32]                         endif
(1)   33/      13 : (MACRO)              PanAni3		ds.b 1
(1)   33/      13 : =>TRUE                       if notZ80(MOMCPU)
(1)   33/      13 :                                     !ds.b 1
(1)   33/      14 : =>FALSE                      else
(1)   33/      14 :                                     rept 1
(1)   33/      14 :                                             db 0
(1)   33/      14 :                                     endm
(1)   33/      14 : [33]                         endif
(1)   34/      14 : (MACRO)              PanAni4		ds.b 1
(1)   34/      14 : =>TRUE                       if notZ80(MOMCPU)
(1)   34/      14 :                                     !ds.b 1
(1)   34/      15 : =>FALSE                      else
(1)   34/      15 :                                     rept 1
(1)   34/      15 :                                             db 0
(1)   34/      15 :                                     endm
(1)   34/      15 : [34]                         endif
(1)   35/      15 : (MACRO)              PanAni5 	ds.b 1
(1)   35/      15 : =>TRUE                       if notZ80(MOMCPU)
(1)   35/      15 :                                     !ds.b 1
(1)   35/      16 : =>FALSE                      else
(1)   35/      16 :                                     rept 1
(1)   35/      16 :                                             db 0
(1)   35/      16 :                                     endm
(1)   35/      16 : [35]                         endif
(1)   36/      16 : (MACRO)              PanAni6		ds.b 1
(1)   36/      16 : =>TRUE                       if notZ80(MOMCPU)
(1)   36/      16 :                                     !ds.b 1
(1)   36/      17 : =>FALSE                      else
(1)   36/      17 :                                     rept 1
(1)   36/      17 :                                             db 0
(1)   36/      17 :                                     endm
(1)   36/      17 : [36]                         endif
(1)   37/      17 : (MACRO)              VolEnv		ds.b 1
(1)   37/      17 : =>TRUE                       if notZ80(MOMCPU)
(1)   37/      17 :                                     !ds.b 1
(1)   37/      18 : =>FALSE                      else
(1)   37/      18 :                                     rept 1
(1)   37/      18 :                                             db 0
(1)   37/      18 :                                     endm
(1)   37/      18 : [37]                         endif
(1)   38/      18 :                     HaveSSGEGFlag
(1)   39/      18 : (MACRO)              FMVolEnv	ds.b 1
(1)   39/      18 : =>TRUE                       if notZ80(MOMCPU)
(1)   39/      18 :                                     !ds.b 1
(1)   39/      19 : =>FALSE                      else
(1)   39/      19 :                                     rept 1
(1)   39/      19 :                                             db 0
(1)   39/      19 :                                     endm
(1)   39/      19 : [39]                         endif
(1)   40/      19 :                     SSGEGPointerLow
(1)   41/      19 : (MACRO)              FMVolEnvMask	ds.b 1
(1)   41/      19 : =>TRUE                       if notZ80(MOMCPU)
(1)   41/      19 :                                     !ds.b 1
(1)   41/      1A : =>FALSE                      else
(1)   41/      1A :                                     rept 1
(1)   41/      1A :                                             db 0
(1)   41/      1A :                                     endm
(1)   41/      1A : [41]                         endif
(1)   42/      1A :                     PSGNoise
(1)   43/      1A : (MACRO)              SSGEGPointerHigh	ds.b 1
(1)   43/      1A : =>TRUE                       if notZ80(MOMCPU)
(1)   43/      1A :                                     !ds.b 1
(1)   43/      1B : =>FALSE                      else
(1)   43/      1B :                                     rept 1
(1)   43/      1B :                                             db 0
(1)   43/      1B :                                     endm
(1)   43/      1B : [43]                         endif
(1)   44/      1B : (MACRO)              FeedbackAlgo	ds.b 1
(1)   44/      1B : =>TRUE                       if notZ80(MOMCPU)
(1)   44/      1B :                                     !ds.b 1
(1)   44/      1C : =>FALSE                      else
(1)   44/      1C :                                     rept 1
(1)   44/      1C :                                             db 0
(1)   44/      1C :                                     endm
(1)   44/      1C : [44]                         endif
(1)   45/      1C : (MACRO)              TLPtrLow	ds.b 1
(1)   45/      1C : =>TRUE                       if notZ80(MOMCPU)
(1)   45/      1C :                                     !ds.b 1
(1)   45/      1D : =>FALSE                      else
(1)   45/      1D :                                     rept 1
(1)   45/      1D :                                             db 0
(1)   45/      1D :                                     endm
(1)   45/      1D : [45]                         endif
(1)   46/      1D : (MACRO)              TLPtrHigh	ds.b 1
(1)   46/      1D : =>TRUE                       if notZ80(MOMCPU)
(1)   46/      1D :                                     !ds.b 1
(1)   46/      1E : =>FALSE                      else
(1)   46/      1E :                                     rept 1
(1)   46/      1E :                                             db 0
(1)   46/      1E :                                     endm
(1)   46/      1E : [46]                         endif
(1)   47/      1E : (MACRO)              NoteFillTimeout	ds.b 1
(1)   47/      1E : =>TRUE                       if notZ80(MOMCPU)
(1)   47/      1E :                                     !ds.b 1
(1)   47/      1F : =>FALSE                      else
(1)   47/      1F :                                     rept 1
(1)   47/      1F :                                             db 0
(1)   47/      1F :                                     endm
(1)   47/      1F : [47]                         endif
(1)   48/      1F : (MACRO)              NoteFillMaster	ds.b 1
(1)   48/      1F : =>TRUE                       if notZ80(MOMCPU)
(1)   48/      1F :                                     !ds.b 1
(1)   48/      20 : =>FALSE                      else
(1)   48/      20 :                                     rept 1
(1)   48/      20 :                                             db 0
(1)   48/      20 :                                     endm
(1)   48/      20 : [48]                         endif
(1)   49/      20 : (MACRO)              ModulationPtrLow	ds.b 1
(1)   49/      20 : =>TRUE                       if notZ80(MOMCPU)
(1)   49/      20 :                                     !ds.b 1
(1)   49/      21 : =>FALSE                      else
(1)   49/      21 :                                     rept 1
(1)   49/      21 :                                             db 0
(1)   49/      21 :                                     endm
(1)   49/      21 : [49]                         endif
(1)   50/      21 : (MACRO)              ModulationPtrHigh	ds.b 1
(1)   50/      21 : =>TRUE                       if notZ80(MOMCPU)
(1)   50/      21 :                                     !ds.b 1
(1)   50/      22 : =>FALSE                      else
(1)   50/      22 :                                     rept 1
(1)   50/      22 :                                             db 0
(1)   50/      22 :                                     endm
(1)   50/      22 : [50]                         endif
(1)   51/      22 :                     ModulationValLow
(1)   52/      22 : (MACRO)              ModEnvSens	ds.b 1
(1)   52/      22 : =>TRUE                       if notZ80(MOMCPU)
(1)   52/      22 :                                     !ds.b 1
(1)   52/      23 : =>FALSE                      else
(1)   52/      23 :                                     rept 1
(1)   52/      23 :                                             db 0
(1)   52/      23 :                                     endm
(1)   52/      23 : [52]                         endif
(1)   53/      23 : (MACRO)              ModulationValHigh	ds.b 1
(1)   53/      23 : =>TRUE                       if notZ80(MOMCPU)
(1)   53/      23 :                                     !ds.b 1
(1)   53/      24 : =>FALSE                      else
(1)   53/      24 :                                     rept 1
(1)   53/      24 :                                             db 0
(1)   53/      24 :                                     endm
(1)   53/      24 : [53]                         endif
(1)   54/      24 : (MACRO)              ModulationWait	ds.b 1
(1)   54/      24 : =>TRUE                       if notZ80(MOMCPU)
(1)   54/      24 :                                     !ds.b 1
(1)   54/      25 : =>FALSE                      else
(1)   54/      25 :                                     rept 1
(1)   54/      25 :                                             db 0
(1)   54/      25 :                                     endm
(1)   54/      25 : [54]                         endif
(1)   55/      25 : (MACRO)              ModEnvIndex	ds.b 1
(1)   55/      25 : =>TRUE                       if notZ80(MOMCPU)
(1)   55/      25 :                                     !ds.b 1
(1)   55/      26 : =>FALSE                      else
(1)   55/      26 :                                     rept 1
(1)   55/      26 :                                             db 0
(1)   55/      26 :                                     endm
(1)   55/      26 : [55]                         endif
(1)   56/      26 : (MACRO)              ModulationDelta	ds.b 1
(1)   56/      26 : =>TRUE                       if notZ80(MOMCPU)
(1)   56/      26 :                                     !ds.b 1
(1)   56/      27 : =>FALSE                      else
(1)   56/      27 :                                     rept 1
(1)   56/      27 :                                             db 0
(1)   56/      27 :                                     endm
(1)   56/      27 : [56]                         endif
(1)   57/      27 : (MACRO)              ModulationSteps	ds.b 1
(1)   57/      27 : =>TRUE                       if notZ80(MOMCPU)
(1)   57/      27 :                                     !ds.b 1
(1)   57/      28 : =>FALSE                      else
(1)   57/      28 :                                     rept 1
(1)   57/      28 :                                             db 0
(1)   57/      28 :                                     endm
(1)   57/      28 : [57]                         endif
(1)   58/      28 : (MACRO)              LoopCounters	ds.w 1
(1)   58/      28 : =>TRUE                       if notZ80(MOMCPU)
(1)   58/      28 :                                     !ds.w 1
(1)   58/      2A : =>FALSE                      else
(1)   58/      2A :                                     rept 1
(1)   58/      2A :                                             db 0
(1)   58/      2A :                                     endm
(1)   58/      2A : [58]                         endif
(1)   59/      2A : (MACRO)              VoicesLow	ds.b 1
(1)   59/      2A : =>TRUE                       if notZ80(MOMCPU)
(1)   59/      2A :                                     !ds.b 1
(1)   59/      2B : =>FALSE                      else
(1)   59/      2B :                                     rept 1
(1)   59/      2B :                                             db 0
(1)   59/      2B :                                     endm
(1)   59/      2B : [59]                         endif
(1)   60/      2B : (MACRO)              VoicesHigh	ds.b 1
(1)   60/      2B : =>TRUE                       if notZ80(MOMCPU)
(1)   60/      2B :                                     !ds.b 1
(1)   60/      2C : =>FALSE                      else
(1)   60/      2C :                                     rept 1
(1)   60/      2C :                                             db 0
(1)   60/      2C :                                     endm
(1)   60/      2C : [60]                         endif
(1)   61/      2C : (MACRO)              		ds.b 1
(1)   61/      2C : =>TRUE                       if notZ80(MOMCPU)
(1)   61/      2C :                                     !ds.b 1
(1)   61/      2D : =>FALSE                      else
(1)   61/      2D :                                     rept 1
(1)   61/      2D :                                             db 0
(1)   61/      2D :                                     endm
(1)   61/      2D : [61]                         endif
(1)   62/      2D : (MACRO)              		ds.b 1
(1)   62/      2D : =>TRUE                       if notZ80(MOMCPU)
(1)   62/      2D :                                     !ds.b 1
(1)   62/      2E : =>FALSE                      else
(1)   62/      2E :                                     rept 1
(1)   62/      2E :                                             db 0
(1)   62/      2E :                                     endm
(1)   62/      2E : [62]                         endif
(1)   63/      2E : (MACRO)              		ds.b 1
(1)   63/      2E : =>TRUE                       if notZ80(MOMCPU)
(1)   63/      2E :                                     !ds.b 1
(1)   63/      2F : =>FALSE                      else
(1)   63/      2F :                                     rept 1
(1)   63/      2F :                                             db 0
(1)   63/      2F :                                     endm
(1)   63/      2F : [63]                         endif
(1)   64/      2F : (MACRO)              		ds.b 1
(1)   64/      2F : =>TRUE                       if notZ80(MOMCPU)
(1)   64/      2F :                                     !ds.b 1
(1)   64/      30 : =>FALSE                      else
(1)   64/      30 :                                     rept 1
(1)   64/      30 :                                             db 0
(1)   64/      30 :                                     endm
(1)   64/      30 : [64]                         endif
(1)   65/    51EC : =$30                 zTrack ENDSTRUCT
(1)   66/    51EC :                     
(1)   67/    1C00 :                     	phase $1C00
(1)   68/    1C00 :                     
(1)   69/    1C00 : (MACRO)              	ds.l 1
(1)   69/    1C00 : =>TRUE                       if notZ80(MOMCPU)
(1)   69/    1C00 :                                     !ds.l 1
(1)   69/    1C04 : =>FALSE                      else
(1)   69/    1C04 :                                     rept 1
(1)   69/    1C04 :                                             db 0
(1)   69/    1C04 :                                     endm
(1)   69/    1C04 : [69]                         endif
(1)   70/    1C04 : (MACRO)              zMusicBank	ds.b 1
(1)   70/    1C04 : =>TRUE                       if notZ80(MOMCPU)
(1)   70/    1C04 :                                     !ds.b 1
(1)   70/    1C05 : =>FALSE                      else
(1)   70/    1C05 :                                     rept 1
(1)   70/    1C05 :                                             db 0
(1)   70/    1C05 :                                     endm
(1)   70/    1C05 : [70]                         endif
(1)   71/    1C05 : (MACRO)              zSoundBank	ds.b 1
(1)   71/    1C05 : =>TRUE                       if notZ80(MOMCPU)
(1)   71/    1C05 :                                     !ds.b 1
(1)   71/    1C06 : =>FALSE                      else
(1)   71/    1C06 :                                     rept 1
(1)   71/    1C06 :                                             db 0
(1)   71/    1C06 :                                     endm
(1)   71/    1C06 : [71]                         endif
(1)   72/    1C06 : (MACRO)              zUnk_1C06	ds.b 1
(1)   72/    1C06 : =>TRUE                       if notZ80(MOMCPU)
(1)   72/    1C06 :                                     !ds.b 1
(1)   72/    1C07 : =>FALSE                      else
(1)   72/    1C07 :                                     rept 1
(1)   72/    1C07 :                                             db 0
(1)   72/    1C07 :                                     endm
(1)   72/    1C07 : [72]                         endif
(1)   73/    1C07 : (MACRO)              	ds.w 1
(1)   73/    1C07 : =>TRUE                       if notZ80(MOMCPU)
(1)   73/    1C07 :                                     !ds.w 1
(1)   73/    1C09 : =>FALSE                      else
(1)   73/    1C09 :                                     rept 1
(1)   73/    1C09 :                                             db 0
(1)   73/    1C09 :                                     endm
(1)   73/    1C09 : [73]                         endif
(1)   74/    1C09 :                     
(1)   75/    1C09 :                     zTempVariablesStart
(1)   76/    1C09 :                     
(1)   77/    1C09 :                     zSoundQueueStart
(1)   78/    1C09 : (MACRO)              zSoundQueue0	ds.b 1
(1)   78/    1C09 : =>TRUE                       if notZ80(MOMCPU)
(1)   78/    1C09 :                                     !ds.b 1
(1)   78/    1C0A : =>FALSE                      else
(1)   78/    1C0A :                                     rept 1
(1)   78/    1C0A :                                             db 0
(1)   78/    1C0A :                                     endm
(1)   78/    1C0A : [78]                         endif
(1)   79/    1C0A : (MACRO)              zSoundQueue1	ds.b 1
(1)   79/    1C0A : =>TRUE                       if notZ80(MOMCPU)
(1)   79/    1C0A :                                     !ds.b 1
(1)   79/    1C0B : =>FALSE                      else
(1)   79/    1C0B :                                     rept 1
(1)   79/    1C0B :                                             db 0
(1)   79/    1C0B :                                     endm
(1)   79/    1C0B : [79]                         endif
(1)   80/    1C0B : (MACRO)              zSoundQueue2	ds.b 1
(1)   80/    1C0B : =>TRUE                       if notZ80(MOMCPU)
(1)   80/    1C0B :                                     !ds.b 1
(1)   80/    1C0C : =>FALSE                      else
(1)   80/    1C0C :                                     rept 1
(1)   80/    1C0C :                                             db 0
(1)   80/    1C0C :                                     endm
(1)   80/    1C0C : [80]                         endif
(1)   81/    1C0C : (MACRO)              zSoundQueue3	ds.b 1
(1)   81/    1C0C : =>TRUE                       if notZ80(MOMCPU)
(1)   81/    1C0C :                                     !ds.b 1
(1)   81/    1C0D : =>FALSE                      else
(1)   81/    1C0D :                                     rept 1
(1)   81/    1C0D :                                             db 0
(1)   81/    1C0D :                                     endm
(1)   81/    1C0D : [81]                         endif
(1)   82/    1C0D :                     zSoundQueueEnd
(1)   83/    1C0D :                     
(1)   84/    1C0D : (MACRO)              zFadeOutTimeout	ds.b 1
(1)   84/    1C0D : =>TRUE                       if notZ80(MOMCPU)
(1)   84/    1C0D :                                     !ds.b 1
(1)   84/    1C0E : =>FALSE                      else
(1)   84/    1C0E :                                     rept 1
(1)   84/    1C0E :                                             db 0
(1)   84/    1C0E :                                     endm
(1)   84/    1C0E : [84]                         endif
(1)   85/    1C0E : (MACRO)              zFadeDelay	ds.b 1
(1)   85/    1C0E : =>TRUE                       if notZ80(MOMCPU)
(1)   85/    1C0E :                                     !ds.b 1
(1)   85/    1C0F : =>FALSE                      else
(1)   85/    1C0F :                                     rept 1
(1)   85/    1C0F :                                             db 0
(1)   85/    1C0F :                                     endm
(1)   85/    1C0F : [85]                         endif
(1)   86/    1C0F : (MACRO)              zFadeDelayTimeout	ds.b 1
(1)   86/    1C0F : =>TRUE                       if notZ80(MOMCPU)
(1)   86/    1C0F :                                     !ds.b 1
(1)   86/    1C10 : =>FALSE                      else
(1)   86/    1C10 :                                     rept 1
(1)   86/    1C10 :                                             db 0
(1)   86/    1C10 :                                     endm
(1)   86/    1C10 : [86]                         endif
(1)   87/    1C10 : (MACRO)              zPauseFlag	ds.b 1
(1)   87/    1C10 : =>TRUE                       if notZ80(MOMCPU)
(1)   87/    1C10 :                                     !ds.b 1
(1)   87/    1C11 : =>FALSE                      else
(1)   87/    1C11 :                                     rept 1
(1)   87/    1C11 :                                             db 0
(1)   87/    1C11 :                                     endm
(1)   87/    1C11 : [87]                         endif
(1)   88/    1C11 : (MACRO)              zHaltFlag	ds.b 1
(1)   88/    1C11 : =>TRUE                       if notZ80(MOMCPU)
(1)   88/    1C11 :                                     !ds.b 1
(1)   88/    1C12 : =>FALSE                      else
(1)   88/    1C12 :                                     rept 1
(1)   88/    1C12 :                                             db 0
(1)   88/    1C12 :                                     endm
(1)   88/    1C12 : [88]                         endif
(1)   89/    1C12 : (MACRO)              zFM3Settings	ds.b 1
(1)   89/    1C12 : =>TRUE                       if notZ80(MOMCPU)
(1)   89/    1C12 :                                     !ds.b 1
(1)   89/    1C13 : =>FALSE                      else
(1)   89/    1C13 :                                     rept 1
(1)   89/    1C13 :                                             db 0
(1)   89/    1C13 :                                     endm
(1)   89/    1C13 : [89]                         endif
(1)   90/    1C13 : (MACRO)              zTempoAccumulator	ds.b 1
(1)   90/    1C13 : =>TRUE                       if notZ80(MOMCPU)
(1)   90/    1C13 :                                     !ds.b 1
(1)   90/    1C14 : =>FALSE                      else
(1)   90/    1C14 :                                     rept 1
(1)   90/    1C14 :                                             db 0
(1)   90/    1C14 :                                     endm
(1)   90/    1C14 : [90]                         endif
(1)   91/    1C14 : (MACRO)              zCurrentTempo	ds.b 1
(1)   91/    1C14 : =>TRUE                       if notZ80(MOMCPU)
(1)   91/    1C14 :                                     !ds.b 1
(1)   91/    1C15 : =>FALSE                      else
(1)   91/    1C15 :                                     rept 1
(1)   91/    1C15 :                                             db 0
(1)   91/    1C15 :                                     endm
(1)   91/    1C15 : [91]                         endif
(1)   92/    1C15 : (MACRO)              zUnk_1C15	ds.b 1
(1)   92/    1C15 : =>TRUE                       if notZ80(MOMCPU)
(1)   92/    1C15 :                                     !ds.b 1
(1)   92/    1C16 : =>FALSE                      else
(1)   92/    1C16 :                                     rept 1
(1)   92/    1C16 :                                             db 0
(1)   92/    1C16 :                                     endm
(1)   92/    1C16 : [92]                         endif
(1)   93/    1C16 : (MACRO)              zCommunicationByte	ds.b 1
(1)   93/    1C16 : =>TRUE                       if notZ80(MOMCPU)
(1)   93/    1C16 :                                     !ds.b 1
(1)   93/    1C17 : =>FALSE                      else
(1)   93/    1C17 :                                     rept 1
(1)   93/    1C17 :                                             db 0
(1)   93/    1C17 :                                     endm
(1)   93/    1C17 : [93]                         endif
(1)   94/    1C17 : (MACRO)              zUnk_1C17	ds.b 1
(1)   94/    1C17 : =>TRUE                       if notZ80(MOMCPU)
(1)   94/    1C17 :                                     !ds.b 1
(1)   94/    1C18 : =>FALSE                      else
(1)   94/    1C18 :                                     rept 1
(1)   94/    1C18 :                                             db 0
(1)   94/    1C18 :                                     endm
(1)   94/    1C18 : [94]                         endif
(1)   95/    1C18 : (MACRO)              zUnk_1C18	ds.b 1
(1)   95/    1C18 : =>TRUE                       if notZ80(MOMCPU)
(1)   95/    1C18 :                                     !ds.b 1
(1)   95/    1C19 : =>FALSE                      else
(1)   95/    1C19 :                                     rept 1
(1)   95/    1C19 :                                             db 0
(1)   95/    1C19 :                                     endm
(1)   95/    1C19 : [95]                         endif
(1)   96/    1C19 : (MACRO)              zUpdateSound	ds.b 1
(1)   96/    1C19 : =>TRUE                       if notZ80(MOMCPU)
(1)   96/    1C19 :                                     !ds.b 1
(1)   96/    1C1A : =>FALSE                      else
(1)   96/    1C1A :                                     rept 1
(1)   96/    1C1A :                                             db 0
(1)   96/    1C1A :                                     endm
(1)   96/    1C1A : [96]                         endif
(1)   97/    1C1A : (MACRO)              zSpecSFXMode	ds.l 2
(1)   97/    1C1A : =>TRUE                       if notZ80(MOMCPU)
(1)   97/    1C1A :                                     !ds.l 2
(1)   97/    1C22 : =>FALSE                      else
(1)   97/    1C22 :                                     rept 2
(1)   97/    1C22 :                                             db 0
(1)   97/    1C22 :                                     endm
(1)   97/    1C22 : [97]                         endif
(1)   98/    1C22 : (MACRO)              zSFXMode	ds.l 2
(1)   98/    1C22 : =>TRUE                       if notZ80(MOMCPU)
(1)   98/    1C22 :                                     !ds.l 2
(1)   98/    1C2A : =>FALSE                      else
(1)   98/    1C2A :                                     rept 2
(1)   98/    1C2A :                                             db 0
(1)   98/    1C2A :                                     endm
(1)   98/    1C2A : [98]                         endif
(1)   99/    1C2A : (MACRO)              zMusicMode	ds.l 2
(1)   99/    1C2A : =>TRUE                       if notZ80(MOMCPU)
(1)   99/    1C2A :                                     !ds.l 2
(1)   99/    1C32 : =>FALSE                      else
(1)   99/    1C32 :                                     rept 2
(1)   99/    1C32 :                                             db 0
(1)   99/    1C32 :                                     endm
(1)   99/    1C32 : [99]                         endif
(1)  100/    1C32 : (MACRO)              zSFXSaveIndex	ds.b 1
(1)  100/    1C32 : =>TRUE                       if notZ80(MOMCPU)
(1)  100/    1C32 :                                     !ds.b 1
(1)  100/    1C33 : =>FALSE                      else
(1)  100/    1C33 :                                     rept 1
(1)  100/    1C33 :                                             db 0
(1)  100/    1C33 :                                     endm
(1)  100/    1C33 : [100]                        endif
(1)  101/    1C33 : (MACRO)              zSongPosition	ds.w 1
(1)  101/    1C33 : =>TRUE                       if notZ80(MOMCPU)
(1)  101/    1C33 :                                     !ds.w 1
(1)  101/    1C35 : =>FALSE                      else
(1)  101/    1C35 :                                     rept 1
(1)  101/    1C35 :                                             db 0
(1)  101/    1C35 :                                     endm
(1)  101/    1C35 : [101]                        endif
(1)  102/    1C35 : (MACRO)              zTrackInitPos	ds.w 1
(1)  102/    1C35 : =>TRUE                       if notZ80(MOMCPU)
(1)  102/    1C35 :                                     !ds.w 1
(1)  102/    1C37 : =>FALSE                      else
(1)  102/    1C37 :                                     rept 1
(1)  102/    1C37 :                                             db 0
(1)  102/    1C37 :                                     endm
(1)  102/    1C37 : [102]                        endif
(1)  103/    1C37 : (MACRO)              zVoiceTblPtr	ds.w 1
(1)  103/    1C37 : =>TRUE                       if notZ80(MOMCPU)
(1)  103/    1C37 :                                     !ds.w 1
(1)  103/    1C39 : =>FALSE                      else
(1)  103/    1C39 :                                     rept 1
(1)  103/    1C39 :                                             db 0
(1)  103/    1C39 :                                     endm
(1)  103/    1C39 : [103]                        endif
(1)  104/    1C39 : (MACRO)              zSFXVoiceTblPtr	ds.w 1
(1)  104/    1C39 : =>TRUE                       if notZ80(MOMCPU)
(1)  104/    1C39 :                                     !ds.w 1
(1)  104/    1C3B : =>FALSE                      else
(1)  104/    1C3B :                                     rept 1
(1)  104/    1C3B :                                             db 0
(1)  104/    1C3B :                                     endm
(1)  104/    1C3B : [104]                        endif
(1)  105/    1C3B : (MACRO)              zSFXTempoDivider	ds.b 1
(1)  105/    1C3B : =>TRUE                       if notZ80(MOMCPU)
(1)  105/    1C3B :                                     !ds.b 1
(1)  105/    1C3C : =>FALSE                      else
(1)  105/    1C3C :                                     rept 1
(1)  105/    1C3C :                                             db 0
(1)  105/    1C3C :                                     endm
(1)  105/    1C3C : [105]                        endif
(1)  106/    1C3C : (MACRO)              zDACIndex	ds.b 1
(1)  106/    1C3C : =>TRUE                       if notZ80(MOMCPU)
(1)  106/    1C3C :                                     !ds.b 1
(1)  106/    1C3D : =>FALSE                      else
(1)  106/    1C3D :                                     rept 1
(1)  106/    1C3D :                                             db 0
(1)  106/    1C3D :                                     endm
(1)  106/    1C3D : [106]                        endif
(1)  107/    1C3D : (MACRO)              	ds.b 1
(1)  107/    1C3D : =>TRUE                       if notZ80(MOMCPU)
(1)  107/    1C3D :                                     !ds.b 1
(1)  107/    1C3E : =>FALSE                      else
(1)  107/    1C3E :                                     rept 1
(1)  107/    1C3E :                                             db 0
(1)  107/    1C3E :                                     endm
(1)  107/    1C3E : [107]                        endif
(1)  108/    1C3E : (MACRO)              	ds.b 1
(1)  108/    1C3E : =>TRUE                       if notZ80(MOMCPU)
(1)  108/    1C3E :                                     !ds.b 1
(1)  108/    1C3F : =>FALSE                      else
(1)  108/    1C3F :                                     rept 1
(1)  108/    1C3F :                                             db 0
(1)  108/    1C3F :                                     endm
(1)  108/    1C3F : [108]                        endif
(1)  109/    1C3F : (MACRO)              	ds.b 1
(1)  109/    1C3F : =>TRUE                       if notZ80(MOMCPU)
(1)  109/    1C3F :                                     !ds.b 1
(1)  109/    1C40 : =>FALSE                      else
(1)  109/    1C40 :                                     rept 1
(1)  109/    1C40 :                                             db 0
(1)  109/    1C40 :                                     endm
(1)  109/    1C40 : [109]                        endif
(1)  110/    1C40 :                     
(1)  111/    1C40 :                     ; Now starts song and SFX z80 RAM
(1)  112/    1C40 :                     ; Max number of music channels: 6 FM + 3 PSG or 1 DAC + 5 FM + 3 PSG
(1)  113/    1C40 :                     zTracksStart
(1)  114/    1C40 : (STRUCT)             zSongDAC	zTrack
(1)  115/    1C70 : (STRUCT)             zSongFM1	zTrack
(1)  116/    1CA0 : (STRUCT)             zSongFM2	zTrack
(1)  117/    1CD0 : (STRUCT)             zSongFM3	zTrack
(1)  118/    1D00 : (STRUCT)             zSongFM4	zTrack
(1)  119/    1D30 : (STRUCT)             zSongFM5	zTrack
(1)  120/    1D60 : (STRUCT)             zSongFM6	zTrack
(1)  121/    1D90 : (STRUCT)             zSongPSG1	zTrack
(1)  122/    1DC0 : (STRUCT)             zSongPSG2	zTrack
(1)  123/    1DF0 : (STRUCT)             zSongPSG3	zTrack
(1)  124/    1E20 :                     zTracksEnd
(1)  125/    1E20 :                     ; This is RAM for backup of songs (when 1-up jingle is playing)
(1)  126/    1E20 :                     ; and for SFX channels. Note these two overlap.
(1)  127/    1E20 :                     ; Max number of SFX channels: 4 FM + 3 PSG
(1)  128/    1E20 :                     zTracksSFXStart
(1)  129/    1E20 : (STRUCT)             zSFX_FM3	zTrack
(1)  130/    1E50 : (STRUCT)             zSFX_FM4	zTrack
(1)  131/    1E80 : (STRUCT)             zSFX_FM5	zTrack
(1)  132/    1EB0 : (STRUCT)             zSFX_FM6	zTrack
(1)  133/    1EE0 : (STRUCT)             zSFX_PSG1	zTrack
(1)  134/    1F10 : (STRUCT)             zSFX_PSG2	zTrack
(1)  135/    1F40 : (STRUCT)             zSFX_PSG3	zTrack
(1)  136/    1F70 :                     zTracksSFXEnd
(1)  137/    1F70 :                     
(1)  138/    1F70 :                     zTracksSpecSFXStart
(1)  139/    1F70 : (STRUCT)             zSpecSFX_FM3	zTrack
(1)  140/    1FA0 :                     zTracksSpecSFXEnd
(1)  141/    1FA0 :                     
(1)  142/    1FA0 :                     zTempVariablesEnd
(1)  143/    558C :                     	dephase
(1)  144/    51EC :                     	!org	Z80_Driver
(1)  145/    51EC :                     
(1)  146/    51EC :                     		save
(1)  147/       0 :                     		phase	0				; set Z80 location to 0
(1)  148/       0 :                     		cpu z80					; use Z80 cpu
(1)  149/       0 :                     		listing purecode			; add to listing file
(1)  150/       0 :                     
(1)  151/       0 : =1FFDH               zDAC_Status	=	1FFDh
(1)  152/       0 : =1FFFH               zDAC_Sample	=	1FFFh
(1)  153/       0 : =2000H               zStack		=	2000h
(1)  154/       0 : =4000H               zYM2612_A0	=	4000h
(1)  155/       0 : =4001H               zYM2612_D0	=	4001h
(1)  156/       0 : =4002H               zYM2612_A1	=	4002h
(1)  157/       0 : =4003H               zYM2612_D1	=	4003h
(1)  158/       0 : =6000H               zBankRegister	=	6000h
(1)  159/       0 : =7F11H               zPSG		=	7F11h
(1)  160/       0 : =8000H               zROMWindow	=	8000h
(1)  161/       0 :                     
(1)  162/       0 :                     bankswitch macro
(1)  163/       0 :                     		ld	hl, zBankRegister
(1)  164/       0 :                     		ld	(hl), a
(1)  165/       0 :                     		rept 5
(1)  166/       0 :                     			rra
(1)  167/       0 :                     			ld	(hl), a
(1)  168/       0 :                     		endm
(1)  169/       0 :                     		xor	a
(1)  170/       0 :                     		rept 3
(1)  171/       0 :                     		ld	(hl), a
(1)  172/       0 :                     		endm
(1)  173/       0 :                     	endm
(1)  174/       0 :                     
(1)  175/       0 :                     bankswitch_2 macro addr68k
(1)  176/       0 :                     		ld	hl,zBankRegister
(1)  177/       0 :                     		xor	a	; a = 0
(1)  178/       0 :                     		ld	e,1	; e = 1
(1)  179/       0 :                     .cnt	:= 0
(1)  180/       0 :                     		rept 9
(1)  181/       0 :                     			; this is either ld (hl),a or ld (hl),e
(1)  182/       0 :                     			db 73h|((((addr68k)&(1<<(15+.cnt)))=0)<<2)
(1)  183/       0 :                     .cnt		:= .cnt+1
(1)  184/       0 :                     		endm
(1)  185/       0 :                     	endm
(1)  186/       0 :                     
(1)  187/       0 :                     ; macro to make a certain error message clearer should you happen to get it...
(1)  188/       0 :                     rsttarget macro {INTLABEL}
(1)  189/       0 :                     	if ($&7)||($>38h)
(1)  190/       0 :                     		fatal "Function __LABEL__ is at 0\{$}h, but must be at a multiple of 8 bytes <= 38h to be used with the rst instruction."
(1)  191/       0 :                     	endif
(1)  192/       0 :                     	if "__LABEL__"<>""
(1)  193/       0 :                     __LABEL__ label $
(1)  194/       0 :                     	endif
(1)  195/       0 :                     	endm
(1)  196/       0 :                     
(1)  197/       0 :                     ; function to turn a 68k address into a word the Z80 can use to access it
(1)  198/       0 :                     zmake68kPtr function addr,zROMWindow+(addr&7FFFh)
(1)  199/       0 :                     
(1)  200/       0 :                     ; function to turn a 68k address into a bank byte
(1)  201/       0 :                     zmake68kBank function addr,(((addr&3F8000h)/zROMWindow))
(1)  202/       0 :                     
(1)  203/       0 :                     ; Segment type:	Regular
(1)  204/       0 :                     
(1)  205/       0 :                     loc_0:
(1)  206/       0 : F3                  		di
(1)  208/       1 : F3                  		di
(1)  210/       2 : ED 56               		im	1
(1)  211/       4 : C3 B2 00            		jp	InitDriver
(1)  212/       7 :                     ; ---------------------------------------------------------------------------
(1)  213/       7 : (MACRO)              		align 8
(1)  213/       7 :  (MACRO-2)                   cnop 0,8
(1)  213/       7 :   (MACRO-3)                          org ($-1+(8)-(($-1+(-(0)))#(8)))
(1)  213/       7 : 00                                                  db 0
(1)  213/       8 :                     
(1)  214/       8 :                     
(1)  215/       8 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  216/       8 :                     
(1)  217/       8 :                     
(1)  218/       8 : (MACRO)              ReadPtrTable:	rsttarget
(1)  218/       8 : =8H                  ReadPtrTable label $
(1)  219/       8 : 4F                  		ld	c, a
(1)  220/       9 : 06 00               		ld	b, 0
(1)  221/       B : 09                  		add	hl, bc
(1)  222/       C : 09                  		add	hl, bc
(1)  223/       D : 7E                  		ld	a, (hl)
(1)  224/       E : 23                  		inc	hl
(1)  225/       F : 66                  		ld	h, (hl)
(1)  226/      10 : 6F                  		ld	l, a
(1)  227/      11 : C9                  		ret
(1)  228/      12 :                     ; End of function ReadPtrTable
(1)  229/      12 :                     
(1)  230/      12 :                     ; ---------------------------------------------------------------------------
(1)  231/      12 : (MACRO)              		align 8
(1)  231/      12 :  (MACRO-2)                   cnop 0,8
(1)  231/      12 :   (MACRO-3)                          org ($-1+(8)-(($-1+(-(0)))#(8)))
(1)  231/      12 : 00                                                  db 0
(1)  231/      13 : 00                                                  db 0
(1)  231/      14 : 00                                                  db 0
(1)  231/      15 : 00                                                  db 0
(1)  231/      16 : 00                                                  db 0
(1)  231/      17 : 00                                                  db 0
(1)  231/      18 :                     
(1)  232/      18 :                     
(1)  233/      18 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  234/      18 :                     
(1)  235/      18 :                     
(1)  236/      18 : (MACRO)              WriteFMIorII:	rsttarget
(1)  236/      18 : =18H                 WriteFMIorII label $
(1)  237/      18 : DD CB 00 56         		bit	2, (ix+zTrack.PlaybackControl)
(1)  238/      1C : C0                  		ret	nz
(1)  239/      1D : DD 86 01            		add	a, (ix+zTrack.VoiceControl)
(1)  240/      20 : DD CB 01 56         		bit	2, (ix+zTrack.VoiceControl)
(1)  242/      24 : 20 08               		jr	nz, WriteFMIIPart
(1)  246/      26 :                     ; End of function WriteFMIorII
(1)  247/      26 :                     
(1)  249/      26 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  250/      26 :                     
(1)  251/      26 :                     
(1)  252/      26 :                     WriteFMI:
(1)  253/      26 : 32 00 40            		ld	(zYM2612_A0), a
(1)  254/      29 : 79                  		ld	a, c
(1)  255/      2A : 32 01 40            		ld	(zYM2612_D0), a
(1)  256/      2D : C9                  		ret
(1)  257/      2E :                     ; End of function WriteFMI
(1)  258/      2E :                     
(1)  259/      2E :                     ; ---------------------------------------------------------------------------
(1)  260/      2E :                     
(1)  261/      2E :                     WriteFMIIPart:
(1)  262/      2E : D6 04               		sub	4
(1)  263/      30 :                     
(1)  264/      30 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  265/      30 :                     
(1)  266/      30 :                     
(1)  267/      30 : (MACRO)              WriteFMII:	rsttarget
(1)  267/      30 : =30H                 WriteFMII label $
(1)  268/      30 : 32 02 40            		ld	(zYM2612_A1), a
(1)  269/      33 : 79                  		ld	a, c
(1)  270/      34 : 32 03 40            		ld	(zYM2612_D1), a
(1)  271/      37 : C9                  		ret
(1)  272/      38 :                     ; End of function WriteFMII
(1)  294/      38 :                     
(1)  295/      38 :                     ; ---------------------------------------------------------------------------
(1)  296/      38 :                     
(1)  297/      38 : (MACRO)              VInt:		rsttarget
(1)  297/      38 : =38H                 VInt label $
(1)  298/      38 : F3                  		di
(1)  299/      39 : F5                  		push	af
(1)  300/      3A : FD E5               		push	iy
(1)  301/      3C : D9                  		exx
(1)  302/      3D : CD D6 08            		call	DoSoundQueue
(1)  303/      40 : CD E9 00            		call	UpdateAll
(1)  304/      43 : 3A 3C 1C            		ld	a, (zDACIndex)
(1)  305/      46 : B7                  		or	a
(1)  306/      47 : CA AB 00            		jp	z, loc_AB
(1)  307/      4A : FA 95 00            		jp	m, loc_95
(1)  308/      4D : 3E 2B               		ld	a, 2Bh
(1)  309/      4F : 0E 80               		ld	c, 80h
(1)  310/      51 : CD 26 00            		call	WriteFMI
(1)  311/      54 : 21 3C 1C            		ld	hl, zDACIndex
(1)  312/      57 : 7E                  		ld	a, (hl)
(1)  313/      58 : 3D                  		dec	a
(1)  314/      59 : CB FE               		set	7, (hl)
(1)  315/      5B : 21 DE 11            		ld	hl, DAC_Index
(1)  316/      5E : CF                  		rst	ReadPtrTable
(1)  317/      5F : 0E 80               		ld	c, 80h
(1)  318/      61 : 7E                  		ld	a, (hl)
(1)  319/      62 : 32 F4 0E            		ld	(DACLoop+1), a
(1)  320/      65 : 32 12 0F            		ld	(loc_F11+1), a
(1)  321/      68 : 23                  		inc	hl
(1)  322/      69 : 7E                  		ld	a, (hl)
(1)  323/      6A : 32 05 1C            		ld	(zSoundBank), a
(1)  324/      6D : 23                  		inc	hl
(1)  325/      6E : 5E                  		ld	e, (hl)
(1)  326/      6F : 23                  		inc	hl
(1)  327/      70 : 56                  		ld	d, (hl)
(1)  328/      71 : 23                  		inc	hl
(1)  329/      72 : 7E                  		ld	a, (hl)
(1)  330/      73 : 23                  		inc	hl
(1)  331/      74 : 66                  		ld	h, (hl)
(1)  332/      75 : 6F                  		ld	l, a
(1)  333/      76 : D9                  		exx
(1)  334/      77 : 21 05 1C            		ld	hl, zSoundBank
(1)  335/      7A : 7E                  		ld	a, (hl)
(1)  336/      7B : (MACRO)              		bankswitch
(1)  336/      7B : 21 00 60                            ld      hl, zBankRegister
(1)  336/      7E : 77                                  ld      (hl), a
(1)  336/      7F :                                     rept 5
(1)  336/      7F :                                             rra
(1)  336/      7F :                                             ld      (hl), a
(1)  336/      7F :                                     endm
(1)  336/      7F : 1F                                          rra
(1)  336/      80 : 77                                          ld      (hl), a
(1)  336/      81 : 1F                                          rra
(1)  336/      82 : 77                                          ld      (hl), a
(1)  336/      83 : 1F                                          rra
(1)  336/      84 : 77                                          ld      (hl), a
(1)  336/      85 : 1F                                          rra
(1)  336/      86 : 77                                          ld      (hl), a
(1)  336/      87 : 1F                                          rra
(1)  336/      88 : 77                                          ld      (hl), a
(1)  336/      89 : AF                                  xor     a
(1)  336/      8A :                                     rept 3
(1)  336/      8A :                                     ld      (hl), a
(1)  336/      8A :                                     endm
(1)  336/      8A : 77                                  ld      (hl), a
(1)  336/      8B : 77                                  ld      (hl), a
(1)  336/      8C : 77                                  ld      (hl), a
(1)  337/      8D : D9                  		exx
(1)  338/      8E : FD E1               		pop	iy
(1)  339/      90 : F1                  		pop	af
(1)  340/      91 : F1                  		pop	af
(1)  341/      92 : C3 ED 0E            		jp	loc_EED
(1)  342/      95 :                     ; ---------------------------------------------------------------------------
(1)  343/      95 :                     
(1)  344/      95 :                     loc_95:
(1)  345/      95 : 21 05 1C            		ld	hl, zSoundBank
(1)  346/      98 : 7E                  		ld	a, (hl)
(1)  347/      99 : (MACRO)              		bankswitch
(1)  347/      99 : 21 00 60                            ld      hl, zBankRegister
(1)  347/      9C : 77                                  ld      (hl), a
(1)  347/      9D :                                     rept 5
(1)  347/      9D :                                             rra
(1)  347/      9D :                                             ld      (hl), a
(1)  347/      9D :                                     endm
(1)  347/      9D : 1F                                          rra
(1)  347/      9E : 77                                          ld      (hl), a
(1)  347/      9F : 1F                                          rra
(1)  347/      A0 : 77                                          ld      (hl), a
(1)  347/      A1 : 1F                                          rra
(1)  347/      A2 : 77                                          ld      (hl), a
(1)  347/      A3 : 1F                                          rra
(1)  347/      A4 : 77                                          ld      (hl), a
(1)  347/      A5 : 1F                                          rra
(1)  347/      A6 : 77                                          ld      (hl), a
(1)  347/      A7 : AF                                  xor     a
(1)  347/      A8 :                                     rept 3
(1)  347/      A8 :                                     ld      (hl), a
(1)  347/      A8 :                                     endm
(1)  347/      A8 : 77                                  ld      (hl), a
(1)  347/      A9 : 77                                  ld      (hl), a
(1)  347/      AA : 77                                  ld      (hl), a
(1)  348/      AB :                     
(1)  349/      AB :                     loc_AB:
(1)  350/      AB : D9                  		exx
(1)  351/      AC : FD E1               		pop	iy
(1)  352/      AE : F1                  		pop	af
(1)  353/      AF : 06 01               		ld	b, 1
(1)  354/      B1 : C9                  		ret
(1)  355/      B2 :                     
(1)  361/      B2 :                     ; ---------------------------------------------------------------------------
(1)  362/      B2 :                     
(1)  363/      B2 :                     InitDriver:
(1)  364/      B2 : 31 00 20            		ld	sp, zStack
(1)  365/      B5 : 0E 00               		ld	c, 0
(1)  366/      B7 :                     
(1)  367/      B7 :                     loc_B7:
(1)  368/      B7 : 06 00               		ld	b, 0
(1)  369/      B9 :                     
(1)  370/      B9 :                     loc_B9:
(1)  371/      B9 : 10 FE               		djnz	$
(1)  372/      BB : 0D                  		dec	c
(1)  373/      BC : 20 F9               		jr	nz, loc_B7
(1)  374/      BE : CD 36 08            		call	StopAllSound
(1)  375/      C1 : 3E 02               		ld	a, zmake68kBank(MusicBank)
(1)  376/      C3 : 32 04 1C            		ld	(zMusicBank), a
(1)  380/      C6 :                     		; DANGER!
(1)  381/      C6 :                     		; This is bugged, it's supposed to be the sound bank...
(1)  382/      C6 : 3E 04               		ld	a, zmake68kBank(DACBank)
(1)  384/      C8 : 32 05 1C            		ld	(zSoundBank), a
(1)  385/      CB :                     
(1)  389/      CB : 21 05 1C            		ld	hl, zSoundBank
(1)  391/      CE :                     		; DANGER!
(1)  392/      CE :                     		; This is bugged, the DAC needs de to be cleared in order to
(1)  393/      CE :                     		; not continue checking if there is a sample. This leads to
(1)  394/      CE :                     		; constant crashes on hardware if nothing is played on the
(1)  395/      CE :                     		; Sega Screen or anywhere that sound isn't being played.
(1)  396/      CE : 7E                  		ld	a, (hl)
(1)  398/      CF : (MACRO)              		bankswitch
(1)  398/      CF : 21 00 60                            ld      hl, zBankRegister
(1)  398/      D2 : 77                                  ld      (hl), a
(1)  398/      D3 :                                     rept 5
(1)  398/      D3 :                                             rra
(1)  398/      D3 :                                             ld      (hl), a
(1)  398/      D3 :                                     endm
(1)  398/      D3 : 1F                                          rra
(1)  398/      D4 : 77                                          ld      (hl), a
(1)  398/      D5 : 1F                                          rra
(1)  398/      D6 : 77                                          ld      (hl), a
(1)  398/      D7 : 1F                                          rra
(1)  398/      D8 : 77                                          ld      (hl), a
(1)  398/      D9 : 1F                                          rra
(1)  398/      DA : 77                                          ld      (hl), a
(1)  398/      DB : 1F                                          rra
(1)  398/      DC : 77                                          ld      (hl), a
(1)  398/      DD : AF                                  xor     a
(1)  398/      DE :                                     rept 3
(1)  398/      DE :                                     ld      (hl), a
(1)  398/      DE :                                     endm
(1)  398/      DE : 77                                  ld      (hl), a
(1)  398/      DF : 77                                  ld      (hl), a
(1)  398/      E0 : 77                                  ld      (hl), a
(1)  399/      E1 : FD 21 64 0F         		ld	iy, DecTable
(1)  400/      E5 : FB                  		ei
(1)  401/      E6 : C3 E5 0E            		jp	zPlayDigitalAudio
(1)  402/      E9 :                     
(1)  403/      E9 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  404/      E9 :                     
(1)  405/      E9 :                     
(1)  406/      E9 :                     UpdateAll:
(1)  407/      E9 : CD 60 07            		call	DoPause
(1)  408/      EC : CD C0 08            		call	DoTempo
(1)  409/      EF : CD D9 07            		call	DoFading
(1)  410/      F2 : CD 07 05            		call	PlaySoundID
(1)  411/      F5 : CD 25 01            		call	UpdateSFXTracks
(1)  412/      F8 : AF                  		xor	a
(1)  413/      F9 : 32 19 1C            		ld	(zUpdateSound), a		; 00 - Music Mode
(1)  414/      FC : 21 04 1C            		ld	hl, zMusicBank
(1)  415/      FF : 7E                  		ld	a, (hl)
(1)  416/     100 : (MACRO)              		bankswitch
(1)  416/     100 : 21 00 60                            ld      hl, zBankRegister
(1)  416/     103 : 77                                  ld      (hl), a
(1)  416/     104 :                                     rept 5
(1)  416/     104 :                                             rra
(1)  416/     104 :                                             ld      (hl), a
(1)  416/     104 :                                     endm
(1)  416/     104 : 1F                                          rra
(1)  416/     105 : 77                                          ld      (hl), a
(1)  416/     106 : 1F                                          rra
(1)  416/     107 : 77                                          ld      (hl), a
(1)  416/     108 : 1F                                          rra
(1)  416/     109 : 77                                          ld      (hl), a
(1)  416/     10A : 1F                                          rra
(1)  416/     10B : 77                                          ld      (hl), a
(1)  416/     10C : 1F                                          rra
(1)  416/     10D : 77                                          ld      (hl), a
(1)  416/     10E : AF                                  xor     a
(1)  416/     10F :                                     rept 3
(1)  416/     10F :                                     ld      (hl), a
(1)  416/     10F :                                     endm
(1)  416/     10F : 77                                  ld      (hl), a
(1)  416/     110 : 77                                  ld      (hl), a
(1)  416/     111 : 77                                  ld      (hl), a
(1)  417/     112 : DD 21 40 1C         		ld	ix, zTracksStart
(1)  418/     116 : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1)  419/     11A : C4 FA 09            		call	nz, DrumUpdateTrack
(1)  420/     11D : 06 09               		ld	b, (zTracksEnd-zSongFM1)/zTrack.len
(1)  421/     11F : DD 21 70 1C         		ld	ix, zSongFM1
(1)  425/     123 : 18 28               		jr	TrkUpdateLoop
(1)  427/     125 :                     ; End of function UpdateAll
(1)  428/     125 :                     
(1)  429/     125 :                     
(1)  430/     125 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  431/     125 :                     
(1)  432/     125 :                     
(1)  433/     125 :                     UpdateSFXTracks:
(1)  434/     125 : 3E 01               		ld	a, 1
(1)  435/     127 : 32 19 1C            		ld	(zUpdateSound), a		; 01 - SFX Mode
(1)  436/     12A : (MACRO)              		bankswitch_2 SoundBank
(1)  436/     12A : 21 00 60                            ld      hl,zBankRegister
(1)  436/     12D : AF                                  xor     a       ; a = 0
(1)  436/     12E : 1E 01                               ld      e,1     ; e = 1
(1)  436/     130 : =0H                  .cnt    := 0
(1)  436/     130 :                                     rept 9
(1)  436/     130 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     130 :                                             db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     130 :                     .cnt            := .cnt+1
(1)  436/     130 :                                     endm
(1)  436/     130 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     130 : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     131 : =1H                  .cnt            := .cnt+1
(1)  436/     131 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     131 : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     132 : =2H                  .cnt            := .cnt+1
(1)  436/     132 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     132 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     133 : =3H                  .cnt            := .cnt+1
(1)  436/     133 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     133 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     134 : =4H                  .cnt            := .cnt+1
(1)  436/     134 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     134 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     135 : =5H                  .cnt            := .cnt+1
(1)  436/     135 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     135 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     136 : =6H                  .cnt            := .cnt+1
(1)  436/     136 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     136 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     137 : =7H                  .cnt            := .cnt+1
(1)  436/     137 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     137 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     138 : =8H                  .cnt            := .cnt+1
(1)  436/     138 :                                             ; this is either ld (hl),a or ld (hl),e
(1)  436/     138 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1)  436/     139 : =9H                  .cnt            := .cnt+1
(1)  437/     139 : DD 21 20 1E         		ld	ix, zTracksSFXStart
(1)  438/     13D : 06 07               		ld	b, (zTracksSFXEnd-zTracksSFXStart)/zTrack.len
(1)  439/     13F : CD 4D 01            		call	TrkUpdateLoop
(1)  440/     142 : 3E 80               		ld	a, 80h
(1)  441/     144 : 32 19 1C            		ld	(zUpdateSound), a		; 80 - Special SFX Mode
(1)  442/     147 : 06 01               		ld	b, 1
(1)  443/     149 : DD 21 70 1F         		ld	ix, zTracksSpecSFXStart
(1)  444/     14D :                     ; End of function UpdateSFXTracks
(1)  445/     14D :                     
(1)  446/     14D :                     
(1)  447/     14D :                     ; =============== S U B	R O U T	I N E =======================================
(1)  448/     14D :                     
(1)  449/     14D :                     
(1)  450/     14D :                     TrkUpdateLoop:
(1)  451/     14D : C5                  		push	bc
(1)  452/     14E : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1)  453/     152 : C4 5E 01            		call	nz, UpdateTrack
(1)  454/     155 : 11 30 00            		ld	de, zTrack.len
(1)  455/     158 : DD 19               		add	ix, de
(1)  456/     15A : C1                  		pop	bc
(1)  457/     15B : 10 F0               		djnz	TrkUpdateLoop
(1)  458/     15D : C9                  		ret
(1)  459/     15E :                     ; End of function TrkUpdateLoop
(1)  460/     15E :                     
(1)  461/     15E :                     
(1)  462/     15E :                     ; =============== S U B	R O U T	I N E =======================================
(1)  463/     15E :                     
(1)  464/     15E :                     
(1)  465/     15E :                     UpdateTrack:
(1)  466/     15E : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1)  467/     162 : C2 1F 0E            		jp	nz, UpdatePSGTrk
(1)  468/     165 : CD CF 02            		call	TrackTimeout
(1)  469/     168 : 20 17               		jr	nz, loc_181
(1)  470/     16A : CD FD 01            		call	TrkUpdate_Proc
(1)  471/     16D : DD CB 00 66         		bit	4, (ix+zTrack.PlaybackControl)
(1)  472/     171 : C0                  		ret	nz
(1)  473/     172 : CD 95 03            		call	PrepareModulat
(1)  474/     175 : CD 66 04            		call	DoPitchSlide			; also updates the frequency
(1)  475/     178 : CD C0 03            		call	DoModulation
(1)  476/     17B : CD A3 01            		call	SendFMFreq
(1)  477/     17E : C3 D7 02            		jp	DoNoteOn
(1)  478/     181 :                     ; ---------------------------------------------------------------------------
(1)  479/     181 :                     
(1)  480/     181 :                     loc_181:
(1)  481/     181 : CD 50 03            		call	ExecPanAnim
(1)  482/     184 : DD CB 00 66         		bit	4, (ix+zTrack.PlaybackControl)
(1)  483/     188 : C0                  		ret	nz
(1)  484/     189 : CD 66 03            		call	DoFMVolEnv
(1)  485/     18C : DD 7E 1E            		ld	a, (ix+zTrack.NoteFillTimeout)
(1)  486/     18F : B7                  		or	a
(1)  487/     190 : 28 06               		jr	z, loc_198
(1)  488/     192 : DD 35 1E            		dec	(ix+zTrack.NoteFillTimeout)
(1)  489/     195 : CA F0 02            		jp	z, DoNoteOff
(1)  490/     198 :                     
(1)  491/     198 :                     loc_198:
(1)  492/     198 : CD 66 04            		call	DoPitchSlide
(1)  493/     19B : DD CB 00 76         		bit	6, (ix+zTrack.PlaybackControl)
(1)  494/     19F : C0                  		ret	nz
(1)  495/     1A0 : CD C0 03            		call	DoModulation
(1)  496/     1A3 :                     ; End of function UpdateTrack
(1)  497/     1A3 :                     
(1)  498/     1A3 :                     
(1)  499/     1A3 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  500/     1A3 :                     
(1)  501/     1A3 :                     
(1)  502/     1A3 :                     SendFMFreq:
(1)  503/     1A3 : DD CB 00 56         		bit	2, (ix+zTrack.PlaybackControl)
(1)  504/     1A7 : C0                  		ret	nz
(1)  505/     1A8 : DD CB 00 46         		bit	0, (ix+zTrack.PlaybackControl)
(1)  509/     1AC : C2 B8 01            		jp	nz, loc_1B8
(1)  511/     1AF :                     
(1)  512/     1AF :                     loc_1AF:
(1)  513/     1AF : 3E A4               		ld	a, 0A4h
(1)  514/     1B1 : 4C                  		ld	c, h
(1)  515/     1B2 : DF                  		rst	WriteFMIorII
(1)  516/     1B3 : 3E A0               		ld	a, 0A0h
(1)  517/     1B5 : 4D                  		ld	c, l
(1)  521/     1B6 : DF                  		rst	WriteFMIorII
(1)  522/     1B7 : C9                  		ret
(1)  524/     1B8 :                     ; ---------------------------------------------------------------------------
(1)  525/     1B8 :                     
(1)  526/     1B8 :                     loc_1B8:
(1)  527/     1B8 : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)
(1)  528/     1BB : FE 02               		cp	2
(1)  529/     1BD : 20 F0               		jr	nz, loc_1AF
(1)  530/     1BF : CD ED 01            		call	GetFM3FreqPtr
(1)  531/     1C2 : 06 04               		ld	b, zSpecialFreqCommands_End-zSpecialFreqCommands
(1)  532/     1C4 : 21 E9 01            		ld	hl, zSpecialFreqCommands
(1)  533/     1C7 :                     
(1)  534/     1C7 :                     loc_1C7:
(1)  535/     1C7 : C5                  		push	bc
(1)  536/     1C8 : 7E                  		ld	a, (hl)
(1)  537/     1C9 : 23                  		inc	hl
(1)  538/     1CA : E5                  		push	hl
(1)  539/     1CB : EB                  		ex	de, hl
(1)  540/     1CC : 4E                  		ld	c, (hl)
(1)  541/     1CD : 23                  		inc	hl
(1)  542/     1CE : 46                  		ld	b, (hl)
(1)  543/     1CF : 23                  		inc	hl
(1)  544/     1D0 : EB                  		ex	de, hl
(1)  545/     1D1 : DD 6E 0D            		ld	l, (ix+zTrack.FreqLow)
(1)  546/     1D4 : DD 66 0E            		ld	h, (ix+zTrack.FreqHigh)
(1)  547/     1D7 : 09                  		add	hl, bc
(1)  548/     1D8 : F5                  		push	af
(1)  549/     1D9 : 4C                  		ld	c, h
(1)  550/     1DA : CD 26 00            		call	WriteFMI
(1)  551/     1DD : F1                  		pop	af
(1)  552/     1DE : D6 04               		sub	4
(1)  553/     1E0 : 4D                  		ld	c, l
(1)  554/     1E1 : CD 26 00            		call	WriteFMI
(1)  555/     1E4 : E1                  		pop	hl
(1)  556/     1E5 : C1                  		pop	bc
(1)  557/     1E6 : 10 DF               		djnz	loc_1C7
(1)  558/     1E8 : C9                  		ret
(1)  559/     1E9 :                     ; End of function SendFMFreq
(1)  560/     1E9 :                     
(1)  561/     1E9 :                     ; ---------------------------------------------------------------------------
(1)  562/     1E9 :                     zSpecialFreqCommands:
(1)  563/     1E9 : AD                  		db 0ADh					; Operator 4 frequency MSB
(1)  564/     1EA : AE                  		db 0AEh					; Operator 3 frequency MSB
(1)  565/     1EB : AC                  		db 0ACh					; Operator 2 frequency MSB
(1)  566/     1EC : A6                  		db 0A6h					; Operator 1 frequency MSB
(1)  567/     1ED :                     zSpecialFreqCommands_End
(1)  568/     1ED :                     
(1)  569/     1ED :                     ; =============== S U B	R O U T	I N E =======================================
(1)  570/     1ED :                     
(1)  571/     1ED :                     
(1)  572/     1ED :                     GetFM3FreqPtr:
(1)  573/     1ED : 11 2A 1C            		ld	de, zMusicMode
(1)  574/     1F0 : 3A 19 1C            		ld	a, (zUpdateSound)
(1)  575/     1F3 : B7                  		or	a
(1)  576/     1F4 : C8                  		ret	z				; Music	Mode (00) - 1C2A
(1)  577/     1F5 : 11 1A 1C            		ld	de, zSpecSFXMode
(1)  578/     1F8 : F0                  		ret	p				; Special SFX Mode (80)	- 1C1A
(1)  579/     1F9 : 11 22 1C            		ld	de, zSFXMode
(1)  580/     1FC : C9                  		ret					; SFX Mode (01)	- 1C22
(1)  581/     1FD :                     ; End of function GetFM3FreqPtr
(1)  582/     1FD :                     
(1)  583/     1FD :                     
(1)  584/     1FD :                     ; =============== S U B	R O U T	I N E =======================================
(1)  585/     1FD :                     
(1)  586/     1FD :                     
(1)  587/     1FD :                     TrkUpdate_Proc:
(1)  588/     1FD : DD 5E 03            		ld	e, (ix+zTrack.DataPointerLow)
(1)  589/     200 : DD 56 04            		ld	d, (ix+zTrack.DataPointerHigh)
(1)  590/     203 : DD CB 00 8E         		res	1, (ix+zTrack.PlaybackControl)
(1)  591/     207 : DD CB 00 A6         		res	4, (ix+zTrack.PlaybackControl)
(1)  592/     20B :                     
(1)  593/     20B :                     loc_20B:
(1)  594/     20B : 1A                  		ld	a, (de)
(1)  595/     20C : 13                  		inc	de
(1)  596/     20D : FE E0               		cp	0E0h
(1)  597/     20F : D2 58 0A            		jp	nc, cfHandler
(1)  598/     212 : 08                  		ex	af, af'
(1)  599/     213 : CD F0 02            		call	DoNoteOff
(1)  600/     216 : CD 06 03            		call	DoPanAnimation
(1)  601/     219 : 08                  		ex	af, af'
(1)  602/     21A : DD CB 00 5E         		bit	3, (ix+zTrack.PlaybackControl)
(1)  603/     21E : C2 77 02            		jp	nz, DoRawFreqMode
(1)  604/     221 : B7                  		or	a
(1)  605/     222 : F2 9D 02            		jp	p, SetDuration
(1)  606/     225 : D6 81               		sub	81h
(1)  607/     227 : F2 2F 02            		jp	p, GetNote
(1)  608/     22A : CD C7 0E            		call	SetRest
(1)  612/     22D : 18 2E               		jr	loc_25D
(1)  614/     22F :                     ; ---------------------------------------------------------------------------
(1)  615/     22F :                     
(1)  616/     22F :                     GetNote:
(1)  617/     22F : DD 86 05            		add	a, (ix+zTrack.Transpose)
(1)  618/     232 : 21 3A 09            		ld	hl, PSGFreqs
(1)  619/     235 : F5                  		push	af
(1)  620/     236 : CF                  		rst	ReadPtrTable
(1)  621/     237 : F1                  		pop	af
(1)  622/     238 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1)  623/     23C : 20 19               		jr	nz, loc_257
(1)  624/     23E : D5                  		push	de
(1)  625/     23F : 16 08               		ld	d, 8
(1)  626/     241 : 1E 0C               		ld	e, 0Ch
(1)  627/     243 : 08                  		ex	af, af'
(1)  628/     244 : AF                  		xor	a
(1)  629/     245 :                     
(1)  630/     245 :                     loc_245:
(1)  631/     245 : 08                  		ex	af, af'
(1)  632/     246 : 93                  		sub	e
(1)  633/     247 : 38 05               		jr	c, loc_24E
(1)  634/     249 : 08                  		ex	af, af'
(1)  635/     24A : 82                  		add	a, d
(1)  640/     24B : 18 F8               		jr	loc_245
(1)  641/     24D :                     ; ---------------------------------------------------------------------------
(1)  642/     24D : 08                  		ex	af, af'
(1)  644/     24E :                     
(1)  645/     24E :                     loc_24E:
(1)  646/     24E : 83                  		add	a, e
(1)  647/     24F : 21 E2 09            		ld	hl, FMFreqs
(1)  648/     252 : CF                  		rst	ReadPtrTable
(1)  649/     253 : 08                  		ex	af, af'
(1)  650/     254 : B4                  		or	h
(1)  651/     255 : 67                  		ld	h, a
(1)  652/     256 : D1                  		pop	de
(1)  653/     257 :                     
(1)  654/     257 :                     loc_257:
(1)  655/     257 : DD 75 0D            		ld	(ix+zTrack.FreqLow), l
(1)  656/     25A : DD 74 0E            		ld	(ix+zTrack.FreqHigh), h
(1)  657/     25D :                     
(1)  658/     25D :                     loc_25D:
(1)  659/     25D : DD CB 00 6E         		bit	5, (ix+zTrack.PlaybackControl)
(1)  660/     261 : 20 0D               		jr	nz, loc_270
(1)  661/     263 : 1A                  		ld	a, (de)
(1)  662/     264 : B7                  		or	a
(1)  663/     265 : F2 9C 02            		jp	p, loc_29C
(1)  664/     268 : DD 7E 0C            		ld	a, (ix+zTrack.SavedDuration)
(1)  665/     26B : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a
(1)  669/     26E : 18 33               		jr	loc_2A3
(1)  671/     270 :                     ; ---------------------------------------------------------------------------
(1)  672/     270 :                     
(1)  673/     270 :                     loc_270:
(1)  674/     270 : 1A                  		ld	a, (de)
(1)  675/     271 : 13                  		inc	de
(1)  676/     272 : DD 77 10            		ld	(ix+zTrack.Detune), a
(1)  680/     275 : 18 24               		jr	loc_29B
(1)  682/     277 :                     ; ---------------------------------------------------------------------------
(1)  683/     277 :                     
(1)  684/     277 :                     DoRawFreqMode:
(1)  685/     277 : 67                  		ld	h, a
(1)  686/     278 : 1A                  		ld	a, (de)
(1)  687/     279 : 13                  		inc	de
(1)  688/     27A : 6F                  		ld	l, a
(1)  689/     27B : B4                  		or	h
(1)  690/     27C : 28 0C               		jr	z, loc_28A
(1)  691/     27E : DD 7E 05            		ld	a, (ix+zTrack.Transpose)
(1)  692/     281 : 06 00               		ld	b, 0
(1)  693/     283 : B7                  		or	a
(1)  694/     284 : F2 88 02            		jp	p, loc_288
(1)  695/     287 : 05                  		dec	b
(1)  696/     288 :                     
(1)  697/     288 :                     loc_288:
(1)  698/     288 : 4F                  		ld	c, a
(1)  699/     289 : 09                  		add	hl, bc
(1)  700/     28A :                     
(1)  701/     28A :                     loc_28A:
(1)  702/     28A : DD 75 0D            		ld	(ix+zTrack.FreqLow), l
(1)  703/     28D : DD 74 0E            		ld	(ix+zTrack.FreqHigh), h
(1)  704/     290 : DD CB 00 6E         		bit	5, (ix+zTrack.PlaybackControl)
(1)  705/     294 : 28 05               		jr	z, loc_29B
(1)  706/     296 : 1A                  		ld	a, (de)
(1)  707/     297 : 13                  		inc	de
(1)  708/     298 : DD 77 10            		ld	(ix+zTrack.Detune), a
(1)  709/     29B :                     
(1)  710/     29B :                     loc_29B:
(1)  711/     29B : 1A                  		ld	a, (de)
(1)  712/     29C :                     
(1)  713/     29C :                     loc_29C:
(1)  714/     29C : 13                  		inc	de
(1)  715/     29D :                     
(1)  716/     29D :                     SetDuration:
(1)  717/     29D : CD C5 02            		call	TickMultiplier
(1)  718/     2A0 : DD 77 0C            		ld	(ix+zTrack.SavedDuration), a
(1)  719/     2A3 :                     
(1)  720/     2A3 :                     loc_2A3:
(1)  721/     2A3 : DD 73 03            		ld	(ix+zTrack.DataPointerLow),	e
(1)  722/     2A6 : DD 72 04            		ld	(ix+zTrack.DataPointerHigh),	d
(1)  723/     2A9 : DD 7E 0C            		ld	a, (ix+zTrack.SavedDuration)
(1)  724/     2AC : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a
(1)  725/     2AF : DD CB 00 4E         		bit	1, (ix+zTrack.PlaybackControl)
(1)  726/     2B3 : C0                  		ret	nz
(1)  727/     2B4 : AF                  		xor	a
(1)  728/     2B5 : DD 77 25            		ld	(ix+zTrack.ModEnvIndex), a
(1)  729/     2B8 : DD 77 22            		ld	(ix+zTrack.ModEnvSens), a
(1)  730/     2BB : DD 77 17            		ld	(ix+zTrack.VolEnv), a
(1)  731/     2BE : DD 7E 1F            		ld	a, (ix+zTrack.NoteFillMaster)
(1)  732/     2C1 : DD 77 1E            		ld	(ix+zTrack.NoteFillTimeout), a
(1)  733/     2C4 : C9                  		ret
(1)  734/     2C5 :                     ; End of function TrkUpdate_Proc
(1)  735/     2C5 :                     
(1)  736/     2C5 :                     
(1)  737/     2C5 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  738/     2C5 :                     
(1)  739/     2C5 :                     
(1)  740/     2C5 :                     TickMultiplier:
(1)  741/     2C5 : DD 46 02            		ld	b, (ix+zTrack.TempoDivider)
(1)  742/     2C8 : 05                  		dec	b
(1)  743/     2C9 : C8                  		ret	z
(1)  744/     2CA : 4F                  		ld	c, a
(1)  745/     2CB :                     
(1)  746/     2CB :                     loc_2CB:
(1)  747/     2CB : 81                  		add	a, c
(1)  748/     2CC : 10 FD               		djnz	loc_2CB
(1)  749/     2CE : C9                  		ret
(1)  750/     2CF :                     ; End of function TickMultiplier
(1)  751/     2CF :                     
(1)  752/     2CF :                     
(1)  753/     2CF :                     ; =============== S U B	R O U T	I N E =======================================
(1)  754/     2CF :                     
(1)  755/     2CF :                     
(1)  756/     2CF :                     TrackTimeout:
(1)  757/     2CF : DD 7E 0B            		ld	a, (ix+zTrack.DurationTimeout)
(1)  758/     2D2 : 3D                  		dec	a
(1)  759/     2D3 : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a
(1)  760/     2D6 : C9                  		ret
(1)  761/     2D7 :                     ; End of function TrackTimeout
(1)  762/     2D7 :                     
(1)  763/     2D7 :                     ; ---------------------------------------------------------------------------
(1)  764/     2D7 :                     
(1)  765/     2D7 :                     DoNoteOn:
(1)  766/     2D7 : DD 7E 0D            		ld	a, (ix+zTrack.FreqLow)
(1)  767/     2DA : DD B6 0E            		or	(ix+zTrack.FreqHigh)
(1)  768/     2DD : C8                  		ret	z
(1)  769/     2DE : DD 7E 00            		ld	a, (ix+zTrack.PlaybackControl)
(1)  770/     2E1 : E6 06               		and	6
(1)  771/     2E3 : C0                  		ret	nz
(1)  772/     2E4 : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)
(1)  773/     2E7 : F6 F0               		or	0F0h
(1)  774/     2E9 : 4F                  		ld	c, a
(1)  775/     2EA : 3E 28               		ld	a, 28h
(1)  779/     2EC : CD 26 00            		call	WriteFMI
(1)  780/     2EF : C9                  		ret
(1)  782/     2F0 :                     
(1)  783/     2F0 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  784/     2F0 :                     
(1)  785/     2F0 :                     
(1)  786/     2F0 :                     DoNoteOff:
(1)  787/     2F0 : DD 7E 00            		ld	a, (ix+zTrack.PlaybackControl)
(1)  788/     2F3 : E6 06               		and	6
(1)  789/     2F5 : C0                  		ret	nz
(1)  790/     2F6 :                     
(1)  791/     2F6 :                     SendNoteOff:
(1)  792/     2F6 : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)
(1)  793/     2F9 : CB 79               		bit	7, c
(1)  794/     2FB : C0                  		ret	nz
(1)  795/     2FC :                     ; End of function DoNoteOff
(1)  796/     2FC :                     
(1)  797/     2FC :                     FMNoteOff:
(1)  798/     2FC : 3E 28               		ld	a, 28h
(1)  799/     2FE : CD 26 00            		call	WriteFMI
(1)  800/     301 : DD CB 00 B6         		res	6, (ix+zTrack.PlaybackControl)
(1)  801/     305 : C9                  		ret
(1)  802/     306 :                     
(1)  803/     306 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  804/     306 :                     
(1)  805/     306 :                     
(1)  806/     306 :                     DoPanAnimation:
(1)  807/     306 : DD 7E 11            		ld	a, (ix+zTrack.PanAni1)
(1)  808/     309 : 3D                  		dec	a
(1)  809/     30A : F8                  		ret	m
(1)  810/     30B : 20 3F               		jr	nz, loc_34C
(1)  811/     30D : DD CB 00 4E         		bit	1, (ix+zTrack.PlaybackControl)
(1)  812/     311 : C0                  		ret	nz
(1)  813/     312 :                     
(1)  814/     312 :                     loc_312:
(1)  815/     312 : DD 35 16            		dec	(ix+zTrack.PanAni6)
(1)  816/     315 : C0                  		ret	nz
(1)  817/     316 : C5                  		push	bc
(1)  818/     317 : D5                  		push	de
(1)  819/     318 : E5                  		push	hl
(1)  820/     319 : DD 7E 15            		ld	a, (ix+zTrack.PanAni5)
(1)  821/     31C : DD 77 16            		ld	(ix+zTrack.PanAni6), a
(1)  822/     31F : DD 7E 12            		ld	a, (ix+zTrack.PanAni2)
(1)  823/     322 : 21 58 03            		ld	hl, PanAniPtrList
(1)  824/     325 : CF                  		rst	ReadPtrTable
(1)  825/     326 : DD 5E 13            		ld	e, (ix+zTrack.PanAni3)
(1)  826/     329 : DD 34 13            		inc	(ix+zTrack.PanAni3)
(1)  827/     32C : DD 7E 14            		ld	a, (ix+zTrack.PanAni4)
(1)  828/     32F : 3D                  		dec	a
(1)  829/     330 : BB                  		cp	e
(1)  830/     331 : 20 0E               		jr	nz, loc_341
(1)  831/     333 : DD 35 13            		dec	(ix+zTrack.PanAni3)
(1)  832/     336 : DD 7E 11            		ld	a, (ix+zTrack.PanAni1)
(1)  833/     339 : FE 02               		cp	2
(1)  834/     33B : 28 04               		jr	z, loc_341
(1)  835/     33D : DD 36 13 00         		ld	(ix+zTrack.PanAni3), 0
(1)  836/     341 :                     
(1)  837/     341 :                     loc_341:
(1)  838/     341 : 16 00               		ld	d, 0
(1)  839/     343 : 19                  		add	hl, de
(1)  840/     344 : EB                  		ex	de, hl
(1)  841/     345 : CD BF 0A            		call	cfE0_Pan
(1)  842/     348 : E1                  		pop	hl
(1)  843/     349 : D1                  		pop	de
(1)  844/     34A : C1                  		pop	bc
(1)  845/     34B : C9                  		ret
(1)  846/     34C :                     ; ---------------------------------------------------------------------------
(1)  847/     34C :                     
(1)  848/     34C :                     loc_34C:
(1)  849/     34C : AF                  		xor	a
(1)  850/     34D : DD 77 13            		ld	(ix+zTrack.PanAni3), a
(1)  851/     350 :                     ; End of function DoPanAnimation
(1)  852/     350 :                     
(1)  853/     350 :                     
(1)  854/     350 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  855/     350 :                     
(1)  856/     350 :                     
(1)  857/     350 :                     ExecPanAnim:
(1)  858/     350 : DD 7E 11            		ld	a, (ix+zTrack.PanAni1)
(1)  859/     353 : D6 02               		sub	2
(1)  860/     355 : F8                  		ret	m
(1)  864/     356 : 18 BA               		jr	loc_312
(1)  866/     358 :                     ; End of function ExecPanAnim
(1)  867/     358 :                     
(1)  868/     358 :                     ; ---------------------------------------------------------------------------
(1)  869/     358 : 60 03 61 03 62 03   PanAniPtrList:	dw byte_360, byte_361, byte_362, byte_363
              35E : 63 03             
(1)  870/     360 : C0                  byte_360:	db 0C0h
(1)  871/     361 : 80                  byte_361:	db  80h
(1)  872/     362 : C0                  byte_362:	db 0C0h
(1)  873/     363 : 40 C0 80            byte_363:	db  40h,0C0h, 80h
(1)  874/     366 :                     
(1)  875/     366 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  876/     366 :                     
(1)  877/     366 :                     
(1)  878/     366 :                     DoFMVolEnv:
(1)  879/     366 : DD 7E 18            		ld	a, (ix+zTrack.FMVolEnv)
(1)  880/     369 : B7                  		or	a
(1)  881/     36A : C8                  		ret	z
(1)  882/     36B : F8                  		ret	m
(1)  883/     36C : 3D                  		dec	a
(1)  884/     36D : 21 74 0F            		ld	hl, VolEnvPtrs
(1)  885/     370 : CF                  		rst	ReadPtrTable
(1)  886/     371 : CD 95 0E            		call	DoPSGVolEnv
(1)  887/     374 : DD 66 1D            		ld	h, (ix+zTrack.TLPtrHigh)
(1)  888/     377 : DD 6E 1C            		ld	l, (ix+zTrack.TLPtrLow)
(1)  889/     37A : 11 DA 04            		ld	de, zFMInstrumentTLTable
(1)  890/     37D : 06 04               		ld	b, zFMInstrumentTLTable_End-zFMInstrumentTLTable
(1)  891/     37F : DD 4E 19            		ld	c, (ix+zTrack.FMVolEnvMask)
(1)  892/     382 :                     
(1)  893/     382 :                     loc_382:
(1)  894/     382 : F5                  		push	af
(1)  895/     383 : CB 29               		sra	c
(1)  896/     385 : C5                  		push	bc
(1)  897/     386 : 30 06               		jr	nc, loc_38E
(1)  898/     388 : 86                  		add	a, (hl)
(1)  899/     389 : E6 7F               		and	7Fh
(1)  900/     38B : 4F                  		ld	c, a
(1)  901/     38C : 1A                  		ld	a, (de)
(1)  902/     38D : DF                  		rst	WriteFMIorII
(1)  903/     38E :                     
(1)  904/     38E :                     loc_38E:
(1)  905/     38E : C1                  		pop	bc
(1)  906/     38F : 13                  		inc	de
(1)  907/     390 : 23                  		inc	hl
(1)  908/     391 : F1                  		pop	af
(1)  909/     392 : 10 EE               		djnz	loc_382
(1)  910/     394 : C9                  		ret
(1)  911/     395 :                     ; End of function DoFMVolEnv
(1)  912/     395 :                     
(1)  913/     395 :                     
(1)  914/     395 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  915/     395 :                     
(1)  916/     395 :                     
(1)  917/     395 :                     PrepareModulat:
(1)  918/     395 : DD CB 07 7E         		bit	7, (ix+zTrack.ModulationCtrl)
(1)  919/     399 : C8                  		ret	z
(1)  920/     39A : DD CB 00 4E         		bit	1, (ix+zTrack.PlaybackControl)
(1)  921/     39E : C0                  		ret	nz
(1)  922/     39F : DD 5E 20            		ld	e, (ix+zTrack.ModulationPtrLow)
(1)  923/     3A2 : DD 56 21            		ld	d, (ix+zTrack.ModulationPtrHigh)
(1)  924/     3A5 : DD E5               		push	ix
(1)  925/     3A7 : E1                  		pop	hl
(1)  926/     3A8 : 06 00               		ld	b, 0
(1)  927/     3AA : 0E 24               		ld	c, zTrack.ModulationWait
(1)  928/     3AC : 09                  		add	hl, bc
(1)  929/     3AD : EB                  		ex	de, hl
(1)  930/     3AE : ED A0               		ldi
(1)  931/     3B0 : ED A0               		ldi
(1)  932/     3B2 : ED A0               		ldi
(1)  933/     3B4 : 7E                  		ld	a, (hl)
(1)  934/     3B5 : CB 3F               		srl	a
(1)  935/     3B7 : 12                  		ld	(de), a
(1)  936/     3B8 : AF                  		xor	a
(1)  937/     3B9 : DD 77 22            		ld	(ix+zTrack.ModulationValLow), a
(1)  938/     3BC : DD 77 23            		ld	(ix+zTrack.ModulationValHigh), a
(1)  939/     3BF : C9                  		ret
(1)  940/     3C0 :                     ; End of function PrepareModulat
(1)  941/     3C0 :                     
(1)  942/     3C0 :                     
(1)  943/     3C0 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  944/     3C0 :                     
(1)  945/     3C0 :                     
(1)  946/     3C0 :                     DoModulation:
(1)  947/     3C0 : DD 7E 07            		ld	a, (ix+zTrack.ModulationCtrl)
(1)  948/     3C3 : B7                  		or	a
(1)  949/     3C4 : C8                  		ret	z
(1)  950/     3C5 : FE 80               		cp	80h
(1)  951/     3C7 : 20 48               		jr	nz, DoModEnv
(1)  952/     3C9 : DD 35 24            		dec	(ix+zTrack.ModulationWait)
(1)  953/     3CC : C0                  		ret	nz
(1)  954/     3CD : DD 34 24            		inc	(ix+zTrack.ModulationWait)
(1)  955/     3D0 : E5                  		push	hl
(1)  956/     3D1 : DD 6E 22            		ld	l, (ix+zTrack.ModulationValLow)
(1)  957/     3D4 : DD 66 23            		ld	h, (ix+zTrack.ModulationValHigh)
(1)  958/     3D7 : DD 5E 20            		ld	e, (ix+zTrack.ModulationPtrLow)
(1)  959/     3DA : DD 56 21            		ld	d, (ix+zTrack.ModulationPtrHigh)
(1)  960/     3DD : D5                  		push	de
(1)  961/     3DE : FD E1               		pop	iy
(1)  962/     3E0 : DD 35 25            		dec	(ix+zTrack.ModEnvIndex)
(1)  963/     3E3 : 20 17               		jr	nz, loc_3FC
(1)  964/     3E5 : FD 7E 01            		ld	a, (iy+1)
(1)  965/     3E8 : DD 77 25            		ld	(ix+zTrack.ModEnvIndex), a
(1)  966/     3EB : DD 7E 26            		ld	a, (ix+zTrack.ModulationDelta)
(1)  967/     3EE : 4F                  		ld	c, a
(1)  968/     3EF : E6 80               		and	80h
(1)  969/     3F1 : 07                  		rlca
(1)  970/     3F2 : ED 44               		neg
(1)  971/     3F4 : 47                  		ld	b, a
(1)  972/     3F5 : 09                  		add	hl, bc
(1)  973/     3F6 : DD 75 22            		ld	(ix+zTrack.ModulationValLow), l
(1)  974/     3F9 : DD 74 23            		ld	(ix+zTrack.ModulationValHigh), h
(1)  975/     3FC :                     
(1)  976/     3FC :                     loc_3FC:
(1)  977/     3FC : C1                  		pop	bc
(1)  978/     3FD : 09                  		add	hl, bc
(1)  979/     3FE : DD 35 27            		dec	(ix+zTrack.ModulationSteps)
(1)  980/     401 : C0                  		ret	nz
(1)  981/     402 : FD 7E 03            		ld	a, (iy+3)
(1)  982/     405 : DD 77 27            		ld	(ix+zTrack.ModulationSteps), a
(1)  983/     408 :                     
(1)  984/     408 :                     loc_408:
(1)  985/     408 : DD 7E 26            		ld	a, (ix+zTrack.ModulationDelta)
(1)  986/     40B : ED 44               		neg
(1)  987/     40D :                     
(1)  988/     40D :                     loc_40D:
(1)  989/     40D : DD 77 26            		ld	(ix+zTrack.ModulationDelta), a
(1)  990/     410 : C9                  		ret
(1)  991/     411 :                     ; ---------------------------------------------------------------------------
(1)  992/     411 :                     
(1)  993/     411 :                     DoModEnv:
(1)  994/     411 : 3D                  		dec	a
(1)  995/     412 : EB                  		ex	de, hl
(1)  996/     413 : 21 10 10            		ld	hl, ModEnvPtrs
(1)  997/     416 : CF                  		rst	ReadPtrTable
(1) 1001/     417 : 18 03               		jr	loc_41C
(1) 1003/     419 :                     ; ---------------------------------------------------------------------------
(1) 1004/     419 :                     
(1) 1005/     419 :                     loc_419:
(1) 1006/     419 : DD 77 25            		ld	(ix+zTrack.ModEnvIndex), a
(1) 1007/     41C :                     
(1) 1008/     41C :                     loc_41C:
(1) 1009/     41C : E5                  		push	hl
(1) 1010/     41D : DD 4E 25            		ld	c, (ix+zTrack.ModEnvIndex)
(1) 1011/     420 : 06 00               		ld	b, 0
(1) 1012/     422 : 09                  		add	hl, bc
(1) 1013/     423 : 7E                  		ld	a, (hl)
(1) 1014/     424 : E1                  		pop	hl
(1) 1015/     425 : CB 7F               		bit	7, a
(1) 1019/     427 : CA 57 04            		jp	z, ModEnv_Positive
(1) 1021/     42A : FE 82               		cp	82h
(1) 1022/     42C : 28 12               		jr	z, ModEnv_Jump2Idx		; 82	xx - jump to byte xx
(1) 1023/     42E : FE 80               		cp	80h
(1) 1024/     430 : 28 12               		jr	z, ModEnv_Reset			; 80 - loop back to beginning
(1) 1025/     432 : FE 84               		cp	84h
(1) 1026/     434 : 28 11               		jr	z, ModEnv_ChgMult		; 84 xx - change Modulation Multipler
(1) 1027/     436 : 26 FF               		ld	h, 0FFh				; make HL negative (FFxx)
(1) 1028/     438 : 30 1F               		jr	nc, ModEnv_Next
(1) 1029/     43A : DD CB 00 F6         		set	6, (ix+zTrack.PlaybackControl)
(1) 1030/     43E : E1                  		pop	hl
(1) 1031/     43F : C9                  		ret
(1) 1032/     440 :                     ; ---------------------------------------------------------------------------
(1) 1033/     440 :                     
(1) 1034/     440 :                     ModEnv_Jump2Idx:
(1) 1035/     440 : 03                  		inc	bc
(1) 1036/     441 : 0A                  		ld	a, (bc)
(1) 1040/     442 : 18 D5               		jr	loc_419
(1) 1042/     444 :                     ; ---------------------------------------------------------------------------
(1) 1043/     444 :                     
(1) 1044/     444 :                     ModEnv_Reset:
(1) 1045/     444 : AF                  		xor	a
(1) 1049/     445 : 18 D2               		jr	loc_419
(1) 1051/     447 :                     ; ---------------------------------------------------------------------------
(1) 1052/     447 :                     
(1) 1053/     447 :                     ModEnv_ChgMult:
(1) 1054/     447 : 03                  		inc	bc
(1) 1055/     448 : 0A                  		ld	a, (bc)
(1) 1056/     449 : DD 86 22            		add	a, (ix+zTrack.ModEnvSens)
(1) 1057/     44C : DD 77 22            		ld	(ix+zTrack.ModEnvSens), a
(1) 1058/     44F : DD 34 25            		inc	(ix+zTrack.ModEnvIndex)
(1) 1059/     452 : DD 34 25            		inc	(ix+zTrack.ModEnvIndex)
(1) 1063/     455 : 18 C5               		jr	loc_41C
(1) 1065/     457 :                     ; ---------------------------------------------------------------------------
(1) 1066/     457 :                     
(1) 1067/     457 :                     ModEnv_Positive:
(1) 1068/     457 : 26 00               		ld	h, 0				; make HL positive (00xx)
(1) 1069/     459 :                     
(1) 1070/     459 :                     ModEnv_Next:
(1) 1071/     459 : 6F                  		ld	l, a
(1) 1072/     45A : DD 46 22            		ld	b, (ix+zTrack.ModEnvSens)
(1) 1073/     45D : 04                  		inc	b
(1) 1074/     45E : EB                  		ex	de, hl
(1) 1075/     45F :                     
(1) 1076/     45F :                     loc_45F:
(1) 1077/     45F : 19                  		add	hl, de
(1) 1078/     460 : 10 FD               		djnz	loc_45F
(1) 1079/     462 : DD 34 25            		inc	(ix+zTrack.ModEnvIndex)
(1) 1080/     465 : C9                  		ret
(1) 1081/     466 :                     ; End of function DoModulation
(1) 1082/     466 :                     
(1) 1083/     466 :                     
(1) 1084/     466 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1085/     466 :                     
(1) 1086/     466 :                     
(1) 1087/     466 :                     DoPitchSlide:
(1) 1088/     466 : 06 00               		ld	b, 0
(1) 1089/     468 : DD 7E 10            		ld	a, (ix+zTrack.Detune)
(1) 1090/     46B : B7                  		or	a
(1) 1091/     46C : F2 70 04            		jp	p, loc_470
(1) 1092/     46F : 05                  		dec	b
(1) 1093/     470 :                     
(1) 1094/     470 :                     loc_470:
(1) 1095/     470 : DD 66 0E            		ld	h, (ix+zTrack.FreqHigh)
(1) 1096/     473 : DD 6E 0D            		ld	l, (ix+zTrack.FreqLow)
(1) 1097/     476 : 4F                  		ld	c, a
(1) 1098/     477 : 09                  		add	hl, bc
(1) 1099/     478 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 1100/     47C : 20 22               		jr	nz, loc_4A0
(1) 1101/     47E : EB                  		ex	de, hl
(1) 1102/     47F : 3E 07               		ld	a, 7
(1) 1103/     481 : A2                  		and	d
(1) 1104/     482 : 47                  		ld	b, a
(1) 1105/     483 : 4B                  		ld	c, e
(1) 1106/     484 : B7                  		or	a
(1) 1107/     485 : 21 83 02            		ld	hl, 283h
(1) 1108/     488 : ED 42               		sbc	hl, bc
(1) 1109/     48A : 38 06               		jr	c, loc_492
(1) 1110/     48C : 21 85 FA            		ld	hl, -57Bh
(1) 1111/     48F : 19                  		add	hl, de
(1) 1115/     490 : 18 0E               		jr	loc_4A0
(1) 1117/     492 :                     ; ---------------------------------------------------------------------------
(1) 1118/     492 :                     
(1) 1119/     492 :                     loc_492:
(1) 1120/     492 : B7                  		or	a
(1) 1121/     493 : 21 08 05            		ld	hl, 508h
(1) 1122/     496 : ED 42               		sbc	hl, bc
(1) 1123/     498 : 30 05               		jr	nc, loc_49F
(1) 1124/     49A : 21 7C 05            		ld	hl, 57Ch
(1) 1125/     49D : 19                  		add	hl, de
(1) 1126/     49E : EB                  		ex	de, hl
(1) 1127/     49F :                     
(1) 1128/     49F :                     loc_49F:
(1) 1129/     49F : EB                  		ex	de, hl
(1) 1130/     4A0 :                     
(1) 1131/     4A0 :                     loc_4A0:
(1) 1132/     4A0 : DD CB 00 6E         		bit	5, (ix+zTrack.PlaybackControl)
(1) 1133/     4A4 : C8                  		ret	z
(1) 1134/     4A5 : DD 74 0E            		ld	(ix+zTrack.FreqHigh), h
(1) 1135/     4A8 : DD 75 0D            		ld	(ix+zTrack.FreqLow), l
(1) 1136/     4AB : C9                  		ret
(1) 1137/     4AC :                     ; End of function DoPitchSlide
(1) 1138/     4AC :                     
(1) 1139/     4AC :                     
(1) 1140/     4AC :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1141/     4AC :                     
(1) 1142/     4AC :                     
(1) 1143/     4AC :                     GetFMInsPtr:
(1) 1144/     4AC : 2A 37 1C            		ld	hl, (zVoiceTblPtr)
(1) 1145/     4AF : 3A 19 1C            		ld	a, (zUpdateSound)
(1) 1146/     4B2 : B7                  		or	a
(1) 1147/     4B3 : 28 06               		jr	z, JumpToInsData		; Mode	00 (Music Mode)	- jump
(1) 1148/     4B5 : DD 6E 2A            		ld	l, (ix+zTrack.VoicesLow)	; load SFX track Instrument Pointer (Trk+2A/2B)
(1) 1149/     4B8 : DD 66 2B            		ld	h, (ix+zTrack.VoicesHigh)
(1) 1150/     4BB :                     
(1) 1151/     4BB :                     JumpToInsData:
(1) 1152/     4BB : AF                  		xor	a
(1) 1153/     4BC : B0                  		or	b
(1) 1154/     4BD : C8                  		ret	z
(1) 1155/     4BE : 11 19 00            		ld	de, 25
(1) 1156/     4C1 :                     
(1) 1157/     4C1 :                     loc_4C1:
(1) 1158/     4C1 : 19                  		add	hl, de
(1) 1159/     4C2 : 10 FD               		djnz	loc_4C1
(1) 1160/     4C4 : C9                  		ret
(1) 1161/     4C5 :                     ; End of function JumpToInsData
(1) 1162/     4C5 :                     
(1) 1163/     4C5 :                     ; ---------------------------------------------------------------------------
(1) 1164/     4C5 :                     zFMInstrumentRegTable:
(1) 1165/     4C5 : B0                  		db 0B0h					; Feedback/Algorithm
(1) 1166/     4C6 :                     zFMInstrumentOperatorTable:
(1) 1167/     4C6 : 30                  		db  30h					; Detune/multiple operator 1
(1) 1168/     4C7 : 38                  		db  38h					; Detune/multiple operator 3
(1) 1169/     4C8 : 34                  		db  34h					; Detune/multiple operator 2
(1) 1170/     4C9 : 3C                  		db  3Ch					; Detune/multiple operator 4
(1) 1171/     4CA :                     zFMInstrumentRSARTable:
(1) 1172/     4CA : 50                  		db  50h					; Rate scaling/attack rate operator 1
(1) 1173/     4CB : 58                  		db  58h					; Rate scaling/attack rate operator 3
(1) 1174/     4CC : 54                  		db  54h					; Rate scaling/attack rate operator 2
(1) 1175/     4CD : 5C                  		db  5Ch					; Rate scaling/attack rate operator 4
(1) 1176/     4CE :                     zFMInstrumentAMD1RTable:
(1) 1177/     4CE : 60                  		db  60h					; Amplitude modulation/first decay rate operator 1
(1) 1178/     4CF : 68                  		db  68h					; Amplitude modulation/first decay rate operator 3
(1) 1179/     4D0 : 64                  		db  64h					; Amplitude modulation/first decay rate operator 2
(1) 1180/     4D1 : 6C                  		db  6Ch					; Amplitude modulation/first decay rate operator 4
(1) 1181/     4D2 :                     zFMInstrumentD2RTable:
(1) 1182/     4D2 : 70                  		db  70h					; Secondary decay rate operator 1
(1) 1183/     4D3 : 78                  		db  78h					; Secondary decay rate operator 3
(1) 1184/     4D4 : 74                  		db  74h					; Secondary decay rate operator 2
(1) 1185/     4D5 : 7C                  		db  7Ch					; Secondary decay rate operator 4
(1) 1186/     4D6 :                     zFMInstrumentD1LRRTable:
(1) 1187/     4D6 : 80                  		db  80h					; Secondary amplitude/release rate operator 1
(1) 1188/     4D7 : 88                  		db  88h					; Secondary amplitude/release rate operator 3
(1) 1189/     4D8 : 84                  		db  84h					; Secondary amplitude/release rate operator 2
(1) 1190/     4D9 : 8C                  		db  8Ch					; Secondary amplitude/release rate operator 4
(1) 1191/     4DA :                     zFMInstrumentOperatorTable_End
(1) 1192/     4DA :                     
(1) 1193/     4DA :                     zFMInstrumentTLTable:
(1) 1194/     4DA : 40                  		db  40h					; Total level operator 1
(1) 1195/     4DB : 48                  		db  48h					; Total level operator 3
(1) 1196/     4DC : 44                  		db  44h					; Total level operator 2
(1) 1197/     4DD : 4C                  		db  4Ch					; Total level operator 4
(1) 1198/     4DE :                     zFMInstrumentTLTable_End
(1) 1199/     4DE :                     
(1) 1200/     4DE :                     zFMInstrumentSSGEGTable:
(1) 1201/     4DE : 90                  		db  90h					; SSG-EG operator 1
(1) 1202/     4DF : 98                  		db  98h					; SSG-EG operator 3
(1) 1203/     4E0 : 94                  		db  94h					; SSG-EG operator 2
(1) 1204/     4E1 : 9C                  		db  9Ch					; SSG-EG operator 4
(1) 1205/     4E2 :                     zFMInstrumentSSGEGTable_End
(1) 1206/     4E2 :                     
(1) 1207/     4E2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1208/     4E2 :                     
(1) 1209/     4E2 :                     
(1) 1210/     4E2 :                     SendFMIns:
(1) 1211/     4E2 : 11 C5 04            		ld	de, zFMInstrumentRegTable
(1) 1212/     4E5 : DD 4E 0A            		ld	c, (ix+zTrack.AMSFMSPan)
(1) 1213/     4E8 : 3E B4               		ld	a, 0B4h
(1) 1214/     4EA : DF                  		rst	WriteFMIorII
(1) 1215/     4EB : CD 01 05            		call	WriteInsReg
(1) 1216/     4EE : DD 77 1B            		ld	(ix+zTrack.FeedbackAlgo), a
(1) 1217/     4F1 : 06 14               		ld	b, zFMInstrumentOperatorTable_End-zFMInstrumentOperatorTable
(1) 1218/     4F3 :                     
(1) 1219/     4F3 :                     loc_4F3:
(1) 1220/     4F3 : CD 01 05            		call	WriteInsReg
(1) 1221/     4F6 : 10 FB               		djnz	loc_4F3
(1) 1222/     4F8 : DD 75 1C            		ld	(ix+zTrack.TLPtrLow), l
(1) 1223/     4FB : DD 74 1D            		ld	(ix+zTrack.TLPtrHigh), h
(1) 1224/     4FE : C3 0F 0B            		jp	RefreshVolume
(1) 1225/     501 :                     ; End of function SendFMIns
(1) 1226/     501 :                     
(1) 1227/     501 :                     
(1) 1228/     501 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1229/     501 :                     
(1) 1230/     501 :                     
(1) 1231/     501 :                     WriteInsReg:
(1) 1232/     501 : 1A                  		ld	a, (de)
(1) 1233/     502 : 13                  		inc	de
(1) 1234/     503 : 4E                  		ld	c, (hl)
(1) 1235/     504 : 23                  		inc	hl
(1) 1239/     505 : DF                  		rst	WriteFMIorII
(1) 1240/     506 : C9                  		ret
(1) 1242/     507 :                     ; End of function WriteInsReg
(1) 1243/     507 :                     
(1) 1244/     507 :                     
(1) 1245/     507 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1246/     507 :                     
(1) 1247/     507 :                     
(1) 1248/     507 :                     PlaySoundID:
(1) 1249/     507 : 3A 09 1C            		ld	a, (zSoundQueue0)
(1) 1250/     50A : CB 7F               		bit	7, a
(1) 1251/     50C : CA 36 08            		jp	z, StopAllSound			; 00-7F	- Stop All
(1) 1274/     50F :                     		; DANGER!
(1) 1275/     50F :                     		; Some checks are in incorrect ranges and not checked against any bounds!
(1) 1276/     50F :                     		; Music checks 81-9F (proper range should be 81-86)
(1) 1277/     50F :                     		; Special SFX checks B0-DF (proper range should be D0-D3)
(1) 1278/     50F : FE A0               		cp	bgm_Last+19h			; is the ID music?
(1) 1279/     511 : DA 57 05            		jp	c, zPlayMusic			; if so, play music
(1) 1280/     514 : FE B0               		cp	sfx_Last			; is the ID SFX?
(1) 1281/     516 : DA 3A 06            		jp	c, PlaySFX			; if so, play SFX
(1) 1282/     519 : FE E0               		cp	flg_First			; is the ID special SFX?
(1) 1283/     51B : DA 1F 06            		jp	c, PlaySpcSFX			; if so, play special SFX
(1) 1284/     51E : FE F9               		cp	flg_Last+15h			; is the ID after the command flags?
(1) 1285/     520 : D2 36 08            		jp	nc, StopAllSound		; if so, Stop all sound
(1) 1287/     523 :                     
(1) 1288/     523 :                     PlaySnd_Command:
(1) 1289/     523 : D6 E0               		sub	flg_First
(1) 1290/     525 : 21 2E 05            		ld	hl, CmdPtrTable
(1) 1291/     528 : CF                  		rst	ReadPtrTable
(1) 1292/     529 : AF                  		xor	a
(1) 1293/     52A : 32 18 1C            		ld	(zUnk_1C18), a
(1) 1294/     52D : E9                  		jp	(hl)
(1) 1295/     52E :                     ; ---------------------------------------------------------------------------
(1) 1296/     52E :                     CmdPtrTable:
(1) 1297/     52E : B9 07               ptr_flgE0:	dw FadeOutMusic
(1) 1298/     530 : 36 08               ptr_flgE1:	dw StopAllSound
(1) 1299/     532 : B0 08               ptr_flgE2:	dw SilencePSG
(1) 1300/     534 : 36 05               ptr_flgE3:	dw FadeInMusic
(1) 1301/     536 :                     ptr_flgend
(1) 1302/     536 :                     ; ---------------------------------------------------------------------------
(1) 1303/     536 :                     
(1) 1304/     536 :                     FadeInMusic:
(1) 1305/     536 : DD 21 70 1F         		ld	ix, zTracksSFXEnd
(1) 1306/     53A : 06 02               		ld	b, 2
(1) 1307/     53C : 3E 80               		ld	a, 80h
(1) 1308/     53E : 32 19 1C            		ld	(zUpdateSound), a
(1) 1309/     541 :                     
(1) 1310/     541 :                     loc_541:
(1) 1311/     541 : C5                  		push	bc
(1) 1312/     542 : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1) 1313/     546 : C4 52 05            		call	nz, loc_552
(1) 1314/     549 : 11 30 00            		ld	de, zTrack.len
(1) 1315/     54C : DD 19               		add	ix, de
(1) 1316/     54E : C1                  		pop	bc
(1) 1317/     54F : 10 F0               		djnz	loc_541
(1) 1318/     551 : C9                  		ret
(1) 1319/     552 :                     ; ---------------------------------------------------------------------------
(1) 1320/     552 :                     
(1) 1321/     552 :                     loc_552:
(1) 1322/     552 : E5                  		push	hl
(1) 1323/     553 : E5                  		push	hl
(1) 1324/     554 : C3 E7 0B            		jp	cfF2_StopTrk
(1) 1325/     557 :                     ; ---------------------------------------------------------------------------
(1) 1326/     557 :                     
(1) 1327/     557 :                     zPlayMusic:
(1) 1328/     557 : D6 81               		sub	bgm_First
(1) 1329/     559 : F8                  		ret	m
(1) 1330/     55A : 08                  		ex	af, af'
(1) 1331/     55B : CD 36 08            		call	StopAllSound
(1) 1332/     55E : 08                  		ex	af, af'
(1) 1333/     55F : F5                  		push	af
(1) 1334/     560 : 21 4D 11            		ld	hl, MusicBanks
(1) 1335/     563 : 85                  		add	a, l
(1) 1336/     564 : 6F                  		ld	l, a
(1) 1337/     565 : 8C                  		adc	a, h
(1) 1338/     566 : 95                  		sub	l
(1) 1339/     567 : 67                  		ld	h, a
(1) 1340/     568 : 7E                  		ld	a, (hl)
(1) 1341/     569 : 32 04 1C            		ld	(zMusicBank), a
(1) 1342/     56C : 21 04 1C            		ld	hl, zMusicBank
(1) 1343/     56F : 7E                  		ld	a, (hl)
(1) 1344/     570 : (MACRO)              		bankswitch
(1) 1344/     570 : 21 00 60                            ld      hl, zBankRegister
(1) 1344/     573 : 77                                  ld      (hl), a
(1) 1344/     574 :                                     rept 5
(1) 1344/     574 :                                             rra
(1) 1344/     574 :                                             ld      (hl), a
(1) 1344/     574 :                                     endm
(1) 1344/     574 : 1F                                          rra
(1) 1344/     575 : 77                                          ld      (hl), a
(1) 1344/     576 : 1F                                          rra
(1) 1344/     577 : 77                                          ld      (hl), a
(1) 1344/     578 : 1F                                          rra
(1) 1344/     579 : 77                                          ld      (hl), a
(1) 1344/     57A : 1F                                          rra
(1) 1344/     57B : 77                                          ld      (hl), a
(1) 1344/     57C : 1F                                          rra
(1) 1344/     57D : 77                                          ld      (hl), a
(1) 1344/     57E : AF                                  xor     a
(1) 1344/     57F :                                     rept 3
(1) 1344/     57F :                                     ld      (hl), a
(1) 1344/     57F :                                     endm
(1) 1344/     57F : 77                                  ld      (hl), a
(1) 1344/     580 : 77                                  ld      (hl), a
(1) 1344/     581 : 77                                  ld      (hl), a
(1) 1345/     582 : F1                  		pop	af
(1) 1346/     583 : 21 53 11            		ld	hl, MusicIndex
(1) 1347/     586 : CF                  		rst	ReadPtrTable
(1) 1348/     587 : E5                  		push	hl
(1) 1349/     588 : E5                  		push	hl
(1) 1350/     589 : 7E                  		ld	a, (hl)
(1) 1351/     58A : 23                  		inc	hl
(1) 1352/     58B : 66                  		ld	h, (hl)
(1) 1353/     58C : 6F                  		ld	l, a
(1) 1354/     58D : 22 37 1C            		ld	(zVoiceTblPtr), hl
(1) 1355/     590 : E1                  		pop	hl
(1) 1356/     591 : FD E1               		pop	iy
(1) 1357/     593 : FD 7E 05            		ld	a, (iy+5)
(1) 1358/     596 : 32 13 1C            		ld	(zTempoAccumulator), a
(1) 1359/     599 : 32 14 1C            		ld	(zCurrentTempo), a
(1) 1360/     59C : 11 06 00            		ld	de, 6
(1) 1361/     59F : 19                  		add	hl, de
(1) 1362/     5A0 : 22 33 1C            		ld	(zSongPosition), hl
(1) 1363/     5A3 : 21 0B 06            		ld	hl, FMInitBytes
(1) 1364/     5A6 : 22 35 1C            		ld	(zTrackInitPos), hl
(1) 1365/     5A9 : 11 40 1C            		ld	de, zTracksStart
(1) 1366/     5AC : FD 46 02            		ld	b, (iy+2)
(1) 1367/     5AF : FD 7E 04            		ld	a, (iy+4)
(1) 1368/     5B2 :                     
(1) 1369/     5B2 :                     loc_5B2:
(1) 1370/     5B2 : C5                  		push	bc
(1) 1371/     5B3 : 2A 35 1C            		ld	hl, (zTrackInitPos)
(1) 1372/     5B6 : ED A0               		ldi
(1) 1373/     5B8 : ED A0               		ldi
(1) 1374/     5BA : 12                  		ld	(de), a
(1) 1375/     5BB : 13                  		inc	de
(1) 1376/     5BC : 22 35 1C            		ld	(zTrackInitPos), hl
(1) 1377/     5BF : 2A 33 1C            		ld	hl, (zSongPosition)
(1) 1378/     5C2 : ED A0               		ldi
(1) 1379/     5C4 : ED A0               		ldi
(1) 1380/     5C6 : ED A0               		ldi
(1) 1381/     5C8 : ED A0               		ldi
(1) 1382/     5CA : 22 33 1C            		ld	(zSongPosition), hl
(1) 1383/     5CD : CD 16 07            		call	FinishFMTrkInit
(1) 1384/     5D0 : C1                  		pop	bc
(1) 1385/     5D1 : 10 DF               		djnz	loc_5B2
(1) 1386/     5D3 : FD 7E 03            		ld	a, (iy+3)
(1) 1387/     5D6 : B7                  		or	a
(1) 1388/     5D7 : CA 05 06            		jp	z, ClearSoundID
(1) 1389/     5DA : 47                  		ld	b, a
(1) 1390/     5DB : 21 19 06            		ld	hl, PSGInitBytes
(1) 1391/     5DE : 22 35 1C            		ld	(zTrackInitPos), hl
(1) 1392/     5E1 : 11 90 1D            		ld	de, zSongPSG1
(1) 1393/     5E4 : FD 7E 04            		ld	a, (iy+4)
(1) 1394/     5E7 :                     
(1) 1395/     5E7 :                     loc_5E7:
(1) 1396/     5E7 : C5                  		push	bc
(1) 1397/     5E8 : 2A 35 1C            		ld	hl, (zTrackInitPos)
(1) 1398/     5EB : ED A0               		ldi
(1) 1399/     5ED : ED A0               		ldi
(1) 1400/     5EF : 12                  		ld	(de), a
(1) 1401/     5F0 : 13                  		inc	de
(1) 1402/     5F1 : 22 35 1C            		ld	(zTrackInitPos), hl
(1) 1403/     5F4 : 2A 33 1C            		ld	hl, (zSongPosition)
(1) 1404/     5F7 : 01 06 00            		ld	bc, 6
(1) 1405/     5FA : ED B0               		ldir
(1) 1406/     5FC : 22 33 1C            		ld	(zSongPosition), hl
(1) 1407/     5FF : CD 1D 07            		call	FinishTrkInit
(1) 1408/     602 : C1                  		pop	bc
(1) 1409/     603 : 10 E2               		djnz	loc_5E7
(1) 1410/     605 :                     ; End of function PlaySoundID
(1) 1411/     605 :                     
(1) 1412/     605 :                     ClearSoundID:
(1) 1413/     605 : 3E 80               		ld	a, 80h
(1) 1414/     607 : 32 09 1C            		ld	(zSoundQueue0), a
(1) 1415/     60A : C9                  		ret
(1) 1416/     60B :                     ; ---------------------------------------------------------------------------
(1) 1417/     60B : 80 06               FMInitBytes:	db  80h,   6
(1) 1418/     60D : 80 00               		db  80h,   0
(1) 1419/     60F : 80 01               		db  80h,   1
(1) 1420/     611 : 80 02               		db  80h,   2
(1) 1421/     613 : 80 04               		db  80h,   4
(1) 1422/     615 : 80 05               		db  80h,   5
(1) 1423/     617 : 80 06               		db  80h,   6
(1) 1424/     619 : 80 80               PSGInitBytes:	db  80h, 80h
(1) 1425/     61B : 80 A0               		db  80h,0A0h
(1) 1426/     61D : 80 C0               		db  80h,0C0h
(1) 1427/     61F :                     ; ---------------------------------------------------------------------------
(1) 1428/     61F :                     
(1) 1429/     61F :                     PlaySpcSFX:
(1) 1430/     61F : 08                  		ex	af, af'
(1) 1431/     620 : (MACRO)              		bankswitch_2 SoundBank
(1) 1431/     620 : 21 00 60                            ld      hl,zBankRegister
(1) 1431/     623 : AF                                  xor     a       ; a = 0
(1) 1431/     624 : 1E 01                               ld      e,1     ; e = 1
(1) 1431/     626 : =0H                  .cnt    := 0
(1) 1431/     626 :                                     rept 9
(1) 1431/     626 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     626 :                                             db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     626 :                     .cnt            := .cnt+1
(1) 1431/     626 :                                     endm
(1) 1431/     626 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     626 : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     627 : =1H                  .cnt            := .cnt+1
(1) 1431/     627 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     627 : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     628 : =2H                  .cnt            := .cnt+1
(1) 1431/     628 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     628 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     629 : =3H                  .cnt            := .cnt+1
(1) 1431/     629 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     629 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     62A : =4H                  .cnt            := .cnt+1
(1) 1431/     62A :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     62A : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     62B : =5H                  .cnt            := .cnt+1
(1) 1431/     62B :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     62B : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     62C : =6H                  .cnt            := .cnt+1
(1) 1431/     62C :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     62C : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     62D : =7H                  .cnt            := .cnt+1
(1) 1431/     62D :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     62D : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     62E : =8H                  .cnt            := .cnt+1
(1) 1431/     62E :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1431/     62E : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1431/     62F : =9H                  .cnt            := .cnt+1
(1) 1432/     62F : 08                  		ex	af, af'
(1) 1433/     630 : D6 D0               		sub	spec_First
(1) 1434/     632 : 08                  		ex	af, af'
(1) 1435/     633 : 3E 80               		ld	a, 80h
(1) 1436/     635 : 21 7F 11            		ld	hl, SpecSoundIndex
(1) 1440/     638 : 18 18               		jr	loc_652
(1) 1442/     63A :                     ; ---------------------------------------------------------------------------
(1) 1443/     63A :                     
(1) 1444/     63A :                     PlaySFX:
(1) 1445/     63A : 08                  		ex	af, af'
(1) 1446/     63B : (MACRO)              		bankswitch_2 SoundBank
(1) 1446/     63B : 21 00 60                            ld      hl,zBankRegister
(1) 1446/     63E : AF                                  xor     a       ; a = 0
(1) 1446/     63F : 1E 01                               ld      e,1     ; e = 1
(1) 1446/     641 : =0H                  .cnt    := 0
(1) 1446/     641 :                                     rept 9
(1) 1446/     641 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     641 :                                             db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     641 :                     .cnt            := .cnt+1
(1) 1446/     641 :                                     endm
(1) 1446/     641 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     641 : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     642 : =1H                  .cnt            := .cnt+1
(1) 1446/     642 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     642 : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     643 : =2H                  .cnt            := .cnt+1
(1) 1446/     643 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     643 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     644 : =3H                  .cnt            := .cnt+1
(1) 1446/     644 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     644 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     645 : =4H                  .cnt            := .cnt+1
(1) 1446/     645 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     645 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     646 : =5H                  .cnt            := .cnt+1
(1) 1446/     646 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     646 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     647 : =6H                  .cnt            := .cnt+1
(1) 1446/     647 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     647 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     648 : =7H                  .cnt            := .cnt+1
(1) 1446/     648 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     648 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     649 : =8H                  .cnt            := .cnt+1
(1) 1446/     649 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 1446/     649 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 1446/     64A : =9H                  .cnt            := .cnt+1
(1) 1447/     64A : 08                  		ex	af, af'
(1) 1448/     64B : D6 A0               		sub	sfx_First
(1) 1449/     64D : 08                  		ex	af, af'
(1) 1450/     64E : AF                  		xor	a
(1) 1451/     64F : 21 5F 11            		ld	hl, SoundIndex
(1) 1452/     652 :                     
(1) 1453/     652 :                     loc_652:
(1) 1454/     652 : 32 19 1C            		ld	(zUpdateSound), a
(1) 1455/     655 : 08                  		ex	af, af'
(1) 1456/     656 : CF                  		rst	ReadPtrTable
(1) 1457/     657 : E5                  		push	hl
(1) 1458/     658 : 7E                  		ld	a, (hl)
(1) 1459/     659 : 23                  		inc	hl
(1) 1460/     65A : 66                  		ld	h, (hl)
(1) 1461/     65B : 6F                  		ld	l, a
(1) 1462/     65C : 22 39 1C            		ld	(zSFXVoiceTblPtr), hl
(1) 1463/     65F : AF                  		xor	a
(1) 1464/     660 : 32 15 1C            		ld	(zUnk_1C15), a
(1) 1465/     663 : E1                  		pop	hl
(1) 1466/     664 : E5                  		push	hl
(1) 1467/     665 : FD E1               		pop	iy
(1) 1468/     667 : FD 7E 02            		ld	a, (iy+2)
(1) 1469/     66A : 32 3B 1C            		ld	(zSFXTempoDivider), a
(1) 1470/     66D : 11 04 00            		ld	de, 4
(1) 1471/     670 : 19                  		add	hl, de
(1) 1472/     671 : FD 46 03            		ld	b, (iy+3)
(1) 1473/     674 :                     
(1) 1474/     674 :                     loc_674:
(1) 1475/     674 : C5                  		push	bc
(1) 1476/     675 : E5                  		push	hl
(1) 1477/     676 : 23                  		inc	hl
(1) 1478/     677 : 4E                  		ld	c, (hl)
(1) 1479/     678 : CD D7 06            		call	GetSFXChnPtrs
(1) 1480/     67B : CB D6               		set	2, (hl)
(1) 1481/     67D : DD E5               		push	ix
(1) 1482/     67F : 3A 19 1C            		ld	a, (zUpdateSound)
(1) 1483/     682 : B7                  		or	a
(1) 1484/     683 : 28 03               		jr	z, loc_688
(1) 1485/     685 : E1                  		pop	hl
(1) 1486/     686 : FD E5               		push	iy
(1) 1487/     688 :                     
(1) 1488/     688 :                     loc_688:
(1) 1489/     688 : D1                  		pop	de
(1) 1490/     689 : E1                  		pop	hl
(1) 1491/     68A : ED A0               		ldi
(1) 1492/     68C : 1A                  		ld	a, (de)
(1) 1493/     68D : FE 02               		cp	2
(1) 1494/     68F : CC 6D 08            		call	z, ResetSpcFM3Mode
(1) 1495/     692 : ED A0               		ldi
(1) 1496/     694 : 3A 3B 1C            		ld	a, (zSFXTempoDivider)
(1) 1497/     697 : 12                  		ld	(de), a
(1) 1498/     698 : 13                  		inc	de
(1) 1499/     699 : ED A0               		ldi
(1) 1500/     69B : ED A0               		ldi
(1) 1501/     69D : ED A0               		ldi
(1) 1502/     69F : ED A0               		ldi
(1) 1503/     6A1 : CD 16 07            		call	FinishFMTrkInit
(1) 1504/     6A4 : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1) 1505/     6A8 : 28 0C               		jr	z, loc_6B6
(1) 1506/     6AA : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)
(1) 1507/     6AD : FD BE 01            		cp	(iy+1)
(1) 1508/     6B0 : 20 04               		jr	nz, loc_6B6
(1) 1509/     6B2 : FD CB 00 D6         		set	2, (iy+0)
(1) 1510/     6B6 :                     
(1) 1511/     6B6 :                     loc_6B6:
(1) 1512/     6B6 : E5                  		push	hl
(1) 1513/     6B7 : 2A 39 1C            		ld	hl, (zSFXVoiceTblPtr)
(1) 1514/     6BA : 3A 19 1C            		ld	a, (zUpdateSound)
(1) 1515/     6BD : B7                  		or	a
(1) 1516/     6BE : 28 04               		jr	z, loc_6C4
(1) 1517/     6C0 : FD E5               		push	iy
(1) 1518/     6C2 : DD E1               		pop	ix
(1) 1519/     6C4 :                     
(1) 1520/     6C4 :                     loc_6C4:
(1) 1521/     6C4 : DD 75 2A            		ld	(ix+zTrack.VoicesLow), l
(1) 1522/     6C7 : DD 74 2B            		ld	(ix+zTrack.VoicesHigh), h
(1) 1523/     6CA : CD F0 02            		call	DoNoteOff
(1) 1524/     6CD : CD 7A 08            		call	DisableSSGEG
(1) 1525/     6D0 : E1                  		pop	hl
(1) 1526/     6D1 : C1                  		pop	bc
(1) 1527/     6D2 : 10 A0               		djnz	loc_674
(1) 1528/     6D4 : C3 05 06            		jp	ClearSoundID
(1) 1529/     6D7 :                     
(1) 1530/     6D7 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1531/     6D7 :                     
(1) 1532/     6D7 :                     
(1) 1533/     6D7 :                     GetSFXChnPtrs:
(1) 1534/     6D7 : CB 79               		bit	7, c
(1) 1535/     6D9 : 20 08               		jr	nz, loc_6E3
(1) 1536/     6DB : 79                  		ld	a, c
(1) 1537/     6DC : CB 57               		bit	2, a
(1) 1538/     6DE : 28 1A               		jr	z, loc_6FA
(1) 1539/     6E0 : 3D                  		dec	a
(1) 1543/     6E1 : 18 17               		jr	loc_6FA
(1) 1545/     6E3 :                     ; ---------------------------------------------------------------------------
(1) 1546/     6E3 :                     
(1) 1547/     6E3 :                     loc_6E3:
(1) 1548/     6E3 : 3E 1F               		ld	a, 1Fh
(1) 1549/     6E5 : CD D0 0E            		call	SilencePSGChn
(1) 1550/     6E8 : 3E FF               		ld	a, 0FFh
(1) 1551/     6EA : 32 11 7F            		ld	(zPSG), a
(1) 1552/     6ED : 79                  		ld	a, c
(1) 1553/     6EE : CB 3F               		srl	a
(1) 1554/     6F0 : CB 3F               		srl	a
(1) 1555/     6F2 : CB 3F               		srl	a
(1) 1556/     6F4 : CB 3F               		srl	a
(1) 1557/     6F6 : CB 3F               		srl	a
(1) 1558/     6F8 : C6 02               		add	a, 2
(1) 1559/     6FA :                     
(1) 1560/     6FA :                     loc_6FA:
(1) 1561/     6FA : D6 02               		sub	2
(1) 1562/     6FC : 32 32 1C            		ld	(zSFXSaveIndex), a
(1) 1563/     6FF : F5                  		push	af
(1) 1564/     700 : 21 40 07            		ld	hl, SFXChnPtrs
(1) 1565/     703 : CF                  		rst	ReadPtrTable
(1) 1566/     704 : E5                  		push	hl
(1) 1567/     705 : DD E1               		pop	ix				; IX - SFX Track
(1) 1568/     707 : F1                  		pop	af
(1) 1569/     708 : F5                  		push	af
(1) 1570/     709 : 21 30 07            		ld	hl, SpcSFXChnPtrs
(1) 1571/     70C : CF                  		rst	ReadPtrTable
(1) 1572/     70D : E5                  		push	hl
(1) 1573/     70E : FD E1               		pop	iy				; IY - Special SFX Track
(1) 1574/     710 : F1                  		pop	af
(1) 1575/     711 : 21 50 07            		ld	hl, BGMChnPtrs
(1) 1579/     714 : CF                  		rst	ReadPtrTable			; HL - Music Track
(1) 1580/     715 : C9                  		ret
(1) 1582/     716 :                     ; End of function GetSFXChnPtrs
(1) 1583/     716 :                     
(1) 1584/     716 :                     
(1) 1585/     716 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1586/     716 :                     
(1) 1587/     716 :                     
(1) 1588/     716 :                     FinishFMTrkInit:
(1) 1589/     716 : 08                  		ex	af, af'
(1) 1590/     717 : AF                  		xor	a
(1) 1591/     718 : 12                  		ld	(de), a
(1) 1592/     719 : 13                  		inc	de
(1) 1593/     71A : 12                  		ld	(de), a
(1) 1594/     71B : 13                  		inc	de
(1) 1595/     71C : 08                  		ex	af, af'
(1) 1596/     71D :                     
(1) 1597/     71D :                     FinishTrkInit:
(1) 1598/     71D : EB                  		ex	de, hl
(1) 1599/     71E : 36 30               		ld	(hl), zTrack.len
(1) 1600/     720 : 23                  		inc	hl
(1) 1601/     721 : 36 C0               		ld	(hl), 0C0h
(1) 1602/     723 : 23                  		inc	hl
(1) 1603/     724 : 36 01               		ld	(hl), 1
(1) 1604/     726 : 06 24               		ld	b, zTrack.len-zTrack.DurationTimeout-1
(1) 1605/     728 :                     
(1) 1606/     728 :                     loc_728:
(1) 1607/     728 : 23                  		inc	hl
(1) 1608/     729 : 36 00               		ld	(hl), 0
(1) 1609/     72B : 10 FB               		djnz	loc_728
(1) 1610/     72D : 23                  		inc	hl
(1) 1611/     72E : EB                  		ex	de, hl
(1) 1612/     72F : C9                  		ret
(1) 1613/     730 :                     ; End of function FinishTrkInit
(1) 1614/     730 :                     
(1) 1615/     730 :                     ; ---------------------------------------------------------------------------
(1) 1616/     730 :                     SpcSFXChnPtrs:
(1) 1617/     730 : 70 1F               		dw  zSpecSFX_FM3
(1) 1618/     732 : 70 1F               		dw  zSpecSFX_FM3
(1) 1619/     734 : 70 1F               		dw  zSpecSFX_FM3
(1) 1620/     736 : 70 1F               		dw  zSpecSFX_FM3
(1) 1621/     738 : 70 1F               		dw  zSpecSFX_FM3
(1) 1622/     73A : 70 1F               		dw  zSpecSFX_FM3
(1) 1623/     73C : 70 1F               		dw  zSpecSFX_FM3
(1) 1624/     73E : 70 1F               		dw  zSpecSFX_FM3
(1) 1625/     740 :                     SFXChnPtrs:
(1) 1626/     740 : 20 1E               		dw  zSFX_FM3
(1) 1627/     742 : 50 1E               		dw  zSFX_FM4
(1) 1628/     744 : 80 1E               		dw  zSFX_FM5
(1) 1629/     746 : B0 1E               		dw  zSFX_FM6
(1) 1630/     748 : E0 1E               		dw  zSFX_PSG1
(1) 1631/     74A : 10 1F               		dw  zSFX_PSG2
(1) 1632/     74C : 40 1F               		dw  zSFX_PSG3
(1) 1633/     74E : 40 1F               		dw  zSFX_PSG3
(1) 1634/     750 :                     BGMChnPtrs:
(1) 1635/     750 : D0 1C               		dw  zSongFM3
(1) 1636/     752 : 00 1D               		dw  zSongFM4
(1) 1637/     754 : 30 1D               		dw  zSongFM5
(1) 1638/     756 : 60 1D               		dw  zSongFM6
(1) 1639/     758 : 90 1D               		dw  zSongPSG1
(1) 1640/     75A : C0 1D               		dw  zSongPSG2
(1) 1641/     75C : F0 1D               		dw  zSongPSG3
(1) 1642/     75E : F0 1D               		dw  zSongPSG3
(1) 1643/     760 :                     
(1) 1644/     760 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1645/     760 :                     
(1) 1646/     760 :                     
(1) 1647/     760 :                     DoPause:
(1) 1648/     760 : 21 10 1C            		ld	hl, zPauseFlag
(1) 1649/     763 : 7E                  		ld	a, (hl)
(1) 1650/     764 : B7                  		or	a
(1) 1651/     765 : C8                  		ret	z
(1) 1652/     766 : FA 71 07            		jp	m, UnpauseMusic
(1) 1653/     769 : D1                  		pop	de
(1) 1654/     76A : 3D                  		dec	a
(1) 1655/     76B : C0                  		ret	nz
(1) 1656/     76C : 36 02               		ld	(hl), 2
(1) 1657/     76E : C3 81 08            		jp	SilenceAll
(1) 1658/     771 :                     ; ---------------------------------------------------------------------------
(1) 1659/     771 :                     
(1) 1660/     771 :                     UnpauseMusic:
(1) 1661/     771 : AF                  		xor	a
(1) 1662/     772 : 77                  		ld	(hl), a
(1) 1663/     773 : 3A 0D 1C            		ld	a, (zFadeOutTimeout)
(1) 1664/     776 : B7                  		or	a
(1) 1665/     777 : C2 36 08            		jp	nz, StopAllSound
(1) 1666/     77A : DD 21 40 1C         		ld	ix, zTracksStart
(1) 1667/     77E : 06 07               		ld	b, (zSongPSG1-zTracksStart)/zTrack.len
(1) 1668/     780 :                     
(1) 1669/     780 :                     loc_780:
(1) 1670/     780 : 3A 11 1C            		ld	a, (zHaltFlag)
(1) 1671/     783 : B7                  		or	a
(1) 1672/     784 : 20 06               		jr	nz, locb_78C
(1) 1673/     786 : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1) 1674/     78A : 28 06               		jr	z, loc_792
(1) 1675/     78C :                     
(1) 1676/     78C :                     locb_78C:
(1) 1677/     78C : DD 4E 0A            		ld	c, (ix+zTrack.AMSFMSPan)
(1) 1678/     78F : 3E B4               		ld	a, 0B4h
(1) 1679/     791 : DF                  		rst	WriteFMIorII
(1) 1680/     792 :                     
(1) 1681/     792 :                     loc_792:
(1) 1682/     792 : 11 30 00            		ld	de, zTrack.len
(1) 1683/     795 : DD 19               		add	ix, de
(1) 1684/     797 : 10 E7               		djnz	loc_780
(1) 1685/     799 : DD 21 20 1E         		ld	ix, zTracksSFXStart
(1) 1686/     79D : 06 08               		ld	b, (zTracksSpecSFXEnd-zTracksSFXStart)/zTrack.len
(1) 1687/     79F :                     
(1) 1688/     79F :                     loc_79F:
(1) 1689/     79F : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1) 1690/     7A3 : 28 0C               		jr	z, loc_7B1
(1) 1691/     7A5 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 1692/     7A9 : 20 06               		jr	nz, loc_7B1
(1) 1693/     7AB : DD 4E 0A            		ld	c, (ix+zTrack.AMSFMSPan)
(1) 1694/     7AE : 3E B4               		ld	a, 0B4h
(1) 1695/     7B0 : DF                  		rst	WriteFMIorII
(1) 1696/     7B1 :                     
(1) 1697/     7B1 :                     loc_7B1:
(1) 1698/     7B1 : 11 30 00            		ld	de, zTrack.len
(1) 1699/     7B4 : DD 19               		add	ix, de
(1) 1700/     7B6 : 10 E7               		djnz	loc_79F
(1) 1701/     7B8 : C9                  		ret
(1) 1702/     7B9 :                     ; End of function DoPause
(1) 1703/     7B9 :                     
(1) 1704/     7B9 :                     ; ---------------------------------------------------------------------------
(1) 1705/     7B9 :                     
(1) 1706/     7B9 :                     FadeOutMusic:
(1) 1707/     7B9 : 3E 28               		ld	a, 28h
(1) 1708/     7BB : 32 0D 1C            		ld	(zFadeOutTimeout), a
(1) 1709/     7BE : 3E 06               		ld	a, 6
(1) 1710/     7C0 : 32 0F 1C            		ld	(zFadeDelayTimeout), a
(1) 1711/     7C3 : 32 0E 1C            		ld	(zFadeDelay), a
(1) 1712/     7C6 :                     
(1) 1713/     7C6 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1714/     7C6 :                     
(1) 1715/     7C6 :                     
(1) 1716/     7C6 :                     StopDrumPSG:
(1) 1717/     7C6 : AF                  		xor	a
(1) 1718/     7C7 : 32 40 1C            		ld	(zTracksStart), a
(1) 1719/     7CA : 32 60 1D            		ld	(zSongFM6), a
(1) 1720/     7CD : 32 F0 1D            		ld	(zSongPSG3), a
(1) 1721/     7D0 : 32 90 1D            		ld	(zSongPSG1), a
(1) 1722/     7D3 : 32 C0 1D            		ld	(zSongPSG2), a
(1) 1723/     7D6 : C3 B0 08            		jp	SilencePSG
(1) 1724/     7D9 :                     ; End of function StopDrumPSG
(1) 1725/     7D9 :                     
(1) 1726/     7D9 :                     
(1) 1727/     7D9 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1728/     7D9 :                     
(1) 1729/     7D9 :                     
(1) 1730/     7D9 :                     DoFading:
(1) 1731/     7D9 : 21 0D 1C            		ld	hl, zFadeOutTimeout
(1) 1732/     7DC : 7E                  		ld	a, (hl)
(1) 1733/     7DD : B7                  		or	a
(1) 1734/     7DE : C8                  		ret	z
(1) 1735/     7DF : FC C6 07            		call	m, StopDrumPSG
(1) 1736/     7E2 : CB BE               		res	7, (hl)
(1) 1737/     7E4 : 3A 0F 1C            		ld	a, (zFadeDelayTimeout)
(1) 1738/     7E7 : 3D                  		dec	a
(1) 1739/     7E8 : 28 04               		jr	z, loc_7EE
(1) 1740/     7EA : 32 0F 1C            		ld	(zFadeDelayTimeout), a
(1) 1741/     7ED : C9                  		ret
(1) 1742/     7EE :                     ; ---------------------------------------------------------------------------
(1) 1743/     7EE :                     
(1) 1744/     7EE :                     loc_7EE:
(1) 1745/     7EE : 3A 0E 1C            		ld	a, (zFadeDelay)
(1) 1746/     7F1 : 32 0F 1C            		ld	(zFadeDelayTimeout), a
(1) 1747/     7F4 : 3A 0D 1C            		ld	a, (zFadeOutTimeout)
(1) 1748/     7F7 : 3D                  		dec	a
(1) 1749/     7F8 : 32 0D 1C            		ld	(zFadeOutTimeout), a
(1) 1750/     7FB : 28 39               		jr	z, StopAllSound
(1) 1751/     7FD : 21 04 1C            		ld	hl, zMusicBank
(1) 1752/     800 : 7E                  		ld	a, (hl)
(1) 1753/     801 : (MACRO)              		bankswitch
(1) 1753/     801 : 21 00 60                            ld      hl, zBankRegister
(1) 1753/     804 : 77                                  ld      (hl), a
(1) 1753/     805 :                                     rept 5
(1) 1753/     805 :                                             rra
(1) 1753/     805 :                                             ld      (hl), a
(1) 1753/     805 :                                     endm
(1) 1753/     805 : 1F                                          rra
(1) 1753/     806 : 77                                          ld      (hl), a
(1) 1753/     807 : 1F                                          rra
(1) 1753/     808 : 77                                          ld      (hl), a
(1) 1753/     809 : 1F                                          rra
(1) 1753/     80A : 77                                          ld      (hl), a
(1) 1753/     80B : 1F                                          rra
(1) 1753/     80C : 77                                          ld      (hl), a
(1) 1753/     80D : 1F                                          rra
(1) 1753/     80E : 77                                          ld      (hl), a
(1) 1753/     80F : AF                                  xor     a
(1) 1753/     810 :                                     rept 3
(1) 1753/     810 :                                     ld      (hl), a
(1) 1753/     810 :                                     endm
(1) 1753/     810 : 77                                  ld      (hl), a
(1) 1753/     811 : 77                                  ld      (hl), a
(1) 1753/     812 : 77                                  ld      (hl), a
(1) 1754/     813 : 21 06 1C            		ld	hl, zUnk_1C06
(1) 1755/     816 : 34                  		inc	(hl)
(1) 1756/     817 : DD 21 40 1C         		ld	ix, zTracksStart
(1) 1757/     81B : 06 06               		ld	b, 6
(1) 1758/     81D :                     
(1) 1759/     81D :                     loc_81D:
(1) 1760/     81D : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1) 1761/     821 : 28 0B               		jr	z, loc_82E
(1) 1762/     823 : DD CB 00 56         		bit	2, (ix+zTrack.PlaybackControl)
(1) 1763/     827 : 20 05               		jr	nz, loc_82E
(1) 1764/     829 : C5                  		push	bc
(1) 1765/     82A : CD 0F 0B            		call	RefreshVolume
(1) 1766/     82D : C1                  		pop	bc
(1) 1767/     82E :                     
(1) 1768/     82E :                     loc_82E:
(1) 1769/     82E : 11 30 00            		ld	de, zTrack.len
(1) 1770/     831 : DD 19               		add	ix, de
(1) 1771/     833 : 10 E8               		djnz	loc_81D
(1) 1772/     835 : C9                  		ret
(1) 1773/     836 :                     ; End of function DoFading
(1) 1774/     836 :                     
(1) 1775/     836 :                     
(1) 1776/     836 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1777/     836 :                     
(1) 1778/     836 :                     
(1) 1779/     836 :                     StopAllSound:
(1) 1780/     836 : 21 09 1C            		ld	hl, zTempVariablesStart
(1) 1781/     839 : 11 0A 1C            		ld	de, zTempVariablesStart+1
(1) 1782/     83C : 01 96 03            		ld	bc, zTempVariablesEnd-zTempVariablesStart-1
(1) 1783/     83F : 36 00               		ld	(hl), 0
(1) 1784/     841 : ED B0               		ldir
(1) 1785/     843 : DD 21 0B 06         		ld	ix, FMInitBytes
(1) 1786/     847 : 06 06               		ld	b, 6
(1) 1787/     849 :                     
(1) 1788/     849 :                     loc_849:
(1) 1789/     849 : C5                  		push	bc
(1) 1790/     84A : CD 1C 09            		call	SilenceFMChn
(1) 1791/     84D : CD 7A 08            		call	DisableSSGEG
(1) 1792/     850 : DD 23               		inc	ix
(1) 1793/     852 : DD 23               		inc	ix
(1) 1794/     854 : C1                  		pop	bc
(1) 1795/     855 : 10 F2               		djnz	loc_849
(1) 1796/     857 : 06 07               		ld	b, 7
(1) 1797/     859 : AF                  		xor	a
(1) 1798/     85A : 32 06 1C            		ld	(zUnk_1C06), a
(1) 1799/     85D : 32 3C 1C            		ld	(zDACIndex), a
(1) 1800/     860 : 32 0D 1C            		ld	(zFadeOutTimeout), a
(1) 1801/     863 : CD B0 08            		call	SilencePSG
(1) 1802/     866 : 0E 00               		ld	c, 0
(1) 1803/     868 : 3E 2B               		ld	a, 2Bh
(1) 1804/     86A : CD 26 00            		call	WriteFMI
(1) 1805/     86D :                     
(1) 1806/     86D :                     ResetSpcFM3Mode:
(1) 1807/     86D : AF                  		xor	a
(1) 1808/     86E : 32 12 1C            		ld	(zFM3Settings), a
(1) 1809/     871 : 4F                  		ld	c, a
(1) 1810/     872 : 3E 27               		ld	a, 27h
(1) 1811/     874 : CD 26 00            		call	WriteFMI
(1) 1812/     877 : C3 05 06            		jp	ClearSoundID
(1) 1813/     87A :                     ; End of function StopAllSound
(1) 1814/     87A :                     
(1) 1815/     87A :                     
(1) 1816/     87A :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1817/     87A :                     
(1) 1818/     87A :                     
(1) 1819/     87A :                     DisableSSGEG:
(1) 1820/     87A : 3E 90               		ld	a, 90h
(1) 1821/     87C : 0E 00               		ld	c, 0
(1) 1822/     87E : C3 30 09            		jp	SendAllFMOps
(1) 1823/     881 :                     ; End of function DisableSSGEG
(1) 1824/     881 :                     
(1) 1825/     881 :                     ; ---------------------------------------------------------------------------
(1) 1826/     881 :                     
(1) 1827/     881 :                     SilenceAll:
(1) 1828/     881 : CD B0 08            		call	SilencePSG
(1) 1829/     884 : C5                  		push	bc
(1) 1830/     885 : F5                  		push	af
(1) 1831/     886 : 06 03               		ld	b, 3
(1) 1832/     888 : 3E B4               		ld	a, 0B4h
(1) 1833/     88A : 0E 00               		ld	c, 0
(1) 1834/     88C :                     
(1) 1835/     88C :                     loc_88C:
(1) 1836/     88C : F5                  		push	af
(1) 1837/     88D : CD 26 00            		call	WriteFMI
(1) 1838/     890 : F1                  		pop	af
(1) 1839/     891 : 3C                  		inc	a
(1) 1840/     892 : 10 F8               		djnz	loc_88C
(1) 1841/     894 : 06 03               		ld	b, 3
(1) 1842/     896 : 3E B4               		ld	a, 0B4h
(1) 1843/     898 :                     
(1) 1844/     898 :                     loc_898:
(1) 1845/     898 : F5                  		push	af
(1) 1849/     899 : CD 30 00            		call	WriteFMII
(1) 1851/     89C : F1                  		pop	af
(1) 1852/     89D : 3C                  		inc	a
(1) 1853/     89E : 10 F8               		djnz	loc_898
(1) 1854/     8A0 : 0E 00               		ld	c, 0
(1) 1855/     8A2 : 06 07               		ld	b, 7
(1) 1856/     8A4 : 3E 28               		ld	a, 28h
(1) 1857/     8A6 :                     
(1) 1858/     8A6 :                     loc_8A6:
(1) 1859/     8A6 : F5                  		push	af
(1) 1860/     8A7 : CD 26 00            		call	WriteFMI
(1) 1861/     8AA : 0C                  		inc	c
(1) 1862/     8AB : F1                  		pop	af
(1) 1863/     8AC : 10 F8               		djnz	loc_8A6
(1) 1864/     8AE : F1                  		pop	af
(1) 1865/     8AF : C1                  		pop	bc
(1) 1866/     8B0 :                     
(1) 1867/     8B0 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1868/     8B0 :                     
(1) 1869/     8B0 :                     
(1) 1870/     8B0 :                     SilencePSG:
(1) 1871/     8B0 : C5                  		push	bc
(1) 1872/     8B1 : 06 04               		ld	b, 4
(1) 1873/     8B3 : 3E 9F               		ld	a, 9Fh
(1) 1874/     8B5 :                     
(1) 1875/     8B5 :                     loc_8B5:
(1) 1876/     8B5 : 32 11 7F            		ld	(zPSG), a
(1) 1877/     8B8 : C6 20               		add	a, 20h
(1) 1878/     8BA : 10 F9               		djnz	loc_8B5
(1) 1879/     8BC : C1                  		pop	bc
(1) 1880/     8BD : C3 05 06            		jp	ClearSoundID
(1) 1881/     8C0 :                     ; End of function SilencePSG
(1) 1882/     8C0 :                     
(1) 1883/     8C0 :                     
(1) 1884/     8C0 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1885/     8C0 :                     
(1) 1886/     8C0 :                     
(1) 1887/     8C0 :                     DoTempo:
(1) 1888/     8C0 : 3A 14 1C            		ld	a, (zCurrentTempo)
(1) 1889/     8C3 : 21 13 1C            		ld	hl, zTempoAccumulator
(1) 1890/     8C6 : 86                  		add	a, (hl)
(1) 1891/     8C7 : 77                  		ld	(hl), a
(1) 1892/     8C8 : D0                  		ret	nc
(1) 1893/     8C9 : 21 4B 1C            		ld	hl, zTracksStart+zTrack.DurationTimeout
(1) 1894/     8CC : 11 30 00            		ld	de, zTrack.len
(1) 1895/     8CF : 06 0A               		ld	b, (zTracksEnd-zTracksStart)/zTrack.len ; Number of tracks
(1) 1896/     8D1 :                     
(1) 1897/     8D1 :                     loc_8D1:
(1) 1898/     8D1 : 34                  		inc	(hl)
(1) 1899/     8D2 : 19                  		add	hl, de
(1) 1900/     8D3 : 10 FC               		djnz	loc_8D1
(1) 1901/     8D5 : C9                  		ret
(1) 1902/     8D6 :                     ; End of function DoTempo
(1) 1903/     8D6 :                     
(1) 1904/     8D6 :                     
(1) 1905/     8D6 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1906/     8D6 :                     
(1) 1907/     8D6 :                     
(1) 1908/     8D6 :                     DoSoundQueue:
(1) 1909/     8D6 : ED 5F               		ld	a, r
(1) 1910/     8D8 : 32 17 1C            		ld	(zUnk_1C17), a
(1) 1911/     8DB : 11 0A 1C            		ld	de, zSoundQueue1
(1) 1912/     8DE : 06 03               		ld	b, (zSoundQueueEnd-zSoundQueueStart)-1
(1) 1913/     8E0 :                     
(1) 1914/     8E0 :                     loc_8E0:
(1) 1915/     8E0 : 1A                  		ld	a, (de)
(1) 1916/     8E1 : 4F                  		ld	c, a
(1) 1917/     8E2 : CB 7F               		bit	7, a
(1) 1918/     8E4 : 28 1F               		jr	z, loc_905
(1) 1919/     8E6 : D6 86               		sub	bgm_Last-1
(1) 1923/     8E8 : DA 0B 09            		jp	c, loc_90B
(1) 1925/     8EB : D6 1A               		sub	1Ah
(1) 1926/     8ED : 21 85 11            		ld	hl, SndPriorities
(1) 1927/     8F0 : 85                  		add	a, l
(1) 1928/     8F1 : 6F                  		ld	l, a
(1) 1929/     8F2 : 8C                  		adc	a, h
(1) 1930/     8F3 : 95                  		sub	l
(1) 1931/     8F4 : 67                  		ld	h, a
(1) 1932/     8F5 : 3A 18 1C            		ld	a, (zUnk_1C18)
(1) 1933/     8F8 : BE                  		cp	(hl)
(1) 1934/     8F9 : 28 02               		jr	z, loc_8FD
(1) 1935/     8FB : 30 08               		jr	nc, loc_905
(1) 1936/     8FD :                     
(1) 1937/     8FD :                     loc_8FD:
(1) 1938/     8FD : 79                  		ld	a, c
(1) 1939/     8FE : 32 09 1C            		ld	(zSoundQueue0), a
(1) 1940/     901 : 7E                  		ld	a, (hl)
(1) 1941/     902 : 32 18 1C            		ld	(zUnk_1C18), a
(1) 1942/     905 :                     
(1) 1943/     905 :                     loc_905:
(1) 1944/     905 : AF                  		xor	a
(1) 1945/     906 : 12                  		ld	(de), a
(1) 1946/     907 : 13                  		inc	de
(1) 1947/     908 : 10 D6               		djnz	loc_8E0
(1) 1948/     90A : C9                  		ret
(1) 1949/     90B :                     ; ---------------------------------------------------------------------------
(1) 1950/     90B :                     
(1) 1951/     90B :                     loc_90B:
(1) 1952/     90B : 79                  		ld	a, c
(1) 1953/     90C : 32 09 1C            		ld	(zSoundQueue0), a
(1) 1954/     90F : AF                  		xor	a
(1) 1955/     910 : 32 18 1C            		ld	(zUnk_1C18), a
(1) 1956/     913 : 11 0A 1C            		ld	de, zSoundQueue1
(1) 1957/     916 : 12                  		ld	(de), a
(1) 1958/     917 : 13                  		inc	de
(1) 1959/     918 : 12                  		ld	(de), a
(1) 1960/     919 : 13                  		inc	de
(1) 1961/     91A : 12                  		ld	(de), a
(1) 1962/     91B : C9                  		ret
(1) 1963/     91C :                     ; End of function DoSoundQueue
(1) 1964/     91C :                     
(1) 1965/     91C :                     
(1) 1966/     91C :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1967/     91C :                     
(1) 1968/     91C :                     
(1) 1969/     91C :                     SilenceFMChn:
(1) 1970/     91C : CD 2C 09            		call	SetMaxRelRate
(1) 1971/     91F : 3E 40               		ld	a, 40h
(1) 1972/     921 : 0E 7F               		ld	c, 7Fh
(1) 1973/     923 : CD 30 09            		call	SendAllFMOps
(1) 1974/     926 : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)
(1) 1975/     929 : C3 FC 02            		jp	FMNoteOff
(1) 1976/     92C :                     ; End of function SilenceFMChn
(1) 1977/     92C :                     
(1) 1978/     92C :                     
(1) 1979/     92C :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1980/     92C :                     
(1) 1981/     92C :                     
(1) 1982/     92C :                     SetMaxRelRate:
(1) 1983/     92C : 3E 80               		ld	a, 80h
(1) 1984/     92E : 0E FF               		ld	c, 0FFh
(1) 1985/     930 :                     ; End of function SetMaxRelRate
(1) 1986/     930 :                     
(1) 1987/     930 :                     
(1) 1988/     930 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1989/     930 :                     
(1) 1990/     930 :                     
(1) 1991/     930 :                     SendAllFMOps:
(1) 1992/     930 : 06 04               		ld	b, 4
(1) 1993/     932 :                     
(1) 1994/     932 :                     loc_932:
(1) 1995/     932 : F5                  		push	af
(1) 1996/     933 : DF                  		rst	WriteFMIorII
(1) 1997/     934 : F1                  		pop	af
(1) 1998/     935 : C6 04               		add	a, 4
(1) 1999/     937 : 10 F9               		djnz	loc_932
(1) 2000/     939 : C9                  		ret
(1) 2001/     93A :                     ; End of function SendAllFMOps
(1) 2002/     93A :                     
(1) 2003/     93A :                     ; ---------------------------------------------------------------------------
(1) 2004/     93A : FF 03 FF 03 FF 03   PSGFreqs:	dw  3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3F7h,	3BEh, 388h
              940 : FF 03 FF 03 FF 03 
              946 : FF 03 FF 03 FF 03 
              94C : F7 03 BE 03 88 03 
(1) 2005/     952 : 56 03 26 03 F9 02   		dw  356h, 326h,	2F9h, 2CEh, 2A5h, 280h,	25Ch, 23Ah, 21Ah, 1FBh,	1DFh, 1C4h
              958 : CE 02 A5 02 80 02 
              95E : 5C 02 3A 02 1A 02 
              964 : FB 01 DF 01 C4 01 
(1) 2006/     96A : AB 01 93 01 7D 01   		dw  1ABh, 193h,	17Dh, 167h, 153h, 140h,	12Eh, 11Dh, 10Dh, 0FEh,	0EFh, 0E2h
              970 : 67 01 53 01 40 01 
              976 : 2E 01 1D 01 0D 01 
              97C : FE 00 EF 00 E2 00 
(1) 2007/     982 : D6 00 C9 00 BE 00   		dw  0D6h, 0C9h,	0BEh, 0B4h, 0A9h, 0A0h,	 97h,  8Fh,  87h,  7Fh,	 78h,  71h
              988 : B4 00 A9 00 A0 00 
              98E : 97 00 8F 00 87 00 
              994 : 7F 00 78 00 71 00 
(1) 2008/     99A : 6B 00 65 00 5F 00   		dw   6Bh,  65h,	 5Fh,  5Ah,  55h,  50h,	 4Bh,  47h,  43h,  40h,	 3Ch,  39h
              9A0 : 5A 00 55 00 50 00 
              9A6 : 4B 00 47 00 43 00 
              9AC : 40 00 3C 00 39 00 
(1) 2009/     9B2 : 36 00 33 00 30 00   		dw   36h,  33h,	 30h,  2Dh,  2Bh,  28h,	 26h,  24h,  22h,  20h,	 1Fh,  1Dh
              9B8 : 2D 00 2B 00 28 00 
              9BE : 26 00 24 00 22 00 
              9C4 : 20 00 1F 00 1D 00 
(1) 2010/     9CA : 1B 00 1A 00 18 00   		dw   1Bh,  1Ah,	 18h,  17h,  16h,  15h,	 13h,  12h,  11h,  10h,	   0,	 0
              9D0 : 17 00 16 00 15 00 
              9D6 : 13 00 12 00 11 00 
              9DC : 10 00 00 00 00 00 
(1) 2011/     9E2 : 84 02 AB 02 D3 02   FMFreqs:	dw  284h, 2ABh,	2D3h, 2FEh, 32Dh, 35Ch,	38Fh, 3C5h, 3FFh, 43Ch,	47Ch, 4C0h
              9E8 : FE 02 2D 03 5C 03 
              9EE : 8F 03 C5 03 FF 03 
              9F4 : 3C 04 7C 04 C0 04 
(1) 2012/     9FA :                     
(1) 2013/     9FA :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2014/     9FA :                     
(1) 2015/     9FA :                     
(1) 2016/     9FA :                     DrumUpdateTrack:
(1) 2017/     9FA : CD CF 02            		call	TrackTimeout
(1) 2018/     9FD : CC 01 0A            		call	z, DrumUpdate_Proc
(1) 2019/     A00 : C9                  		ret
(1) 2020/     A01 :                     ; End of function DrumUpdateTrack
(1) 2021/     A01 :                     
(1) 2022/     A01 :                     
(1) 2023/     A01 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2024/     A01 :                     
(1) 2025/     A01 :                     
(1) 2026/     A01 :                     DrumUpdate_Proc:
(1) 2027/     A01 : DD 5E 03            		ld	e, (ix+zTrack.DataPointerLow)
(1) 2028/     A04 : DD 56 04            		ld	d, (ix+zTrack.DataPointerHigh)
(1) 2029/     A07 :                     
(1) 2030/     A07 :                     loc_A07:
(1) 2031/     A07 : 1A                  		ld	a, (de)
(1) 2032/     A08 : 13                  		inc	de
(1) 2033/     A09 : FE E0               		cp	0E0h
(1) 2037/     A0B : D2 4E 0A            		jp	nc, cfHandler_Drum
(1) 2039/     A0E : B7                  		or	a
(1) 2040/     A0F : FA 16 0A            		jp	m, loc_A16
(1) 2041/     A12 : 1B                  		dec	de
(1) 2042/     A13 : DD 7E 0D            		ld	a, (ix+zTrack.FreqLow)
(1) 2043/     A16 :                     
(1) 2044/     A16 :                     loc_A16:
(1) 2045/     A16 : DD 77 0D            		ld	(ix+zTrack.FreqLow), a
(1) 2046/     A19 : B7                  		or	a
(1) 2047/     A1A : F2 3E 0A            		jp	p, loc_A3E
(1) 2048/     A1D : D5                  		push	de
(1) 2049/     A1E : D6 80               		sub	80h
(1) 2053/     A20 : CA 38 0A            		jp	z, loc_A38
(1) 2055/     A23 : 21 60 1D            		ld	hl, zSongFM6
(1) 2056/     A26 : CB D6               		set	2, (hl)
(1) 2057/     A28 : 08                  		ex	af, af'
(1) 2058/     A29 : CD F0 02            		call	DoNoteOff
(1) 2059/     A2C : 08                  		ex	af, af'
(1) 2060/     A2D : 21 40 1C            		ld	hl, zTracksStart
(1) 2061/     A30 : CB 56               		bit	2, (hl)
(1) 2065/     A32 : C2 38 0A            		jp	nz, loc_A38
(1) 2067/     A35 : 32 3C 1C            		ld	(zDACIndex), a
(1) 2068/     A38 :                     
(1) 2069/     A38 :                     loc_A38:
(1) 2070/     A38 : D1                  		pop	de
(1) 2071/     A39 : 21 60 1D            		ld	hl, zSongFM6
(1) 2072/     A3C : CB 96               		res	2, (hl)
(1) 2073/     A3E :                     
(1) 2074/     A3E :                     loc_A3E:
(1) 2075/     A3E : 1A                  		ld	a, (de)
(1) 2076/     A3F : 13                  		inc	de
(1) 2077/     A40 : B7                  		or	a
(1) 2078/     A41 : F2 9D 02            		jp	p, SetDuration
(1) 2079/     A44 : 1B                  		dec	de
(1) 2080/     A45 : DD 7E 0C            		ld	a, (ix+zTrack.SavedDuration)
(1) 2081/     A48 : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a
(1) 2082/     A4B : C3 A3 02            		jp	loc_2A3
(1) 2083/     A4E :                     ; ---------------------------------------------------------------------------
(1) 2084/     A4E :                     
(1) 2085/     A4E :                     cfHandler_Drum:
(1) 2086/     A4E : 21 54 0A            		ld	hl, cfReturn_Drum
(1) 2087/     A51 : C3 5B 0A            		jp	loc_A5B
(1) 2088/     A54 :                     ; ---------------------------------------------------------------------------
(1) 2089/     A54 :                     
(1) 2090/     A54 :                     cfReturn_Drum:
(1) 2091/     A54 : 13                  		inc	de
(1) 2092/     A55 : C3 07 0A            		jp	loc_A07
(1) 2093/     A58 :                     ; ---------------------------------------------------------------------------
(1) 2094/     A58 :                     
(1) 2095/     A58 :                     cfHandler:
(1) 2096/     A58 : 21 64 0A            		ld	hl, cfReturn
(1) 2097/     A5B :                     
(1) 2098/     A5B :                     loc_A5B:
(1) 2099/     A5B : E5                  		push	hl
(1) 2100/     A5C : D6 E0               		sub	0E0h
(1) 2101/     A5E : 21 68 0A            		ld	hl, cfPtrTable
(1) 2102/     A61 : CF                  		rst	ReadPtrTable
(1) 2103/     A62 : 1A                  		ld	a, (de)
(1) 2104/     A63 : E9                  		jp	(hl)
(1) 2105/     A64 :                     ; End of function DrumUpdate_Proc
(1) 2106/     A64 :                     
(1) 2107/     A64 :                     ; ---------------------------------------------------------------------------
(1) 2108/     A64 :                     
(1) 2109/     A64 :                     cfReturn:
(1) 2110/     A64 : 13                  		inc	de
(1) 2111/     A65 : C3 0B 02            		jp	loc_20B
(1) 2112/     A68 :                     ; ---------------------------------------------------------------------------
(1) 2113/     A68 : BF 0A               cfPtrTable:	dw cfE0_Pan
(1) 2114/     A6A : DB 0A               		dw cfE1_Detune
(1) 2115/     A6C : DF 0A               		dw cfE2_SetComm
(1) 2116/     A6E : E3 0A               		dw cfE3_SilenceTrk
(1) 2117/     A70 : E9 0A               		dw cfE4_PanAnim
(1) 2118/     A72 : FC 0A               		dw cfE5_ChgPFMVol
(1) 2119/     A74 : 04 0B               		dw cfE6_ChgFMVol
(1) 2120/     A76 : 3E 0B               		dw cfE7_Hold
(1) 2121/     A78 : 44 0B               		dw cfE8_NoteStop
(1) 2122/     A7A : D0 0A               		dw cfE9_SetLFO
(1) 2123/     A7C : B6 0A               		dw cfEA_PlayDAC
(1) 2124/     A7E : 4E 0B               		dw cfEB_LoopExit
(1) 2125/     A80 : 64 0B               		dw cfEC_ChgPSGVol
(1) 2126/     A82 : 7E 0B               		dw cfED_FMChnWrite
(1) 2127/     A84 : 83 0B               		dw cfEE_FM1Write
(1) 2128/     A86 : 90 0B               		dw cfEF_SetIns
(1) 2129/     A88 : CD 0B               		dw cfF0_Mods.betup
(1) 2130/     A8A : DB 0B               		dw cfF1_ModTypePFM
(1) 2131/     A8C : E7 0B               		dw cfF2_StopTrk
(1) 2132/     A8E : AB 0C               		dw cfF3_PSGNoise
(1) 2133/     A90 : E3 0B               		dw cfF4_ModType
(1) 2134/     A92 : CA 0C               		dw cfF5_SetPSGIns
(1) 2135/     A94 : D3 0C               		dw cfF6_GoTo
(1) 2136/     A96 : D9 0C               		dw cfF7_Loop
(1) 2137/     A98 : F0 0C               		dw cfF8_GoSub
(1) 2138/     A9A : 0A 0D               		dw cfF9_Return
(1) 2139/     A9C : 1D 0D               		dw cfFA_TickMult
(1) 2140/     A9E : 21 0D               		dw cfFB_ChgTransp
(1) 2141/     AA0 : 28 0D               		dw cfFC_PitchSlide
(1) 2142/     AA2 : 3E 0D               		dw cfFD_RawFrqMode
(1) 2143/     AA4 : 4C 0D               		dw cfFE_SpcFM3Mode
(1) 2144/     AA6 : 93 0D               		dw cfMetaCoordFlag
(1) 2145/     AA8 : 9A 0D               cfMetaPtrTable:	dw cf00_SetTempo
(1) 2146/     AAA : A1 0D               		dw cf01_PlaySnd
(1) 2147/     AAC : A5 0D               		dw cf02_MusPause
(1) 2148/     AAE : E0 0D               		dw cf03_CopyMem
(1) 2149/     AB0 : EE 0D               		dw cf04_TickMulAll
(1) 2150/     AB2 : FD 0D               		dw cf05_SSGEG
(1) 2151/     AB4 : 16 0E               		dw cf06_FMVolEnv
(1) 2152/     AB6 :                     ; ---------------------------------------------------------------------------
(1) 2153/     AB6 :                     
(1) 2154/     AB6 :                     cfEA_PlayDAC:
(1) 2155/     AB6 : 32 3C 1C            		ld	(zDACIndex), a
(1) 2156/     AB9 : 21 40 1C            		ld	hl, zTracksStart
(1) 2157/     ABC : CB D6               		set	2, (hl)
(1) 2158/     ABE : C9                  		ret
(1) 2159/     ABF :                     
(1) 2160/     ABF :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2161/     ABF :                     
(1) 2162/     ABF :                     
(1) 2163/     ABF :                     cfE0_Pan:
(1) 2164/     ABF : 0E 3F               		ld	c, 3Fh
(1) 2165/     AC1 :                     
(1) 2166/     AC1 :                     loc_AC1:
(1) 2167/     AC1 : DD 7E 0A            		ld	a, (ix+zTrack.AMSFMSPan)
(1) 2168/     AC4 : A1                  		and	c
(1) 2169/     AC5 : EB                  		ex	de, hl
(1) 2170/     AC6 : B6                  		or	(hl)
(1) 2171/     AC7 : DD 77 0A            		ld	(ix+zTrack.AMSFMSPan), a
(1) 2172/     ACA : 4F                  		ld	c, a
(1) 2173/     ACB : 3E B4               		ld	a, 0B4h
(1) 2174/     ACD : DF                  		rst	WriteFMIorII
(1) 2175/     ACE : EB                  		ex	de, hl
(1) 2176/     ACF : C9                  		ret
(1) 2177/     AD0 :                     ; End of function cfE0_Pan
(1) 2178/     AD0 :                     
(1) 2179/     AD0 :                     ; ---------------------------------------------------------------------------
(1) 2180/     AD0 :                     
(1) 2181/     AD0 :                     cfE9_SetLFO:
(1) 2182/     AD0 : 4F                  		ld	c, a
(1) 2183/     AD1 : 3E 22               		ld	a, 22h
(1) 2184/     AD3 : CD 26 00            		call	WriteFMI
(1) 2185/     AD6 : 13                  		inc	de
(1) 2186/     AD7 : 0E C0               		ld	c, 0C0h
(1) 2190/     AD9 : 18 E6               		jr	loc_AC1
(1) 2192/     ADB :                     ; ---------------------------------------------------------------------------
(1) 2193/     ADB :                     
(1) 2194/     ADB :                     cfE1_Detune:
(1) 2195/     ADB : DD 77 10            		ld	(ix+zTrack.Detune), a
(1) 2196/     ADE : C9                  		ret
(1) 2197/     ADF :                     ; ---------------------------------------------------------------------------
(1) 2198/     ADF :                     
(1) 2199/     ADF :                     cfE2_SetComm:
(1) 2200/     ADF : 32 16 1C            		ld	(zCommunicationByte), a
(1) 2201/     AE2 : C9                  		ret
(1) 2202/     AE3 :                     ; ---------------------------------------------------------------------------
(1) 2203/     AE3 :                     
(1) 2204/     AE3 :                     cfE3_SilenceTrk:
(1) 2205/     AE3 : CD 1C 09            		call	SilenceFMChn
(1) 2206/     AE6 : C3 E7 0B            		jp	cfF2_StopTrk
(1) 2207/     AE9 :                     ; ---------------------------------------------------------------------------
(1) 2208/     AE9 :                     
(1) 2209/     AE9 :                     cfE4_PanAnim:
(1) 2210/     AE9 : DD E5               		push	ix
(1) 2211/     AEB : E1                  		pop	hl
(1) 2212/     AEC : 01 11 00            		ld	bc, 11h
(1) 2213/     AEF : 09                  		add	hl, bc
(1) 2214/     AF0 : EB                  		ex	de, hl
(1) 2215/     AF1 : 01 05 00            		ld	bc, 5
(1) 2216/     AF4 : ED B0               		ldir
(1) 2217/     AF6 : 3E 01               		ld	a, 1
(1) 2218/     AF8 : 12                  		ld	(de), a
(1) 2219/     AF9 : EB                  		ex	de, hl
(1) 2220/     AFA : 1B                  		dec	de
(1) 2221/     AFB : C9                  		ret
(1) 2222/     AFC :                     ; ---------------------------------------------------------------------------
(1) 2223/     AFC :                     
(1) 2224/     AFC :                     cfE5_ChgPFMVol:
(1) 2225/     AFC : 13                  		inc	de
(1) 2226/     AFD : DD 86 06            		add	a, (ix+zTrack.Volume)
(1) 2227/     B00 : DD 77 06            		ld	(ix+zTrack.Volume),	a
(1) 2228/     B03 : 1A                  		ld	a, (de)
(1) 2229/     B04 :                     
(1) 2230/     B04 :                     cfE6_ChgFMVol:
(1) 2231/     B04 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 2232/     B08 : C0                  		ret	nz
(1) 2233/     B09 : DD 86 06            		add	a, (ix+zTrack.Volume)
(1) 2234/     B0C : DD 77 06            		ld	(ix+zTrack.Volume),	a
(1) 2235/     B0F :                     
(1) 2236/     B0F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2237/     B0F :                     
(1) 2238/     B0F :                     
(1) 2239/     B0F :                     RefreshVolume:
(1) 2240/     B0F : D5                  		push	de
(1) 2241/     B10 : 11 DA 04            		ld	de, zFMInstrumentTLTable
(1) 2242/     B13 : DD 6E 1C            		ld	l, (ix+zTrack.TLPtrLow)
(1) 2243/     B16 : DD 66 1D            		ld	h, (ix+zTrack.TLPtrHigh)
(1) 2244/     B19 : 06 04               		ld	b, zFMInstrumentTLTable_End-zFMInstrumentTLTable ; Number of entries
(1) 2245/     B1B :                     
(1) 2246/     B1B :                     loc_B1B:
(1) 2247/     B1B : 7E                  		ld	a, (hl)
(1) 2248/     B1C : B7                  		or	a
(1) 2249/     B1D : F2 33 0B            		jp	p, loc_B33
(1) 2250/     B20 : DD 86 06            		add	a, (ix+zTrack.Volume)
(1) 2251/     B23 : FA 28 0B            		jp	m, loc_B28
(1) 2252/     B26 : 3E FF               		ld	a, 0FFh
(1) 2253/     B28 :                     
(1) 2254/     B28 :                     loc_B28:
(1) 2255/     B28 : E5                  		push	hl
(1) 2256/     B29 : 21 06 1C            		ld	hl, zUnk_1C06
(1) 2257/     B2C : 86                  		add	a, (hl)
(1) 2258/     B2D : FA 32 0B            		jp	m, loc_B32
(1) 2259/     B30 : 3E FF               		ld	a, 0FFh
(1) 2260/     B32 :                     
(1) 2261/     B32 :                     loc_B32:
(1) 2262/     B32 : E1                  		pop	hl
(1) 2263/     B33 :                     
(1) 2264/     B33 :                     loc_B33:
(1) 2265/     B33 : E6 7F               		and	7Fh
(1) 2266/     B35 : 4F                  		ld	c, a
(1) 2267/     B36 : 1A                  		ld	a, (de)
(1) 2268/     B37 : DF                  		rst	WriteFMIorII
(1) 2269/     B38 : 13                  		inc	de
(1) 2270/     B39 : 23                  		inc	hl
(1) 2271/     B3A : 10 DF               		djnz	loc_B1B
(1) 2272/     B3C : D1                  		pop	de
(1) 2273/     B3D : C9                  		ret
(1) 2274/     B3E :                     ; End of function RefreshVolume
(1) 2275/     B3E :                     
(1) 2276/     B3E :                     ; ---------------------------------------------------------------------------
(1) 2277/     B3E :                     
(1) 2278/     B3E :                     cfE7_Hold:
(1) 2279/     B3E : DD CB 00 CE         		set	1, (ix+zTrack.PlaybackControl)
(1) 2280/     B42 : 1B                  		dec	de
(1) 2281/     B43 : C9                  		ret
(1) 2282/     B44 :                     ; ---------------------------------------------------------------------------
(1) 2283/     B44 :                     
(1) 2284/     B44 :                     cfE8_NoteStop:
(1) 2285/     B44 : CD C5 02            		call	TickMultiplier
(1) 2286/     B47 : DD 77 1E            		ld	(ix+zTrack.NoteFillTimeout), a
(1) 2287/     B4A : DD 77 1F            		ld	(ix+zTrack.NoteFillMaster), a
(1) 2288/     B4D : C9                  		ret
(1) 2289/     B4E :                     ; ---------------------------------------------------------------------------
(1) 2290/     B4E :                     
(1) 2291/     B4E :                     cfEB_LoopExit:
(1) 2292/     B4E : 13                  		inc	de
(1) 2293/     B4F : C6 28               		add	a, zTrack.LoopCounters
(1) 2294/     B51 : 4F                  		ld	c, a
(1) 2295/     B52 : 06 00               		ld	b, 0
(1) 2296/     B54 : DD E5               		push	ix
(1) 2297/     B56 : E1                  		pop	hl
(1) 2298/     B57 : 09                  		add	hl, bc
(1) 2299/     B58 : 7E                  		ld	a, (hl)
(1) 2300/     B59 : 3D                  		dec	a
(1) 2304/     B5A : CA 5F 0B            		jp	z, loc_B5F
(1) 2306/     B5D : 13                  		inc	de
(1) 2307/     B5E : C9                  		ret
(1) 2308/     B5F :                     ; ---------------------------------------------------------------------------
(1) 2309/     B5F :                     
(1) 2310/     B5F :                     loc_B5F:
(1) 2311/     B5F : AF                  		xor	a
(1) 2312/     B60 : 77                  		ld	(hl), a
(1) 2313/     B61 : C3 D3 0C            		jp	cfF6_GoTo
(1) 2314/     B64 :                     ; ---------------------------------------------------------------------------
(1) 2315/     B64 :                     
(1) 2316/     B64 :                     cfEC_ChgPSGVol:
(1) 2317/     B64 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 2318/     B68 : C8                  		ret	z
(1) 2319/     B69 : DD CB 00 A6         		res	4, (ix+zTrack.PlaybackControl)
(1) 2320/     B6D : DD 35 17            		dec	(ix+zTrack.VolEnv)
(1) 2321/     B70 : DD 86 06            		add	a, (ix+zTrack.Volume)
(1) 2322/     B73 : FE 0F               		cp	0Fh
(1) 2326/     B75 : DA 7A 0B            		jp	c, loc_B7A
(1) 2328/     B78 : 3E 0F               		ld	a, 0Fh
(1) 2329/     B7A :                     
(1) 2330/     B7A :                     loc_B7A:
(1) 2331/     B7A : DD 77 06            		ld	(ix+zTrack.Volume),	a
(1) 2332/     B7D : C9                  		ret
(1) 2333/     B7E :                     ; ---------------------------------------------------------------------------
(1) 2334/     B7E :                     
(1) 2335/     B7E :                     cfED_FMChnWrite:
(1) 2336/     B7E : CD 8A 0B            		call	ReadFMCommand
(1) 2340/     B81 : DF                  		rst	WriteFMIorII
(1) 2341/     B82 : C9                  		ret
(1) 2343/     B83 :                     ; ---------------------------------------------------------------------------
(1) 2344/     B83 :                     
(1) 2345/     B83 :                     cfEE_FM1Write:
(1) 2346/     B83 : CD 8A 0B            		call	ReadFMCommand
(1) 2350/     B86 : CD 26 00            		call	WriteFMI
(1) 2351/     B89 : C9                  		ret
(1) 2353/     B8A :                     
(1) 2354/     B8A :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2355/     B8A :                     
(1) 2356/     B8A :                     
(1) 2357/     B8A :                     ReadFMCommand:
(1) 2358/     B8A : EB                  		ex	de, hl
(1) 2359/     B8B : 7E                  		ld	a, (hl)
(1) 2360/     B8C : 23                  		inc	hl
(1) 2361/     B8D : 4E                  		ld	c, (hl)
(1) 2362/     B8E : EB                  		ex	de, hl
(1) 2363/     B8F : C9                  		ret
(1) 2364/     B90 :                     ; End of function ReadFMCommand
(1) 2365/     B90 :                     
(1) 2366/     B90 :                     ; ---------------------------------------------------------------------------
(1) 2367/     B90 :                     
(1) 2368/     B90 :                     cfEF_SetIns:
(1) 2369/     B90 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 2370/     B94 : 20 33               		jr	nz, loc_BC9
(1) 2371/     B96 : CD 2C 09            		call	SetMaxRelRate
(1) 2372/     B99 : 1A                  		ld	a, (de)
(1) 2373/     B9A : DD 77 08            		ld	(ix+zTrack.VoiceIndex),	a
(1) 2374/     B9D : B7                  		or	a
(1) 2375/     B9E : F2 BF 0B            		jp	p, loc_BBF
(1) 2376/     BA1 : 13                  		inc	de
(1) 2377/     BA2 : 1A                  		ld	a, (de)
(1) 2378/     BA3 : DD 77 0F            		ld	(ix+zTrack.VoiceSongID), a
(1) 2379/     BA6 :                     
(1) 2380/     BA6 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2381/     BA6 :                     
(1) 2382/     BA6 :                     
(1) 2383/     BA6 :                     SetInsFromSong:
(1) 2384/     BA6 : D5                  		push	de
(1) 2385/     BA7 : DD 7E 0F            		ld	a, (ix+zTrack.VoiceSongID)
(1) 2386/     BAA : D6 81               		sub	81h
(1) 2387/     BAC : 21 53 11            		ld	hl, MusicIndex
(1) 2388/     BAF : CF                  		rst	ReadPtrTable
(1) 2389/     BB0 : 7E                  		ld	a, (hl)
(1) 2390/     BB1 : 23                  		inc	hl
(1) 2391/     BB2 : 66                  		ld	h, (hl)
(1) 2392/     BB3 : 6F                  		ld	l, a
(1) 2393/     BB4 : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)
(1) 2394/     BB7 : E6 7F               		and	7Fh
(1) 2395/     BB9 : 47                  		ld	b, a
(1) 2396/     BBA : CD BB 04            		call	JumpToInsData
(1) 2400/     BBD : 18 05               		jr	loc_BC4
(1) 2402/     BBF :                     ; ---------------------------------------------------------------------------
(1) 2403/     BBF :                     
(1) 2404/     BBF :                     loc_BBF:
(1) 2405/     BBF : D5                  		push	de
(1) 2406/     BC0 : 47                  		ld	b, a
(1) 2407/     BC1 : CD AC 04            		call	GetFMInsPtr
(1) 2408/     BC4 :                     
(1) 2409/     BC4 :                     loc_BC4:
(1) 2410/     BC4 : CD E2 04            		call	SendFMIns
(1) 2411/     BC7 : D1                  		pop	de
(1) 2412/     BC8 : C9                  		ret
(1) 2413/     BC9 :                     ; End of function SetInsFromSong
(1) 2414/     BC9 :                     
(1) 2415/     BC9 :                     ; ---------------------------------------------------------------------------
(1) 2416/     BC9 :                     
(1) 2417/     BC9 :                     loc_BC9:
(1) 2418/     BC9 : B7                  		or	a
(1) 2419/     BCA : F0                  		ret	p
(1) 2420/     BCB : 13                  		inc	de
(1) 2421/     BCC : C9                  		ret
(1) 2422/     BCD :                     ; ---------------------------------------------------------------------------
(1) 2423/     BCD :                     
(1) 2424/     BCD :                     cfF0_Mods.betup:
(1) 2425/     BCD : DD 73 20            		ld	(ix+zTrack.ModulationPtrLow), e
(1) 2426/     BD0 : DD 72 21            		ld	(ix+zTrack.ModulationPtrHigh), d
(1) 2427/     BD3 : DD 36 07 80         		ld	(ix+zTrack.ModulationCtrl), 80h
(1) 2428/     BD7 : 13                  		inc	de
(1) 2429/     BD8 : 13                  		inc	de
(1) 2430/     BD9 : 13                  		inc	de
(1) 2431/     BDA : C9                  		ret
(1) 2432/     BDB :                     ; ---------------------------------------------------------------------------
(1) 2433/     BDB :                     
(1) 2434/     BDB :                     cfF1_ModTypePFM:
(1) 2435/     BDB : 13                  		inc	de
(1) 2436/     BDC : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 2437/     BE0 : 20 01               		jr	nz, cfF4_ModType
(1) 2438/     BE2 : 1A                  		ld	a, (de)
(1) 2439/     BE3 :                     
(1) 2440/     BE3 :                     cfF4_ModType:
(1) 2441/     BE3 : DD 77 07            		ld	(ix+zTrack.ModulationCtrl), a
(1) 2442/     BE6 : C9                  		ret
(1) 2443/     BE7 :                     ; ---------------------------------------------------------------------------
(1) 2444/     BE7 :                     
(1) 2445/     BE7 :                     cfF2_StopTrk:
(1) 2446/     BE7 : DD CB 00 BE         		res	7, (ix+zTrack.PlaybackControl)
(1) 2447/     BEB : 3E 1F               		ld	a, 1Fh
(1) 2448/     BED : 32 15 1C            		ld	(zUnk_1C15), a
(1) 2449/     BF0 : CD F0 02            		call	DoNoteOff
(1) 2450/     BF3 : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)
(1) 2451/     BF6 : DD E5               		push	ix
(1) 2452/     BF8 : CD D7 06            		call	GetSFXChnPtrs
(1) 2453/     BFB : 3A 19 1C            		ld	a, (zUpdateSound)
(1) 2454/     BFE : B7                  		or	a
(1) 2455/     BFF : CA 94 0C            		jp	z, loc_C94
(1) 2456/     C02 : AF                  		xor	a
(1) 2457/     C03 : 32 18 1C            		ld	(zUnk_1C18), a
(1) 2458/     C06 : FD CB 00 7E         		bit	7, (iy+0)
(1) 2459/     C0A : 28 12               		jr	z, loc_C1E
(1) 2460/     C0C : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)
(1) 2461/     C0F : FD BE 01            		cp	(iy+1)
(1) 2462/     C12 : 20 0A               		jr	nz, loc_C1E
(1) 2463/     C14 : FD E5               		push	iy
(1) 2464/     C16 : FD 6E 2A            		ld	l, (iy+zTrack.VoicesLow)
(1) 2465/     C19 : FD 66 2B            		ld	h, (iy+zTrack.VoicesHigh)
(1) 2469/     C1C : 18 04               		jr	loc_C22
(1) 2471/     C1E :                     ; ---------------------------------------------------------------------------
(1) 2472/     C1E :                     
(1) 2473/     C1E :                     loc_C1E:
(1) 2474/     C1E : E5                  		push	hl
(1) 2475/     C1F : 2A 37 1C            		ld	hl, (zVoiceTblPtr)
(1) 2476/     C22 :                     
(1) 2477/     C22 :                     loc_C22:
(1) 2478/     C22 : DD E1               		pop	ix
(1) 2479/     C24 : DD CB 00 96         		res	2, (ix+zTrack.PlaybackControl)
(1) 2480/     C28 : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 2481/     C2C : 20 6B               		jr	nz, loc_C99
(1) 2482/     C2E : DD CB 00 7E         		bit	7, (ix+zTrack.PlaybackControl)
(1) 2483/     C32 : 28 60               		jr	z, loc_C94
(1) 2484/     C34 : 3E 02               		ld	a, 2
(1) 2485/     C36 : DD BE 01            		cp	(ix+zTrack.VoiceControl)
(1) 2486/     C39 : 20 0D               		jr	nz, loc_C48
(1) 2487/     C3B : 3E 4F               		ld	a, 4Fh
(1) 2488/     C3D : DD CB 00 46         		bit	0, (ix+zTrack.PlaybackControl)
(1) 2489/     C41 : 20 02               		jr	nz, loc_C45
(1) 2490/     C43 : E6 0F               		and	0Fh
(1) 2491/     C45 :                     
(1) 2492/     C45 :                     loc_C45:
(1) 2493/     C45 : CD 75 0D            		call	SendFM3SpcMode
(1) 2494/     C48 :                     
(1) 2495/     C48 :                     loc_C48:
(1) 2496/     C48 : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)
(1) 2497/     C4B : B7                  		or	a
(1) 2498/     C4C : F2 54 0C            		jp	p, loc_C54
(1) 2499/     C4F : CD A6 0B            		call	SetInsFromSong
(1) 2503/     C52 : 18 3D               		jr	loc_C91
(1) 2505/     C54 :                     ; ---------------------------------------------------------------------------
(1) 2506/     C54 :                     
(1) 2507/     C54 :                     loc_C54:
(1) 2508/     C54 : 47                  		ld	b, a
(1) 2509/     C55 : E5                  		push	hl
(1) 2510/     C56 : 21 04 1C            		ld	hl, zMusicBank
(1) 2511/     C59 : 7E                  		ld	a, (hl)
(1) 2512/     C5A : (MACRO)              		bankswitch
(1) 2512/     C5A : 21 00 60                            ld      hl, zBankRegister
(1) 2512/     C5D : 77                                  ld      (hl), a
(1) 2512/     C5E :                                     rept 5
(1) 2512/     C5E :                                             rra
(1) 2512/     C5E :                                             ld      (hl), a
(1) 2512/     C5E :                                     endm
(1) 2512/     C5E : 1F                                          rra
(1) 2512/     C5F : 77                                          ld      (hl), a
(1) 2512/     C60 : 1F                                          rra
(1) 2512/     C61 : 77                                          ld      (hl), a
(1) 2512/     C62 : 1F                                          rra
(1) 2512/     C63 : 77                                          ld      (hl), a
(1) 2512/     C64 : 1F                                          rra
(1) 2512/     C65 : 77                                          ld      (hl), a
(1) 2512/     C66 : 1F                                          rra
(1) 2512/     C67 : 77                                          ld      (hl), a
(1) 2512/     C68 : AF                                  xor     a
(1) 2512/     C69 :                                     rept 3
(1) 2512/     C69 :                                     ld      (hl), a
(1) 2512/     C69 :                                     endm
(1) 2512/     C69 : 77                                  ld      (hl), a
(1) 2512/     C6A : 77                                  ld      (hl), a
(1) 2512/     C6B : 77                                  ld      (hl), a
(1) 2513/     C6C : E1                  		pop	hl
(1) 2514/     C6D : CD BB 04            		call	JumpToInsData
(1) 2515/     C70 : CD E2 04            		call	SendFMIns
(1) 2516/     C73 : E5                  		push	hl
(1) 2517/     C74 : (MACRO)              		bankswitch_2 SoundBank
(1) 2517/     C74 : 21 00 60                            ld      hl,zBankRegister
(1) 2517/     C77 : AF                                  xor     a       ; a = 0
(1) 2517/     C78 : 1E 01                               ld      e,1     ; e = 1
(1) 2517/     C7A : =0H                  .cnt    := 0
(1) 2517/     C7A :                                     rept 9
(1) 2517/     C7A :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7A :                                             db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C7A :                     .cnt            := .cnt+1
(1) 2517/     C7A :                                     endm
(1) 2517/     C7A :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7A : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C7B : =1H                  .cnt            := .cnt+1
(1) 2517/     C7B :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7B : 73                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C7C : =2H                  .cnt            := .cnt+1
(1) 2517/     C7C :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7C : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C7D : =3H                  .cnt            := .cnt+1
(1) 2517/     C7D :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7D : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C7E : =4H                  .cnt            := .cnt+1
(1) 2517/     C7E :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7E : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C7F : =5H                  .cnt            := .cnt+1
(1) 2517/     C7F :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C7F : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C80 : =6H                  .cnt            := .cnt+1
(1) 2517/     C80 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C80 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C81 : =7H                  .cnt            := .cnt+1
(1) 2517/     C81 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C81 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C82 : =8H                  .cnt            := .cnt+1
(1) 2517/     C82 :                                             ; this is either ld (hl),a or ld (hl),e
(1) 2517/     C82 : 77                                          db 73h|((((SoundBank)&(1<<(15+.cnt)))=0)<<2)
(1) 2517/     C83 : =9H                  .cnt            := .cnt+1
(1) 2518/     C83 : E1                  		pop	hl
(1) 2519/     C84 : DD 7E 18            		ld	a, (ix+zTrack.FMVolEnv)
(1) 2520/     C87 : B7                  		or	a
(1) 2521/     C88 : F2 94 0C            		jp	p, loc_C94
(1) 2522/     C8B : DD 5E 19            		ld	e, (ix+zTrack.FMVolEnvMask)
(1) 2523/     C8E : DD 56 1A            		ld	d, (ix+zTrack.PSGNoise)
(1) 2524/     C91 :                     
(1) 2525/     C91 :                     loc_C91:
(1) 2526/     C91 : CD 07 0E            		call	Sends.bSGEG
(1) 2527/     C94 :                     
(1) 2528/     C94 :                     loc_C94:
(1) 2529/     C94 : DD E1               		pop	ix
(1) 2530/     C96 : E1                  		pop	hl
(1) 2531/     C97 : E1                  		pop	hl
(1) 2532/     C98 : C9                  		ret
(1) 2533/     C99 :                     ; ---------------------------------------------------------------------------
(1) 2534/     C99 :                     
(1) 2535/     C99 :                     loc_C99:
(1) 2536/     C99 : DD CB 00 46         		bit	0, (ix+zTrack.PlaybackControl)
(1) 2537/     C9D : 28 F5               		jr	z, loc_C94
(1) 2538/     C9F : DD 7E 1A            		ld	a, (ix+zTrack.PSGNoise)
(1) 2539/     CA2 : B7                  		or	a
(1) 2540/     CA3 : F2 A9 0C            		jp	p, loc_CA9
(1) 2541/     CA6 : 32 11 7F            		ld	(zPSG), a
(1) 2542/     CA9 :                     
(1) 2543/     CA9 :                     loc_CA9:
(1) 2547/     CA9 : 18 E9               		jr	loc_C94
(1) 2549/     CAB :                     ; ---------------------------------------------------------------------------
(1) 2550/     CAB :                     
(1) 2551/     CAB :                     cfF3_PSGNoise:
(1) 2552/     CAB : DD CB 01 56         		bit	2, (ix+zTrack.VoiceControl)
(1) 2553/     CAF : C0                  		ret	nz
(1) 2554/     CB0 : 3E DF               		ld	a, 0DFh
(1) 2555/     CB2 : 32 11 7F            		ld	(zPSG), a
(1) 2556/     CB5 : 1A                  		ld	a, (de)
(1) 2557/     CB6 : DD 77 1A            		ld	(ix+zTrack.PSGNoise), a
(1) 2558/     CB9 : DD CB 00 C6         		set	0, (ix+zTrack.PlaybackControl)
(1) 2559/     CBD : B7                  		or	a
(1) 2560/     CBE : 20 06               		jr	nz, loc_CC6
(1) 2561/     CC0 : DD CB 00 86         		res	0, (ix+zTrack.PlaybackControl)
(1) 2562/     CC4 : 3E FF               		ld	a, 0FFh
(1) 2563/     CC6 :                     
(1) 2564/     CC6 :                     loc_CC6:
(1) 2565/     CC6 : 32 11 7F            		ld	(zPSG), a
(1) 2566/     CC9 : C9                  		ret
(1) 2567/     CCA :                     ; ---------------------------------------------------------------------------
(1) 2568/     CCA :                     
(1) 2569/     CCA :                     cfF5_SetPSGIns:
(1) 2570/     CCA : DD CB 01 7E         		bit	7, (ix+zTrack.VoiceControl)
(1) 2571/     CCE : C8                  		ret	z
(1) 2572/     CCF : DD 77 08            		ld	(ix+zTrack.VoiceIndex),	a
(1) 2573/     CD2 : C9                  		ret
(1) 2574/     CD3 :                     ; ---------------------------------------------------------------------------
(1) 2575/     CD3 :                     
(1) 2576/     CD3 :                     cfF6_GoTo:
(1) 2577/     CD3 : EB                  		ex	de, hl
(1) 2578/     CD4 : 5E                  		ld	e, (hl)
(1) 2579/     CD5 : 23                  		inc	hl
(1) 2580/     CD6 : 56                  		ld	d, (hl)
(1) 2581/     CD7 : 1B                  		dec	de
(1) 2582/     CD8 : C9                  		ret
(1) 2583/     CD9 :                     ; ---------------------------------------------------------------------------
(1) 2584/     CD9 :                     
(1) 2585/     CD9 :                     cfF7_Loop:
(1) 2586/     CD9 : 13                  		inc	de
(1) 2587/     CDA : C6 28               		add	a, zTrack.LoopCounters
(1) 2588/     CDC : 4F                  		ld	c, a
(1) 2589/     CDD : 06 00               		ld	b, 0
(1) 2590/     CDF : DD E5               		push	ix
(1) 2591/     CE1 : E1                  		pop	hl
(1) 2592/     CE2 : 09                  		add	hl, bc
(1) 2593/     CE3 : 7E                  		ld	a, (hl)
(1) 2594/     CE4 : B7                  		or	a
(1) 2595/     CE5 : 20 02               		jr	nz, loc_CE9
(1) 2596/     CE7 : 1A                  		ld	a, (de)
(1) 2597/     CE8 : 77                  		ld	(hl), a
(1) 2598/     CE9 :                     
(1) 2599/     CE9 :                     loc_CE9:
(1) 2600/     CE9 : 13                  		inc	de
(1) 2601/     CEA : 35                  		dec	(hl)
(1) 2605/     CEB : C2 D3 0C            		jp	nz, cfF6_GoTo
(1) 2607/     CEE : 13                  		inc	de
(1) 2608/     CEF : C9                  		ret
(1) 2609/     CF0 :                     ; ---------------------------------------------------------------------------
(1) 2610/     CF0 :                     
(1) 2611/     CF0 :                     cfF8_GoSub:
(1) 2612/     CF0 : 4F                  		ld	c, a
(1) 2613/     CF1 : 13                  		inc	de
(1) 2614/     CF2 : 1A                  		ld	a, (de)
(1) 2615/     CF3 : 47                  		ld	b, a
(1) 2616/     CF4 : C5                  		push	bc
(1) 2617/     CF5 : DD E5               		push	ix
(1) 2618/     CF7 : E1                  		pop	hl
(1) 2619/     CF8 : DD 35 09            		dec	(ix+zTrack.StackPointer)
(1) 2620/     CFB : DD 4E 09            		ld	c, (ix+zTrack.StackPointer)
(1) 2621/     CFE : DD 35 09            		dec	(ix+zTrack.StackPointer)
(1) 2622/     D01 : 06 00               		ld	b, 0
(1) 2623/     D03 : 09                  		add	hl, bc
(1) 2624/     D04 : 72                  		ld	(hl), d
(1) 2625/     D05 : 2B                  		dec	hl
(1) 2626/     D06 : 73                  		ld	(hl), e
(1) 2627/     D07 : D1                  		pop	de
(1) 2628/     D08 : 1B                  		dec	de
(1) 2629/     D09 : C9                  		ret
(1) 2630/     D0A :                     ; ---------------------------------------------------------------------------
(1) 2631/     D0A :                     
(1) 2632/     D0A :                     cfF9_Return:
(1) 2633/     D0A : DD E5               		push	ix
(1) 2634/     D0C : E1                  		pop	hl
(1) 2635/     D0D : DD 4E 09            		ld	c, (ix+zTrack.StackPointer)
(1) 2636/     D10 : 06 00               		ld	b, 0
(1) 2637/     D12 : 09                  		add	hl, bc
(1) 2638/     D13 : 5E                  		ld	e, (hl)
(1) 2639/     D14 : 23                  		inc	hl
(1) 2640/     D15 : 56                  		ld	d, (hl)
(1) 2641/     D16 : DD 34 09            		inc	(ix+zTrack.StackPointer)
(1) 2642/     D19 : DD 34 09            		inc	(ix+zTrack.StackPointer)
(1) 2643/     D1C : C9                  		ret
(1) 2644/     D1D :                     ; ---------------------------------------------------------------------------
(1) 2645/     D1D :                     
(1) 2646/     D1D :                     cfFA_TickMult:
(1) 2647/     D1D : DD 77 02            		ld	(ix+zTrack.TempoDivider),	a
(1) 2648/     D20 : C9                  		ret
(1) 2649/     D21 :                     ; ---------------------------------------------------------------------------
(1) 2650/     D21 :                     
(1) 2651/     D21 :                     cfFB_ChgTransp:
(1) 2652/     D21 : DD 86 05            		add	a, (ix+zTrack.Transpose)
(1) 2653/     D24 : DD 77 05            		ld	(ix+zTrack.Transpose),	a
(1) 2654/     D27 : C9                  		ret
(1) 2655/     D28 :                     ; ---------------------------------------------------------------------------
(1) 2656/     D28 :                     
(1) 2657/     D28 :                     cfFC_PitchSlide:
(1) 2658/     D28 : FE 01               		cp	1
(1) 2659/     D2A : 20 05               		jr	nz, loc_D31
(1) 2660/     D2C : DD CB 00 EE         		set	5, (ix+zTrack.PlaybackControl)
(1) 2661/     D30 : C9                  		ret
(1) 2662/     D31 :                     ; ---------------------------------------------------------------------------
(1) 2663/     D31 :                     
(1) 2664/     D31 :                     loc_D31:
(1) 2665/     D31 : DD CB 00 8E         		res	1, (ix+zTrack.PlaybackControl)
(1) 2666/     D35 : DD CB 00 AE         		res	5, (ix+zTrack.PlaybackControl)
(1) 2667/     D39 : AF                  		xor	a
(1) 2668/     D3A : DD 77 10            		ld	(ix+zTrack.Detune), a
(1) 2669/     D3D : C9                  		ret
(1) 2670/     D3E :                     ; ---------------------------------------------------------------------------
(1) 2671/     D3E :                     
(1) 2672/     D3E :                     cfFD_RawFrqMode:
(1) 2673/     D3E : FE 01               		cp	1
(1) 2674/     D40 : 20 05               		jr	nz, loc_D47
(1) 2675/     D42 : DD CB 00 DE         		set	3, (ix+zTrack.PlaybackControl)
(1) 2676/     D46 : C9                  		ret
(1) 2677/     D47 :                     ; ---------------------------------------------------------------------------
(1) 2678/     D47 :                     
(1) 2679/     D47 :                     loc_D47:
(1) 2680/     D47 : DD CB 00 9E         		res	3, (ix+zTrack.PlaybackControl)
(1) 2681/     D4B : C9                  		ret
(1) 2682/     D4C :                     ; ---------------------------------------------------------------------------
(1) 2683/     D4C :                     
(1) 2684/     D4C :                     cfFE_SpcFM3Mode:
(1) 2685/     D4C : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)
(1) 2686/     D4F : FE 02               		cp	2
(1) 2687/     D51 : 20 2C               		jr	nz, SpcFM3_skip
(1) 2688/     D53 : DD CB 00 C6         		set	0, (ix+zTrack.PlaybackControl)
(1) 2689/     D57 : EB                  		ex	de, hl
(1) 2690/     D58 : CD ED 01            		call	GetFM3FreqPtr
(1) 2691/     D5B : 06 04               		ld	b, 4
(1) 2692/     D5D :                     
(1) 2693/     D5D :                     loc_D5D:
(1) 2694/     D5D : C5                  		push	bc
(1) 2695/     D5E : 7E                  		ld	a, (hl)
(1) 2696/     D5F : 23                  		inc	hl
(1) 2697/     D60 : E5                  		push	hl
(1) 2698/     D61 : 21 83 0D            		ld	hl, FM3_FreqVals
(1) 2699/     D64 : 87                  		add	a, a
(1) 2700/     D65 : 4F                  		ld	c, a
(1) 2701/     D66 : 06 00               		ld	b, 0
(1) 2702/     D68 : 09                  		add	hl, bc
(1) 2703/     D69 : ED A0               		ldi
(1) 2704/     D6B : ED A0               		ldi
(1) 2705/     D6D : E1                  		pop	hl
(1) 2706/     D6E : C1                  		pop	bc
(1) 2707/     D6F : 10 EC               		djnz	loc_D5D
(1) 2708/     D71 : EB                  		ex	de, hl
(1) 2709/     D72 : 1B                  		dec	de
(1) 2710/     D73 : 3E 4F               		ld	a, 4Fh
(1) 2711/     D75 :                     
(1) 2712/     D75 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2713/     D75 :                     
(1) 2714/     D75 :                     
(1) 2715/     D75 :                     SendFM3SpcMode:
(1) 2716/     D75 : 32 12 1C            		ld	(zFM3Settings), a
(1) 2717/     D78 : 4F                  		ld	c, a
(1) 2718/     D79 : 3E 27               		ld	a, 27h
(1) 2722/     D7B : CD 26 00            		call	WriteFMI
(1) 2723/     D7E : C9                  		ret
(1) 2725/     D7F :                     ; End of function SendFM3SpcMode
(1) 2726/     D7F :                     
(1) 2727/     D7F :                     ; ---------------------------------------------------------------------------
(1) 2728/     D7F :                     
(1) 2729/     D7F :                     SpcFM3_skip:
(1) 2730/     D7F : 13                  		inc	de
(1) 2731/     D80 : 13                  		inc	de
(1) 2732/     D81 : 13                  		inc	de
(1) 2733/     D82 : C9                  		ret
(1) 2734/     D83 :                     ; ---------------------------------------------------------------------------
(1) 2735/     D83 : 00 00 32 01 8E 01   FM3_FreqVals:	dw 0, 132h, 18Eh, 1E4h,	234h, 27Eh, 2C2h, 2F0h
              D89 : E4 01 34 02 7E 02 
              D8F : C2 02 F0 02       
(1) 2736/     D93 :                     ; ---------------------------------------------------------------------------
(1) 2737/     D93 :                     
(1) 2738/     D93 :                     cfMetaCoordFlag:
(1) 2739/     D93 : 21 A8 0A            		ld	hl, cfMetaPtrTable
(1) 2740/     D96 : CF                  		rst	ReadPtrTable
(1) 2741/     D97 : 13                  		inc	de
(1) 2742/     D98 : 1A                  		ld	a, (de)
(1) 2743/     D99 : E9                  		jp	(hl)
(1) 2744/     D9A :                     ; ---------------------------------------------------------------------------
(1) 2745/     D9A :                     
(1) 2746/     D9A :                     cf00_SetTempo:
(1) 2747/     D9A : 32 14 1C            		ld	(zCurrentTempo), a
(1) 2748/     D9D : 32 13 1C            		ld	(zTempoAccumulator), a
(1) 2749/     DA0 : C9                  		ret
(1) 2750/     DA1 :                     ; ---------------------------------------------------------------------------
(1) 2751/     DA1 :                     
(1) 2752/     DA1 :                     cf01_PlaySnd:
(1) 2753/     DA1 : 32 09 1C            		ld	(zSoundQueue0), a
(1) 2754/     DA4 : C9                  		ret
(1) 2755/     DA5 :                     ; ---------------------------------------------------------------------------
(1) 2756/     DA5 :                     
(1) 2757/     DA5 :                     cf02_MusPause:
(1) 2758/     DA5 : 32 11 1C            		ld	(zHaltFlag), a
(1) 2759/     DA8 : B7                  		or	a
(1) 2760/     DA9 : 28 1D               		jr	z, loc_DC8
(1) 2761/     DAB : DD E5               		push	ix
(1) 2762/     DAD : D5                  		push	de
(1) 2763/     DAE :                     
(1) 2764/     DAE :                     loc_DAE:
(1) 2765/     DAE : DD 21 40 1C         		ld	ix, zTracksStart
(1) 2766/     DB2 : 06 0A               		ld	b, (zTracksEnd-zTracksStart)/zTrack.len ; Number of tracks
(1) 2767/     DB4 : 11 30 00            		ld	de, zTrack.len
(1) 2768/     DB7 :                     
(1) 2769/     DB7 :                     loc_DB7:
(1) 2770/     DB7 : DD CB 00 BE         		res	7, (ix+zTrack.PlaybackControl)
(1) 2771/     DBB : CD F6 02            		call	SendNoteOff
(1) 2772/     DBE : DD 19               		add	ix, de
(1) 2773/     DC0 : 10 F5               		djnz	loc_DB7
(1) 2774/     DC2 : D1                  		pop	de
(1) 2775/     DC3 : DD E1               		pop	ix
(1) 2776/     DC5 : C3 B0 08            		jp	SilencePSG
(1) 2777/     DC8 :                     ; ---------------------------------------------------------------------------
(1) 2778/     DC8 :                     
(1) 2779/     DC8 :                     loc_DC8:
(1) 2780/     DC8 : DD E5               		push	ix
(1) 2781/     DCA : D5                  		push	de
(1) 2782/     DCB : DD 21 40 1C         		ld	ix, zTracksStart
(1) 2783/     DCF : 06 0A               		ld	b, (zTracksEnd-zTracksStart)/zTrack.len ; Number of tracks
(1) 2784/     DD1 : 11 30 00            		ld	de, zTrack.len
(1) 2785/     DD4 :                     
(1) 2786/     DD4 :                     loc_DD4:
(1) 2787/     DD4 : DD CB 00 FE         		set	7, (ix+zTrack.PlaybackControl)
(1) 2788/     DD8 : DD 19               		add	ix, de
(1) 2789/     DDA : 10 F8               		djnz	loc_DD4
(1) 2790/     DDC : D1                  		pop	de
(1) 2791/     DDD : DD E1               		pop	ix
(1) 2792/     DDF : C9                  		ret
(1) 2793/     DE0 :                     ; ---------------------------------------------------------------------------
(1) 2794/     DE0 :                     
(1) 2795/     DE0 :                     cf03_CopyMem:
(1) 2796/     DE0 : EB                  		ex	de, hl
(1) 2797/     DE1 : 5E                  		ld	e, (hl)
(1) 2798/     DE2 : 23                  		inc	hl
(1) 2799/     DE3 : 56                  		ld	d, (hl)
(1) 2800/     DE4 : 23                  		inc	hl
(1) 2801/     DE5 : 4E                  		ld	c, (hl)
(1) 2802/     DE6 : 06 00               		ld	b, 0
(1) 2803/     DE8 : 23                  		inc	hl
(1) 2804/     DE9 : EB                  		ex	de, hl
(1) 2805/     DEA : ED B0               		ldir
(1) 2806/     DEC : 1B                  		dec	de
(1) 2807/     DED : C9                  		ret
(1) 2808/     DEE :                     ; ---------------------------------------------------------------------------
(1) 2809/     DEE :                     
(1) 2810/     DEE :                     cf04_TickMulAll:
(1) 2811/     DEE : 06 0A               		ld	b, (zTracksEnd-zTracksStart)/zTrack.len ; Number of tracks
(1) 2812/     DF0 : 21 42 1C            		ld	hl, zTracksStart+zTrack.TempoDivider ; Want to change tempo dividers
(1) 2813/     DF3 :                     
(1) 2814/     DF3 :                     .loop:
(1) 2815/     DF3 : C5                  		push	bc				; Save bc
(1) 2816/     DF4 : 01 30 00            		ld	bc, zTrack.len			; Spacing between tracks
(1) 2817/     DF7 : 77                  		ld	(hl), a				; Set tempo divider for track
(1) 2818/     DF8 : 09                  		add	hl, bc				; Advance to next track
(1) 2819/     DF9 : C1                  		pop	bc				; Restore bc
(1) 2820/     DFA : 10 F7               		djnz	.loop
(1) 2821/     DFC : C9                  		ret
(1) 2822/     DFD :                     ; ---------------------------------------------------------------------------
(1) 2823/     DFD :                     
(1) 2824/     DFD :                     cf05_SSGEG:
(1) 2825/     DFD : DD 36 18 80         		ld	(ix+zTrack.HaveSSGEGFlag), 80h
(1) 2826/     E01 : DD 73 19            		ld	(ix+zTrack.SSGEGPointerLow), e
(1) 2827/     E04 : DD 72 1A            		ld	(ix+zTrack.SSGEGPointerHigh), d
(1) 2828/     E07 :                     
(1) 2829/     E07 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2830/     E07 :                     
(1) 2831/     E07 :                     
(1) 2832/     E07 :                     Sends.bSGEG:
(1) 2833/     E07 : 21 DE 04            		ld	hl, zFMInstrumentSSGEGTable
(1) 2834/     E0A : 06 04               		ld	b, zFMInstrumentSSGEGTable_End-zFMInstrumentSSGEGTable
(1) 2835/     E0C :                     
(1) 2836/     E0C :                     loc_E0C:
(1) 2837/     E0C : 1A                  		ld	a, (de)
(1) 2838/     E0D : 13                  		inc	de
(1) 2839/     E0E : 4F                  		ld	c, a
(1) 2840/     E0F : 7E                  		ld	a, (hl)
(1) 2841/     E10 : 23                  		inc	hl
(1) 2842/     E11 : DF                  		rst	WriteFMIorII
(1) 2843/     E12 : 10 F8               		djnz	loc_E0C
(1) 2844/     E14 : 1B                  		dec	de
(1) 2845/     E15 : C9                  		ret
(1) 2846/     E16 :                     ; End of function Sends.bSGEG
(1) 2847/     E16 :                     
(1) 2848/     E16 :                     ; ---------------------------------------------------------------------------
(1) 2849/     E16 :                     
(1) 2850/     E16 :                     cf06_FMVolEnv:
(1) 2851/     E16 : DD 77 18            		ld	(ix+zTrack.FMVolEnv), a
(1) 2852/     E19 : 13                  		inc	de
(1) 2853/     E1A : 1A                  		ld	a, (de)
(1) 2854/     E1B : DD 77 19            		ld	(ix+zTrack.FMVolEnvMask), a
(1) 2855/     E1E : C9                  		ret
(1) 2856/     E1F :                     ; ---------------------------------------------------------------------------
(1) 2857/     E1F :                     
(1) 2858/     E1F :                     UpdatePSGTrk:
(1) 2859/     E1F : CD CF 02            		call	TrackTimeout
(1) 2860/     E22 : 20 0D               		jr	nz, loc_E31
(1) 2861/     E24 : CD FD 01            		call	TrkUpdate_Proc
(1) 2862/     E27 : DD CB 00 66         		bit	4, (ix+zTrack.PlaybackControl)
(1) 2863/     E2B : C0                  		ret	nz
(1) 2864/     E2C : CD 95 03            		call	PrepareModulat
(1) 2868/     E2F : 18 0C               		jr	loc_E3D
(1) 2870/     E31 :                     ; ---------------------------------------------------------------------------
(1) 2871/     E31 :                     
(1) 2872/     E31 :                     loc_E31:
(1) 2873/     E31 : DD 7E 1E            		ld	a, (ix+zTrack.NoteFillTimeout)
(1) 2874/     E34 : B7                  		or	a
(1) 2875/     E35 : 28 06               		jr	z, loc_E3D
(1) 2876/     E37 : DD 35 1E            		dec	(ix+zTrack.NoteFillTimeout)
(1) 2877/     E3A : CA C7 0E            		jp	z, SetRest
(1) 2878/     E3D :                     
(1) 2879/     E3D :                     loc_E3D:
(1) 2880/     E3D : CD 66 04            		call	DoPitchSlide
(1) 2881/     E40 : CD C0 03            		call	DoModulation
(1) 2882/     E43 : DD CB 00 56         		bit	2, (ix+zTrack.PlaybackControl)
(1) 2883/     E47 : C0                  		ret	nz
(1) 2884/     E48 : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)
(1) 2885/     E4B : 7D                  		ld	a, l
(1) 2886/     E4C : E6 0F               		and	0Fh
(1) 2887/     E4E : B1                  		or	c
(1) 2888/     E4F : 32 11 7F            		ld	(zPSG), a
(1) 2889/     E52 : 7D                  		ld	a, l
(1) 2890/     E53 : E6 F0               		and	0F0h
(1) 2891/     E55 : B4                  		or	h
(1) 2892/     E56 : 0F                  		rrca
(1) 2893/     E57 : 0F                  		rrca
(1) 2894/     E58 : 0F                  		rrca
(1) 2895/     E59 : 0F                  		rrca
(1) 2896/     E5A : 32 11 7F            		ld	(zPSG), a
(1) 2897/     E5D : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)
(1) 2898/     E60 : B7                  		or	a
(1) 2899/     E61 : 0E 00               		ld	c, 0
(1) 2900/     E63 : 28 09               		jr	z, loc_E6E
(1) 2901/     E65 : 3D                  		dec	a
(1) 2902/     E66 : 21 74 0F            		ld	hl, VolEnvPtrs
(1) 2903/     E69 : CF                  		rst	ReadPtrTable
(1) 2904/     E6A : CD 95 0E            		call	DoPSGVolEnv
(1) 2905/     E6D : 4F                  		ld	c, a
(1) 2906/     E6E :                     
(1) 2907/     E6E :                     loc_E6E:
(1) 2908/     E6E : DD CB 00 66         		bit	4, (ix+zTrack.PlaybackControl)
(1) 2909/     E72 : C0                  		ret	nz
(1) 2910/     E73 : DD 7E 06            		ld	a, (ix+zTrack.Volume)
(1) 2911/     E76 : 81                  		add	a, c
(1) 2912/     E77 : CB 67               		bit	4, a
(1) 2913/     E79 : 28 02               		jr	z, loc_E7D
(1) 2914/     E7B : 3E 0F               		ld	a, 0Fh
(1) 2915/     E7D :                     
(1) 2916/     E7D :                     loc_E7D:
(1) 2917/     E7D : DD B6 01            		or	(ix+zTrack.VoiceControl)
(1) 2918/     E80 : C6 10               		add	a, 10h
(1) 2919/     E82 : DD CB 00 46         		bit	0, (ix+zTrack.PlaybackControl)
(1) 2920/     E86 : 20 04               		jr	nz, loc_E8C
(1) 2921/     E88 : 32 11 7F            		ld	(zPSG), a
(1) 2922/     E8B : C9                  		ret
(1) 2923/     E8C :                     ; ---------------------------------------------------------------------------
(1) 2924/     E8C :                     
(1) 2925/     E8C :                     loc_E8C:
(1) 2926/     E8C : C6 20               		add	a, 20h
(1) 2927/     E8E : 32 11 7F            		ld	(zPSG), a
(1) 2928/     E91 : C9                  		ret
(1) 2929/     E92 :                     ; ---------------------------------------------------------------------------
(1) 2930/     E92 :                     
(1) 2931/     E92 :                     loc_E92:
(1) 2932/     E92 : DD 77 17            		ld	(ix+zTrack.VolEnv), a
(1) 2933/     E95 :                     
(1) 2934/     E95 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2935/     E95 :                     
(1) 2936/     E95 :                     
(1) 2937/     E95 :                     DoPSGVolEnv:
(1) 2938/     E95 : E5                  		push	hl
(1) 2939/     E96 : DD 4E 17            		ld	c, (ix+zTrack.VolEnv)
(1) 2940/     E99 : 06 00               		ld	b, 0
(1) 2941/     E9B : 09                  		add	hl, bc
(1) 2942/     E9C : 7E                  		ld	a, (hl)
(1) 2943/     E9D : E1                  		pop	hl
(1) 2944/     E9E : CB 7F               		bit	7, a
(1) 2945/     EA0 : 28 21               		jr	z, VolEnv_Next
(1) 2946/     EA2 : FE 83               		cp	83h
(1) 2947/     EA4 : 28 0C               		jr	z, VolEnv_Off			; 83 - stop the	tone
(1) 2948/     EA6 : FE 81               		cp	81h
(1) 2949/     EA8 : 28 13               		jr	z, VolEnv_Hold			; 81 - hold the	envelope at current level
(1) 2950/     EAA : FE 80               		cp	80h
(1) 2951/     EAC : 28 0C               		jr	z, VolEnv_Reset			; 80 - loop back to beginning
(1) 2952/     EAE : 03                  		inc	bc
(1) 2953/     EAF : 0A                  		ld	a, (bc)
(1) 2957/     EB0 : 18 E0               		jr	loc_E92
(1) 2959/     EB2 :                     ; ---------------------------------------------------------------------------
(1) 2960/     EB2 :                     
(1) 2961/     EB2 :                     VolEnv_Off:
(1) 2962/     EB2 : DD CB 00 E6         		set	4, (ix+zTrack.PlaybackControl)
(1) 2963/     EB6 : E1                  		pop	hl
(1) 2964/     EB7 : C3 C7 0E            		jp	SetRest
(1) 2965/     EBA :                     ; ---------------------------------------------------------------------------
(1) 2966/     EBA :                     
(1) 2967/     EBA :                     VolEnv_Reset:
(1) 2968/     EBA : AF                  		xor	a
(1) 2972/     EBB : 18 D5               		jr	loc_E92
(1) 2974/     EBD :                     ; ---------------------------------------------------------------------------
(1) 2975/     EBD :                     
(1) 2976/     EBD :                     VolEnv_Hold:
(1) 2977/     EBD : E1                  		pop	hl
(1) 2978/     EBE : DD CB 00 E6         		set	4, (ix+zTrack.PlaybackControl)
(1) 2979/     EC2 : C9                  		ret
(1) 2980/     EC3 :                     ; ---------------------------------------------------------------------------
(1) 2981/     EC3 :                     
(1) 2982/     EC3 :                     VolEnv_Next:
(1) 2983/     EC3 : DD 34 17            		inc	(ix+zTrack.VolEnv)
(1) 2984/     EC6 : C9                  		ret
(1) 2985/     EC7 :                     ; End of function DoPSGVolEnv
(1) 2986/     EC7 :                     
(1) 2987/     EC7 :                     
(1) 2988/     EC7 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2989/     EC7 :                     
(1) 2990/     EC7 :                     
(1) 2991/     EC7 :                     SetRest:
(1) 2992/     EC7 : DD CB 00 E6         		set	4, (ix+zTrack.PlaybackControl)
(1) 2993/     ECB : DD CB 00 56         		bit	2, (ix+zTrack.PlaybackControl)
(1) 2994/     ECF : C0                  		ret	nz
(1) 2995/     ED0 :                     ; End of function SetRest
(1) 2996/     ED0 :                     
(1) 2997/     ED0 :                     
(1) 2998/     ED0 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2999/     ED0 :                     
(1) 3000/     ED0 :                     
(1) 3001/     ED0 :                     SilencePSGChn:
(1) 3002/     ED0 : 3E 1F               		ld	a, 1Fh
(1) 3003/     ED2 : DD 86 01            		add	a, (ix+zTrack.VoiceControl)
(1) 3004/     ED5 : B7                  		or	a
(1) 3005/     ED6 : F0                  		ret	p
(1) 3006/     ED7 : 32 11 7F            		ld	(zPSG), a
(1) 3007/     EDA : DD CB 00 46         		bit	0, (ix+zTrack.PlaybackControl)
(1) 3008/     EDE : C8                  		ret	z
(1) 3009/     EDF : 3E FF               		ld	a, 0FFh
(1) 3010/     EE1 : 32 11 7F            		ld	(zPSG), a
(1) 3011/     EE4 : C9                  		ret
(1) 3012/     EE5 :                     ; End of function SilencePSGChn
(1) 3013/     EE5 :                     
(1) 3014/     EE5 :                     ; ---------------------------------------------------------------------------
(1) 3015/     EE5 :                     
(1) 3016/     EE5 :                     zPlayDigitalAudio:
(1) 3017/     EE5 : F3                  		di					; 4
(1) 3018/     EE6 : 3E 2B               		ld	a, 2Bh				; 7
(1) 3019/     EE8 : 0E 00               		ld	c, 0				; 7
(1) 3021/     EEA : CD 26 00            		call	WriteFMI			; 17
(1) 3025/     EED :                     
(1) 3026/     EED :                     loc_EED:
(1) 3027/     EED : FB                  		ei					; 4
(1) 3028/     EEE : 7A                  		ld	a, d				; 4
(1) 3029/     EEF : B3                  		or	e				; 4
(1) 3030/     EF0 : 28 FB               		jr	z, loc_EED			; 7
(1) 3031/     EF2 : FB                  		ei					; 4
(1) 3032/     EF3 :                     
(1) 3033/     EF3 :                     DACLoop:
(1) 3034/     EF3 : 06 0A               		ld	b, 0Ah				; 7
(1) 3035/     EF5 :                     
(1) 3036/     EF5 :                     loc_EF5:
(1) 3037/     EF5 : 10 FE               		djnz	$				; 8
(1) 3038/     EF7 : 7E                  		ld	a, (hl)				; 7
(1) 3039/     EF8 : 07                  		rlca					; 4
(1) 3040/     EF9 : 07                  		rlca					; 4
(1) 3041/     EFA : 07                  		rlca					; 4
(1) 3042/     EFB : 07                  		rlca					; 4
(1) 3043/     EFC : E6 0F               		and	0Fh				; 7
(1) 3044/     EFE : 32 04 0F            		ld	(loc_F02+2), a			; 13
(1) 3045/     F01 : 79                  		ld	a, c				; 4
(1) 3046/     F02 :                     
(1) 3047/     F02 :                     loc_F02:
(1) 3048/     F02 : FD 86 00            		add	a, (iy+0)			; 19
(1) 3049/     F05 : 4F                  		ld	c, a				; 4
(1) 3050/     F06 : 3E 2A               		ld	a, 2Ah				; 7
(1) 3051/     F08 : F3                  		di					; 4
(1) 3052/     F09 : 32 00 40            		ld	(zYM2612_A0), a			; 13
(1) 3053/     F0C : 79                  		ld	a, c				; 4
(1) 3054/     F0D : 32 01 40            		ld	(zYM2612_D0), a			; 13
(1) 3055/     F10 : FB                  		ei					; 4
(1) 3056/     F11 :                     
(1) 3057/     F11 :                     loc_F11:
(1) 3058/     F11 : 06 0A               		ld	b, 0Ah				; 7
(1) 3059/     F13 :                     
(1) 3060/     F13 :                     loc_F13:
(1) 3061/     F13 : 10 FE               		djnz	$				; 8
(1) 3062/     F15 : 7E                  		ld	a, (hl)				; 7
(1) 3063/     F16 : E6 0F               		and	0Fh				; 7
(1) 3064/     F18 : 32 1E 0F            		ld	(loc_F1C+2), a			; 13
(1) 3065/     F1B : 79                  		ld	a, c				; 4
(1) 3066/     F1C :                     
(1) 3067/     F1C :                     loc_F1C:
(1) 3068/     F1C : FD 86 00            		add	a, (iy+0)			; 19
(1) 3069/     F1F : 4F                  		ld	c, a				; 4
(1) 3070/     F20 : 3E 2A               		ld	a, 2Ah				; 7
(1) 3071/     F22 : F3                  		di					; 4
(1) 3072/     F23 : 32 00 40            		ld	(zYM2612_A0), a			; 13
(1) 3073/     F26 : 79                  		ld	a, c				; 4
(1) 3074/     F27 : 32 01 40            		ld	(zYM2612_D0), a			; 13
(1) 3075/     F2A : FB                  		ei					; 4
(1) 3076/     F2B : 23                  		inc	hl				; 6
(1) 3077/     F2C : 7C                  		ld	a, h				; 4
(1) 3078/     F2D : B5                  		or	l				; 4
(1) 3083/     F2E : C2 52 0F            		jp	nz, .loc_F52			; 10
(1) 3084/     F31 :                     							; 268 cycles in total
(1) 3086/     F31 : 21 00 80            		ld	hl, zROMWindow
(1) 3087/     F34 : F3                  		di
(1) 3088/     F35 : D9                  		exx
(1) 3089/     F36 : 21 05 1C            		ld	hl, zSoundBank
(1) 3090/     F39 : 34                  		inc	(hl)
(1) 3091/     F3A : 21 05 1C            		ld	hl, zSoundBank
(1) 3092/     F3D : 7E                  		ld	a, (hl)
(1) 3093/     F3E : (MACRO)              		bankswitch
(1) 3093/     F3E : 21 00 60                            ld      hl, zBankRegister
(1) 3093/     F41 : 77                                  ld      (hl), a
(1) 3093/     F42 :                                     rept 5
(1) 3093/     F42 :                                             rra
(1) 3093/     F42 :                                             ld      (hl), a
(1) 3093/     F42 :                                     endm
(1) 3093/     F42 : 1F                                          rra
(1) 3093/     F43 : 77                                          ld      (hl), a
(1) 3093/     F44 : 1F                                          rra
(1) 3093/     F45 : 77                                          ld      (hl), a
(1) 3093/     F46 : 1F                                          rra
(1) 3093/     F47 : 77                                          ld      (hl), a
(1) 3093/     F48 : 1F                                          rra
(1) 3093/     F49 : 77                                          ld      (hl), a
(1) 3093/     F4A : 1F                                          rra
(1) 3093/     F4B : 77                                          ld      (hl), a
(1) 3093/     F4C : AF                                  xor     a
(1) 3093/     F4D :                                     rept 3
(1) 3093/     F4D :                                     ld      (hl), a
(1) 3093/     F4D :                                     endm
(1) 3093/     F4D : 77                                  ld      (hl), a
(1) 3093/     F4E : 77                                  ld      (hl), a
(1) 3093/     F4F : 77                                  ld      (hl), a
(1) 3094/     F50 : D9                  		exx
(1) 3095/     F51 : FB                  		ei
(1) 3096/     F52 :                     
(1) 3097/     F52 :                     .loc_F52:
(1) 3098/     F52 : 1B                  		dec	de
(1) 3099/     F53 : 7A                  		ld	a, d
(1) 3100/     F54 : B3                  		or	e
(1) 3101/     F55 : C2 F3 0E            		jp	nz, DACLoop
(1) 3102/     F58 : 21 40 1C            		ld	hl, zTracksStart
(1) 3103/     F5B : CB 96               		res	2, (hl)
(1) 3104/     F5D : AF                  		xor	a
(1) 3105/     F5E : 32 3C 1C            		ld	(zDACIndex), a
(1) 3106/     F61 : C3 E5 0E            		jp	zPlayDigitalAudio
(1) 3107/     F64 :                     ; ---------------------------------------------------------------------------
(1) 3108/     F64 :                     ; ===========================================================================
(1) 3109/     F64 :                     ; JMan2050's DAC decode lookup table
(1) 3110/     F64 :                     ; ===========================================================================
(1) 3111/     F64 :                     DecTable:
(1) 3112/     F64 : 00 01 02 04 08 10   		db	   0,	 1,   2,   4,   8,  10h,  20h,  40h
              F6A : 20 40             
(1) 3113/     F6C : 80 FF FE FC F8 F0   		db	 80h,	-1,  -2,  -4,  -8, -10h, -20h, -40h
              F72 : E0 C0             
(1) 3114/     F74 : 8C 0F 8E 0F 95 0F   VolEnvPtrs:	dw PSG1,PSG2,PSG3,PSG4,PSG5,PSG6
              F7A : 9D 0F A9 0F B4 0F 
(1) 3115/     F80 : C3 0F CC 0F DD 0F   		dw PSG7,PSG8,PSG9,PSGA,PSGB,PSGC
              F86 : E8 0F FD 0F 07 10 
(1) 3116/     F8C :                     PSG1:		binclude "PSG/PSG 1.bin"
(1) 3117/     F8E :                     PSG2:		binclude "PSG/PSG 2.bin"
(1) 3118/     F95 :                     PSG3:		binclude "PSG/PSG 3.bin"
(1) 3119/     F9D :                     PSG4:		binclude "PSG/PSG 4.bin"
(1) 3120/     FA9 :                     PSG5:		binclude "PSG/PSG 5.bin"
(1) 3121/     FB4 :                     PSG6:		binclude "PSG/PSG 6.bin"
(1) 3122/     FC3 :                     PSG7:		binclude "PSG/PSG 7.bin"
(1) 3123/     FCC :                     PSG8:		binclude "PSG/PSG 8.bin"
(1) 3124/     FDD :                     PSG9:		binclude "PSG/PSG 9.bin"
(1) 3125/     FE8 :                     PSGA:		binclude "PSG/PSG A.bin"
(1) 3126/     FFD :                     PSGB:		binclude "PSG/PSG B.bin"
(1) 3127/    1007 :                     PSGC:		binclude "PSG/PSG C.bin"
(1) 3128/    1010 : 24 10 30 10 3D 10   ModEnvPtrs:	dw byte_1024, byte_1030, byte_103D, byte_1049, byte_108B
             1016 : 49 10 8B 10       
(1) 3129/    101A : C0 10 FD 10 17 11   		dw byte_10C0, byte_10FD, byte_1117, byte_1131, byte_1139
             1020 : 31 11 39 11       
(1) 3130/    1024 : 40 60 70 60 50 30   byte_1024:	db  40h, 60h, 70h, 60h,	50h, 30h, 10h,-10h,-30h,-50h,-70h
             102A : 10 F0 D0 B0 90    
(1) 3131/    102F : 83                  		db  83h
(1) 3132/    1030 : 00 02 04 06 08 0A   byte_1030:	db    0,   2,	4,   6,	  8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h
             1036 : 0C 0E 10 12 14    
(1) 3133/    103B : 18                  		db  18h
(1) 3134/    103C : 81                  		db  81h
(1) 3135/    103D : 00 00 01 03 01 00   byte_103D:	db    0,   0,	1,   3,	  1,   0,  -1,	-3,  -1,   0
             1043 : FF FD FF 00       
(1) 3136/    1047 : 82 02               		db  82h, 02h
(1) 3137/    1049 : 00 00 00 00 00 00   byte_1049:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             104F : 00 00 00 00 00    
(1) 3138/    1054 : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             105A : 00 00 00 00 00    
(1) 3139/    105F : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             1065 : 00 00 00 00 00    
(1) 3140/    106A : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 2,   4,   6,	8
             1070 : 00 02 04 06 08    
(1) 3141/    1075 : 0A 0C 0A 08 06 04   		db  0Ah, 0Ch, 0Ah,   8,	  6,   4,   2,	 0,  -2,  -4,  -6
             107B : 02 00 FE FC FA    
(1) 3142/    1080 : F8 F6 F4 F6 F8 FA   		db   -8,-0Ah,-0Ch,-0Ah,	 -8,  -6,  -4,	-2,   0
             1086 : FC FE 00          
(1) 3143/    1089 : 82 29               		db  82h, 29h
(1) 3144/    108B : 00 00 00 00 00 00   byte_108B:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             1091 : 00 00 00 00 00    
(1) 3145/    1096 : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             109C : 00 00 00 00 00    
(1) 3146/    10A1 : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   2,	 4,   6,   8, 0Ah
             10A7 : 02 04 06 08 0A    
(1) 3147/    10AC : 0C 0A 08 06 04 02   		db  0Ch, 0Ah,	8,   6,	  4,   2,   0,	-2,  -4,  -6,  -8
             10B2 : 00 FE FC FA F8    
(1) 3148/    10B7 : F6 F4 F6 F8 FA FC   		db -0Ah,-0Ch,-0Ah,  -8,	 -6,  -4,  -2
             10BD : FE                
(1) 3149/    10BE : 82 1B               		db  82h, 1Bh
(1) 3150/    10C0 : 00 00 00 00 00 00   byte_10C0:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             10C6 : 00 00 00 00 00    
(1) 3151/    10CB : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             10D1 : 00 00 00 00 00    
(1) 3152/    10D6 : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             10DC : 00 00 00 00 00    
(1) 3153/    10E1 : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             10E7 : 00 00 00 00 00    
(1) 3154/    10EC : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   3,	 6,   3,   0,  -3
             10F2 : 03 06 03 00 FD    
(1) 3155/    10F7 : FA FA FD 00         		db   -6,  -6,  -3,   0
(1) 3156/    10FB : 82 33               		db  82h, 33h
(1) 3157/    10FD : 00 00 00 00 00 00   byte_10FD:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             1103 : 00 00 00 00 00    
(1) 3158/    1108 : 00 00 00 00 00 02   		db    0,   0,	0,   0,	  0,   2,   4,	 2,   0,  -2,  -4
             110E : 04 02 00 FE FC    
(1) 3159/    1113 : FE 00               		db   -2,   0
(1) 3160/    1115 : 82 11               		db  82h, 11h
(1) 3161/    1117 : FE FF 00 00 00 00   byte_1117:	db   -2,  -1,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
             111D : 00 00 00 00 00    
(1) 3162/    1122 : 00 00 00 00 00 00   		db    0,   0,	0,   0,	  0,   0,   0,	 1,   1,   0,	0
             1128 : 00 01 01 00 00    
(1) 3163/    112D : FF FF               		db   -1,  -1
(1) 3164/    112F : 82 11               		db  82h, 11h
(1) 3165/    1131 : 03 02 01 00 00 00   byte_1131:	db    3,   2,	1,   0,	  0,   0,   1
             1137 : 01                
(1) 3166/    1138 : 81                  		db  81h
(1) 3167/    1139 : 00 00 00 00 01 01   byte_1139:	db    0,   0,	0,   0,	  1,   1,   1,	 1,   2,   2,	1
             113F : 01 01 02 02 01    
(1) 3168/    1144 : 01 01 00 00 00      		db    1,   1,	0,   0,	  0
(1) 3169/    1149 : 84 01 82 04         		db  84h, 01h, 82h, 04h
(1) 3170/    114D :                     MusicBanks:
(1) 3171/    114D :                     		; The way that this works is that each individual music track has it's own bank
(1) 3172/    114D :                     		; that it uses for finding and playing music from banks.
(1) 3173/    114D : 02                  		db zmake68kBank(Music81)
(1) 3174/    114E : 02                  		db zmake68kBank(Music82)
(1) 3175/    114F : 02                  		db zmake68kBank(Music83)
(1) 3176/    1150 : 02                  		db zmake68kBank(Music84)
(1) 3177/    1151 : 02                  		db zmake68kBank(Music85)
(1) 3178/    1152 : 02                  		db zmake68kBank(Music86)
(1) 3179/    1153 :                     MusicIndex:
(1) 3180/    1153 : 00 80               ptr_mus81:	dw zmake68kPtr(Music81)
(1) 3181/    1155 : 8C 88               ptr_mus82:	dw zmake68kPtr(Music82)
(1) 3182/    1157 : DA 8B               ptr_mus83:	dw zmake68kPtr(Music83)
(1) 3183/    1159 : 10 92               ptr_mus84:	dw zmake68kPtr(Music84)
(1) 3184/    115B : 2B 97               ptr_mus85:	dw zmake68kPtr(Music85)
(1) 3185/    115D : 10 9B               ptr_mus86:	dw zmake68kPtr(Music86)
(1) 3186/    115F :                     ptr_musend
(1) 3187/    115F :                     
(1) 3188/    115F :                     SoundIndex:
(1) 3190/    115F :                     		; DANGER!
(1) 3191/    115F :                     		; These pointers along with the pointers inside of the SFX are
(1) 3192/    115F :                     		; all half a bank too long!
(1) 3193/    115F : 00 C0               ptr_sndA0:	dw zmake68kPtr(SoundA0)+4000h
(1) 3194/    1161 : 33 C0               ptr_sndA1:	dw zmake68kPtr(SoundA1)+4000h
(1) 3195/    1163 : 9A C0               ptr_sndA2:	dw zmake68kPtr(SoundA2)+4000h
(1) 3196/    1165 : C7 C0               ptr_sndA3:	dw zmake68kPtr(SoundA3)+4000h
(1) 3197/    1167 : EF C0               ptr_sndA4:	dw zmake68kPtr(SoundA4)+4000h
(1) 3198/    1169 : 24 C1               ptr_sndA5:	dw zmake68kPtr(SoundA5)+4000h
(1) 3199/    116B : 65 C1               ptr_sndA6:	dw zmake68kPtr(SoundA6)+4000h
(1) 3200/    116D : 93 C1               ptr_sndA7:	dw zmake68kPtr(SoundA7)+4000h
(1) 3201/    116F : E4 C1               ptr_sndA8:	dw zmake68kPtr(SoundA8)+4000h
(1) 3202/    1171 : 3F C2               ptr_sndA9:	dw zmake68kPtr(SoundA9)+4000h
(1) 3203/    1173 : 69 C2               ptr_sndAA:	dw zmake68kPtr(SoundAA)+4000h
(1) 3204/    1175 : 8D C2               ptr_sndAB:	dw zmake68kPtr(SoundAB)+4000h
(1) 3205/    1177 : B1 C2               ptr_sndAC:	dw zmake68kPtr(SoundAC)+4000h
(1) 3206/    1179 : D5 C2               ptr_sndAD:	dw zmake68kPtr(SoundAD)+4000h
(1) 3207/    117B : F9 C2               ptr_sndAE:	dw zmake68kPtr(SoundAE)+4000h
(1) 3208/    117D : 1D C3               ptr_sndAF:	dw zmake68kPtr(SoundAF)+4000h
(1) 3227/    117F :                     ptr_sndend
(1) 3228/    117F :                     
(1) 3229/    117F :                     SpecSoundIndex:
(1) 3231/    117F :                     		; DANGER!
(1) 3232/    117F :                     		; Once again, these pointers along with the pointers inside of the
(1) 3233/    117F :                     		; SFX are all half a bank too long!
(1) 3234/    117F : 00 C0               ptr_sndD0:	dw zmake68kPtr(SoundA0)+4000h
(1) 3235/    1181 : 33 C0               ptr_sndD1:	dw zmake68kPtr(SoundA1)+4000h
(1) 3236/    1183 : C7 C0               ptr_sndD2:	dw zmake68kPtr(SoundA3)+4000h
(1) 3242/    1185 :                     ptr_specend
(1) 3243/    1185 :                     
(1) 3244/    1185 : 7F 7F 7F 7F 7F 7F   SndPriorities:	db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             118B : 7F 7F 7F 7F 7F    
(1) 3245/    1190 : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             1196 : 7F 7F 7F 7F 7F    
(1) 3246/    119B : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             11A1 : 7F 7F 7F 7F 7F    
(1) 3247/    11A6 : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             11AC : 7F 7F 7F 7F 7F    
(1) 3248/    11B1 : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             11B7 : 7F 7F 7F 7F 7F    
(1) 3249/    11BC : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             11C2 : 7F 7F 7F 7F 7F    
(1) 3250/    11C7 : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             11CD : 7F 7F 7F 7F 7F    
(1) 3251/    11D2 : 7F 7F 7F 7F 7F 7F   		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
             11D8 : 7F 7F 7F 7F 7F    
(1) 3252/    11DD : 7F                  		db 7Fh
(1) 3253/    11DE : EC 11               DAC_Index:	dw .dac81
(1) 3254/    11E0 : F2 11               		dw .dac82
(1) 3255/    11E2 : F8 11               		dw .dac83
(1) 3256/    11E4 : FE 11               		dw .dac84
(1) 3257/    11E6 : 04 12               		dw .dac85
(1) 3258/    11E8 : 0A 12               		dw .dac86
(1) 3259/    11EA : 10 12               		dw .dac87
(1) 3260/    11EC :                     DACMeta:	macro location,rate
(1) 3261/    11EC :                     		db dpcmLoopCounter(rate)
(1) 3262/    11EC :                     		db zmake68kBank(location)
(1) 3263/    11EC :                     		dw location_End-location
(1) 3264/    11EC :                     		dw zmake68kPtr(location)
(1) 3265/    11EC :                     	endm
(1) 3266/    11EC : (MACRO)              .dac81:		DACMeta DAC_Sample1,4800
(1) 3266/    11EC : 30                                  db dpcmLoopCounter(4800)
(1) 3266/    11ED : 04                                  db zmake68kBank(DAC_Sample1)
(1) 3266/    11EE : D4 01                               dw DAC_Sample1_End-DAC_Sample1
(1) 3266/    11F0 : 00 80                               dw zmake68kPtr(DAC_Sample1)
(1) 3267/    11F2 : (MACRO)              .dac82:		DACMeta DAC_Sample2,14000
(1) 3267/    11F2 : 0A                                  db dpcmLoopCounter(14000)
(1) 3267/    11F3 : 04                                  db zmake68kBank(DAC_Sample2)
(1) 3267/    11F4 : DE 0D                               dw DAC_Sample2_End-DAC_Sample2
(1) 3267/    11F6 : D4 81                               dw zmake68kPtr(DAC_Sample2)
(1) 3268/    11F8 : (MACRO)              .dac83:		DACMeta DAC_Sample3,14000
(1) 3268/    11F8 : 0A                                  db dpcmLoopCounter(14000)
(1) 3268/    11F9 : 04                                  db zmake68kBank(DAC_Sample3)
(1) 3268/    11FA : C0 06                               dw DAC_Sample3_End-DAC_Sample3
(1) 3268/    11FC : B2 8F                               dw zmake68kPtr(DAC_Sample3)
(1) 3269/    11FE : (MACRO)              .dac84:		DACMeta DAC_Sample3,12000
(1) 3269/    11FE : 0E                                  db dpcmLoopCounter(12000)
(1) 3269/    11FF : 04                                  db zmake68kBank(DAC_Sample3)
(1) 3269/    1200 : C0 06                               dw DAC_Sample3_End-DAC_Sample3
(1) 3269/    1202 : B2 8F                               dw zmake68kPtr(DAC_Sample3)
(1) 3270/    1204 : (MACRO)              .dac85:		DACMeta DAC_Sample3,11000
(1) 3270/    1204 : 10                                  db dpcmLoopCounter(11000)
(1) 3270/    1205 : 04                                  db zmake68kBank(DAC_Sample3)
(1) 3270/    1206 : C0 06                               dw DAC_Sample3_End-DAC_Sample3
(1) 3270/    1208 : B2 8F                               dw zmake68kPtr(DAC_Sample3)
(1) 3271/    120A : (MACRO)              .dac86:		DACMeta DAC_Sample4,14000
(1) 3271/    120A : 0A                                  db dpcmLoopCounter(14000)
(1) 3271/    120B : 04                                  db zmake68kBank(DAC_Sample4)
(1) 3271/    120C : 7C 15                               dw DAC_Sample4_End-DAC_Sample4
(1) 3271/    120E : 72 96                               dw zmake68kPtr(DAC_Sample4)
(1) 3272/    1210 : (MACRO)              .dac87:		DACMeta DAC_Sample5,14000
(1) 3272/    1210 : 0A                                  db dpcmLoopCounter(14000)
(1) 3272/    1211 : 04                                  db zmake68kBank(DAC_Sample5)
(1) 3272/    1212 : B4 18                               dw DAC_Sample5_End-DAC_Sample5
(1) 3272/    1214 : EE AB                               dw zmake68kPtr(DAC_Sample5)
(1) 3273/    1216 :                     
(1) 3274/    1216 : ALL                  		restore
(1) 3275/    1216 :                     		padding	off
(1) 3276/    6402 :                     		dephase					; reset to 68K location
(1) 3277/    6402 :                     
    4130/    6402 : (MACRO)              Z80_Driver_end:	even
    4130/    6402 : =>TRUE                       if notZ80(MOMCPU)
    4130/    6402 : =>FALSE                              if (*)&1
    4130/    6402 :                                             dc.b 0                          ;ds.b 1
    4130/    6402 : [4130]                               endif
    4130/    6402 : =>FALSE                      else
    4130/    6402 :                                     if ($)&1
    4130/    6402 :                                             db 0
    4130/    6402 : [4130]                               endif
    4130/    6402 : [4130]                       endif
    4131/    6402 :                     ; ---------------------------------------------------------------------------
    4132/    6402 :                     ; ===========================================================================
    4133/    6402 :                     ; ---------------------------------------------------------------------------
    4134/    6402 :                     ; subroutine to save BGM number to Z80 to play music
    4135/    6402 :                     ; ---------------------------------------------------------------------------
    4136/    6402 :                     
    4137/    6402 :                     PlayMusic:
    4138/    6402 : (MACRO)              		stopZ80
    4138/    6402 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
             6408 : 1100             
    4139/    640A : (MACRO)              		waitZ80
    4139/    640A : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
             6410 : 1100             
    4139/    6412 : 66F6                                bne.s   .wait
    4140/    6414 : 13C0 00A0 1C0A      		move.b	d0,(z80_ram+zSoundQueue1).l	; save BGM number to Z80
    4141/    641A : (MACRO)              		startZ80
    4141/    641A : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
             6420 : 1100             
    4142/    6422 : 4E75                		rts
    4143/    6424 :                     ; ===========================================================================
    4144/    6424 :                     ; ---------------------------------------------------------------------------
    4145/    6424 :                     ; Sega Screen (Mode: 00)
    4146/    6424 :                     ; ---------------------------------------------------------------------------
    4147/    6424 :                     
    4148/    6424 :                     SegaScreen:
    4149/    6424 : 4850                		pea	(a0)
    4150/    6426 : 41FA 0A8C           		lea	loc_6EB4(pc),a0
    4151/    642A : 21C8 C832           		move.l	a0,(v_vdpindex).w
    4152/    642E : 4CDF 0100           		movem.l	(sp)+,a0
    4153/    6432 : 4EB9 0000 518A      		jsr	(SoundDriverLoad).l		; load the Z80 Sound Driver
    4154/    6438 : 41FA 0008           		lea	SegaScreen_VDPSettings(pc),a0
    4155/    643C : 4EB8 08D0           		jsr	(SetupVDPUsingTable).w
    4156/    6440 : 6018                		bra.s	SegaContin
    4157/    6442 :                     ; ===========================================================================
    4158/    6442 :                     ; ---------------------------------------------------------------------------
    4159/    6442 :                     SegaScreen_VDPSettings:
    4160/    6442 : 8230                		dc.w $8230				; plane a: 
    4161/    6444 : 8407                		dc.w $8407				; plane b:
    4162/    6446 : 833C                		dc.w $833C				; window table: 
    4163/    6448 : 855C                		dc.w $855C				; sprite table: B800
    4164/    644A : 8D2F                		dc.w $8D2F				; horizontal scroll table: BC00
    4165/    644C : 8B00                		dc.w $8B00				; full scroll horizontally/vertically, external interrupt disabled
    4166/    644E : 8C81                		dc.w $8C81				; H40, no shadow/highlight
    4167/    6450 : 9011                		dc.w $9011				; tilemap: 64x64
    4168/    6452 : 8700                		dc.w $8700				; background color: entry 0
    4169/    6454 : 9100                		dc.w $9100				; Window plane X: disabled
    4170/    6456 : 9200                		dc.w $9200				; Window plane Y: disabled
    4171/    6458 : 0000                		dc.w 0
    4172/    645A :                     ; ---------------------------------------------------------------------------
    4173/    645A :                     ; ===========================================================================
    4174/    645A :                     
    4175/    645A :                     SegaContin:
    4176/    645A : 31FC 0080 D820      		move.w	#$80,($FFFFD820).w
    4177/    6460 : 703F                		moveq	#$3F,d0
    4178/    6462 : 723F                		moveq	#$3F,d1
    4179/    6464 : 7400                		moveq	#0,d2
    4180/    6466 : 3638 D816           		move.w	($FFFFD816).w,d3
    4181/    646A : 4EB8 086E           		jsr	(sub_86E).w
    4182/    646E : 703F                		moveq	#$3F,d0
    4183/    6470 : 723F                		moveq	#$3F,d1
    4184/    6472 : 7400                		moveq	#0,d2
    4185/    6474 : 3638 D818           		move.w	($FFFFD818).w,d3
    4186/    6478 : 4EB8 086E           		jsr	(sub_86E).w
    4187/    647C : 41FA 0AE4           		lea	PAL_Segalogo(pc),a0		; load Sega Palette address to a0
    4188/    6480 : 43F8 D3E4           		lea	($FFFFD3E4).w,a1
    4189/    6484 : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    4190/    6488 : 48D1 00FF           		movem.l	d0-d7,(a1)
    4191/    648C : 43E9 0020           		lea	$20(a1),a1
    4192/    6490 : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    4193/    6494 : 48D1 00FF           		movem.l	d0-d7,(a1)
    4194/    6498 : 6100 0392           		bsr.w	Sega_MapTiles
    4195/    649C : 203C 0000 0F01      		move.l	#$F01,d0
    4196/    64A2 : 7201                		moveq	#1,d1
    4197/    64A4 : 41F8 D164           		lea	($FFFFD164).w,a0
    4198/    64A8 : 7E06                		moveq	#6,d7
    4199/    64AA :                     
    4200/    64AA :                     loc_64AA:
    4201/    64AA : 20C0                		move.l	d0,(a0)+
    4202/    64AC : 20C1                		move.l	d1,(a0)+
    4203/    64AE : 5240                		addq.w	#1,d0
    4204/    64B0 : 51CF FFF8           		dbf	d7,loc_64AA
    4205/    64B4 : 20FC 0000 0F00      		move.l	#$F00,(a0)+
    4206/    64BA : 2081                		move.l	d1,(a0)
    4207/    64BC : 4278 FAC4           		clr.w	($FFFFFAC4).w
    4208/    64C0 : 31FC 0001 FAC6      		move.w	#1,($FFFFFAC6).w
    4209/    64C6 : 3038 FFC4           		move.w	($FFFFFFC4).w,d0
    4210/    64CA : 0240 0004           		andi.w	#4,d0
    4211/    64CE : 31C0 FAC8           		move.w	d0,($FFFFFAC8).w
    4212/    64D2 : 0078 8124 C9BA      		ori.w	#$8124,($FFFFC9BA).w
    4213/    64D8 : 33F8 C9BA 00C0      		move.w	($FFFFC9BA).w,(vdp_control_port).l
             64DE : 0004             
    4214/    64E0 : 0078 8144 C9BA      		ori.w	#$8144,($FFFFC9BA).w
    4215/    64E6 : 33F8 C9BA 00C0      		move.w	($FFFFC9BA).w,(vdp_control_port).l
             64EC : 0004             
    4216/    64EE : 5878 D824           		addq.w	#4,(v_subgamemode).w		; increase sega screen mode
    4217/    64F2 :                     
    4218/    64F2 :                     loc_64F2:
    4219/    64F2 : 4879 0000 64F2      		pea	(loc_64F2).l
    4220/    64F8 : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    4221/    64FE :                     
    4222/    64FE :                     .wait:
    4223/    64FE : 4A38 FFC9           		tst.b	(v_lagger).w
    4224/    6502 : 6AFA                		bpl.s	.wait
    4225/    6504 : 3038 D824           		move.w	(v_subgamemode).w,d0		; load sub mode to d0
    4226/    6508 : 4EFB 0002           		jmp	SegaSubArray(pc,d0.w)		; jump to correct sub mode routine
    4227/    650C :                     ; ===========================================================================
    4228/    650C :                     ; ---------------------------------------------------------------------------
    4229/    650C :                     ; Sega Screen Sub Modes
    4230/    650C :                     ; ---------------------------------------------------------------------------
    4231/    650C : 6000 FF16           SegaSubArray:	bra.w	SegaScreen
    4232/    6510 :                     ; ---------------------------------------------------------------------------
    4233/    6510 : 6000 0014           		bra.w	loc_6526
    4234/    6514 :                     ; ---------------------------------------------------------------------------
    4235/    6514 : 6000 002C           		bra.w	SegaPaletteStart
    4236/    6518 :                     ; ---------------------------------------------------------------------------
    4237/    6518 : 6000 006E           		bra.w	SegaPaletteCycle
    4238/    651C :                     ; ---------------------------------------------------------------------------
    4239/    651C : 6000 00A8           		bra.w	loc_65C6
    4240/    6520 :                     ; ---------------------------------------------------------------------------
    4241/    6520 : 6000 00D4           		bra.w	Sega_GotoTitle
    4242/    6524 :                     ; ---------------------------------------------------------------------------
    4243/    6524 :                     ; ===========================================================================
    4244/    6524 :                     ; ---------------------------------------------------------------------------
    4245/    6524 :                     ; subroutine to return without doing anything (Used in multiple routines)
    4246/    6524 :                     ; ---------------------------------------------------------------------------
    4247/    6524 :                     
    4248/    6524 :                     MultiReturn:
    4249/    6524 : 4E75                		rts					; return
    4250/    6526 :                     
    4251/    6526 :                     ; ===========================================================================
    4252/    6526 :                     ; ---------------------------------------------------------------------------
    4253/    6526 :                     ;
    4254/    6526 :                     ; ---------------------------------------------------------------------------
    4255/    6526 :                     
    4256/    6526 :                     loc_6526:
    4257/    6526 : 4A38 C93C           		tst.b	($FFFFC93C).w
    4258/    652A : 6A06                		bpl.s	Sega_ChooseAnimation
    4259/    652C : 31FC 0014 D824      		move.w	#$14,(v_subgamemode).w
    4260/    6532 :                     
    4261/    6532 :                     Sega_ChooseAnimation:
    4262/    6532 : 3038 FAC8           		move.w	($FFFFFAC8).w,d0
    4263/    6536 : 4EFB 0002           		jmp	Sega_AnimationTable(pc,d0.w)
    4264/    653A :                     
    4265/    653A :                     Sega_AnimationTable:
    4266/    653A : 6000 042E           		bra.w	Sega_MainAnimation
    4267/    653E : 6000 06E0           		bra.w	Sega_AltAnimation
    4268/    6542 :                     
    4269/    6542 :                     ; ===========================================================================
    4270/    6542 :                     ; ---------------------------------------------------------------------------
    4271/    6542 :                     ; Sega Screen palette cycling startup routine
    4272/    6542 :                     ; ---------------------------------------------------------------------------
    4273/    6542 :                     
    4274/    6542 :                     SegaPaletteStart:
    4275/    6542 : 4A38 C93C           		tst.b	($FFFFC93C).w
    4276/    6546 : 6A06                		bpl.s	.cycling
    4277/    6548 : 31FC 0014 D824      		move.w	#$14,(v_subgamemode).w
    4278/    654E :                     
    4279/    654E :                     .cycling:
    4280/    654E : 5378 FAC4           		subq.w	#1,($FFFFFAC4).w
    4281/    6552 : 66D0                		bne.s	MultiReturn
    4282/    6554 : 703F                		moveq	#$3F,d0
    4283/    6556 : 723F                		moveq	#$3F,d1
    4284/    6558 : 7400                		moveq	#0,d2
    4285/    655A : 3638 D816           		move.w	($FFFFD816).w,d3
    4286/    655E : 4EB8 086E           		jsr	(sub_86E).w
    4287/    6562 : 703F                		moveq	#$3F,d0
    4288/    6564 : 723F                		moveq	#$3F,d1
    4289/    6566 : 7400                		moveq	#0,d2
    4290/    6568 : 3638 D818           		move.w	($FFFFD818).w,d3
    4291/    656C : 4EB8 086E           		jsr	(sub_86E).w
    4292/    6570 : 31FC 0000 FAC4      		move.w	#0,($FFFFFAC4).w		; clear colour number
    4293/    6576 : 31F8 D3E8 FAC6      		move.w	($FFFFD3E8).w,($FFFFFAC6).w	; save first colour to storage
    4294/    657C : 31FC 0EEE D3E8      		move.w	#cWhite,($FFFFD3E8).w		; save white to colour palette
    4295/    6582 : 5878 D824           		addq.w	#4,(v_subgamemode).w		; increase sub mode
    4296/    6586 : 4E75                		rts
    4297/    6588 :                     ; ===========================================================================
    4298/    6588 :                     ; ---------------------------------------------------------------------------
    4299/    6588 :                     ; Sega Screen palette cycling routine
    4300/    6588 :                     ; ---------------------------------------------------------------------------
    4301/    6588 :                     
    4302/    6588 :                     SegaPaletteCycle:
    4303/    6588 : 4A38 C93C           		tst.b	($FFFFC93C).w
    4304/    658C : 6A06                		bpl.s	loc_6594
    4305/    658E : 31FC 0014 D824      		move.w	#$14,(v_subgamemode).w
    4306/    6594 :                     
    4307/    6594 :                     loc_6594:
    4308/    6594 : 41F8 D3E8           		lea	($FFFFD3E8).w,a0		; load palette address to a0
    4309/    6598 : 3038 FAC4           		move.w	($FFFFFAC4).w,d0		; load current colour number to d0
    4310/    659C : D040                		add.w	d0,d0				; double it
    4311/    659E : D0C0                		adda.w	d0,a0				; add to colour palette location
    4312/    65A0 : 30F8 FAC6           		move.w	($FFFFFAC6).w,(a0)+		; reload original colour from storage
    4313/    65A4 : 31D0 FAC6           		move.w	(a0),($FFFFFAC6).w		; save next current colour to storage
    4314/    65A8 : 30BC 0EEE           		move.w	#cWhite,(a0)			; save white to colour palette
    4315/    65AC : 5278 FAC4           		addq.w	#1,($FFFFFAC4).w		; increase colour number to next colour
    4316/    65B0 : 0C78 000C FAC4      		cmpi.w	#$C,($FFFFFAC4).w		; has colour number finished at C?
    4317/    65B6 : 6600 FF6C           		bne.w	MultiReturn			; if not, branch to return
    4318/    65BA : 31FC 0040 FAC4      		move.w	#$40,($FFFFFAC4).w		; set colour number to 40
    4319/    65C0 : 5878 D824           		addq.w	#4,(v_subgamemode).w		; increase sub mode
    4320/    65C4 : 4E75                		rts
    4321/    65C6 :                     ; ===========================================================================
    4322/    65C6 :                     ; ---------------------------------------------------------------------------
    4323/    65C6 :                     ;
    4324/    65C6 :                     ; ---------------------------------------------------------------------------
    4325/    65C6 :                     
    4326/    65C6 :                     loc_65C6:
    4327/    65C6 : 4A38 C93C           		tst.b	($FFFFC93C).w
    4328/    65CA : 6A06                		bpl.s	loc_65D2
    4329/    65CC : 31FC 0014 D824      		move.w	#$14,(v_subgamemode).w
    4330/    65D2 :                     
    4331/    65D2 :                     loc_65D2:
    4332/    65D2 : 5378 FAC4           		subq.w	#1,($FFFFFAC4).w		; minus 1 from colour number
    4333/    65D6 : 6A00 FF4C           		bpl.w	MultiReturn			; if still positive, branch
    4334/    65DA : 7001                		moveq	#1,d0
    4335/    65DC : 4EB8 06CC           		jsr	(PaletteFadeOut).w
    4336/    65E0 : 6600 FF42           		bne.w	MultiReturn
    4337/    65E4 : 31FC 0008 D822      		move.w	#id_Title,(v_gamemode).w	; set screen mode to title screen
    4338/    65EA : 42B8 D824           		clr.l	(v_subgamemode).w		; clear sub mode
    4339/    65EE : 2E78 0000           		movea.l	(RomStart).w,sp			; set stack pointer
    4340/    65F2 : 4EF8 5000           		jmp	(MAINPROG).w			; jump to the main game loop
    4341/    65F6 :                     ; ===========================================================================
    4342/    65F6 :                     ; ---------------------------------------------------------------------------
    4343/    65F6 :                     ;
    4344/    65F6 :                     ; ---------------------------------------------------------------------------
    4345/    65F6 :                     
    4346/    65F6 :                     Sega_GotoTitle:
    4347/    65F6 : 7001                		moveq	#1,d0
    4348/    65F8 : 4EB8 06CC           		jsr	(PaletteFadeOut).w
    4349/    65FC : 6600 FF26           		bne.w	MultiReturn
    4350/    6600 : 31FC 0008 D822      		move.w	#id_Title,(v_gamemode).w
    4351/    6606 : 42B8 D824           		clr.l	(v_subgamemode).w
    4352/    660A : 2E78 0000           		movea.l	(RomStart).w,sp
    4353/    660E : 4EF8 5000           		jmp	(MAINPROG).w
    4354/    6612 :                     ; ===========================================================================
    4355/    6612 :                     ; ---------------------------------------------------------------------------
    4356/    6612 :                     ;
    4357/    6612 :                     ; ---------------------------------------------------------------------------
    4358/    6612 :                     
    4359/    6612 :                     SegaScrn_CheckRegion:
    4360/    6612 : 1039 00A1 0001      		move.b	(z80_version).l,d0		; load Z80 version number
    4361/    6618 : E518                		rol.b	#2,d0				; roll left 2 bits
    4362/    661A : 0240 0002           		andi.w	#2,d0				; get only the original 1st bit that was in version number
    4363/    661E : 31FB 0006 D402      		move.w	SegaTM_Palette(pc,d0.w),($FFFFD402).w	; color a specific part of the palette depending on if you have a domestic or overseas model
    4364/    6624 : 4E75                		rts
    4365/    6626 :                     ; ===========================================================================
    4366/    6626 :                     ; ---------------------------------------------------------------------------
    4367/    6626 :                     ;
    4368/    6626 :                     ; ---------------------------------------------------------------------------
    4369/    6626 :                     
    4370/    6626 :                     SegaTM_Palette:
    4371/    6626 : 0000 0EEE           		dc.w	cBlack,cWhite
    4372/    662A :                     
    4373/    662A :                     loc_662A:
    4374/    662A : 47F9 00C0 0000      		lea	(vdp_data_port).l,a3
    4375/    6630 : 2A4C                		movea.l	a4,a5
    4376/    6632 :                     
    4377/    6632 :                     loc_6632:
    4378/    6632 : 2C4D                		movea.l	a5,a6
    4379/    6634 : DCF8 D816           		adda.w	($FFFFD816).w,a6
    4380/    6638 : 5D4E                		subq.w	#6,a6
    4381/    663A : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    4382/    6640 : (MACRO)              		disable_ints
    4382/    6640 : 46FC 2700                           move    #$2700,sr
    4383/    6644 : 2740 0004           		move.l	d0,4(a3)
    4384/    6648 : 3A06                		move.w	d6,d5
    4385/    664A : 303C 8100           		move.w	#$8100,d0
    4386/    664E :                     
    4387/    664E :                     loc_664E:
    4388/    664E : 1018                		move.b	(a0)+,d0
    4389/    6650 : 3680                		move.w	d0,(a3)
    4390/    6652 : 1018                		move.b	(a0)+,d0
    4391/    6654 : 3680                		move.w	d0,(a3)
    4392/    6656 : 1018                		move.b	(a0)+,d0
    4393/    6658 : 3680                		move.w	d0,(a3)
    4394/    665A : 1018                		move.b	(a0)+,d0
    4395/    665C : 3680                		move.w	d0,(a3)
    4396/    665E : 51CD FFEE           		dbf	d5,loc_664E
    4397/    6662 : 2C4D                		movea.l	a5,a6
    4398/    6664 : DCF8 D818           		adda.w	($FFFFD818).w,a6
    4399/    6668 : 5D4E                		subq.w	#6,a6
    4400/    666A : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    4401/    6670 : 2740 0004           		move.l	d0,4(a3)
    4402/    6674 : 3A06                		move.w	d6,d5
    4403/    6676 : 303C 8100           		move.w	#$8100,d0
    4404/    667A :                     
    4405/    667A :                     loc_667A:
    4406/    667A : 1018                		move.b	(a0)+,d0
    4407/    667C : 3680                		move.w	d0,(a3)
    4408/    667E : 1018                		move.b	(a0)+,d0
    4409/    6680 : 3680                		move.w	d0,(a3)
    4410/    6682 : 1018                		move.b	(a0)+,d0
    4411/    6684 : 3680                		move.w	d0,(a3)
    4412/    6686 : 1018                		move.b	(a0)+,d0
    4413/    6688 : 3680                		move.w	d0,(a3)
    4414/    668A : 51CD FFEE           		dbf	d5,loc_667A
    4415/    668E : (MACRO)              		enable_ints
    4415/    668E : 46FC 2300                           move    #$2300,sr
    4416/    6692 : DAC4                		adda.w	d4,a5
    4417/    6694 : 51CF FF9C           		dbf	d7,loc_6632
    4418/    6698 : 4E75                		rts
    4419/    669A :                     ; ---------------------------------------------------------------------------
    4420/    669A :                     
    4421/    669A :                     loc_669A:
    4422/    669A : 2C4C                		movea.l	a4,a6
    4423/    669C : DCF8 D816           		adda.w	($FFFFD816).w,a6
    4424/    66A0 : 514E                		subq.w	#8,a6
    4425/    66A2 :                     
    4426/    66A2 :                     loc_66A2:
    4427/    66A2 : 343C 080F           		move.w	#$80F,d2
    4428/    66A6 : 47F9 00C0 0000      		lea	(vdp_data_port).l,a3
    4429/    66AC :                     
    4430/    66AC :                     loc_66AC:
    4431/    66AC : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    4432/    66B2 : (MACRO)              		disable_ints
    4432/    66B2 : 46FC 2700                           move    #$2700,sr
    4433/    66B6 : 2740 0004           		move.l	d0,4(a3)
    4434/    66BA : 3A06                		move.w	d6,d5
    4435/    66BC : 7000                		moveq	#0,d0
    4436/    66BE : 2680                		move.l	d0,(a3)
    4437/    66C0 : 2680                		move.l	d0,(a3)
    4438/    66C2 :                     
    4439/    66C2 :                     loc_66C2:
    4440/    66C2 : 2218                		move.l	(a0)+,d1
    4441/    66C4 : 2001                		move.l	d1,d0
    4442/    66C6 : 3002                		move.w	d2,d0
    4443/    66C8 : E998                		rol.l	#4,d0
    4444/    66CA : 3680                		move.w	d0,(a3)
    4445/    66CC : E999                		rol.l	#4,d1
    4446/    66CE : 2001                		move.l	d1,d0
    4447/    66D0 : 3002                		move.w	d2,d0
    4448/    66D2 : E998                		rol.l	#4,d0
    4449/    66D4 : 3680                		move.w	d0,(a3)
    4450/    66D6 : E999                		rol.l	#4,d1
    4451/    66D8 : 2001                		move.l	d1,d0
    4452/    66DA : 3002                		move.w	d2,d0
    4453/    66DC : E998                		rol.l	#4,d0
    4454/    66DE : 3680                		move.w	d0,(a3)
    4455/    66E0 : E999                		rol.l	#4,d1
    4456/    66E2 : 2001                		move.l	d1,d0
    4457/    66E4 : 3002                		move.w	d2,d0
    4458/    66E6 : E998                		rol.l	#4,d0
    4459/    66E8 : 3680                		move.w	d0,(a3)
    4460/    66EA : E999                		rol.l	#4,d1
    4461/    66EC : 2001                		move.l	d1,d0
    4462/    66EE : 3002                		move.w	d2,d0
    4463/    66F0 : E998                		rol.l	#4,d0
    4464/    66F2 : 3680                		move.w	d0,(a3)
    4465/    66F4 : E999                		rol.l	#4,d1
    4466/    66F6 : 2001                		move.l	d1,d0
    4467/    66F8 : 3002                		move.w	d2,d0
    4468/    66FA : E998                		rol.l	#4,d0
    4469/    66FC : 3680                		move.w	d0,(a3)
    4470/    66FE : E999                		rol.l	#4,d1
    4471/    6700 : 2001                		move.l	d1,d0
    4472/    6702 : 3002                		move.w	d2,d0
    4473/    6704 : E998                		rol.l	#4,d0
    4474/    6706 : 3680                		move.w	d0,(a3)
    4475/    6708 : E999                		rol.l	#4,d1
    4476/    670A : 2001                		move.l	d1,d0
    4477/    670C : 3002                		move.w	d2,d0
    4478/    670E : E998                		rol.l	#4,d0
    4479/    6710 : 3680                		move.w	d0,(a3)
    4480/    6712 : 51CD FFAE           		dbf	d5,loc_66C2
    4481/    6716 : 7000                		moveq	#0,d0
    4482/    6718 : 2680                		move.l	d0,(a3)
    4483/    671A : 2680                		move.l	d0,(a3)
    4484/    671C : (MACRO)              		enable_ints
    4484/    671C : 46FC 2300                           move    #$2300,sr
    4485/    6720 : DCC4                		adda.w	d4,a6
    4486/    6722 : 51CF FF88           		dbf	d7,loc_66AC
    4487/    6726 : 4E75                		rts
    4488/    6728 :                     ; ---------------------------------------------------------------------------
    4489/    6728 :                     
    4490/    6728 :                     loc_6728:
    4491/    6728 : 343C 080F           		move.w	#$80F,d2
    4492/    672C : 47F9 00C0 0000      		lea	(vdp_data_port).l,a3
    4493/    6732 : 2C4C                		movea.l	a4,a6
    4494/    6734 : DCF8 D816           		adda.w	($FFFFD816).w,a6
    4495/    6738 :                     
    4496/    6738 :                     loc_6738:
    4497/    6738 : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    4498/    673E : (MACRO)              		disable_ints
    4498/    673E : 46FC 2700                           move    #$2700,sr
    4499/    6742 : 2740 0004           		move.l	d0,4(a3)
    4500/    6746 : 2248                		movea.l	a0,a1
    4501/    6748 : 3A06                		move.w	d6,d5
    4502/    674A :                     
    4503/    674A :                     loc_674A:
    4504/    674A : 2219                		move.l	(a1)+,d1
    4505/    674C : 2001                		move.l	d1,d0
    4506/    674E : 3002                		move.w	d2,d0
    4507/    6750 : E998                		rol.l	#4,d0
    4508/    6752 : 3680                		move.w	d0,(a3)
    4509/    6754 : 3680                		move.w	d0,(a3)
    4510/    6756 : E999                		rol.l	#4,d1
    4511/    6758 : 2001                		move.l	d1,d0
    4512/    675A : 3002                		move.w	d2,d0
    4513/    675C : E998                		rol.l	#4,d0
    4514/    675E : 3680                		move.w	d0,(a3)
    4515/    6760 : 3680                		move.w	d0,(a3)
    4516/    6762 : E999                		rol.l	#4,d1
    4517/    6764 : 2001                		move.l	d1,d0
    4518/    6766 : 3002                		move.w	d2,d0
    4519/    6768 : E998                		rol.l	#4,d0
    4520/    676A : 3680                		move.w	d0,(a3)
    4521/    676C : 3680                		move.w	d0,(a3)
    4522/    676E : E999                		rol.l	#4,d1
    4523/    6770 : 2001                		move.l	d1,d0
    4524/    6772 : 3002                		move.w	d2,d0
    4525/    6774 : E998                		rol.l	#4,d0
    4526/    6776 : 3680                		move.w	d0,(a3)
    4527/    6778 : 3680                		move.w	d0,(a3)
    4528/    677A : E999                		rol.l	#4,d1
    4529/    677C : 2001                		move.l	d1,d0
    4530/    677E : 3002                		move.w	d2,d0
    4531/    6780 : E998                		rol.l	#4,d0
    4532/    6782 : 3680                		move.w	d0,(a3)
    4533/    6784 : 3680                		move.w	d0,(a3)
    4534/    6786 : E999                		rol.l	#4,d1
    4535/    6788 : 2001                		move.l	d1,d0
    4536/    678A : 3002                		move.w	d2,d0
    4537/    678C : E998                		rol.l	#4,d0
    4538/    678E : 3680                		move.w	d0,(a3)
    4539/    6790 : 3680                		move.w	d0,(a3)
    4540/    6792 : E999                		rol.l	#4,d1
    4541/    6794 : 2001                		move.l	d1,d0
    4542/    6796 : 3002                		move.w	d2,d0
    4543/    6798 : E998                		rol.l	#4,d0
    4544/    679A : 3680                		move.w	d0,(a3)
    4545/    679C : 3680                		move.w	d0,(a3)
    4546/    679E : E999                		rol.l	#4,d1
    4547/    67A0 : 2001                		move.l	d1,d0
    4548/    67A2 : 3002                		move.w	d2,d0
    4549/    67A4 : E998                		rol.l	#4,d0
    4550/    67A6 : 3680                		move.w	d0,(a3)
    4551/    67A8 : 3680                		move.w	d0,(a3)
    4552/    67AA : 51CD FF9E           		dbf	d5,loc_674A
    4553/    67AE : DCC4                		adda.w	d4,a6
    4554/    67B0 : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    4555/    67B6 : 2740 0004           		move.l	d0,4(a3)
    4556/    67BA : 3A06                		move.w	d6,d5
    4557/    67BC :                     
    4558/    67BC :                     loc_67BC:
    4559/    67BC : 2218                		move.l	(a0)+,d1
    4560/    67BE : 2001                		move.l	d1,d0
    4561/    67C0 : 3002                		move.w	d2,d0
    4562/    67C2 : E998                		rol.l	#4,d0
    4563/    67C4 : 3680                		move.w	d0,(a3)
    4564/    67C6 : 3680                		move.w	d0,(a3)
    4565/    67C8 : E999                		rol.l	#4,d1
    4566/    67CA : 2001                		move.l	d1,d0
    4567/    67CC : 3002                		move.w	d2,d0
    4568/    67CE : E998                		rol.l	#4,d0
    4569/    67D0 : 3680                		move.w	d0,(a3)
    4570/    67D2 : 3680                		move.w	d0,(a3)
    4571/    67D4 : E999                		rol.l	#4,d1
    4572/    67D6 : 2001                		move.l	d1,d0
    4573/    67D8 : 3002                		move.w	d2,d0
    4574/    67DA : E998                		rol.l	#4,d0
    4575/    67DC : 3680                		move.w	d0,(a3)
    4576/    67DE : 3680                		move.w	d0,(a3)
    4577/    67E0 : E999                		rol.l	#4,d1
    4578/    67E2 : 2001                		move.l	d1,d0
    4579/    67E4 : 3002                		move.w	d2,d0
    4580/    67E6 : E998                		rol.l	#4,d0
    4581/    67E8 : 3680                		move.w	d0,(a3)
    4582/    67EA : 3680                		move.w	d0,(a3)
    4583/    67EC : E999                		rol.l	#4,d1
    4584/    67EE : 2001                		move.l	d1,d0
    4585/    67F0 : 3002                		move.w	d2,d0
    4586/    67F2 : E998                		rol.l	#4,d0
    4587/    67F4 : 3680                		move.w	d0,(a3)
    4588/    67F6 : 3680                		move.w	d0,(a3)
    4589/    67F8 : E999                		rol.l	#4,d1
    4590/    67FA : 2001                		move.l	d1,d0
    4591/    67FC : 3002                		move.w	d2,d0
    4592/    67FE : E998                		rol.l	#4,d0
    4593/    6800 : 3680                		move.w	d0,(a3)
    4594/    6802 : 3680                		move.w	d0,(a3)
    4595/    6804 : E999                		rol.l	#4,d1
    4596/    6806 : 2001                		move.l	d1,d0
    4597/    6808 : 3002                		move.w	d2,d0
    4598/    680A : E998                		rol.l	#4,d0
    4599/    680C : 3680                		move.w	d0,(a3)
    4600/    680E : 3680                		move.w	d0,(a3)
    4601/    6810 : E999                		rol.l	#4,d1
    4602/    6812 : 2001                		move.l	d1,d0
    4603/    6814 : 3002                		move.w	d2,d0
    4604/    6816 : E998                		rol.l	#4,d0
    4605/    6818 : 3680                		move.w	d0,(a3)
    4606/    681A : 3680                		move.w	d0,(a3)
    4607/    681C : 51CD FF9E           		dbf	d5,loc_67BC
    4608/    6820 : (MACRO)              		enable_ints
    4608/    6820 : 46FC 2300                           move    #$2300,sr
    4609/    6824 : DCC4                		adda.w	d4,a6
    4610/    6826 : 51CF FF10           		dbf	d7,loc_6738
    4611/    682A : 4E75                		rts
    4612/    682C :                     
    4613/    682C :                     ; =============== S U B	R O U T	I N E =======================================
    4614/    682C :                     
    4615/    682C :                     ; ===========================================================================
    4616/    682C :                     ; ---------------------------------------------------------------------------
    4617/    682C :                     ; this section maps the "SEGA" large letters on screen correctly
    4618/    682C :                     ; ---------------------------------------------------------------------------
    4619/    682C :                     
    4620/    682C :                     Sega_MapTiles:
    4621/    682C : 47F9 00C0 0000      		lea	(vdp_data_port).l,a3		; load VDP address to a3
    4622/    6832 : 7E0F                		moveq	#$F,d7				; set repeat times
    4623/    6834 : (MACRO)              		disable_ints				; set the stack register (Stopping VBlank)
    4623/    6834 : 46FC 2700                           move    #$2700,sr
    4624/    6838 : 277C 5E00 0000      		move.l	#$5E000000,4(a3)		; set VDP to VRAM write mode
             683E : 0004             
    4625/    6840 : 7000                		moveq	#0,d0				; clear d0
    4626/    6842 :                     
    4627/    6842 :                     ; this is to set the art in such a way that each tile represents 1 pixel on screen
    4628/    6842 :                     ; (Repeats for pixel values 0 to F)
    4629/    6842 :                     
    4630/    6842 :                     DumpTileSizedPixel:
    4631/    6842 :                     		rept 8
    4632/    6842 :                     		move.l	d0,(a3)				; set value to VRAM
    4633/    6842 :                     		endm
    4632/    6842 : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    6844 : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    6846 : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    6848 : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    684A : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    684C : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    684E : 2680                		move.l	d0,(a3)				; set value to VRAM
    4632/    6850 : 2680                		move.l	d0,(a3)				; set value to VRAM
    4634/    6852 : 0680 1111 1111      		addi.l	#$11111111,d0			; increase all nybbles by 1
    4635/    6858 : 51CF FFE8           		dbf	d7,DumpTileSizedPixel		; repeat 10 times
    4636/    685C : 7400                		moveq	#0,d2				; clear d2
    4637/    685E : 7E0F                		moveq	#$F,d7				; set d7 repeat times
    4638/    6860 :                     
    4639/    6860 :                     ; this is to set the art in such a way that each tile represents 1/4 of a pixel on screen
    4640/    6860 :                     ; (Repeats for pixel values 0 to F [x 4 as there are 4 pixels in 1 tile])
    4641/    6860 :                     
    4642/    6860 :                     loc_6860:
    4643/    6860 : 7200                		moveq	#0,d1				; clear d1
    4644/    6862 : 7C0F                		moveq	#$F,d6				; set d6 repeat times
    4645/    6864 :                     
    4646/    6864 :                     loc_6864:
    4647/    6864 : 2002                		move.l	d2,d0				; copy value 2 to d0
    4648/    6866 : 3001                		move.w	d1,d0				; copy value 1 to d0
    4649/    6868 : 2680                		move.l	d0,(a3)				; set values to VRAM
    4650/    686A : 2680                		move.l	d0,(a3)
    4651/    686C : 2680                		move.l	d0,(a3)
    4652/    686E : 2680                		move.l	d0,(a3)
    4653/    6870 : 7000                		moveq	#0,d0				; clear end word of d0
    4654/    6872 : 2680                		move.l	d0,(a3)				; set values to VRAM
    4655/    6874 : 2680                		move.l	d0,(a3)
    4656/    6876 : 2680                		move.l	d0,(a3)
    4657/    6878 : 2680                		move.l	d0,(a3)
    4658/    687A : 0641 1111           		addi.w	#$1111,d1			; increase all nybbles in value 1 by 1
    4659/    687E : 51CE FFE4           		dbf	d6,loc_6864			; repeat 10 times
    4660/    6882 : 0682 1111 0000      		addi.l	#$11110000,d2			; increase all nybbles in value 2 by 1
    4661/    6888 : 51CF FFD6           		dbf	d7,loc_6860			; repeat 10 times
    4662/    688C : (MACRO)              		enable_ints				; set the stack register
    4662/    688C : 46FC 2300                           move    #$2300,sr
    4663/    6890 : 41FA 0710           		lea	ARTCRA_SegaLogo(pc),a0		; load Crackers compressed Sega logo art address to a0
    4664/    6894 : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1		; load Ram address to dump, to a1
    4665/    689A : 4EB9 0000 883C      		jsr	(CracDec).l			; decompress the art and dump
    4666/    68A0 :                     ; ---------------------------------------------------------------------------
    4667/    68A0 :                     ; this part virtually copies the Sega art to a second location
    4668/    68A0 :                     ; first location for Large SEGA letters, second location for small letters
    4669/    68A0 :                     ; ---------------------------------------------------------------------------
    4670/    68A0 : 41F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a0		; load dumped art location to a0
    4671/    68A6 : 43F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a1		; load second art location to a1
    4672/    68AC : 22FC 4800 0000      		move.l	#$48000000,(a1)+		; set VDP settings first to second art location
    4673/    68B2 : 32FC 0040           		move.w	#$40,(a1)+			; then set repeat times to it
    4674/    68B6 : 7C03                		moveq	#3,d6				; set repeat times
    4675/    68B8 :                     
    4676/    68B8 :                     loc_68B8:
    4677/    68B8 : 7E1F                		moveq	#$1F,d7
    4678/    68BA :                     
    4679/    68BA :                     loc_68BA:
    4680/    68BA : 22D8                		move.l	(a0)+,(a1)+
    4681/    68BC : 2358 007C           		move.l	(a0)+,$7C(a1)
    4682/    68C0 : 2358 00FC           		move.l	(a0)+,$FC(a1)
    4683/    68C4 : 2358 017C           		move.l	(a0)+,$17C(a1)
    4684/    68C8 : 51CF FFF0           		dbf	d7,loc_68BA
    4685/    68CC : 43E9 0180           		lea	$180(a1),a1
    4686/    68D0 : 51CE FFE6           		dbf	d6,loc_68B8
    4687/    68D4 : 43F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a1
    4688/    68DA : 4EB9 0000 6F38      		jsr	(SegaToVDP).l
    4689/    68E0 : 41F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a0
    4690/    68E6 : 43F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a1
    4691/    68EC : 7C7F                		moveq	#$7F,d6
    4692/    68EE :                     
    4693/    68EE :                     loc_68EE:
    4694/    68EE : 7E07                		moveq	#7,d7
    4695/    68F0 :                     
    4696/    68F0 :                     loc_68F0:
    4697/    68F0 : 3018                		move.w	(a0)+,d0
    4698/    68F2 : 3200                		move.w	d0,d1
    4699/    68F4 : 3F00                		move.w	d0,-(sp)
    4700/    68F6 : 101F                		move.b	(sp)+,d0
    4701/    68F8 : E818                		ror.b	#4,d0
    4702/    68FA : E858                		ror.w	#4,d0
    4703/    68FC : 4840                		swap	d0
    4704/    68FE : 3001                		move.w	d1,d0
    4705/    6900 : E148                		lsl.w	#8,d0
    4706/    6902 : 1001                		move.b	d1,d0
    4707/    6904 : E818                		ror.b	#4,d0
    4708/    6906 : E858                		ror.w	#4,d0
    4709/    6908 : 22C0                		move.l	d0,(a1)+
    4710/    690A : 2340 001C           		move.l	d0,$1C(a1)
    4711/    690E : 51CF FFE0           		dbf	d7,loc_68F0
    4712/    6912 : 43E9 0020           		lea	$20(a1),a1
    4713/    6916 : 51CE FFD6           		dbf	d6,loc_68EE
    4714/    691A : 41F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a0
    4715/    6920 : 43F9 00FF 2A00      		lea	($FF2A00).l,a1
    4716/    6926 : 22FC 4000 0001      		move.l	#$40000001,(a1)+
    4717/    692C : 32FC 0100           		move.w	#$100,(a1)+
    4718/    6930 : 7C07                		moveq	#7,d6
    4719/    6932 :                     
    4720/    6932 :                     loc_6932:
    4721/    6932 : 7E1F                		moveq	#$1F,d7
    4722/    6934 :                     
    4723/    6934 :                     loc_6934:
    4724/    6934 : 22D8                		move.l	(a0)+,(a1)+
    4725/    6936 : 2358 007C           		move.l	(a0)+,$7C(a1)
    4726/    693A : 2358 00FC           		move.l	(a0)+,$FC(a1)
    4727/    693E : 2358 017C           		move.l	(a0)+,$17C(a1)
    4728/    6942 : 2358 01FC           		move.l	(a0)+,$1FC(a1)
    4729/    6946 : 2358 027C           		move.l	(a0)+,$27C(a1)
    4730/    694A : 2358 02FC           		move.l	(a0)+,$2FC(a1)
    4731/    694E : 2358 037C           		move.l	(a0)+,$37C(a1)
    4732/    6952 : 51CF FFE0           		dbf	d7,loc_6934
    4733/    6956 : 43E9 0380           		lea	$380(a1),a1
    4734/    695A : 51CE FFD6           		dbf	d6,loc_6932
    4735/    695E : 43F9 00FF 2A00      		lea	($FF2A00).l,a1
    4736/    6964 : 4EF9 0000 6F38      		jmp	(SegaToVDP).l
    4737/    696A :                     ; End of function Sega_MapTiles
    4738/    696A :                     
    4739/    696A :                     ; ---------------------------------------------------------------------------
    4740/    696A :                     
    4741/    696A :                     Sega_MainAnimation:
    4742/    696A : 5378 FAC6           		subq.w	#1,($FFFFFAC6).w
    4743/    696E : 6600 FBB4           		bne.w	MultiReturn
    4744/    6972 : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    4745/    6976 : 3038 FAC4           		move.w	($FFFFFAC4).w,d0
    4746/    697A :                     
    4747/    697A :                     .submodes:
    4748/    697A : 4EFB 00FE           		jmp	.submodes(pc,d0.w)
    4749/    697E :                     ; ---------------------------------------------------------------------------
    4750/    697E : 6000 0052           		bra.w	loc_69D2
    4751/    6982 :                     ; ---------------------------------------------------------------------------
    4752/    6982 : 6000 00B2           		bra.w	loc_6A36
    4753/    6986 :                     ; ---------------------------------------------------------------------------
    4754/    6986 : 6000 0100           		bra.w	loc_6A88
    4755/    698A :                     ; ---------------------------------------------------------------------------
    4756/    698A : 6000 015A           		bra.w	loc_6AE6
    4757/    698E :                     ; ---------------------------------------------------------------------------
    4758/    698E : 6000 01E0           		bra.w	loc_6B70
    4759/    6992 :                     ; ---------------------------------------------------------------------------
    4760/    6992 : 6000 0058           		bra.w	loc_69EC
    4761/    6996 :                     ; ---------------------------------------------------------------------------
    4762/    6996 : 6000 00A6           		bra.w	loc_6A3E
    4763/    699A :                     ; ---------------------------------------------------------------------------
    4764/    699A : 6000 00F8           		bra.w	loc_6A94
    4765/    699E :                     ; ---------------------------------------------------------------------------
    4766/    699E : 6000 0150           		bra.w	loc_6AF0
    4767/    69A2 :                     ; ---------------------------------------------------------------------------
    4768/    69A2 : 6000 01D8           		bra.w	loc_6B7C
    4769/    69A6 :                     ; ---------------------------------------------------------------------------
    4770/    69A6 : 6000 004C           		bra.w	loc_69F4
    4771/    69AA :                     ; ---------------------------------------------------------------------------
    4772/    69AA : 6000 009A           		bra.w	loc_6A46
    4773/    69AE :                     ; ---------------------------------------------------------------------------
    4774/    69AE : 6000 00F0           		bra.w	loc_6AA0
    4775/    69B2 :                     ; ---------------------------------------------------------------------------
    4776/    69B2 : 6000 0146           		bra.w	loc_6AFA
    4777/    69B6 :                     ; ---------------------------------------------------------------------------
    4778/    69B6 : 6000 01D0           		bra.w	loc_6B88
    4779/    69BA :                     ; ---------------------------------------------------------------------------
    4780/    69BA : 6000 0040           		bra.w	loc_69FC
    4781/    69BE :                     ; ---------------------------------------------------------------------------
    4782/    69BE : 6000 008E           		bra.w	loc_6A4E
    4783/    69C2 :                     ; ---------------------------------------------------------------------------
    4784/    69C2 : 6000 00E8           		bra.w	loc_6AAC
    4785/    69C6 :                     ; ---------------------------------------------------------------------------
    4786/    69C6 : 6000 013C           		bra.w	loc_6B04
    4787/    69CA :                     ; ---------------------------------------------------------------------------
    4788/    69CA : 6000 01C8           		bra.w	loc_6B94
    4789/    69CE :                     ; ---------------------------------------------------------------------------
    4790/    69CE : 6000 0208           		bra.w	loc_6BD8
    4791/    69D2 :                     ; ---------------------------------------------------------------------------
    4792/    69D2 :                     
    4793/    69D2 :                     loc_69D2:
    4794/    69D2 : 33FC 8164 00C0      		move.w	#$8164,(vdp_control_port).l
             69D8 : 0004             
    4795/    69DA : 31FC 8164 C9BA      		move.w	#$8164,($FFFFC9BA).w
    4796/    69E0 : 6100 FC30           		bsr.w	SegaScrn_CheckRegion
    4797/    69E4 : 41F9 00FF 0280      		lea	(unk_0200&$FFFFFF+$80).l,a0
    4798/    69EA : 6016                		bra.s	loc_6A02
    4799/    69EC :                     ; ---------------------------------------------------------------------------
    4800/    69EC :                     
    4801/    69EC :                     loc_69EC:
    4802/    69EC : 41F9 00FF 0480      		lea	(unk_0400&$FFFFFF+$80).l,a0
    4803/    69F2 : 600E                		bra.s	loc_6A02
    4804/    69F4 :                     ; ---------------------------------------------------------------------------
    4805/    69F4 :                     
    4806/    69F4 :                     loc_69F4:
    4807/    69F4 : 41F9 00FF 0680      		lea	(unk_0600&$FFFFFF+$80).l,a0
    4808/    69FA : 6006                		bra.s	loc_6A02
    4809/    69FC :                     ; ---------------------------------------------------------------------------
    4810/    69FC :                     
    4811/    69FC :                     loc_69FC:
    4812/    69FC : 41F9 00FF 0880      		lea	(unk_0800&$FFFFFF+$80).l,a0
    4813/    6A02 :                     
    4814/    6A02 :                     loc_6A02:
    4815/    6A02 : 31FC 0008 FAC6      		move.w	#8,($FFFFFAC6).w
    4816/    6A08 : 43F8 D164           		lea	($FFFFD164).w,a1
    4817/    6A0C : 4299                		clr.l	(a1)+
    4818/    6A0E : 31FC FFA0 CA5E      		move.w	#$FFA0,($FFFFCA5E).w
    4819/    6A14 : 31FC FFA0 CA60      		move.w	#$FFA0,($FFFFCA60).w
    4820/    6A1A : 31FC 0018 CDDE      		move.w	#$18,($FFFFCDDE).w
    4821/    6A20 : 31FC 0014 CDE0      		move.w	#$14,($FFFFCDE0).w
    4822/    6A26 : 49F8 0000           		lea	(RomStart).w,a4
    4823/    6A2A : 383C 0080           		move.w	#$80,d4
    4824/    6A2E : 7C03                		moveq	#3,d6
    4825/    6A30 : 7E0F                		moveq	#$F,d7
    4826/    6A32 : 6000 FCF4           		bra.w	loc_6728
    4827/    6A36 :                     ; ---------------------------------------------------------------------------
    4828/    6A36 :                     
    4829/    6A36 :                     loc_6A36:
    4830/    6A36 : 41F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a0
    4831/    6A3C : 6016                		bra.s	loc_6A54
    4832/    6A3E :                     ; ---------------------------------------------------------------------------
    4833/    6A3E :                     
    4834/    6A3E :                     loc_6A3E:
    4835/    6A3E : 41F9 00FF 0400      		lea	(unk_0400&$FFFFFF).l,a0
    4836/    6A44 : 600E                		bra.s	loc_6A54
    4837/    6A46 :                     ; ---------------------------------------------------------------------------
    4838/    6A46 :                     
    4839/    6A46 :                     loc_6A46:
    4840/    6A46 : 41F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a0
    4841/    6A4C : 6006                		bra.s	loc_6A54
    4842/    6A4E :                     ; ---------------------------------------------------------------------------
    4843/    6A4E :                     
    4844/    6A4E :                     loc_6A4E:
    4845/    6A4E : 41F9 00FF 0800      		lea	(unk_0800&$FFFFFF).l,a0
    4846/    6A54 :                     
    4847/    6A54 :                     loc_6A54:
    4848/    6A54 : 31FC 0004 FAC6      		move.w	#4,($FFFFFAC6).w
    4849/    6A5A : 43F8 D164           		lea	($FFFFD164).w,a1
    4850/    6A5E : 4299                		clr.l	(a1)+
    4851/    6A60 : 31FC FFA0 CA5E      		move.w	#$FFA0,($FFFFCA5E).w
    4852/    6A66 : 31FC FFA0 CA60      		move.w	#$FFA0,($FFFFCA60).w
    4853/    6A6C : 31FC 0018 CDDE      		move.w	#$18,($FFFFCDDE).w
    4854/    6A72 : 31FC 0014 CDE0      		move.w	#$14,($FFFFCDE0).w
    4855/    6A78 : 49F8 0020           		lea	($20).w,a4
    4856/    6A7C : 383C 0080           		move.w	#$80,d4
    4857/    6A80 : 7C03                		moveq	#3,d6
    4858/    6A82 : 7E1F                		moveq	#$1F,d7
    4859/    6A84 : 6000 FC14           		bra.w	loc_669A
    4860/    6A88 :                     ; ---------------------------------------------------------------------------
    4861/    6A88 :                     
    4862/    6A88 :                     loc_6A88:
    4863/    6A88 : 41F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a0
    4864/    6A8E : 303C FFA0           		move.w	#$FFA0,d0
    4865/    6A92 : 6022                		bra.s	loc_6AB6
    4866/    6A94 :                     ; ---------------------------------------------------------------------------
    4867/    6A94 :                     
    4868/    6A94 :                     loc_6A94:
    4869/    6A94 : 41F9 00FF 0400      		lea	(unk_0400&$FFFFFF).l,a0
    4870/    6A9A : 303C FFB0           		move.w	#$FFB0,d0
    4871/    6A9E : 6016                		bra.s	loc_6AB6
    4872/    6AA0 :                     ; ---------------------------------------------------------------------------
    4873/    6AA0 :                     
    4874/    6AA0 :                     loc_6AA0:
    4875/    6AA0 : 41F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a0
    4876/    6AA6 : 303C FFC0           		move.w	#$FFC0,d0
    4877/    6AAA : 600A                		bra.s	loc_6AB6
    4878/    6AAC :                     ; ---------------------------------------------------------------------------
    4879/    6AAC :                     
    4880/    6AAC :                     loc_6AAC:
    4881/    6AAC : 41F9 00FF 0800      		lea	(unk_0800&$FFFFFF).l,a0
    4882/    6AB2 : 303C FFD0           		move.w	#$FFD0,d0
    4883/    6AB6 :                     
    4884/    6AB6 :                     loc_6AB6:
    4885/    6AB6 : 31FC 0004 FAC6      		move.w	#4,($FFFFFAC6).w
    4886/    6ABC : 43F8 D164           		lea	($FFFFD164).w,a1
    4887/    6AC0 : 4299                		clr.l	(a1)+
    4888/    6AC2 : 31C0 CA5E           		move.w	d0,($FFFFCA5E).w
    4889/    6AC6 : 31C0 CA60           		move.w	d0,($FFFFCA60).w
    4890/    6ACA : 31FC 0118 CDDE      		move.w	#$118,($FFFFCDDE).w
    4891/    6AD0 : 31FC 0114 CDE0      		move.w	#$114,($FFFFCDE0).w
    4892/    6AD6 : 49F8 1430           		lea	(loc_1430).w,a4
    4893/    6ADA : 383C 0080           		move.w	#$80,d4
    4894/    6ADE : 7C03                		moveq	#3,d6
    4895/    6AE0 : 7E0F                		moveq	#$F,d7
    4896/    6AE2 : 6000 FB46           		bra.w	loc_662A
    4897/    6AE6 :                     ; ---------------------------------------------------------------------------
    4898/    6AE6 :                     
    4899/    6AE6 :                     loc_6AE6:
    4900/    6AE6 : 3E3C 0200           		move.w	#$200,d7
    4901/    6AEA : 303C 00E0           		move.w	#$E0,d0
    4902/    6AEE : 601C                		bra.s	loc_6B0C
    4903/    6AF0 :                     ; ---------------------------------------------------------------------------
    4904/    6AF0 :                     
    4905/    6AF0 :                     loc_6AF0:
    4906/    6AF0 : 3E3C 0240           		move.w	#$240,d7
    4907/    6AF4 : 303C 00F0           		move.w	#$F0,d0
    4908/    6AF8 : 6012                		bra.s	loc_6B0C
    4909/    6AFA :                     ; ---------------------------------------------------------------------------
    4910/    6AFA :                     
    4911/    6AFA :                     loc_6AFA:
    4912/    6AFA : 3E3C 0280           		move.w	#$280,d7
    4913/    6AFE : 303C 0110           		move.w	#$110,d0
    4914/    6B02 : 6008                		bra.s	loc_6B0C
    4915/    6B04 :                     ; ---------------------------------------------------------------------------
    4916/    6B04 :                     
    4917/    6B04 :                     loc_6B04:
    4918/    6B04 : 3E3C 02C0           		move.w	#$2C0,d7
    4919/    6B08 : 303C 0120           		move.w	#$120,d0
    4920/    6B0C :                     
    4921/    6B0C :                     loc_6B0C:
    4922/    6B0C : 31FC 0004 FAC6      		move.w	#4,($FFFFFAC6).w
    4923/    6B12 : 31FC 00A0 CA5E      		move.w	#$A0,($FFFFCA5E).w
    4924/    6B18 : 31FC 00A0 CA60      		move.w	#$A0,($FFFFCA60).w
    4925/    6B1E : 31FC 0118 CDDE      		move.w	#$118,($FFFFCDDE).w
    4926/    6B24 : 31FC 0114 CDE0      		move.w	#$114,($FFFFCDE0).w
    4927/    6B2A : 41F8 D164           		lea	($FFFFD164).w,a0
    4928/    6B2E : 20FC 00C8 0F01      		move.l	#$C80F01,(a0)+
    4929/    6B34 : 30C7                		move.w	d7,(a0)+
    4930/    6B36 : 30C0                		move.w	d0,(a0)+
    4931/    6B38 : 0647 0010           		addi.w	#$10,d7
    4932/    6B3C : 20FC 00C8 0F02      		move.l	#$C80F02,(a0)+
    4933/    6B42 : 30C7                		move.w	d7,(a0)+
    4934/    6B44 : 0640 0020           		addi.w	#$20,d0
    4935/    6B48 : 30C0                		move.w	d0,(a0)+
    4936/    6B4A : 0647 0010           		addi.w	#$10,d7
    4937/    6B4E : 20FC 00E8 0F03      		move.l	#$E80F03,(a0)+
    4938/    6B54 : 30C7                		move.w	d7,(a0)+
    4939/    6B56 : 0440 0020           		subi.w	#$20,d0
    4940/    6B5A : 30C0                		move.w	d0,(a0)+
    4941/    6B5C : 0647 0010           		addi.w	#$10,d7
    4942/    6B60 : 20FC 00E8 0F04      		move.l	#$E80F04,(a0)+
    4943/    6B66 : 30C7                		move.w	d7,(a0)+
    4944/    6B68 : 0640 0020           		addi.w	#$20,d0
    4945/    6B6C : 3080                		move.w	d0,(a0)
    4946/    6B6E : 4E75                		rts
    4947/    6B70 :                     ; ---------------------------------------------------------------------------
    4948/    6B70 :                     
    4949/    6B70 :                     loc_6B70:
    4950/    6B70 : 2E3C 0040 00EF      		move.l	#$4000EF,d7
    4951/    6B76 : 41F8 D184           		lea	($FFFFD184).w,a0
    4952/    6B7A : 6022                		bra.s	loc_6B9E
    4953/    6B7C :                     ; ---------------------------------------------------------------------------
    4954/    6B7C :                     
    4955/    6B7C :                     loc_6B7C:
    4956/    6B7C : 2E3C 0050 0105      		move.l	#$500105,d7
    4957/    6B82 : 41F8 D18C           		lea	($FFFFD18C).w,a0
    4958/    6B86 : 6016                		bra.s	loc_6B9E
    4959/    6B88 :                     ; ---------------------------------------------------------------------------
    4960/    6B88 :                     
    4961/    6B88 :                     loc_6B88:
    4962/    6B88 : 2E3C 0060 011B      		move.l	#$60011B,d7
    4963/    6B8E : 41F8 D194           		lea	($FFFFD194).w,a0
    4964/    6B92 : 600A                		bra.s	loc_6B9E
    4965/    6B94 :                     ; ---------------------------------------------------------------------------
    4966/    6B94 :                     
    4967/    6B94 :                     loc_6B94:
    4968/    6B94 : 2E3C 0070 0135      		move.l	#$700135,d7
    4969/    6B9A : 41F8 D19C           		lea	($FFFFD19C).w,a0
    4970/    6B9E :                     
    4971/    6B9E :                     loc_6B9E:
    4972/    6B9E : 31FC 0004 FAC6      		move.w	#4,($FFFFFAC6).w
    4973/    6BA4 : 31FC 00A0 CA5E      		move.w	#$A0,($FFFFCA5E).w
    4974/    6BAA : 31FC 00A0 CA60      		move.w	#$A0,($FFFFCA60).w
    4975/    6BB0 : 31FC 0118 CDDE      		move.w	#$118,($FFFFCDDE).w
    4976/    6BB6 : 31FC 0114 CDE0      		move.w	#$114,($FFFFCDE0).w
    4977/    6BBC : 30FC 00D8           		move.w	#$D8,(a0)+
    4978/    6BC0 : 5488                		addq.l	#2,a0
    4979/    6BC2 : 2087                		move.l	d7,(a0)
    4980/    6BC4 : 41F8 D164           		lea	($FFFFD164).w,a0
    4981/    6BC8 : 4250                		clr.w	(a0)
    4982/    6BCA : 5088                		addq.l	#8,a0
    4983/    6BCC : 4250                		clr.w	(a0)
    4984/    6BCE : 5088                		addq.l	#8,a0
    4985/    6BD0 : 4250                		clr.w	(a0)
    4986/    6BD2 : 5088                		addq.l	#8,a0
    4987/    6BD4 : 4250                		clr.w	(a0)
    4988/    6BD6 : 4E75                		rts
    4989/    6BD8 :                     ; ---------------------------------------------------------------------------
    4990/    6BD8 :                     
    4991/    6BD8 :                     loc_6BD8:
    4992/    6BD8 : 41F8 D164           		lea	($FFFFD164).w,a0
    4993/    6BDC : 2028 0020           		move.l	$20(a0),d0
    4994/    6BE0 : 1028 0003           		move.b	3(a0),d0
    4995/    6BE4 : 20C0                		move.l	d0,(a0)+
    4996/    6BE6 : 20E8 0020           		move.l	$20(a0),(a0)+
    4997/    6BEA : 2028 0020           		move.l	$20(a0),d0
    4998/    6BEE : 1028 0003           		move.b	3(a0),d0
    4999/    6BF2 : 20C0                		move.l	d0,(a0)+
    5000/    6BF4 : 20E8 0020           		move.l	$20(a0),(a0)+
    5001/    6BF8 : 2028 0020           		move.l	$20(a0),d0
    5002/    6BFC : 1028 0003           		move.b	3(a0),d0
    5003/    6C00 : 20C0                		move.l	d0,(a0)+
    5004/    6C02 : 20E8 0020           		move.l	$20(a0),(a0)+
    5005/    6C06 : 2028 0020           		move.l	$20(a0),d0
    5006/    6C0A : 1028 0003           		move.b	3(a0),d0
    5007/    6C0E : 20C0                		move.l	d0,(a0)+
    5008/    6C10 : 20A8 0020           		move.l	$20(a0),(a0)
    5009/    6C14 : 31FC 0010 FAC4      		move.w	#$10,($FFFFFAC4).w
    5010/    6C1A : 5878 D824           		addq.w	#4,(v_subgamemode).w
    5011/    6C1E : 4E75                		rts
    5012/    6C20 :                     ; ---------------------------------------------------------------------------
    5013/    6C20 :                     
    5014/    6C20 :                     Sega_AltAnimation:
    5015/    6C20 : 3038 FAC4           		move.w	($FFFFFAC4).w,d0
    5016/    6C24 : 4EFB 0002           		jmp	.submodes(pc,d0.w)
    5017/    6C28 :                     ; ---------------------------------------------------------------------------
    5018/    6C28 :                     
    5019/    6C28 :                     .submodes:
    5020/    6C28 : 6000 001E           		bra.w	loc_6C48
    5021/    6C2C :                     ; ---------------------------------------------------------------------------
    5022/    6C2C : 6000 00CE           		bra.w	loc_6CFC
    5023/    6C30 :                     ; ---------------------------------------------------------------------------
    5024/    6C30 : 6000 00F0           		bra.w	loc_6D22
    5025/    6C34 :                     ; ---------------------------------------------------------------------------
    5026/    6C34 : 6000 00C6           		bra.w	loc_6CFC
    5027/    6C38 :                     ; ---------------------------------------------------------------------------
    5028/    6C38 : 6000 0134           		bra.w	loc_6D6E
    5029/    6C3C :                     ; ---------------------------------------------------------------------------
    5030/    6C3C : 6000 019E           		bra.w	loc_6DDC
    5031/    6C40 :                     ; ---------------------------------------------------------------------------
    5032/    6C40 : 6000 01BC           		bra.w	loc_6DFE
    5033/    6C44 :                     ; ---------------------------------------------------------------------------
    5034/    6C44 : 6000 0220           		bra.w	loc_6E66
    5035/    6C48 :                     ; ---------------------------------------------------------------------------
    5036/    6C48 :                     
    5037/    6C48 :                     loc_6C48:
    5038/    6C48 : 33FC 9003 00C0      		move.w	#$9003,(vdp_control_port).l
             6C4E : 0004             
    5039/    6C50 : 31FC 9003 C9D8      		move.w	#$9003,($FFFFC9D8).w
    5040/    6C56 : 47F9 00C0 0000      		lea	(vdp_data_port).l,a3
    5041/    6C5C : 3C78 D816           		movea.w	($FFFFD816).w,a6
    5042/    6C60 : 4DEE 00BE           		lea	$BE(a6),a6
    5043/    6C64 : 243C A0F1 A0F1      		move.l	#$A0F1A0F1,d2
    5044/    6C6A : (MACRO)              		disable_ints
    5044/    6C6A : 46FC 2700                           move    #$2700,sr
    5045/    6C6E : 7E1F                		moveq	#$1F,d7
    5046/    6C70 :                     
    5047/    6C70 :                     loc_6C70:
    5048/    6C70 : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    5049/    6C76 : 2740 0004           		move.l	d0,4(a3)
    5050/    6C7A : 2682                		move.l	d2,(a3)
    5051/    6C7C : 2682                		move.l	d2,(a3)
    5052/    6C7E : 2682                		move.l	d2,(a3)
    5053/    6C80 : 2682                		move.l	d2,(a3)
    5054/    6C82 : DCFC 0100           		adda.w	#$100,a6
    5055/    6C86 : 51CF FFE8           		dbf	d7,loc_6C70
    5056/    6C8A : (MACRO)              		enable_ints
    5056/    6C8A : 46FC 2300                           move    #$2300,sr
    5057/    6C8E : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    5058/    6C92 : 31FC 0020 FAC6      		move.w	#$20,($FFFFFAC6).w
    5059/    6C98 : 31FC 00F8 CA5E      		move.w	#$F8,($FFFFCA5E).w
    5060/    6C9E : 31FC 0018 CDDE      		move.w	#$18,($FFFFCDDE).w
    5061/    6CA4 : 31FC 00F8 CA60      		move.w	#$F8,($FFFFCA60).w
    5062/    6CAA : 31FC 0018 CDE0      		move.w	#$18,($FFFFCDE0).w
    5063/    6CB0 : 41F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a0
    5064/    6CB6 : 3C78 D816           		movea.w	($FFFFD816).w,a6
    5065/    6CBA : 6100 0034           		bsr.w	sub_6CF0
    5066/    6CBE : 41F9 00FF 0400      		lea	(unk_0400&$FFFFFF).l,a0
    5067/    6CC4 : 3C78 D818           		movea.w	($FFFFD818).w,a6
    5068/    6CC8 : 4DEE 002C           		lea	$2C(a6),a6
    5069/    6CCC : 6100 0022           		bsr.w	sub_6CF0
    5070/    6CD0 : 41F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a0
    5071/    6CD6 : 3C78 D816           		movea.w	($FFFFD816).w,a6
    5072/    6CDA : 4DEE 0058           		lea	$58(a6),a6
    5073/    6CDE : 6100 0010           		bsr.w	sub_6CF0
    5074/    6CE2 : 41F9 00FF 0800      		lea	(unk_0800&$FFFFFF).l,a0
    5075/    6CE8 : 3C78 D818           		movea.w	($FFFFD818).w,a6
    5076/    6CEC : 4DEE 008C           		lea	$8C(a6),a6
    5077/    6CF0 :                     
    5078/    6CF0 :                     ; =============== S U B	R O U T	I N E =======================================
    5079/    6CF0 :                     
    5080/    6CF0 :                     
    5081/    6CF0 :                     sub_6CF0:
    5082/    6CF0 :                     
    5083/    6CF0 :                     ; FUNCTION CHUNK AT 000066A2 SIZE 00000086 BYTES
    5084/    6CF0 :                     
    5085/    6CF0 : 383C 0100           		move.w	#$100,d4
    5086/    6CF4 : 7C03                		moveq	#3,d6
    5087/    6CF6 : 7E1F                		moveq	#$1F,d7
    5088/    6CF8 : 6000 F9A8           		bra.w	loc_66A2
    5089/    6CFC :                     ; End of function sub_6CF0
    5090/    6CFC :                     
    5091/    6CFC :                     ; ---------------------------------------------------------------------------
    5092/    6CFC :                     
    5093/    6CFC :                     loc_6CFC:
    5094/    6CFC : 33FC 8164 00C0      		move.w	#$8164,(vdp_control_port).l
             6D02 : 0004             
    5095/    6D04 : 31FC 8164 C9BA      		move.w	#$8164,($FFFFC9BA).w
    5096/    6D0A : 0478 0010 CA5E      		subi.w	#$10,($FFFFCA5E).w
    5097/    6D10 : 0478 0010 CA60      		subi.w	#$10,($FFFFCA60).w
    5098/    6D16 : 5378 FAC6           		subq.w	#1,($FFFFFAC6).w
    5099/    6D1A : 6604                		bne.s	locret_6D20
    5100/    6D1C : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    5101/    6D20 :                     
    5102/    6D20 :                     locret_6D20:
    5103/    6D20 : 4E75                		rts
    5104/    6D22 :                     ; ---------------------------------------------------------------------------
    5105/    6D22 :                     
    5106/    6D22 :                     loc_6D22:
    5107/    6D22 : 47F9 00C0 0000      		lea	(vdp_data_port).l,a3
    5108/    6D28 : 7400                		moveq	#0,d2
    5109/    6D2A : 3C78 D816           		movea.w	($FFFFD816).w,a6
    5110/    6D2E : 4DEE 00BE           		lea	$BE(a6),a6
    5111/    6D32 : (MACRO)              		disable_ints
    5111/    6D32 : 46FC 2700                           move    #$2700,sr
    5112/    6D36 : 7E1F                		moveq	#$1F,d7
    5113/    6D38 :                     
    5114/    6D38 :                     loc_6D38:
    5115/    6D38 : 4EB9 0000 6F26      		jsr	(sub_6F26).l
    5116/    6D3E : 2740 0004           		move.l	d0,4(a3)
    5117/    6D42 : 2682                		move.l	d2,(a3)
    5118/    6D44 : 2682                		move.l	d2,(a3)
    5119/    6D46 : 2682                		move.l	d2,(a3)
    5120/    6D48 : 2682                		move.l	d2,(a3)
    5121/    6D4A : DCFC 0100           		adda.w	#$100,a6
    5122/    6D4E : 51CF FFE8           		dbf	d7,loc_6D38
    5123/    6D52 : (MACRO)              		enable_ints
    5123/    6D52 : 46FC 2300                           move    #$2300,sr
    5124/    6D56 : 0478 0010 CA5E      		subi.w	#$10,($FFFFCA5E).w
    5125/    6D5C : 0478 0010 CA60      		subi.w	#$10,($FFFFCA60).w
    5126/    6D62 : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    5127/    6D66 : 31FC 0020 FAC6      		move.w	#$20,($FFFFFAC6).w
    5128/    6D6C : 4E75                		rts
    5129/    6D6E :                     ; ---------------------------------------------------------------------------
    5130/    6D6E :                     
    5131/    6D6E :                     loc_6D6E:
    5132/    6D6E : 6100 F8A2           		bsr.w	SegaScrn_CheckRegion
    5133/    6D72 : (MACRO)              		disable_ints
    5133/    6D72 : 46FC 2700                           move    #$2700,sr
    5134/    6D76 : 703F                		moveq	#$3F,d0
    5135/    6D78 : 723F                		moveq	#$3F,d1
    5136/    6D7A : 7400                		moveq	#0,d2
    5137/    6D7C : 3638 D816           		move.w	($FFFFD816).w,d3
    5138/    6D80 : 4EB8 086E           		jsr	(sub_86E).w
    5139/    6D84 : 703F                		moveq	#$3F,d0
    5140/    6D86 : 723F                		moveq	#$3F,d1
    5141/    6D88 : 7400                		moveq	#0,d2
    5142/    6D8A : 3638 D818           		move.w	($FFFFD818).w,d3
    5143/    6D8E : 4EB8 086E           		jsr	(sub_86E).w
    5144/    6D92 : (MACRO)              		enable_ints
    5144/    6D92 : 46FC 2300                           move    #$2300,sr
    5145/    6D96 : 41F9 0000 6DBC      		lea	(dword_6DBC).l,a0
    5146/    6D9C : 43F8 D164           		lea	($FFFFD164).w,a1
    5147/    6DA0 :                     		rept 8
    5148/    6DA0 :                     		move.l	(a0)+,(a1)+
    5149/    6DA0 :                     		endr
    5148/    6DA0 : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DA2 : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DA4 : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DA6 : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DA8 : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DAA : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DAC : 22D8                		move.l	(a0)+,(a1)+
    5148/    6DAE : 22D8                		move.l	(a0)+,(a1)+
    5150/    6DB0 : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    5151/    6DB4 : 31FC 0020 FAC6      		move.w	#$20,($FFFFFAC6).w
    5152/    6DBA : 4E75                		rts
    5153/    6DBC :                     ; ---------------------------------------------------------------------------
    5154/    6DBC : 00D8 0F01           dword_6DBC:	dc.l $D80F01
    5155/    6DC0 : 0040 FFEF           		dc.l $40FFEF
    5156/    6DC4 : 00D8 0F02           		dc.l $D80F02
    5157/    6DC8 : 0050 0005           		dc.l $500005
    5158/    6DCC : 00D8 0F03           		dc.l $D80F03
    5159/    6DD0 : 0060 001B           		dc.l $60001B
    5160/    6DD4 : 00D8 0F00           		dc.l $D80F00
    5161/    6DD8 : 0070 0035           		dc.l $700035
    5162/    6DDC :                     ; ---------------------------------------------------------------------------
    5163/    6DDC :                     
    5164/    6DDC :                     loc_6DDC:
    5165/    6DDC : 5078 D16A           		addq.w	#8,($FFFFD16A).w
    5166/    6DE0 : 5078 D172           		addq.w	#8,($FFFFD172).w
    5167/    6DE4 : 5078 D17A           		addq.w	#8,($FFFFD17A).w
    5168/    6DE8 : 5078 D182           		addq.w	#8,($FFFFD182).w
    5169/    6DEC : 5378 FAC6           		subq.w	#1,($FFFFFAC6).w
    5170/    6DF0 : 660A                		bne.s	locret_6DFC
    5171/    6DF2 : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    5172/    6DF6 : 31FC 0021 FAC6      		move.w	#$21,($FFFFFAC6).w
    5173/    6DFC :                     
    5174/    6DFC :                     locret_6DFC:
    5175/    6DFC : 4E75                		rts
    5176/    6DFE :                     ; ---------------------------------------------------------------------------
    5177/    6DFE :                     
    5178/    6DFE :                     loc_6DFE:
    5179/    6DFE : 5378 FAC6           		subq.w	#1,($FFFFFAC6).w
    5180/    6E02 : 673C                		beq.s	loc_6E40
    5181/    6E04 : 3038 FAC6           		move.w	($FFFFFAC6).w,d0
    5182/    6E08 : 3200                		move.w	d0,d1
    5183/    6E0A : 0241 0003           		andi.w	#3,d1
    5184/    6E0E : 662E                		bne.s	locret_6E3E
    5185/    6E10 : 0240 001C           		andi.w	#$1C,d0
    5186/    6E14 : 41F9 0000 6E46      		lea	(dword_6E46).l,a0
    5187/    6E1A : D0C0                		adda.w	d0,a0
    5188/    6E1C : 43F8 D16A           		lea	($FFFFD16A).w,a1
    5189/    6E20 : 1018                		move.b	(a0)+,d0
    5190/    6E22 : 4880                		ext.w	d0
    5191/    6E24 : D151                		add.w	d0,(a1)
    5192/    6E26 : 1018                		move.b	(a0)+,d0
    5193/    6E28 : 4880                		ext.w	d0
    5194/    6E2A : D169 0008           		add.w	d0,8(a1)
    5195/    6E2E : 1018                		move.b	(a0)+,d0
    5196/    6E30 : 4880                		ext.w	d0
    5197/    6E32 : D169 0010           		add.w	d0,$10(a1)
    5198/    6E36 : 1018                		move.b	(a0)+,d0
    5199/    6E38 : 4880                		ext.w	d0
    5200/    6E3A : D169 0018           		add.w	d0,$18(a1)
    5201/    6E3E :                     
    5202/    6E3E :                     locret_6E3E:
    5203/    6E3E : 4E75                		rts
    5204/    6E40 :                     ; ---------------------------------------------------------------------------
    5205/    6E40 :                     
    5206/    6E40 :                     loc_6E40:
    5207/    6E40 : 5878 FAC4           		addq.w	#4,($FFFFFAC4).w
    5208/    6E44 : 4E75                		rts
    5209/    6E46 :                     ; ---------------------------------------------------------------------------
    5210/    6E46 : 0000 0000           dword_6E46:	dc.l 0
    5211/    6E4A : FEFF FF00           		dc.l $FEFFFF00
    5212/    6E4E : FEFE FFFF           		dc.l $FEFEFFFF
    5213/    6E52 : FEFF FF00           		dc.l $FEFFFF00
    5214/    6E56 : FEFE FFFF           		dc.l $FEFEFFFF
    5215/    6E5A : 0000 0000           		dc.l 0
    5216/    6E5E : 0202 0202           		dc.l $2020202
    5217/    6E62 : 0604 0200           		dc.l $6040200
    5218/    6E66 :                     ; ---------------------------------------------------------------------------
    5219/    6E66 :                     
    5220/    6E66 :                     loc_6E66:
    5221/    6E66 : 41F8 D184           		lea	($FFFFD184).w,a0
    5222/    6E6A : 2028 FFE0           		move.l	-$20(a0),d0
    5223/    6E6E : 1028 0003           		move.b	3(a0),d0
    5224/    6E72 : 20C0                		move.l	d0,(a0)+
    5225/    6E74 : 20E8 FFE0           		move.l	-$20(a0),(a0)+
    5226/    6E78 : 2028 FFE0           		move.l	-$20(a0),d0
    5227/    6E7C : 1028 0003           		move.b	3(a0),d0
    5228/    6E80 : 20C0                		move.l	d0,(a0)+
    5229/    6E82 : 20E8 FFE0           		move.l	-$20(a0),(a0)+
    5230/    6E86 : 2028 FFE0           		move.l	-$20(a0),d0
    5231/    6E8A : 1028 0003           		move.b	3(a0),d0
    5232/    6E8E : 20C0                		move.l	d0,(a0)+
    5233/    6E90 : 20E8 FFE0           		move.l	-$20(a0),(a0)+
    5234/    6E94 : 2028 FFE0           		move.l	-$20(a0),d0
    5235/    6E98 : 1028 0003           		move.b	3(a0),d0
    5236/    6E9C : 20C0                		move.l	d0,(a0)+
    5237/    6E9E : 20A8 FFE0           		move.l	-$20(a0),(a0)
    5238/    6EA2 : 117C 0004 FFDF      		move.b	#4,-$21(a0)
    5239/    6EA8 : 31FC 0010 FAC4      		move.w	#$10,($FFFFFAC4).w
    5240/    6EAE : 5878 D824           		addq.w	#4,(v_subgamemode).w
    5241/    6EB2 : 4E75                		rts
    5242/    6EB4 :                     ; ---------------------------------------------------------------------------
    5243/    6EB4 :                     
    5244/    6EB4 :                     loc_6EB4:
    5245/    6EB4 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    5246/    6EB8 : 4EB8 096E           		jsr	(sub_96E).w
    5247/    6EBC : 203C FFFF D164      		move.l	#$FFFFD164,d0
    5248/    6EC2 : 3238 D81A           		move.w	($FFFFD81A).w,d1
    5249/    6EC6 : 343C 0140           		move.w	#$140,d2
    5250/    6ECA : 4EB8 05E8           		jsr	(sub_5E8).w
    5251/    6ECE : 4EB8 0448           		jsr	(VDPSetup_01).w
    5252/    6ED2 : 3038 D81C           		move.w	($FFFFD81C).w,d0
    5253/    6ED6 : E588                		lsl.l	#2,d0
    5254/    6ED8 : E448                		lsr.w	#2,d0
    5255/    6EDA : 0040 4000           		ori.w	#$4000,d0
    5256/    6EDE : 4840                		swap	d0
    5257/    6EE0 : 0240 0003           		andi.w	#3,d0
    5258/    6EE4 : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    5259/    6EEA : 23F8 CA5E 00C0      		move.l	($FFFFCA5E).w,(vdp_data_port).l
             6EF0 : 0000             
    5260/    6EF2 : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             6EF8 : 00C0 0004          
    5261/    6EFC : 23F8 CDDE 00C0      		move.l	($FFFFCDDE).w,(vdp_data_port).l
             6F02 : 0000             
    5262/    6F04 : 3038 FFC4           		move.w	($FFFFFFC4).w,d0
    5263/    6F08 : D040                		add.w	d0,d0
    5264/    6F0A : D040                		add.w	d0,d0
    5265/    6F0C : D078 FFC4           		add.w	($FFFFFFC4).w,d0
    5266/    6F10 : 5240                		addq.w	#1,d0
    5267/    6F12 : 31C0 FFC4           		move.w	d0,($FFFFFFC4).w
    5268/    6F16 : 0038 0080 FFC9      		ori.b	#$80,(v_lagger).w
    5269/    6F1C : 5278 F000           		addq.w	#1,($FFFFF000).w
    5270/    6F20 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    5271/    6F24 : 4E73                		rte
    5272/    6F26 :                     
    5273/    6F26 :                     ; =============== S U B	R O U T	I N E =======================================
    5274/    6F26 :                     
    5275/    6F26 :                     
    5276/    6F26 :                     sub_6F26:
    5277/    6F26 : 300E                		move.w	a6,d0
    5278/    6F28 : E588                		lsl.l	#2,d0
    5279/    6F2A : E448                		lsr.w	#2,d0
    5280/    6F2C : 0040 4000           		ori.w	#$4000,d0
    5281/    6F30 : 4840                		swap	d0
    5282/    6F32 : 0240 0003           		andi.w	#3,d0
    5283/    6F36 : 4E75                		rts
    5284/    6F38 :                     ; End of function sub_6F26
    5285/    6F38 :                     
    5286/    6F38 :                     
    5287/    6F38 :                     ; ===========================================================================
    5288/    6F38 :                     ; ---------------------------------------------------------------------------
    5289/    6F38 :                     ; subroutine to dump Sega Tile Data to VDPs VRAM
    5290/    6F38 :                     ; ---------------------------------------------------------------------------
    5291/    6F38 :                     
    5292/    6F38 :                     SegaToVDP:
    5293/    6F38 : 2018                		move.l	(a0)+,d0			; load VDP settings to d0
    5294/    6F3A : 3E18                		move.w	(a0)+,d7			; load no of repeats to d7
    5295/    6F3C : 4BF9 00C0 0000      		lea	(vdp_data_port).l,a5		; load VDP address to a5
    5296/    6F42 : 40E7                		move	sr,-(sp)			; move sr to stack pointer
    5297/    6F44 : (MACRO)              		disable_ints				; set the stack register (Stopping VBlank)
    5297/    6F44 : 46FC 2700                           move    #$2700,sr
    5298/    6F48 : 2B40 0004           		move.l	d0,4(a5)			; set VDP settings to VDP
    5299/    6F4C :                     
    5300/    6F4C :                     SegatoVDPRep:
    5301/    6F4C :                     		rept 8
    5302/    6F4C :                     		move.l	(a0)+,(a5)			; dump data to VRAM
    5303/    6F4C :                     		endr
    5302/    6F4C : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F4E : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F50 : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F52 : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F54 : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F56 : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F58 : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5302/    6F5A : 2A98                		move.l	(a0)+,(a5)			; dump data to VRAM
    5304/    6F5C : 51CF FFEE           		dbf	d7,SegatoVDPRep			; repeat
    5305/    6F60 : 4E73                		rte
    5306/    6F62 :                     ; ===========================================================================
    5307/    6F62 :                     ; ---------------------------------------------------------------------------
    5308/    6F62 :                     PAL_Segalogo:	binclude	"Palettes/PalSegaLogo.bin" ; palettes used in the Sega logo
    5309/    6FA2 : (MACRO)              		even
    5309/    6FA2 : =>TRUE                       if notZ80(MOMCPU)
    5309/    6FA2 : =>FALSE                              if (*)&1
    5309/    6FA2 :                                             dc.b 0                          ;ds.b 1
    5309/    6FA2 : [5309]                               endif
    5309/    6FA2 : =>FALSE                      else
    5309/    6FA2 :                                     if ($)&1
    5309/    6FA2 :                                             db 0
    5309/    6FA2 : [5309]                               endif
    5309/    6FA2 : [5309]                       endif
    5310/    6FA2 :                     ARTCRA_SegaLogo:binclude	"artcra/Sega Logo.bin"	; compressed Sega patterns
    5311/    7348 : (MACRO)              		even
    5311/    7348 : =>TRUE                       if notZ80(MOMCPU)
    5311/    7348 : =>FALSE                              if (*)&1
    5311/    7348 :                                             dc.b 0                          ;ds.b 1
    5311/    7348 : [5311]                               endif
    5311/    7348 : =>FALSE                      else
    5311/    7348 :                                     if ($)&1
    5311/    7348 :                                             db 0
    5311/    7348 : [5311]                               endif
    5311/    7348 : [5311]                       endif
    5312/    7348 :                     ; ---------------------------------------------------------------------------
    5313/    7348 :                     ; Unknown Data
    5314/    7348 : 31F9                		dc.w $31F9
    5315/    734A : 0111                		dc.w $0111
    5316/    734C : FF0A                		dc.w $FF0A
    5317/    734E : F00F                		dc.w $F00F
    5318/    7350 : FFFF                		dc.w $FFFF
    5319/    7352 : FFFF                		dc.w $FFFF
    5320/    7354 : FF00                		dc.w $FF00
    5321/    7356 :                     ; ---------------------------------------------------------------------------
    5322/    7356 :                     ; ===========================================================================
    5323/    7356 :                     ; ---------------------------------------------------------------------------
    5324/    7356 :                     ; Title Screen (Mode: 08)
    5325/    7356 :                     ; ---------------------------------------------------------------------------
    5326/    7356 :                     
    5327/    7356 :                     TitleScreen:
    5328/    7356 : 3038 D824           		move.w	(v_subgamemode).w,d0		; load sub mode to d0
    5329/    735A : 4EFB 0002           		jmp	.submodes(pc,d0.w)	; run code depending on index
    5330/    735E :                     
    5331/    735E :                     ; ===========================================================================
    5332/    735E :                     ; ---------------------------------------------------------------------------
    5333/    735E :                     ; Sega Screen Sub Modes
    5334/    735E :                     ; ---------------------------------------------------------------------------
    5335/    735E :                     .submodes:
    5336/    735E : 6000 0006           		bra.w	TitleLoad
    5337/    7362 :                     ; ---------------------------------------------------------------------------
    5338/    7362 : 6000 0178           		bra.w	TitleStart
    5339/    7366 :                     ; ---------------------------------------------------------------------------
    5340/    7366 :                     ; ===========================================================================
    5341/    7366 :                     
    5342/    7366 :                     TitleLoad:
    5343/    7366 : 4850                		pea	(a0)
    5344/    7368 : 41FA 020C           		lea	loc_7576(pc),a0
    5345/    736C : 21C8 C832           		move.l	a0,(v_vdpindex).w
    5346/    7370 : 4CDF 0100           		movem.l	(sp)+,a0
    5347/    7374 : (MACRO)              		disable_ints
    5347/    7374 : 46FC 2700                           move    #$2700,sr
    5348/    7378 : 41FA 0008           		lea	TitleScreen_VDPSettings(pc),a0
    5349/    737C : 4EB8 08D0           		jsr	(SetupVDPUsingTable).w
    5350/    7380 : 6018                		bra.s	TitleLoad_Continue
    5351/    7382 :                     ; ---------------------------------------------------------------------------
    5352/    7382 :                     TitleScreen_VDPSettings:
    5353/    7382 : 8230                		dc.w $8230
    5354/    7384 : 8407                		dc.w $8407
    5355/    7386 : 833C                		dc.w $833C
    5356/    7388 : 857C                		dc.w $857C
    5357/    738A : 8D3F                		dc.w $8D3F
    5358/    738C : 8B00                		dc.w $8B00
    5359/    738E : 8C81                		dc.w $8C81
    5360/    7390 : 9011                		dc.w $9011
    5361/    7392 : 8700                		dc.w $8700
    5362/    7394 : 9100                		dc.w $9100
    5363/    7396 : 9200                		dc.w $9200
    5364/    7398 : 0000                		dc.w 0
    5365/    739A :                     ; ---------------------------------------------------------------------------
    5366/    739A :                     
    5367/    739A :                     TitleLoad_Continue:
    5368/    739A : 3038 D81C           		move.w	($FFFFD81C).w,d0
    5369/    739E : E588                		lsl.l	#2,d0
    5370/    73A0 : E448                		lsr.w	#2,d0
    5371/    73A2 : 0040 4000           		ori.w	#$4000,d0
    5372/    73A6 : 4840                		swap	d0
    5373/    73A8 : 0240 0003           		andi.w	#3,d0
    5374/    73AC : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    5375/    73B2 : 23FC 0000 0000      		move.l	#0,(vdp_data_port).l
             73B8 : 00C0 0000          
    5376/    73BC : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             73C2 : 00C0 0004          
    5377/    73C6 : 23FC 0000 0000      		move.l	#0,(vdp_data_port).l
             73CC : 00C0 0000          
    5378/    73D0 : 703F                		moveq	#$3F,d0
    5379/    73D2 : 723F                		moveq	#$3F,d1
    5380/    73D4 : 7400                		moveq	#0,d2
    5381/    73D6 : 363C C000           		move.w	#$C000,d3
    5382/    73DA : 4EB8 086E           		jsr	(sub_86E).w
    5383/    73DE : 703F                		moveq	#$3F,d0
    5384/    73E0 : 723F                		moveq	#$3F,d1
    5385/    73E2 : 7400                		moveq	#0,d2
    5386/    73E4 : 363C E000           		move.w	#$E000,d3
    5387/    73E8 : 4EB8 086E           		jsr	(sub_86E).w
    5388/    73EC : 41FA 01EC           		lea	ARTNEM_MainMenusText(pc),a0	; load Main Menu text art address to a0
    5389/    73F0 : 23FC 4000 0000      		move.l	#$40000000,(vdp_control_port).l	; set VDP location to dump
             73F6 : 00C0 0004          
    5390/    73FA : 4EB8 0DC8           		jsr	(NemDec).w			; decompress
    5391/    73FE : 203C 4104 0003      		move.l	#$41040003,d0			; prepare VDP settings
    5392/    7404 : 43FA 04E2           		lea	MAPUNC_TitleMenu_1(pc),a1	; load uncompressed title mappings to a1 (Title Screen "Banner")
    5393/    7408 : 7225                		moveq	#$25,d1				; set X loop
    5394/    740A : 740F                		moveq	#$F,d2				; set Y loop
    5395/    740C : 363C 0000           		move.w	#0,d3				; set to use palette line 0 (and to map behind object plane)
    5396/    7410 : 4EB8 08A2           		jsr	(MapScreen).w			; map it on screen correctly
    5397/    7414 : 203C 4A18 0003      		move.l	#$4A180003,d0			; prepare VDP settings
    5398/    741A : 43FA 098C           		lea	MAPUNC_TitleMenu_2(pc),a1	; load uncompressed title mappings to a1 (Title Screen "Main Menu Selection")
    5399/    741E : 7207                		moveq	#7,d1				; set X loop
    5400/    7420 : 7403                		moveq	#3,d2				; set Y loop
    5401/    7422 : 363C 0000           		move.w	#0,d3				; set to use palette line 0 (and to map behind object plane)
    5402/    7426 : 31FC 0100 D820      		move.w	#$100,($FFFFD820).w
    5403/    742C : 4EB8 08A2           		jsr	(MapScreen).w			; map it on screen correctly
    5404/    7430 : 31FC 0080 D820      		move.w	#$80,($FFFFD820).w
    5405/    7436 : 203C 4BBC 0003      		move.l	#$4BBC0003,d0
    5406/    743C : 43FA 09AA           		lea	MAPUNC_TitleMenu_3(pc),a1	; load uncompressed title mappings to a1 (Title Screen "1ST	ROM 19940401")
    5407/    7440 : 7207                		moveq	#7,d1				; set X loop
    5408/    7442 : 7401                		moveq	#1,d2				; set Y loop
    5409/    7444 : 363C 0000           		move.w	#0,d3				; set to use palette line 0 (and to map behind object plane)
    5410/    7448 : 31FC 0100 D820      		move.w	#$100,($FFFFD820).w
    5411/    744E : 4EB8 08A2           		jsr	(MapScreen).w			; map it on screen correctly
    5412/    7452 : 31FC 0080 D820      		move.w	#$80,($FFFFD820).w
    5413/    7458 : 41FA 0042           		lea	PAL_MainMenus(pc),a0
    5414/    745C : 43F8 D3E4           		lea	($FFFFD3E4).w,a1
    5415/    7460 : 700F                		moveq	#$F,d0
    5416/    7462 :                     
    5417/    7462 :                     .loadpalette:
    5418/    7462 : 22D8                		move.l	(a0)+,(a1)+
    5419/    7464 : 51C8 FFFC           		dbf	d0,.loadpalette
    5420/    7468 : 4EB8 0448           		jsr	(VDPSetup_01).w
    5421/    746C : 23FC 7800 0003      		move.l	#$78000003,(vdp_control_port).l
             7472 : 00C0 0004          
    5422/    7476 : 23FC 0000 0000      		move.l	#0,(vdp_data_port).l
             747C : 00C0 0000          
    5423/    7480 : 23FC 001E 00D0      		move.l	#$1E00D0,(vdp_data_port).l
             7486 : 00C0 0000          
    5424/    748A : 4278 D826           		clr.w	(v_titleselect).w
    5425/    748E : 4278 D832           		clr.w	($FFFFD832).w
    5426/    7492 : (MACRO)              		enable_ints				; set the stack register
    5426/    7492 : 46FC 2300                           move    #$2300,sr
    5427/    7496 : 5878 D824           		addq.w	#4,(v_subgamemode).w		; increase sub mode
    5428/    749A : 4E75                		rts
    5429/    749C :                     ; ===========================================================================
    5430/    749C :                     ; ---------------------------------------------------------------------------
    5431/    749C :                     PAL_MainMenus:	binclude	"Palettes/PalMainMenus.bin"
    5432/    74DC : (MACRO)              		even
    5432/    74DC : =>TRUE                       if notZ80(MOMCPU)
    5432/    74DC : =>FALSE                              if (*)&1
    5432/    74DC :                                             dc.b 0                          ;ds.b 1
    5432/    74DC : [5432]                               endif
    5432/    74DC : =>FALSE                      else
    5432/    74DC :                                     if ($)&1
    5432/    74DC :                                             db 0
    5432/    74DC : [5432]                               endif
    5432/    74DC : [5432]                       endif
    5433/    74DC :                     ; ---------------------------------------------------------------------------
    5434/    74DC :                     ; ===========================================================================
    5435/    74DC :                     
    5436/    74DC :                     TitleStart:
    5437/    74DC : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    5438/    74E2 :                     
    5439/    74E2 :                     .wait:
    5440/    74E2 : 4A38 FFC9           		tst.b	(v_lagger).w
    5441/    74E6 : 6AFA                		bpl.s	.wait
    5442/    74E8 : 3038 C946           		move.w	($FFFFC946).w,d0
    5443/    74EC : D078 D826           		add.w	(v_titleselect).w,d0
    5444/    74F0 : 6A02                		bpl.s	loc_74F4
    5445/    74F2 : 7000                		moveq	#0,d0
    5446/    74F4 :                     
    5447/    74F4 :                     loc_74F4:
    5448/    74F4 : 0C40 0003           		cmpi.w	#3,d0
    5449/    74F8 : 6302                		bls.s	loc_74FC
    5450/    74FA : 7003                		moveq	#3,d0
    5451/    74FC :                     
    5452/    74FC :                     loc_74FC:
    5453/    74FC : 31C0 D826           		move.w	d0,(v_titleselect).w
    5454/    7500 : E948                		lsl.w	#4,d0
    5455/    7502 : 0640 0120           		addi.w	#$120,d0
    5456/    7506 : 31C0 D832           		move.w	d0,($FFFFD832).w
    5457/    750A : 4A38 C93D           		tst.b	($FFFFC93D).w
    5458/    750E : 6B02                		bmi.s	loc_7512
    5459/    7510 : 4E75                		rts
    5460/    7512 :                     ; ---------------------------------------------------------------------------
    5461/    7512 :                     
    5462/    7512 :                     loc_7512:
    5463/    7512 : 4278 D83A           		clr.w	($FFFFD83A).w
    5464/    7516 : 4278 D824           		clr.w	(v_subgamemode).w
    5465/    751A : 3038 D826           		move.w	(v_titleselect).w,d0
    5466/    751E : 6706                		beq.s	TitleScrn_PlayLevel
    5467/    7520 : 0C40 0001           		cmpi.w	#1,d0
    5468/    7524 : 662C                		bne.s	TitleScrn_ToOption
    5469/    7526 :                     
    5470/    7526 :                     TitleScrn_PlayLevel:
    5471/    7526 : 31FC 0001 D834      		move.w	#1,($FFFFD834).w
    5472/    752C : 31FC 0001 D836      		move.w	#1,($FFFFD836).w
    5473/    7532 : 31FC 0018 D822      		move.w	#id_Level,(v_gamemode).w
    5474/    7538 : 11FC 0000 D89C      		move.b	#0,($FFFFD89C).w
    5475/    753E : 4A40                		tst.w	d0
    5476/    7540 : 6608                		bne.s	loc_754A
    5477/    7542 : 11FC 00FF D8AC      		move.b	#$FF,($FFFFD8AC).w
    5478/    7548 : 4E75                		rts
    5479/    754A :                     ; ---------------------------------------------------------------------------
    5480/    754A :                     
    5481/    754A :                     loc_754A:
    5482/    754A : 11FC 0010 D8AC      		move.b	#$10,($FFFFD8AC).w
    5483/    7550 : 4E75                		rts
    5484/    7552 :                     ; ---------------------------------------------------------------------------
    5485/    7552 :                     
    5486/    7552 :                     TitleScrn_ToOption:
    5487/    7552 : 0C78 0002 D826      		cmpi.w	#2,(v_titleselect).w
    5488/    7558 : 6608                		bne.s	TitleScrn_ToLevSel
    5489/    755A : 31FC 0040 D822      		move.w	#id_Options,(v_gamemode).w
    5490/    7560 : 4E75                		rts
    5491/    7562 :                     ; ---------------------------------------------------------------------------
    5492/    7562 :                     
    5493/    7562 :                     TitleScrn_ToLevSel:
    5494/    7562 : 11FC 0000 D89C      		move.b	#0,($FFFFD89C).w
    5495/    7568 : 11FC 00FF D8AC      		move.b	#$FF,($FFFFD8AC).w
    5496/    756E : 31FC 0030 D822      		move.w	#id_LevelSelect,(v_gamemode).w
    5497/    7574 : 4E75                		rts
    5498/    7576 :                     ; ---------------------------------------------------------------------------
    5499/    7576 :                     
    5500/    7576 :                     loc_7576:
    5501/    7576 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    5502/    757A : 23FC 7800 0003      		move.l	#$78000003,(vdp_control_port).l
             7580 : 00C0 0004          
    5503/    7584 : 33F8 D832 00C0      		move.w	($FFFFD832).w,(vdp_data_port).l
             758A : 0000             
    5504/    758C : 4EB8 096E           		jsr	(sub_96E).w
    5505/    7590 : 1038 C93C           		move.b	($FFFFC93C).w,d0
    5506/    7594 : 6126                		bsr.s	sub_75BC
    5507/    7596 : 31C1 C940           		move.w	d1,($FFFFC940).w
    5508/    759A : 31C2 C942           		move.w	d2,($FFFFC942).w
    5509/    759E : 1038 C93D           		move.b	($FFFFC93D).w,d0
    5510/    75A2 : 6118                		bsr.s	sub_75BC
    5511/    75A4 : 31C1 C944           		move.w	d1,($FFFFC944).w
    5512/    75A8 : 31C2 C946           		move.w	d2,($FFFFC946).w
    5513/    75AC : 4EB8 0448           		jsr	(VDPSetup_01).w
    5514/    75B0 : 0038 0080 FFC9      		ori.b	#$80,(v_lagger).w
    5515/    75B6 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    5516/    75BA : 4E73                		rte
    5517/    75BC :                     
    5518/    75BC :                     ; =============== S U B	R O U T	I N E =======================================
    5519/    75BC :                     
    5520/    75BC :                     
    5521/    75BC :                     sub_75BC:
    5522/    75BC : 7203                		moveq	#3,d1
    5523/    75BE : C240                		and.w	d0,d1
    5524/    75C0 : E259                		ror.w	#1,d1
    5525/    75C2 : 48C1                		ext.l	d1
    5526/    75C4 : 3401                		move.w	d1,d2
    5527/    75C6 : 4841                		swap	d1
    5528/    75C8 : 8441                		or.w	d1,d2
    5529/    75CA : 0240 000C           		andi.w	#$C,d0
    5530/    75CE : E658                		ror.w	#3,d0
    5531/    75D0 : 48C0                		ext.l	d0
    5532/    75D2 : 3200                		move.w	d0,d1
    5533/    75D4 : 4840                		swap	d0
    5534/    75D6 : 8240                		or.w	d0,d1
    5535/    75D8 : 4E75                		rts
    5536/    75DA :                     ; ===========================================================================
    5537/    75DA :                     ; ---------------------------------------------------------------------------
    5538/    75DA :                     ARTNEM_MainMenusText:
    5539/    75DA :                     		binclude	"artnem/Main Menu Text.bin"
    5540/    78E8 : (MACRO)              		even
    5540/    78E8 : =>TRUE                       if notZ80(MOMCPU)
    5540/    78E8 : =>FALSE                              if (*)&1
    5540/    78E8 :                                             dc.b 0                          ;ds.b 1
    5540/    78E8 : [5540]                               endif
    5540/    78E8 : =>FALSE                      else
    5540/    78E8 :                                     if ($)&1
    5540/    78E8 :                                             db 0
    5540/    78E8 : [5540]                               endif
    5540/    78E8 : [5540]                       endif
    5541/    78E8 :                     MAPUNC_TitleMenu_1:
    5542/    78E8 :                     		binclude	"Uncompressed/MapuncTitleMenu01.bin" ; Uncompressed screen map for the title screen - banner
    5543/    7DA8 : (MACRO)              		even
    5543/    7DA8 : =>TRUE                       if notZ80(MOMCPU)
    5543/    7DA8 : =>FALSE                              if (*)&1
    5543/    7DA8 :                                             dc.b 0                          ;ds.b 1
    5543/    7DA8 : [5543]                               endif
    5543/    7DA8 : =>FALSE                      else
    5543/    7DA8 :                                     if ($)&1
    5543/    7DA8 :                                             db 0
    5543/    7DA8 : [5543]                               endif
    5543/    7DA8 : [5543]                       endif
    5544/    7DA8 :                     MAPUNC_TitleMenu_2:
    5545/    7DA8 :                     		binclude	"Uncompressed/MapuncTitleMenu02.bin" ; Uncompressed screen map for the title screen - menu selection
    5546/    7DE8 : (MACRO)              		even
    5546/    7DE8 : =>TRUE                       if notZ80(MOMCPU)
    5546/    7DE8 : =>FALSE                              if (*)&1
    5546/    7DE8 :                                             dc.b 0                          ;ds.b 1
    5546/    7DE8 : [5546]                               endif
    5546/    7DE8 : =>FALSE                      else
    5546/    7DE8 :                                     if ($)&1
    5546/    7DE8 :                                             db 0
    5546/    7DE8 : [5546]                               endif
    5546/    7DE8 : [5546]                       endif
    5547/    7DE8 :                     MAPUNC_TitleMenu_3:
    5548/    7DE8 :                     		binclude	"Uncompressed/MapuncTitleMenu03.bin" ; Uncompressed screen map for the title menu - "1ST ROM 19940401"
    5549/    7E08 : (MACRO)              		even
    5549/    7E08 : =>TRUE                       if notZ80(MOMCPU)
    5549/    7E08 : =>FALSE                              if (*)&1
    5549/    7E08 :                                             dc.b 0                          ;ds.b 1
    5549/    7E08 : [5549]                               endif
    5549/    7E08 : =>FALSE                      else
    5549/    7E08 :                                     if ($)&1
    5549/    7E08 :                                             db 0
    5549/    7E08 : [5549]                               endif
    5549/    7E08 : [5549]                       endif
    5550/    7E08 :                     ; ---------------------------------------------------------------------------
    5551/    7E08 :                     ; ===========================================================================
    5552/    7E08 :                     ; ---------------------------------------------------------------------------
    5553/    7E08 :                     ; Field Screens (Mode: 10)
    5554/    7E08 :                     ; ---------------------------------------------------------------------------
    5555/    7E08 :                     
    5556/    7E08 :                     Fields:
    5557/    7E08 : 4850                		pea	(a0)
    5558/    7E0A : 41FA 0204           		lea	loc_8010(pc),a0
    5559/    7E0E : 21C8 C832           		move.l	a0,(v_vdpindex).w
    5560/    7E12 : 4CDF 0100           		movem.l	(sp)+,a0
    5561/    7E16 : 41FA 00C0           		lea	Fields_VDPSettings(pc),a0
    5562/    7E1A : 4EB8 08D0           		jsr	(SetupVDPUsingTable).w
    5563/    7E1E : 103C 0081           		move.b	#bgm_Electoria,d0		; load BGM 81
    5564/    7E22 : 4EB9 0000 6402      		jsr	(PlayMusic).l			; Play BGM
    5565/    7E28 : 41FA 006E           		lea	PAL_PrimaryColours_Field(pc),a0	; load primary Field palettes address to a0
    5566/    7E2C : 43F8 D3E4           		lea	($FFFFD3E4).w,a1
    5567/    7E30 : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    5568/    7E34 : 48D1 00FF           		movem.l	d0-d7,(a1)
    5569/    7E38 : 43E9 0020           		lea	$20(a1),a1
    5570/    7E3C : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    5571/    7E40 : 48D1 00FF           		movem.l	d0-d7,(a1)
    5572/    7E44 : 0278 81BC C9BA      		andi.w	#$81BC,($FFFFC9BA).w
    5573/    7E4A : 33F8 C9BA 00C0      		move.w	($FFFFC9BA).w,(vdp_control_port).l
             7E50 : 0004             
    5574/    7E52 : 4EB9 0000 8634      		jsr	(Field_LoadArt).l
    5575/    7E58 : 4EB8 15D0           		jsr	(sub_15D0).w
    5576/    7E5C : 31FC 0005 D83C      		move.w	#5,($FFFFD83C).w
    5577/    7E62 : 31FC 0007 D840      		move.w	#7,($FFFFD840).w
    5578/    7E68 : 31FC 003F D844      		move.w	#$3F,($FFFFD844).w
    5579/    7E6E : 31FC 003F D848      		move.w	#$3F,($FFFFD848).w
    5580/    7E74 : 4EB9 0000 8196      		jsr	(sub_8196).l
    5581/    7E7A : 4EB9 0000 D1E0      		jsr	(sub_D1E0).l
    5582/    7E80 : 4EB9 0000 FA44      		jsr	(sub_FA44).l
    5583/    7E86 : 0078 8144 C9BA      		ori.w	#$8144,($FFFFC9BA).w
    5584/    7E8C : 33F8 C9BA 00C0      		move.w	($FFFFC9BA).w,(vdp_control_port).l
             7E92 : 0004             
    5585/    7E94 : 6000 0056           		bra.w	Fields_MainLoop
    5586/    7E98 :                     ; ===========================================================================
    5587/    7E98 :                     ; ---------------------------------------------------------------------------
    5588/    7E98 :                     PAL_PrimaryColours_Field:
    5589/    7E98 :                     		binclude	 "Palettes/PalPrimaryColoursField.bin"
    5590/    7ED8 : (MACRO)              		even
    5590/    7ED8 : =>TRUE                       if notZ80(MOMCPU)
    5590/    7ED8 : =>FALSE                              if (*)&1
    5590/    7ED8 :                                             dc.b 0                          ;ds.b 1
    5590/    7ED8 : [5590]                               endif
    5590/    7ED8 : =>FALSE                      else
    5590/    7ED8 :                                     if ($)&1
    5590/    7ED8 :                                             db 0
    5590/    7ED8 : [5590]                               endif
    5590/    7ED8 : [5590]                       endif
    5591/    7ED8 :                     ; ---------------------------------------------------------------------------
    5592/    7ED8 :                     Fields_VDPSettings:
    5593/    7ED8 : 8230                		dc.w $8230
    5594/    7EDA : 832C                		dc.w $832C
    5595/    7EDC : 8407                		dc.w $8407
    5596/    7EDE : 8554                		dc.w $8554
    5597/    7EE0 : 8D2B                		dc.w $8D2B
    5598/    7EE2 : 9011                		dc.w $9011
    5599/    7EE4 : 8720                		dc.w $8720
    5600/    7EE6 : 8B03                		dc.w $8B03
    5601/    7EE8 : 8C89                		dc.w $8C89
    5602/    7EEA : 0000                		dc.w 0
    5603/    7EEC :                     ; ---------------------------------------------------------------------------
    5604/    7EEC :                     ; ===========================================================================
    5605/    7EEC :                     
    5606/    7EEC :                     Fields_MainLoop:
    5607/    7EEC : 4879 0000 7EEC      		pea	(Fields_MainLoop).l
    5608/    7EF2 : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    5609/    7EF8 :                     
    5610/    7EF8 :                     .wait:
    5611/    7EF8 : 4A38 FFC9           		tst.b	(v_lagger).w			; I think these act like a lagger, removing them...
    5612/    7EFC : 6AFA                		bpl.s	.wait				; ...causes the fields to run extremely fast
    5613/    7EFE : 6100 7490           		bsr.w	sub_F390
    5614/    7F02 : 4EB9 0000 7F2E      		jsr	(Field_ReadController).l
    5615/    7F08 : 4EB9 0000 8064      		jsr	(Field_PauseGame).l
    5616/    7F0E : 4EB9 0000 CCCA      		jsr	(sub_CCCA).l			; commented out causes screen not to follow durin normal play, and stars on the tether didn"t animate
    5617/    7F14 : 4EB9 0000 81F8      		jsr	(sub_81F8).l			; Sonic/Tails object related
    5618/    7F1A : 4EB9 0000 82B2      		jsr	(sub_82B2).l			; deformation/screen control??
    5619/    7F20 : (MACRO)              		disable_ints
    5619/    7F20 : 46FC 2700                           move    #$2700,sr
    5620/    7F24 : 4EB8 1640           		jsr	(BuildSprites).w		; object loading routine/sprite building (We think)
    5621/    7F28 : (MACRO)              		enable_ints
    5621/    7F28 : 46FC 2300                           move    #$2300,sr
    5622/    7F2C : 4E75                		rts
    5623/    7F2E :                     
    5624/    7F2E :                     ; =============== S U B	R O U T	I N E =======================================
    5625/    7F2E :                     
    5626/    7F2E :                     Field_ReadController:
    5627/    7F2E : 4EB8 096E           		jsr	(sub_96E).w
    5628/    7F32 : 47F8 C938           		lea	(unk_C938).w,a3
    5629/    7F36 : 7200                		moveq	#0,d1
    5630/    7F38 : 1238 D89C           		move.b	($FFFFD89C).w,d1
    5631/    7F3C : 7007                		moveq	#7,d0
    5632/    7F3E : C033 1003           		and.b	3(a3,d1.w),d0
    5633/    7F42 : 56C2                		sne	d2
    5634/    7F44 : 1033 1004           		move.b	4(a3,d1.w),d0
    5635/    7F48 : 1200                		move.b	d0,d1
    5636/    7F4A : 0201 0070           		andi.b	#$70,d1
    5637/    7F4E : 56C1                		sne	d1
    5638/    7F50 : 8202                		or.b	d2,d1
    5639/    7F52 : 0201 0070           		andi.b	#$70,d1
    5640/    7F56 : 8001                		or.b	d1,d0
    5641/    7F58 : 49F8 FB00           		lea	($FFFFFB00).w,a4
    5642/    7F5C : 122C FFFF           		move.b	-1(a4),d1
    5643/    7F60 : 0241 000F           		andi.w	#$F,d1
    5644/    7F64 : 1434 1000           		move.b	(a4,d1.w),d2
    5645/    7F68 : 1980 1000           		move.b	d0,(a4,d1.w)
    5646/    7F6C : 522C FFFF           		addq.b	#1,-1(a4)
    5647/    7F70 : 1942 FFFE           		move.b	d2,-2(a4)
    5648/    7F74 : 49F8 D89C           		lea	($FFFFD89C).w,a4
    5649/    7F78 : 6100 0036           		bsr.w	sub_7FB0
    5650/    7F7C : 1038 FAFE           		move.b	($FFFFFAFE).w,d0
    5651/    7F80 : 47F8 C938           		lea	(unk_C938).w,a3
    5652/    7F84 : 7200                		moveq	#0,d1
    5653/    7F86 : 1238 D8AC           		move.b	($FFFFD8AC).w,d1
    5654/    7F8A : 6B1C                		bmi.s	loc_7FA8
    5655/    7F8C : 7007                		moveq	#7,d0
    5656/    7F8E : C033 1003           		and.b	3(a3,d1.w),d0
    5657/    7F92 : 56C2                		sne	d2
    5658/    7F94 : 1033 1004           		move.b	4(a3,d1.w),d0
    5659/    7F98 : 1200                		move.b	d0,d1
    5660/    7F9A : 0201 0070           		andi.b	#$70,d1
    5661/    7F9E : 56C1                		sne	d1
    5662/    7FA0 : 8202                		or.b	d2,d1
    5663/    7FA2 : 0201 0070           		andi.b	#$70,d1
    5664/    7FA6 : 8001                		or.b	d1,d0
    5665/    7FA8 :                     
    5666/    7FA8 :                     loc_7FA8:
    5667/    7FA8 : 49F8 D8AC           		lea	($FFFFD8AC).w,a4
    5668/    7FAC : 6000 0002           		bra.w	sub_7FB0
    5669/    7FB0 :                     ; End of function Field_ReadController
    5670/    7FB0 :                     
    5671/    7FB0 :                     
    5672/    7FB0 :                     ; =============== S U B	R O U T	I N E =======================================
    5673/    7FB0 :                     
    5674/    7FB0 :                     
    5675/    7FB0 :                     sub_7FB0:
    5676/    7FB0 : 196C 0002 0004      		move.b	2(a4),4(a4)
    5677/    7FB6 : 1940 0002           		move.b	d0,2(a4)
    5678/    7FBA : 122C 0004           		move.b	4(a4),d1
    5679/    7FBE : B101                		eor.b	d0,d1
    5680/    7FC0 : 6704                		beq.s	loc_7FC6
    5681/    7FC2 : 422C 0006           		clr.b	6(a4)
    5682/    7FC6 :                     
    5683/    7FC6 :                     loc_7FC6:
    5684/    7FC6 : 522C 0006           		addq.b	#1,6(a4)
    5685/    7FCA : C200                		and.b	d0,d1
    5686/    7FCC : 1941 0003           		move.b	d1,3(a4)
    5687/    7FD0 : 0240 000F           		andi.w	#$F,d0
    5688/    7FD4 : 197B 002A 0005      		move.b	byte_8000(pc,d0.w),5(a4)
    5689/    7FDA : 7203                		moveq	#3,d1
    5690/    7FDC : C240                		and.w	d0,d1
    5691/    7FDE : E259                		ror.w	#1,d1
    5692/    7FE0 : 48C1                		ext.l	d1
    5693/    7FE2 : 3401                		move.w	d1,d2
    5694/    7FE4 : 4841                		swap	d1
    5695/    7FE6 : 8441                		or.w	d1,d2
    5696/    7FE8 : 3942 000A           		move.w	d2,$A(a4)
    5697/    7FEC : 0240 000C           		andi.w	#$C,d0
    5698/    7FF0 : E658                		ror.w	#3,d0
    5699/    7FF2 : 48C0                		ext.l	d0
    5700/    7FF4 : 3200                		move.w	d0,d1
    5701/    7FF6 : 4840                		swap	d0
    5702/    7FF8 : 8240                		or.w	d0,d1
    5703/    7FFA : 3941 0008           		move.w	d1,8(a4)
    5704/    7FFE : 4E75                		rts
    5705/    8000 :                     ; End of function sub_7FB0
    5706/    8000 :                     
    5707/    8000 :                     ; ---------------------------------------------------------------------------
    5708/    8000 : 00C0 40C0           byte_8000:	dc.b 0,	$C0, $40, $C0
    5709/    8004 : 80A0 60A0           		dc.b $80, $A0, $60, $A0
    5710/    8008 : 00E0 20E0           		dc.b 0,	$E0, $20, $E0
    5711/    800C : 80A0 60A0           		dc.b $80, $A0, $60, $A0
    5712/    8010 :                     ; ---------------------------------------------------------------------------
    5713/    8010 :                     
    5714/    8010 :                     loc_8010:
    5715/    8010 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    5716/    8014 : 203C FFFF CA5E      		move.l	#$FFFFCA5E,d0
    5717/    801A : 3238 D81C           		move.w	($FFFFD81C).w,d1
    5718/    801E : 343C 01C0           		move.w	#$1C0,d2
    5719/    8022 : 4EB8 05E8           		jsr	(sub_5E8).w
    5720/    8026 : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             802C : 00C0 0004          
    5721/    8030 : 23F8 CDDE 00C0      		move.l	($FFFFCDDE).w,(vdp_data_port).l
             8036 : 0000             
    5722/    8038 : 4EB8 0448           		jsr	(VDPSetup_01).w
    5723/    803C : 4EB9 0000 C9DE      		jsr	(sub_C9DE).l
    5724/    8042 : 203C FFFF D164      		move.l	#$FFFFD164,d0
    5725/    8048 : 3238 D81A           		move.w	($FFFFD81A).w,d1
    5726/    804C : 343C 0140           		move.w	#$140,d2
    5727/    8050 : 4EB8 05E8           		jsr	(sub_5E8).w
    5728/    8054 : 0038 0080 FFC9      		ori.b	#$80,(v_lagger).w
    5729/    805A : 5278 F000           		addq.w	#1,($FFFFF000).w
    5730/    805E : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    5731/    8062 : 4E73                		rte
    5732/    8064 :                     
    5733/    8064 :                     ; =============== S U B	R O U T	I N E =======================================
    5734/    8064 :                     
    5735/    8064 :                     
    5736/    8064 :                     Field_PauseGame:
    5737/    8064 : 4A38 D89F           		tst.b	($FFFFD89F).w
    5738/    8068 : 6A00 012A           		bpl.w	locret_8194
    5739/    806C : 1038 C93C           		move.b	($FFFFC93C).w,d0
    5740/    8070 : 0200 0070           		andi.b	#$70,d0
    5741/    8074 : 0C00 0070           		cmpi.b	#$70,d0
    5742/    8078 : 660C                		bne.s	loc_8086
    5743/    807A : (MACRO)              		disable_ints
    5743/    807A : 46FC 2700                           move    #$2700,sr
    5744/    807E : 91C8                		suba.l	a0,a0
    5745/    8080 : 2E58                		movea.l	(a0)+,sp
    5746/    8082 : 2058                		movea.l	(a0)+,a0
    5747/    8084 : 4ED0                		jmp	(a0)
    5748/    8086 :                     ; ---------------------------------------------------------------------------
    5749/    8086 :                     
    5750/    8086 :                     loc_8086:
    5751/    8086 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    5752/    808A :                     
    5753/    808A :                     loc_808A:
    5754/    808A : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    5755/    8090 :                     
    5756/    8090 :                     .wait:
    5757/    8090 : 4A38 FFC9           		tst.b	(v_lagger).w
    5758/    8094 : 6AFA                		bpl.s	.wait
    5759/    8096 : 4EB9 0000 7F2E      		jsr	(Field_ReadController).l
    5760/    809C : 1038 D89E           		move.b	($FFFFD89E).w,d0
    5761/    80A0 : 0200 0070           		andi.b	#btnABC,d0
    5762/    80A4 : 6700 00A6           		beq.w	loc_814C
    5763/    80A8 : 7000                		moveq	#0,d0
    5764/    80AA : 41F8 F9C0           		lea	($FFFFF9C0).w,a0
    5765/    80AE : 323C 017F           		move.w	#$17F,d1
    5766/    80B2 :                     
    5767/    80B2 :                     loc_80B2:
    5768/    80B2 : 20C0                		move.l	d0,(a0)+
    5769/    80B4 : 51C9 FFFC           		dbf	d1,loc_80B2
    5770/    80B8 : 31C0 D830           		move.w	d0,($FFFFD830).w
    5771/    80BC : 31C0 D832           		move.w	d0,($FFFFD832).w
    5772/    80C0 : 41F8 C9DE           		lea	($FFFFC9DE).w,a0
    5773/    80C4 : 720F                		moveq	#$F,d1
    5774/    80C6 :                     
    5775/    80C6 :                     loc_80C6:
    5776/    80C6 : 20C0                		move.l	d0,(a0)+
    5777/    80C8 : 51C9 FFFC           		dbf	d1,loc_80C6
    5778/    80CC : 41F8 CA1E           		lea	($FFFFCA1E).w,a0
    5779/    80D0 : 720F                		moveq	#$F,d1
    5780/    80D2 :                     
    5781/    80D2 :                     loc_80D2:
    5782/    80D2 : 20C0                		move.l	d0,(a0)+
    5783/    80D4 : 51C9 FFFC           		dbf	d1,loc_80D2
    5784/    80D8 : 41F8 CA5E           		lea	($FFFFCA5E).w,a0
    5785/    80DC : 323C 00DF           		move.w	#$DF,d1
    5786/    80E0 :                     
    5787/    80E0 :                     loc_80E0:
    5788/    80E0 : 20C0                		move.l	d0,(a0)+
    5789/    80E2 : 51C9 FFFC           		dbf	d1,loc_80E0
    5790/    80E6 : 21C0 CDDE           		move.l	d0,($FFFFCDDE).w
    5791/    80EA : 41F9 00C0 0000      		lea	(vdp_data_port).l,a0
    5792/    80F0 : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l
             80F6 : 0004             
    5793/    80F8 : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
    5794/    80FE : 7000                		moveq	#0,d0
    5795/    8100 : 23FC 4000 0000      		move.l	#$40000000,(vdp_control_port).l
             8106 : 00C0 0004          
    5796/    810A : 323C 0FFF           		move.w	#$FFF,d1
    5797/    810E :                     
    5798/    810E :                     loc_810E:
    5799/    810E :                     		rept 4
    5800/    810E :                     		move.l	d0,(a0)
    5801/    810E :                     		endr
    5800/    810E : 2080                		move.l	d0,(a0)
    5800/    8110 : 2080                		move.l	d0,(a0)
    5800/    8112 : 2080                		move.l	d0,(a0)
    5800/    8114 : 2080                		move.l	d0,(a0)
    5802/    8116 : 51C9 FFF6           		dbf	d1,loc_810E
    5803/    811A : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             8120 : 00C0 0004          
    5804/    8124 : 23F8 CDDE 00C0      		move.l	($FFFFCDDE).w,(vdp_data_port).l
             812A : 0000             
    5805/    812C : 4278 D824           		clr.w	(v_subgamemode).w
    5806/    8130 : 5278 D836           		addq.w	#1,($FFFFD836).w
    5807/    8134 : 4A78 D834           		tst.w	($FFFFD834).w
    5808/    8138 : 6704                		beq.s	.gotolevel
    5809/    813A : 5278 D83A           		addq.w	#1,($FFFFD83A).w
    5810/    813E :                     
    5811/    813E :                     .gotolevel:
    5812/    813E : 31FC 0018 D822      		move.w	#id_Level,(v_gamemode).w
    5813/    8144 : 2E78 0000           		movea.l	(RomStart).w,sp
    5814/    8148 : 4EF8 5000           		jmp	(MAINPROG).w
    5815/    814C :                     ; ---------------------------------------------------------------------------
    5816/    814C :                     
    5817/    814C :                     loc_814C:
    5818/    814C : 3038 D8A4           		move.w	($FFFFD8A4).w,d0
    5819/    8150 : 3238 D8A6           		move.w	($FFFFD8A6).w,d1
    5820/    8154 : D040                		add.w	d0,d0
    5821/    8156 : D040                		add.w	d0,d0
    5822/    8158 : D241                		add.w	d1,d1
    5823/    815A : D241                		add.w	d1,d1
    5824/    815C : 3078 D862           		movea.w	($FFFFD862).w,a0
    5825/    8160 : D168 0008           		add.w	d0,8(a0)
    5826/    8164 : D368 000C           		add.w	d1,$C(a0)
    5827/    8168 : 3078 D864           		movea.w	($FFFFD864).w,a0
    5828/    816C : D168 0008           		add.w	d0,8(a0)
    5829/    8170 : D368 000C           		add.w	d1,$C(a0)
    5830/    8174 : 4EB9 0000 CCCA      		jsr	(sub_CCCA).l
    5831/    817A : 4EB9 0000 82B2      		jsr	(sub_82B2).l
    5832/    8180 : 4EB8 1640           		jsr	(BuildSprites).w
    5833/    8184 : 6100 71EE           		bsr.w	sub_F374
    5834/    8188 : 4A38 C93D           		tst.b	($FFFFC93D).w
    5835/    818C : 6A00 FEFC           		bpl.w	loc_808A
    5836/    8190 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    5837/    8194 :                     
    5838/    8194 :                     locret_8194:
    5839/    8194 : 4E75                		rts
    5840/    8196 :                     ; End of function Field_PauseGame
    5841/    8196 :                     
    5842/    8196 :                     
    5843/    8196 :                     ; =============== S U B	R O U T	I N E =======================================
    5844/    8196 :                     
    5845/    8196 :                     
    5846/    8196 :                     sub_8196:
    5847/    8196 : 31FC 0000 D866      		move.w	#0,($FFFFD866).w
    5848/    819C : 31FC 0004 D868      		move.w	#4,($FFFFD868).w
    5849/    81A2 : 7004                		moveq	#4,d0
    5850/    81A4 : 4EB8 1918           		jsr	(sub_1918).w
    5851/    81A8 : 6B22                		bmi.s	loc_81CC
    5852/    81AA : 317C 0080 0004      		move.w	#$80,4(a0)
    5853/    81B0 : 317C 0002 0006      		move.w	#2,6(a0)
    5854/    81B6 : 317C 0070 0008      		move.w	#$70,8(a0)
    5855/    81BC : 317C 0070 000C      		move.w	#$70,$C(a0)
    5856/    81C2 : 317C 8000 0020      		move.w	#$8000,$20(a0)
    5857/    81C8 : 31C8 D862           		move.w	a0,($FFFFD862).w
    5858/    81CC :                     
    5859/    81CC :                     loc_81CC:
    5860/    81CC : 7004                		moveq	#4,d0
    5861/    81CE : 4EB8 1918           		jsr	(sub_1918).w
    5862/    81D2 : 6B22                		bmi.s	locret_81F6
    5863/    81D4 : 317C 0080 0004      		move.w	#$80,4(a0)
    5864/    81DA : 317C 0802 0006      		move.w	#$802,6(a0)
    5865/    81E0 : 317C 00B0 0008      		move.w	#$B0,8(a0)
    5866/    81E6 : 317C 0070 000C      		move.w	#$70,$C(a0)
    5867/    81EC : 317C 8000 0020      		move.w	#$8000,$20(a0)
    5868/    81F2 : 31C8 D864           		move.w	a0,($FFFFD864).w
    5869/    81F6 :                     
    5870/    81F6 :                     locret_81F6:
    5871/    81F6 : 4E75                		rts
    5872/    81F8 :                     ; End of function sub_8196
    5873/    81F8 :                     
    5874/    81F8 :                     
    5875/    81F8 :                     ; =============== S U B	R O U T	I N E =======================================
    5876/    81F8 :                     
    5877/    81F8 :                     
    5878/    81F8 :                     sub_81F8:
    5879/    81F8 : 4DF8 D850           		lea	($FFFFD850).w,a6
    5880/    81FC :                     
    5881/    81FC :                     loc_81FC:
    5882/    81FC : (MACRO)              		_move.w	0(a6),d0
    5882/    81FC :  (MACRO-2)                           insn2op move.w, 0(a6),d0
    5882/    81FC : =>FALSE                        if (chkop("0(a6)","0("))
    5882/    81FC :                                       if (chkop("d0","0("))
    5882/    81FC :                                             !move.w   0(a6),d0
    5882/    81FC :                                       else
    5882/    81FC :                                             !move.w   0(a6),1+d0
    5882/    81FC :                                             !org    *-1
    5882/    81FC :                                             !dc.b   0
    5882/    81FC : [5882]                                 endif
    5882/    81FC : =>TRUE                         else
    5882/    81FC : =>FALSE                              if chkop("d0","d")
    5882/    81FC :                                       if (chkop("d0","0("))
    5882/    81FC :                     start:
    5882/    81FC :                                             !move.w   1+0(a6),d0
    5882/    81FC :                     end:
    5882/    81FC :                                             !org    start+3
    5882/    81FC :                                             !dc.b   0
    5882/    81FC :                                             !org    end
    5882/    81FC :                                       else
    5882/    81FC :                                             !move.w   1+0(a6),1+d0
    5882/    81FC :                                             !org    *-3
    5882/    81FC :                                             !dc.b   0
    5882/    81FC :                                             !org    *+1
    5882/    81FC :                                             !dc.b   0
    5882/    81FC : [5882]                                 endif
    5882/    81FC : =>TRUE                               else
    5882/    81FC : 302E 0001                                   !move.w   1+0(a6),d0
    5882/    81FF :                                             !org    *-1
    5882/    81FF : 00                                          !dc.b   0
    5882/    8200 : [5882]                               endif
    5882/    8200 : [5882]                         endif
    5883/    8200 : 6602                		bne.s	loc_8204
    5884/    8202 : 4E75                		rts
    5885/    8204 :                     ; ---------------------------------------------------------------------------
    5886/    8204 :                     
    5887/    8204 :                     loc_8204:
    5888/    8204 : 3C40                		movea.w	d0,a6
    5889/    8206 : 4A2E 0006           		tst.b	6(a6)
    5890/    820A : 6608                		bne.s	loc_8214
    5891/    820C : 4BF8 D89C           		lea	($FFFFD89C).w,a5
    5892/    8210 : 610A                		bsr.s	sub_821C
    5893/    8212 : 60E8                		bra.s	loc_81FC
    5894/    8214 :                     ; ---------------------------------------------------------------------------
    5895/    8214 :                     
    5896/    8214 :                     loc_8214:
    5897/    8214 : 4BF8 D8AC           		lea	($FFFFD8AC).w,a5
    5898/    8218 : 6102                		bsr.s	sub_821C
    5899/    821A : 60E0                		bra.s	loc_81FC
    5900/    821C :                     ; End of function sub_81F8
    5901/    821C :                     
    5902/    821C :                     
    5903/    821C :                     ; =============== S U B	R O U T	I N E =======================================
    5904/    821C :                     
    5905/    821C :                     
    5906/    821C :                     sub_821C:
    5907/    821C : 4879 0000 8736      		pea	(sub_8736).l
    5908/    8222 : 487A 0082           		pea	loc_82A6(pc)
    5909/    8226 : 4A15                		tst.b	(a5)
    5910/    8228 : 6A0C                		bpl.s	loc_8236
    5911/    822A : 1038 D89E           		move.b	($FFFFD89E).w,d0
    5912/    822E : 0200 0070           		andi.b	#btnABC,d0
    5913/    8232 : 6600 0058           		bne.w	loc_828C
    5914/    8236 :                     
    5915/    8236 :                     loc_8236:
    5916/    8236 : 302D 0008           		move.w	8(a5),d0
    5917/    823A : 6724                		beq.s	loc_8260
    5918/    823C : D040                		add.w	d0,d0
    5919/    823E : D16E 0008           		add.w	d0,8(a6)
    5920/    8242 : 4A40                		tst.w	d0
    5921/    8244 : 6A0E                		bpl.s	loc_8254
    5922/    8246 : 3D7C 0004 0026      		move.w	#4,$26(a6)
    5923/    824C : 3D7C 8000 0020      		move.w	#$8000,$20(a6)
    5924/    8252 : 600C                		bra.s	loc_8260
    5925/    8254 :                     ; ---------------------------------------------------------------------------
    5926/    8254 :                     
    5927/    8254 :                     loc_8254:
    5928/    8254 : 3D7C 0004 0026      		move.w	#4,$26(a6)
    5929/    825A : 3D7C 8800 0020      		move.w	#$8800,$20(a6)
    5930/    8260 :                     
    5931/    8260 :                     loc_8260:
    5932/    8260 : 322D 000A           		move.w	$A(a5),d1
    5933/    8264 : 6726                		beq.s	loc_828C
    5934/    8266 : D241                		add.w	d1,d1
    5935/    8268 : D36E 000C           		add.w	d1,$C(a6)
    5936/    826C : 4A41                		tst.w	d1
    5937/    826E : 6A0E                		bpl.s	loc_827E
    5938/    8270 : 3D7C 0006 0026      		move.w	#6,$26(a6)
    5939/    8276 : 3D7C 8000 0020      		move.w	#$8000,$20(a6)
    5940/    827C : 4E75                		rts
    5941/    827E :                     ; ---------------------------------------------------------------------------
    5942/    827E :                     
    5943/    827E :                     loc_827E:
    5944/    827E : 3D7C 0002 0026      		move.w	#2,$26(a6)
    5945/    8284 : 3D7C 8000 0020      		move.w	#$8000,$20(a6)
    5946/    828A : 4E75                		rts
    5947/    828C :                     ; ---------------------------------------------------------------------------
    5948/    828C :                     
    5949/    828C :                     loc_828C:
    5950/    828C : 8041                		or.w	d1,d0
    5951/    828E : 6614                		bne.s	locret_82A4
    5952/    8290 : 302E 0026           		move.w	$26(a6),d0
    5953/    8294 : 670E                		beq.s	locret_82A4
    5954/    8296 : E248                		lsr.w	#1,d0
    5955/    8298 : 5340                		subq.w	#1,d0
    5956/    829A : 1D40 0028           		move.b	d0,$28(a6)
    5957/    829E : 3D7C 0000 0026      		move.w	#0,$26(a6)
    5958/    82A4 :                     
    5959/    82A4 :                     locret_82A4:
    5960/    82A4 : 4E75                		rts
    5961/    82A6 :                     ; End of function sub_821C
    5962/    82A6 :                     
    5963/    82A6 :                     
    5964/    82A6 :                     ; =============== S U B	R O U T	I N E =======================================
    5965/    82A6 :                     
    5966/    82A6 :                     
    5967/    82A6 :                     loc_82A6:
    5968/    82A6 : 4A15                		tst.b	(a5)
    5969/    82A8 : 6B04                		bmi.s	locret_82AE
    5970/    82AA : 6100 0004           		bsr.w	nullsub_1
    5971/    82AE :                     
    5972/    82AE :                     locret_82AE:
    5973/    82AE : 4E75                		rts
    5974/    82B0 :                     ; End of function loc_82A6
    5975/    82B0 :                     
    5976/    82B0 :                     
    5977/    82B0 :                     ; =============== S U B	R O U T	I N E =======================================
    5978/    82B0 :                     
    5979/    82B0 :                     
    5980/    82B0 :                     nullsub_1:
    5981/    82B0 : 4E75                		rts
    5982/    82B2 :                     ; End of function nullsub_1
    5983/    82B2 :                     
    5984/    82B2 :                     
    5985/    82B2 :                     ; =============== S U B	R O U T	I N E =======================================
    5986/    82B2 :                     
    5987/    82B2 :                     
    5988/    82B2 :                     sub_82B2:
    5989/    82B2 :                     							; Field_PauseGame+116
    5990/    82B2 : 3038 D830           		move.w	($FFFFD830).w,d0
    5991/    82B6 : 6A02                		bpl.s	loc_82BA
    5992/    82B8 : 7000                		moveq	#0,d0
    5993/    82BA :                     
    5994/    82BA :                     loc_82BA:
    5995/    82BA : 0C40 00BF           		cmpi.w	#$BF,d0
    5996/    82BE : 6504                		bcs.s	loc_82C4
    5997/    82C0 : 303C 00BF           		move.w	#$BF,d0
    5998/    82C4 :                     
    5999/    82C4 :                     loc_82C4:
    6000/    82C4 : 31C0 D830           		move.w	d0,($FFFFD830).w
    6001/    82C8 : 31C0 C9DE           		move.w	d0,($FFFFC9DE).w
    6002/    82CC : 3038 D832           		move.w	($FFFFD832).w,d0
    6003/    82D0 : 6A02                		bpl.s	loc_82D4
    6004/    82D2 : 7000                		moveq	#0,d0
    6005/    82D4 :                     
    6006/    82D4 :                     loc_82D4:
    6007/    82D4 : 0C40 011F           		cmpi.w	#$11F,d0
    6008/    82D8 : 6504                		bcs.s	loc_82DE
    6009/    82DA : 303C 011F           		move.w	#$11F,d0
    6010/    82DE :                     
    6011/    82DE :                     loc_82DE:
    6012/    82DE : 31C0 D832           		move.w	d0,($FFFFD832).w
    6013/    82E2 : 31C0 C9EE           		move.w	d0,($FFFFC9EE).w
    6014/    82E6 : 3200                		move.w	d0,d1
    6015/    82E8 : E249                		lsr.w	#1,d1
    6016/    82EA : 4840                		swap	d0
    6017/    82EC : 3001                		move.w	d1,d0
    6018/    82EE : 21C0 CDDE           		move.l	d0,($FFFFCDDE).w
    6019/    82F2 : 4A78 D834           		tst.w	($FFFFD834).w
    6020/    82F6 : 6600 0084           		bne.w	loc_837C
    6021/    82FA : 5778 FAEE           		subq.w	#3,($FFFFFAEE).w
    6022/    82FE : 5B78 FAF0           		subq.w	#5,($FFFFFAF0).w
    6023/    8302 : 3038 D830           		move.w	($FFFFD830).w,d0
    6024/    8306 : 4440                		neg.w	d0
    6025/    8308 : 3200                		move.w	d0,d1
    6026/    830A : 4840                		swap	d0
    6027/    830C : 4841                		swap	d1
    6028/    830E : 3038 FAEE           		move.w	($FFFFFAEE).w,d0
    6029/    8312 : 3238 FAF0           		move.w	($FFFFFAF0).w,d1
    6030/    8316 : 0838 0000 CDE1      		btst	#0,($FFFFCDE1).w
    6031/    831C : 6702                		beq.s	loc_8320
    6032/    831E : C141                		exg	d0,d1
    6033/    8320 :                     
    6034/    8320 :                     loc_8320:
    6035/    8320 : 41F8 CA5E           		lea	($FFFFCA5E).w,a0
    6036/    8324 : 343C 006F           		move.w	#$6F,d2
    6037/    8328 :                     
    6038/    8328 :                     loc_8328:
    6039/    8328 : 20C0                		move.l	d0,(a0)+
    6040/    832A : 20C1                		move.l	d1,(a0)+
    6041/    832C : 51CA FFFA           		dbf	d2,loc_8328
    6042/    8330 : 0C78 0005 FAEA      		cmpi.w	#5,($FFFFFAEA).w
    6043/    8336 : 651E                		bcs.s	loc_8356
    6044/    8338 : 4278 FAEA           		clr.w	($FFFFFAEA).w
    6045/    833C : 5278 FAEC           		addq.w	#1,($FFFFFAEC).w
    6046/    8340 : 3038 FAEC           		move.w	($FFFFFAEC).w,d0
    6047/    8344 : 0240 0003           		andi.w	#3,d0
    6048/    8348 : E748                		lsl.w	#3,d0
    6049/    834A : 21FB 0010 D43C      		move.l	PALCY_RainbowField(pc,d0.w),($FFFFD43C).w
    6050/    8350 : 21FB 000E D440      		move.l	PALCY_RainbowField+4(pc,d0.w),($FFFFD440).w
    6051/    8356 :                     
    6052/    8356 :                     loc_8356:
    6053/    8356 : 5278 FAEA           		addq.w	#1,($FFFFFAEA).w
    6054/    835A : 4E75                		rts
    6055/    835C :                     ; ---------------------------------------------------------------------------
    6056/    835C :                     PALCY_RainbowField:
    6057/    835C : 0EEA                		dc.w $EEA
    6058/    835E : 0EC4                		dc.w $EC4
    6059/    8360 : 0E82                		dc.w $E82
    6060/    8362 : 0E40                		dc.w $E40
    6061/    8364 : 0EC4                		dc.w $EC4
    6062/    8366 : 0E82                		dc.w $E82
    6063/    8368 : 0E40                		dc.w $E40
    6064/    836A : 0EEA                		dc.w $EEA
    6065/    836C : 0E82                		dc.w $E82
    6066/    836E : 0E40                		dc.w $E40
    6067/    8370 : 0EEA                		dc.w $EEA
    6068/    8372 : 0EC4                		dc.w $EC4
    6069/    8374 : 0E40                		dc.w $E40
    6070/    8376 : 0EEA                		dc.w $EEA
    6071/    8378 : 0EC4                		dc.w $EC4
    6072/    837A : 0E82                		dc.w $E82
    6073/    837C :                     ; ---------------------------------------------------------------------------
    6074/    837C :                     
    6075/    837C :                     loc_837C:
    6076/    837C : 3038 D830           		move.w	($FFFFD830).w,d0
    6077/    8380 : 4440                		neg.w	d0
    6078/    8382 : 3200                		move.w	d0,d1
    6079/    8384 : E249                		lsr.w	#1,d1
    6080/    8386 : 4840                		swap	d0
    6081/    8388 : 3001                		move.w	d1,d0
    6082/    838A : 41F8 CA5E           		lea	($FFFFCA5E).w,a0
    6083/    838E : 323C 00DF           		move.w	#$DF,d1
    6084/    8392 :                     
    6085/    8392 :                     .loop:
    6086/    8392 : 20C0                		move.l	d0,(a0)+
    6087/    8394 : 51C9 FFFC           		dbf	d1,.loop
    6088/    8398 : 41FA 01D0           		lea	loc_856A(pc),a0
    6089/    839C : 6100 026C           		bsr.w	sub_860A
    6090/    83A0 : 41FA 0234           		lea	loc_85D6(pc),a0
    6091/    83A4 : 6100 0264           		bsr.w	sub_860A
    6092/    83A8 : 0C78 000A FAF0      		cmpi.w	#$A,($FFFFFAF0).w
    6093/    83AE : 6534                		bcs.s	loc_83E4
    6094/    83B0 : 4278 FAF0           		clr.w	($FFFFFAF0).w
    6095/    83B4 : 3038 FAF2           		move.w	($FFFFFAF2).w,d0
    6096/    83B8 : 0240 7FF0           		andi.w	#$7FF0,d0
    6097/    83BC : 0640 0010           		addi.w	#$10,d0
    6098/    83C0 : 0C40 0180           		cmpi.w	#$180,d0
    6099/    83C4 : 6502                		bcs.s	loc_83C8
    6100/    83C6 : 7000                		moveq	#0,d0
    6101/    83C8 :                     
    6102/    83C8 :                     loc_83C8:
    6103/    83C8 : 31C0 FAF2           		move.w	d0,($FFFFFAF2).w
    6104/    83CC : 21FB 001C D44A      		move.l	PALCY_ElectricField_1(pc,d0.w),($FFFFD44A).w
    6105/    83D2 : 21FB 001A D44E      		move.l	PALCY_ElectricField_1+4(pc,d0.w),($FFFFD44E).w
    6106/    83D8 : 21FB 0018 D452      		move.l	PALCY_ElectricField_1+8(pc,d0.w),($FFFFD452).w
    6107/    83DE : 21FB 0016 D456      		move.l	PALCY_ElectricField_1+$C(pc,d0.w),($FFFFD456).w
    6108/    83E4 :                     
    6109/    83E4 :                     loc_83E4:
    6110/    83E4 : 5278 FAF0           		addq.w	#1,($FFFFFAF0).w
    6111/    83E8 : 4E75                		rts
    6112/    83EA :                     ; End of function sub_82B2
    6113/    83EA :                     
    6114/    83EA :                     ; ---------------------------------------------------------------------------
    6115/    83EA :                     PALCY_ElectricField_1:
    6116/    83EA : 0CE0                		dc.w $CE0
    6117/    83EC : 0AC2                		dc.w $AC2
    6118/    83EE : 0880                		dc.w $880
    6119/    83F0 : 0642                		dc.w $642
    6120/    83F2 : 0EAE                		dc.w $EAE
    6121/    83F4 : 0A8E                		dc.w $A8E
    6122/    83F6 : 086A                		dc.w $86A
    6123/    83F8 : 0626                		dc.w $626
    6124/    83FA : 0CE0                		dc.w $CE0
    6125/    83FC : 0AC2                		dc.w $AC2
    6126/    83FE : 0880                		dc.w $880
    6127/    8400 : 0642                		dc.w $642
    6128/    8402 : 0EAE                		dc.w $EAE
    6129/    8404 : 0A8E                		dc.w $A8E
    6130/    8406 : 086A                		dc.w $86A
    6131/    8408 : 0626                		dc.w $626
    6132/    840A : 0AC2                		dc.w $AC2
    6133/    840C : 0880                		dc.w $880
    6134/    840E : 0642                		dc.w $642
    6135/    8410 : 0420                		dc.w $420
    6136/    8412 : 0A8E                		dc.w $A8E
    6137/    8414 : 086A                		dc.w $86A
    6138/    8416 : 0626                		dc.w $626
    6139/    8418 : 0404                		dc.w $404
    6140/    841A : 0880                		dc.w $880
    6141/    841C : 0642                		dc.w $642
    6142/    841E : 0420                		dc.w $420
    6143/    8420 : 0200                		dc.w $200
    6144/    8422 : 086A                		dc.w $86A
    6145/    8424 : 0626                		dc.w $626
    6146/    8426 : 0404                		dc.w $404
    6147/    8428 : 0200                		dc.w $200
    6148/    842A : 0642                		dc.w $642
    6149/    842C : 0420                		dc.w $420
    6150/    842E : 0200                		dc.w $200
    6151/    8430 : 0200                		dc.w $200
    6152/    8432 : 0626                		dc.w $626
    6153/    8434 : 0404                		dc.w $404
    6154/    8436 : 0200                		dc.w $200
    6155/    8438 : 0200                		dc.w $200
    6156/    843A : 0420                		dc.w $420
    6157/    843C : 0200                		dc.w $200
    6158/    843E : 0200                		dc.w $200
    6159/    8440 : 0200                		dc.w $200
    6160/    8442 : 0404                		dc.w $404
    6161/    8444 : 0200                		dc.w $200
    6162/    8446 : 0200                		dc.w $200
    6163/    8448 : 0200                		dc.w $200
    6164/    844A : 0200                		dc.w $200
    6165/    844C : 0200                		dc.w $200
    6166/    844E : 0200                		dc.w $200
    6167/    8450 : 0200                		dc.w $200
    6168/    8452 : 0200                		dc.w $200
    6169/    8454 : 0200                		dc.w $200
    6170/    8456 : 0200                		dc.w $200
    6171/    8458 : 0200                		dc.w $200
    6172/    845A : 0200                		dc.w $200
    6173/    845C : 0200                		dc.w $200
    6174/    845E : 0200                		dc.w $200
    6175/    8460 : 0200                		dc.w $200
    6176/    8462 : 0200                		dc.w $200
    6177/    8464 : 0200                		dc.w $200
    6178/    8466 : 0200                		dc.w $200
    6179/    8468 : 0200                		dc.w $200
    6180/    846A : 0420                		dc.w $420
    6181/    846C : 0200                		dc.w $200
    6182/    846E : 0200                		dc.w $200
    6183/    8470 : 0200                		dc.w $200
    6184/    8472 : 0404                		dc.w $404
    6185/    8474 : 0200                		dc.w $200
    6186/    8476 : 0200                		dc.w $200
    6187/    8478 : 0200                		dc.w $200
    6188/    847A : 0626                		dc.w $626
    6189/    847C : 0404                		dc.w $404
    6190/    847E : 0200                		dc.w $200
    6191/    8480 : 0200                		dc.w $200
    6192/    8482 : 0642                		dc.w $642
    6193/    8484 : 0420                		dc.w $420
    6194/    8486 : 0200                		dc.w $200
    6195/    8488 : 0200                		dc.w $200
    6196/    848A : 086A                		dc.w $86A
    6197/    848C : 0626                		dc.w $626
    6198/    848E : 0404                		dc.w $404
    6199/    8490 : 0200                		dc.w $200
    6200/    8492 : 0880                		dc.w $880
    6201/    8494 : 0642                		dc.w $642
    6202/    8496 : 0420                		dc.w $420
    6203/    8498 : 0200                		dc.w $200
    6204/    849A : 0A8E                		dc.w $A8E
    6205/    849C : 086A                		dc.w $86A
    6206/    849E : 0626                		dc.w $626
    6207/    84A0 : 0404                		dc.w $404
    6208/    84A2 : 0AC2                		dc.w $AC2
    6209/    84A4 : 0880                		dc.w $880
    6210/    84A6 : 0642                		dc.w $642
    6211/    84A8 : 0420                		dc.w $420
    6212/    84AA : 0EAE                		dc.w $EAE
    6213/    84AC : 0A8E                		dc.w $A8E
    6214/    84AE : 086A                		dc.w $86A
    6215/    84B0 : 0626                		dc.w $626
    6216/    84B2 : 0CE0                		dc.w $CE0
    6217/    84B4 : 0AC2                		dc.w $AC2
    6218/    84B6 : 0880                		dc.w $880
    6219/    84B8 : 0642                		dc.w $642
    6220/    84BA : 0EAE                		dc.w $EAE
    6221/    84BC : 0A8E                		dc.w $A8E
    6222/    84BE : 086A                		dc.w $86A
    6223/    84C0 : 0626                		dc.w $626
    6224/    84C2 : 0CE0                		dc.w $CE0
    6225/    84C4 : 0AC2                		dc.w $AC2
    6226/    84C6 : 0880                		dc.w $880
    6227/    84C8 : 0642                		dc.w $642
    6228/    84CA : 0A8E                		dc.w $A8E
    6229/    84CC : 086A                		dc.w $86A
    6230/    84CE : 0626                		dc.w $626
    6231/    84D0 : 0404                		dc.w $404
    6232/    84D2 : 0AC2                		dc.w $AC2
    6233/    84D4 : 0880                		dc.w $880
    6234/    84D6 : 0642                		dc.w $642
    6235/    84D8 : 0420                		dc.w $420
    6236/    84DA : 086A                		dc.w $86A
    6237/    84DC : 0626                		dc.w $626
    6238/    84DE : 0404                		dc.w $404
    6239/    84E0 : 0200                		dc.w $200
    6240/    84E2 : 0880                		dc.w $880
    6241/    84E4 : 0642                		dc.w $642
    6242/    84E6 : 0420                		dc.w $420
    6243/    84E8 : 0200                		dc.w $200
    6244/    84EA : 0626                		dc.w $626
    6245/    84EC : 0404                		dc.w $404
    6246/    84EE : 0200                		dc.w $200
    6247/    84F0 : 0200                		dc.w $200
    6248/    84F2 : 0642                		dc.w $642
    6249/    84F4 : 0420                		dc.w $420
    6250/    84F6 : 0200                		dc.w $200
    6251/    84F8 : 0200                		dc.w $200
    6252/    84FA : 0404                		dc.w $404
    6253/    84FC : 0200                		dc.w $200
    6254/    84FE : 0200                		dc.w $200
    6255/    8500 : 0200                		dc.w $200
    6256/    8502 : 0420                		dc.w $420
    6257/    8504 : 0200                		dc.w $200
    6258/    8506 : 0200                		dc.w $200
    6259/    8508 : 0200                		dc.w $200
    6260/    850A : 0200                		dc.w $200
    6261/    850C : 0200                		dc.w $200
    6262/    850E : 0200                		dc.w $200
    6263/    8510 : 0200                		dc.w $200
    6264/    8512 : 0200                		dc.w $200
    6265/    8514 : 0200                		dc.w $200
    6266/    8516 : 0200                		dc.w $200
    6267/    8518 : 0200                		dc.w $200
    6268/    851A : 0200                		dc.w $200
    6269/    851C : 0200                		dc.w $200
    6270/    851E : 0200                		dc.w $200
    6271/    8520 : 0200                		dc.w $200
    6272/    8522 : 0200                		dc.w $200
    6273/    8524 : 0200                		dc.w $200
    6274/    8526 : 0200                		dc.w $200
    6275/    8528 : 0200                		dc.w $200
    6276/    852A : 0404                		dc.w $404
    6277/    852C : 0200                		dc.w $200
    6278/    852E : 0200                		dc.w $200
    6279/    8530 : 0200                		dc.w $200
    6280/    8532 : 0420                		dc.w $420
    6281/    8534 : 0200                		dc.w $200
    6282/    8536 : 0200                		dc.w $200
    6283/    8538 : 0200                		dc.w $200
    6284/    853A : 0642                		dc.w $642
    6285/    853C : 0420                		dc.w $420
    6286/    853E : 0200                		dc.w $200
    6287/    8540 : 0200                		dc.w $200
    6288/    8542 : 0626                		dc.w $626
    6289/    8544 : 0404                		dc.w $404
    6290/    8546 : 0200                		dc.w $200
    6291/    8548 : 0200                		dc.w $200
    6292/    854A : 0880                		dc.w $880
    6293/    854C : 0642                		dc.w $642
    6294/    854E : 0420                		dc.w $420
    6295/    8550 : 0200                		dc.w $200
    6296/    8552 : 086A                		dc.w $86A
    6297/    8554 : 0626                		dc.w $626
    6298/    8556 : 0404                		dc.w $404
    6299/    8558 : 0200                		dc.w $200
    6300/    855A : 0AC2                		dc.w $AC2
    6301/    855C : 0880                		dc.w $880
    6302/    855E : 0642                		dc.w $642
    6303/    8560 : 0420                		dc.w $420
    6304/    8562 : 0A8E                		dc.w $A8E
    6305/    8564 : 086A                		dc.w $86A
    6306/    8566 : 0626                		dc.w $626
    6307/    8568 : 0404                		dc.w $404
    6308/    856A : FFFF FAEC           loc_856A:	dc.l $FFFFFAEC
    6309/    856E : =>TRUE               	if ~~fixBugs
    6310/    856E :                     		; Bug: this uses palette entry 2 instead of 3 like intended
    6311/    856E :                     		; perhaps intentional though, considering it can flash very fast.
    6312/    856E : FFFF D41C           		dc.l $FFFFD41C
    6313/    8572 : =>FALSE              	else
    6314/    8572 :                     		dc.l $FFFFD43C
    6315/    8572 : [6309]               	endif
    6316/    8572 : 0EE0                PALCY_ElectricField_2:dc.w $EE0
    6317/    8574 : 0064                		dc.w $64
    6318/    8576 : 0420                		dc.w $420
    6319/    8578 : 0032                		dc.w $32
    6320/    857A : 0EE0                		dc.w $EE0
    6321/    857C : 0002                		dc.w 2
    6322/    857E : 0420                		dc.w $420
    6323/    8580 : 0002                		dc.w 2
    6324/    8582 : 0EE0                		dc.w $EE0
    6325/    8584 : 0002                		dc.w 2
    6326/    8586 : 0420                		dc.w $420
    6327/    8588 : 0002                		dc.w 2
    6328/    858A : 0EE0                		dc.w $EE0
    6329/    858C : 0002                		dc.w 2
    6330/    858E : 0420                		dc.w $420
    6331/    8590 : 0002                		dc.w 2
    6332/    8592 : 0EE0                		dc.w $EE0
    6333/    8594 : 0002                		dc.w 2
    6334/    8596 : 0420                		dc.w $420
    6335/    8598 : 0002                		dc.w 2
    6336/    859A : 0EE0                		dc.w $EE0
    6337/    859C : 0002                		dc.w 2
    6338/    859E : 0420                		dc.w $420
    6339/    85A0 : 0002                		dc.w 2
    6340/    85A2 : 0EE0                		dc.w $EE0
    6341/    85A4 : 000A                		dc.w $A
    6342/    85A6 : 0420                		dc.w $420
    6343/    85A8 : 000A                		dc.w $A
    6344/    85AA : 0EE0                		dc.w $EE0
    6345/    85AC : 0014                		dc.w $14
    6346/    85AE : 0420                		dc.w $420
    6347/    85B0 : 0002                		dc.w 2
    6348/    85B2 : 0EE0                		dc.w $EE0
    6349/    85B4 : 0002                		dc.w 2
    6350/    85B6 : 0420                		dc.w $420
    6351/    85B8 : 0002                		dc.w 2
    6352/    85BA : 0EE0                		dc.w $EE0
    6353/    85BC : 0002                		dc.w 2
    6354/    85BE : 0420                		dc.w $420
    6355/    85C0 : 0002                		dc.w 2
    6356/    85C2 : 0EE0                		dc.w $EE0
    6357/    85C4 : 0002                		dc.w 2
    6358/    85C6 : 0420                		dc.w $420
    6359/    85C8 : 0002                		dc.w 2
    6360/    85CA : 0EE0                		dc.w $EE0
    6361/    85CC : 0002                		dc.w 2
    6362/    85CE : 0420                		dc.w $420
    6363/    85D0 : 0002                		dc.w 2
    6364/    85D2 : 0EE0                		dc.w $EE0
    6365/    85D4 : FF                  		dc.b $FF
    6366/    85D5 : FF                  		dc.b $FF
    6367/    85D6 : FFFF FAEE           loc_85D6:	dc.l $FFFFFAEE
    6368/    85DA : =>TRUE               	if ~~fixBugs
    6369/    85DA :                     		; Bug: this uses palette entry 2 instead of 3 like intended
    6370/    85DA :                     		; perhaps intentional though, considering it can flash very fast.
    6371/    85DA : FFFF D41E           		dc.l $FFFFD41E
    6372/    85DE : =>FALSE              	else
    6373/    85DE :                     		dc.l $FFFFD43E
    6374/    85DE : [6368]               	endif
    6375/    85DE : 08E0 0032           		dc.l $8E00032
    6376/    85E2 : 06C0 0005           		dc.l $6C00005
    6377/    85E6 : 04A0 0005           		dc.l $4A00005
    6378/    85EA : 0280 0005           		dc.l $2800005
    6379/    85EE : 0060 0005           		dc.l $600005
    6380/    85F2 : 0040 0005           		dc.l $400005
    6381/    85F6 : 0060 0005           		dc.l $600005
    6382/    85FA : 0280 0005           		dc.l $2800005
    6383/    85FE : 04A0 0005           		dc.l $4A00005
    6384/    8602 : 06C0 0005           		dc.l $6C00005
    6385/    8606 : 08E0 FFFF           		dc.l $8E0FFFF
    6386/    860A :                     
    6387/    860A :                     ; =============== S U B	R O U T	I N E =======================================
    6388/    860A :                     
    6389/    860A :                     sub_860A:
    6390/    860A : 2258                		movea.l	(a0)+,a1
    6391/    860C : 2458                		movea.l	(a0)+,a2
    6392/    860E : 5329 0001           		subq.b	#1,1(a1)
    6393/    8612 : 661C                		bne.s	locret_8630
    6394/    8614 : 5811                		addq.b	#4,(a1)
    6395/    8616 : 1011                		move.b	(a1),d0
    6396/    8618 : 0240 00FC           		andi.w	#$FC,d0
    6397/    861C : 34B0 0000           		move.w	(a0,d0.w),(a2)
    6398/    8620 : 3030 0002           		move.w	2(a0,d0.w),d0
    6399/    8624 : 6A06                		bpl.s	loc_862C
    6400/    8626 : 32A8 0002           		move.w	2(a0),(a1)
    6401/    862A : 4E75                		rts
    6402/    862C :                     ; ---------------------------------------------------------------------------
    6403/    862C :                     
    6404/    862C :                     loc_862C:
    6405/    862C : 1340 0001           		move.b	d0,1(a1)
    6406/    8630 :                     
    6407/    8630 :                     locret_8630:
    6408/    8630 : 4E75                		rts
    6409/    8632 :                     ; End of function sub_860A
    6410/    8632 :                     
    6411/    8632 :                     ; ---------------------------------------------------------------------------
    6412/    8632 : 4E75                		rts
    6413/    8634 :                     
    6414/    8634 :                     ; =============== S U B	R O U T	I N E =======================================
    6415/    8634 :                     
    6416/    8634 :                     
    6417/    8634 :                     Field_LoadArt:
    6418/    8634 : 4A78 D834           		tst.w	($FFFFD834).w
    6419/    8638 : 6600 0034           		bne.w	loc_866E
    6420/    863C : 41F9 0004 5926      		lea	(PAL_RainbowField).l,a0
    6421/    8642 : 6100 005C           		bsr.w	sub_86A0
    6422/    8646 : 41F9 0004 5966      		lea	(ARTCRA_RainbowField8x8).l,a0
    6423/    864C : 6100 006C           		bsr.w	sub_86BA
    6424/    8650 : 41F9 0004 8FE0      		lea	(MAPUNC_RainbowFieldFG).l,a0
    6425/    8656 : 3278 D816           		movea.w	($FFFFD816).w,a1
    6426/    865A : 6100 008E           		bsr.w	sub_86EA
    6427/    865E : 41F9 0004 B002      		lea	(MAPUNC_RainbowFieldBG).l,a0
    6428/    8664 : 3278 D818           		movea.w	($FFFFD818).w,a1
    6429/    8668 : 6100 0080           		bsr.w	sub_86EA
    6430/    866C : 4E75                		rts
    6431/    866E :                     ; ---------------------------------------------------------------------------
    6432/    866E :                     
    6433/    866E :                     loc_866E:
    6434/    866E : 41F9 0004 C014      		lea	(PAL_ElectricField).l,a0
    6435/    8674 : 6100 002A           		bsr.w	sub_86A0
    6436/    8678 : 41F9 0004 C054      		lea	(ARTCRA_ElectricField8x8).l,a0
    6437/    867E : 6100 003A           		bsr.w	sub_86BA
    6438/    8682 : 41F9 0005 108A      		lea	(MAPUNC_ElectricFieldFG).l,a0
    6439/    8688 : 3278 D816           		movea.w	($FFFFD816).w,a1
    6440/    868C : 6100 005C           		bsr.w	sub_86EA
    6441/    8690 : 41F9 0005 30AC      		lea	(MAPUNC_ElectricFieldBG).l,a0
    6442/    8696 : 3278 D818           		movea.w	($FFFFD818).w,a1
    6443/    869A : 6100 004E           		bsr.w	sub_86EA
    6444/    869E : 4E75                		rts
    6445/    86A0 :                     ; End of function Field_LoadArt
    6446/    86A0 :                     
    6447/    86A0 :                     
    6448/    86A0 :                     ; =============== S U B	R O U T	I N E =======================================
    6449/    86A0 :                     
    6450/    86A0 :                     
    6451/    86A0 :                     sub_86A0:
    6452/    86A0 : 43F8 D424           		lea	($FFFFD424).w,a1
    6453/    86A4 : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    6454/    86A8 : 48D1 00FF           		movem.l	d0-d7,(a1)
    6455/    86AC : 43E9 0020           		lea	$20(a1),a1
    6456/    86B0 : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    6457/    86B4 : 48D1 00FF           		movem.l	d0-d7,(a1)
    6458/    86B8 : 4E75                		rts
    6459/    86BA :                     ; End of function sub_86A0
    6460/    86BA :                     
    6461/    86BA :                     
    6462/    86BA :                     ; =============== S U B	R O U T	I N E =======================================
    6463/    86BA :                     
    6464/    86BA :                     
    6465/    86BA :                     sub_86BA:
    6466/    86BA : 3E18                		move.w	(a0)+,d7
    6467/    86BC :                     
    6468/    86BC :                     loc_86BC:
    6469/    86BC : 3F07                		move.w	d7,-(sp)
    6470/    86BE : (MACRO)              		disable_ints
    6470/    86BE : 46FC 2700                           move    #$2700,sr
    6471/    86C2 : 43F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a1
    6472/    86C8 : 2009                		move.l	a1,d0
    6473/    86CA : 3218                		move.w	(a0)+,d1
    6474/    86CC : 3418                		move.w	(a0)+,d2
    6475/    86CE : E94A                		lsl.w	#4,d2
    6476/    86D0 : 4EB9 0000 883C      		jsr	(CracDec).l			; run through Crackers Decompression
    6477/    86D6 : 2F08                		move.l	a0,-(sp)
    6478/    86D8 : 4EB8 05E8           		jsr	(sub_5E8).w
    6479/    86DC : 205F                		movea.l	(sp)+,a0
    6480/    86DE : (MACRO)              		enable_ints
    6480/    86DE : 46FC 2300                           move    #$2300,sr
    6481/    86E2 : 3E1F                		move.w	(sp)+,d7
    6482/    86E4 : 51CF FFD6           		dbf	d7,loc_86BC
    6483/    86E8 : 4E75                		rts
    6484/    86EA :                     ; End of function sub_86BA
    6485/    86EA :                     
    6486/    86EA :                     
    6487/    86EA :                     ; =============== S U B	R O U T	I N E =======================================
    6488/    86EA :                     
    6489/    86EA :                     
    6490/    86EA :                     sub_86EA:
    6491/    86EA : 3E18                		move.w	(a0)+,d7
    6492/    86EC :                     
    6493/    86EC :                     loc_86EC:
    6494/    86EC : 3F07                		move.w	d7,-(sp)
    6495/    86EE : (MACRO)              		disable_ints
    6495/    86EE : 46FC 2700                           move    #$2700,sr
    6496/    86F2 : 3C18                		move.w	(a0)+,d6
    6497/    86F4 : DC49                		add.w	a1,d6
    6498/    86F6 : 3A18                		move.w	(a0)+,d5
    6499/    86F8 : 3818                		move.w	(a0)+,d4
    6500/    86FA : 3618                		move.w	(a0)+,d3
    6501/    86FC :                     
    6502/    86FC :                     loc_86FC:
    6503/    86FC : 3006                		move.w	d6,d0
    6504/    86FE : E588                		lsl.l	#2,d0
    6505/    8700 : E448                		lsr.w	#2,d0
    6506/    8702 : 0040 4000           		ori.w	#$4000,d0
    6507/    8706 : 4840                		swap	d0
    6508/    8708 : 0240 0003           		andi.w	#3,d0
    6509/    870C : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    6510/    8712 : 3404                		move.w	d4,d2
    6511/    8714 :                     
    6512/    8714 :                     loc_8714:
    6513/    8714 : 3018                		move.w	(a0)+,d0
    6514/    8716 : D045                		add.w	d5,d0
    6515/    8718 : 33C0 00C0 0000      		move.w	d0,(vdp_data_port).l
    6516/    871E : 51CA FFF4           		dbf	d2,loc_8714
    6517/    8722 : 0646 0080           		addi.w	#$80,d6
    6518/    8726 : 51CB FFD4           		dbf	d3,loc_86FC
    6519/    872A : (MACRO)              		enable_ints
    6519/    872A : 46FC 2300                           move    #$2300,sr
    6520/    872E : 3E1F                		move.w	(sp)+,d7
    6521/    8730 : 51CF FFBA           		dbf	d7,loc_86EC
    6522/    8734 : 4E75                		rts
    6523/    8736 :                     ; End of function sub_86EA
    6524/    8736 :                     
    6525/    8736 :                     
    6526/    8736 :                     ; =============== S U B	R O U T	I N E =======================================
    6527/    8736 :                     
    6528/    8736 :                     
    6529/    8736 :                     sub_8736:
    6530/    8736 : 4A2E 0006           		tst.b	6(a6)
    6531/    873A : 660C                		bne.s	loc_8748
    6532/    873C : 49F8 D87C           		lea	($FFFFD87C).w,a4
    6533/    8740 : 7401                		moveq	#1,d2
    6534/    8742 : 3038 D866           		move.w	($FFFFD866).w,d0
    6535/    8746 : 600A                		bra.s	loc_8752
    6536/    8748 :                     ; ---------------------------------------------------------------------------
    6537/    8748 :                     
    6538/    8748 :                     loc_8748:
    6539/    8748 : 49F8 D888           		lea	($FFFFD888).w,a4
    6540/    874C : 7408                		moveq	#8,d2
    6541/    874E : 3038 D868           		move.w	($FFFFD868).w,d0
    6542/    8752 :                     
    6543/    8752 :                     loc_8752:
    6544/    8752 : 47FB 0068           		lea	CharacterDataTable(pc,d0.w),a3
    6545/    8756 : 2053                		movea.l	(a3),a0
    6546/    8758 : 226B 0020           		movea.l	$20(a3),a1
    6547/    875C : 246B 0040           		movea.l	$40(a3),a2
    6548/    8760 : 266B 0060           		movea.l	$60(a3),a3
    6549/    8764 : 302E 0026           		move.w	$26(a6),d0
    6550/    8768 : D0F0 0000           		adda.w	(a0,d0.w),a0
    6551/    876C : 7200                		moveq	#0,d1
    6552/    876E : 122E 0028           		move.b	$28(a6),d1
    6553/    8772 : 1030 1003           		move.b	3(a0,d1.w),d0
    6554/    8776 : B228 0001           		cmp.b	1(a0),d1
    6555/    877A : 630E                		bls.s	loc_878A
    6556/    877C : 1028 0002           		move.b	2(a0),d0
    6557/    8780 : 1D40 0028           		move.b	d0,$28(a6)
    6558/    8784 : 1030 0003           		move.b	3(a0,d0.w),d0
    6559/    8788 : 6016                		bra.s	loc_87A0
    6560/    878A :                     ; ---------------------------------------------------------------------------
    6561/    878A :                     
    6562/    878A :                     loc_878A:
    6563/    878A : 1210                		move.b	(a0),d1
    6564/    878C : D36E 0028           		add.w	d1,$28(a6)
    6565/    8790 : 122E 0028           		move.b	$28(a6),d1
    6566/    8794 : B228 0001           		cmp.b	1(a0),d1
    6567/    8798 : 630A                		bls.s	loc_87A4
    6568/    879A : 1D68 0002 0028      		move.b	2(a0),$28(a6)
    6569/    87A0 :                     
    6570/    87A0 :                     loc_87A0:
    6571/    87A0 : 422E 0029           		clr.b	$29(a6)
    6572/    87A4 :                     
    6573/    87A4 :                     loc_87A4:
    6574/    87A4 : D040                		add.w	d0,d0
    6575/    87A6 : D040                		add.w	d0,d0
    6576/    87A8 : D6F1 0000           		adda.w	(a1,d0.w),a3
    6577/    87AC : D4F1 0002           		adda.w	2(a1,d0.w),a2
    6578/    87B0 : 288A                		move.l	a2,(a4)
    6579/    87B2 : 8538 D87A           		or.b	d2,($FFFFD87A).w
    6580/    87B6 : 2D4B 0010           		move.l	a3,obMap(a6)
    6581/    87BA : 4E75                		rts
    6582/    87BC :                     ; End of function sub_8736
    6583/    87BC :                     
    6584/    87BC :                     ; ---------------------------------------------------------------------------
    6585/    87BC :                     CharacterDataTable:
    6586/    87BC : 0006 8A06           		dc.l ANI_SonicFields
    6587/    87C0 : 0006 8CFA           		dc.l ANI_TailsFields
    6588/    87C4 : 0000 0000           		dc.l 0
    6589/    87C8 : 0000 0000           		dc.l 0
    6590/    87CC : 0000 0000           		dc.l 0
    6591/    87D0 : 0000 0000           		dc.l 0
    6592/    87D4 : 0000 0000           		dc.l 0
    6593/    87D8 : 0000 0000           		dc.l 0
    6594/    87DC : 0006 8A42           		dc.l PLCMAP_SonicFields_MainIndex
    6595/    87E0 : 0006 8D36           		dc.l PLCMAP_TailsFields_MainIndex
    6596/    87E4 : 0000 0000           		dc.l 0
    6597/    87E8 : 0000 0000           		dc.l 0
    6598/    87EC : 0000 0000           		dc.l 0
    6599/    87F0 : 0000 0000           		dc.l 0
    6600/    87F4 : 0000 0000           		dc.l 0
    6601/    87F8 : 0000 0000           		dc.l 0
    6602/    87FC : 0006 8ABA           		dc.l PLC_SonicFields
    6603/    8800 : 0006 8DC6           		dc.l PLC_TailsFields
    6604/    8804 : 0000 0000           		dc.l 0
    6605/    8808 : 0000 0000           		dc.l 0
    6606/    880C : 0000 0000           		dc.l 0
    6607/    8810 : 0000 0000           		dc.l 0
    6608/    8814 : 0000 0000           		dc.l 0
    6609/    8818 : 0000 0000           		dc.l 0
    6610/    881C : 0006 8BE6           		dc.l Map_SonicFields
    6611/    8820 : 0006 8EF2           		dc.l Map_TailsFields
    6612/    8824 : 0000 0000           		dc.l 0
    6613/    8828 : 0000 0000           		dc.l 0
    6614/    882C : 0000 0000           		dc.l 0
    6615/    8830 : 0000 0000           		dc.l 0
    6616/    8834 : 0000 0000           		dc.l 0
    6617/    8838 : 0000 0000           		dc.l 0
    6618/    883C :                     
    6619/    883C :                     
    6620/    883C :                     ; ===========================================================================
    6621/    883C :                     
    6622/    883C :                     		include "_inc/Crackers Decompression.asm"
(1)    1/    883C :                     ; ---------------------------------------------------------------------------
(1)    2/    883C :                     ; Crackers Decompression Algorithm
(1)    3/    883C :                     ; An LZSS variation with a pretty small window
(1)    4/    883C :                     ; ---------------------------------------------------------------------------
(1)    5/    883C :                     
(1)    6/    883C :                     CracDec:
(1)    7/    883C : 48E7 7F20           		movem.l	d1-d7/a2,-(sp)
(1)    8/    8840 : 3E18                		move.w	(a0)+,d7
(1)    9/    8842 : 3407                		move.w	d7,d2
(1)   10/    8844 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)   11/    8848 : BF42                		eor.w	d7,d2
(1)   12/    884A : E55A                		rol.w	#2,d2
(1)   13/    884C : 7204                		moveq	#4,d1
(1)   14/    884E : 9242                		sub.w	d2,d1
(1)   15/    8850 : 7401                		moveq	#1,d2
(1)   16/    8852 : E36A                		lsl.w	d1,d2
(1)   17/    8854 : 5342                		subq.w	#1,d2
(1)   18/    8856 :                     
(1)   19/    8856 :                     loc_8856:
(1)   20/    8856 : 1A18                		move.b	(a0)+,d5
(1)   21/    8858 : 7C07                		moveq	#7,d6
(1)   22/    885A :                     
(1)   23/    885A :                     loc_885A:
(1)   24/    885A : DA05                		add.b	d5,d5
(1)   25/    885C : 6500 0012           		bcs.w	loc_8870
(1)   26/    8860 : 12D8                		move.b	(a0)+,(a1)+
(1)   27/    8862 : 51CE FFF6           		dbf	d6,loc_885A
(1)   28/    8866 : 51CF FFEE           		dbf	d7,loc_8856
(1)   29/    886A : 4CDF 04FE           		movem.l	(sp)+,d1-d7/a2
(1)   30/    886E : 4E75                		rts
(1)   31/    8870 :                     
(1)   32/    8870 :                     loc_8870:
(1)   33/    8870 : 7600                		moveq	#0,d3
(1)   34/    8872 : 1618                		move.b	(a0)+,d3
(1)   35/    8874 : 3803                		move.w	d3,d4
(1)   36/    8876 : E26B                		lsr.w	d1,d3
(1)   37/    8878 : C842                		and.w	d2,d4
(1)   38/    887A : 4443                		neg.w	d3
(1)   39/    887C : 45F1 30FF           		lea	-1(a1,d3.w),a2
(1)   40/    8880 : 5244                		addq.w	#1,d4
(1)   41/    8882 :                     
(1)   42/    8882 :                     loc_8882:
(1)   43/    8882 : 12DA                		move.b	(a2)+,(a1)+
(1)   44/    8884 : 51CC FFFC           		dbf	d4,loc_8882
(1)   45/    8888 : 51CE FFD0           		dbf	d6,loc_885A
(1)   46/    888C : 51CF FFC8           		dbf	d7,loc_8856
(1)   47/    8890 : 4CDF 04FE           		movem.l	(sp)+,d1-d7/a2
(1)   48/    8894 : 4E75                		rts
(1)   49/    8896 :                     
    6623/    8896 :                     
    6624/    8896 :                     ; ===========================================================================
    6625/    8896 :                     ; ---------------------------------------------------------------------------
    6626/    8896 :                     ; Level Zones
    6627/    8896 :                     ; ---------------------------------------------------------------------------
    6628/    8896 :                     
    6629/    8896 :                     Levels:
    6630/    8896 : 4850                		pea	(a0)
    6631/    8898 : 41FA 0282           		lea	loc_8B1C(pc),a0
    6632/    889C : 21C8 C832           		move.l	a0,(v_vdpindex).w
    6633/    88A0 : 4CDF 0100           		movem.l	(sp)+,a0
    6634/    88A4 : 41FA 0122           		lea	Level_VDPSettings(pc),a0
    6635/    88A8 : 4EB8 08D0           		jsr	(SetupVDPUsingTable).w
    6636/    88AC : 103C 0081           		move.b	#bgm_Electoria,d0
    6637/    88B0 : 4A78 D834           		tst.w	($FFFFD834).w
    6638/    88B4 : 670C                		beq.s	loc_88C2
    6639/    88B6 : 3038 D83A           		move.w	($FFFFD83A).w,d0
    6640/    88BA : 0240 0003           		andi.w	#3,d0
    6641/    88BE : 0640 0082           		addi.w	#bgm_Walkin,d0
    6642/    88C2 :                     
    6643/    88C2 :                     loc_88C2:
    6644/    88C2 : 4EB9 0000 6402      		jsr	(PlayMusic).l
    6645/    88C8 : 43FA 00BE           		lea	PAL_PrimaryColours(pc),a1
    6646/    88CC : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
    6647/    88D0 : 720F                		moveq	#$F,d1
    6648/    88D2 :                     
    6649/    88D2 :                     loc_88D2:
    6650/    88D2 : 20D9                		move.l	(a1)+,(a0)+
    6651/    88D4 : 51C9 FFFC           		dbf	d1,loc_88D2
    6652/    88D8 : 30BC 0000           		move.w	#0,(a0)
    6653/    88DC : 6100 6B7E           		bsr.w	sub_F45C
    6654/    88E0 : 6100 7162           		bsr.w	sub_FA44
    6655/    88E4 : 0278 81BC C9BA      		andi.w	#$81BC,($FFFFC9BA).w
    6656/    88EA : 33F8 C9BA 00C0      		move.w	($FFFFC9BA).w,(vdp_control_port).l
             88F0 : 0004             
    6657/    88F2 : 42B8 D82C           		clr.l	($FFFFD82C).w
    6658/    88F6 : 4EB9 0000 9514      		jsr	(sub_9514).l
    6659/    88FC : 6100 0300           		bsr.w	sub_8BFE
    6660/    8900 : 4EB9 0000 F116      		jsr	(sub_F116).l
    6661/    8906 : 4EB8 15D0           		jsr	(sub_15D0).w
    6662/    890A : 31FC 0005 D83C      		move.w	#5,($FFFFD83C).w
    6663/    8910 : 31FC 0007 D840      		move.w	#7,($FFFFD840).w
    6664/    8916 : 31FC 003F D844      		move.w	#$3F,($FFFFD844).w
    6665/    891C : 31FC 003F D848      		move.w	#$3F,($FFFFD848).w
    6666/    8922 : 4EB9 0000 BE72      		jsr	(sub_BE72).l
    6667/    8928 : 4EB9 0000 D1E0      		jsr	(sub_D1E0).l
    6668/    892E : 4EB9 0000 EFD4      		jsr	(sub_EFD4).l
    6669/    8934 : 4EB9 0000 8C30      		jsr	(Level_LoadObjectArt).l
    6670/    893A : (MACRO)              		enable_ints
    6670/    893A : 46FC 2300                           move    #$2300,sr
    6671/    893E : 4EB9 0000 8CCE      		jsr	(sub_8CCE).l
    6672/    8944 : 4EB9 0000 ED26      		jsr	(sub_ED26).l
    6673/    894A : 4A78 D834           		tst.w	($FFFFD834).w
    6674/    894E : 6618                		bne.s	loc_8968
    6675/    8950 : 4278 D830           		clr.w	($FFFFD830).w
    6676/    8954 : 4278 D832           		clr.w	($FFFFD832).w
    6677/    8958 : 4278 C9DE           		clr.w	($FFFFC9DE).w
    6678/    895C : 4278 C9EE           		clr.w	($FFFFC9EE).w
    6679/    8960 : 4278 CA1E           		clr.w	($FFFFCA1E).w
    6680/    8964 : 4278 CA2E           		clr.w	($FFFFCA2E).w
    6681/    8968 :                     
    6682/    8968 :                     loc_8968:
    6683/    8968 : 6100 6C22           		bsr.w	sub_F58C
    6684/    896C :                     
    6685/    896C :                     loc_896C:
    6686/    896C : 0078 8144 C9BA      		ori.w	#$8144,($FFFFC9BA).w
    6687/    8972 : 33F8 C9BA 00C0      		move.w	($FFFFC9BA).w,(vdp_control_port).l
             8978 : 0004             
    6688/    897A : 6100 6B82           		bsr.w	sub_F4FE
    6689/    897E : 4EB9 0000 F94A      		jsr	(sub_F94A).l
    6690/    8984 : 6000 005A           		bra.w	Level_MainLoop
    6691/    8988 :                     ; ---------------------------------------------------------------------------
    6692/    8988 :                     PAL_PrimaryColours:
    6693/    8988 :                     		binclude	"Palettes/PalPrimaryColours.bin"
    6694/    89C8 : (MACRO)              		even
    6694/    89C8 : =>TRUE                       if notZ80(MOMCPU)
    6694/    89C8 : =>FALSE                              if (*)&1
    6694/    89C8 :                                             dc.b 0                          ;ds.b 1
    6694/    89C8 : [6694]                               endif
    6694/    89C8 : =>FALSE                      else
    6694/    89C8 :                                     if ($)&1
    6694/    89C8 :                                             db 0
    6694/    89C8 : [6694]                               endif
    6694/    89C8 : [6694]                       endif
    6695/    89C8 :                     Level_VDPSettings:
    6696/    89C8 : 8230                		dc.w $8230
    6697/    89CA : 832C                		dc.w $832C
    6698/    89CC : 8407                		dc.w $8407
    6699/    89CE : 8578                		dc.w $8578
    6700/    89D0 : 8D34                		dc.w $8D34
    6701/    89D2 : 9001                		dc.w $9001
    6702/    89D4 : 8730                		dc.w $8730
    6703/    89D6 : 8B00                		dc.w $8B00
    6704/    89D8 : 8C81                		dc.w $8C81
    6705/    89DA : 9100                		dc.w $9100
    6706/    89DC : 9200                		dc.w $9200
    6707/    89DE : 0000                		dc.w 0
    6708/    89E0 :                     ; ---------------------------------------------------------------------------
    6709/    89E0 :                     
    6710/    89E0 :                     Level_MainLoop:
    6711/    89E0 : 4879 0000 89E0      		pea	(Level_MainLoop).l
    6712/    89E6 : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    6713/    89EC :                     
    6714/    89EC :                     .wait:
    6715/    89EC : 4A38 FFC9           		tst.b	(v_lagger).w
    6716/    89F0 : 6AFA                		bpl.s	.wait
    6717/    89F2 : 6100 699C           		bsr.w	sub_F390
    6718/    89F6 : 4EB9 0000 8A3A      		jsr	(Level_ReadController).l
    6719/    89FC : 4EB9 0000 8B7E      		jsr	(Level_PauseGame).l
    6720/    8A02 : 4EB9 0000 CCCA      		jsr	(sub_CCCA).l
    6721/    8A08 : 4EB9 0000 A178      		jsr	(sub_A178).l
    6722/    8A0E : 4EB9 0000 9514      		jsr	(sub_9514).l
    6723/    8A14 : 4EB9 0000 F12C      		jsr	(sub_F12C).l
    6724/    8A1A : 4EB9 0000 D20A      		jsr	(sub_D20A).l
    6725/    8A20 : 4EB9 0000 EBAE      		jsr	(Level_UpdateHUD).l
    6726/    8A26 : 4EB9 0000 F954      		jsr	(Level_AnimateBG).l
    6727/    8A2C : (MACRO)              		disable_ints
    6727/    8A2C : 46FC 2700                           move    #$2700,sr
    6728/    8A30 : 4EB8 1640           		jsr	(BuildSprites).w
    6729/    8A34 : (MACRO)              		enable_ints
    6729/    8A34 : 46FC 2300                           move    #$2300,sr
    6730/    8A38 : 4E75                		rts
    6731/    8A3A :                     
    6732/    8A3A :                     ; =============== S U B	R O U T	I N E =======================================
    6733/    8A3A :                     
    6734/    8A3A :                     
    6735/    8A3A :                     Level_ReadController:
    6736/    8A3A : 4EB8 096E           		jsr	(sub_96E).w
    6737/    8A3E : 47F8 C938           		lea	(unk_C938).w,a3
    6738/    8A42 : 7200                		moveq	#0,d1
    6739/    8A44 : 1238 D89C           		move.b	($FFFFD89C).w,d1
    6740/    8A48 : 7007                		moveq	#7,d0
    6741/    8A4A : C033 1003           		and.b	3(a3,d1.w),d0
    6742/    8A4E : 56C2                		sne	d2
    6743/    8A50 : 1033 1004           		move.b	4(a3,d1.w),d0
    6744/    8A54 : 1200                		move.b	d0,d1
    6745/    8A56 : 0201 0070           		andi.b	#$70,d1
    6746/    8A5A : 56C1                		sne	d1
    6747/    8A5C : 8202                		or.b	d2,d1
    6748/    8A5E : 0201 0070           		andi.b	#$70,d1
    6749/    8A62 : 8001                		or.b	d1,d0
    6750/    8A64 : 49F8 FB00           		lea	($FFFFFB00).w,a4
    6751/    8A68 : 122C FFFF           		move.b	-1(a4),d1
    6752/    8A6C : 0241 000F           		andi.w	#$F,d1
    6753/    8A70 : 1434 1000           		move.b	(a4,d1.w),d2
    6754/    8A74 : 1980 1000           		move.b	d0,(a4,d1.w)
    6755/    8A78 : 522C FFFF           		addq.b	#1,-1(a4)
    6756/    8A7C : 1942 FFFE           		move.b	d2,-2(a4)
    6757/    8A80 : 49F8 D89C           		lea	($FFFFD89C).w,a4
    6758/    8A84 : 6100 0036           		bsr.w	sub_8ABC
    6759/    8A88 : 1038 FAFE           		move.b	($FFFFFAFE).w,d0
    6760/    8A8C : 47F8 C938           		lea	(unk_C938).w,a3
    6761/    8A90 : 7200                		moveq	#0,d1
    6762/    8A92 : 1238 D8AC           		move.b	($FFFFD8AC).w,d1
    6763/    8A96 : 6B1C                		bmi.s	loc_8AB4
    6764/    8A98 : 7007                		moveq	#7,d0
    6765/    8A9A : C033 1003           		and.b	3(a3,d1.w),d0
    6766/    8A9E : 56C2                		sne	d2
    6767/    8AA0 : 1033 1004           		move.b	4(a3,d1.w),d0
    6768/    8AA4 : 1200                		move.b	d0,d1
    6769/    8AA6 : 0201 0070           		andi.b	#$70,d1
    6770/    8AAA : 56C1                		sne	d1
    6771/    8AAC : 8202                		or.b	d2,d1
    6772/    8AAE : 0201 0070           		andi.b	#$70,d1
    6773/    8AB2 : 8001                		or.b	d1,d0
    6774/    8AB4 :                     
    6775/    8AB4 :                     loc_8AB4:
    6776/    8AB4 : 49F8 D8AC           		lea	($FFFFD8AC).w,a4
    6777/    8AB8 : 6000 0002           		bra.w	sub_8ABC
    6778/    8ABC :                     ; End of function Level_ReadController
    6779/    8ABC :                     
    6780/    8ABC :                     
    6781/    8ABC :                     ; =============== S U B	R O U T	I N E =======================================
    6782/    8ABC :                     
    6783/    8ABC :                     
    6784/    8ABC :                     sub_8ABC:
    6785/    8ABC : 196C 0002 0004      		move.b	2(a4),4(a4)
    6786/    8AC2 : 1940 0002           		move.b	d0,2(a4)
    6787/    8AC6 : 122C 0004           		move.b	4(a4),d1
    6788/    8ACA : B101                		eor.b	d0,d1
    6789/    8ACC : 6704                		beq.s	loc_8AD2
    6790/    8ACE : 422C 0006           		clr.b	6(a4)
    6791/    8AD2 :                     
    6792/    8AD2 :                     loc_8AD2:
    6793/    8AD2 : 522C 0006           		addq.b	#1,6(a4)
    6794/    8AD6 : C200                		and.b	d0,d1
    6795/    8AD8 : 1941 0003           		move.b	d1,3(a4)
    6796/    8ADC : 0240 000F           		andi.w	#$F,d0
    6797/    8AE0 : 197B 002A 0005      		move.b	byte_8B0C(pc,d0.w),5(a4)
    6798/    8AE6 : 7203                		moveq	#3,d1
    6799/    8AE8 : C240                		and.w	d0,d1
    6800/    8AEA : E259                		ror.w	#1,d1
    6801/    8AEC : 48C1                		ext.l	d1
    6802/    8AEE : 3401                		move.w	d1,d2
    6803/    8AF0 : 4841                		swap	d1
    6804/    8AF2 : 8441                		or.w	d1,d2
    6805/    8AF4 : 3942 000A           		move.w	d2,$A(a4)
    6806/    8AF8 : 0240 000C           		andi.w	#$C,d0
    6807/    8AFC : E658                		ror.w	#3,d0
    6808/    8AFE : 48C0                		ext.l	d0
    6809/    8B00 : 3200                		move.w	d0,d1
    6810/    8B02 : 4840                		swap	d0
    6811/    8B04 : 8240                		or.w	d0,d1
    6812/    8B06 : 3941 0008           		move.w	d1,8(a4)
    6813/    8B0A : 4E75                		rts
    6814/    8B0C :                     ; End of function sub_8ABC
    6815/    8B0C :                     
    6816/    8B0C :                     ; ---------------------------------------------------------------------------
    6817/    8B0C : 00C0 40C0           byte_8B0C:	dc.b 0,	$C0, $40, $C0
    6818/    8B10 : 80A0 60A0           		dc.b $80, $A0, $60, $A0
    6819/    8B14 : 00E0 20E0           		dc.b 0,	$E0, $20, $E0
    6820/    8B18 : 80A0 60A0           		dc.b $80, $A0, $60, $A0
    6821/    8B1C :                     ; ---------------------------------------------------------------------------
    6822/    8B1C :                     
    6823/    8B1C :                     loc_8B1C:
    6824/    8B1C : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    6825/    8B20 : 4EB9 0000 9F7C      		jsr	(sub_9F7C).l
    6826/    8B26 : 4EB8 04CC           		jsr	(VDPSetup_02).w
    6827/    8B2A : 4EB8 0448           		jsr	(VDPSetup_01).w
    6828/    8B2E : 4EB9 0000 C9DE      		jsr	(sub_C9DE).l
    6829/    8B34 : 203C FFFF D164      		move.l	#$FFFFD164,d0
    6830/    8B3A : 3238 D81A           		move.w	($FFFFD81A).w,d1
    6831/    8B3E : 343C 0140           		move.w	#$140,d2
    6832/    8B42 : 4EB8 05E8           		jsr	(sub_5E8).w
    6833/    8B46 : 47F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a3
    6834/    8B4C : 49F9 00FF 0B02      		lea	(unk_0B02&$FFFFFF).l,a4
    6835/    8B52 : 4BF8 C9DE           		lea	($FFFFC9DE).w,a5
    6836/    8B56 : 4EB8 14E4           		jsr	(sub_14E4).w
    6837/    8B5A : 47F9 00FF 0B84      		lea	(unk_0B84&$FFFFFF).l,a3
    6838/    8B60 : 49F9 00FF 0C86      		lea	(unk_0C86&$FFFFFF).l,a4
    6839/    8B66 : 4BF8 CA1E           		lea	($FFFFCA1E).w,a5
    6840/    8B6A : 4EB8 14E4           		jsr	(sub_14E4).w
    6841/    8B6E : 0038 0080 FFC9      		ori.b	#$80,(v_lagger).w
    6842/    8B74 : 5278 F000           		addq.w	#1,($FFFFF000).w
    6843/    8B78 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    6844/    8B7C : 4E73                		rte
    6845/    8B7E :                     
    6846/    8B7E :                     ; =============== S U B	R O U T	I N E =======================================
    6847/    8B7E :                     
    6848/    8B7E :                     
    6849/    8B7E :                     Level_PauseGame:
    6850/    8B7E : 4A38 D89F           		tst.b	($FFFFD89F).w
    6851/    8B82 : 6A00 0078           		bpl.w	locret_8BFC
    6852/    8B86 : 1038 C93C           		move.b	($FFFFC93C).w,d0
    6853/    8B8A : 0200 0070           		andi.b	#$70,d0
    6854/    8B8E : 0C00 0070           		cmpi.b	#$70,d0
    6855/    8B92 : 660C                		bne.s	loc_8BA0
    6856/    8B94 : (MACRO)              		disable_ints
    6856/    8B94 : 46FC 2700                           move    #$2700,sr
    6857/    8B98 : 91C8                		suba.l	a0,a0
    6858/    8B9A : 2E58                		movea.l	(a0)+,sp
    6859/    8B9C : 2058                		movea.l	(a0)+,a0
    6860/    8B9E : 4ED0                		jmp	(a0)
    6861/    8BA0 :                     ; ---------------------------------------------------------------------------
    6862/    8BA0 :                     
    6863/    8BA0 :                     loc_8BA0:
    6864/    8BA0 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    6865/    8BA4 :                     
    6866/    8BA4 :                     loc_8BA4:
    6867/    8BA4 : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    6868/    8BAA :                     
    6869/    8BAA :                     .wait:
    6870/    8BAA : 4A38 FFC9           		tst.b	(v_lagger).w
    6871/    8BAE : 6AFA                		bpl.s	.wait
    6872/    8BB0 : 4EB9 0000 8A3A      		jsr	(Level_ReadController).l
    6873/    8BB6 : 3038 D8A4           		move.w	($FFFFD8A4).w,d0
    6874/    8BBA : 3238 D8A6           		move.w	($FFFFD8A6).w,d1
    6875/    8BBE : D040                		add.w	d0,d0
    6876/    8BC0 : D040                		add.w	d0,d0
    6877/    8BC2 : D241                		add.w	d1,d1
    6878/    8BC4 : D241                		add.w	d1,d1
    6879/    8BC6 : 3078 D862           		movea.w	($FFFFD862).w,a0
    6880/    8BCA : D168 0008           		add.w	d0,8(a0)
    6881/    8BCE : D368 000C           		add.w	d1,$C(a0)
    6882/    8BD2 : 3078 D864           		movea.w	($FFFFD864).w,a0
    6883/    8BD6 : D168 0008           		add.w	d0,8(a0)
    6884/    8BDA : D368 000C           		add.w	d1,$C(a0)
    6885/    8BDE : 4EB9 0000 CCCA      		jsr	(sub_CCCA).l
    6886/    8BE4 : 4EB9 0000 9514      		jsr	(sub_9514).l
    6887/    8BEA : 4EB8 1640           		jsr	(BuildSprites).w
    6888/    8BEE : 6100 6784           		bsr.w	sub_F374
    6889/    8BF2 : 4A38 C93D           		tst.b	($FFFFC93D).w
    6890/    8BF6 : 6AAC                		bpl.s	loc_8BA4
    6891/    8BF8 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    6892/    8BFC :                     
    6893/    8BFC :                     locret_8BFC:
    6894/    8BFC : 4E75                		rts
    6895/    8BFE :                     ; End of function Level_PauseGame
    6896/    8BFE :                     
    6897/    8BFE :                     
    6898/    8BFE :                     ; =============== S U B	R O U T	I N E =======================================
    6899/    8BFE :                     
    6900/    8BFE :                     
    6901/    8BFE :                     sub_8BFE:
    6902/    8BFE : 7000                		moveq	#0,d0
    6903/    8C00 : 3038 D834           		move.w	($FFFFD834).w,d0
    6904/    8C04 : 0240 0001           		andi.w	#1,d0
    6905/    8C08 : E588                		lsl.l	#2,d0
    6906/    8C0A : 207B 0014           		movea.l	ObjPos_Pointers(pc,d0.w),a0
    6907/    8C0E : 43FB 0008           		lea	word_8C18(pc,d0.w),a1
    6908/    8C12 : 3419                		move.w	(a1)+,d2
    6909/    8C14 : 3611                		move.w	(a1),d3
    6910/    8C16 : 4E75                		rts
    6911/    8C18 :                     ; End of function sub_8BFE
    6912/    8C18 :                     
    6913/    8C18 :                     ; ---------------------------------------------------------------------------
    6914/    8C18 : 3FFF                word_8C18:	dc.w $3FFF
    6915/    8C1A : 07FF                		dc.w $7FF
    6916/    8C1C : 07FF                		dc.w $7FF
    6917/    8C1E : 0FFF                		dc.w $FFF
    6918/    8C20 :                     ObjPos_Pointers:
    6919/    8C20 : 0004 236A           		dc.l Objpos_SSZ
    6920/    8C24 : 0004 23C4           		dc.l Objpos_TTZ
    6921/    8C28 : 0004 236A           		dc.l Objpos_SSZ
    6922/    8C2C : 0004 23C4           		dc.l Objpos_TTZ
    6923/    8C30 :                     
    6924/    8C30 :                     ; =============== S U B	R O U T	I N E =======================================
    6925/    8C30 :                     
    6926/    8C30 :                     
    6927/    8C30 :                     Level_LoadObjectArt:
    6928/    8C30 : 4A78 D834           		tst.w	($FFFFD834).w
    6929/    8C34 : 6748                		beq.s	.exit
    6930/    8C36 : (MACRO)              		disable_ints
    6930/    8C36 : 46FC 2700                           move    #$2700,sr
    6931/    8C3A : 41F9 0004 1B9C      		lea	(ARTNEM_Springs).l,a0
    6932/    8C40 : 23FC 40E0 0002      		move.l	#$40E00002,(vdp_control_port).l
             8C46 : 00C0 0004          
    6933/    8C4A : 4EB8 0DC8           		jsr	(NemDec).w
    6934/    8C4E : (MACRO)              		disable_ints
    6934/    8C4E : 46FC 2700                           move    #$2700,sr
    6935/    8C52 : 41F9 0004 221E      		lea	(ARTNEM_SpikesVer).l,a0
    6936/    8C58 : 23FC 7EE0 0001      		move.l	#$7EE00001,(vdp_control_port).l
             8C5E : 00C0 0004          
    6937/    8C62 : 4EB8 0DC8           		jsr	(NemDec).w
    6938/    8C66 : (MACRO)              		disable_ints
    6938/    8C66 : 46FC 2700                           move    #$2700,sr
    6939/    8C6A : 41F9 0004 1F76      		lea	(ARTNEM_SpikesHoz).l,a0
    6940/    8C70 : 23FC 77E0 0001      		move.l	#$77E00001,(vdp_control_port).l
             8C76 : 00C0 0004          
    6941/    8C7A : 4EB8 0DC8           		jsr	(NemDec).w
    6942/    8C7E :                     
    6943/    8C7E :                     .exit:
    6944/    8C7E : 4E75                		rts
    6945/    8C80 :                     ; End of function Level_LoadObjectArt
    6946/    8C80 :                     
    6947/    8C80 :                     ; ---------------------------------------------------------------------------
    6948/    8C80 :                     ; An earlier version of above?
    6949/    8C80 : 43F9 0000 8CBA      		lea	(word_8CBA).l,a1
    6950/    8C86 :                     
    6951/    8C86 :                     loc_8C86:
    6952/    8C86 : 7000                		moveq	#0,d0
    6953/    8C88 : 3019                		move.w	(a1)+,d0
    6954/    8C8A : 0C40 FFFF           		cmpi.w	#$FFFF,d0
    6955/    8C8E : 6728                		beq.s	locret_8CB8
    6956/    8C90 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    6957/    8C94 : 2059                		movea.l	(a1)+,a0
    6958/    8C96 : E588                		lsl.l	#2,d0
    6959/    8C98 : E448                		lsr.w	#2,d0
    6960/    8C9A : 0040 4000           		ori.w	#$4000,d0
    6961/    8C9E : 4840                		swap	d0
    6962/    8CA0 : 0240 0003           		andi.w	#3,d0
    6963/    8CA4 : (MACRO)              		disable_ints
    6963/    8CA4 : 46FC 2700                           move    #$2700,sr
    6964/    8CA8 : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    6965/    8CAE : 4EB8 0DC8           		jsr	(NemDec).w
    6966/    8CB2 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    6967/    8CB6 : 60CE                		bra.s	loc_8C86
    6968/    8CB8 :                     ; ---------------------------------------------------------------------------
    6969/    8CB8 :                     
    6970/    8CB8 :                     locret_8CB8:
    6971/    8CB8 : 4E75                		rts
    6972/    8CBA :                     ; ---------------------------------------------------------------------------
    6973/    8CBA : 80E0                word_8CBA:	dc.w $80E0
    6974/    8CBC : 0004 1B9C           		dc.l ARTNEM_Springs
    6975/    8CC0 : 7EE0                		dc.w $7EE0
    6976/    8CC2 : 0004 221E           		dc.l ARTNEM_SpikesVer
    6977/    8CC6 : 77E0                		dc.w $77E0
    6978/    8CC8 : 0004 1F76           		dc.l ARTNEM_SpikesHoz
    6979/    8CCC : FFFF                		dc.w $FFFF
    6980/    8CCE :                     
    6981/    8CCE :                     ; =============== S U B	R O U T	I N E =======================================
    6982/    8CCE :                     
    6983/    8CCE :                     
    6984/    8CCE :                     sub_8CCE:
    6985/    8CCE : 7200                		moveq	#0,d1
    6986/    8CD0 : 3238 D834           		move.w	($FFFFD834).w,d1
    6987/    8CD4 : 0241 0001           		andi.w	#1,d1
    6988/    8CD8 : E389                		lsl.l	#1,d1
    6989/    8CDA : 4EFB 1002           		jmp	loc_8CDE(pc,d1.w)
    6990/    8CDE :                     ; End of function sub_8CCE
    6991/    8CDE :                     
    6992/    8CDE :                     ; ---------------------------------------------------------------------------
    6993/    8CDE :                     
    6994/    8CDE :                     loc_8CDE:
    6995/    8CDE : 6002                		bra.s	locret_8CE2
    6996/    8CE0 :                     ; ---------------------------------------------------------------------------
    6997/    8CE0 : 6002                		bra.s	loc_8CE4
    6998/    8CE2 :                     ; ---------------------------------------------------------------------------
    6999/    8CE2 :                     
    7000/    8CE2 :                     locret_8CE2:
    7001/    8CE2 : 4E75                		rts
    7002/    8CE4 :                     ; ---------------------------------------------------------------------------
    7003/    8CE4 :                     
    7004/    8CE4 :                     loc_8CE4:
    7005/    8CE4 : 7000                		moveq	#0,d0
    7006/    8CE6 : 3038 D83A           		move.w	($FFFFD83A).w,d0
    7007/    8CEA : 0240 0003           		andi.w	#3,d0
    7008/    8CEE : ED88                		lsl.l	#6,d0
    7009/    8CF0 : 43F9 0000 8D08      		lea	(PAL_TechnoTowerZone).l,a1
    7010/    8CF6 : D3C0                		adda.l	d0,a1
    7011/    8CF8 : 41F8 D424           		lea	($FFFFD424).w,a0
    7012/    8CFC : 1E3C 001F           		move.b	#$1F,d7
    7013/    8D00 :                     
    7014/    8D00 :                     .load:
    7015/    8D00 : 30D9                		move.w	(a1)+,(a0)+
    7016/    8D02 : 51CF FFFC           		dbf	d7,.load
    7017/    8D06 : 4E75                		rts
    7018/    8D08 :                     ; ---------------------------------------------------------------------------
    7019/    8D08 :                     PAL_TechnoTowerZone:binclude "Palettes/PalTechnoTowerZone.bin"
    7020/    8E08 : (MACRO)              		even
    7020/    8E08 : =>TRUE                       if notZ80(MOMCPU)
    7020/    8E08 : =>FALSE                              if (*)&1
    7020/    8E08 :                                             dc.b 0                          ;ds.b 1
    7020/    8E08 : [7020]                               endif
    7020/    8E08 : =>FALSE                      else
    7020/    8E08 :                                     if ($)&1
    7020/    8E08 :                                             db 0
    7020/    8E08 : [7020]                               endif
    7020/    8E08 : [7020]                       endif
    7021/    8E08 :                     ; ---------------------------------------------------------------------------
    7022/    8E08 :                     
    7023/    8E08 :                     UnkRet001:
    7024/    8E08 : 4E75                		rts
    7025/    8E0A :                     ; ---------------------------------------------------------------------------
    7026/    8E0A :                     
    7027/    8E0A :                     UnkRet002:
    7028/    8E0A : 4E75                		rts
    7029/    8E0C :                     ; ---------------------------------------------------------------------------
    7030/    8E0C :                     
    7031/    8E0C :                     LevelSelect:
    7032/    8E0C : 3038 D824           		move.w	(v_subgamemode).w,d0
    7033/    8E10 : 4EFB 0002           		jmp	.submodes(pc,d0.w)
    7034/    8E14 :                     ; ---------------------------------------------------------------------------
    7035/    8E14 :                     
    7036/    8E14 :                     .submodes:
    7037/    8E14 : 6000 0006           		bra.w	LevelSelect_Init
    7038/    8E18 :                     ; ---------------------------------------------------------------------------
    7039/    8E18 : 6000 00A6           		bra.w	LevelSelect_Main
    7040/    8E1C :                     ; ---------------------------------------------------------------------------
    7041/    8E1C :                     
    7042/    8E1C :                     LevelSelect_Init:
    7043/    8E1C : 4850                		pea	(a0)
    7044/    8E1E : 41FA 021C           		lea	loc_903C(pc),a0
    7045/    8E22 : 21C8 C832           		move.l	a0,(v_vdpindex).w
    7046/    8E26 : 4CDF 0100           		movem.l	(sp)+,a0
    7047/    8E2A : (MACRO)              		disable_ints
    7047/    8E2A : 46FC 2700                           move    #$2700,sr
    7048/    8E2E : 703F                		moveq	#$3F,d0
    7049/    8E30 : 723F                		moveq	#$3F,d1
    7050/    8E32 : 7400                		moveq	#0,d2
    7051/    8E34 : 363C C000           		move.w	#$C000,d3
    7052/    8E38 : 4EB8 086E           		jsr	(sub_86E).w
    7053/    8E3C : 41FA 0278           		lea	ARTNEM_MenuSelectorBorder(pc),a0
    7054/    8E40 : 23FC 4C00 0000      		move.l	#$4C000000,(vdp_control_port).l
             8E46 : 00C0 0004          
    7055/    8E4A : 4EB8 0DC8           		jsr	(NemDec).w
    7056/    8E4E : 203C 4200 0003      		move.l	#$42000003,d0
    7057/    8E54 : 43FA 0294           		lea	MAPUNC_SelectMenu_1(pc),a1
    7058/    8E58 : 7227                		moveq	#$27,d1
    7059/    8E5A : 7403                		moveq	#3,d2
    7060/    8E5C : 363C 0000           		move.w	#0,d3
    7061/    8E60 : 4EB8 08A2           		jsr	(MapScreen).w
    7062/    8E64 : 23FC 7800 0003      		move.l	#$78000003,(vdp_control_port).l
             8E6A : 00C0 0004          
    7063/    8E6E : 23FC 0100 0001      		move.l	#$1000001,(vdp_data_port).l
             8E74 : 00C0 0000          
    7064/    8E78 : 23FC 001E 00A8      		move.l	#$1E00A8,(vdp_data_port).l
             8E7E : 00C0 0000          
    7065/    8E82 : 23FC 00A0 0F00      		move.l	#$A00F00,(vdp_data_port).l
             8E88 : 00C0 0000          
    7066/    8E8C : 23FC 0060 0110      		move.l	#$600110,(vdp_data_port).l
             8E92 : 00C0 0000          
    7067/    8E96 : 31FC 0000 D834      		move.w	#0,($FFFFD834).w
    7068/    8E9C : 31FC 0000 D836      		move.w	#0,($FFFFD836).w
    7069/    8EA2 : 21FC 0000 0EEE      		move.l	#cWhite,($FFFFD3E4).w
             8EA8 : D3E4             
    7070/    8EAA : 21FC 0000 0EEE      		move.l	#cWhite,($FFFFD404).w
             8EB0 : D404             
    7071/    8EB2 : 4EB8 0448           		jsr	(VDPSetup_01).w
    7072/    8EB6 : (MACRO)              		enable_ints
    7072/    8EB6 : 46FC 2300                           move    #$2300,sr
    7073/    8EBA : 5878 D824           		addq.w	#4,(v_subgamemode).w
    7074/    8EBE : 4E75                		rts
    7075/    8EC0 :                     ; ---------------------------------------------------------------------------
    7076/    8EC0 :                     
    7077/    8EC0 :                     LevelSelect_Main:
    7078/    8EC0 : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    7079/    8EC6 :                     
    7080/    8EC6 :                     .wait:
    7081/    8EC6 : 4A38 FFC9           		tst.b	(v_lagger).w
    7082/    8ECA : 6AFA                		bpl.s	.wait
    7083/    8ECC : 3038 C944           		move.w	($FFFFC944).w,d0
    7084/    8ED0 : D078 D834           		add.w	($FFFFD834).w,d0
    7085/    8ED4 : 6A02                		bpl.s	loc_8ED8
    7086/    8ED6 : 7000                		moveq	#0,d0
    7087/    8ED8 :                     
    7088/    8ED8 :                     loc_8ED8:
    7089/    8ED8 : 0C40 0009           		cmpi.w	#9,d0
    7090/    8EDC : 6302                		bls.s	loc_8EE0
    7091/    8EDE : 7009                		moveq	#9,d0
    7092/    8EE0 :                     
    7093/    8EE0 :                     loc_8EE0:
    7094/    8EE0 : 31C0 D834           		move.w	d0,($FFFFD834).w
    7095/    8EE4 : 3200                		move.w	d0,d1
    7096/    8EE6 : EB49                		lsl.w	#5,d1
    7097/    8EE8 : 0441 0090           		subi.w	#$90,d1
    7098/    8EEC : 31C1 D830           		move.w	d1,($FFFFD830).w
    7099/    8EF0 : 43FA 0338           		lea	MAPUNC_SelectMenu_2(pc),a1
    7100/    8EF4 : E948                		lsl.w	#4,d0
    7101/    8EF6 : D2C0                		adda.w	d0,a1
    7102/    8EF8 : 203C 6508 0003      		move.l	#$65080003,d0
    7103/    8EFE : 7207                		moveq	#7,d1
    7104/    8F00 : 7400                		moveq	#0,d2
    7105/    8F02 : 363C 0000           		move.w	#0,d3
    7106/    8F06 : 4EB8 08A2           		jsr	(MapScreen).w
    7107/    8F0A : 3238 D834           		move.w	($FFFFD834).w,d1
    7108/    8F0E : 0C41 0007           		cmpi.w	#7,d1
    7109/    8F12 : 6426                		bcc.s	loc_8F3A
    7110/    8F14 : 31FC 0100 D820      		move.w	#$100,($FFFFD820).w
    7111/    8F1A : 203C 6610 0003      		move.l	#$66100003,d0
    7112/    8F20 : 43FA 03A8           		lea	MAPUNC_SelectMenu_3(pc),a1
    7113/    8F24 : 720F                		moveq	#$F,d1
    7114/    8F26 : 7405                		moveq	#5,d2
    7115/    8F28 : 363C 0000           		move.w	#0,d3
    7116/    8F2C : 4EB8 08A2           		jsr	(MapScreen).w
    7117/    8F30 : 31FC 0080 D820      		move.w	#$80,($FFFFD820).w
    7118/    8F36 : 6000 0092           		bra.w	loc_8FCA
    7119/    8F3A :                     ; ---------------------------------------------------------------------------
    7120/    8F3A :                     
    7121/    8F3A :                     loc_8F3A:
    7122/    8F3A : 0C41 0009           		cmpi.w	#9,d1
    7123/    8F3E : 6444                		bcc.s	loc_8F84
    7124/    8F40 : 7000                		moveq	#0,d0
    7125/    8F42 : 23FC 6610 0003      		move.l	#$66100003,(vdp_control_port).l
             8F48 : 00C0 0004          
    7126/    8F4C : 323C 017F           		move.w	#$17F,d1
    7127/    8F50 :                     
    7128/    8F50 :                     loc_8F50:
    7129/    8F50 : 23C0 00C0 0000      		move.l	d0,(vdp_data_port).l
    7130/    8F56 : 51C9 FFF8           		dbf	d1,loc_8F50
    7131/    8F5A : 203C 6B10 0003      		move.l	#$6B100003,d0
    7132/    8F60 : 43FA 0408           		lea	MAPUNC_SelectMenu_4(pc),a1
    7133/    8F64 : 720F                		moveq	#$F,d1
    7134/    8F66 : 7400                		moveq	#0,d2
    7135/    8F68 : 363C 0000           		move.w	#0,d3
    7136/    8F6C : 4EB8 08A2           		jsr	(MapScreen).w
    7137/    8F70 : 203C 6A10 0003      		move.l	#$6A100003,d0
    7138/    8F76 : 720F                		moveq	#$F,d1
    7139/    8F78 : 7400                		moveq	#0,d2
    7140/    8F7A : 363C 0000           		move.w	#0,d3
    7141/    8F7E : 4EB8 08A2           		jsr	(MapScreen).w
    7142/    8F82 : 6046                		bra.s	loc_8FCA
    7143/    8F84 :                     ; ---------------------------------------------------------------------------
    7144/    8F84 :                     
    7145/    8F84 :                     loc_8F84:
    7146/    8F84 : 7000                		moveq	#0,d0
    7147/    8F86 : 23FC 6610 0003      		move.l	#$66100003,(vdp_control_port).l
             8F8C : 00C0 0004          
    7148/    8F90 : 323C 017F           		move.w	#$17F,d1
    7149/    8F94 :                     
    7150/    8F94 :                     loc_8F94:
    7151/    8F94 : 23C0 00C0 0000      		move.l	d0,(vdp_data_port).l
    7152/    8F9A : 51C9 FFF8           		dbf	d1,loc_8F94
    7153/    8F9E : 203C 6B10 0003      		move.l	#$6B100003,d0
    7154/    8FA4 : 43FA 0404           		lea	MAPUNC_SelectMenu_5(pc),a1
    7155/    8FA8 : 720F                		moveq	#$F,d1
    7156/    8FAA : 7400                		moveq	#0,d2
    7157/    8FAC : 363C 0000           		move.w	#0,d3
    7158/    8FB0 : 4EB8 08A2           		jsr	(MapScreen).w
    7159/    8FB4 : 6014                		bra.s	loc_8FCA
    7160/    8FB6 :                     ; ---------------------------------------------------------------------------
    7161/    8FB6 : 0005                word_8FB6:	dc.w 5
    7162/    8FB8 : 0005                		dc.w 5
    7163/    8FBA : 0005                		dc.w 5
    7164/    8FBC : 0005                		dc.w 5
    7165/    8FBE : 0005                		dc.w 5
    7166/    8FC0 : 0005                		dc.w 5
    7167/    8FC2 : 0005                		dc.w 5
    7168/    8FC4 : 0001                		dc.w 1
    7169/    8FC6 : 0001                		dc.w 1
    7170/    8FC8 : 0000                		dc.w 0
    7171/    8FCA :                     ; ---------------------------------------------------------------------------
    7172/    8FCA :                     
    7173/    8FCA :                     loc_8FCA:
    7174/    8FCA : 3238 D834           		move.w	($FFFFD834).w,d1
    7175/    8FCE : D241                		add.w	d1,d1
    7176/    8FD0 : 323B 10E4           		move.w	word_8FB6(pc,d1.w),d1
    7177/    8FD4 : 3038 C946           		move.w	($FFFFC946).w,d0
    7178/    8FD8 : 4440                		neg.w	d0
    7179/    8FDA : D078 D836           		add.w	($FFFFD836).w,d0
    7180/    8FDE : 6A02                		bpl.s	loc_8FE2
    7181/    8FE0 : 7000                		moveq	#0,d0
    7182/    8FE2 :                     
    7183/    8FE2 :                     loc_8FE2:
    7184/    8FE2 : B041                		cmp.w	d1,d0
    7185/    8FE4 : 6302                		bls.s	loc_8FE8
    7186/    8FE6 : 3001                		move.w	d1,d0
    7187/    8FE8 :                     
    7188/    8FE8 :                     loc_8FE8:
    7189/    8FE8 : 31C0 D836           		move.w	d0,($FFFFD836).w
    7190/    8FEC : E948                		lsl.w	#4,d0
    7191/    8FEE : 4440                		neg.w	d0
    7192/    8FF0 : 0640 0130           		addi.w	#$130,d0
    7193/    8FF4 : 31C0 D832           		move.w	d0,($FFFFD832).w
    7194/    8FF8 : 4A38 C93D           		tst.b	($FFFFC93D).w
    7195/    8FFC : 6B02                		bmi.s	LevelSelect_PlaySpecial
    7196/    8FFE : 4E75                		rts
    7197/    9000 :                     ; ---------------------------------------------------------------------------
    7198/    9000 :                     
    7199/    9000 :                     LevelSelect_PlaySpecial:
    7200/    9000 : 42B8 D824           		clr.l	(v_subgamemode).w
    7201/    9004 : 0C78 0009 D834      		cmpi.w	#9,($FFFFD834).w
    7202/    900A : 6608                		bne.s	LevelSelect_PlayField
    7203/    900C : 31FC 0020 D822      		move.w	#id_Null,(v_gamemode).w		; " "
    7204/    9012 : 4E75                		rts
    7205/    9014 :                     ; ---------------------------------------------------------------------------
    7206/    9014 :                     
    7207/    9014 :                     LevelSelect_PlayField:
    7208/    9014 : 4A78 D836           		tst.w	($FFFFD836).w
    7209/    9018 : 6608                		bne.s	LevelSelect_PlayLevel
    7210/    901A : 31FC 0010 D822      		move.w	#id_Field,(v_gamemode).w
    7211/    9020 : 4E75                		rts
    7212/    9022 :                     ; ---------------------------------------------------------------------------
    7213/    9022 :                     
    7214/    9022 :                     LevelSelect_PlayLevel:
    7215/    9022 : 3038 D836           		move.w	($FFFFD836).w,d0
    7216/    9026 : 0240 0003           		andi.w	#3,d0
    7217/    902A : 31C0 D83A           		move.w	d0,($FFFFD83A).w
    7218/    902E : 31FC 0001 D836      		move.w	#1,($FFFFD836).w
    7219/    9034 : 31FC 0018 D822      		move.w	#id_Level,(v_gamemode).w
    7220/    903A : 4E75                		rts
    7221/    903C :                     ; ---------------------------------------------------------------------------
    7222/    903C :                     
    7223/    903C :                     loc_903C:
    7224/    903C : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    7225/    9040 : 23FC 7C00 0003      		move.l	#$7C000003,(vdp_control_port).l
             9046 : 00C0 0004          
    7226/    904A : 3038 D830           		move.w	($FFFFD830).w,d0
    7227/    904E : 4440                		neg.w	d0
    7228/    9050 : 33C0 00C0 0000      		move.w	d0,(vdp_data_port).l
    7229/    9056 : 23FC 7800 0003      		move.l	#$78000003,(vdp_control_port).l
             905C : 00C0 0004          
    7230/    9060 : 33F8 D832 00C0      		move.w	($FFFFD832).w,(vdp_data_port).l
             9066 : 0000             
    7231/    9068 : 4EB8 096E           		jsr	(sub_96E).w
    7232/    906C : 1038 C93C           		move.b	($FFFFC93C).w,d0
    7233/    9070 : 6126                		bsr.s	sub_9098
    7234/    9072 : 31C1 C940           		move.w	d1,($FFFFC940).w
    7235/    9076 : 31C2 C942           		move.w	d2,($FFFFC942).w
    7236/    907A : 1038 C93D           		move.b	($FFFFC93D).w,d0
    7237/    907E : 6118                		bsr.s	sub_9098
    7238/    9080 : 31C1 C944           		move.w	d1,($FFFFC944).w
    7239/    9084 : 31C2 C946           		move.w	d2,($FFFFC946).w
    7240/    9088 : 4EB8 0448           		jsr	(VDPSetup_01).w
    7241/    908C : 0038 0080 FFC9      		ori.b	#$80,(v_lagger).w
    7242/    9092 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    7243/    9096 : 4E73                		rte
    7244/    9098 :                     
    7245/    9098 :                     ; =============== S U B	R O U T	I N E =======================================
    7246/    9098 :                     
    7247/    9098 :                     
    7248/    9098 :                     sub_9098:
    7249/    9098 : 7203                		moveq	#3,d1
    7250/    909A : C240                		and.w	d0,d1
    7251/    909C : E259                		ror.w	#1,d1
    7252/    909E : 48C1                		ext.l	d1
    7253/    90A0 : 3401                		move.w	d1,d2
    7254/    90A2 : 4841                		swap	d1
    7255/    90A4 : 8441                		or.w	d1,d2
    7256/    90A6 : 0240 000C           		andi.w	#$C,d0
    7257/    90AA : E658                		ror.w	#3,d0
    7258/    90AC : 48C0                		ext.l	d0
    7259/    90AE : 3200                		move.w	d0,d1
    7260/    90B0 : 4840                		swap	d0
    7261/    90B2 : 8240                		or.w	d0,d1
    7262/    90B4 : 4E75                		rts
    7263/    90B6 :                     ; End of function sub_9098
    7264/    90B6 :                     
    7265/    90B6 :                     ; ---------------------------------------------------------------------------
    7266/    90B6 :                     ARTNEM_MenuSelectorBorder:
    7267/    90B6 :                     		binclude	"artnem/Menu Select Border.bin" ; Selector art for Select Menu screen
    7268/    90EA : (MACRO)              		even
    7268/    90EA : =>TRUE                       if notZ80(MOMCPU)
    7268/    90EA : =>FALSE                              if (*)&1
    7268/    90EA :                                             dc.b 0                          ;ds.b 1
    7268/    90EA : [7268]                               endif
    7268/    90EA : =>FALSE                      else
    7268/    90EA :                                     if ($)&1
    7268/    90EA :                                             db 0
    7268/    90EA : [7268]                               endif
    7268/    90EA : [7268]                       endif
    7269/    90EA :                     MAPUNC_SelectMenu_1:
    7270/    90EA :                     		binclude	"Uncompressed/MapuncSelectMenu01.bin" ; Uncompressed mappings for the select menu (Top W? numbers that scroll)
    7271/    922A : (MACRO)              		even
    7271/    922A : =>TRUE                       if notZ80(MOMCPU)
    7271/    922A : =>FALSE                              if (*)&1
    7271/    922A :                                             dc.b 0                          ;ds.b 1
    7271/    922A : [7271]                               endif
    7271/    922A : =>FALSE                      else
    7271/    922A :                                     if ($)&1
    7271/    922A :                                             db 0
    7271/    922A : [7271]                               endif
    7271/    922A : [7271]                       endif
    7272/    922A :                     MAPUNC_SelectMenu_2:
    7273/    922A :                     		binclude	"Uncompressed/MapuncSelectMenu02.bin" ; Uncompressed mappings for the select menu (World ? words)
    7274/    92CA : (MACRO)              		even
    7274/    92CA : =>TRUE                       if notZ80(MOMCPU)
    7274/    92CA : =>FALSE                              if (*)&1
    7274/    92CA :                                             dc.b 0                          ;ds.b 1
    7274/    92CA : [7274]                               endif
    7274/    92CA : =>FALSE                      else
    7274/    92CA :                                     if ($)&1
    7274/    92CA :                                             db 0
    7274/    92CA : [7274]                               endif
    7274/    92CA : [7274]                       endif
    7275/    92CA :                     MAPUNC_SelectMenu_3:
    7276/    92CA :                     		binclude	"Uncompressed/MapuncSelectMenu03.bin" ; Uncompressed mappings for the select menu (Attraction	LV.? words)
    7277/    936A : (MACRO)              		even
    7277/    936A : =>TRUE                       if notZ80(MOMCPU)
    7277/    936A : =>FALSE                              if (*)&1
    7277/    936A :                                             dc.b 0                          ;ds.b 1
    7277/    936A : [7277]                               endif
    7277/    936A : =>FALSE                      else
    7277/    936A :                                     if ($)&1
    7277/    936A :                                             db 0
    7277/    936A : [7277]                               endif
    7277/    936A : [7277]                       endif
    7278/    936A :                     MAPUNC_SelectMenu_4:
    7279/    936A :                     		binclude	"Uncompressed/MapuncSelectMenu04.bin" ; Uncompressed mappings for the select menu (Field/Attraction words)
    7280/    93AA : (MACRO)              		even
    7280/    93AA : =>TRUE                       if notZ80(MOMCPU)
    7280/    93AA : =>FALSE                              if (*)&1
    7280/    93AA :                                             dc.b 0                          ;ds.b 1
    7280/    93AA : [7280]                               endif
    7280/    93AA : =>FALSE                      else
    7280/    93AA :                                     if ($)&1
    7280/    93AA :                                             db 0
    7280/    93AA : [7280]                               endif
    7280/    93AA : [7280]                       endif
    7281/    93AA :                     MAPUNC_SelectMenu_5:
    7282/    93AA :                     		binclude	"Uncompressed/MapuncSelectMenu05.bin" ; Uncompressed mappings for the select menu (Special Stage word)
    7283/    93CA : (MACRO)              		even
    7283/    93CA : =>TRUE                       if notZ80(MOMCPU)
    7283/    93CA : =>FALSE                              if (*)&1
    7283/    93CA :                                             dc.b 0                          ;ds.b 1
    7283/    93CA : [7283]                               endif
    7283/    93CA : =>FALSE                      else
    7283/    93CA :                                     if ($)&1
    7283/    93CA :                                             db 0
    7283/    93CA : [7283]                               endif
    7283/    93CA : [7283]                       endif
    7284/    93CA :                     ; ---------------------------------------------------------------------------
    7285/    93CA :                     
    7286/    93CA :                     UnkRet003:
    7287/    93CA : 4E75                		rts
    7288/    93CC :                     ; ---------------------------------------------------------------------------
    7289/    93CC :                     
    7290/    93CC :                     OptionSoundTest:
    7291/    93CC : 3038 D824           		move.w	(v_subgamemode).w,d0
    7292/    93D0 : 4EFB 0002           		jmp	.submodes(pc,d0.w)
    7293/    93D4 :                     ; ---------------------------------------------------------------------------
    7294/    93D4 :                     
    7295/    93D4 :                     .submodes:
    7296/    93D4 : 6000 0006           		bra.w	OptionSoundTest_Main
    7297/    93D8 :                     ; ---------------------------------------------------------------------------
    7298/    93D8 : 6000 0072           		bra.w	OptionSoundTest_Exit
    7299/    93DC :                     ; ---------------------------------------------------------------------------
    7300/    93DC :                     
    7301/    93DC :                     OptionSoundTest_Main:
    7302/    93DC : 4850                		pea	(a0)
    7303/    93DE : 41FA 00D4           		lea	loc_94B4(pc),a0
    7304/    93E2 : 21C8 C832           		move.l	a0,(v_vdpindex).w
    7305/    93E6 : 4CDF 0100           		movem.l	(sp)+,a0
    7306/    93EA : (MACRO)              		disable_ints
    7306/    93EA : 46FC 2700                           move    #$2700,sr
    7307/    93EE : 703F                		moveq	#$3F,d0
    7308/    93F0 : 723F                		moveq	#$3F,d1
    7309/    93F2 : 7400                		moveq	#0,d2
    7310/    93F4 : 363C C000           		move.w	#$C000,d3
    7311/    93F8 : 4EB8 086E           		jsr	(sub_86E).w
    7312/    93FC : 203C 4420 0003      		move.l	#$44200003,d0
    7313/    9402 : 43FA 003C           		lea	loc_9440(pc),a1
    7314/    9406 : 7205                		moveq	#5,d1
    7315/    9408 : 7400                		moveq	#0,d2
    7316/    940A : 363C 0000           		move.w	#0,d3
    7317/    940E : 4EB8 08A2           		jsr	(MapScreen).w
    7318/    9412 : 23FC 7800 0003      		move.l	#$78000003,(vdp_control_port).l
             9418 : 00C0 0004          
    7319/    941C : 23FC 0000 0000      		move.l	#0,(vdp_data_port).l
             9422 : 00C0 0000          
    7320/    9426 : 23FC 0000 0000      		move.l	#0,(vdp_data_port).l
             942C : 00C0 0000          
    7321/    9430 : 31FC 0080 D82A      		move.w	#$80,(v_menu_soundid).w
    7322/    9436 : (MACRO)              		enable_ints
    7322/    9436 : 46FC 2300                           move    #$2300,sr
    7323/    943A : 5878 D824           		addq.w	#4,(v_subgamemode).w
    7324/    943E : 4E75                		rts
    7325/    9440 :                     ; ---------------------------------------------------------------------------
    7326/    9440 : 002F                loc_9440:	dc.w $2F
    7327/    9442 : 0030                		dc.w $30
    7328/    9444 : 0034                		dc.w $34
    7329/    9446 : 0029                		dc.w $29
    7330/    9448 : 002F                		dc.w $2F
    7331/    944A : 002E                		dc.w $2E
    7332/    944C :                     ; ---------------------------------------------------------------------------
    7333/    944C :                     
    7334/    944C :                     OptionSoundTest_Exit:
    7335/    944C : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
    7336/    9452 :                     
    7337/    9452 :                     .wait:
    7338/    9452 : 4A38 FFC9           		tst.b	(v_lagger).w
    7339/    9456 : 6AFA                		bpl.s	.wait
    7340/    9458 : 3038 C944           		move.w	($FFFFC944).w,d0
    7341/    945C : D138 D82B           		add.b	d0,($FFFFD82B).w
    7342/    9460 : 3038 C946           		move.w	($FFFFC946).w,d0
    7343/    9464 : E948                		lsl.w	#4,d0
    7344/    9466 : D138 D82B           		add.b	d0,($FFFFD82B).w
    7345/    946A : (MACRO)              		disable_ints
    7345/    946A : 46FC 2700                           move    #$2700,sr
    7346/    946E : 3038 D82A           		move.w	(v_menu_soundid).w,d0
    7347/    9472 : 3238 D816           		move.w	($FFFFD816).w,d1
    7348/    9476 : 0641 0820           		addi.w	#$820,d1
    7349/    947A : 4EB9 0000 5090      		jsr	(sub_5090).l
    7350/    9480 : (MACRO)              		enable_ints
    7350/    9480 : 46FC 2300                           move    #$2300,sr
    7351/    9484 : 1038 C93D           		move.b	($FFFFC93D).w,d0
    7352/    9488 : 6A16                		bpl.s	loc_94A0
    7353/    948A : 103C 00E0           		move.b	#flg_FadeOut,d0
    7354/    948E : 4EB9 0000 6402      		jsr	(PlayMusic).l
    7355/    9494 : 31FC 0008 D822      		move.w	#id_Title,(v_gamemode).w
    7356/    949A : 42B8 D824           		clr.l	(v_subgamemode).w
    7357/    949E : 4E75                		rts
    7358/    94A0 :                     ; ---------------------------------------------------------------------------
    7359/    94A0 :                     
    7360/    94A0 :                     loc_94A0:
    7361/    94A0 : 0200 0070           		andi.b	#$70,d0
    7362/    94A4 : 6602                		bne.s	loc_94A8
    7363/    94A6 : 4E75                		rts
    7364/    94A8 :                     ; ---------------------------------------------------------------------------
    7365/    94A8 :                     
    7366/    94A8 :                     loc_94A8:
    7367/    94A8 : 3038 D82A           		move.w	(v_menu_soundid).w,d0
    7368/    94AC : 4EB9 0000 6402      		jsr	(PlayMusic).l
    7369/    94B2 : 4E75                		rts
    7370/    94B4 :                     ; ---------------------------------------------------------------------------
    7371/    94B4 :                     
    7372/    94B4 :                     loc_94B4:
    7373/    94B4 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    7374/    94B8 : 23FC 7800 0003      		move.l	#$78000003,(vdp_control_port).l
             94BE : 00C0 0004          
    7375/    94C2 : 33F8 D832 00C0      		move.w	($FFFFD832).w,(vdp_data_port).l
             94C8 : 0000             
    7376/    94CA : 4EB8 096E           		jsr	(sub_96E).w
    7377/    94CE : 1038 C93C           		move.b	($FFFFC93C).w,d0
    7378/    94D2 : 6122                		bsr.s	sub_94F6
    7379/    94D4 : 31C1 C940           		move.w	d1,($FFFFC940).w
    7380/    94D8 : 31C2 C942           		move.w	d2,($FFFFC942).w
    7381/    94DC : 1038 C93D           		move.b	($FFFFC93D).w,d0
    7382/    94E0 : 6114                		bsr.s	sub_94F6
    7383/    94E2 : 31C1 C944           		move.w	d1,($FFFFC944).w
    7384/    94E6 : 31C2 C946           		move.w	d2,($FFFFC946).w
    7385/    94EA : 0038 0080 FFC9      		ori.b	#$80,(v_lagger).w
    7386/    94F0 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    7387/    94F4 : 4E73                		rte
    7388/    94F6 :                     
    7389/    94F6 :                     ; =============== S U B	R O U T	I N E =======================================
    7390/    94F6 :                     
    7391/    94F6 :                     
    7392/    94F6 :                     sub_94F6:
    7393/    94F6 : 7203                		moveq	#3,d1
    7394/    94F8 : C240                		and.w	d0,d1
    7395/    94FA : E259                		ror.w	#1,d1
    7396/    94FC : 48C1                		ext.l	d1
    7397/    94FE : 3401                		move.w	d1,d2
    7398/    9500 : 4841                		swap	d1
    7399/    9502 : 8441                		or.w	d1,d2
    7400/    9504 : 0240 000C           		andi.w	#$C,d0
    7401/    9508 : E658                		ror.w	#3,d0
    7402/    950A : 48C0                		ext.l	d0
    7403/    950C : 3200                		move.w	d0,d1
    7404/    950E : 4840                		swap	d0
    7405/    9510 : 8240                		or.w	d0,d1
    7406/    9512 : 4E75                		rts
    7407/    9514 :                     ; End of function sub_94F6
    7408/    9514 :                     
    7409/    9514 :                     
    7410/    9514 :                     ; =============== S U B	R O U T	I N E =======================================
    7411/    9514 :                     
    7412/    9514 :                     
    7413/    9514 :                     sub_9514:
    7414/    9514 : 3038 D834           		move.w	($FFFFD834).w,d0
    7415/    9518 : E748                		lsl.w	#3,d0
    7416/    951A : D078 D836           		add.w	($FFFFD836).w,d0
    7417/    951E : D040                		add.w	d0,d0
    7418/    9520 : D040                		add.w	d0,d0
    7419/    9522 : 4EFB 0004           		jmp	loc_9528(pc,d0.w)
    7420/    9526 :                     ; End of function sub_9514
    7421/    9526 :                     
    7422/    9526 :                     ; ---------------------------------------------------------------------------
    7423/    9526 :                     
    7424/    9526 :                     locret_9526:
    7425/    9526 : 4E75                		rts
    7426/    9528 :                     ; ---------------------------------------------------------------------------
    7427/    9528 :                     
    7428/    9528 :                     loc_9528:
    7429/    9528 : 6000 FFFC           		bra.w	locret_9526
    7430/    952C :                     ; ---------------------------------------------------------------------------
    7431/    952C : 6000 013A           		bra.w	loc_9668
    7432/    9530 :                     ; ---------------------------------------------------------------------------
    7433/    9530 : 6000 034A           		bra.w	locret_987C
    7434/    9534 :                     ; ---------------------------------------------------------------------------
    7435/    9534 : 6000 0348           		bra.w	locret_987E
    7436/    9538 :                     ; ---------------------------------------------------------------------------
    7437/    9538 : 6000 0346           		bra.w	locret_9880
    7438/    953C :                     ; ---------------------------------------------------------------------------
    7439/    953C : 6000 0344           		bra.w	locret_9882
    7440/    9540 :                     ; ---------------------------------------------------------------------------
    7441/    9540 : 6000 FFE4           		bra.w	locret_9526
    7442/    9544 :                     ; ---------------------------------------------------------------------------
    7443/    9544 : 6000 FFE0           		bra.w	locret_9526
    7444/    9548 :                     ; ---------------------------------------------------------------------------
    7445/    9548 : 6000 FFDC           		bra.w	locret_9526
    7446/    954C :                     ; ---------------------------------------------------------------------------
    7447/    954C : 6000 0336           		bra.w	loc_9884
    7448/    9550 :                     ; ---------------------------------------------------------------------------
    7449/    9550 : 6000 068E           		bra.w	locret_9BE0
    7450/    9554 :                     ; ---------------------------------------------------------------------------
    7451/    9554 : 6000 068C           		bra.w	locret_9BE2
    7452/    9558 :                     ; ---------------------------------------------------------------------------
    7453/    9558 : 6000 068A           		bra.w	locret_9BE4
    7454/    955C :                     ; ---------------------------------------------------------------------------
    7455/    955C : 6000 0688           		bra.w	locret_9BE6
    7456/    9560 :                     ; ---------------------------------------------------------------------------
    7457/    9560 : 6000 FFC4           		bra.w	locret_9526
    7458/    9564 :                     ; ---------------------------------------------------------------------------
    7459/    9564 : 6000 FFC0           		bra.w	locret_9526
    7460/    9568 :                     ; ---------------------------------------------------------------------------
    7461/    9568 : 6000 FFBC           		bra.w	locret_9526
    7462/    956C :                     ; ---------------------------------------------------------------------------
    7463/    956C : 6000 067A           		bra.w	locret_9BE8
    7464/    9570 :                     ; ---------------------------------------------------------------------------
    7465/    9570 : 6000 0678           		bra.w	locret_9BEA
    7466/    9574 :                     ; ---------------------------------------------------------------------------
    7467/    9574 : 6000 0676           		bra.w	locret_9BEC
    7468/    9578 :                     ; ---------------------------------------------------------------------------
    7469/    9578 : 6000 0674           		bra.w	locret_9BEE
    7470/    957C :                     ; ---------------------------------------------------------------------------
    7471/    957C : 6000 0672           		bra.w	locret_9BF0
    7472/    9580 :                     ; ---------------------------------------------------------------------------
    7473/    9580 : 6000 FFA4           		bra.w	locret_9526
    7474/    9584 :                     ; ---------------------------------------------------------------------------
    7475/    9584 : 6000 FFA0           		bra.w	locret_9526
    7476/    9588 :                     ; ---------------------------------------------------------------------------
    7477/    9588 : 6000 FF9C           		bra.w	locret_9526
    7478/    958C :                     ; ---------------------------------------------------------------------------
    7479/    958C : 6000 0664           		bra.w	locret_9BF2
    7480/    9590 :                     ; ---------------------------------------------------------------------------
    7481/    9590 : 6000 0662           		bra.w	locret_9BF4
    7482/    9594 :                     ; ---------------------------------------------------------------------------
    7483/    9594 : 6000 0660           		bra.w	locret_9BF6
    7484/    9598 :                     ; ---------------------------------------------------------------------------
    7485/    9598 : 6000 065E           		bra.w	locret_9BF8
    7486/    959C :                     ; ---------------------------------------------------------------------------
    7487/    959C : 6000 065C           		bra.w	locret_9BFA
    7488/    95A0 :                     ; ---------------------------------------------------------------------------
    7489/    95A0 : 6000 FF84           		bra.w	locret_9526
    7490/    95A4 :                     ; ---------------------------------------------------------------------------
    7491/    95A4 : 6000 FF80           		bra.w	locret_9526
    7492/    95A8 :                     ; ---------------------------------------------------------------------------
    7493/    95A8 : 6000 FF7C           		bra.w	locret_9526
    7494/    95AC :                     ; ---------------------------------------------------------------------------
    7495/    95AC : 6000 064E           		bra.w	locret_9BFC
    7496/    95B0 :                     ; ---------------------------------------------------------------------------
    7497/    95B0 : 6000 064C           		bra.w	locret_9BFE
    7498/    95B4 :                     ; ---------------------------------------------------------------------------
    7499/    95B4 : 6000 064A           		bra.w	locret_9C00
    7500/    95B8 :                     ; ---------------------------------------------------------------------------
    7501/    95B8 : 6000 0648           		bra.w	locret_9C02
    7502/    95BC :                     ; ---------------------------------------------------------------------------
    7503/    95BC : 6000 0646           		bra.w	locret_9C04
    7504/    95C0 :                     ; ---------------------------------------------------------------------------
    7505/    95C0 : 6000 FF64           		bra.w	locret_9526
    7506/    95C4 :                     ; ---------------------------------------------------------------------------
    7507/    95C4 : 6000 FF60           		bra.w	locret_9526
    7508/    95C8 :                     ; ---------------------------------------------------------------------------
    7509/    95C8 : 6000 FF5C           		bra.w	locret_9526
    7510/    95CC :                     ; ---------------------------------------------------------------------------
    7511/    95CC : 6000 0638           		bra.w	locret_9C06
    7512/    95D0 :                     ; ---------------------------------------------------------------------------
    7513/    95D0 : 6000 0636           		bra.w	locret_9C08
    7514/    95D4 :                     ; ---------------------------------------------------------------------------
    7515/    95D4 : 6000 0634           		bra.w	locret_9C0A
    7516/    95D8 :                     ; ---------------------------------------------------------------------------
    7517/    95D8 : 6000 0632           		bra.w	locret_9C0C
    7518/    95DC :                     ; ---------------------------------------------------------------------------
    7519/    95DC : 6000 0630           		bra.w	locret_9C0E
    7520/    95E0 :                     ; ---------------------------------------------------------------------------
    7521/    95E0 : 6000 FF44           		bra.w	locret_9526
    7522/    95E4 :                     ; ---------------------------------------------------------------------------
    7523/    95E4 : 6000 FF40           		bra.w	locret_9526
    7524/    95E8 :                     ; ---------------------------------------------------------------------------
    7525/    95E8 : 6000 FF3C           		bra.w	locret_9526
    7526/    95EC :                     ; ---------------------------------------------------------------------------
    7527/    95EC : 6000 0622           		bra.w	locret_9C10
    7528/    95F0 :                     ; ---------------------------------------------------------------------------
    7529/    95F0 : 6000 0620           		bra.w	locret_9C12
    7530/    95F4 :                     ; ---------------------------------------------------------------------------
    7531/    95F4 : 6000 061E           		bra.w	locret_9C14
    7532/    95F8 :                     ; ---------------------------------------------------------------------------
    7533/    95F8 : 6000 061C           		bra.w	locret_9C16
    7534/    95FC :                     ; ---------------------------------------------------------------------------
    7535/    95FC : 6000 061A           		bra.w	locret_9C18
    7536/    9600 :                     ; ---------------------------------------------------------------------------
    7537/    9600 : 6000 FF24           		bra.w	locret_9526
    7538/    9604 :                     ; ---------------------------------------------------------------------------
    7539/    9604 : 6000 FF20           		bra.w	locret_9526
    7540/    9608 :                     ; ---------------------------------------------------------------------------
    7541/    9608 : 6000 FF1C           		bra.w	locret_9526
    7542/    960C :                     ; ---------------------------------------------------------------------------
    7543/    960C : 6000 060C           		bra.w	locret_9C1A
    7544/    9610 :                     ; ---------------------------------------------------------------------------
    7545/    9610 : 6000 FF14           		bra.w	locret_9526
    7546/    9614 :                     ; ---------------------------------------------------------------------------
    7547/    9614 : 6000 FF10           		bra.w	locret_9526
    7548/    9618 :                     ; ---------------------------------------------------------------------------
    7549/    9618 : 6000 FF0C           		bra.w	locret_9526
    7550/    961C :                     ; ---------------------------------------------------------------------------
    7551/    961C : 6000 FF08           		bra.w	locret_9526
    7552/    9620 :                     ; ---------------------------------------------------------------------------
    7553/    9620 : 6000 FF04           		bra.w	locret_9526
    7554/    9624 :                     ; ---------------------------------------------------------------------------
    7555/    9624 : 6000 FF00           		bra.w	locret_9526
    7556/    9628 :                     ; ---------------------------------------------------------------------------
    7557/    9628 : 6000 FEFC           		bra.w	locret_9526
    7558/    962C :                     ; ---------------------------------------------------------------------------
    7559/    962C : 6000 05EE           		bra.w	locret_9C1C
    7560/    9630 :                     ; ---------------------------------------------------------------------------
    7561/    9630 : 6000 FEF4           		bra.w	locret_9526
    7562/    9634 :                     ; ---------------------------------------------------------------------------
    7563/    9634 : 6000 FEF0           		bra.w	locret_9526
    7564/    9638 :                     ; ---------------------------------------------------------------------------
    7565/    9638 : 6000 FEEC           		bra.w	locret_9526
    7566/    963C :                     ; ---------------------------------------------------------------------------
    7567/    963C : 6000 FEE8           		bra.w	locret_9526
    7568/    9640 :                     ; ---------------------------------------------------------------------------
    7569/    9640 : 6000 FEE4           		bra.w	locret_9526
    7570/    9644 :                     ; ---------------------------------------------------------------------------
    7571/    9644 : 6000 FEE0           		bra.w	locret_9526
    7572/    9648 :                     ; ---------------------------------------------------------------------------
    7573/    9648 : 6000 FEDC           		bra.w	locret_9526
    7574/    964C :                     ; ---------------------------------------------------------------------------
    7575/    964C : 6000 05D0           		bra.w	locret_9C1E
    7576/    9650 :                     ; ---------------------------------------------------------------------------
    7577/    9650 : 6000 FED4           		bra.w	locret_9526
    7578/    9654 :                     ; ---------------------------------------------------------------------------
    7579/    9654 : 6000 FED0           		bra.w	locret_9526
    7580/    9658 :                     ; ---------------------------------------------------------------------------
    7581/    9658 : 6000 FECC           		bra.w	locret_9526
    7582/    965C :                     ; ---------------------------------------------------------------------------
    7583/    965C : 6000 FEC8           		bra.w	locret_9526
    7584/    9660 :                     ; ---------------------------------------------------------------------------
    7585/    9660 : 6000 FEC4           		bra.w	locret_9526
    7586/    9664 :                     ; ---------------------------------------------------------------------------
    7587/    9664 : 6000 FEC0           		bra.w	locret_9526
    7588/    9668 :                     ; ---------------------------------------------------------------------------
    7589/    9668 :                     
    7590/    9668 :                     loc_9668:
    7591/    9668 : 3038 D82C           		move.w	($FFFFD82C).w,d0
    7592/    966C : 4EFB 0002           		jmp	loc_9670(pc,d0.w)
    7593/    9670 :                     ; ---------------------------------------------------------------------------
    7594/    9670 :                     
    7595/    9670 :                     loc_9670:
    7596/    9670 : 6000 000A           		bra.w	loc_967C
    7597/    9674 :                     ; ---------------------------------------------------------------------------
    7598/    9674 : 6000 00AA           		bra.w	loc_9720
    7599/    9678 :                     ; ---------------------------------------------------------------------------
    7600/    9678 : 6000 00B0           		bra.w	loc_972A
    7601/    967C :                     ; ---------------------------------------------------------------------------
    7602/    967C :                     
    7603/    967C :                     loc_967C:
    7604/    967C : (MACRO)              		disable_ints
    7604/    967C : 46FC 2700                           move    #$2700,sr
    7605/    9680 : 43F8 C9DE           		lea	($FFFFC9DE).w,a1
    7606/    9684 : 337C 0104 001E      		move.w	#$104,$1E(a1)
    7607/    968A : 41FA 05DC           		lea	PAL_SpeedSliderZone(pc),a0
    7608/    968E : 45F8 D424           		lea	($FFFFD424).w,a2
    7609/    9692 : 6100 07DA           		bsr.w	sub_9E6E
    7610/    9696 : 41FA 0590           		lea	loc_9C28(pc),a0
    7611/    969A : 45F8 D816           		lea	($FFFFD816).w,a2
    7612/    969E : 6100 07E4           		bsr.w	sub_9E84
    7613/    96A2 : 2049                		movea.l	a1,a0
    7614/    96A4 : 45FA 057A           		lea	SSZ_ArtLocs(pc),a2
    7615/    96A8 : 6100 0686           		bsr.w	sub_9D30
    7616/    96AC : 41F8 C9DE           		lea	($FFFFC9DE).w,a0
    7617/    96B0 : 217C 00FF 0D08      		move.l	#v_128x128&$FFFFFF,$28(a0)
             96B6 : 0028             
    7618/    96B8 : 45FA 0580           		lea	SSZ_MapFGLocs(pc),a2
    7619/    96BC : 6100 06A4           		bsr.w	DecEniMapLocs
    7620/    96C0 : 21C9 CA46           		move.l	a1,($FFFFCA46).w
    7621/    96C4 : 6100 06DC           		bsr.w	sub_9DA2
    7622/    96C8 : 41FA 0580           		lea	loc_9C4A(pc),a0
    7623/    96CC : 43F8 CA1E           		lea	($FFFFCA1E).w,a1
    7624/    96D0 : 337C 0104 001E      		move.w	#$104,$1E(a1)
    7625/    96D6 : 45F8 D818           		lea	($FFFFD818).w,a2
    7626/    96DA : 6100 07A8           		bsr.w	sub_9E84
    7627/    96DE : 2049                		movea.l	a1,a0
    7628/    96E0 : 45FA 057A           		lea	SSZ_MapBGLocs(pc),a2
    7629/    96E4 : 6100 067C           		bsr.w	DecEniMapLocs
    7630/    96E8 : 21C9 FBC0           		move.l	a1,($FFFFFBC0).w
    7631/    96EC : 2248                		movea.l	a0,a1
    7632/    96EE : 47F9 00FF 0B84      		lea	(unk_0B84&$FFFFFF).l,a3
    7633/    96F4 : 49F9 00FF 0C86      		lea	(unk_0C86&$FFFFFF).l,a4
    7634/    96FA : 4279 00FF 0A00      		clr.w	(unk_0A00&$FFFFFF).l
    7635/    9700 : 4279 00FF 0B02      		clr.w	(unk_0B02&$FFFFFF).l
    7636/    9706 : 4279 00FF 0B84      		clr.w	(unk_0B84&$FFFFFF).l
    7637/    970C : 4279 00FF 0C86      		clr.w	(unk_0C86&$FFFFFF).l
    7638/    9712 : 6100 06B2           		bsr.w	sub_9DC6
    7639/    9716 : (MACRO)              		enable_ints
    7639/    9716 : 46FC 2300                           move    #$2300,sr
    7640/    971A : 5878 D82C           		addq.w	#4,($FFFFD82C).w
    7641/    971E : 4E75                		rts
    7642/    9720 :                     ; ---------------------------------------------------------------------------
    7643/    9720 :                     
    7644/    9720 :                     loc_9720:
    7645/    9720 : 4EB9 0000 F538      		jsr	(sub_F538).l
    7646/    9726 : 5878 D82C           		addq.w	#4,($FFFFD82C).w
    7647/    972A :                     
    7648/    972A :                     loc_972A:
    7649/    972A : 3078 D862           		movea.w	($FFFFD862).w,a0
    7650/    972E : 43F8 C9DE           		lea	($FFFFC9DE).w,a1
    7651/    9732 : 47F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a3
    7652/    9738 : 49F9 00FF 0B02      		lea	(unk_0B02&$FFFFFF).l,a4
    7653/    973E : 6100 07B8           		bsr.w	sub_9EF8
    7654/    9742 : 6100 07F6           		bsr.w	sub_9F3A
    7655/    9746 : 6100 06B6           		bsr.w	sub_9DFE
    7656/    974A : 3078 D862           		movea.w	($FFFFD862).w,a0
    7657/    974E : 43F8 CA1E           		lea	($FFFFCA1E).w,a1
    7658/    9752 : 47F9 00FF 0B84      		lea	(unk_0B84&$FFFFFF).l,a3
    7659/    9758 : 49F9 00FF 0C86      		lea	(unk_0C86&$FFFFFF).l,a4
    7660/    975E : 6154                		bsr.s	sub_97B4
    7661/    9760 : 6100 069C           		bsr.w	sub_9DFE
    7662/    9764 : 4E75                		rts
    7663/    9766 :                     ; ---------------------------------------------------------------------------
    7664/    9766 : (MACRO)              		_move.w	0(a1),d0
    7664/    9766 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    7664/    9766 : =>FALSE                        if (chkop("0(a1)","0("))
    7664/    9766 :                                       if (chkop("d0","0("))
    7664/    9766 :                                             !move.w   0(a1),d0
    7664/    9766 :                                       else
    7664/    9766 :                                             !move.w   0(a1),1+d0
    7664/    9766 :                                             !org    *-1
    7664/    9766 :                                             !dc.b   0
    7664/    9766 : [7664]                                 endif
    7664/    9766 : =>TRUE                         else
    7664/    9766 : =>FALSE                              if chkop("d0","d")
    7664/    9766 :                                       if (chkop("d0","0("))
    7664/    9766 :                     start:
    7664/    9766 :                                             !move.w   1+0(a1),d0
    7664/    9766 :                     end:
    7664/    9766 :                                             !org    start+3
    7664/    9766 :                                             !dc.b   0
    7664/    9766 :                                             !org    end
    7664/    9766 :                                       else
    7664/    9766 :                                             !move.w   1+0(a1),1+d0
    7664/    9766 :                                             !org    *-3
    7664/    9766 :                                             !dc.b   0
    7664/    9766 :                                             !org    *+1
    7664/    9766 :                                             !dc.b   0
    7664/    9766 : [7664]                                 endif
    7664/    9766 : =>TRUE                               else
    7664/    9766 : 3029 0001                                   !move.w   1+0(a1),d0
    7664/    9769 :                                             !org    *-1
    7664/    9769 : 00                                          !dc.b   0
    7664/    976A : [7664]                               endif
    7664/    976A : [7664]                         endif
    7665/    976A : 3340 0002           		move.w	d0,2(a1)
    7666/    976E : 3238 D830           		move.w	($FFFFD830).w,d1
    7667/    9772 : 9240                		sub.w	d0,d1
    7668/    9774 : 6D0C                		blt.s	loc_9782
    7669/    9776 : 0C41 0010           		cmpi.w	#$10,d1
    7670/    977A : 6F10                		ble.s	loc_978C
    7671/    977C : 323C 0010           		move.w	#$10,d1
    7672/    9780 : 600A                		bra.s	loc_978C
    7673/    9782 :                     ; ---------------------------------------------------------------------------
    7674/    9782 :                     
    7675/    9782 :                     loc_9782:
    7676/    9782 : 0C41 FFF0           		cmpi.w	#$FFF0,d1
    7677/    9786 : 6E04                		bgt.s	loc_978C
    7678/    9788 : 323C FFF0           		move.w	#$FFF0,d1
    7679/    978C :                     
    7680/    978C :                     loc_978C:
    7681/    978C : D041                		add.w	d1,d0
    7682/    978E : 3200                		move.w	d0,d1
    7683/    9790 : 3429 0008           		move.w	8(a1),d2
    7684/    9794 : 0642 013F           		addi.w	#$13F,d2
    7685/    9798 : C242                		and.w	d2,d1
    7686/    979A : (MACRO)              		_move.w	d1,0(a1)
    7686/    979A :  (MACRO-2)                           insn2op move.w, d1,0(a1)
    7686/    979A : =>TRUE                         if (chkop("d1","0("))
    7686/    979A : =>FALSE                                if (chkop("0(a1)","0("))
    7686/    979A :                                             !move.w   d1,0(a1)
    7686/    979A : =>TRUE                                 else
    7686/    979A : 3341 0001                                   !move.w   d1,1+0(a1)
    7686/    979D :                                             !org    *-1
    7686/    979D : 00                                          !dc.b   0
    7686/    979E : [7686]                                 endif
    7686/    979E : =>FALSE                        else
    7686/    979E :                                     if chkop("0(a1)","d")
    7686/    979E :                                       if (chkop("0(a1)","0("))
    7686/    979E :                     start:
    7686/    979E :                                             !move.w   1+d1,0(a1)
    7686/    979E :                     end:
    7686/    979E :                                             !org    start+3
    7686/    979E :                                             !dc.b   0
    7686/    979E :                                             !org    end
    7686/    979E :                                       else
    7686/    979E :                                             !move.w   1+d1,1+0(a1)
    7686/    979E :                                             !org    *-3
    7686/    979E :                                             !dc.b   0
    7686/    979E :                                             !org    *+1
    7686/    979E :                                             !dc.b   0
    7686/    979E : [7686]                                 endif
    7686/    979E :                                     else
    7686/    979E :                                             !move.w   1+d1,0(a1)
    7686/    979E :                                             !org    *-1
    7686/    979E :                                             !dc.b   0
    7686/    979E : [7686]                               endif
    7686/    979E : [7686]                         endif
    7687/    979E : 3229 0008           		move.w	8(a1),d1
    7688/    97A2 : B041                		cmp.w	d1,d0
    7689/    97A4 : 6E08                		bgt.s	loc_97AE
    7690/    97A6 : 3229 000A           		move.w	$A(a1),d1
    7691/    97AA : B041                		cmp.w	d1,d0
    7692/    97AC : 6E04                		bgt.s	locret_97B2
    7693/    97AE :                     
    7694/    97AE :                     loc_97AE:
    7695/    97AE : (MACRO)              		_move.w	d1,0(a1)
    7695/    97AE :  (MACRO-2)                           insn2op move.w, d1,0(a1)
    7695/    97AE : =>TRUE                         if (chkop("d1","0("))
    7695/    97AE : =>FALSE                                if (chkop("0(a1)","0("))
    7695/    97AE :                                             !move.w   d1,0(a1)
    7695/    97AE : =>TRUE                                 else
    7695/    97AE : 3341 0001                                   !move.w   d1,1+0(a1)
    7695/    97B1 :                                             !org    *-1
    7695/    97B1 : 00                                          !dc.b   0
    7695/    97B2 : [7695]                                 endif
    7695/    97B2 : =>FALSE                        else
    7695/    97B2 :                                     if chkop("0(a1)","d")
    7695/    97B2 :                                       if (chkop("0(a1)","0("))
    7695/    97B2 :                     start:
    7695/    97B2 :                                             !move.w   1+d1,0(a1)
    7695/    97B2 :                     end:
    7695/    97B2 :                                             !org    start+3
    7695/    97B2 :                                             !dc.b   0
    7695/    97B2 :                                             !org    end
    7695/    97B2 :                                       else
    7695/    97B2 :                                             !move.w   1+d1,1+0(a1)
    7695/    97B2 :                                             !org    *-3
    7695/    97B2 :                                             !dc.b   0
    7695/    97B2 :                                             !org    *+1
    7695/    97B2 :                                             !dc.b   0
    7695/    97B2 : [7695]                                 endif
    7695/    97B2 :                                     else
    7695/    97B2 :                                             !move.w   1+d1,0(a1)
    7695/    97B2 :                                             !org    *-1
    7695/    97B2 :                                             !dc.b   0
    7695/    97B2 : [7695]                               endif
    7695/    97B2 : [7695]                         endif
    7696/    97B2 :                     
    7697/    97B2 :                     locret_97B2:
    7698/    97B2 : 4E75                		rts
    7699/    97B4 :                     
    7700/    97B4 :                     ; =============== S U B	R O U T	I N E =======================================
    7701/    97B4 :                     
    7702/    97B4 :                     
    7703/    97B4 :                     sub_97B4:
    7704/    97B4 : 3029 0010           		move.w	$10(a1),d0
    7705/    97B8 : 3340 0012           		move.w	d0,$12(a1)
    7706/    97BC : 3228 000C           		move.w	$C(a0),d1
    7707/    97C0 : 0441 0080           		subi.w	#$80,d1
    7708/    97C4 : C2FC 0002           		mulu.w	#2,d1
    7709/    97C8 : 48C1                		ext.l	d1
    7710/    97CA : 82FC 0005           		divu.w	#5,d1
    7711/    97CE : 3341 0010           		move.w	d1,$10(a1)
    7712/    97D2 : 3029 000C           		move.w	$C(a1),d0
    7713/    97D6 : B240                		cmp.w	d0,d1
    7714/    97D8 : 6E08                		bgt.s	loc_97E2
    7715/    97DA : 3029 000E           		move.w	$E(a1),d0
    7716/    97DE : B240                		cmp.w	d0,d1
    7717/    97E0 : 6E04                		bgt.s	locret_97E6
    7718/    97E2 :                     
    7719/    97E2 :                     loc_97E2:
    7720/    97E2 : 3340 0010           		move.w	d0,$10(a1)
    7721/    97E6 :                     
    7722/    97E6 :                     locret_97E6:
    7723/    97E6 : 4E75                		rts
    7724/    97E8 :                     ; End of function sub_97B4
    7725/    97E8 :                     
    7726/    97E8 :                     ; ---------------------------------------------------------------------------
    7727/    97E8 : 45F8 CA5E           		lea	($FFFFCA5E).w,a2
    7728/    97EC : 4278 FBC8           		clr.w	($FFFFFBC8).w
    7729/    97F0 : 3638 C9DE           		move.w	($FFFFC9DE).w,d3
    7730/    97F4 : 4443                		neg.w	d3
    7731/    97F6 : 5678 FBC4           		addq.w	#3,($FFFFFBC4).w
    7732/    97FA : 3438 FBC4           		move.w	($FFFFFBC4).w,d2
    7733/    97FE : 3E3C 006F           		move.w	#$6F,d7
    7734/    9802 : 3029 0010           		move.w	$10(a1),d0
    7735/    9806 : 3200                		move.w	d0,d1
    7736/    9808 : 0241 0001           		andi.w	#1,d1
    7737/    980C : 6638                		bne.s	loc_9846
    7738/    980E :                     
    7739/    980E :                     loc_980E:
    7740/    980E : 4EB8 3F14           		jsr	(CalcSine).w
    7741/    9812 : 34C3                		move.w	d3,(a2)+
    7742/    9814 : E049                		lsr.w	#8,d1
    7743/    9816 : 4881                		ext.w	d1
    7744/    9818 : 4441                		neg.w	d1
    7745/    981A : 34C1                		move.w	d1,(a2)+
    7746/    981C : 34C3                		move.w	d3,(a2)+
    7747/    981E : 4441                		neg.w	d1
    7748/    9820 : 34C1                		move.w	d1,(a2)+
    7749/    9822 : 06B8 0000 1000      		addi.l	#$1000,($FFFFFBC8).w
             9828 : FBC8             
    7750/    982A : 9478 FBC8           		sub.w	($FFFFFBC8).w,d2
    7751/    982E : 51CF FFDE           		dbf	d7,loc_980E
    7752/    9832 : 203C FFFF CA5E      		move.l	#$FFFFCA5E,d0
    7753/    9838 : 3238 D81C           		move.w	($FFFFD81C).w,d1
    7754/    983C : 343C 01C0           		move.w	#$1C0,d2
    7755/    9840 : 4EB8 0568           		jsr	(sub_568).w
    7756/    9844 : 4E75                		rts
    7757/    9846 :                     ; ---------------------------------------------------------------------------
    7758/    9846 :                     
    7759/    9846 :                     loc_9846:
    7760/    9846 : 4EB8 3F14           		jsr	(CalcSine).w
    7761/    984A : 34C3                		move.w	d3,(a2)+
    7762/    984C : E049                		lsr.w	#8,d1
    7763/    984E : 4881                		ext.w	d1
    7764/    9850 : 34C1                		move.w	d1,(a2)+
    7765/    9852 : 34C3                		move.w	d3,(a2)+
    7766/    9854 : 4441                		neg.w	d1
    7767/    9856 : 34C1                		move.w	d1,(a2)+
    7768/    9858 : 06B8 0000 1000      		addi.l	#$1000,($FFFFFBC8).w
             985E : FBC8             
    7769/    9860 : 9478 FBC8           		sub.w	($FFFFFBC8).w,d2
    7770/    9864 : 51CF FFE0           		dbf	d7,loc_9846
    7771/    9868 : 203C FFFF CA5E      		move.l	#$FFFFCA5E,d0
    7772/    986E : 3238 D81C           		move.w	($FFFFD81C).w,d1
    7773/    9872 : 343C 01C0           		move.w	#$1C0,d2
    7774/    9876 : 4EB8 0568           		jsr	(sub_568).w
    7775/    987A : 4E75                		rts
    7776/    987C :                     ; ---------------------------------------------------------------------------
    7777/    987C :                     
    7778/    987C :                     locret_987C:
    7779/    987C : 4E75                		rts
    7780/    987E :                     ; ---------------------------------------------------------------------------
    7781/    987E :                     
    7782/    987E :                     locret_987E:
    7783/    987E : 4E75                		rts
    7784/    9880 :                     ; ---------------------------------------------------------------------------
    7785/    9880 :                     
    7786/    9880 :                     locret_9880:
    7787/    9880 : 4E75                		rts
    7788/    9882 :                     ; ---------------------------------------------------------------------------
    7789/    9882 :                     
    7790/    9882 :                     locret_9882:
    7791/    9882 : 4E75                		rts
    7792/    9884 :                     ; ---------------------------------------------------------------------------
    7793/    9884 :                     
    7794/    9884 :                     loc_9884:
    7795/    9884 : 3038 D82C           		move.w	($FFFFD82C).w,d0
    7796/    9888 : 4EFB 0002           		jmp	loc_988C(pc,d0.w)
    7797/    988C :                     ; ---------------------------------------------------------------------------
    7798/    988C :                     
    7799/    988C :                     loc_988C:
    7800/    988C : 6000 000A           		bra.w	loc_9898
    7801/    9890 :                     ; ---------------------------------------------------------------------------
    7802/    9890 : 6000 008C           		bra.w	loc_991E
    7803/    9894 :                     ; ---------------------------------------------------------------------------
    7804/    9894 : 6000 0092           		bra.w	loc_9928
    7805/    9898 :                     ; ---------------------------------------------------------------------------
    7806/    9898 :                     
    7807/    9898 :                     loc_9898:
    7808/    9898 : (MACRO)              		disable_ints
    7808/    9898 : 46FC 2700                           move    #$2700,sr
    7809/    989C : 43F8 C9DE           		lea	($FFFFC9DE).w,a1
    7810/    98A0 : 41FA 044E           		lea	PAL_TechnoTowerZoneUnused(pc),a0
    7811/    98A4 : 45F8 D424           		lea	($FFFFD424).w,a2
    7812/    98A8 : 6100 05C4           		bsr.w	sub_9E6E
    7813/    98AC : 41FA 0402           		lea	loc_9CB0(pc),a0
    7814/    98B0 : 45F8 D816           		lea	($FFFFD816).w,a2
    7815/    98B4 : 6100 05CE           		bsr.w	sub_9E84
    7816/    98B8 : 2049                		movea.l	a1,a0
    7817/    98BA : 45FA 03EC           		lea	TTZ_ArtLocs(pc),a2
    7818/    98BE : 6100 0470           		bsr.w	sub_9D30
    7819/    98C2 : 41F8 C9DE           		lea	($FFFFC9DE).w,a0
    7820/    98C6 : 217C 00FF 0D08      		move.l	#v_128x128&$FFFFFF,$28(a0)
             98CC : 0028             
    7821/    98CE : 45FA 03F2           		lea	TTZ_MapFGLocs(pc),a2
    7822/    98D2 : 6100 048E           		bsr.w	DecEniMapLocs
    7823/    98D6 : 21C9 CA46           		move.l	a1,($FFFFCA46).w
    7824/    98DA : 6100 04C6           		bsr.w	sub_9DA2
    7825/    98DE : 41FA 03F2           		lea	loc_9CD2(pc),a0
    7826/    98E2 : 43F8 CA1E           		lea	($FFFFCA1E).w,a1
    7827/    98E6 : 337C 0104 001E      		move.w	#$104,$1E(a1)
    7828/    98EC : 45F8 D818           		lea	($FFFFD818).w,a2
    7829/    98F0 : 6100 0592           		bsr.w	sub_9E84
    7830/    98F4 : 2049                		movea.l	a1,a0
    7831/    98F6 : 45FA 03EC           		lea	TTZ_MapBGLocs(pc),a2
    7832/    98FA : 6100 0466           		bsr.w	DecEniMapLocs
    7833/    98FE : 21C9 FBC0           		move.l	a1,($FFFFFBC0).w
    7834/    9902 : 2248                		movea.l	a0,a1
    7835/    9904 : 47F9 00FF 0B84      		lea	(unk_0B84&$FFFFFF).l,a3
    7836/    990A : 49F9 00FF 0C86      		lea	(unk_0C86&$FFFFFF).l,a4
    7837/    9910 : 6100 04B4           		bsr.w	sub_9DC6
    7838/    9914 : (MACRO)              		enable_ints
    7838/    9914 : 46FC 2300                           move    #$2300,sr
    7839/    9918 : 5878 D82C           		addq.w	#4,($FFFFD82C).w
    7840/    991C : 4E75                		rts
    7841/    991E :                     ; ---------------------------------------------------------------------------
    7842/    991E :                     
    7843/    991E :                     loc_991E:
    7844/    991E : 4EB9 0000 F538      		jsr	(sub_F538).l
    7845/    9924 : 5878 D82C           		addq.w	#4,($FFFFD82C).w
    7846/    9928 :                     
    7847/    9928 :                     loc_9928:
    7848/    9928 : 3078 D862           		movea.w	($FFFFD862).w,a0
    7849/    992C : 43F8 C9DE           		lea	($FFFFC9DE).w,a1
    7850/    9930 : 47F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a3
    7851/    9936 : 49F9 00FF 0B02      		lea	(unk_0B02&$FFFFFF).l,a4
    7852/    993C : 6100 05BA           		bsr.w	sub_9EF8
    7853/    9940 : 6100 05F8           		bsr.w	sub_9F3A
    7854/    9944 : 6100 04B8           		bsr.w	sub_9DFE
    7855/    9948 : 3078 D862           		movea.w	($FFFFD862).w,a0
    7856/    994C : 43F8 CA1E           		lea	($FFFFCA1E).w,a1
    7857/    9950 : 47F9 00FF 0B84      		lea	(unk_0B84&$FFFFFF).l,a3
    7858/    9956 : 49F9 00FF 0C86      		lea	(unk_0C86&$FFFFFF).l,a4
    7859/    995C : 610C                		bsr.s	sub_996A
    7860/    995E : 6100 05DA           		bsr.w	sub_9F3A
    7861/    9962 : 4EB9 0000 9DFE      		jsr	(sub_9DFE).l
    7862/    9968 : 4E75                		rts
    7863/    996A :                     
    7864/    996A :                     ; =============== S U B	R O U T	I N E =======================================
    7865/    996A :                     
    7866/    996A :                     
    7867/    996A :                     sub_996A:
    7868/    996A : 7200                		moveq	#0,d1
    7869/    996C : (MACRO)              		_move.w	0(a1),d0
    7869/    996C :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    7869/    996C : =>FALSE                        if (chkop("0(a1)","0("))
    7869/    996C :                                       if (chkop("d0","0("))
    7869/    996C :                                             !move.w   0(a1),d0
    7869/    996C :                                       else
    7869/    996C :                                             !move.w   0(a1),1+d0
    7869/    996C :                                             !org    *-1
    7869/    996C :                                             !dc.b   0
    7869/    996C : [7869]                                 endif
    7869/    996C : =>TRUE                         else
    7869/    996C : =>FALSE                              if chkop("d0","d")
    7869/    996C :                                       if (chkop("d0","0("))
    7869/    996C :                     start:
    7869/    996C :                                             !move.w   1+0(a1),d0
    7869/    996C :                     end:
    7869/    996C :                                             !org    start+3
    7869/    996C :                                             !dc.b   0
    7869/    996C :                                             !org    end
    7869/    996C :                                       else
    7869/    996C :                                             !move.w   1+0(a1),1+d0
    7869/    996C :                                             !org    *-3
    7869/    996C :                                             !dc.b   0
    7869/    996C :                                             !org    *+1
    7869/    996C :                                             !dc.b   0
    7869/    996C : [7869]                                 endif
    7869/    996C : =>TRUE                               else
    7869/    996C : 3029 0001                                   !move.w   1+0(a1),d0
    7869/    996F :                                             !org    *-1
    7869/    996F : 00                                          !dc.b   0
    7869/    9970 : [7869]                               endif
    7869/    9970 : [7869]                         endif
    7870/    9970 : 3340 0002           		move.w	d0,2(a1)
    7871/    9974 : 3238 D830           		move.w	($FFFFD830).w,d1
    7872/    9978 : C2FC 0013           		mulu.w	#$13,d1
    7873/    997C : 82FC 001B           		divu.w	#$1B,d1
    7874/    9980 : (MACRO)              		_move.w	d1,0(a1)
    7874/    9980 :  (MACRO-2)                           insn2op move.w, d1,0(a1)
    7874/    9980 : =>TRUE                         if (chkop("d1","0("))
    7874/    9980 : =>FALSE                                if (chkop("0(a1)","0("))
    7874/    9980 :                                             !move.w   d1,0(a1)
    7874/    9980 : =>TRUE                                 else
    7874/    9980 : 3341 0001                                   !move.w   d1,1+0(a1)
    7874/    9983 :                                             !org    *-1
    7874/    9983 : 00                                          !dc.b   0
    7874/    9984 : [7874]                                 endif
    7874/    9984 : =>FALSE                        else
    7874/    9984 :                                     if chkop("0(a1)","d")
    7874/    9984 :                                       if (chkop("0(a1)","0("))
    7874/    9984 :                     start:
    7874/    9984 :                                             !move.w   1+d1,0(a1)
    7874/    9984 :                     end:
    7874/    9984 :                                             !org    start+3
    7874/    9984 :                                             !dc.b   0
    7874/    9984 :                                             !org    end
    7874/    9984 :                                       else
    7874/    9984 :                                             !move.w   1+d1,1+0(a1)
    7874/    9984 :                                             !org    *-3
    7874/    9984 :                                             !dc.b   0
    7874/    9984 :                                             !org    *+1
    7874/    9984 :                                             !dc.b   0
    7874/    9984 : [7874]                                 endif
    7874/    9984 :                                     else
    7874/    9984 :                                             !move.w   1+d1,0(a1)
    7874/    9984 :                                             !org    *-1
    7874/    9984 :                                             !dc.b   0
    7874/    9984 : [7874]                               endif
    7874/    9984 : [7874]                         endif
    7875/    9984 : 3029 0008           		move.w	8(a1),d0
    7876/    9988 : B240                		cmp.w	d0,d1
    7877/    998A : 6E08                		bgt.s	loc_9994
    7878/    998C : 3029 000A           		move.w	$A(a1),d0
    7879/    9990 : B240                		cmp.w	d0,d1
    7880/    9992 : 6E04                		bgt.s	locret_9998
    7881/    9994 :                     
    7882/    9994 :                     loc_9994:
    7883/    9994 : (MACRO)              		_move.w	d0,0(a1)
    7883/    9994 :  (MACRO-2)                           insn2op move.w, d0,0(a1)
    7883/    9994 : =>TRUE                         if (chkop("d0","0("))
    7883/    9994 : =>FALSE                                if (chkop("0(a1)","0("))
    7883/    9994 :                                             !move.w   d0,0(a1)
    7883/    9994 : =>TRUE                                 else
    7883/    9994 : 3340 0001                                   !move.w   d0,1+0(a1)
    7883/    9997 :                                             !org    *-1
    7883/    9997 : 00                                          !dc.b   0
    7883/    9998 : [7883]                                 endif
    7883/    9998 : =>FALSE                        else
    7883/    9998 :                                     if chkop("0(a1)","d")
    7883/    9998 :                                       if (chkop("0(a1)","0("))
    7883/    9998 :                     start:
    7883/    9998 :                                             !move.w   1+d0,0(a1)
    7883/    9998 :                     end:
    7883/    9998 :                                             !org    start+3
    7883/    9998 :                                             !dc.b   0
    7883/    9998 :                                             !org    end
    7883/    9998 :                                       else
    7883/    9998 :                                             !move.w   1+d0,1+0(a1)
    7883/    9998 :                                             !org    *-3
    7883/    9998 :                                             !dc.b   0
    7883/    9998 :                                             !org    *+1
    7883/    9998 :                                             !dc.b   0
    7883/    9998 : [7883]                                 endif
    7883/    9998 :                                     else
    7883/    9998 :                                             !move.w   1+d0,0(a1)
    7883/    9998 :                                             !org    *-1
    7883/    9998 :                                             !dc.b   0
    7883/    9998 : [7883]                               endif
    7883/    9998 : [7883]                         endif
    7884/    9998 :                     
    7885/    9998 :                     locret_9998:
    7886/    9998 : 4E75                		rts
    7887/    999A :                     ; End of function sub_996A
    7888/    999A :                     
    7889/    999A :                     ; ---------------------------------------------------------------------------
    7890/    999A : 7000                		moveq	#0,d0
    7891/    999C : 3038 C9EE           		move.w	($FFFFC9EE).w,d0
    7892/    99A0 : 3238 C9F0           		move.w	($FFFFC9F0).w,d1
    7893/    99A4 : 3400                		move.w	d0,d2
    7894/    99A6 : 9041                		sub.w	d1,d0
    7895/    99A8 : 6722                		beq.s	loc_99CC
    7896/    99AA : 4840                		swap	d0
    7897/    99AC : 2200                		move.l	d0,d1
    7898/    99AE : E288                		lsr.l	#1,d0
    7899/    99B0 : D1B8 FBC4           		add.l	d0,($FFFFFBC4).w
    7900/    99B4 : 2001                		move.l	d1,d0
    7901/    99B6 : E488                		lsr.l	#2,d0
    7902/    99B8 : D1B8 FBC8           		add.l	d0,($FFFFFBC8).w
    7903/    99BC : 2001                		move.l	d1,d0
    7904/    99BE : E688                		lsr.l	#3,d0
    7905/    99C0 : D1B8 FBCC           		add.l	d0,($FFFFFBCC).w
    7906/    99C4 : 2001                		move.l	d1,d0
    7907/    99C6 : E888                		lsr.l	#4,d0
    7908/    99C8 : D1B8 FBD0           		add.l	d0,($FFFFFBD0).w
    7909/    99CC :                     
    7910/    99CC :                     loc_99CC:
    7911/    99CC : 45F8 CDDE           		lea	($FFFFCDDE).w,a2
    7912/    99D0 : (MACRO)              		_move.w	0(a1),d1
    7912/    99D0 :  (MACRO-2)                           insn2op move.w, 0(a1),d1
    7912/    99D0 : =>FALSE                        if (chkop("0(a1)","0("))
    7912/    99D0 :                                       if (chkop("d1","0("))
    7912/    99D0 :                                             !move.w   0(a1),d1
    7912/    99D0 :                                       else
    7912/    99D0 :                                             !move.w   0(a1),1+d1
    7912/    99D0 :                                             !org    *-1
    7912/    99D0 :                                             !dc.b   0
    7912/    99D0 : [7912]                                 endif
    7912/    99D0 : =>TRUE                         else
    7912/    99D0 : =>FALSE                              if chkop("d1","d")
    7912/    99D0 :                                       if (chkop("d1","0("))
    7912/    99D0 :                     start:
    7912/    99D0 :                                             !move.w   1+0(a1),d1
    7912/    99D0 :                     end:
    7912/    99D0 :                                             !org    start+3
    7912/    99D0 :                                             !dc.b   0
    7912/    99D0 :                                             !org    end
    7912/    99D0 :                                       else
    7912/    99D0 :                                             !move.w   1+0(a1),1+d1
    7912/    99D0 :                                             !org    *-3
    7912/    99D0 :                                             !dc.b   0
    7912/    99D0 :                                             !org    *+1
    7912/    99D0 :                                             !dc.b   0
    7912/    99D0 : [7912]                                 endif
    7912/    99D0 : =>TRUE                               else
    7912/    99D0 : 3229 0001                                   !move.w   1+0(a1),d1
    7912/    99D3 :                                             !org    *-1
    7912/    99D3 : 00                                          !dc.b   0
    7912/    99D4 : [7912]                               endif
    7912/    99D4 : [7912]                         endif
    7913/    99D4 : 0641 000F           		addi.w	#$F,d1
    7914/    99D8 : E449                		lsr.w	#2,d1
    7915/    99DA : 0241 FFFC           		andi.w	#$FFFC,d1
    7916/    99DE : 47FB 1010           		lea	dword_99F0(pc,d1.w),a3
    7917/    99E2 : 7E13                		moveq	#$13,d7
    7918/    99E4 :                     
    7919/    99E4 :                     loc_99E4:
    7920/    99E4 : 34C2                		move.w	d2,(a2)+
    7921/    99E6 : 285B                		movea.l	(a3)+,a4
    7922/    99E8 : 34D4                		move.w	(a4),(a2)+
    7923/    99EA : 51CF FFF8           		dbf	d7,loc_99E4
    7924/    99EE : 4E75                		rts
    7925/    99F0 :                     ; ---------------------------------------------------------------------------
    7926/    99F0 :                     ; A table of RAM adresses
    7927/    99F0 :                     ; ---------------------------------------------------------------------------
    7928/    99F0 : FFFF FBC4           dword_99F0:	dc.l $FFFFFBC4
    7929/    99F4 : FFFF FBC4           		dc.l $FFFFFBC4
    7930/    99F8 : FFFF FBC4           		dc.l $FFFFFBC4
    7931/    99FC : FFFF FBC4           		dc.l $FFFFFBC4
    7932/    9A00 : FFFF FBC4           		dc.l $FFFFFBC4
    7933/    9A04 : FFFF FBC4           		dc.l $FFFFFBC4
    7934/    9A08 : FFFF FBC4           		dc.l $FFFFFBC4
    7935/    9A0C : FFFF FBC4           		dc.l $FFFFFBC4
    7936/    9A10 : FFFF FBC8           		dc.l $FFFFFBC8
    7937/    9A14 : FFFF FBC8           		dc.l $FFFFFBC8
    7938/    9A18 : FFFF FBC8           		dc.l $FFFFFBC8
    7939/    9A1C : FFFF FBC8           		dc.l $FFFFFBC8
    7940/    9A20 : FFFF FBCC           		dc.l $FFFFFBCC
    7941/    9A24 : FFFF FBCC           		dc.l $FFFFFBCC
    7942/    9A28 : FFFF FBD0           		dc.l $FFFFFBD0
    7943/    9A2C : FFFF FBD0           		dc.l $FFFFFBD0
    7944/    9A30 : FFFF FBD8           		dc.l $FFFFFBD8
    7945/    9A34 : FFFF FBD8           		dc.l $FFFFFBD8
    7946/    9A38 : FFFF FBD8           		dc.l $FFFFFBD8
    7947/    9A3C : FFFF FBD8           		dc.l $FFFFFBD8
    7948/    9A40 : FFFF FBD8           		dc.l $FFFFFBD8
    7949/    9A44 : FFFF FBD8           		dc.l $FFFFFBD8
    7950/    9A48 : FFFF FBD8           		dc.l $FFFFFBD8
    7951/    9A4C : FFFF FBD8           		dc.l $FFFFFBD8
    7952/    9A50 : FFFF FBD0           		dc.l $FFFFFBD0
    7953/    9A54 : FFFF FBD0           		dc.l $FFFFFBD0
    7954/    9A58 : FFFF FBCC           		dc.l $FFFFFBCC
    7955/    9A5C : FFFF FBCC           		dc.l $FFFFFBCC
    7956/    9A60 : FFFF FBC8           		dc.l $FFFFFBC8
    7957/    9A64 : FFFF FBC8           		dc.l $FFFFFBC8
    7958/    9A68 : FFFF FBC8           		dc.l $FFFFFBC8
    7959/    9A6C : FFFF FBC8           		dc.l $FFFFFBC8
    7960/    9A70 : FFFF FBC4           		dc.l $FFFFFBC4
    7961/    9A74 : FFFF FBC4           		dc.l $FFFFFBC4
    7962/    9A78 : FFFF FBC4           		dc.l $FFFFFBC4
    7963/    9A7C : FFFF FBC4           		dc.l $FFFFFBC4
    7964/    9A80 : FFFF FBC4           		dc.l $FFFFFBC4
    7965/    9A84 : FFFF FBC4           		dc.l $FFFFFBC4
    7966/    9A88 : FFFF FBC4           		dc.l $FFFFFBC4
    7967/    9A8C : FFFF FBC4           		dc.l $FFFFFBC4
    7968/    9A90 : FFFF FBC4           		dc.l $FFFFFBC4
    7969/    9A94 : FFFF FBC4           		dc.l $FFFFFBC4
    7970/    9A98 : FFFF FBC4           		dc.l $FFFFFBC4
    7971/    9A9C : FFFF FBC4           		dc.l $FFFFFBC4
    7972/    9AA0 : FFFF FBC4           		dc.l $FFFFFBC4
    7973/    9AA4 : FFFF FBC4           		dc.l $FFFFFBC4
    7974/    9AA8 : FFFF FBC4           		dc.l $FFFFFBC4
    7975/    9AAC : FFFF FBC4           		dc.l $FFFFFBC4
    7976/    9AB0 : FFFF FBC4           		dc.l $FFFFFBC4
    7977/    9AB4 : FFFF FBC4           		dc.l $FFFFFBC4
    7978/    9AB8 : FFFF FBC4           		dc.l $FFFFFBC4
    7979/    9ABC : FFFF FBC4           		dc.l $FFFFFBC4
    7980/    9AC0 : FFFF FBC4           		dc.l $FFFFFBC4
    7981/    9AC4 : FFFF FBC4           		dc.l $FFFFFBC4
    7982/    9AC8 : FFFF FBC4           		dc.l $FFFFFBC4
    7983/    9ACC : FFFF FBC4           		dc.l $FFFFFBC4
    7984/    9AD0 : FFFF FBC4           		dc.l $FFFFFBC4
    7985/    9AD4 : FFFF FBC4           		dc.l $FFFFFBC4
    7986/    9AD8 : FFFF FBC4           		dc.l $FFFFFBC4
    7987/    9ADC : FFFF FBC4           		dc.l $FFFFFBC4
    7988/    9AE0 : FFFF FBC4           		dc.l $FFFFFBC4
    7989/    9AE4 : FFFF FBC4           		dc.l $FFFFFBC4
    7990/    9AE8 : FFFF FBC4           		dc.l $FFFFFBC4
    7991/    9AEC : FFFF FBC4           		dc.l $FFFFFBC4
    7992/    9AF0 : FFFF FBC8           		dc.l $FFFFFBC8
    7993/    9AF4 : FFFF FBC8           		dc.l $FFFFFBC8
    7994/    9AF8 : FFFF FBC8           		dc.l $FFFFFBC8
    7995/    9AFC : FFFF FBC8           		dc.l $FFFFFBC8
    7996/    9B00 : FFFF FBCC           		dc.l $FFFFFBCC
    7997/    9B04 : FFFF FBCC           		dc.l $FFFFFBCC
    7998/    9B08 : FFFF FBD0           		dc.l $FFFFFBD0
    7999/    9B0C : FFFF FBD0           		dc.l $FFFFFBD0
    8000/    9B10 : FFFF FBD8           		dc.l $FFFFFBD8
    8001/    9B14 : FFFF FBD8           		dc.l $FFFFFBD8
    8002/    9B18 : FFFF FBD8           		dc.l $FFFFFBD8
    8003/    9B1C : FFFF FBD8           		dc.l $FFFFFBD8
    8004/    9B20 : FFFF FBD8           		dc.l $FFFFFBD8
    8005/    9B24 : FFFF FBD8           		dc.l $FFFFFBD8
    8006/    9B28 : FFFF FBD8           		dc.l $FFFFFBD8
    8007/    9B2C : FFFF FBD8           		dc.l $FFFFFBD8
    8008/    9B30 : FFFF FBD0           		dc.l $FFFFFBD0
    8009/    9B34 : FFFF FBD0           		dc.l $FFFFFBD0
    8010/    9B38 : FFFF FBCC           		dc.l $FFFFFBCC
    8011/    9B3C : FFFF FBCC           		dc.l $FFFFFBCC
    8012/    9B40 : FFFF FBC8           		dc.l $FFFFFBC8
    8013/    9B44 : FFFF FBC8           		dc.l $FFFFFBC8
    8014/    9B48 : FFFF FBC8           		dc.l $FFFFFBC8
    8015/    9B4C : FFFF FBC8           		dc.l $FFFFFBC8
    8016/    9B50 : FFFF FBC4           		dc.l $FFFFFBC4
    8017/    9B54 : FFFF FBC4           		dc.l $FFFFFBC4
    8018/    9B58 : FFFF FBC4           		dc.l $FFFFFBC4
    8019/    9B5C : FFFF FBC4           		dc.l $FFFFFBC4
    8020/    9B60 : FFFF FBC4           		dc.l $FFFFFBC4
    8021/    9B64 : FFFF FBC4           		dc.l $FFFFFBC4
    8022/    9B68 : FFFF FBC4           		dc.l $FFFFFBC4
    8023/    9B6C : FFFF FBC4           		dc.l $FFFFFBC4
    8024/    9B70 :                     ; ---------------------------------------------------------------------------
    8025/    9B70 : 0C78 0D60 C9EE      		cmpi.w	#$D60,($FFFFC9EE).w
    8026/    9B76 : 6408                		bcc.s	loc_9B80
    8027/    9B78 : 31FC 010C C9FC      		move.w	#$10C,($FFFFC9FC).w
    8028/    9B7E : 605E                		bra.s	locret_9BDE
    8029/    9B80 :                     ; ---------------------------------------------------------------------------
    8030/    9B80 :                     
    8031/    9B80 :                     loc_9B80:
    8032/    9B80 : 31FC 0114 C9FC      		move.w	#$114,($FFFFC9FC).w
    8033/    9B86 : 47F8 CA5E           		lea	($FFFFCA5E).w,a3
    8034/    9B8A : 3638 C9DE           		move.w	($FFFFC9DE).w,d3
    8035/    9B8E : 4443                		neg.w	d3
    8036/    9B90 : 3838 CA1E           		move.w	($FFFFCA1E).w,d4
    8037/    9B94 : 4444                		neg.w	d4
    8038/    9B96 : 7E1B                		moveq	#$1B,d7
    8039/    9B98 : 3438 CA1C           		move.w	($FFFFCA1C).w,d2
    8040/    9B9C : 5242                		addq.w	#1,d2
    8041/    9B9E : 31C2 CA1C           		move.w	d2,($FFFFCA1C).w
    8042/    9BA2 :                     
    8043/    9BA2 :                     loc_9BA2:
    8044/    9BA2 : 7C06                		moveq	#6,d6
    8045/    9BA4 :                     
    8046/    9BA4 :                     loc_9BA4:
    8047/    9BA4 : 5242                		addq.w	#1,d2
    8048/    9BA6 : 4EB8 3F14           		jsr	(CalcSine).w
    8049/    9BAA : 0240 0003           		andi.w	#3,d0
    8050/    9BAE : D043                		add.w	d3,d0
    8051/    9BB0 : 36C0                		move.w	d0,(a3)+
    8052/    9BB2 : 36C4                		move.w	d4,(a3)+
    8053/    9BB4 : 51CE FFEE           		dbf	d6,loc_9BA4
    8054/    9BB8 : 5842                		addq.w	#4,d2
    8055/    9BBA : 4EB8 3F14           		jsr	(CalcSine).w
    8056/    9BBE : 0240 0004           		andi.w	#4,d0
    8057/    9BC2 : D043                		add.w	d3,d0
    8058/    9BC4 : 36C0                		move.w	d0,(a3)+
    8059/    9BC6 : 36C4                		move.w	d4,(a3)+
    8060/    9BC8 : 51CF FFD8           		dbf	d7,loc_9BA2
    8061/    9BCC : 203C FFFF CA5E      		move.l	#$FFFFCA5E,d0
    8062/    9BD2 : 3238 D81C           		move.w	($FFFFD81C).w,d1
    8063/    9BD6 : 343C 01C0           		move.w	#$1C0,d2
    8064/    9BDA : 4EB8 0568           		jsr	(sub_568).w
    8065/    9BDE :                     
    8066/    9BDE :                     locret_9BDE:
    8067/    9BDE : 4E75                		rts
    8068/    9BE0 :                     ; ---------------------------------------------------------------------------
    8069/    9BE0 :                     
    8070/    9BE0 :                     locret_9BE0:
    8071/    9BE0 : 4E75                		rts
    8072/    9BE2 :                     ; ---------------------------------------------------------------------------
    8073/    9BE2 :                     
    8074/    9BE2 :                     locret_9BE2:
    8075/    9BE2 : 4E75                		rts
    8076/    9BE4 :                     ; ---------------------------------------------------------------------------
    8077/    9BE4 :                     
    8078/    9BE4 :                     locret_9BE4:
    8079/    9BE4 : 4E75                		rts
    8080/    9BE6 :                     ; ---------------------------------------------------------------------------
    8081/    9BE6 :                     
    8082/    9BE6 :                     locret_9BE6:
    8083/    9BE6 : 4E75                		rts
    8084/    9BE8 :                     ; ---------------------------------------------------------------------------
    8085/    9BE8 :                     
    8086/    9BE8 :                     locret_9BE8:
    8087/    9BE8 : 4E75                		rts
    8088/    9BEA :                     ; ---------------------------------------------------------------------------
    8089/    9BEA :                     
    8090/    9BEA :                     locret_9BEA:
    8091/    9BEA : 4E75                		rts
    8092/    9BEC :                     ; ---------------------------------------------------------------------------
    8093/    9BEC :                     
    8094/    9BEC :                     locret_9BEC:
    8095/    9BEC : 4E75                		rts
    8096/    9BEE :                     ; ---------------------------------------------------------------------------
    8097/    9BEE :                     
    8098/    9BEE :                     locret_9BEE:
    8099/    9BEE : 4E75                		rts
    8100/    9BF0 :                     ; ---------------------------------------------------------------------------
    8101/    9BF0 :                     
    8102/    9BF0 :                     locret_9BF0:
    8103/    9BF0 : 4E75                		rts
    8104/    9BF2 :                     ; ---------------------------------------------------------------------------
    8105/    9BF2 :                     
    8106/    9BF2 :                     locret_9BF2:
    8107/    9BF2 : 4E75                		rts
    8108/    9BF4 :                     ; ---------------------------------------------------------------------------
    8109/    9BF4 :                     
    8110/    9BF4 :                     locret_9BF4:
    8111/    9BF4 : 4E75                		rts
    8112/    9BF6 :                     ; ---------------------------------------------------------------------------
    8113/    9BF6 :                     
    8114/    9BF6 :                     locret_9BF6:
    8115/    9BF6 : 4E75                		rts
    8116/    9BF8 :                     ; ---------------------------------------------------------------------------
    8117/    9BF8 :                     
    8118/    9BF8 :                     locret_9BF8:
    8119/    9BF8 : 4E75                		rts
    8120/    9BFA :                     ; ---------------------------------------------------------------------------
    8121/    9BFA :                     
    8122/    9BFA :                     locret_9BFA:
    8123/    9BFA : 4E75                		rts
    8124/    9BFC :                     ; ---------------------------------------------------------------------------
    8125/    9BFC :                     
    8126/    9BFC :                     locret_9BFC:
    8127/    9BFC : 4E75                		rts
    8128/    9BFE :                     ; ---------------------------------------------------------------------------
    8129/    9BFE :                     
    8130/    9BFE :                     locret_9BFE:
    8131/    9BFE : 4E75                		rts
    8132/    9C00 :                     ; ---------------------------------------------------------------------------
    8133/    9C00 :                     
    8134/    9C00 :                     locret_9C00:
    8135/    9C00 : 4E75                		rts
    8136/    9C02 :                     ; ---------------------------------------------------------------------------
    8137/    9C02 :                     
    8138/    9C02 :                     locret_9C02:
    8139/    9C02 : 4E75                		rts
    8140/    9C04 :                     ; ---------------------------------------------------------------------------
    8141/    9C04 :                     
    8142/    9C04 :                     locret_9C04:
    8143/    9C04 : 4E75                		rts
    8144/    9C06 :                     ; ---------------------------------------------------------------------------
    8145/    9C06 :                     
    8146/    9C06 :                     locret_9C06:
    8147/    9C06 : 4E75                		rts
    8148/    9C08 :                     ; ---------------------------------------------------------------------------
    8149/    9C08 :                     
    8150/    9C08 :                     locret_9C08:
    8151/    9C08 : 4E75                		rts
    8152/    9C0A :                     ; ---------------------------------------------------------------------------
    8153/    9C0A :                     
    8154/    9C0A :                     locret_9C0A:
    8155/    9C0A : 4E75                		rts
    8156/    9C0C :                     ; ---------------------------------------------------------------------------
    8157/    9C0C :                     
    8158/    9C0C :                     locret_9C0C:
    8159/    9C0C : 4E75                		rts
    8160/    9C0E :                     ; ---------------------------------------------------------------------------
    8161/    9C0E :                     
    8162/    9C0E :                     locret_9C0E:
    8163/    9C0E : 4E75                		rts
    8164/    9C10 :                     ; ---------------------------------------------------------------------------
    8165/    9C10 :                     
    8166/    9C10 :                     locret_9C10:
    8167/    9C10 : 4E75                		rts
    8168/    9C12 :                     ; ---------------------------------------------------------------------------
    8169/    9C12 :                     
    8170/    9C12 :                     locret_9C12:
    8171/    9C12 : 4E75                		rts
    8172/    9C14 :                     ; ---------------------------------------------------------------------------
    8173/    9C14 :                     
    8174/    9C14 :                     locret_9C14:
    8175/    9C14 : 4E75                		rts
    8176/    9C16 :                     ; ---------------------------------------------------------------------------
    8177/    9C16 :                     
    8178/    9C16 :                     locret_9C16:
    8179/    9C16 : 4E75                		rts
    8180/    9C18 :                     ; ---------------------------------------------------------------------------
    8181/    9C18 :                     
    8182/    9C18 :                     locret_9C18:
    8183/    9C18 : 4E75                		rts
    8184/    9C1A :                     ; ---------------------------------------------------------------------------
    8185/    9C1A :                     
    8186/    9C1A :                     locret_9C1A:
    8187/    9C1A : 4E75                		rts
    8188/    9C1C :                     ; ---------------------------------------------------------------------------
    8189/    9C1C :                     
    8190/    9C1C :                     locret_9C1C:
    8191/    9C1C : 4E75                		rts
    8192/    9C1E :                     ; ---------------------------------------------------------------------------
    8193/    9C1E :                     
    8194/    9C1E :                     locret_9C1E:
    8195/    9C1E : 4E75                		rts
    8196/    9C20 :                     ; ---------------------------------------------------------------------------
    8197/    9C20 : 0003 0EE2           SSZ_ArtLocs:	dc.l ARTNEM_SSZ8x8_FG
    8198/    9C24 : 0003 9B1E           		dc.l ARTNEM_SSZ8x8_BG
    8199/    9C28 : 00                  loc_9C28:	dc.b   0
    8200/    9C29 : 00                  		dc.b   0
    8201/    9C2A : 00                  		dc.b   0
    8202/    9C2B : D0                  		dc.b $D0				; �
    8203/    9C2C : 80                  		dc.b $80				; �
    8204/    9C2D : 10                  		dc.b $10
    8205/    9C2E : 80                  		dc.b $80				; �
    8206/    9C2F : 0C                  		dc.b  $C
    8207/    9C30 : 00                  		dc.b   0
    8208/    9C31 : 40                  		dc.b $40				; @
    8209/    9C32 : 7E                  		dc.b $7E				; ~
    8210/    9C33 : C0                  		dc.b $C0				; �
    8211/    9C34 : 00                  		dc.b   0
    8212/    9C35 : 00                  		dc.b   0
    8213/    9C36 : 05                  		dc.b   5
    8214/    9C37 : 20                  		dc.b $20
    8215/    9C38 : 00                  		dc.b   0
    8216/    9C39 : 00                  		dc.b   0
    8217/    9C3A : 0003 452C           SSZ_MapFGLocs:	dc.l MAPENI_SSZ16x16_FG
    8218/    9C3E : 0003 5762           		dc.l MAPENI_SSZ128x128_FG
    8219/    9C42 : 0003 9086           		dc.l MAPENI_SSZLayout_FG
    8220/    9C46 : 0003 931E           		dc.l COL_SSZPrimary
    8221/    9C4A : 00                  loc_9C4A:	dc.b   0
    8222/    9C4B : 00                  		dc.b   0
    8223/    9C4C : 00                  		dc.b   0
    8224/    9C4D : 54                  		dc.b $54				; T
    8225/    9C4E : 04                  		dc.b   4
    8226/    9C4F : 08                  		dc.b   8
    8227/    9C50 : 04                  		dc.b   4
    8228/    9C51 : 06                  		dc.b   6
    8229/    9C52 : 03                  		dc.b   3
    8230/    9C53 : 33                  		dc.b $33				; 3
    8231/    9C54 : 00                  		dc.b   0
    8232/    9C55 : C0                  		dc.b $C0				; �
    8233/    9C56 : 00                  		dc.b   0
    8234/    9C57 : 00                  		dc.b   0
    8235/    9C58 : 02                  		dc.b   2
    8236/    9C59 : 20                  		dc.b $20
    8237/    9C5A : 00                  		dc.b   0
    8238/    9C5B : 00                  		dc.b   0
    8239/    9C5C : 0003 A5FE           SSZ_MapBGLocs:	dc.l MAPENI_SSZ16x16_BG
    8240/    9C60 : 0003 A6E8           		dc.l MAPENI_SSZ128x128_BG
    8241/    9C64 : 0003 A7B8           		dc.l MAPENI_SSZLayout_BG
    8242/    9C68 :                     PAL_SpeedSliderZone:
    8243/    9C68 :                     		binclude	"Palettes/PalSpeedSliderZone.bin"
    8244/    9CA8 : (MACRO)              		even
    8244/    9CA8 : =>TRUE                       if notZ80(MOMCPU)
    8244/    9CA8 : =>FALSE                              if (*)&1
    8244/    9CA8 :                                             dc.b 0                          ;ds.b 1
    8244/    9CA8 : [8244]                               endif
    8244/    9CA8 : =>FALSE                      else
    8244/    9CA8 :                                     if ($)&1
    8244/    9CA8 :                                             db 0
    8244/    9CA8 : [8244]                               endif
    8244/    9CA8 : [8244]                       endif
    8245/    9CA8 : 0003 A7CE           TTZ_ArtLocs:	dc.l ARTNEM_TTZ8x8_FG
    8246/    9CAC : 0003 F6C4           		dc.l ARTNEM_TTZ8x8_BG
    8247/    9CB0 : 00                  loc_9CB0:	dc.b   0
    8248/    9CB1 : 15                  		dc.b $15
    8249/    9CB2 : 0D                  		dc.b  $D
    8250/    9CB3 : E0                  		dc.b $E0				; �
    8251/    9CB4 : 10                  		dc.b $10
    8252/    9CB5 : 20                  		dc.b $20
    8253/    9CB6 : 10                  		dc.b $10
    8254/    9CB7 : 20                  		dc.b $20
    8255/    9CB8 : 00                  		dc.b   0
    8256/    9CB9 : 40                  		dc.b $40				; @
    8257/    9CBA : 06                  		dc.b   6
    8258/    9CBB : C0                  		dc.b $C0				; �
    8259/    9CBC : 00                  		dc.b   0
    8260/    9CBD : 00                  		dc.b   0
    8261/    9CBE : 0F                  		dc.b  $F
    8262/    9CBF : 20                  		dc.b $20
    8263/    9CC0 : 00                  		dc.b   0
    8264/    9CC1 : 00                  		dc.b   0
    8265/    9CC2 : 0003 BB24           TTZ_MapFGLocs:	dc.l MAPENI_TTZ16x16_FG
    8266/    9CC6 : 0003 C60A           		dc.l MAPENI_TTZ128x128_FG
    8267/    9CCA : 0003 ED12           		dc.l MAPENI_TTZLayout_FG
    8268/    9CCE : 0003 EEC4           		dc.l COL_TTZPrimary
    8269/    9CD2 : 00                  loc_9CD2:	dc.b   0
    8270/    9CD3 : 30                  		dc.b $30				; 0
    8271/    9CD4 : 0A                  		dc.b  $A
    8272/    9CD5 : 60                  		dc.b $60				; `
    8273/    9CD6 : 10                  		dc.b $10
    8274/    9CD7 : 20                  		dc.b $20
    8275/    9CD8 : 0C                  		dc.b  $C
    8276/    9CD9 : 18                  		dc.b $18
    8277/    9CDA : 01                  		dc.b   1
    8278/    9CDB : 6F                  		dc.b $6F				; o
    8279/    9CDC : 04                  		dc.b   4
    8280/    9CDD : C0                  		dc.b $C0				; �
    8281/    9CDE : 00                  		dc.b   0
    8282/    9CDF : 00                  		dc.b   0
    8283/    9CE0 : 0B                  		dc.b  $B
    8284/    9CE1 : 20                  		dc.b $20
    8285/    9CE2 : 00                  		dc.b   0
    8286/    9CE3 : 00                  		dc.b   0
    8287/    9CE4 : 0004 09E2           TTZ_MapBGLocs:	dc.l MAPENI_TTZ16x16_BG
    8288/    9CE8 : 0004 108C           		dc.l MAPENI_TTZ128x128_BG
    8289/    9CEC : 0004 183E           		dc.l MAPENI_TTZLayout_BG
    8290/    9CF0 :                     PAL_TechnoTowerZoneUnused:
    8291/    9CF0 :                     		binclude	"Palettes/PalTechnoTowerZoneUnused.bin"
    8292/    9D30 : (MACRO)              		even
    8292/    9D30 : =>TRUE                       if notZ80(MOMCPU)
    8292/    9D30 : =>FALSE                              if (*)&1
    8292/    9D30 :                                             dc.b 0                          ;ds.b 1
    8292/    9D30 : [8292]                               endif
    8292/    9D30 : =>FALSE                      else
    8292/    9D30 :                                     if ($)&1
    8292/    9D30 :                                             db 0
    8292/    9D30 : [8292]                               endif
    8292/    9D30 : [8292]                       endif
    8293/    9D30 :                     
    8294/    9D30 :                     ; =============== S U B	R O U T	I N E =======================================
    8295/    9D30 :                     
    8296/    9D30 :                     sub_9D30:
    8297/    9D30 : 2F08                		move.l	a0,-(sp)
    8298/    9D32 : 205A                		movea.l	(a2)+,a0
    8299/    9D34 : 49F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a4
    8300/    9D3A : 4EB8 0DD4           		jsr	(NemDecToRAM).w
    8301/    9D3E : 205A                		movea.l	(a2)+,a0
    8302/    9D40 : 4EB8 0DD4           		jsr	(NemDecToRAM).w
    8303/    9D44 : 205F                		movea.l	(sp)+,a0
    8304/    9D46 : 203C 00FF 0200      		move.l	#unk_0200&$FFFFFF,d0
    8305/    9D4C : 7200                		moveq	#0,d1
    8306/    9D4E : 3228 001C           		move.w	$1C(a0),d1
    8307/    9D52 : EB49                		lsl.w	#5,d1
    8308/    9D54 : 2400                		move.l	d0,d2
    8309/    9D56 : 948C                		sub.l	a4,d2
    8310/    9D58 : 4442                		neg.w	d2
    8311/    9D5A : E24A                		lsr.w	#1,d2
    8312/    9D5C : 4EB8 05E8           		jsr	(sub_5E8).w
    8313/    9D60 : 4E75                		rts
    8314/    9D62 :                     ; ===========================================================================
    8315/    9D62 :                     ; ---------------------------------------------------------------------------
    8316/    9D62 :                     ; (I think) Subroutine to take the data in "MapLocs" tables and decompress
    8317/    9D62 :                     ; them correctly
    8318/    9D62 :                     
    8319/    9D62 :                     ; input:
    8320/    9D62 :                     ;	$1C(a0) = starting art tile (added to each 8x8 before writing to destination)
    8321/    9D62 :                     ;	a2 = source address
    8322/    9D62 :                     ;	$28(a0) = destination address
    8323/    9D62 :                     
    8324/    9D62 :                     ; usage:
    8325/    9D62 :                     ;	lea	(source).l,a2
    8326/    9D62 :                     ;	move.l	#destination,$28(a0)
    8327/    9D62 :                     ;	move.w	#arttile,$1C(a0)
    8328/    9D62 :                     ;	bsr.w	DecEniMapLocs
    8329/    9D62 :                     ; ---------------------------------------------------------------------------
    8330/    9D62 :                     
    8331/    9D62 :                     DecEniMapLocs:
    8332/    9D62 : 2268 0028           		movea.l	$28(a0),a1
    8333/    9D66 : 3028 001C           		move.w	$1C(a0),d0
    8334/    9D6A : 2F08                		move.l	a0,-(sp)
    8335/    9D6C : 205A                		movea.l	(a2)+,a0
    8336/    9D6E : 2F0A                		move.l	a2,-(sp)
    8337/    9D70 : 4EB8 105C           		jsr	(EniDec).w
    8338/    9D74 : 245F                		movea.l	(sp)+,a2
    8339/    9D76 : 205F                		movea.l	(sp)+,a0
    8340/    9D78 : 2149 0024           		move.l	a1,$24(a0)
    8341/    9D7C : 2F08                		move.l	a0,-(sp)
    8342/    9D7E : 205A                		movea.l	(a2)+,a0
    8343/    9D80 : 7000                		moveq	#0,d0
    8344/    9D82 : 2F0A                		move.l	a2,-(sp)
    8345/    9D84 : 4EB8 105C           		jsr	(EniDec).w
    8346/    9D88 : 245F                		movea.l	(sp)+,a2
    8347/    9D8A : 205F                		movea.l	(sp)+,a0
    8348/    9D8C : 2149 0020           		move.l	a1,$20(a0)
    8349/    9D90 : 2F08                		move.l	a0,-(sp)
    8350/    9D92 : 205A                		movea.l	(a2)+,a0
    8351/    9D94 : 7000                		moveq	#0,d0
    8352/    9D96 : 2F0A                		move.l	a2,-(sp)
    8353/    9D98 : 4EB8 105C           		jsr	(EniDec).w
    8354/    9D9C : 245F                		movea.l	(sp)+,a2
    8355/    9D9E : 205F                		movea.l	(sp)+,a0
    8356/    9DA0 : 4E75                		rts
    8357/    9DA2 :                     ; ===========================================================================
    8358/    9DA2 :                     ; ---------------------------------------------------------------------------
    8359/    9DA2 :                     ;
    8360/    9DA2 :                     ; ---------------------------------------------------------------------------
    8361/    9DA2 :                     
    8362/    9DA2 :                     sub_9DA2:
    8363/    9DA2 : 225A                		movea.l	(a2)+,a1
    8364/    9DA4 : 45F9 00FF 0200      		lea	(unk_0200&$FFFFFF).l,a2
    8365/    9DAA : 707F                		moveq	#$7F,d0
    8366/    9DAC :                     
    8367/    9DAC :                     loc_9DAC:
    8368/    9DAC : 24D9                		move.l	(a1)+,(a2)+
    8369/    9DAE : 24D9                		move.l	(a1)+,(a2)+
    8370/    9DB0 : 51C8 FFFA           		dbf	d0,loc_9DAC
    8371/    9DB4 : 45F9 00FF 0600      		lea	(unk_0600&$FFFFFF).l,a2
    8372/    9DBA : 707F                		moveq	#$7F,d0
    8373/    9DBC :                     
    8374/    9DBC :                     loc_9DBC:
    8375/    9DBC : 24D9                		move.l	(a1)+,(a2)+
    8376/    9DBE : 24D9                		move.l	(a1)+,(a2)+
    8377/    9DC0 : 51C8 FFFA           		dbf	d0,loc_9DBC
    8378/    9DC4 : 4E75                		rts
    8379/    9DC6 :                     
    8380/    9DC6 :                     sub_9DC6:
    8381/    9DC6 : 3029 0010           		move.w	$10(a1),d0
    8382/    9DCA : 2A49                		movea.l	a1,a5
    8383/    9DCC : 7E0F                		moveq	#$F,d7
    8384/    9DCE :                     
    8385/    9DCE :                     loc_9DCE:
    8386/    9DCE : 48E7 FFFE           		movem.l	d0-a6,-(sp)
    8387/    9DD2 : 204B                		movea.l	a3,a0
    8388/    9DD4 : (MACRO)              		_move.w	0(a1),d0
    8388/    9DD4 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8388/    9DD4 : =>FALSE                        if (chkop("0(a1)","0("))
    8388/    9DD4 :                                       if (chkop("d0","0("))
    8388/    9DD4 :                                             !move.w   0(a1),d0
    8388/    9DD4 :                                       else
    8388/    9DD4 :                                             !move.w   0(a1),1+d0
    8388/    9DD4 :                                             !org    *-1
    8388/    9DD4 :                                             !dc.b   0
    8388/    9DD4 : [8388]                                 endif
    8388/    9DD4 : =>TRUE                         else
    8388/    9DD4 : =>FALSE                              if chkop("d0","d")
    8388/    9DD4 :                                       if (chkop("d0","0("))
    8388/    9DD4 :                     start:
    8388/    9DD4 :                                             !move.w   1+0(a1),d0
    8388/    9DD4 :                     end:
    8388/    9DD4 :                                             !org    start+3
    8388/    9DD4 :                                             !dc.b   0
    8388/    9DD4 :                                             !org    end
    8388/    9DD4 :                                       else
    8388/    9DD4 :                                             !move.w   1+0(a1),1+d0
    8388/    9DD4 :                                             !org    *-3
    8388/    9DD4 :                                             !dc.b   0
    8388/    9DD4 :                                             !org    *+1
    8388/    9DD4 :                                             !dc.b   0
    8388/    9DD4 : [8388]                                 endif
    8388/    9DD4 : =>TRUE                               else
    8388/    9DD4 : 3029 0001                                   !move.w   1+0(a1),d0
    8388/    9DD7 :                                             !org    *-1
    8388/    9DD7 : 00                                          !dc.b   0
    8388/    9DD8 : [8388]                               endif
    8388/    9DD8 : [8388]                         endif
    8389/    9DD8 : 3229 0010           		move.w	$10(a1),d1
    8390/    9DDC : 3829 0018           		move.w	$18(a1),d4
    8391/    9DE0 : 4EB8 1272           		jsr	(sub_1272).w
    8392/    9DE4 : 2648                		movea.l	a0,a3
    8393/    9DE6 : 4EB8 14E4           		jsr	(sub_14E4).w
    8394/    9DEA : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
    8395/    9DEE : 0669 0010 0010      		addi.w	#$10,$10(a1)
    8396/    9DF4 : 51CF FFD8           		dbf	d7,loc_9DCE
    8397/    9DF8 : 3340 0010           		move.w	d0,$10(a1)
    8398/    9DFC : 4E75                		rts
    8399/    9DFE :                     ; End of function sub_9DC6
    8400/    9DFE :                     
    8401/    9DFE :                     
    8402/    9DFE :                     ; =============== S U B	R O U T	I N E =======================================
    8403/    9DFE :                     
    8404/    9DFE :                     
    8405/    9DFE :                     sub_9DFE:
    8406/    9DFE : 2F0B                		move.l	a3,-(sp)
    8407/    9E00 : (MACRO)              		_move.w	0(a1),d0
    8407/    9E00 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8407/    9E00 : =>FALSE                        if (chkop("0(a1)","0("))
    8407/    9E00 :                                       if (chkop("d0","0("))
    8407/    9E00 :                                             !move.w   0(a1),d0
    8407/    9E00 :                                       else
    8407/    9E00 :                                             !move.w   0(a1),1+d0
    8407/    9E00 :                                             !org    *-1
    8407/    9E00 :                                             !dc.b   0
    8407/    9E00 : [8407]                                 endif
    8407/    9E00 : =>TRUE                         else
    8407/    9E00 : =>FALSE                              if chkop("d0","d")
    8407/    9E00 :                                       if (chkop("d0","0("))
    8407/    9E00 :                     start:
    8407/    9E00 :                                             !move.w   1+0(a1),d0
    8407/    9E00 :                     end:
    8407/    9E00 :                                             !org    start+3
    8407/    9E00 :                                             !dc.b   0
    8407/    9E00 :                                             !org    end
    8407/    9E00 :                                       else
    8407/    9E00 :                                             !move.w   1+0(a1),1+d0
    8407/    9E00 :                                             !org    *-3
    8407/    9E00 :                                             !dc.b   0
    8407/    9E00 :                                             !org    *+1
    8407/    9E00 :                                             !dc.b   0
    8407/    9E00 : [8407]                                 endif
    8407/    9E00 : =>TRUE                               else
    8407/    9E00 : 3029 0001                                   !move.w   1+0(a1),d0
    8407/    9E03 :                                             !org    *-1
    8407/    9E03 : 00                                          !dc.b   0
    8407/    9E04 : [8407]                               endif
    8407/    9E04 : [8407]                         endif
    8408/    9E04 : 3229 0002           		move.w	2(a1),d1
    8409/    9E08 : B340                		eor.w	d1,d0
    8410/    9E0A : 0240 FFF0           		andi.w	#$FFF0,d0
    8411/    9E0E : 6728                		beq.s	loc_9E38
    8412/    9E10 : (MACRO)              		_cmp.w	0(a1),d1
    8412/    9E10 :  (MACRO-2)                           insn2op cmp.w, 0(a1),d1
    8412/    9E10 : =>FALSE                        if (chkop("0(a1)","0("))
    8412/    9E10 :                                       if (chkop("d1","0("))
    8412/    9E10 :                                             !cmp.w   0(a1),d1
    8412/    9E10 :                                       else
    8412/    9E10 :                                             !cmp.w   0(a1),1+d1
    8412/    9E10 :                                             !org    *-1
    8412/    9E10 :                                             !dc.b   0
    8412/    9E10 : [8412]                                 endif
    8412/    9E10 : =>TRUE                         else
    8412/    9E10 : =>FALSE                              if chkop("d1","d")
    8412/    9E10 :                                       if (chkop("d1","0("))
    8412/    9E10 :                     start:
    8412/    9E10 :                                             !cmp.w   1+0(a1),d1
    8412/    9E10 :                     end:
    8412/    9E10 :                                             !org    start+3
    8412/    9E10 :                                             !dc.b   0
    8412/    9E10 :                                             !org    end
    8412/    9E10 :                                       else
    8412/    9E10 :                                             !cmp.w   1+0(a1),1+d1
    8412/    9E10 :                                             !org    *-3
    8412/    9E10 :                                             !dc.b   0
    8412/    9E10 :                                             !org    *+1
    8412/    9E10 :                                             !dc.b   0
    8412/    9E10 : [8412]                                 endif
    8412/    9E10 : =>TRUE                               else
    8412/    9E10 : B269 0001                                   !cmp.w   1+0(a1),d1
    8412/    9E13 :                                             !org    *-1
    8412/    9E13 : 00                                          !dc.b   0
    8412/    9E14 : [8412]                               endif
    8412/    9E14 : [8412]                         endif
    8413/    9E14 : 6D10                		blt.s	loc_9E26
    8414/    9E16 : (MACRO)              		_move.w	0(a1),d0
    8414/    9E16 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8414/    9E16 : =>FALSE                        if (chkop("0(a1)","0("))
    8414/    9E16 :                                       if (chkop("d0","0("))
    8414/    9E16 :                                             !move.w   0(a1),d0
    8414/    9E16 :                                       else
    8414/    9E16 :                                             !move.w   0(a1),1+d0
    8414/    9E16 :                                             !org    *-1
    8414/    9E16 :                                             !dc.b   0
    8414/    9E16 : [8414]                                 endif
    8414/    9E16 : =>TRUE                         else
    8414/    9E16 : =>FALSE                              if chkop("d0","d")
    8414/    9E16 :                                       if (chkop("d0","0("))
    8414/    9E16 :                     start:
    8414/    9E16 :                                             !move.w   1+0(a1),d0
    8414/    9E16 :                     end:
    8414/    9E16 :                                             !org    start+3
    8414/    9E16 :                                             !dc.b   0
    8414/    9E16 :                                             !org    end
    8414/    9E16 :                                       else
    8414/    9E16 :                                             !move.w   1+0(a1),1+d0
    8414/    9E16 :                                             !org    *-3
    8414/    9E16 :                                             !dc.b   0
    8414/    9E16 :                                             !org    *+1
    8414/    9E16 :                                             !dc.b   0
    8414/    9E16 : [8414]                                 endif
    8414/    9E16 : =>TRUE                               else
    8414/    9E16 : 3029 0001                                   !move.w   1+0(a1),d0
    8414/    9E19 :                                             !org    *-1
    8414/    9E19 : 00                                          !dc.b   0
    8414/    9E1A : [8414]                               endif
    8414/    9E1A : [8414]                         endif
    8415/    9E1A : 3229 0010           		move.w	$10(a1),d1
    8416/    9E1E : 264C                		movea.l	a4,a3
    8417/    9E20 : 4EB8 129A           		jsr	(sub_129A).w
    8418/    9E24 : 6012                		bra.s	loc_9E38
    8419/    9E26 :                     ; ---------------------------------------------------------------------------
    8420/    9E26 :                     
    8421/    9E26 :                     loc_9E26:
    8422/    9E26 : 3029 0002           		move.w	2(a1),d0
    8423/    9E2A : 0640 0200           		addi.w	#$200,d0
    8424/    9E2E : 3229 0010           		move.w	$10(a1),d1
    8425/    9E32 : 264C                		movea.l	a4,a3
    8426/    9E34 : 4EB8 129A           		jsr	(sub_129A).w
    8427/    9E38 :                     
    8428/    9E38 :                     loc_9E38:
    8429/    9E38 : 265F                		movea.l	(sp)+,a3
    8430/    9E3A : 3029 0010           		move.w	$10(a1),d0
    8431/    9E3E : 3229 0012           		move.w	$12(a1),d1
    8432/    9E42 : B340                		eor.w	d1,d0
    8433/    9E44 : 0240 FFF0           		andi.w	#$FFF0,d0
    8434/    9E48 : 6722                		beq.s	locret_9E6C
    8435/    9E4A : B269 0010           		cmp.w	$10(a1),d1
    8436/    9E4E : 6D0C                		blt.s	loc_9E5C
    8437/    9E50 : (MACRO)              		_move.w	0(a1),d0
    8437/    9E50 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8437/    9E50 : =>FALSE                        if (chkop("0(a1)","0("))
    8437/    9E50 :                                       if (chkop("d0","0("))
    8437/    9E50 :                                             !move.w   0(a1),d0
    8437/    9E50 :                                       else
    8437/    9E50 :                                             !move.w   0(a1),1+d0
    8437/    9E50 :                                             !org    *-1
    8437/    9E50 :                                             !dc.b   0
    8437/    9E50 : [8437]                                 endif
    8437/    9E50 : =>TRUE                         else
    8437/    9E50 : =>FALSE                              if chkop("d0","d")
    8437/    9E50 :                                       if (chkop("d0","0("))
    8437/    9E50 :                     start:
    8437/    9E50 :                                             !move.w   1+0(a1),d0
    8437/    9E50 :                     end:
    8437/    9E50 :                                             !org    start+3
    8437/    9E50 :                                             !dc.b   0
    8437/    9E50 :                                             !org    end
    8437/    9E50 :                                       else
    8437/    9E50 :                                             !move.w   1+0(a1),1+d0
    8437/    9E50 :                                             !org    *-3
    8437/    9E50 :                                             !dc.b   0
    8437/    9E50 :                                             !org    *+1
    8437/    9E50 :                                             !dc.b   0
    8437/    9E50 : [8437]                                 endif
    8437/    9E50 : =>TRUE                               else
    8437/    9E50 : 3029 0001                                   !move.w   1+0(a1),d0
    8437/    9E53 :                                             !org    *-1
    8437/    9E53 : 00                                          !dc.b   0
    8437/    9E54 : [8437]                               endif
    8437/    9E54 : [8437]                         endif
    8438/    9E54 : 3229 0010           		move.w	$10(a1),d1
    8439/    9E58 : 4EF8 1272           		jmp	(sub_1272).w
    8440/    9E5C :                     ; ---------------------------------------------------------------------------
    8441/    9E5C :                     
    8442/    9E5C :                     loc_9E5C:
    8443/    9E5C : (MACRO)              		_move.w	0(a1),d0
    8443/    9E5C :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8443/    9E5C : =>FALSE                        if (chkop("0(a1)","0("))
    8443/    9E5C :                                       if (chkop("d0","0("))
    8443/    9E5C :                                             !move.w   0(a1),d0
    8443/    9E5C :                                       else
    8443/    9E5C :                                             !move.w   0(a1),1+d0
    8443/    9E5C :                                             !org    *-1
    8443/    9E5C :                                             !dc.b   0
    8443/    9E5C : [8443]                                 endif
    8443/    9E5C : =>TRUE                         else
    8443/    9E5C : =>FALSE                              if chkop("d0","d")
    8443/    9E5C :                                       if (chkop("d0","0("))
    8443/    9E5C :                     start:
    8443/    9E5C :                                             !move.w   1+0(a1),d0
    8443/    9E5C :                     end:
    8443/    9E5C :                                             !org    start+3
    8443/    9E5C :                                             !dc.b   0
    8443/    9E5C :                                             !org    end
    8443/    9E5C :                                       else
    8443/    9E5C :                                             !move.w   1+0(a1),1+d0
    8443/    9E5C :                                             !org    *-3
    8443/    9E5C :                                             !dc.b   0
    8443/    9E5C :                                             !org    *+1
    8443/    9E5C :                                             !dc.b   0
    8443/    9E5C : [8443]                                 endif
    8443/    9E5C : =>TRUE                               else
    8443/    9E5C : 3029 0001                                   !move.w   1+0(a1),d0
    8443/    9E5F :                                             !org    *-1
    8443/    9E5F : 00                                          !dc.b   0
    8443/    9E60 : [8443]                               endif
    8443/    9E60 : [8443]                         endif
    8444/    9E60 : 3229 0012           		move.w	$12(a1),d1
    8445/    9E64 : 0641 0100           		addi.w	#$100,d1
    8446/    9E68 : 4EF8 1272           		jmp	(sub_1272).w
    8447/    9E6C :                     ; ---------------------------------------------------------------------------
    8448/    9E6C :                     
    8449/    9E6C :                     locret_9E6C:
    8450/    9E6C : 4E75                		rts
    8451/    9E6E :                     ; End of function sub_9DFE
    8452/    9E6E :                     
    8453/    9E6E :                     
    8454/    9E6E :                     ; =============== S U B	R O U T	I N E =======================================
    8455/    9E6E :                     
    8456/    9E6E :                     
    8457/    9E6E :                     sub_9E6E:
    8458/    9E6E : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    8459/    9E72 : 48D2 00FF           		movem.l	d0-d7,(a2)
    8460/    9E76 : D4FC 0020           		adda.w	#$20,a2
    8461/    9E7A : 4CD8 00FF           		movem.l	(a0)+,d0-d7
    8462/    9E7E : 48D2 00FF           		movem.l	d0-d7,(a2)
    8463/    9E82 : 4E75                		rts
    8464/    9E84 :                     ; End of function sub_9E6E
    8465/    9E84 :                     
    8466/    9E84 :                     
    8467/    9E84 :                     ; =============== S U B	R O U T	I N E =======================================
    8468/    9E84 :                     
    8469/    9E84 :                     
    8470/    9E84 :                     sub_9E84:
    8471/    9E84 : 7000                		moveq	#0,d0
    8472/    9E86 : 3012                		move.w	(a2),d0
    8473/    9E88 : E588                		lsl.l	#2,d0
    8474/    9E8A : E448                		lsr.w	#2,d0
    8475/    9E8C : 0040 4000           		ori.w	#$4000,d0
    8476/    9E90 : 4840                		swap	d0
    8477/    9E92 : 0240 0003           		andi.w	#3,d0
    8478/    9E96 : 2340 0018           		move.l	d0,$18(a1)
    8479/    9E9A : 3218                		move.w	(a0)+,d1
    8480/    9E9C : (MACRO)              		_move.w	d1,0(a1)
    8480/    9E9C :  (MACRO-2)                           insn2op move.w, d1,0(a1)
    8480/    9E9C : =>TRUE                         if (chkop("d1","0("))
    8480/    9E9C : =>FALSE                                if (chkop("0(a1)","0("))
    8480/    9E9C :                                             !move.w   d1,0(a1)
    8480/    9E9C : =>TRUE                                 else
    8480/    9E9C : 3341 0001                                   !move.w   d1,1+0(a1)
    8480/    9E9F :                                             !org    *-1
    8480/    9E9F : 00                                          !dc.b   0
    8480/    9EA0 : [8480]                                 endif
    8480/    9EA0 : =>FALSE                        else
    8480/    9EA0 :                                     if chkop("0(a1)","d")
    8480/    9EA0 :                                       if (chkop("0(a1)","0("))
    8480/    9EA0 :                     start:
    8480/    9EA0 :                                             !move.w   1+d1,0(a1)
    8480/    9EA0 :                     end:
    8480/    9EA0 :                                             !org    start+3
    8480/    9EA0 :                                             !dc.b   0
    8480/    9EA0 :                                             !org    end
    8480/    9EA0 :                                       else
    8480/    9EA0 :                                             !move.w   1+d1,1+0(a1)
    8480/    9EA0 :                                             !org    *-3
    8480/    9EA0 :                                             !dc.b   0
    8480/    9EA0 :                                             !org    *+1
    8480/    9EA0 :                                             !dc.b   0
    8480/    9EA0 : [8480]                                 endif
    8480/    9EA0 :                                     else
    8480/    9EA0 :                                             !move.w   1+d1,0(a1)
    8480/    9EA0 :                                             !org    *-1
    8480/    9EA0 :                                             !dc.b   0
    8480/    9EA0 : [8480]                               endif
    8480/    9EA0 : [8480]                         endif
    8481/    9EA0 : 3341 0002           		move.w	d1,2(a1)
    8482/    9EA4 : 3218                		move.w	(a0)+,d1
    8483/    9EA6 : 3341 0010           		move.w	d1,$10(a1)
    8484/    9EAA : 3341 0012           		move.w	d1,$12(a1)
    8485/    9EAE : 1358 0004           		move.b	(a0)+,4(a1)
    8486/    9EB2 : 1358 0014           		move.b	(a0)+,$14(a1)
    8487/    9EB6 : 1358 0005           		move.b	(a0)+,5(a1)
    8488/    9EBA : 1358 0015           		move.b	(a0)+,$15(a1)
    8489/    9EBE : 3358 001C           		move.w	(a0)+,$1C(a1)
    8490/    9EC2 : 3358 0008           		move.w	(a0)+,8(a1)
    8491/    9EC6 : 3358 000A           		move.w	(a0)+,$A(a1)
    8492/    9ECA : 3358 000C           		move.w	(a0)+,$C(a1)
    8493/    9ECE : 3358 000E           		move.w	(a0)+,$E(a1)
    8494/    9ED2 : 7000                		moveq	#0,d0
    8495/    9ED4 : 1029 0004           		move.b	4(a1),d0
    8496/    9ED8 : 740F                		moveq	#$F,d2
    8497/    9EDA :                     
    8498/    9EDA :                     loc_9EDA:
    8499/    9EDA : D040                		add.w	d0,d0
    8500/    9EDC : 55CA FFFC           		dbcs	d2,loc_9EDA
    8501/    9EE0 : 1342 0006           		move.b	d2,6(a1)
    8502/    9EE4 : 7000                		moveq	#0,d0
    8503/    9EE6 : 1029 0014           		move.b	$14(a1),d0
    8504/    9EEA : 740F                		moveq	#$F,d2
    8505/    9EEC :                     
    8506/    9EEC :                     loc_9EEC:
    8507/    9EEC : D040                		add.w	d0,d0
    8508/    9EEE : 55CA FFFC           		dbcs	d2,loc_9EEC
    8509/    9EF2 : 1342 0016           		move.b	d2,$16(a1)
    8510/    9EF6 : 4E75                		rts
    8511/    9EF8 :                     ; End of function sub_9E84
    8512/    9EF8 :                     
    8513/    9EF8 :                     
    8514/    9EF8 :                     ; =============== S U B	R O U T	I N E =======================================
    8515/    9EF8 :                     
    8516/    9EF8 :                     
    8517/    9EF8 :                     sub_9EF8:
    8518/    9EF8 : (MACRO)              		_move.w	0(a1),d0
    8518/    9EF8 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8518/    9EF8 : =>FALSE                        if (chkop("0(a1)","0("))
    8518/    9EF8 :                                       if (chkop("d0","0("))
    8518/    9EF8 :                                             !move.w   0(a1),d0
    8518/    9EF8 :                                       else
    8518/    9EF8 :                                             !move.w   0(a1),1+d0
    8518/    9EF8 :                                             !org    *-1
    8518/    9EF8 :                                             !dc.b   0
    8518/    9EF8 : [8518]                                 endif
    8518/    9EF8 : =>TRUE                         else
    8518/    9EF8 : =>FALSE                              if chkop("d0","d")
    8518/    9EF8 :                                       if (chkop("d0","0("))
    8518/    9EF8 :                     start:
    8518/    9EF8 :                                             !move.w   1+0(a1),d0
    8518/    9EF8 :                     end:
    8518/    9EF8 :                                             !org    start+3
    8518/    9EF8 :                                             !dc.b   0
    8518/    9EF8 :                                             !org    end
    8518/    9EF8 :                                       else
    8518/    9EF8 :                                             !move.w   1+0(a1),1+d0
    8518/    9EF8 :                                             !org    *-3
    8518/    9EF8 :                                             !dc.b   0
    8518/    9EF8 :                                             !org    *+1
    8518/    9EF8 :                                             !dc.b   0
    8518/    9EF8 : [8518]                                 endif
    8518/    9EF8 : =>TRUE                               else
    8518/    9EF8 : 3029 0001                                   !move.w   1+0(a1),d0
    8518/    9EFB :                                             !org    *-1
    8518/    9EFB : 00                                          !dc.b   0
    8518/    9EFC : [8518]                               endif
    8518/    9EFC : [8518]                         endif
    8519/    9EFC : 3340 0002           		move.w	d0,2(a1)
    8520/    9F00 : 3238 D830           		move.w	($FFFFD830).w,d1
    8521/    9F04 : 9240                		sub.w	d0,d1
    8522/    9F06 : 6D0C                		blt.s	loc_9F14
    8523/    9F08 : 0C41 0010           		cmpi.w	#$10,d1
    8524/    9F0C : 6F10                		ble.s	loc_9F1E
    8525/    9F0E : 323C 0010           		move.w	#$10,d1
    8526/    9F12 : 600A                		bra.s	loc_9F1E
    8527/    9F14 :                     ; ---------------------------------------------------------------------------
    8528/    9F14 :                     
    8529/    9F14 :                     loc_9F14:
    8530/    9F14 : 0C41 FFF0           		cmpi.w	#$FFF0,d1
    8531/    9F18 : 6E04                		bgt.s	loc_9F1E
    8532/    9F1A : 323C FFF0           		move.w	#$FFF0,d1
    8533/    9F1E :                     
    8534/    9F1E :                     loc_9F1E:
    8535/    9F1E : D041                		add.w	d1,d0
    8536/    9F20 : (MACRO)              		_move.w	d0,0(a1)
    8536/    9F20 :  (MACRO-2)                           insn2op move.w, d0,0(a1)
    8536/    9F20 : =>TRUE                         if (chkop("d0","0("))
    8536/    9F20 : =>FALSE                                if (chkop("0(a1)","0("))
    8536/    9F20 :                                             !move.w   d0,0(a1)
    8536/    9F20 : =>TRUE                                 else
    8536/    9F20 : 3340 0001                                   !move.w   d0,1+0(a1)
    8536/    9F23 :                                             !org    *-1
    8536/    9F23 : 00                                          !dc.b   0
    8536/    9F24 : [8536]                                 endif
    8536/    9F24 : =>FALSE                        else
    8536/    9F24 :                                     if chkop("0(a1)","d")
    8536/    9F24 :                                       if (chkop("0(a1)","0("))
    8536/    9F24 :                     start:
    8536/    9F24 :                                             !move.w   1+d0,0(a1)
    8536/    9F24 :                     end:
    8536/    9F24 :                                             !org    start+3
    8536/    9F24 :                                             !dc.b   0
    8536/    9F24 :                                             !org    end
    8536/    9F24 :                                       else
    8536/    9F24 :                                             !move.w   1+d0,1+0(a1)
    8536/    9F24 :                                             !org    *-3
    8536/    9F24 :                                             !dc.b   0
    8536/    9F24 :                                             !org    *+1
    8536/    9F24 :                                             !dc.b   0
    8536/    9F24 : [8536]                                 endif
    8536/    9F24 :                                     else
    8536/    9F24 :                                             !move.w   1+d0,0(a1)
    8536/    9F24 :                                             !org    *-1
    8536/    9F24 :                                             !dc.b   0
    8536/    9F24 : [8536]                               endif
    8536/    9F24 : [8536]                         endif
    8537/    9F24 : 3229 0008           		move.w	8(a1),d1
    8538/    9F28 : B041                		cmp.w	d1,d0
    8539/    9F2A : 6E08                		bgt.s	loc_9F34
    8540/    9F2C : 3229 000A           		move.w	$A(a1),d1
    8541/    9F30 : B041                		cmp.w	d1,d0
    8542/    9F32 : 6E04                		bgt.s	locret_9F38
    8543/    9F34 :                     
    8544/    9F34 :                     loc_9F34:
    8545/    9F34 : (MACRO)              		_move.w	d1,0(a1)
    8545/    9F34 :  (MACRO-2)                           insn2op move.w, d1,0(a1)
    8545/    9F34 : =>TRUE                         if (chkop("d1","0("))
    8545/    9F34 : =>FALSE                                if (chkop("0(a1)","0("))
    8545/    9F34 :                                             !move.w   d1,0(a1)
    8545/    9F34 : =>TRUE                                 else
    8545/    9F34 : 3341 0001                                   !move.w   d1,1+0(a1)
    8545/    9F37 :                                             !org    *-1
    8545/    9F37 : 00                                          !dc.b   0
    8545/    9F38 : [8545]                                 endif
    8545/    9F38 : =>FALSE                        else
    8545/    9F38 :                                     if chkop("0(a1)","d")
    8545/    9F38 :                                       if (chkop("0(a1)","0("))
    8545/    9F38 :                     start:
    8545/    9F38 :                                             !move.w   1+d1,0(a1)
    8545/    9F38 :                     end:
    8545/    9F38 :                                             !org    start+3
    8545/    9F38 :                                             !dc.b   0
    8545/    9F38 :                                             !org    end
    8545/    9F38 :                                       else
    8545/    9F38 :                                             !move.w   1+d1,1+0(a1)
    8545/    9F38 :                                             !org    *-3
    8545/    9F38 :                                             !dc.b   0
    8545/    9F38 :                                             !org    *+1
    8545/    9F38 :                                             !dc.b   0
    8545/    9F38 : [8545]                                 endif
    8545/    9F38 :                                     else
    8545/    9F38 :                                             !move.w   1+d1,0(a1)
    8545/    9F38 :                                             !org    *-1
    8545/    9F38 :                                             !dc.b   0
    8545/    9F38 : [8545]                               endif
    8545/    9F38 : [8545]                         endif
    8546/    9F38 :                     
    8547/    9F38 :                     locret_9F38:
    8548/    9F38 : 4E75                		rts
    8549/    9F3A :                     ; End of function sub_9EF8
    8550/    9F3A :                     
    8551/    9F3A :                     
    8552/    9F3A :                     ; =============== S U B	R O U T	I N E =======================================
    8553/    9F3A :                     
    8554/    9F3A :                     
    8555/    9F3A :                     sub_9F3A:
    8556/    9F3A : 3029 0010           		move.w	$10(a1),d0
    8557/    9F3E : 3340 0012           		move.w	d0,$12(a1)
    8558/    9F42 : 3238 D832           		move.w	($FFFFD832).w,d1
    8559/    9F46 : 9240                		sub.w	d0,d1
    8560/    9F48 : 6D0C                		blt.s	loc_9F56
    8561/    9F4A : 0C41 0010           		cmpi.w	#$10,d1
    8562/    9F4E : 6F10                		ble.s	loc_9F60
    8563/    9F50 : 323C 0010           		move.w	#$10,d1
    8564/    9F54 : 600A                		bra.s	loc_9F60
    8565/    9F56 :                     ; ---------------------------------------------------------------------------
    8566/    9F56 :                     
    8567/    9F56 :                     loc_9F56:
    8568/    9F56 : 0C41 FFF0           		cmpi.w	#$FFF0,d1
    8569/    9F5A : 6E04                		bgt.s	loc_9F60
    8570/    9F5C : 323C FFF0           		move.w	#$FFF0,d1
    8571/    9F60 :                     
    8572/    9F60 :                     loc_9F60:
    8573/    9F60 : D041                		add.w	d1,d0
    8574/    9F62 : 3340 0010           		move.w	d0,$10(a1)
    8575/    9F66 : 3229 000C           		move.w	$C(a1),d1
    8576/    9F6A : B041                		cmp.w	d1,d0
    8577/    9F6C : 6E08                		bgt.s	loc_9F76
    8578/    9F6E : 3229 000E           		move.w	$E(a1),d1
    8579/    9F72 : B041                		cmp.w	d1,d0
    8580/    9F74 : 6E04                		bgt.s	locret_9F7A
    8581/    9F76 :                     
    8582/    9F76 :                     loc_9F76:
    8583/    9F76 : 3341 0010           		move.w	d1,$10(a1)
    8584/    9F7A :                     
    8585/    9F7A :                     locret_9F7A:
    8586/    9F7A : 4E75                		rts
    8587/    9F7C :                     ; End of function sub_9F3A
    8588/    9F7C :                     
    8589/    9F7C :                     
    8590/    9F7C :                     ; =============== S U B	R O U T	I N E =======================================
    8591/    9F7C :                     
    8592/    9F7C :                     
    8593/    9F7C :                     sub_9F7C:
    8594/    9F7C : 6100 0004           		bsr.w	sub_9F82
    8595/    9F80 : 4E75                		rts
    8596/    9F82 :                     ; End of function sub_9F7C
    8597/    9F82 :                     
    8598/    9F82 :                     
    8599/    9F82 :                     ; =============== S U B	R O U T	I N E =======================================
    8600/    9F82 :                     
    8601/    9F82 :                     
    8602/    9F82 :                     sub_9F82:
    8603/    9F82 : 43F8 C9DE           		lea	($FFFFC9DE).w,a1
    8604/    9F86 : 7000                		moveq	#0,d0
    8605/    9F88 : 1029 001F           		move.b	$1F(a1),d0
    8606/    9F8C : 4EFB 0002           		jmp	loc_9F90(pc,d0.w)
    8607/    9F90 :                     ; End of function sub_9F82
    8608/    9F90 :                     
    8609/    9F90 :                     ; ---------------------------------------------------------------------------
    8610/    9F90 :                     
    8611/    9F90 :                     loc_9F90:
    8612/    9F90 : 6000 001A           		bra.w	loc_9FAC
    8613/    9F94 :                     ; ---------------------------------------------------------------------------
    8614/    9F94 : 6000 0064           		bra.w	loc_9FFA
    8615/    9F98 :                     ; ---------------------------------------------------------------------------
    8616/    9F98 : 6000 00C8           		bra.w	loc_A062
    8617/    9F9C :                     ; ---------------------------------------------------------------------------
    8618/    9F9C : 6000 00FA           		bra.w	loc_A098
    8619/    9FA0 :                     ; ---------------------------------------------------------------------------
    8620/    9FA0 : 6000 0190           		bra.w	locret_A132
    8621/    9FA4 :                     ; ---------------------------------------------------------------------------
    8622/    9FA4 : 6000 0158           		bra.w	loc_A0FE
    8623/    9FA8 :                     ; ---------------------------------------------------------------------------
    8624/    9FA8 : 6000 018A           		bra.w	locret_A134
    8625/    9FAC :                     ; ---------------------------------------------------------------------------
    8626/    9FAC :                     
    8627/    9FAC :                     loc_9FAC:
    8628/    9FAC : 1029 001E           		move.b	$1E(a1),d0
    8629/    9FB0 : 6746                		beq.s	locret_9FF8
    8630/    9FB2 : 33FC 8B00 00C0      		move.w	#$8B00,(vdp_control_port).l
             9FB8 : 0004             
    8631/    9FBA : 31FC 8B00 C9CE      		move.w	#$8B00,($FFFFC9CE).w
    8632/    9FC0 : 7000                		moveq	#0,d0
    8633/    9FC2 : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             9FC8 : 00C0 0004          
    8634/    9FCC : 23C0 00C0 0000      		move.l	d0,(vdp_data_port).l
    8635/    9FD2 : 7200                		moveq	#0,d1
    8636/    9FD4 : 3238 D81C           		move.w	($FFFFD81C).w,d1
    8637/    9FD8 : E589                		lsl.l	#2,d1
    8638/    9FDA : E449                		lsr.w	#2,d1
    8639/    9FDC : 0041 4000           		ori.w	#$4000,d1
    8640/    9FE0 : 4841                		swap	d1
    8641/    9FE2 : 0241 0003           		andi.w	#3,d1
    8642/    9FE6 : 23C1 00C0 0004      		move.l	d1,(vdp_control_port).l
    8643/    9FEC : 23C0 00C0 0000      		move.l	d0,(vdp_data_port).l
    8644/    9FF2 : 137C 0000 001E      		move.b	#0,$1E(a1)
    8645/    9FF8 :                     
    8646/    9FF8 :                     locret_9FF8:
    8647/    9FF8 : 4E75                		rts
    8648/    9FFA :                     ; ---------------------------------------------------------------------------
    8649/    9FFA :                     
    8650/    9FFA :                     loc_9FFA:
    8651/    9FFA : 1029 001E           		move.b	$1E(a1),d0
    8652/    9FFE : 6714                		beq.s	loc_A014
    8653/    A000 : 33FC 8B00 00C0      		move.w	#$8B00,(vdp_control_port).l
             A006 : 0004             
    8654/    A008 : 31FC 8B00 C9CE      		move.w	#$8B00,($FFFFC9CE).w
    8655/    A00E : 137C 0000 001E      		move.b	#0,$1E(a1)
    8656/    A014 :                     
    8657/    A014 :                     loc_A014:
    8658/    A014 : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             A01A : 00C0 0004          
    8659/    A01E : 33E9 0010 00C0      		move.w	$10(a1),(vdp_data_port).l
             A024 : 0000             
    8660/    A026 : 33F8 CA2E 00C0      		move.w	($FFFFCA2E).w,(vdp_data_port).l
             A02C : 0000             
    8661/    A02E : 7000                		moveq	#0,d0
    8662/    A030 : 3038 D81C           		move.w	($FFFFD81C).w,d0
    8663/    A034 : E588                		lsl.l	#2,d0
    8664/    A036 : E448                		lsr.w	#2,d0
    8665/    A038 : 0040 4000           		ori.w	#$4000,d0
    8666/    A03C : 4840                		swap	d0
    8667/    A03E : 0240 0003           		andi.w	#3,d0
    8668/    A042 : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    8669/    A048 : (MACRO)              		_move.w	0(a1),d0
    8669/    A048 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8669/    A048 : =>FALSE                        if (chkop("0(a1)","0("))
    8669/    A048 :                                       if (chkop("d0","0("))
    8669/    A048 :                                             !move.w   0(a1),d0
    8669/    A048 :                                       else
    8669/    A048 :                                             !move.w   0(a1),1+d0
    8669/    A048 :                                             !org    *-1
    8669/    A048 :                                             !dc.b   0
    8669/    A048 : [8669]                                 endif
    8669/    A048 : =>TRUE                         else
    8669/    A048 : =>FALSE                              if chkop("d0","d")
    8669/    A048 :                                       if (chkop("d0","0("))
    8669/    A048 :                     start:
    8669/    A048 :                                             !move.w   1+0(a1),d0
    8669/    A048 :                     end:
    8669/    A048 :                                             !org    start+3
    8669/    A048 :                                             !dc.b   0
    8669/    A048 :                                             !org    end
    8669/    A048 :                                       else
    8669/    A048 :                                             !move.w   1+0(a1),1+d0
    8669/    A048 :                                             !org    *-3
    8669/    A048 :                                             !dc.b   0
    8669/    A048 :                                             !org    *+1
    8669/    A048 :                                             !dc.b   0
    8669/    A048 : [8669]                                 endif
    8669/    A048 : =>TRUE                               else
    8669/    A048 : 3029 0001                                   !move.w   1+0(a1),d0
    8669/    A04B :                                             !org    *-1
    8669/    A04B : 00                                          !dc.b   0
    8669/    A04C : [8669]                               endif
    8669/    A04C : [8669]                         endif
    8670/    A04C : 4440                		neg.w	d0
    8671/    A04E : 33C0 00C0 0000      		move.w	d0,(vdp_data_port).l
    8672/    A054 : 3238 CA1E           		move.w	($FFFFCA1E).w,d1
    8673/    A058 : 4441                		neg.w	d1
    8674/    A05A : 33C1 00C0 0000      		move.w	d1,(vdp_data_port).l
    8675/    A060 : 4E75                		rts
    8676/    A062 :                     ; ---------------------------------------------------------------------------
    8677/    A062 :                     
    8678/    A062 :                     loc_A062:
    8679/    A062 : 1029 001E           		move.b	$1E(a1),d0
    8680/    A066 : 6714                		beq.s	loc_A07C
    8681/    A068 : 33FC 8B03 00C0      		move.w	#$8B03,(vdp_control_port).l
             A06E : 0004             
    8682/    A070 : 31FC 8B03 C9CE      		move.w	#$8B03,($FFFFC9CE).w
    8683/    A076 : 137C 0000 001E      		move.b	#0,$1E(a1)
    8684/    A07C :                     
    8685/    A07C :                     loc_A07C:
    8686/    A07C : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             A082 : 00C0 0004          
    8687/    A086 : 33E9 0010 00C0      		move.w	$10(a1),(vdp_data_port).l
             A08C : 0000             
    8688/    A08E : 33F8 CA2E 00C0      		move.w	($FFFFCA2E).w,(vdp_data_port).l
             A094 : 0000             
    8689/    A096 : 4E75                		rts
    8690/    A098 :                     ; ---------------------------------------------------------------------------
    8691/    A098 :                     
    8692/    A098 :                     loc_A098:
    8693/    A098 : 1029 001E           		move.b	$1E(a1),d0
    8694/    A09C : 6714                		beq.s	loc_A0B2
    8695/    A09E : 33FC 8B04 00C0      		move.w	#$8B04,(vdp_control_port).l
             A0A4 : 0004             
    8696/    A0A6 : 31FC 8B04 C9CE      		move.w	#$8B04,($FFFFC9CE).w
    8697/    A0AC : 137C 0000 001E      		move.b	#0,$1E(a1)
    8698/    A0B2 :                     
    8699/    A0B2 :                     loc_A0B2:
    8700/    A0B2 : 47F8 CDDE           		lea	($FFFFCDDE).w,a3
    8701/    A0B6 : 49F9 00C0 0000      		lea	(vdp_data_port).l,a4
    8702/    A0BC : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             A0C2 : 00C0 0004          
    8703/    A0C6 : 6100 0086           		bsr.w	sub_A14E
    8704/    A0CA : 7000                		moveq	#0,d0
    8705/    A0CC : 3038 D81C           		move.w	($FFFFD81C).w,d0
    8706/    A0D0 : E588                		lsl.l	#2,d0
    8707/    A0D2 : E448                		lsr.w	#2,d0
    8708/    A0D4 : 0040 4000           		ori.w	#$4000,d0
    8709/    A0D8 : 4840                		swap	d0
    8710/    A0DA : 0240 0003           		andi.w	#3,d0
    8711/    A0DE : 23C0 00C0 0004      		move.l	d0,(vdp_control_port).l
    8712/    A0E4 : (MACRO)              		_move.w	0(a1),d0
    8712/    A0E4 :  (MACRO-2)                           insn2op move.w, 0(a1),d0
    8712/    A0E4 : =>FALSE                        if (chkop("0(a1)","0("))
    8712/    A0E4 :                                       if (chkop("d0","0("))
    8712/    A0E4 :                                             !move.w   0(a1),d0
    8712/    A0E4 :                                       else
    8712/    A0E4 :                                             !move.w   0(a1),1+d0
    8712/    A0E4 :                                             !org    *-1
    8712/    A0E4 :                                             !dc.b   0
    8712/    A0E4 : [8712]                                 endif
    8712/    A0E4 : =>TRUE                         else
    8712/    A0E4 : =>FALSE                              if chkop("d0","d")
    8712/    A0E4 :                                       if (chkop("d0","0("))
    8712/    A0E4 :                     start:
    8712/    A0E4 :                                             !move.w   1+0(a1),d0
    8712/    A0E4 :                     end:
    8712/    A0E4 :                                             !org    start+3
    8712/    A0E4 :                                             !dc.b   0
    8712/    A0E4 :                                             !org    end
    8712/    A0E4 :                                       else
    8712/    A0E4 :                                             !move.w   1+0(a1),1+d0
    8712/    A0E4 :                                             !org    *-3
    8712/    A0E4 :                                             !dc.b   0
    8712/    A0E4 :                                             !org    *+1
    8712/    A0E4 :                                             !dc.b   0
    8712/    A0E4 : [8712]                                 endif
    8712/    A0E4 : =>TRUE                               else
    8712/    A0E4 : 3029 0001                                   !move.w   1+0(a1),d0
    8712/    A0E7 :                                             !org    *-1
    8712/    A0E7 : 00                                          !dc.b   0
    8712/    A0E8 : [8712]                               endif
    8712/    A0E8 : [8712]                         endif
    8713/    A0E8 : 4440                		neg.w	d0
    8714/    A0EA : 33C0 00C0 0000      		move.w	d0,(vdp_data_port).l
    8715/    A0F0 : 3238 CA1E           		move.w	($FFFFCA1E).w,d1
    8716/    A0F4 : 4441                		neg.w	d1
    8717/    A0F6 : 33C1 00C0 0000      		move.w	d1,(vdp_data_port).l
    8718/    A0FC : 4E75                		rts
    8719/    A0FE :                     ; ---------------------------------------------------------------------------
    8720/    A0FE :                     
    8721/    A0FE :                     loc_A0FE:
    8722/    A0FE : 1029 001E           		move.b	$1E(a1),d0
    8723/    A102 : 6714                		beq.s	loc_A118
    8724/    A104 : 33FC 8B07 00C0      		move.w	#$8B07,(vdp_control_port).l
             A10A : 0004             
    8725/    A10C : 31FC 8B07 C9CE      		move.w	#$8B07,($FFFFC9CE).w
    8726/    A112 : 137C 0000 001E      		move.b	#0,$1E(a1)
    8727/    A118 :                     
    8728/    A118 :                     loc_A118:
    8729/    A118 : 47F8 CDDE           		lea	($FFFFCDDE).w,a3
    8730/    A11C : 49F9 00C0 0000      		lea	(vdp_data_port).l,a4
    8731/    A122 : 23FC 4000 0010      		move.l	#$40000010,(vdp_control_port).l
             A128 : 00C0 0004          
    8732/    A12C : 6100 0020           		bsr.w	sub_A14E
    8733/    A130 : 4E75                		rts
    8734/    A132 :                     ; ---------------------------------------------------------------------------
    8735/    A132 :                     
    8736/    A132 :                     locret_A132:
    8737/    A132 : 4E75                		rts
    8738/    A134 :                     ; ---------------------------------------------------------------------------
    8739/    A134 :                     
    8740/    A134 :                     locret_A134:
    8741/    A134 : 4E75                		rts
    8742/    A136 :                     ; ---------------------------------------------------------------------------
    8743/    A136 : 289B                		move.l	(a3)+,(a4)
    8744/    A138 : 289B                		move.l	(a3)+,(a4)
    8745/    A13A : 289B                		move.l	(a3)+,(a4)
    8746/    A13C : 289B                		move.l	(a3)+,(a4)
    8747/    A13E : 289B                		move.l	(a3)+,(a4)
    8748/    A140 : 289B                		move.l	(a3)+,(a4)
    8749/    A142 : 289B                		move.l	(a3)+,(a4)
    8750/    A144 : 289B                		move.l	(a3)+,(a4)
    8751/    A146 : 289B                		move.l	(a3)+,(a4)
    8752/    A148 : 289B                		move.l	(a3)+,(a4)
    8753/    A14A : 289B                		move.l	(a3)+,(a4)
    8754/    A14C : 289B                		move.l	(a3)+,(a4)
    8755/    A14E :                     
    8756/    A14E :                     ; =============== S U B	R O U T	I N E =======================================
    8757/    A14E :                     
    8758/    A14E :                     
    8759/    A14E :                     sub_A14E:
    8760/    A14E : 289B                		move.l	(a3)+,(a4)
    8761/    A150 : 289B                		move.l	(a3)+,(a4)
    8762/    A152 : 289B                		move.l	(a3)+,(a4)
    8763/    A154 : 289B                		move.l	(a3)+,(a4)
    8764/    A156 : 289B                		move.l	(a3)+,(a4)
    8765/    A158 : 289B                		move.l	(a3)+,(a4)
    8766/    A15A : 289B                		move.l	(a3)+,(a4)
    8767/    A15C : 289B                		move.l	(a3)+,(a4)
    8768/    A15E : 289B                		move.l	(a3)+,(a4)
    8769/    A160 : 289B                		move.l	(a3)+,(a4)
    8770/    A162 : 289B                		move.l	(a3)+,(a4)
    8771/    A164 : 289B                		move.l	(a3)+,(a4)
    8772/    A166 : 289B                		move.l	(a3)+,(a4)
    8773/    A168 : 289B                		move.l	(a3)+,(a4)
    8774/    A16A : 289B                		move.l	(a3)+,(a4)
    8775/    A16C : 289B                		move.l	(a3)+,(a4)
    8776/    A16E : 289B                		move.l	(a3)+,(a4)
    8777/    A170 : 289B                		move.l	(a3)+,(a4)
    8778/    A172 : 289B                		move.l	(a3)+,(a4)
    8779/    A174 : 289B                		move.l	(a3)+,(a4)
    8780/    A176 : 4E75                		rts
    8781/    A178 :                     ; End of function sub_A14E
    8782/    A178 :                     
    8783/    A178 :                     
    8784/    A178 :                     ; =============== S U B	R O U T	I N E =======================================
    8785/    A178 :                     ; ---------------------------------------------------------------------------
    8786/    A178 :                     ; We think this is object loading subroutine or at least something to do with objects
    8787/    A178 :                     ; ---------------------------------------------------------------------------
    8788/    A178 :                     
    8789/    A178 :                     sub_A178:
    8790/    A178 : 4DF8 D850           		lea	($FFFFD850).w,a6
    8791/    A17C :                     
    8792/    A17C :                     loc_A17C:
    8793/    A17C : (MACRO)              		_move.w	0(a6),d0
    8793/    A17C :  (MACRO-2)                           insn2op move.w, 0(a6),d0
    8793/    A17C : =>FALSE                        if (chkop("0(a6)","0("))
    8793/    A17C :                                       if (chkop("d0","0("))
    8793/    A17C :                                             !move.w   0(a6),d0
    8793/    A17C :                                       else
    8793/    A17C :                                             !move.w   0(a6),1+d0
    8793/    A17C :                                             !org    *-1
    8793/    A17C :                                             !dc.b   0
    8793/    A17C : [8793]                                 endif
    8793/    A17C : =>TRUE                         else
    8793/    A17C : =>FALSE                              if chkop("d0","d")
    8793/    A17C :                                       if (chkop("d0","0("))
    8793/    A17C :                     start:
    8793/    A17C :                                             !move.w   1+0(a6),d0
    8793/    A17C :                     end:
    8793/    A17C :                                             !org    start+3
    8793/    A17C :                                             !dc.b   0
    8793/    A17C :                                             !org    end
    8793/    A17C :                                       else
    8793/    A17C :                                             !move.w   1+0(a6),1+d0
    8793/    A17C :                                             !org    *-3
    8793/    A17C :                                             !dc.b   0
    8793/    A17C :                                             !org    *+1
    8793/    A17C :                                             !dc.b   0
    8793/    A17C : [8793]                                 endif
    8793/    A17C : =>TRUE                               else
    8793/    A17C : 302E 0001                                   !move.w   1+0(a6),d0
    8793/    A17F :                                             !org    *-1
    8793/    A17F : 00                                          !dc.b   0
    8793/    A180 : [8793]                               endif
    8793/    A180 : [8793]                         endif
    8794/    A180 : 6602                		bne.s	loc_A184
    8795/    A182 : 4E75                		rts
    8796/    A184 :                     ; ---------------------------------------------------------------------------
    8797/    A184 :                     
    8798/    A184 :                     loc_A184:
    8799/    A184 : 3C40                		movea.w	d0,a6
    8800/    A186 : 7000                		moveq	#0,d0
    8801/    A188 : 102E 0006           		move.b	6(a6),d0
    8802/    A18C : 4EBB 0004           		jsr	loc_A192(pc,d0.w)
    8803/    A190 : 60EA                		bra.s	loc_A17C
    8804/    A192 :                     ; End of function sub_A178
    8805/    A192 :                     
    8806/    A192 :                     ; ---------------------------------------------------------------------------
    8807/    A192 :                     ; this is related to the controls of Sonic/Tails
    8808/    A192 :                     
    8809/    A192 :                     loc_A192:
    8810/    A192 : 6000 0016           		bra.w	loc_A1AA			; sonic controls
    8811/    A196 :                     ; ---------------------------------------------------------------------------
    8812/    A196 : 6000 0024           		bra.w	loc_A1BC			; tails controls
    8813/    A19A :                     ; ---------------------------------------------------------------------------
    8814/    A19A : 6000 0056           		bra.w	loc_A1F2			; seems to effect the positioning of Sonics arm
    8815/    A19E :                     ; ---------------------------------------------------------------------------
    8816/    A19E : 6000 005C           		bra.w	loc_A1FC			; something to do with when tails is still and sonic is running at full speed
    8817/    A1A2 :                     ; ---------------------------------------------------------------------------
    8818/    A1A2 : 6000 0086           		bra.w	loc_A22A			; (I think) Sonics loading parts
    8819/    A1A6 :                     ; ---------------------------------------------------------------------------
    8820/    A1A6 : 6000 008C           		bra.w	loc_A234			; tails' loading parts (his two tails etc)
    8821/    A1AA :                     ; ---------------------------------------------------------------------------
    8822/    A1AA :                     
    8823/    A1AA :                     loc_A1AA:
    8824/    A1AA : 3038 D866           		move.w	($FFFFD866).w,d0
    8825/    A1AE : 207B 001E           		movea.l	off_A1CE(pc,d0.w),a0
    8826/    A1B2 : 4BF8 D89C           		lea	($FFFFD89C).w,a5
    8827/    A1B6 : 3878 D864           		movea.w	($FFFFD864).w,a4
    8828/    A1BA : 4ED0                		jmp	(a0)
    8829/    A1BC :                     ; ---------------------------------------------------------------------------
    8830/    A1BC :                     
    8831/    A1BC :                     loc_A1BC:
    8832/    A1BC : 3038 D868           		move.w	($FFFFD868).w,d0
    8833/    A1C0 : 207B 000C           		movea.l	off_A1CE(pc,d0.w),a0
    8834/    A1C4 : 4BF8 D8AC           		lea	($FFFFD8AC).w,a5
    8835/    A1C8 : 3878 D862           		movea.w	($FFFFD862).w,a4
    8836/    A1CC : 4ED0                		jmp	(a0)
    8837/    A1CE :                     ; ---------------------------------------------------------------------------
    8838/    A1CE : 0000 A26A           off_A1CE:	dc.l loc_A26A				; something to do with stopping reflexes
    8839/    A1D2 : 0000 AB30           		dc.l loc_AB30
    8840/    A1D6 : 0000 B414           		dc.l locret_B414
    8841/    A1DA : 0000 B416           		dc.l locret_B416
    8842/    A1DE : 0000 B418           		dc.l locret_B418
    8843/    A1E2 : 0000 B41A           		dc.l locret_B41A
    8844/    A1E6 : 0000 B41C           		dc.l locret_B41C
    8845/    A1EA : 0000 B41E           		dc.l locret_B41E
    8846/    A1EE : 0000 B420           		dc.l locret_B420
    8847/    A1F2 :                     ; ---------------------------------------------------------------------------
    8848/    A1F2 :                     
    8849/    A1F2 :                     loc_A1F2:
    8850/    A1F2 : 3038 D866           		move.w	($FFFFD866).w,d0
    8851/    A1F6 : 207B 000E           		movea.l	off_A206(pc,d0.w),a0
    8852/    A1FA : 4ED0                		jmp	(a0)
    8853/    A1FC :                     ; ---------------------------------------------------------------------------
    8854/    A1FC :                     
    8855/    A1FC :                     loc_A1FC:
    8856/    A1FC : 3038 D868           		move.w	($FFFFD868).w,d0
    8857/    A200 : 207B 0004           		movea.l	off_A206(pc,d0.w),a0
    8858/    A204 : 4ED0                		jmp	(a0)		; A dynamic call... to entries on a table right next line?
    8859/    A206 :                     ; ---------------------------------------------------------------------------
    8860/    A206 : 0000 B422           off_A206:	dc.l loc_B422
    8861/    A20A : 0000 B81A           		dc.l loc_B81A
    8862/    A20E : 0000 A262           		dc.l loc_A262
    8863/    A212 : 0000 A262           		dc.l loc_A262
    8864/    A216 : 0000 A262           		dc.l loc_A262
    8865/    A21A : 0000 A262           		dc.l loc_A262
    8866/    A21E : 0000 A262           		dc.l loc_A262
    8867/    A222 : 0000 A262           		dc.l loc_A262
    8868/    A226 : 0000 A262           		dc.l loc_A262
    8869/    A22A :                     ; ---------------------------------------------------------------------------
    8870/    A22A :                     
    8871/    A22A :                     loc_A22A:
    8872/    A22A : 3038 D866           		move.w	($FFFFD866).w,d0
    8873/    A22E : 207B 000E           		movea.l	off_A23E(pc,d0.w),a0
    8874/    A232 : 4ED0                		jmp	(a0)
    8875/    A234 :                     ; ---------------------------------------------------------------------------
    8876/    A234 :                     
    8877/    A234 :                     loc_A234:
    8878/    A234 : 3038 D868           		move.w	($FFFFD868).w,d0
    8879/    A238 : 207B 0004           		movea.l	off_A23E(pc,d0.w),a0
    8880/    A23C : 4ED0                		jmp	(a0)
    8881/    A23E :                     ; ---------------------------------------------------------------------------
    8882/    A23E : 0000 A262           off_A23E:	dc.l loc_A262
    8883/    A242 : 0000 BC30           		dc.l loc_BC30
    8884/    A246 : 0000 A262           		dc.l loc_A262
    8885/    A24A : 0000 A262           		dc.l loc_A262
    8886/    A24E : 0000 A262           		dc.l loc_A262
    8887/    A252 : 0000 A262           		dc.l loc_A262
    8888/    A256 : 0000 A262           		dc.l loc_A262
    8889/    A25A : 0000 A262           		dc.l loc_A262
    8890/    A25E : 0000 A262           		dc.l loc_A262
    8891/    A262 :                     ; ---------------------------------------------------------------------------
    8892/    A262 :                     
    8893/    A262 :                     loc_A262:
    8894/    A262 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
    8895/    A268 : 4E75                		rts
    8896/    A26A :                     ; ---------------------------------------------------------------------------
    8897/    A26A :                     
    8898/    A26A :                     loc_A26A:
    8899/    A26A : 3D7C 0C10 0022      		move.w	#$C10,$22(a6)
    8900/    A270 : 7000                		moveq	#0,d0
    8901/    A272 : 102E 0007           		move.b	7(a6),d0
    8902/    A276 : 487A 24CE           		pea	loc_C746(pc)
    8903/    A27A : 303B 0006           		move.w	locret_A282(pc,d0.w),d0
    8904/    A27E : 4EFB 0002           		jmp	locret_A282(pc,d0.w)
    8905/    A282 :                     ; ---------------------------------------------------------------------------
    8906/    A282 :                     
    8907/    A282 :                     locret_A282:		; For some reason, this offset table has been disabled
    8908/    A282 : 4E75                		rts
    8909/    A284 :                     ; ---------------------------------------------------------------------------
    8910/    A284 : 0014                		dc.w loc_A296-locret_A282
    8911/    A286 : 0306                		dc.w loc_A588-locret_A282
    8912/    A288 : 03EC                		dc.w loc_A66E-locret_A282
    8913/    A28A : 03FA                		dc.w loc_A67C-locret_A282
    8914/    A28C : 04AC                		dc.w loc_A72E-locret_A282
    8915/    A28E : 0710                		dc.w locret_A992-locret_A282
    8916/    A290 : 0712                		dc.w loc_A994-locret_A282
    8917/    A292 : 0746                		dc.w loc_A9C8-locret_A282
    8918/    A294 : 07C4                		dc.w loc_AA46-locret_A282
    8919/    A296 :                     ; ---------------------------------------------------------------------------
    8920/    A296 :                     
    8921/    A296 :                     loc_A296:
    8922/    A296 : 487A 026E           		pea	loc_A506(pc)
    8923/    A29A : 08EE 0000 0025      		bset	#0,$25(a6)
    8924/    A2A0 : 08AE 0004 0025      		bclr	#4,$25(a6)
    8925/    A2A6 : 42AE 0018           		clr.l	$18(a6)
    8926/    A2AA : 42AE 001C           		clr.l	$1C(a6)
    8927/    A2AE : 0C6E 001A 0026      		cmpi.w	#$1A,$26(a6)
    8928/    A2B4 : 6700 01FE           		beq.w	loc_A4B4
    8929/    A2B8 : 4A15                		tst.b	(a5)
    8930/    A2BA : 6A10                		bpl.s	loc_A2CC
    8931/    A2BC : 1038 D89E           		move.b	($FFFFD89E).w,d0
    8932/    A2C0 : 0200 0070           		andi.b	#btnABC,d0
    8933/    A2C4 : 6706                		beq.s	loc_A2CC
    8934/    A2C6 : 426E 002C           		clr.w	$2C(a6)
    8935/    A2CA : 6008                		bra.s	loc_A2D4
    8936/    A2CC :                     ; ---------------------------------------------------------------------------
    8937/    A2CC :                     
    8938/    A2CC :                     loc_A2CC:
    8939/    A2CC : 302D 0008           		move.w	8(a5),d0
    8940/    A2D0 : 6600 0100           		bne.w	loc_A3D2
    8941/    A2D4 :                     
    8942/    A2D4 :                     loc_A2D4:
    8943/    A2D4 : 303C FFF4           		move.w	#$FFF4,d0
    8944/    A2D8 : 322E 002C           		move.w	$2C(a6),d1
    8945/    A2DC : 6712                		beq.s	loc_A2F0
    8946/    A2DE : 6A04                		bpl.s	loc_A2E4
    8947/    A2E0 : 4440                		neg.w	d0
    8948/    A2E2 : 4441                		neg.w	d1
    8949/    A2E4 :                     
    8950/    A2E4 :                     loc_A2E4:
    8951/    A2E4 : 0C41 000C           		cmpi.w	#$C,d1
    8952/    A2E8 : 6400 0144           		bcc.w	loc_A42E
    8953/    A2EC : 426E 002C           		clr.w	$2C(a6)
    8954/    A2F0 :                     
    8955/    A2F0 :                     loc_A2F0:
    8956/    A2F0 : 082E 0003 0025      		btst	#3,$25(a6)
    8957/    A2F6 : 56C0                		sne	d0
    8958/    A2F8 : 0200 0008           		andi.b	#8,d0
    8959/    A2FC : 1D40 0020           		move.b	d0,$20(a6)
    8960/    A300 : 11FC 000A FAE8      		move.b	#$A,($FFFFFAE8).w
    8961/    A306 : 102E 002A           		move.b	$2A(a6),d0
    8962/    A30A : 0600 0010           		addi.b	#$10,d0
    8963/    A30E : 0C00 0020           		cmpi.b	#$20,d0
    8964/    A312 : 6476                		bcc.s	loc_A38A
    8965/    A314 : 302E 0008           		move.w	8(a6),d0
    8966/    A318 : 7200                		moveq	#0,d1
    8967/    A31A : 122E 0023           		move.b	$23(a6),d1
    8968/    A31E : D26E 000C           		add.w	$C(a6),d1
    8969/    A322 : 382E 0024           		move.w	$24(a6),d4
    8970/    A326 : 0244 0002           		andi.w	#2,d4
    8971/    A32A : 6100 1C58           		bsr.w	sub_BF84
    8972/    A32E : 0C45 FF80           		cmpi.w	#$FF80,d5
    8973/    A332 : 6656                		bne.s	loc_A38A
    8974/    A334 : 082E 0003 0025      		btst	#3,$25(a6)
    8975/    A33A : 661A                		bne.s	loc_A356
    8976/    A33C : 1D7C 0008 0020      		move.b	#8,$20(a6)
    8977/    A342 : 7600                		moveq	#0,d3
    8978/    A344 : 162E 0022           		move.b	$22(a6),d3
    8979/    A348 : D043                		add.w	d3,d0
    8980/    A34A : 6100 1C38           		bsr.w	sub_BF84
    8981/    A34E : 0C45 FF80           		cmpi.w	#$FF80,d5
    8982/    A352 : 6628                		bne.s	loc_A37C
    8983/    A354 : 6018                		bra.s	loc_A36E
    8984/    A356 :                     ; ---------------------------------------------------------------------------
    8985/    A356 :                     
    8986/    A356 :                     loc_A356:
    8987/    A356 : 1D7C 0000 0020      		move.b	#0,$20(a6)
    8988/    A35C : 7600                		moveq	#0,d3
    8989/    A35E : 162E 0022           		move.b	$22(a6),d3
    8990/    A362 : 9043                		sub.w	d3,d0
    8991/    A364 : 6100 1C1E           		bsr.w	sub_BF84
    8992/    A368 : 0C45 FF80           		cmpi.w	#$FF80,d5
    8993/    A36C : 660E                		bne.s	loc_A37C
    8994/    A36E :                     
    8995/    A36E :                     loc_A36E:
    8996/    A36E : 3D7C 0018 0026      		move.w	#$18,$26(a6)
    8997/    A374 : 022E 0003 0028      		andi.b	#3,$28(a6)
    8998/    A37A : 4E75                		rts
    8999/    A37C :                     ; ---------------------------------------------------------------------------
    9000/    A37C :                     
    9001/    A37C :                     loc_A37C:
    9002/    A37C : 3D7C 0016 0026      		move.w	#$16,$26(a6)
    9003/    A382 : 022E 0003 0028      		andi.b	#3,$28(a6)
    9004/    A388 : 4E75                		rts
    9005/    A38A :                     ; ---------------------------------------------------------------------------
    9006/    A38A :                     
    9007/    A38A :                     loc_A38A:
    9008/    A38A : 302D 000A           		move.w	$A(a5),d0
    9009/    A38E : 6716                		beq.s	loc_A3A6
    9010/    A390 : 2D7C 0000 0100      		move.l	#$100,$26(a6)
             A396 : 0026             
    9011/    A398 : 4A40                		tst.w	d0
    9012/    A39A : 6B08                		bmi.s	locret_A3A4
    9013/    A39C : 2D7C 0000 0200      		move.l	#$200,$26(a6)
             A3A2 : 0026             
    9014/    A3A4 :                     
    9015/    A3A4 :                     locret_A3A4:
    9016/    A3A4 : 4E75                		rts
    9017/    A3A6 :                     ; ---------------------------------------------------------------------------
    9018/    A3A6 :                     
    9019/    A3A6 :                     loc_A3A6:
    9020/    A3A6 : 0C6E 0014 0026      		cmpi.w	#$14,$26(a6)
    9021/    A3AC : 6722                		beq.s	locret_A3D0
    9022/    A3AE : 4A6E 0026           		tst.w	$26(a6)
    9023/    A3B2 : 6704                		beq.s	loc_A3B8
    9024/    A3B4 : 426E 0028           		clr.w	$28(a6)
    9025/    A3B8 :                     
    9026/    A3B8 :                     loc_A3B8:
    9027/    A3B8 : 3D7C 0000 0026      		move.w	#0,$26(a6)
    9028/    A3BE : 4A2E 0029           		tst.b	$29(a6)
    9029/    A3C2 : 6A06                		bpl.s	loc_A3CA
    9030/    A3C4 : 3D7C 0014 0026      		move.w	#$14,$26(a6)
    9031/    A3CA :                     
    9032/    A3CA :                     loc_A3CA:
    9033/    A3CA : 1D7C 0000 0028      		move.b	#0,$28(a6)
    9034/    A3D0 :                     
    9035/    A3D0 :                     locret_A3D0:
    9036/    A3D0 : 4E75                		rts
    9037/    A3D2 :                     ; ---------------------------------------------------------------------------
    9038/    A3D2 :                     
    9039/    A3D2 :                     loc_A3D2:
    9040/    A3D2 : 122D 0003           		move.b	3(a5),d1
    9041/    A3D6 : 0201 000C           		andi.b	#$C,d1
    9042/    A3DA : 6704                		beq.s	loc_A3E0
    9043/    A3DC : 426E 0028           		clr.w	$28(a6)
    9044/    A3E0 :                     
    9045/    A3E0 :                     loc_A3E0:
    9046/    A3E0 : 322E 0024           		move.w	$24(a6),d1
    9047/    A3E4 : B141                		eor.w	d0,d1
    9048/    A3E6 : 342E 002C           		move.w	$2C(a6),d2
    9049/    A3EA : 48C2                		ext.l	d2
    9050/    A3EC : 4842                		swap	d2
    9051/    A3EE : =>FALSE              	if fixBugs
    9052/    A3EE :                     		eor.w	d2,d1
    9053/    A3EE :                     		andi.w	#8,d1
    9054/    A3EE : =>TRUE               	else
    9055/    A3EE : B342                		eor.w	d1,d2
    9056/    A3F0 : 0242 0008           		andi.w	#8,d2
    9057/    A3F4 : [9051]               	endif
    9058/    A3F4 : 6614                		bne.s	loc_A40A
    9059/    A3F6 : 0241 0008           		andi.w	#8,d1
    9060/    A3FA : B36E 0024           		eor.w	d1,$24(a6)
    9061/    A3FE : 4A6E 002C           		tst.w	$2C(a6)
    9062/    A402 : 6A26                		bpl.s	loc_A42A
    9063/    A404 : 446E 002C           		neg.w	$2C(a6)
    9064/    A408 : 6020                		bra.s	loc_A42A
    9065/    A40A :                     ; ---------------------------------------------------------------------------
    9066/    A40A :                     
    9067/    A40A :                     loc_A40A:
    9068/    A40A : 302E 002C           		move.w	$2C(a6),d0
    9069/    A40E : 6A02                		bpl.s	loc_A412
    9070/    A410 : 4440                		neg.w	d0
    9071/    A412 :                     
    9072/    A412 :                     loc_A412:
    9073/    A412 : 0C40 0080           		cmpi.w	#$80,d0
    9074/    A416 : 6408                		bcc.s	loc_A420
    9075/    A418 : B36E 0024           		eor.w	d1,$24(a6)
    9076/    A41C : 7000                		moveq	#0,d0
    9077/    A41E : 6012                		bra.s	loc_A432
    9078/    A420 :                     ; ---------------------------------------------------------------------------
    9079/    A420 :                     
    9080/    A420 :                     loc_A420:
    9081/    A420 : 2D7C 001A 0000      		move.l	#$1A0000,$26(a6)
             A426 : 0026             
    9082/    A428 : 4E75                		rts
    9083/    A42A :                     ; ---------------------------------------------------------------------------
    9084/    A42A :                     
    9085/    A42A :                     loc_A42A:
    9086/    A42A : 303C 000C           		move.w	#$C,d0
    9087/    A42E :                     
    9088/    A42E :                     loc_A42E:
    9089/    A42E : D06E 002C           		add.w	$2C(a6),d0
    9090/    A432 :                     
    9091/    A432 :                     loc_A432:
    9092/    A432 : 3D40 002C           		move.w	d0,$2C(a6)
    9093/    A436 : 6A02                		bpl.s	loc_A43A
    9094/    A438 : 4440                		neg.w	d0
    9095/    A43A :                     
    9096/    A43A :                     loc_A43A:
    9097/    A43A : 0C40 0400           		cmpi.w	#$400,d0
    9098/    A43E : 650A                		bcs.s	loc_A44A
    9099/    A440 : 740A                		moveq	#$A,d2
    9100/    A442 : 026E 03FF 0028      		andi.w	#$3FF,$28(a6)
    9101/    A448 : 6010                		bra.s	loc_A45A
    9102/    A44A :                     ; ---------------------------------------------------------------------------
    9103/    A44A :                     
    9104/    A44A :                     loc_A44A:
    9105/    A44A : E848                		lsr.w	#4,d0
    9106/    A44C : 0C40 0010           		cmpi.w	#$10,d0
    9107/    A450 : 6402                		bcc.s	loc_A454
    9108/    A452 : 7010                		moveq	#$10,d0
    9109/    A454 :                     
    9110/    A454 :                     loc_A454:
    9111/    A454 : D16E 0028           		add.w	d0,$28(a6)
    9112/    A458 : 7402                		moveq	#2,d2
    9113/    A45A :                     
    9114/    A45A :                     loc_A45A:
    9115/    A45A : 102E 002A           		move.b	$2A(a6),d0
    9116/    A45E : 082E 0003 0025      		btst	#3,$25(a6)
    9117/    A464 : 6622                		bne.s	loc_A488
    9118/    A466 : 0400 0010           		subi.b	#$10,d0
    9119/    A46A : 4400                		neg.b	d0
    9120/    A46C : E848                		lsr.w	#4,d0
    9121/    A46E : 0800 0003           		btst	#3,d0
    9122/    A472 : 56C1                		sne	d1
    9123/    A474 : 0240 0006           		andi.w	#6,d0
    9124/    A478 : D042                		add.w	d2,d0
    9125/    A47A : 3D40 0026           		move.w	d0,$26(a6)
    9126/    A47E : 0201 0018           		andi.b	#$18,d1
    9127/    A482 : 1D41 0020           		move.b	d1,$20(a6)
    9128/    A486 : 4E75                		rts
    9129/    A488 :                     ; ---------------------------------------------------------------------------
    9130/    A488 :                     
    9131/    A488 :                     loc_A488:
    9132/    A488 : 0400 0080           		subi.b	#$80,d0
    9133/    A48C : 4400                		neg.b	d0
    9134/    A48E : 0400 0010           		subi.b	#$10,d0
    9135/    A492 : 4400                		neg.b	d0
    9136/    A494 : E848                		lsr.w	#4,d0
    9137/    A496 : 0800 0003           		btst	#3,d0
    9138/    A49A : 56C1                		sne	d1
    9139/    A49C : 0240 0006           		andi.w	#6,d0
    9140/    A4A0 : D042                		add.w	d2,d0
    9141/    A4A2 : 3D40 0026           		move.w	d0,$26(a6)
    9142/    A4A6 : 0201 0018           		andi.b	#$18,d1
    9143/    A4AA : 0A01 0010           		eori.b	#$10,d1
    9144/    A4AE : 1D41 0020           		move.b	d1,$20(a6)
    9145/    A4B2 : 4E75                		rts
    9146/    A4B4 :                     ; ---------------------------------------------------------------------------
    9147/    A4B4 :                     
    9148/    A4B4 :                     loc_A4B4:
    9149/    A4B4 : 082E 0003 0025      		btst	#3,$25(a6)
    9150/    A4BA : 56C0                		sne	d0
    9151/    A4BC : 4600                		not.b	d0
    9152/    A4BE : 0200 0008           		andi.b	#8,d0
    9153/    A4C2 : 1D40 0020           		move.b	d0,$20(a6)
    9154/    A4C6 : 303C FF80           		move.w	#$FF80,d0
    9155/    A4CA : 322E 002C           		move.w	$2C(a6),d1
    9156/    A4CE : 6710                		beq.s	loc_A4E0
    9157/    A4D0 : 6A04                		bpl.s	loc_A4D6
    9158/    A4D2 : 4440                		neg.w	d0
    9159/    A4D4 : 4441                		neg.w	d1
    9160/    A4D6 :                     
    9161/    A4D6 :                     loc_A4D6:
    9162/    A4D6 : 0C41 0080           		cmpi.w	#$80,d1
    9163/    A4DA : 6414                		bcc.s	loc_A4F0
    9164/    A4DC : 426E 002C           		clr.w	$2C(a6)
    9165/    A4E0 :                     
    9166/    A4E0 :                     loc_A4E0:
    9167/    A4E0 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             A4E6 : 0026             
    9168/    A4E8 : 0A2E 0008 0025      		eori.b	#8,$25(a6)
    9169/    A4EE : 4E75                		rts
    9170/    A4F0 :                     ; ---------------------------------------------------------------------------
    9171/    A4F0 :                     
    9172/    A4F0 :                     loc_A4F0:
    9173/    A4F0 : D06E 002C           		add.w	$2C(a6),d0
    9174/    A4F4 : 3D40 002C           		move.w	d0,$2C(a6)
    9175/    A4F8 : 3D7C 001A 0026      		move.w	#$1A,$26(a6)
    9176/    A4FE : 022E 0003 0028      		andi.b	#3,$28(a6)
    9177/    A504 : 4E75                		rts
    9178/    A506 :                     ; ---------------------------------------------------------------------------
    9179/    A506 :                     
    9180/    A506 :                     loc_A506:
    9181/    A506 : 0CAE 0000 0200      		cmpi.l	#$200,$26(a6)
             A50C : 0026             
    9182/    A50E : 670E                		beq.s	loc_A51E
    9183/    A510 : 4A15                		tst.b	(a5)
    9184/    A512 : 6B1C                		bmi.s	loc_A530
    9185/    A514 : 6100 0560           		bsr.w	sub_AA76
    9186/    A518 : 6100 058A           		bsr.w	sub_AAA4
    9187/    A51C : 6012                		bra.s	loc_A530
    9188/    A51E :                     ; ---------------------------------------------------------------------------
    9189/    A51E :                     
    9190/    A51E :                     loc_A51E:
    9191/    A51E : 102D 0003           		move.b	3(a5),d0
    9192/    A522 : 0200 0070           		andi.b	#$70,d0
    9193/    A526 : 6708                		beq.s	loc_A530
    9194/    A528 : 1D7C 000E 0007      		move.b	#$E,7(a6)
    9195/    A52E : 4E75                		rts
    9196/    A530 :                     ; ---------------------------------------------------------------------------
    9197/    A530 :                     
    9198/    A530 :                     loc_A530:
    9199/    A530 : 6100 05C6           		bsr.w	nullsub_2
    9200/    A534 : 6100 268A           		bsr.w	sub_CBC0
    9201/    A538 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
    9202/    A53E : 4EB9 0000 C29E      		jsr	(sub_C29E).l
    9203/    A544 : 670A                		beq.s	loc_A550
    9204/    A546 : 31C0 FAC0           		move.w	d0,($FFFFFAC0).w
    9205/    A54A : 31C1 FAC2           		move.w	d1,($FFFFFAC2).w
    9206/    A54E : 4E75                		rts
    9207/    A550 :                     ; ---------------------------------------------------------------------------
    9208/    A550 :                     
    9209/    A550 :                     loc_A550:
    9210/    A550 : 08AE 0000 0025      		bclr	#0,$25(a6)
    9211/    A556 : 1D7C 0008 0007      		move.b	#8,7(a6)
    9212/    A55C : 142E 002A           		move.b	$2A(a6),d2
    9213/    A560 : 082E 0003 0025      		btst	#3,$25(a6)
    9214/    A566 : 6704                		beq.s	loc_A56C
    9215/    A568 : 0602 0080           		addi.b	#-$80,d2
    9216/    A56C :                     
    9217/    A56C :                     loc_A56C:
    9218/    A56C : 4EB8 3F14           		jsr	(CalcSine).w
    9219/    A570 : 342E 002C           		move.w	$2C(a6),d2
    9220/    A574 : C1C2                		muls.w	d2,d0
    9221/    A576 : C3C2                		muls.w	d2,d1
    9222/    A578 : EC80                		asr.l	#6,d0
    9223/    A57A : EC81                		asr.l	#6,d1
    9224/    A57C : 2D40 0018           		move.l	d0,$18(a6)
    9225/    A580 : 2D41 001C           		move.l	d1,$1C(a6)
    9226/    A584 : 7000                		moveq	#0,d0
    9227/    A586 : 4E75                		rts
    9228/    A588 :                     ; ---------------------------------------------------------------------------
    9229/    A588 :                     
    9230/    A588 :                     loc_A588:
    9231/    A588 : 082E 0000 0025      		btst	#0,$25(a6)
    9232/    A58E : 6600 00AE           		bne.w	loc_A63E
    9233/    A592 : 487A 0086           		pea	loc_A61A(pc)
    9234/    A596 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             A59C : 001C             
    9235/    A59E : 08AE 0000 0025      		bclr	#0,$25(a6)
    9236/    A5A4 : 08EE 0004 0025      		bset	#4,$25(a6)
    9237/    A5AA : 3D7C 0012 0026      		move.w	#$12,$26(a6)
    9238/    A5B0 : 422E 002A           		clr.b	$2A(a6)
    9239/    A5B4 : 426E 002C           		clr.w	$2C(a6)
    9240/    A5B8 : 302D 0008           		move.w	8(a5),d0
    9241/    A5BC : 6626                		bne.s	loc_A5E4
    9242/    A5BE : 202E 0018           		move.l	$18(a6),d0
    9243/    A5C2 : 2200                		move.l	d0,d1
    9244/    A5C4 : 6A02                		bpl.s	loc_A5C8
    9245/    A5C6 : 4481                		neg.l	d1
    9246/    A5C8 :                     
    9247/    A5C8 :                     loc_A5C8:
    9248/    A5C8 : 0281 FFFF F800      		andi.l	#$FFFFF800,d1
    9249/    A5CE : 6606                		bne.s	loc_A5D6
    9250/    A5D0 : 42AE 0018           		clr.l	$18(a6)
    9251/    A5D4 : 6026                		bra.s	loc_A5FC
    9252/    A5D6 :                     ; ---------------------------------------------------------------------------
    9253/    A5D6 :                     
    9254/    A5D6 :                     loc_A5D6:
    9255/    A5D6 : 4840                		swap	d0
    9256/    A5D8 : 48C0                		ext.l	d0
    9257/    A5DA : 4840                		swap	d0
    9258/    A5DC : 0040 0001           		ori.w	#1,d0
    9259/    A5E0 : 4440                		neg.w	d0
    9260/    A5E2 : 600E                		bra.s	loc_A5F2
    9261/    A5E4 :                     ; ---------------------------------------------------------------------------
    9262/    A5E4 :                     
    9263/    A5E4 :                     loc_A5E4:
    9264/    A5E4 : 322E 0024           		move.w	$24(a6),d1
    9265/    A5E8 : B141                		eor.w	d0,d1
    9266/    A5EA : 0241 0008           		andi.w	#8,d1
    9267/    A5EE : B36E 0024           		eor.w	d1,$24(a6)
    9268/    A5F2 :                     
    9269/    A5F2 :                     loc_A5F2:
    9270/    A5F2 : 4840                		swap	d0
    9271/    A5F4 : 9040                		sub.w	d0,d0
    9272/    A5F6 : E880                		asr.l	#4,d0
    9273/    A5F8 : D1AE 0018           		add.l	d0,$18(a6)
    9274/    A5FC :                     
    9275/    A5FC :                     loc_A5FC:
    9276/    A5FC : 102D 0002           		move.b	2(a5),d0
    9277/    A600 : 0200 0070           		andi.b	#$70,d0
    9278/    A604 : 6612                		bne.s	locret_A618
    9279/    A606 : 0CAE FFFC 8000      		cmpi.l	#$FFFC8000,$1C(a6)
             A60C : 001C             
    9280/    A60E : 6C08                		bge.s	locret_A618
    9281/    A610 : 2D7C FFFC 8000      		move.l	#$FFFC8000,$1C(a6)
             A616 : 001C             
    9282/    A618 :                     
    9283/    A618 :                     locret_A618:
    9284/    A618 : 4E75                		rts
    9285/    A61A :                     ; ---------------------------------------------------------------------------
    9286/    A61A :                     
    9287/    A61A :                     loc_A61A:
    9288/    A61A : 6100 25A4           		bsr.w	sub_CBC0
    9289/    A61E : 6100 0456           		bsr.w	sub_AA76
    9290/    A622 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
    9291/    A628 : 4EB9 0000 C636      		jsr	(sub_C636).l
    9292/    A62E : 6602                		bne.s	loc_A632
    9293/    A630 : 4E75                		rts
    9294/    A632 :                     ; ---------------------------------------------------------------------------
    9295/    A632 :                     
    9296/    A632 :                     loc_A632:
    9297/    A632 : 4AAE 001C           		tst.l	$1C(a6)
    9298/    A636 : 6A06                		bpl.s	loc_A63E
    9299/    A638 : 42AE 001C           		clr.l	$1C(a6)
    9300/    A63C : 4E75                		rts
    9301/    A63E :                     ; ---------------------------------------------------------------------------
    9302/    A63E :                     
    9303/    A63E :                     loc_A63E:
    9304/    A63E : 202E 0018           		move.l	$18(a6),d0
    9305/    A642 : 6A0A                		bpl.s	loc_A64E
    9306/    A644 : 082E 0003 0025      		btst	#3,$25(a6)
    9307/    A64A : 660A                		bne.s	loc_A656
    9308/    A64C : 600A                		bra.s	loc_A658
    9309/    A64E :                     ; ---------------------------------------------------------------------------
    9310/    A64E :                     
    9311/    A64E :                     loc_A64E:
    9312/    A64E : 082E 0003 0025      		btst	#3,$25(a6)
    9313/    A654 : 6702                		beq.s	loc_A658
    9314/    A656 :                     
    9315/    A656 :                     loc_A656:
    9316/    A656 : 4480                		neg.l	d0
    9317/    A658 :                     
    9318/    A658 :                     loc_A658:
    9319/    A658 : E080                		asr.l	#8,d0
    9320/    A65A : 3D40 002C           		move.w	d0,$2C(a6)
    9321/    A65E : 1D7C 0002 0007      		move.b	#2,7(a6)
    9322/    A664 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             A66A : 0026             
    9323/    A66C : 4E75                		rts
    9324/    A66E :                     ; ---------------------------------------------------------------------------
    9325/    A66E :                     
    9326/    A66E :                     loc_A66E:
    9327/    A66E : 1D7C 0002 0007      		move.b	#2,7(a6)
    9328/    A674 : 08EE 0004 0025      		bset	#4,$25(a6)
    9329/    A67A : 4E75                		rts
    9330/    A67C :                     ; ---------------------------------------------------------------------------
    9331/    A67C :                     
    9332/    A67C :                     loc_A67C:
    9333/    A67C : 487A 006A           		pea	loc_A6E8(pc)
    9334/    A680 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             A686 : 001C             
    9335/    A688 : 08AE 0000 0025      		bclr	#0,$25(a6)
    9336/    A68E : 08EE 0004 0025      		bset	#4,$25(a6)
    9337/    A694 : 3D7C 0012 0026      		move.w	#$12,$26(a6)
    9338/    A69A : 422E 002A           		clr.b	$2A(a6)
    9339/    A69E : 426E 002C           		clr.w	$2C(a6)
    9340/    A6A2 : 302D 0008           		move.w	8(a5),d0
    9341/    A6A6 : 6626                		bne.s	loc_A6CE
    9342/    A6A8 : 202E 0018           		move.l	$18(a6),d0
    9343/    A6AC : 2200                		move.l	d0,d1
    9344/    A6AE : 6A02                		bpl.s	loc_A6B2
    9345/    A6B0 : 4481                		neg.l	d1
    9346/    A6B2 :                     
    9347/    A6B2 :                     loc_A6B2:
    9348/    A6B2 : 0281 FFFF F800      		andi.l	#$FFFFF800,d1
    9349/    A6B8 : 6606                		bne.s	loc_A6C0
    9350/    A6BA : 42AE 0018           		clr.l	$18(a6)
    9351/    A6BE : 4E75                		rts
    9352/    A6C0 :                     ; ---------------------------------------------------------------------------
    9353/    A6C0 :                     
    9354/    A6C0 :                     loc_A6C0:
    9355/    A6C0 : 4840                		swap	d0
    9356/    A6C2 : 48C0                		ext.l	d0
    9357/    A6C4 : 4840                		swap	d0
    9358/    A6C6 : 0040 0001           		ori.w	#1,d0
    9359/    A6CA : 4440                		neg.w	d0
    9360/    A6CC : 600E                		bra.s	loc_A6DC
    9361/    A6CE :                     ; ---------------------------------------------------------------------------
    9362/    A6CE :                     
    9363/    A6CE :                     loc_A6CE:
    9364/    A6CE : 322E 0024           		move.w	$24(a6),d1
    9365/    A6D2 : B141                		eor.w	d0,d1
    9366/    A6D4 : 0241 0008           		andi.w	#8,d1
    9367/    A6D8 : B36E 0024           		eor.w	d1,$24(a6)
    9368/    A6DC :                     
    9369/    A6DC :                     loc_A6DC:
    9370/    A6DC : 4840                		swap	d0
    9371/    A6DE : 9040                		sub.w	d0,d0
    9372/    A6E0 : E880                		asr.l	#4,d0
    9373/    A6E2 : D1AE 0018           		add.l	d0,$18(a6)
    9374/    A6E6 : 4E75                		rts
    9375/    A6E8 :                     ; ---------------------------------------------------------------------------
    9376/    A6E8 :                     
    9377/    A6E8 :                     loc_A6E8:
    9378/    A6E8 : 6100 24D6           		bsr.w	sub_CBC0
    9379/    A6EC : 6100 0388           		bsr.w	sub_AA76
    9380/    A6F0 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
    9381/    A6F6 : 4EB9 0000 C636      		jsr	(sub_C636).l
    9382/    A6FC : 672E                		beq.s	locret_A72C
    9383/    A6FE : 202E 0018           		move.l	$18(a6),d0
    9384/    A702 : 6A0A                		bpl.s	loc_A70E
    9385/    A704 : 082E 0003 0025      		btst	#3,$25(a6)
    9386/    A70A : 660A                		bne.s	loc_A716
    9387/    A70C : 600A                		bra.s	loc_A718
    9388/    A70E :                     ; ---------------------------------------------------------------------------
    9389/    A70E :                     
    9390/    A70E :                     loc_A70E:
    9391/    A70E : 082E 0003 0025      		btst	#3,$25(a6)
    9392/    A714 : 6702                		beq.s	loc_A718
    9393/    A716 :                     
    9394/    A716 :                     loc_A716:
    9395/    A716 : 4480                		neg.l	d0
    9396/    A718 :                     
    9397/    A718 :                     loc_A718:
    9398/    A718 : E080                		asr.l	#8,d0
    9399/    A71A : 3D40 002C           		move.w	d0,$2C(a6)
    9400/    A71E : 1D7C 0002 0007      		move.b	#2,7(a6)
    9401/    A724 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             A72A : 0026             
    9402/    A72C :                     
    9403/    A72C :                     locret_A72C:
    9404/    A72C : 4E75                		rts
    9405/    A72E :                     ; ---------------------------------------------------------------------------
    9406/    A72E :                     
    9407/    A72E :                     loc_A72E:
    9408/    A72E : 082E 0004 0025      		btst	#4,$25(a6)
    9409/    A734 : 6702                		beq.s	loc_A738
    9410/    A736 : 4E75                		rts
    9411/    A738 :                     ; ---------------------------------------------------------------------------
    9412/    A738 :                     
    9413/    A738 :                     loc_A738:
    9414/    A738 : 700A                		moveq	#$A,d0
    9415/    A73A : 082E 0003 0020      		btst	#3,$20(a6)
    9416/    A740 : 6702                		beq.s	loc_A744
    9417/    A742 : 4440                		neg.w	d0
    9418/    A744 :                     
    9419/    A744 :                     loc_A744:
    9420/    A744 : D06E 0008           		add.w	8(a6),d0
    9421/    A748 : 3940 0008           		move.w	d0,8(a4)
    9422/    A74C : 302E 000C           		move.w	$C(a6),d0
    9423/    A750 : 0440 000A           		subi.w	#$A,d0
    9424/    A754 : 3940 000C           		move.w	d0,$C(a4)
    9425/    A758 : 197C 000C 0007      		move.b	#$C,7(a4)
    9426/    A75E : 487A 0176           		pea	loc_A8D6(pc)
    9427/    A762 : 08AE 0004 0025      		bclr	#4,$25(a6)
    9428/    A768 : 082E 0000 0025      		btst	#0,$25(a6)
    9429/    A76E : 6708                		beq.s	loc_A778
    9430/    A770 : 42AE 0018           		clr.l	$18(a6)
    9431/    A774 : 42AE 001C           		clr.l	$1C(a6)
    9432/    A778 :                     
    9433/    A778 :                     loc_A778:
    9434/    A778 : 0C6E 001A 0026      		cmpi.w	#$1A,$26(a6)
    9435/    A77E : 6700 010A           		beq.w	loc_A88A
    9436/    A782 : 302D 0008           		move.w	8(a5),d0
    9437/    A786 : 6600 0046           		bne.w	loc_A7CE
    9438/    A78A : 303C FFF4           		move.w	#$FFF4,d0
    9439/    A78E : 322E 002C           		move.w	$2C(a6),d1
    9440/    A792 : 6712                		beq.s	loc_A7A6
    9441/    A794 : 6A04                		bpl.s	loc_A79A
    9442/    A796 : 4440                		neg.w	d0
    9443/    A798 : 4441                		neg.w	d1
    9444/    A79A :                     
    9445/    A79A :                     loc_A79A:
    9446/    A79A : 0C41 000C           		cmpi.w	#$C,d1
    9447/    A79E : 6400 0064           		bcc.w	loc_A804
    9448/    A7A2 : 426E 002C           		clr.w	$2C(a6)
    9449/    A7A6 :                     
    9450/    A7A6 :                     loc_A7A6:
    9451/    A7A6 : 082E 0003 0025      		btst	#3,$25(a6)
    9452/    A7AC : 56C0                		sne	d0
    9453/    A7AE : 0200 0008           		andi.b	#8,d0
    9454/    A7B2 : 1D40 0020           		move.b	d0,$20(a6)
    9455/    A7B6 : 2D7C 001C 0000      		move.l	#$1C0000,$26(a6)
             A7BC : 0026             
    9456/    A7BE : 302D 000A           		move.w	$A(a5),d0
    9457/    A7C2 : 6A08                		bpl.s	locret_A7CC
    9458/    A7C4 : 2D7C 001C 0100      		move.l	#$1C0100,$26(a6)
             A7CA : 0026             
    9459/    A7CC :                     
    9460/    A7CC :                     locret_A7CC:
    9461/    A7CC : 4E75                		rts
    9462/    A7CE :                     ; ---------------------------------------------------------------------------
    9463/    A7CE :                     
    9464/    A7CE :                     loc_A7CE:
    9465/    A7CE : 322E 0024           		move.w	$24(a6),d1
    9466/    A7D2 : B141                		eor.w	d0,d1
    9467/    A7D4 : 0241 0008           		andi.w	#8,d1
    9468/    A7D8 : 6606                		bne.s	loc_A7E0
    9469/    A7DA : 4A6E 002C           		tst.w	$2C(a6)
    9470/    A7DE : 6A20                		bpl.s	loc_A800
    9471/    A7E0 :                     
    9472/    A7E0 :                     loc_A7E0:
    9473/    A7E0 : 302E 002C           		move.w	$2C(a6),d0
    9474/    A7E4 : 6A02                		bpl.s	loc_A7E8
    9475/    A7E6 : 4440                		neg.w	d0
    9476/    A7E8 :                     
    9477/    A7E8 :                     loc_A7E8:
    9478/    A7E8 : 0C40 0080           		cmpi.w	#$80,d0
    9479/    A7EC : 6408                		bcc.s	loc_A7F6
    9480/    A7EE : B36E 0024           		eor.w	d1,$24(a6)
    9481/    A7F2 : 7000                		moveq	#0,d0
    9482/    A7F4 : 6012                		bra.s	loc_A808
    9483/    A7F6 :                     ; ---------------------------------------------------------------------------
    9484/    A7F6 :                     
    9485/    A7F6 :                     loc_A7F6:
    9486/    A7F6 : 2D7C 001A 0000      		move.l	#$1A0000,$26(a6)
             A7FC : 0026             
    9487/    A7FE : 4E75                		rts
    9488/    A800 :                     ; ---------------------------------------------------------------------------
    9489/    A800 :                     
    9490/    A800 :                     loc_A800:
    9491/    A800 : 303C 000C           		move.w	#$C,d0
    9492/    A804 :                     
    9493/    A804 :                     loc_A804:
    9494/    A804 : D06E 002C           		add.w	$2C(a6),d0
    9495/    A808 :                     
    9496/    A808 :                     loc_A808:
    9497/    A808 : 3D40 002C           		move.w	d0,$2C(a6)
    9498/    A80C : 6A02                		bpl.s	loc_A810
    9499/    A80E : 4440                		neg.w	d0
    9500/    A810 :                     
    9501/    A810 :                     loc_A810:
    9502/    A810 : 0C40 0400           		cmpi.w	#$400,d0
    9503/    A814 : 650A                		bcs.s	loc_A820
    9504/    A816 : 7426                		moveq	#$26,d2
    9505/    A818 : 026E 03FF 0028      		andi.w	#$3FF,$28(a6)
    9506/    A81E : 6010                		bra.s	loc_A830
    9507/    A820 :                     ; ---------------------------------------------------------------------------
    9508/    A820 :                     
    9509/    A820 :                     loc_A820:
    9510/    A820 : E848                		lsr.w	#4,d0
    9511/    A822 : 0C40 0010           		cmpi.w	#$10,d0
    9512/    A826 : 6402                		bcc.s	loc_A82A
    9513/    A828 : 7010                		moveq	#$10,d0
    9514/    A82A :                     
    9515/    A82A :                     loc_A82A:
    9516/    A82A : D16E 0028           		add.w	d0,$28(a6)
    9517/    A82E : 741E                		moveq	#$1E,d2
    9518/    A830 :                     
    9519/    A830 :                     loc_A830:
    9520/    A830 : 102E 002A           		move.b	$2A(a6),d0
    9521/    A834 : 082E 0003 0025      		btst	#3,$25(a6)
    9522/    A83A : 6622                		bne.s	loc_A85E
    9523/    A83C : 0400 0010           		subi.b	#$10,d0
    9524/    A840 : 4400                		neg.b	d0
    9525/    A842 : E848                		lsr.w	#4,d0
    9526/    A844 : 0800 0003           		btst	#3,d0
    9527/    A848 : 56C1                		sne	d1
    9528/    A84A : 0240 0006           		andi.w	#6,d0
    9529/    A84E : D042                		add.w	d2,d0
    9530/    A850 : 3D40 0026           		move.w	d0,$26(a6)
    9531/    A854 : 0201 0018           		andi.b	#$18,d1
    9532/    A858 : 1D41 0020           		move.b	d1,$20(a6)
    9533/    A85C : 4E75                		rts
    9534/    A85E :                     ; ---------------------------------------------------------------------------
    9535/    A85E :                     
    9536/    A85E :                     loc_A85E:
    9537/    A85E : 0400 0080           		subi.b	#$80,d0
    9538/    A862 : 4400                		neg.b	d0
    9539/    A864 : 0400 0010           		subi.b	#$10,d0
    9540/    A868 : 4400                		neg.b	d0
    9541/    A86A : E848                		lsr.w	#4,d0
    9542/    A86C : 0800 0003           		btst	#3,d0
    9543/    A870 : 56C1                		sne	d1
    9544/    A872 : 0240 0006           		andi.w	#6,d0
    9545/    A876 : D042                		add.w	d2,d0
    9546/    A878 : 3D40 0026           		move.w	d0,$26(a6)
    9547/    A87C : 0201 0018           		andi.b	#$18,d1
    9548/    A880 : 0A01 0010           		eori.b	#$10,d1
    9549/    A884 : 1D41 0020           		move.b	d1,$20(a6)
    9550/    A888 : 4E75                		rts
    9551/    A88A :                     ; ---------------------------------------------------------------------------
    9552/    A88A :                     
    9553/    A88A :                     loc_A88A:
    9554/    A88A : 082E 0003 0025      		btst	#3,$25(a6)
    9555/    A890 : 56C0                		sne	d0
    9556/    A892 : 4600                		not.b	d0
    9557/    A894 : 0200 0008           		andi.b	#8,d0
    9558/    A898 : 1D40 0020           		move.b	d0,$20(a6)
    9559/    A89C : 303C FF80           		move.w	#$FF80,d0
    9560/    A8A0 : 322E 002C           		move.w	$2C(a6),d1
    9561/    A8A4 : 6710                		beq.s	loc_A8B6
    9562/    A8A6 : 6A04                		bpl.s	loc_A8AC
    9563/    A8A8 : 4440                		neg.w	d0
    9564/    A8AA : 4441                		neg.w	d1
    9565/    A8AC :                     
    9566/    A8AC :                     loc_A8AC:
    9567/    A8AC : 0C41 0080           		cmpi.w	#$80,d1
    9568/    A8B0 : 6414                		bcc.s	loc_A8C6
    9569/    A8B2 : 426E 002C           		clr.w	$2C(a6)
    9570/    A8B6 :                     
    9571/    A8B6 :                     loc_A8B6:
    9572/    A8B6 : 2D7C 001C 0000      		move.l	#$1C0000,$26(a6)
             A8BC : 0026             
    9573/    A8BE : 0A2E 0008 0025      		eori.b	#8,$25(a6)
    9574/    A8C4 : 4E75                		rts
    9575/    A8C6 :                     ; ---------------------------------------------------------------------------
    9576/    A8C6 :                     
    9577/    A8C6 :                     loc_A8C6:
    9578/    A8C6 : D06E 002C           		add.w	$2C(a6),d0
    9579/    A8CA : 3D40 002C           		move.w	d0,$2C(a6)
    9580/    A8CE : 022E 0003 0028      		andi.b	#3,$28(a6)
    9581/    A8D4 : 4E75                		rts
    9582/    A8D6 :                     ; ---------------------------------------------------------------------------
    9583/    A8D6 :                     
    9584/    A8D6 :                     loc_A8D6:
    9585/    A8D6 : 102D 0002           		move.b	2(a5),d0
    9586/    A8DA : 1200                		move.b	d0,d1
    9587/    A8DC : 0200 0070           		andi.b	#$70,d0
    9588/    A8E0 : 6646                		bne.s	loc_A928
    9589/    A8E2 : 142D 0005           		move.b	5(a5),d2
    9590/    A8E6 : 0201 000F           		andi.b	#$F,d1
    9591/    A8EA : 660C                		bne.s	loc_A8F8
    9592/    A8EC : 74A0                		moveq	#-$60,d2
    9593/    A8EE : 082E 0003 0025      		btst	#3,$25(a6)
    9594/    A8F4 : 6602                		bne.s	loc_A8F8
    9595/    A8F6 : 74E0                		moveq	#-$20,d2
    9596/    A8F8 :                     
    9597/    A8F8 :                     loc_A8F8:
    9598/    A8F8 : 4EB8 3F14           		jsr	(CalcSine).w
    9599/    A8FC : 48C0                		ext.l	d0
    9600/    A8FE : 48C1                		ext.l	d1
    9601/    A900 : EB80                		asl.l	#5,d0
    9602/    A902 : EB81                		asl.l	#5,d1
    9603/    A904 : D1AC 0008           		add.l	d0,8(a4)
    9604/    A908 : D3AC 000C           		add.l	d1,$C(a4)
    9605/    A90C : D0AE 0018           		add.l	$18(a6),d0
    9606/    A910 : D2AE 001C           		add.l	$1C(a6),d1
    9607/    A914 : 2940 0018           		move.l	d0,$18(a4)
    9608/    A918 : 2941 001C           		move.l	d1,$1C(a4)
    9609/    A91C : 197C 0008 0007      		move.b	#8,7(a4)
    9610/    A922 : 1D7C 0002 0007      		move.b	#2,7(a6)
    9611/    A928 :                     
    9612/    A928 :                     loc_A928:
    9613/    A928 : 6100 01CE           		bsr.w	nullsub_2
    9614/    A92C : 6100 2292           		bsr.w	sub_CBC0
    9615/    A930 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
    9616/    A936 : 4EB9 0000 C29E      		jsr	(sub_C29E).l
    9617/    A93C : 6710                		beq.s	loc_A94E
    9618/    A93E : 08EE 0000 0025      		bset	#0,$25(a6)
    9619/    A944 : 31C0 FAC0           		move.w	d0,($FFFFFAC0).w
    9620/    A948 : 31C1 FAC2           		move.w	d1,($FFFFFAC2).w
    9621/    A94C : 4E75                		rts
    9622/    A94E :                     ; ---------------------------------------------------------------------------
    9623/    A94E :                     
    9624/    A94E :                     loc_A94E:
    9625/    A94E : 08AE 0000 0025      		bclr	#0,$25(a6)
    9626/    A954 : 6732                		beq.s	loc_A988
    9627/    A956 : 1D7C 0008 0007      		move.b	#8,7(a6)
    9628/    A95C : 142E 002A           		move.b	$2A(a6),d2
    9629/    A960 : 082E 0003 0025      		btst	#3,$25(a6)
    9630/    A966 : 6704                		beq.s	loc_A96C
    9631/    A968 : 0602 0080           		addi.b	#-$80,d2
    9632/    A96C :                     
    9633/    A96C :                     loc_A96C:
    9634/    A96C : 4EB8 3F14           		jsr	(CalcSine).w
    9635/    A970 : 342E 002C           		move.w	$2C(a6),d2
    9636/    A974 : C1C2                		muls.w	d2,d0
    9637/    A976 : C3C2                		muls.w	d2,d1
    9638/    A978 : EC80                		asr.l	#6,d0
    9639/    A97A : EC81                		asr.l	#6,d1
    9640/    A97C : 2D40 0018           		move.l	d0,$18(a6)
    9641/    A980 : 2D41 001C           		move.l	d1,$1C(a6)
    9642/    A984 : 7000                		moveq	#0,d0
    9643/    A986 : 4E75                		rts
    9644/    A988 :                     ; ---------------------------------------------------------------------------
    9645/    A988 :                     
    9646/    A988 :                     loc_A988:
    9647/    A988 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             A98E : 001C             
    9648/    A990 : 4E75                		rts
    9649/    A992 :                     ; ---------------------------------------------------------------------------
    9650/    A992 :                     
    9651/    A992 :                     locret_A992:
    9652/    A992 : 4E75                		rts
    9653/    A994 :                     ; ---------------------------------------------------------------------------
    9654/    A994 :                     
    9655/    A994 :                     loc_A994:
    9656/    A994 : 08AE 0004 0025      		bclr	#4,$25(a6)
    9657/    A99A : 3D7C 002E 0026      		move.w	#$2E,$26(a6)
    9658/    A9A0 : 522E 0028           		addq.b	#1,$28(a6)
    9659/    A9A4 : 4AAE 002C           		tst.l	$2C(a6)
    9660/    A9A8 : 6608                		bne.s	loc_A9B2
    9661/    A9AA : 082D 0001 0002      		btst	#1,2(a5)
    9662/    A9B0 : 660E                		bne.s	loc_A9C0
    9663/    A9B2 :                     
    9664/    A9B2 :                     loc_A9B2:
    9665/    A9B2 : 3D7C 0800 002C      		move.w	#$800,$2C(a6)
    9666/    A9B8 : 1D7C 0006 0007      		move.b	#6,7(a6)
    9667/    A9BE : 4E75                		rts
    9668/    A9C0 :                     ; ---------------------------------------------------------------------------
    9669/    A9C0 :                     
    9670/    A9C0 :                     loc_A9C0:
    9671/    A9C0 : 4EB9 0000 CBC0      		jsr	(sub_CBC0).l
    9672/    A9C6 : 4E75                		rts
    9673/    A9C8 :                     ; ---------------------------------------------------------------------------
    9674/    A9C8 :                     
    9675/    A9C8 :                     loc_A9C8:
    9676/    A9C8 : 3D7C 0100 0030      		move.w	#$100,$30(a6)
    9677/    A9CE : 082E 0000 0025      		btst	#0,$25(a6)
    9678/    A9D4 : 6600 0032           		bne.w	loc_AA08
    9679/    A9D8 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             A9DE : 001C             
    9680/    A9E0 : 08AE 0000 0025      		bclr	#0,$25(a6)
    9681/    A9E6 : 3D7C 0030 0026      		move.w	#$30,$26(a6)
    9682/    A9EC : 422E 002A           		clr.b	$2A(a6)
    9683/    A9F0 : 426E 002C           		clr.w	$2C(a6)
    9684/    A9F4 : 6100 21CA           		bsr.w	sub_CBC0
    9685/    A9F8 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
    9686/    A9FE : 4EB9 0000 C636      		jsr	(sub_C636).l
    9687/    AA04 : 6602                		bne.s	loc_AA08
    9688/    AA06 : 4E75                		rts
    9689/    AA08 :                     ; ---------------------------------------------------------------------------
    9690/    AA08 :                     
    9691/    AA08 :                     loc_AA08:
    9692/    AA08 : 202E 0018           		move.l	$18(a6),d0
    9693/    AA0C : 6A0A                		bpl.s	loc_AA18
    9694/    AA0E : 082E 0003 0025      		btst	#3,$25(a6)
    9695/    AA14 : 660A                		bne.s	loc_AA20
    9696/    AA16 : 600A                		bra.s	loc_AA22
    9697/    AA18 :                     ; ---------------------------------------------------------------------------
    9698/    AA18 :                     
    9699/    AA18 :                     loc_AA18:
    9700/    AA18 : 082E 0003 0025      		btst	#3,$25(a6)
    9701/    AA1E : 6702                		beq.s	loc_AA22
    9702/    AA20 :                     
    9703/    AA20 :                     loc_AA20:
    9704/    AA20 : 4480                		neg.l	d0
    9705/    AA22 :                     
    9706/    AA22 :                     loc_AA22:
    9707/    AA22 : E080                		asr.l	#8,d0
    9708/    AA24 : 3D40 002C           		move.w	d0,$2C(a6)
    9709/    AA28 : 4A6E 0032           		tst.w	$32(a6)
    9710/    AA2C : 6B10                		bmi.s	loc_AA3E
    9711/    AA2E : 1D7C 0002 0007      		move.b	#2,7(a6)
    9712/    AA34 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             AA3A : 0026             
    9713/    AA3C : 4E75                		rts
    9714/    AA3E :                     ; ---------------------------------------------------------------------------
    9715/    AA3E :                     
    9716/    AA3E :                     loc_AA3E:
    9717/    AA3E : 1D7C 0012 0007      		move.b	#$12,7(a6)
    9718/    AA44 : 4E75                		rts
    9719/    AA46 :                     ; ---------------------------------------------------------------------------
    9720/    AA46 :                     
    9721/    AA46 :                     loc_AA46:
    9722/    AA46 : 022E 0008 0020      		andi.b	#8,$20(a6)
    9723/    AA4C : 7000                		moveq	#0,d0
    9724/    AA4E : 3D40 002C           		move.w	d0,$2C(a6)
    9725/    AA52 : 2D40 0018           		move.l	d0,$18(a6)
    9726/    AA56 : 2D40 001C           		move.l	d0,$1C(a6)
    9727/    AA5A : 4A6E 0030           		tst.w	$30(a6)
    9728/    AA5E : 660E                		bne.s	loc_AA6E
    9729/    AA60 : 3D7C 0010 0032      		move.w	#$10,$32(a6)
    9730/    AA66 : 1D7C 0002 0007      		move.b	#2,7(a6)
    9731/    AA6C : 4E75                		rts
    9732/    AA6E :                     ; ---------------------------------------------------------------------------
    9733/    AA6E :                     
    9734/    AA6E :                     loc_AA6E:
    9735/    AA6E : 3D7C 0032 0026      		move.w	#$32,$26(a6)
    9736/    AA74 : 4E75                		rts
    9737/    AA76 :                     
    9738/    AA76 :                     ; =============== S U B	R O U T	I N E =======================================
    9739/    AA76 :                     
    9740/    AA76 :                     
    9741/    AA76 :                     sub_AA76:
    9742/    AA76 : 102D 0003           		move.b	3(a5),d0
    9743/    AA7A : 0200 0070           		andi.b	#$70,d0
    9744/    AA7E : 6722                		beq.s	locret_AAA2
    9745/    AA80 : 3038 FAE0           		move.w	($FFFFFAE0).w,d0
    9746/    AA84 : 0C40 0018           		cmpi.w	#$18,d0
    9747/    AA88 : 6418                		bcc.s	locret_AAA2
    9748/    AA8A : 1D7C 000A 0007      		move.b	#$A,7(a6)
    9749/    AA90 : 08AE 0004 0025      		bclr	#4,$25(a6)
    9750/    AA96 : 022D 000F 0002      		andi.b	#$F,2(a5)
    9751/    AA9C : 022D 000F 0003      		andi.b	#$F,3(a5)
    9752/    AAA2 :                     
    9753/    AAA2 :                     locret_AAA2:
    9754/    AAA2 : 4E75                		rts
    9755/    AAA4 :                     ; End of function sub_AA76
    9756/    AAA4 :                     
    9757/    AAA4 :                     
    9758/    AAA4 :                     ; =============== S U B	R O U T	I N E =======================================
    9759/    AAA4 :                     
    9760/    AAA4 :                     
    9761/    AAA4 :                     sub_AAA4:
    9762/    AAA4 : 102D 0003           		move.b	3(a5),d0
    9763/    AAA8 : 0200 0070           		andi.b	#$70,d0
    9764/    AAAC : 6748                		beq.s	locret_AAF6
    9765/    AAAE : 1D7C 0004 0007      		move.b	#4,7(a6)
    9766/    AAB4 : 426E 0028           		clr.w	$28(a6)
    9767/    AAB8 : 08AE 0000 0025      		bclr	#0,$25(a6)
    9768/    AABE : 142E 002A           		move.b	$2A(a6),d2
    9769/    AAC2 : 4EB8 3F14           		jsr	(CalcSine).w
    9770/    AAC6 : 3600                		move.w	d0,d3
    9771/    AAC8 : 3801                		move.w	d1,d4
    9772/    AACA : 082E 0003 0025      		btst	#3,$25(a6)
    9773/    AAD0 : 6702                		beq.s	loc_AAD4
    9774/    AAD2 : 4440                		neg.w	d0
    9775/    AAD4 :                     
    9776/    AAD4 :                     loc_AAD4:
    9777/    AAD4 : 342E 002C           		move.w	$2C(a6),d2
    9778/    AAD8 : C1C2                		muls.w	d2,d0
    9779/    AADA : C3C2                		muls.w	d2,d1
    9780/    AADC : 343C 0680           		move.w	#$680,d2
    9781/    AAE0 : C7C2                		muls.w	d2,d3
    9782/    AAE2 : C9C2                		muls.w	d2,d4
    9783/    AAE4 : D084                		add.l	d4,d0
    9784/    AAE6 : 9283                		sub.l	d3,d1
    9785/    AAE8 : EC80                		asr.l	#6,d0
    9786/    AAEA : EC81                		asr.l	#6,d1
    9787/    AAEC : 2D40 0018           		move.l	d0,$18(a6)
    9788/    AAF0 : 2D41 001C           		move.l	d1,$1C(a6)
    9789/    AAF4 : 4E75                		rts
    9790/    AAF6 :                     ; ---------------------------------------------------------------------------
    9791/    AAF6 :                     
    9792/    AAF6 :                     locret_AAF6:
    9793/    AAF6 : 4E75                		rts
    9794/    AAF8 :                     ; End of function sub_AAA4
    9795/    AAF8 :                     
    9796/    AAF8 :                     
    9797/    AAF8 :                     ; =============== S U B	R O U T	I N E =======================================
    9798/    AAF8 :                     
    9799/    AAF8 :                     
    9800/    AAF8 :                     nullsub_2:
    9801/    AAF8 : 4E75                		rts
    9802/    AAFA :                     ; End of function nullsub_2
    9803/    AAFA :                     
    9804/    AAFA :                     ; ---------------------------------------------------------------------------
    9805/    AAFA : 4A6E 002C           		tst.w	$2C(a6)
    9806/    AAFE : 6602                		bne.s	loc_AB02
    9807/    AB00 :                     
    9808/    AB00 :                     locret_AB00:
    9809/    AB00 : 4E75                		rts
    9810/    AB02 :                     ; ---------------------------------------------------------------------------
    9811/    AB02 :                     
    9812/    AB02 :                     loc_AB02:
    9813/    AB02 : 102E 002A           		move.b	$2A(a6),d0
    9814/    AB06 : 1400                		move.b	d0,d2
    9815/    AB08 : 0400 0020           		subi.b	#$20,d0
    9816/    AB0C : 0C00 00C0           		cmpi.b	#$C0,d0
    9817/    AB10 : 64EE                		bcc.s	locret_AB00
    9818/    AB12 : 4EB8 3F14           		jsr	(CalcSine).w
    9819/    AB16 : E041                		asr.w	#8,d1
    9820/    AB18 : 4882                		ext.w	d2
    9821/    AB1A : 48C2                		ext.l	d2
    9822/    AB1C : 4842                		swap	d2
    9823/    AB1E : 302E 0024           		move.w	$24(a6),d0
    9824/    AB22 : 0800 0003           		btst	#3,d0
    9825/    AB26 : 6702                		beq.s	loc_AB2A
    9826/    AB28 : 4441                		neg.w	d1
    9827/    AB2A :                     
    9828/    AB2A :                     loc_AB2A:
    9829/    AB2A : D36E 002C           		add.w	d1,$2C(a6)
    9830/    AB2E : 4E75                		rts
    9831/    AB30 :                     ; ---------------------------------------------------------------------------
    9832/    AB30 :                     
    9833/    AB30 :                     loc_AB30:
    9834/    AB30 : 3D7C 0C0D 0022      		move.w	#$C0D,$22(a6)
    9835/    AB36 : 7000                		moveq	#0,d0
    9836/    AB38 : 102E 0007           		move.b	7(a6),d0
    9837/    AB3C : 487A 1C08           		pea	loc_C746(pc)
    9838/    AB40 : 303B 0006           		move.w	locret_AB48(pc,d0.w),d0
    9839/    AB44 : 4EFB 0002           		jmp	locret_AB48(pc,d0.w)
    9840/    AB48 :                     ; ---------------------------------------------------------------------------
    9841/    AB48 :                     
    9842/    AB48 :                     locret_AB48:		; For some reason, this offset table has been disabled
    9843/    AB48 : 4E75                		rts
    9844/    AB4A :                     ; ---------------------------------------------------------------------------
    9845/    AB4A : 0014                		dc.w loc_AB5C-locret_AB48
    9846/    AB4C : 02F2                		dc.w loc_AE3A-locret_AB48
    9847/    AB4E : 03D8                		dc.w loc_AF20-locret_AB48
    9848/    AB50 : 03E6                		dc.w loc_AF2E-locret_AB48
    9849/    AB52 : 0498                		dc.w loc_AFE0-locret_AB48
    9850/    AB54 : 06F8                		dc.w loc_B240-locret_AB48
    9851/    AB56 : 072C                		dc.w loc_B274-locret_AB48
    9852/    AB58 : 0760                		dc.w loc_B2A8-locret_AB48
    9853/    AB5A : 07E2                		dc.w loc_B32A-locret_AB48
    9854/    AB5C :                     ; ---------------------------------------------------------------------------
    9855/    AB5C :                     
    9856/    AB5C :                     loc_AB5C:
    9857/    AB5C : 487A 025A           		pea	loc_ADB8(pc)
    9858/    AB60 : 08EE 0000 0025      		bset	#0,$25(a6)
    9859/    AB66 : 08AE 0004 0025      		bclr	#4,$25(a6)
    9860/    AB6C : 42AE 0018           		clr.l	$18(a6)
    9861/    AB70 : 42AE 001C           		clr.l	$1C(a6)
    9862/    AB74 : 0C6E 001A 0026      		cmpi.w	#$1A,$26(a6)
    9863/    AB7A : 6700 01EA           		beq.w	loc_AD66
    9864/    AB7E : 4A15                		tst.b	(a5)
    9865/    AB80 : 6A10                		bpl.s	loc_AB92
    9866/    AB82 : 1038 D89E           		move.b	($FFFFD89E).w,d0
    9867/    AB86 : 0200 0070           		andi.b	#btnABC,d0
    9868/    AB8A : 6706                		beq.s	loc_AB92
    9869/    AB8C : 426E 002C           		clr.w	$2C(a6)
    9870/    AB90 : 6008                		bra.s	loc_AB9A
    9871/    AB92 :                     ; ---------------------------------------------------------------------------
    9872/    AB92 :                     
    9873/    AB92 :                     loc_AB92:
    9874/    AB92 : 302D 0008           		move.w	8(a5),d0
    9875/    AB96 : 6600 0100           		bne.w	loc_AC98
    9876/    AB9A :                     
    9877/    AB9A :                     loc_AB9A:
    9878/    AB9A : 303C FFF0           		move.w	#$FFF0,d0
    9879/    AB9E : 322E 002C           		move.w	$2C(a6),d1
    9880/    ABA2 : 6712                		beq.s	loc_ABB6
    9881/    ABA4 : 6A04                		bpl.s	loc_ABAA
    9882/    ABA6 : 4440                		neg.w	d0
    9883/    ABA8 : 4441                		neg.w	d1
    9884/    ABAA :                     
    9885/    ABAA :                     loc_ABAA:
    9886/    ABAA : 0C41 0010           		cmpi.w	#$10,d1
    9887/    ABAE : 6400 0130           		bcc.w	loc_ACE0
    9888/    ABB2 : 426E 002C           		clr.w	$2C(a6)
    9889/    ABB6 :                     
    9890/    ABB6 :                     loc_ABB6:
    9891/    ABB6 : 082E 0003 0025      		btst	#3,$25(a6)
    9892/    ABBC : 56C0                		sne	d0
    9893/    ABBE : 0200 0008           		andi.b	#8,d0
    9894/    ABC2 : 1D40 0020           		move.b	d0,$20(a6)
    9895/    ABC6 : 11FC 000A FAE8      		move.b	#$A,($FFFFFAE8).w
    9896/    ABCC : 102E 002A           		move.b	$2A(a6),d0
    9897/    ABD0 : 0600 0010           		addi.b	#$10,d0
    9898/    ABD4 : 0C00 0020           		cmpi.b	#$20,d0
    9899/    ABD8 : 6476                		bcc.s	loc_AC50
    9900/    ABDA : 302E 0008           		move.w	8(a6),d0
    9901/    ABDE : 7200                		moveq	#0,d1
    9902/    ABE0 : 122E 0023           		move.b	$23(a6),d1
    9903/    ABE4 : D26E 000C           		add.w	$C(a6),d1
    9904/    ABE8 : 382E 0024           		move.w	$24(a6),d4
    9905/    ABEC : 0244 0002           		andi.w	#2,d4
    9906/    ABF0 : 6100 1392           		bsr.w	sub_BF84
    9907/    ABF4 : 0C45 FF80           		cmpi.w	#$FF80,d5
    9908/    ABF8 : 6656                		bne.s	loc_AC50
    9909/    ABFA : 082E 0003 0025      		btst	#3,$25(a6)
    9910/    AC00 : 661A                		bne.s	loc_AC1C
    9911/    AC02 : 1D7C 0008 0020      		move.b	#8,$20(a6)
    9912/    AC08 : 7600                		moveq	#0,d3
    9913/    AC0A : 162E 0022           		move.b	$22(a6),d3
    9914/    AC0E : D043                		add.w	d3,d0
    9915/    AC10 : 6100 1372           		bsr.w	sub_BF84
    9916/    AC14 : 0C45 FF80           		cmpi.w	#$FF80,d5
    9917/    AC18 : 6628                		bne.s	loc_AC42
    9918/    AC1A : 6018                		bra.s	loc_AC34
    9919/    AC1C :                     ; ---------------------------------------------------------------------------
    9920/    AC1C :                     
    9921/    AC1C :                     loc_AC1C:
    9922/    AC1C : 1D7C 0000 0020      		move.b	#0,$20(a6)
    9923/    AC22 : 7600                		moveq	#0,d3
    9924/    AC24 : 162E 0022           		move.b	$22(a6),d3
    9925/    AC28 : 9043                		sub.w	d3,d0
    9926/    AC2A : 6100 1358           		bsr.w	sub_BF84
    9927/    AC2E : 0C45 FF80           		cmpi.w	#$FF80,d5
    9928/    AC32 : 660E                		bne.s	loc_AC42
    9929/    AC34 :                     
    9930/    AC34 :                     loc_AC34:
    9931/    AC34 : 3D7C 0018 0026      		move.w	#$18,$26(a6)
    9932/    AC3A : 022E 0003 0028      		andi.b	#3,$28(a6)
    9933/    AC40 : 4E75                		rts
    9934/    AC42 :                     ; ---------------------------------------------------------------------------
    9935/    AC42 :                     
    9936/    AC42 :                     loc_AC42:
    9937/    AC42 : 3D7C 0016 0026      		move.w	#$16,$26(a6)
    9938/    AC48 : 022E 0003 0028      		andi.b	#3,$28(a6)
    9939/    AC4E : 4E75                		rts
    9940/    AC50 :                     ; ---------------------------------------------------------------------------
    9941/    AC50 :                     
    9942/    AC50 :                     loc_AC50:
    9943/    AC50 : 302D 000A           		move.w	$A(a5),d0
    9944/    AC54 : 6716                		beq.s	loc_AC6C
    9945/    AC56 : 2D7C 0000 0100      		move.l	#$100,$26(a6)
             AC5C : 0026             
    9946/    AC5E : 4A40                		tst.w	d0
    9947/    AC60 : 6B08                		bmi.s	locret_AC6A
    9948/    AC62 : 2D7C 0000 0200      		move.l	#$200,$26(a6)
             AC68 : 0026             
    9949/    AC6A :                     
    9950/    AC6A :                     locret_AC6A:
    9951/    AC6A : 4E75                		rts
    9952/    AC6C :                     ; ---------------------------------------------------------------------------
    9953/    AC6C :                     
    9954/    AC6C :                     loc_AC6C:
    9955/    AC6C : 0C6E 0014 0026      		cmpi.w	#$14,$26(a6)
    9956/    AC72 : 6722                		beq.s	locret_AC96
    9957/    AC74 : 4A6E 0026           		tst.w	$26(a6)
    9958/    AC78 : 6704                		beq.s	loc_AC7E
    9959/    AC7A : 426E 0028           		clr.w	$28(a6)
    9960/    AC7E :                     
    9961/    AC7E :                     loc_AC7E:
    9962/    AC7E : 3D7C 0000 0026      		move.w	#0,$26(a6)
    9963/    AC84 : 4A2E 0029           		tst.b	$29(a6)
    9964/    AC88 : 6A06                		bpl.s	loc_AC90
    9965/    AC8A : 3D7C 0014 0026      		move.w	#$14,$26(a6)
    9966/    AC90 :                     
    9967/    AC90 :                     loc_AC90:
    9968/    AC90 : 1D7C 0000 0028      		move.b	#0,$28(a6)
    9969/    AC96 :                     
    9970/    AC96 :                     locret_AC96:
    9971/    AC96 : 4E75                		rts
    9972/    AC98 :                     ; ---------------------------------------------------------------------------
    9973/    AC98 :                     
    9974/    AC98 :                     loc_AC98:
    9975/    AC98 : 122D 0003           		move.b	3(a5),d1
    9976/    AC9C : 0201 000C           		andi.b	#$C,d1
    9977/    ACA0 : 6704                		beq.s	loc_ACA6
    9978/    ACA2 : 426E 0028           		clr.w	$28(a6)
    9979/    ACA6 :                     
    9980/    ACA6 :                     loc_ACA6:
    9981/    ACA6 : 322E 0024           		move.w	$24(a6),d1
    9982/    ACAA : B141                		eor.w	d0,d1
    9983/    ACAC : 342E 002C           		move.w	$2C(a6),d2
    9984/    ACB0 : 48C2                		ext.l	d2
    9985/    ACB2 : 4842                		swap	d2
    9986/    ACB4 : B541                		eor.w	d2,d1
    9987/    ACB6 : 0241 0008           		andi.w	#8,d1
    9988/    ACBA : 6720                		beq.s	loc_ACDC
    9989/    ACBC : 302E 002C           		move.w	$2C(a6),d0
    9990/    ACC0 : 6A02                		bpl.s	loc_ACC4
    9991/    ACC2 : 4440                		neg.w	d0
    9992/    ACC4 :                     
    9993/    ACC4 :                     loc_ACC4:
    9994/    ACC4 : 0C40 0080           		cmpi.w	#$80,d0
    9995/    ACC8 : 6408                		bcc.s	loc_ACD2
    9996/    ACCA : B36E 0024           		eor.w	d1,$24(a6)
    9997/    ACCE : 7000                		moveq	#0,d0
    9998/    ACD0 : 6012                		bra.s	loc_ACE4
    9999/    ACD2 :                     ; ---------------------------------------------------------------------------
   10000/    ACD2 :                     
   10001/    ACD2 :                     loc_ACD2:
   10002/    ACD2 : 2D7C 001A 0000      		move.l	#$1A0000,$26(a6)
             ACD8 : 0026             
   10003/    ACDA : 4E75                		rts
   10004/    ACDC :                     ; ---------------------------------------------------------------------------
   10005/    ACDC :                     
   10006/    ACDC :                     loc_ACDC:
   10007/    ACDC : 303C 0010           		move.w	#$10,d0
   10008/    ACE0 :                     
   10009/    ACE0 :                     loc_ACE0:
   10010/    ACE0 : D06E 002C           		add.w	$2C(a6),d0
   10011/    ACE4 :                     
   10012/    ACE4 :                     loc_ACE4:
   10013/    ACE4 : 3D40 002C           		move.w	d0,$2C(a6)
   10014/    ACE8 : 6A02                		bpl.s	loc_ACEC
   10015/    ACEA : 4440                		neg.w	d0
   10016/    ACEC :                     
   10017/    ACEC :                     loc_ACEC:
   10018/    ACEC : 0C40 0400           		cmpi.w	#$400,d0
   10019/    ACF0 : 650A                		bcs.s	loc_ACFC
   10020/    ACF2 : 740A                		moveq	#$A,d2
   10021/    ACF4 : 026E 01FF 0028      		andi.w	#$1FF,$28(a6)
   10022/    ACFA : 6010                		bra.s	loc_AD0C
   10023/    ACFC :                     ; ---------------------------------------------------------------------------
   10024/    ACFC :                     
   10025/    ACFC :                     loc_ACFC:
   10026/    ACFC : E848                		lsr.w	#4,d0
   10027/    ACFE : 0C40 0010           		cmpi.w	#$10,d0
   10028/    AD02 : 6402                		bcc.s	loc_AD06
   10029/    AD04 : 7010                		moveq	#$10,d0
   10030/    AD06 :                     
   10031/    AD06 :                     loc_AD06:
   10032/    AD06 : D16E 0028           		add.w	d0,$28(a6)
   10033/    AD0A : 7402                		moveq	#2,d2
   10034/    AD0C :                     
   10035/    AD0C :                     loc_AD0C:
   10036/    AD0C : 102E 002A           		move.b	$2A(a6),d0
   10037/    AD10 : 082E 0003 0025      		btst	#3,$25(a6)
   10038/    AD16 : 6622                		bne.s	loc_AD3A
   10039/    AD18 : 0400 0010           		subi.b	#$10,d0
   10040/    AD1C : 4400                		neg.b	d0
   10041/    AD1E : E848                		lsr.w	#4,d0
   10042/    AD20 : 0800 0003           		btst	#3,d0
   10043/    AD24 : 56C1                		sne	d1
   10044/    AD26 : 0240 0006           		andi.w	#6,d0
   10045/    AD2A : D042                		add.w	d2,d0
   10046/    AD2C : 3D40 0026           		move.w	d0,$26(a6)
   10047/    AD30 : 0201 0018           		andi.b	#$18,d1
   10048/    AD34 : 1D41 0020           		move.b	d1,$20(a6)
   10049/    AD38 : 4E75                		rts
   10050/    AD3A :                     ; ---------------------------------------------------------------------------
   10051/    AD3A :                     
   10052/    AD3A :                     loc_AD3A:
   10053/    AD3A : 0400 0080           		subi.b	#$80,d0
   10054/    AD3E : 4400                		neg.b	d0
   10055/    AD40 : 0400 0010           		subi.b	#$10,d0
   10056/    AD44 : 4400                		neg.b	d0
   10057/    AD46 : E848                		lsr.w	#4,d0
   10058/    AD48 : 0800 0003           		btst	#3,d0
   10059/    AD4C : 56C1                		sne	d1
   10060/    AD4E : 0240 0006           		andi.w	#6,d0
   10061/    AD52 : D042                		add.w	d2,d0
   10062/    AD54 : 3D40 0026           		move.w	d0,$26(a6)
   10063/    AD58 : 0201 0018           		andi.b	#$18,d1
   10064/    AD5C : 0A01 0010           		eori.b	#$10,d1
   10065/    AD60 : 1D41 0020           		move.b	d1,$20(a6)
   10066/    AD64 : 4E75                		rts
   10067/    AD66 :                     ; ---------------------------------------------------------------------------
   10068/    AD66 :                     
   10069/    AD66 :                     loc_AD66:
   10070/    AD66 : 082E 0003 0025      		btst	#3,$25(a6)
   10071/    AD6C : 56C0                		sne	d0
   10072/    AD6E : 4600                		not.b	d0
   10073/    AD70 : 0200 0008           		andi.b	#8,d0
   10074/    AD74 : 1D40 0020           		move.b	d0,$20(a6)
   10075/    AD78 : 303C FF80           		move.w	#$FF80,d0
   10076/    AD7C : 322E 002C           		move.w	$2C(a6),d1
   10077/    AD80 : 6710                		beq.s	loc_AD92
   10078/    AD82 : 6A04                		bpl.s	loc_AD88
   10079/    AD84 : 4440                		neg.w	d0
   10080/    AD86 : 4441                		neg.w	d1
   10081/    AD88 :                     
   10082/    AD88 :                     loc_AD88:
   10083/    AD88 : 0C41 0080           		cmpi.w	#$80,d1
   10084/    AD8C : 6414                		bcc.s	loc_ADA2
   10085/    AD8E : 426E 002C           		clr.w	$2C(a6)
   10086/    AD92 :                     
   10087/    AD92 :                     loc_AD92:
   10088/    AD92 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             AD98 : 0026             
   10089/    AD9A : 0A2E 0008 0025      		eori.b	#8,$25(a6)
   10090/    ADA0 : 4E75                		rts
   10091/    ADA2 :                     ; ---------------------------------------------------------------------------
   10092/    ADA2 :                     
   10093/    ADA2 :                     loc_ADA2:
   10094/    ADA2 : D06E 002C           		add.w	$2C(a6),d0
   10095/    ADA6 : 3D40 002C           		move.w	d0,$2C(a6)
   10096/    ADAA : 3D7C 001A 0026      		move.w	#$1A,$26(a6)
   10097/    ADB0 : 022E 0003 0028      		andi.b	#3,$28(a6)
   10098/    ADB6 : 4E75                		rts
   10099/    ADB8 :                     ; ---------------------------------------------------------------------------
   10100/    ADB8 :                     
   10101/    ADB8 :                     loc_ADB8:
   10102/    ADB8 : 0CAE 0000 0200      		cmpi.l	#$200,$26(a6)
             ADBE : 0026             
   10103/    ADC0 : 670E                		beq.s	loc_ADD0
   10104/    ADC2 : 4A15                		tst.b	(a5)
   10105/    ADC4 : 6B1C                		bmi.s	loc_ADE2
   10106/    ADC6 : 6100 0592           		bsr.w	sub_B35A
   10107/    ADCA : 6100 05BC           		bsr.w	sub_B388
   10108/    ADCE : 6012                		bra.s	loc_ADE2
   10109/    ADD0 :                     ; ---------------------------------------------------------------------------
   10110/    ADD0 :                     
   10111/    ADD0 :                     loc_ADD0:
   10112/    ADD0 : 102D 0003           		move.b	3(a5),d0
   10113/    ADD4 : 0200 0070           		andi.b	#$70,d0
   10114/    ADD8 : 6708                		beq.s	loc_ADE2
   10115/    ADDA : 1D7C 000E 0007      		move.b	#$E,7(a6)
   10116/    ADE0 : 4E75                		rts
   10117/    ADE2 :                     ; ---------------------------------------------------------------------------
   10118/    ADE2 :                     
   10119/    ADE2 :                     loc_ADE2:
   10120/    ADE2 : 6100 05F8           		bsr.w	nullsub_3
   10121/    ADE6 : 6100 1DD8           		bsr.w	sub_CBC0
   10122/    ADEA : 4EB9 0000 C49A      		jsr	(sub_C49A).l
   10123/    ADF0 : 4EB9 0000 C29E      		jsr	(sub_C29E).l
   10124/    ADF6 : 670A                		beq.s	loc_AE02
   10125/    ADF8 : 31C0 FAC0           		move.w	d0,($FFFFFAC0).w
   10126/    ADFC : 31C1 FAC2           		move.w	d1,($FFFFFAC2).w
   10127/    AE00 : 4E75                		rts
   10128/    AE02 :                     ; ---------------------------------------------------------------------------
   10129/    AE02 :                     
   10130/    AE02 :                     loc_AE02:
   10131/    AE02 : 08AE 0000 0025      		bclr	#0,$25(a6)
   10132/    AE08 : 1D7C 0008 0007      		move.b	#8,7(a6)
   10133/    AE0E : 142E 002A           		move.b	$2A(a6),d2
   10134/    AE12 : 082E 0003 0025      		btst	#3,$25(a6)
   10135/    AE18 : 6704                		beq.s	loc_AE1E
   10136/    AE1A : 0602 0080           		addi.b	#-$80,d2
   10137/    AE1E :                     
   10138/    AE1E :                     loc_AE1E:
   10139/    AE1E : 4EB8 3F14           		jsr	(CalcSine).w
   10140/    AE22 : 342E 002C           		move.w	$2C(a6),d2
   10141/    AE26 : C1C2                		muls.w	d2,d0
   10142/    AE28 : C3C2                		muls.w	d2,d1
   10143/    AE2A : EC80                		asr.l	#6,d0
   10144/    AE2C : EC81                		asr.l	#6,d1
   10145/    AE2E : 2D40 0018           		move.l	d0,$18(a6)
   10146/    AE32 : 2D41 001C           		move.l	d1,$1C(a6)
   10147/    AE36 : 7000                		moveq	#0,d0
   10148/    AE38 : 4E75                		rts
   10149/    AE3A :                     ; ---------------------------------------------------------------------------
   10150/    AE3A :                     
   10151/    AE3A :                     loc_AE3A:
   10152/    AE3A : 082E 0000 0025      		btst	#0,$25(a6)
   10153/    AE40 : 6600 00AE           		bne.w	loc_AEF0
   10154/    AE44 : 487A 0086           		pea	loc_AECC(pc)
   10155/    AE48 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             AE4E : 001C             
   10156/    AE50 : 08AE 0000 0025      		bclr	#0,$25(a6)
   10157/    AE56 : 08EE 0004 0025      		bset	#4,$25(a6)
   10158/    AE5C : 3D7C 0012 0026      		move.w	#$12,$26(a6)
   10159/    AE62 : 422E 002A           		clr.b	$2A(a6)
   10160/    AE66 : 426E 002C           		clr.w	$2C(a6)
   10161/    AE6A : 302D 0008           		move.w	8(a5),d0
   10162/    AE6E : 6626                		bne.s	loc_AE96
   10163/    AE70 : 202E 0018           		move.l	$18(a6),d0
   10164/    AE74 : 2200                		move.l	d0,d1
   10165/    AE76 : 6A02                		bpl.s	loc_AE7A
   10166/    AE78 : 4481                		neg.l	d1
   10167/    AE7A :                     
   10168/    AE7A :                     loc_AE7A:
   10169/    AE7A : 0281 FFFF F800      		andi.l	#$FFFFF800,d1
   10170/    AE80 : 6606                		bne.s	loc_AE88
   10171/    AE82 : 42AE 0018           		clr.l	$18(a6)
   10172/    AE86 : 6026                		bra.s	loc_AEAE
   10173/    AE88 :                     ; ---------------------------------------------------------------------------
   10174/    AE88 :                     
   10175/    AE88 :                     loc_AE88:
   10176/    AE88 : 4840                		swap	d0
   10177/    AE8A : 48C0                		ext.l	d0
   10178/    AE8C : 4840                		swap	d0
   10179/    AE8E : 0040 0001           		ori.w	#1,d0
   10180/    AE92 : 4440                		neg.w	d0
   10181/    AE94 : 600E                		bra.s	loc_AEA4
   10182/    AE96 :                     ; ---------------------------------------------------------------------------
   10183/    AE96 :                     
   10184/    AE96 :                     loc_AE96:
   10185/    AE96 : 322E 0024           		move.w	$24(a6),d1
   10186/    AE9A : B141                		eor.w	d0,d1
   10187/    AE9C : 0241 0008           		andi.w	#8,d1
   10188/    AEA0 : B36E 0024           		eor.w	d1,$24(a6)
   10189/    AEA4 :                     
   10190/    AEA4 :                     loc_AEA4:
   10191/    AEA4 : 4840                		swap	d0
   10192/    AEA6 : 9040                		sub.w	d0,d0
   10193/    AEA8 : E880                		asr.l	#4,d0
   10194/    AEAA : D1AE 0018           		add.l	d0,$18(a6)
   10195/    AEAE :                     
   10196/    AEAE :                     loc_AEAE:
   10197/    AEAE : 102D 0002           		move.b	2(a5),d0
   10198/    AEB2 : 0200 0070           		andi.b	#$70,d0
   10199/    AEB6 : 6612                		bne.s	locret_AECA
   10200/    AEB8 : 0CAE FFFC 0000      		cmpi.l	#$FFFC0000,$1C(a6)
             AEBE : 001C             
   10201/    AEC0 : 6C08                		bge.s	locret_AECA
   10202/    AEC2 : 2D7C FFFC 0000      		move.l	#$FFFC0000,$1C(a6)
             AEC8 : 001C             
   10203/    AECA :                     
   10204/    AECA :                     locret_AECA:
   10205/    AECA : 4E75                		rts
   10206/    AECC :                     ; ---------------------------------------------------------------------------
   10207/    AECC :                     
   10208/    AECC :                     loc_AECC:
   10209/    AECC : 6100 1CF2           		bsr.w	sub_CBC0
   10210/    AED0 : 6100 0488           		bsr.w	sub_B35A
   10211/    AED4 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
   10212/    AEDA : 4EB9 0000 C636      		jsr	(sub_C636).l
   10213/    AEE0 : 6602                		bne.s	loc_AEE4
   10214/    AEE2 : 4E75                		rts
   10215/    AEE4 :                     ; ---------------------------------------------------------------------------
   10216/    AEE4 :                     
   10217/    AEE4 :                     loc_AEE4:
   10218/    AEE4 : 4AAE 001C           		tst.l	$1C(a6)
   10219/    AEE8 : 6A06                		bpl.s	loc_AEF0
   10220/    AEEA : 42AE 001C           		clr.l	$1C(a6)
   10221/    AEEE : 4E75                		rts
   10222/    AEF0 :                     ; ---------------------------------------------------------------------------
   10223/    AEF0 :                     
   10224/    AEF0 :                     loc_AEF0:
   10225/    AEF0 : 202E 0018           		move.l	$18(a6),d0
   10226/    AEF4 : 6A0A                		bpl.s	loc_AF00
   10227/    AEF6 : 082E 0003 0025      		btst	#3,$25(a6)
   10228/    AEFC : 660A                		bne.s	loc_AF08
   10229/    AEFE : 600A                		bra.s	loc_AF0A
   10230/    AF00 :                     ; ---------------------------------------------------------------------------
   10231/    AF00 :                     
   10232/    AF00 :                     loc_AF00:
   10233/    AF00 : 082E 0003 0025      		btst	#3,$25(a6)
   10234/    AF06 : 6702                		beq.s	loc_AF0A
   10235/    AF08 :                     
   10236/    AF08 :                     loc_AF08:
   10237/    AF08 : 4480                		neg.l	d0
   10238/    AF0A :                     
   10239/    AF0A :                     loc_AF0A:
   10240/    AF0A : E080                		asr.l	#8,d0
   10241/    AF0C : 3D40 002C           		move.w	d0,$2C(a6)
   10242/    AF10 : 1D7C 0002 0007      		move.b	#2,7(a6)
   10243/    AF16 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             AF1C : 0026             
   10244/    AF1E : 4E75                		rts
   10245/    AF20 :                     ; ---------------------------------------------------------------------------
   10246/    AF20 :                     
   10247/    AF20 :                     loc_AF20:
   10248/    AF20 : 1D7C 0002 0007      		move.b	#2,7(a6)
   10249/    AF26 : 08EE 0004 0025      		bset	#4,$25(a6)
   10250/    AF2C : 4E75                		rts
   10251/    AF2E :                     ; ---------------------------------------------------------------------------
   10252/    AF2E :                     
   10253/    AF2E :                     loc_AF2E:
   10254/    AF2E : 487A 006A           		pea	loc_AF9A(pc)
   10255/    AF32 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             AF38 : 001C             
   10256/    AF3A : 08AE 0000 0025      		bclr	#0,$25(a6)
   10257/    AF40 : 08EE 0004 0025      		bset	#4,$25(a6)
   10258/    AF46 : 3D7C 0012 0026      		move.w	#$12,$26(a6)
   10259/    AF4C : 422E 002A           		clr.b	$2A(a6)
   10260/    AF50 : 426E 002C           		clr.w	$2C(a6)
   10261/    AF54 : 302D 0008           		move.w	8(a5),d0
   10262/    AF58 : 6626                		bne.s	loc_AF80
   10263/    AF5A : 202E 0018           		move.l	$18(a6),d0
   10264/    AF5E : 2200                		move.l	d0,d1
   10265/    AF60 : 6A02                		bpl.s	loc_AF64
   10266/    AF62 : 4481                		neg.l	d1
   10267/    AF64 :                     
   10268/    AF64 :                     loc_AF64:
   10269/    AF64 : 0281 FFFF F800      		andi.l	#$FFFFF800,d1
   10270/    AF6A : 6606                		bne.s	loc_AF72
   10271/    AF6C : 42AE 0018           		clr.l	$18(a6)
   10272/    AF70 : 4E75                		rts
   10273/    AF72 :                     ; ---------------------------------------------------------------------------
   10274/    AF72 :                     
   10275/    AF72 :                     loc_AF72:
   10276/    AF72 : 4840                		swap	d0
   10277/    AF74 : 48C0                		ext.l	d0
   10278/    AF76 : 4840                		swap	d0
   10279/    AF78 : 0040 0001           		ori.w	#1,d0
   10280/    AF7C : 4440                		neg.w	d0
   10281/    AF7E : 600E                		bra.s	loc_AF8E
   10282/    AF80 :                     ; ---------------------------------------------------------------------------
   10283/    AF80 :                     
   10284/    AF80 :                     loc_AF80:
   10285/    AF80 : 322E 0024           		move.w	$24(a6),d1
   10286/    AF84 : B141                		eor.w	d0,d1
   10287/    AF86 : 0241 0008           		andi.w	#8,d1
   10288/    AF8A : B36E 0024           		eor.w	d1,$24(a6)
   10289/    AF8E :                     
   10290/    AF8E :                     loc_AF8E:
   10291/    AF8E : 4840                		swap	d0
   10292/    AF90 : 9040                		sub.w	d0,d0
   10293/    AF92 : E880                		asr.l	#4,d0
   10294/    AF94 : D1AE 0018           		add.l	d0,$18(a6)
   10295/    AF98 : 4E75                		rts
   10296/    AF9A :                     ; ---------------------------------------------------------------------------
   10297/    AF9A :                     
   10298/    AF9A :                     loc_AF9A:
   10299/    AF9A : 6100 1C24           		bsr.w	sub_CBC0
   10300/    AF9E : 6100 03BA           		bsr.w	sub_B35A
   10301/    AFA2 : 4EB9 0000 C49A      		jsr	(sub_C49A).l
   10302/    AFA8 : 4EB9 0000 C636      		jsr	(sub_C636).l
   10303/    AFAE : 672E                		beq.s	locret_AFDE
   10304/    AFB0 : 202E 0018           		move.l	$18(a6),d0
   10305/    AFB4 : 6A0A                		bpl.s	loc_AFC0
   10306/    AFB6 : 082E 0003 0025      		btst	#3,$25(a6)
   10307/    AFBC : 660A                		bne.s	loc_AFC8
   10308/    AFBE : 600A                		bra.s	loc_AFCA
   10309/    AFC0 :                     ; ---------------------------------------------------------------------------
   10310/    AFC0 :                     
   10311/    AFC0 :                     loc_AFC0:
   10312/    AFC0 : 082E 0003 0025      		btst	#3,$25(a6)
   10313/    AFC6 : 6702                		beq.s	loc_AFCA
   10314/    AFC8 :                     
   10315/    AFC8 :                     loc_AFC8:
   10316/    AFC8 : 4480                		neg.l	d0
   10317/    AFCA :                     
   10318/    AFCA :                     loc_AFCA:
   10319/    AFCA : E080                		asr.l	#8,d0
   10320/    AFCC : 3D40 002C           		move.w	d0,$2C(a6)
   10321/    AFD0 : 1D7C 0002 0007      		move.b	#2,7(a6)
   10322/    AFD6 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             AFDC : 0026             
   10323/    AFDE :                     
   10324/    AFDE :                     locret_AFDE:
   10325/    AFDE : 4E75                		rts
   10326/    AFE0 :                     ; ---------------------------------------------------------------------------
   10327/    AFE0 :                     
   10328/    AFE0 :                     loc_AFE0:
   10329/    AFE0 : 082E 0004 0025      		btst	#4,$25(a6)
   10330/    AFE6 : 6702                		beq.s	loc_AFEA
   10331/    AFE8 : 4E75                		rts
   10332/    AFEA :                     ; ---------------------------------------------------------------------------
   10333/    AFEA :                     
   10334/    AFEA :                     loc_AFEA:
   10335/    AFEA : 396E 0008 0008      		move.w	8(a6),8(a4)
   10336/    AFF0 : 302E 000C           		move.w	$C(a6),d0
   10337/    AFF4 : 0440 0020           		subi.w	#$20,d0
   10338/    AFF8 : 3940 000C           		move.w	d0,$C(a4)
   10339/    AFFC : 42AC 001C           		clr.l	$1C(a4)
   10340/    B000 : 197C 000C 0007      		move.b	#$C,7(a4)
   10341/    B006 : 397C 0012 0026      		move.w	#$12,$26(a4)
   10342/    B00C : 487A 0176           		pea	loc_B184(pc)
   10343/    B010 : 08AE 0004 0025      		bclr	#4,$25(a6)
   10344/    B016 : 082E 0000 0025      		btst	#0,$25(a6)
   10345/    B01C : 6708                		beq.s	loc_B026
   10346/    B01E : 42AE 0018           		clr.l	$18(a6)
   10347/    B022 : 42AE 001C           		clr.l	$1C(a6)
   10348/    B026 :                     
   10349/    B026 :                     loc_B026:
   10350/    B026 : 0C6E 001A 0026      		cmpi.w	#$1A,$26(a6)
   10351/    B02C : 6700 010A           		beq.w	loc_B138
   10352/    B030 : 302D 0008           		move.w	8(a5),d0
   10353/    B034 : 6600 0046           		bne.w	loc_B07C
   10354/    B038 : 303C FFF0           		move.w	#$FFF0,d0
   10355/    B03C : 322E 002C           		move.w	$2C(a6),d1
   10356/    B040 : 6712                		beq.s	loc_B054
   10357/    B042 : 6A04                		bpl.s	loc_B048
   10358/    B044 : 4440                		neg.w	d0
   10359/    B046 : 4441                		neg.w	d1
   10360/    B048 :                     
   10361/    B048 :                     loc_B048:
   10362/    B048 : 0C41 0010           		cmpi.w	#$10,d1
   10363/    B04C : 6400 0064           		bcc.w	loc_B0B2
   10364/    B050 : 426E 002C           		clr.w	$2C(a6)
   10365/    B054 :                     
   10366/    B054 :                     loc_B054:
   10367/    B054 : 082E 0003 0025      		btst	#3,$25(a6)
   10368/    B05A : 56C0                		sne	d0
   10369/    B05C : 0200 0008           		andi.b	#8,d0
   10370/    B060 : 1D40 0020           		move.b	d0,$20(a6)
   10371/    B064 : 2D7C 001C 0000      		move.l	#$1C0000,$26(a6)
             B06A : 0026             
   10372/    B06C : 302D 000A           		move.w	$A(a5),d0
   10373/    B070 : 6A08                		bpl.s	locret_B07A
   10374/    B072 : 2D7C 001C 0100      		move.l	#$1C0100,$26(a6)
             B078 : 0026             
   10375/    B07A :                     
   10376/    B07A :                     locret_B07A:
   10377/    B07A : 4E75                		rts
   10378/    B07C :                     ; ---------------------------------------------------------------------------
   10379/    B07C :                     
   10380/    B07C :                     loc_B07C:
   10381/    B07C : 322E 0024           		move.w	$24(a6),d1
   10382/    B080 : B141                		eor.w	d0,d1
   10383/    B082 : 0241 0008           		andi.w	#8,d1
   10384/    B086 : 6606                		bne.s	loc_B08E
   10385/    B088 : 4A6E 002C           		tst.w	$2C(a6)
   10386/    B08C : 6A20                		bpl.s	loc_B0AE
   10387/    B08E :                     
   10388/    B08E :                     loc_B08E:
   10389/    B08E : 302E 002C           		move.w	$2C(a6),d0
   10390/    B092 : 6A02                		bpl.s	loc_B096
   10391/    B094 : 4440                		neg.w	d0
   10392/    B096 :                     
   10393/    B096 :                     loc_B096:
   10394/    B096 : 0C40 0080           		cmpi.w	#$80,d0
   10395/    B09A : 6408                		bcc.s	loc_B0A4
   10396/    B09C : B36E 0024           		eor.w	d1,$24(a6)
   10397/    B0A0 : 7000                		moveq	#0,d0
   10398/    B0A2 : 6012                		bra.s	loc_B0B6
   10399/    B0A4 :                     ; ---------------------------------------------------------------------------
   10400/    B0A4 :                     
   10401/    B0A4 :                     loc_B0A4:
   10402/    B0A4 : 2D7C 001A 0000      		move.l	#$1A0000,$26(a6)
             B0AA : 0026             
   10403/    B0AC : 4E75                		rts
   10404/    B0AE :                     ; ---------------------------------------------------------------------------
   10405/    B0AE :                     
   10406/    B0AE :                     loc_B0AE:
   10407/    B0AE : 303C 0010           		move.w	#$10,d0
   10408/    B0B2 :                     
   10409/    B0B2 :                     loc_B0B2:
   10410/    B0B2 : D06E 002C           		add.w	$2C(a6),d0
   10411/    B0B6 :                     
   10412/    B0B6 :                     loc_B0B6:
   10413/    B0B6 : 3D40 002C           		move.w	d0,$2C(a6)
   10414/    B0BA : 6A02                		bpl.s	loc_B0BE
   10415/    B0BC : 4440                		neg.w	d0
   10416/    B0BE :                     
   10417/    B0BE :                     loc_B0BE:
   10418/    B0BE : 0C40 0400           		cmpi.w	#$400,d0
   10419/    B0C2 : 650A                		bcs.s	loc_B0CE
   10420/    B0C4 : 7426                		moveq	#$26,d2
   10421/    B0C6 : 026E 01FF 0028      		andi.w	#$1FF,$28(a6)
   10422/    B0CC : 6010                		bra.s	loc_B0DE
   10423/    B0CE :                     ; ---------------------------------------------------------------------------
   10424/    B0CE :                     
   10425/    B0CE :                     loc_B0CE:
   10426/    B0CE : E848                		lsr.w	#4,d0
   10427/    B0D0 : 0C40 0010           		cmpi.w	#$10,d0
   10428/    B0D4 : 6402                		bcc.s	loc_B0D8
   10429/    B0D6 : 7010                		moveq	#$10,d0
   10430/    B0D8 :                     
   10431/    B0D8 :                     loc_B0D8:
   10432/    B0D8 : D16E 0028           		add.w	d0,$28(a6)
   10433/    B0DC : 741E                		moveq	#$1E,d2
   10434/    B0DE :                     
   10435/    B0DE :                     loc_B0DE:
   10436/    B0DE : 102E 002A           		move.b	$2A(a6),d0
   10437/    B0E2 : 082E 0003 0025      		btst	#3,$25(a6)
   10438/    B0E8 : 6622                		bne.s	loc_B10C
   10439/    B0EA : 0400 0010           		subi.b	#$10,d0
   10440/    B0EE : 4400                		neg.b	d0
   10441/    B0F0 : E848                		lsr.w	#4,d0
   10442/    B0F2 : 0800 0003           		btst	#3,d0
   10443/    B0F6 : 56C1                		sne	d1
   10444/    B0F8 : 0240 0006           		andi.w	#6,d0
   10445/    B0FC : D042                		add.w	d2,d0
   10446/    B0FE : 3D40 0026           		move.w	d0,$26(a6)
   10447/    B102 : 0201 0018           		andi.b	#$18,d1
   10448/    B106 : 1D41 0020           		move.b	d1,$20(a6)
   10449/    B10A : 4E75                		rts
   10450/    B10C :                     ; ---------------------------------------------------------------------------
   10451/    B10C :                     
   10452/    B10C :                     loc_B10C:
   10453/    B10C : 0400 0080           		subi.b	#$80,d0
   10454/    B110 : 4400                		neg.b	d0
   10455/    B112 : 0400 0010           		subi.b	#$10,d0
   10456/    B116 : 4400                		neg.b	d0
   10457/    B118 : E848                		lsr.w	#4,d0
   10458/    B11A : 0800 0003           		btst	#3,d0
   10459/    B11E : 56C1                		sne	d1
   10460/    B120 : 0240 0006           		andi.w	#6,d0
   10461/    B124 : D042                		add.w	d2,d0
   10462/    B126 : 3D40 0026           		move.w	d0,$26(a6)
   10463/    B12A : 0201 0018           		andi.b	#$18,d1
   10464/    B12E : 0A01 0010           		eori.b	#$10,d1
   10465/    B132 : 1D41 0020           		move.b	d1,$20(a6)
   10466/    B136 : 4E75                		rts
   10467/    B138 :                     ; ---------------------------------------------------------------------------
   10468/    B138 :                     
   10469/    B138 :                     loc_B138:
   10470/    B138 : 082E 0003 0025      		btst	#3,$25(a6)
   10471/    B13E : 56C0                		sne	d0
   10472/    B140 : 4600                		not.b	d0
   10473/    B142 : 0200 0008           		andi.b	#8,d0
   10474/    B146 : 1D40 0020           		move.b	d0,$20(a6)
   10475/    B14A : 303C FF80           		move.w	#$FF80,d0
   10476/    B14E : 322E 002C           		move.w	$2C(a6),d1
   10477/    B152 : 6710                		beq.s	loc_B164
   10478/    B154 : 6A04                		bpl.s	loc_B15A
   10479/    B156 : 4440                		neg.w	d0
   10480/    B158 : 4441                		neg.w	d1
   10481/    B15A :                     
   10482/    B15A :                     loc_B15A:
   10483/    B15A : 0C41 0080           		cmpi.w	#$80,d1
   10484/    B15E : 6414                		bcc.s	loc_B174
   10485/    B160 : 426E 002C           		clr.w	$2C(a6)
   10486/    B164 :                     
   10487/    B164 :                     loc_B164:
   10488/    B164 : 2D7C 001C 0000      		move.l	#$1C0000,$26(a6)
             B16A : 0026             
   10489/    B16C : 0A2E 0008 0025      		eori.b	#8,$25(a6)
   10490/    B172 : 4E75                		rts
   10491/    B174 :                     ; ---------------------------------------------------------------------------
   10492/    B174 :                     
   10493/    B174 :                     loc_B174:
   10494/    B174 : D06E 002C           		add.w	$2C(a6),d0
   10495/    B178 : 3D40 002C           		move.w	d0,$2C(a6)
   10496/    B17C : 022E 0003 0028      		andi.b	#3,$28(a6)
   10497/    B182 : 4E75                		rts
   10498/    B184 :                     ; ---------------------------------------------------------------------------
   10499/    B184 :                     
   10500/    B184 :                     loc_B184:
   10501/    B184 : 102D 0002           		move.b	2(a5),d0
   10502/    B188 : 1200                		move.b	d0,d1
   10503/    B18A : 0200 0070           		andi.b	#$70,d0
   10504/    B18E : 6646                		bne.s	loc_B1D6
   10505/    B190 : 142D 0005           		move.b	5(a5),d2
   10506/    B194 : 0201 000F           		andi.b	#$F,d1
   10507/    B198 : 660C                		bne.s	loc_B1A6
   10508/    B19A : 74A0                		moveq	#-$60,d2
   10509/    B19C : 082E 0003 0025      		btst	#3,$25(a6)
   10510/    B1A2 : 6602                		bne.s	loc_B1A6
   10511/    B1A4 : 74E0                		moveq	#-$20,d2
   10512/    B1A6 :                     
   10513/    B1A6 :                     loc_B1A6:
   10514/    B1A6 : 4EB8 3F14           		jsr	(CalcSine).w
   10515/    B1AA : 48C0                		ext.l	d0
   10516/    B1AC : 48C1                		ext.l	d1
   10517/    B1AE : EB80                		asl.l	#5,d0
   10518/    B1B0 : EB81                		asl.l	#5,d1
   10519/    B1B2 : D1AC 0008           		add.l	d0,8(a4)
   10520/    B1B6 : D3AC 000C           		add.l	d1,$C(a4)
   10521/    B1BA : D0AE 0018           		add.l	$18(a6),d0
   10522/    B1BE : D2AE 001C           		add.l	$1C(a6),d1
   10523/    B1C2 : 2940 0018           		move.l	d0,$18(a4)
   10524/    B1C6 : 2941 001C           		move.l	d1,$1C(a4)
   10525/    B1CA : 197C 0008 0007      		move.b	#8,7(a4)
   10526/    B1D0 : 1D7C 0002 0007      		move.b	#2,7(a6)
   10527/    B1D6 :                     
   10528/    B1D6 :                     loc_B1D6:
   10529/    B1D6 : 6100 0204           		bsr.w	nullsub_3
   10530/    B1DA : 6100 19E4           		bsr.w	sub_CBC0
   10531/    B1DE : 4EB9 0000 C49A      		jsr	(sub_C49A).l
   10532/    B1E4 : 4EB9 0000 C29E      		jsr	(sub_C29E).l
   10533/    B1EA : 6710                		beq.s	loc_B1FC
   10534/    B1EC : 08EE 0000 0025      		bset	#0,$25(a6)
   10535/    B1F2 : 31C0 FAC0           		move.w	d0,($FFFFFAC0).w
   10536/    B1F6 : 31C1 FAC2           		move.w	d1,($FFFFFAC2).w
   10537/    B1FA : 4E75                		rts
   10538/    B1FC :                     ; ---------------------------------------------------------------------------
   10539/    B1FC :                     
   10540/    B1FC :                     loc_B1FC:
   10541/    B1FC : 08AE 0000 0025      		bclr	#0,$25(a6)
   10542/    B202 : 6732                		beq.s	loc_B236
   10543/    B204 : 1D7C 0008 0007      		move.b	#8,7(a6)
   10544/    B20A : 142E 002A           		move.b	$2A(a6),d2
   10545/    B20E : 082E 0003 0025      		btst	#3,$25(a6)
   10546/    B214 : 6704                		beq.s	loc_B21A
   10547/    B216 : 0602 0080           		addi.b	#-$80,d2
   10548/    B21A :                     
   10549/    B21A :                     loc_B21A:
   10550/    B21A : 4EB8 3F14           		jsr	(CalcSine).w
   10551/    B21E : 342E 002C           		move.w	$2C(a6),d2
   10552/    B222 : C1C2                		muls.w	d2,d0
   10553/    B224 : C3C2                		muls.w	d2,d1
   10554/    B226 : EC80                		asr.l	#6,d0
   10555/    B228 : EC81                		asr.l	#6,d1
   10556/    B22A : 2D40 0018           		move.l	d0,$18(a6)
   10557/    B22E : 2D41 001C           		move.l	d1,$1C(a6)
   10558/    B232 : 7000                		moveq	#0,d0
   10559/    B234 : 4E75                		rts
   10560/    B236 :                     ; ---------------------------------------------------------------------------
   10561/    B236 :                     
   10562/    B236 :                     loc_B236:
   10563/    B236 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             B23C : 001C             
   10564/    B23E : 4E75                		rts
   10565/    B240 :                     ; ---------------------------------------------------------------------------
   10566/    B240 :                     
   10567/    B240 :                     loc_B240:
   10568/    B240 : 0C2C 000A 0007      		cmpi.b	#$A,7(a4)
   10569/    B246 : 6708                		beq.s	loc_B250
   10570/    B248 : 1D7C 0008 0007      		move.b	#8,7(a6)
   10571/    B24E : 4E75                		rts
   10572/    B250 :                     ; ---------------------------------------------------------------------------
   10573/    B250 :                     
   10574/    B250 :                     loc_B250:
   10575/    B250 : 08AE 0000 0025      		bclr	#0,$25(a6)
   10576/    B256 : 08EE 0004 0025      		bset	#4,$25(a6)
   10577/    B25C : 3D7C 0012 0026      		move.w	#$12,$26(a6)
   10578/    B262 : 7000                		moveq	#0,d0
   10579/    B264 : 3D40 002C           		move.w	d0,$2C(a6)
   10580/    B268 : 2D40 0018           		move.l	d0,$18(a6)
   10581/    B26C : 70FF                		moveq	#-1,d0
   10582/    B26E : 2D40 001C           		move.l	d0,$1C(a6)
   10583/    B272 : 4E75                		rts
   10584/    B274 :                     ; ---------------------------------------------------------------------------
   10585/    B274 :                     
   10586/    B274 :                     loc_B274:
   10587/    B274 : 08AE 0004 0025      		bclr	#4,$25(a6)
   10588/    B27A : 3D7C 002E 0026      		move.w	#$2E,$26(a6)
   10589/    B280 : 522E 0028           		addq.b	#1,$28(a6)
   10590/    B284 : 4AAE 002C           		tst.l	$2C(a6)
   10591/    B288 : 6608                		bne.s	loc_B292
   10592/    B28A : 082D 0001 0002      		btst	#1,2(a5)
   10593/    B290 : 660E                		bne.s	loc_B2A0
   10594/    B292 :                     
   10595/    B292 :                     loc_B292:
   10596/    B292 : 3D7C 0800 002C      		move.w	#$800,$2C(a6)
   10597/    B298 : 1D7C 0006 0007      		move.b	#6,7(a6)
   10598/    B29E : 4E75                		rts
   10599/    B2A0 :                     ; ---------------------------------------------------------------------------
   10600/    B2A0 :                     
   10601/    B2A0 :                     loc_B2A0:
   10602/    B2A0 : 4EB9 0000 CBC0      		jsr	(sub_CBC0).l
   10603/    B2A6 : 4E75                		rts
   10604/    B2A8 :                     ; ---------------------------------------------------------------------------
   10605/    B2A8 :                     
   10606/    B2A8 :                     loc_B2A8:
   10607/    B2A8 : 3D7C 0100 0030      		move.w	#$100,$30(a6)
   10608/    B2AE : 082E 0000 0025      		btst	#0,$25(a6)
   10609/    B2B4 : 6600 0036           		bne.w	loc_B2EC
   10610/    B2B8 : 06AE 0000 3800      		addi.l	#$3800,$1C(a6)
             B2BE : 001C             
   10611/    B2C0 : 08AE 0000 0025      		bclr	#0,$25(a6)
   10612/    B2C6 : 3D7C 0030 0026      		move.w	#$30,$26(a6)
   10613/    B2CC : 422E 002A           		clr.b	$2A(a6)
   10614/    B2D0 : 426E 002C           		clr.w	$2C(a6)
   10615/    B2D4 : 6100 18EA           		bsr.w	sub_CBC0
   10616/    B2D8 : 6100 0080           		bsr.w	sub_B35A
   10617/    B2DC : 4EB9 0000 C49A      		jsr	(sub_C49A).l
   10618/    B2E2 : 4EB9 0000 C636      		jsr	(sub_C636).l
   10619/    B2E8 : 6602                		bne.s	loc_B2EC
   10620/    B2EA : 4E75                		rts
   10621/    B2EC :                     ; ---------------------------------------------------------------------------
   10622/    B2EC :                     
   10623/    B2EC :                     loc_B2EC:
   10624/    B2EC : 202E 0018           		move.l	$18(a6),d0
   10625/    B2F0 : 6A0A                		bpl.s	loc_B2FC
   10626/    B2F2 : 082E 0003 0025      		btst	#3,$25(a6)
   10627/    B2F8 : 660A                		bne.s	loc_B304
   10628/    B2FA : 600A                		bra.s	loc_B306
   10629/    B2FC :                     ; ---------------------------------------------------------------------------
   10630/    B2FC :                     
   10631/    B2FC :                     loc_B2FC:
   10632/    B2FC : 082E 0003 0025      		btst	#3,$25(a6)
   10633/    B302 : 6702                		beq.s	loc_B306
   10634/    B304 :                     
   10635/    B304 :                     loc_B304:
   10636/    B304 : 4480                		neg.l	d0
   10637/    B306 :                     
   10638/    B306 :                     loc_B306:
   10639/    B306 : E080                		asr.l	#8,d0
   10640/    B308 : 3D40 002C           		move.w	d0,$2C(a6)
   10641/    B30C : 4A6E 0032           		tst.w	$32(a6)
   10642/    B310 : 6B10                		bmi.s	loc_B322
   10643/    B312 : 1D7C 0002 0007      		move.b	#2,7(a6)
   10644/    B318 : 2D7C 0000 0000      		move.l	#0,$26(a6)
             B31E : 0026             
   10645/    B320 : 4E75                		rts
   10646/    B322 :                     ; ---------------------------------------------------------------------------
   10647/    B322 :                     
   10648/    B322 :                     loc_B322:
   10649/    B322 : 1D7C 0012 0007      		move.b	#$12,7(a6)
   10650/    B328 : 4E75                		rts
   10651/    B32A :                     ; ---------------------------------------------------------------------------
   10652/    B32A :                     
   10653/    B32A :                     loc_B32A:
   10654/    B32A : 022E 0008 0020      		andi.b	#8,$20(a6)
   10655/    B330 : 7000                		moveq	#0,d0
   10656/    B332 : 3D40 002C           		move.w	d0,$2C(a6)
   10657/    B336 : 2D40 0018           		move.l	d0,$18(a6)
   10658/    B33A : 2D40 001C           		move.l	d0,$1C(a6)
   10659/    B33E : 4A6E 0030           		tst.w	$30(a6)
   10660/    B342 : 660E                		bne.s	loc_B352
   10661/    B344 : 3D7C 0010 0032      		move.w	#$10,$32(a6)
   10662/    B34A : 1D7C 0002 0007      		move.b	#2,7(a6)
   10663/    B350 : 4E75                		rts
   10664/    B352 :                     ; ---------------------------------------------------------------------------
   10665/    B352 :                     
   10666/    B352 :                     loc_B352:
   10667/    B352 : 3D7C 0032 0026      		move.w	#$32,$26(a6)
   10668/    B358 : 4E75                		rts
   10669/    B35A :                     
   10670/    B35A :                     ; =============== S U B	R O U T	I N E =======================================
   10671/    B35A :                     
   10672/    B35A :                     
   10673/    B35A :                     sub_B35A:
   10674/    B35A : 102D 0003           		move.b	3(a5),d0
   10675/    B35E : 0200 0070           		andi.b	#$70,d0
   10676/    B362 : 6722                		beq.s	locret_B386
   10677/    B364 : 3038 FAE0           		move.w	($FFFFFAE0).w,d0
   10678/    B368 : 0C40 0018           		cmpi.w	#$18,d0
   10679/    B36C : 6418                		bcc.s	locret_B386
   10680/    B36E : 1D7C 000A 0007      		move.b	#$A,7(a6)
   10681/    B374 : 08AE 0004 0025      		bclr	#4,$25(a6)
   10682/    B37A : 022D 000F 0002      		andi.b	#$F,2(a5)
   10683/    B380 : 022D 000F 0003      		andi.b	#$F,3(a5)
   10684/    B386 :                     
   10685/    B386 :                     locret_B386:
   10686/    B386 : 4E75                		rts
   10687/    B388 :                     ; End of function sub_B35A
   10688/    B388 :                     
   10689/    B388 :                     
   10690/    B388 :                     ; =============== S U B	R O U T	I N E =======================================
   10691/    B388 :                     
   10692/    B388 :                     
   10693/    B388 :                     sub_B388:
   10694/    B388 : 102D 0003           		move.b	3(a5),d0
   10695/    B38C : 0200 0070           		andi.b	#$70,d0
   10696/    B390 : 6748                		beq.s	locret_B3DA
   10697/    B392 : 1D7C 0004 0007      		move.b	#4,7(a6)
   10698/    B398 : 426E 0028           		clr.w	$28(a6)
   10699/    B39C : 08AE 0000 0025      		bclr	#0,$25(a6)
   10700/    B3A2 : 142E 002A           		move.b	$2A(a6),d2
   10701/    B3A6 : 4EB8 3F14           		jsr	(CalcSine).w
   10702/    B3AA : 3600                		move.w	d0,d3
   10703/    B3AC : 3801                		move.w	d1,d4
   10704/    B3AE : 082E 0003 0025      		btst	#3,$25(a6)
   10705/    B3B4 : 6702                		beq.s	loc_B3B8
   10706/    B3B6 : 4440                		neg.w	d0
   10707/    B3B8 :                     
   10708/    B3B8 :                     loc_B3B8:
   10709/    B3B8 : 342E 002C           		move.w	$2C(a6),d2
   10710/    B3BC : C1C2                		muls.w	d2,d0
   10711/    B3BE : C3C2                		muls.w	d2,d1
   10712/    B3C0 : 343C 0700           		move.w	#$700,d2
   10713/    B3C4 : C7C2                		muls.w	d2,d3
   10714/    B3C6 : C9C2                		muls.w	d2,d4
   10715/    B3C8 : D084                		add.l	d4,d0
   10716/    B3CA : 9283                		sub.l	d3,d1
   10717/    B3CC : EC80                		asr.l	#6,d0
   10718/    B3CE : EC81                		asr.l	#6,d1
   10719/    B3D0 : 2D40 0018           		move.l	d0,$18(a6)
   10720/    B3D4 : 2D41 001C           		move.l	d1,$1C(a6)
   10721/    B3D8 : 4E75                		rts
   10722/    B3DA :                     ; ---------------------------------------------------------------------------
   10723/    B3DA :                     
   10724/    B3DA :                     locret_B3DA:
   10725/    B3DA : 4E75                		rts
   10726/    B3DC :                     ; End of function sub_B388
   10727/    B3DC :                     
   10728/    B3DC :                     
   10729/    B3DC :                     ; =============== S U B	R O U T	I N E =======================================
   10730/    B3DC :                     
   10731/    B3DC :                     
   10732/    B3DC :                     nullsub_3:
   10733/    B3DC : 4E75                		rts
   10734/    B3DE :                     ; End of function nullsub_3
   10735/    B3DE :                     
   10736/    B3DE :                     ; ---------------------------------------------------------------------------
   10737/    B3DE : 4A6E 002C           		tst.w	$2C(a6)
   10738/    B3E2 : 6602                		bne.s	loc_B3E6
   10739/    B3E4 :                     
   10740/    B3E4 :                     locret_B3E4:
   10741/    B3E4 : 4E75                		rts
   10742/    B3E6 :                     ; ---------------------------------------------------------------------------
   10743/    B3E6 :                     
   10744/    B3E6 :                     loc_B3E6:
   10745/    B3E6 : 102E 002A           		move.b	$2A(a6),d0
   10746/    B3EA : 1400                		move.b	d0,d2
   10747/    B3EC : 0400 0020           		subi.b	#$20,d0
   10748/    B3F0 : 0C00 00C0           		cmpi.b	#$C0,d0
   10749/    B3F4 : 64EE                		bcc.s	locret_B3E4
   10750/    B3F6 : 4EB8 3F14           		jsr	(CalcSine).w
   10751/    B3FA : E041                		asr.w	#8,d1
   10752/    B3FC : 4882                		ext.w	d2
   10753/    B3FE : 48C2                		ext.l	d2
   10754/    B400 : 4842                		swap	d2
   10755/    B402 : 302E 0024           		move.w	$24(a6),d0
   10756/    B406 : 0800 0003           		btst	#3,d0
   10757/    B40A : 6702                		beq.s	loc_B40E
   10758/    B40C : 4441                		neg.w	d1
   10759/    B40E :                     
   10760/    B40E :                     loc_B40E:
   10761/    B40E : D36E 002C           		add.w	d1,$2C(a6)
   10762/    B412 : 4E75                		rts
   10763/    B414 :                     ; ---------------------------------------------------------------------------
   10764/    B414 :                     
   10765/    B414 :                     locret_B414:
   10766/    B414 : 4E75                		rts
   10767/    B416 :                     ; ---------------------------------------------------------------------------
   10768/    B416 :                     
   10769/    B416 :                     locret_B416:
   10770/    B416 : 4E75                		rts
   10771/    B418 :                     ; ---------------------------------------------------------------------------
   10772/    B418 :                     
   10773/    B418 :                     locret_B418:
   10774/    B418 : 4E75                		rts
   10775/    B41A :                     ; ---------------------------------------------------------------------------
   10776/    B41A :                     
   10777/    B41A :                     locret_B41A:
   10778/    B41A : 4E75                		rts
   10779/    B41C :                     ; ---------------------------------------------------------------------------
   10780/    B41C :                     
   10781/    B41C :                     locret_B41C:
   10782/    B41C : 4E75                		rts
   10783/    B41E :                     ; ---------------------------------------------------------------------------
   10784/    B41E :                     
   10785/    B41E :                     locret_B41E:
   10786/    B41E : 4E75                		rts
   10787/    B420 :                     ; ---------------------------------------------------------------------------
   10788/    B420 :                     
   10789/    B420 :                     locret_B420:
   10790/    B420 : 4E75                		rts
   10791/    B422 :                     ; ---------------------------------------------------------------------------
   10792/    B422 :                     
   10793/    B422 :                     loc_B422:
   10794/    B422 : 3A6E 0024           		movea.w	$24(a6),a5
   10795/    B426 : 4A2D 0005           		tst.b	5(a5)
   10796/    B42A : 6B0A                		bmi.s	loc_B436
   10797/    B42C : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   10798/    B432 : 6000 039E           		bra.w	loc_B7D2
   10799/    B436 :                     ; ---------------------------------------------------------------------------
   10800/    B436 :                     
   10801/    B436 :                     loc_B436:
   10802/    B436 : 4879 0000 B7D2      		pea	(loc_B7D2).l
   10803/    B43C : 3E2D 0026           		move.w	$26(a5),d7
   10804/    B440 : 3E3B 7006           		move.w	off_B448(pc,d7.w),d7
   10805/    B444 : 4EFB 7002           		jmp	off_B448(pc,d7.w)
   10806/    B448 :                     ; ---------------------------------------------------------------------------
   10807/    B448 : 0034                off_B448:	dc.w loc_B47C-off_B448
   10808/    B44A : 00CA                		dc.w sub_B512-off_B448
   10809/    B44C : 0100                		dc.w sub_B548-off_B448
   10810/    B44E : 0138                		dc.w sub_B580-off_B448
   10811/    B450 : 0170                		dc.w sub_B5B8-off_B448
   10812/    B452 : 01A8                		dc.w sub_B5F0-off_B448
   10813/    B454 : 01C8                		dc.w sub_B610-off_B448
   10814/    B456 : 01EA                		dc.w sub_B632-off_B448
   10815/    B458 : 020A                		dc.w sub_B652-off_B448
   10816/    B45A : 022C                		dc.w loc_B674-off_B448
   10817/    B45C : 0234                		dc.w sub_B67C-off_B448
   10818/    B45E : 025A                		dc.w sub_B6A2-off_B448
   10819/    B460 : 0284                		dc.w sub_B6CC-off_B448
   10820/    B462 : 02AE                		dc.w loc_B6F6-off_B448
   10821/    B464 : 02B6                		dc.w sub_B6FE-off_B448
   10822/    B466 : 02CC                		dc.w sub_B714-off_B448
   10823/    B468 : 02EC                		dc.w sub_B734-off_B448
   10824/    B46A : 030E                		dc.w sub_B756-off_B448
   10825/    B46C : 032E                		dc.w sub_B776-off_B448
   10826/    B46E : 02CC                		dc.w sub_B714-off_B448
   10827/    B470 : 02EC                		dc.w sub_B734-off_B448
   10828/    B472 : 030E                		dc.w sub_B756-off_B448
   10829/    B474 : 032E                		dc.w sub_B776-off_B448
   10830/    B476 : 0350                		dc.w loc_B798-off_B448
   10831/    B478 : 0358                		dc.w loc_B7A0-off_B448
   10832/    B47A : 0360                		dc.w sub_B7A8-off_B448
   10833/    B47C :                     ; ---------------------------------------------------------------------------
   10834/    B47C :                     
   10835/    B47C :                     loc_B47C:
   10836/    B47C : 006E 0080 0004      		ori.w	#$80,4(a6)
   10837/    B482 : 0C2D 0002 0028      		cmpi.b	#2,$28(a5)
   10838/    B488 : 6608                		bne.s	loc_B492
   10839/    B48A : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   10840/    B490 : 4E75                		rts
   10841/    B492 :                     ; ---------------------------------------------------------------------------
   10842/    B492 :                     
   10843/    B492 :                     loc_B492:
   10844/    B492 : 70F5                		moveq	#$FFFFFFF5,d0
   10845/    B494 : 72FA                		moveq	#$FFFFFFFA,d1
   10846/    B496 : 6100 15EA           		bsr.w	sub_CA82
   10847/    B49A : 3D7C 0014 0026      		move.w	#$14,$26(a6)
   10848/    B4A0 : 4E75                		rts
   10849/    B4A2 :                     ; ---------------------------------------------------------------------------
   10850/    B4A2 :                     
   10851/    B4A2 :                     loc_B4A2:
   10852/    B4A2 : 4A6D 002E           		tst.w	$2E(a5)
   10853/    B4A6 : 6744                		beq.s	sub_B4EC
   10854/    B4A8 : 006E 0080 0004      		ori.w	#$80,4(a6)
   10855/    B4AE : 102D 002B           		move.b	$2B(a5),d0
   10856/    B4B2 : 5000                		addq.b	#8,d0
   10857/    B4B4 : E648                		lsr.w	#3,d0
   10858/    B4B6 : 0240 001E           		andi.w	#$1E,d0
   10859/    B4BA : 3D7B 0010 0026      		move.w	word_B4CC(pc,d0.w),$26(a6)
   10860/    B4C0 : 422E 0020           		clr.b	$20(a6)
   10861/    B4C4 : 7000                		moveq	#0,d0
   10862/    B4C6 : 72FE                		moveq	#-2,d1
   10863/    B4C8 : 6000 15C0           		bra.w	loc_CA8A
   10864/    B4CC :                     ; ---------------------------------------------------------------------------
   10865/    B4CC : 009C                word_B4CC:	dc.w $9C
   10866/    B4CE : 0098                		dc.w $98
   10867/    B4D0 : 0094                		dc.w $94
   10868/    B4D2 : 0090                		dc.w $90
   10869/    B4D4 : 008C                		dc.w $8C
   10870/    B4D6 : 0088                		dc.w $88
   10871/    B4D8 : 0084                		dc.w $84
   10872/    B4DA : 0080                		dc.w $80
   10873/    B4DC : 007C                		dc.w $7C
   10874/    B4DE : 00B8                		dc.w $B8
   10875/    B4E0 : 00B4                		dc.w $B4
   10876/    B4E2 : 00B0                		dc.w $B0
   10877/    B4E4 : 00AC                		dc.w $AC
   10878/    B4E6 : 00A8                		dc.w $A8
   10879/    B4E8 : 00A4                		dc.w $A4
   10880/    B4EA : 00A0                		dc.w $A0
   10881/    B4EC :                     
   10882/    B4EC :                     ; =============== S U B	R O U T	I N E =======================================
   10883/    B4EC :                     
   10884/    B4EC :                     
   10885/    B4EC :                     sub_B4EC:
   10886/    B4EC : 006E 0080 0004      		ori.w	#$80,4(a6)
   10887/    B4F2 : 7800                		moveq	#0,d4
   10888/    B4F4 : 182D 0028           		move.b	$28(a5),d4
   10889/    B4F8 : D844                		add.w	d4,d4
   10890/    B4FA : D844                		add.w	d4,d4
   10891/    B4FC : D844                		add.w	d4,d4
   10892/    B4FE : 3D70 4000 0026      		move.w	(a0,d4.w),$26(a6)
   10893/    B504 : 3030 4002           		move.w	2(a0,d4.w),d0
   10894/    B508 : 3230 4004           		move.w	4(a0,d4.w),d1
   10895/    B50C : 6100 1574           		bsr.w	sub_CA82
   10896/    B510 : 4E75                		rts
   10897/    B512 :                     ; End of function sub_B4EC
   10898/    B512 :                     
   10899/    B512 :                     ; ---------------------------------------------------------------------------
   10900/    B512 :                     
   10901/    B512 :                     sub_B512:
   10902/    B512 : 41FA 0004           		lea	loc_B518(pc),a0
   10903/    B516 : 608A                		bra.s	loc_B4A2
   10904/    B518 :                     ; ---------------------------------------------------------------------------
   10905/    B518 : 0014                loc_B518:	dc.w $14
   10906/    B51A : FFF3                		dc.w $FFF3
   10907/    B51C : FFFA                		dc.w $FFFA
   10908/    B51E : 0000                		dc.w 0
   10909/    B520 : 0018                		dc.w $18
   10910/    B522 : FFE6                		dc.w $FFE6
   10911/    B524 : FFFE                		dc.w $FFFE
   10912/    B526 : 0000                		dc.w 0
   10913/    B528 : 001C                		dc.w $1C
   10914/    B52A : FFF4                		dc.w $FFF4
   10915/    B52C : FFFA                		dc.w $FFFA
   10916/    B52E : 0000                		dc.w 0
   10917/    B530 : 0020                		dc.w $20
   10918/    B532 : FFF6                		dc.w $FFF6
   10919/    B534 : FFF9                		dc.w $FFF9
   10920/    B536 : 0000                		dc.w 0
   10921/    B538 : 000C                		dc.w $C
   10922/    B53A : FFFC                		dc.w $FFFC
   10923/    B53C : FFF5                		dc.w $FFF5
   10924/    B53E : 0000                		dc.w 0
   10925/    B540 : 0010                		dc.w $10
   10926/    B542 : FFFB                		dc.w $FFFB
   10927/    B544 : 0000                		dc.w 0
   10928/    B546 : 0000                		dc.w 0
   10929/    B548 :                     ; ---------------------------------------------------------------------------
   10930/    B548 :                     
   10931/    B548 :                     sub_B548:
   10932/    B548 : 41FA 0006           		lea	word_B550(pc),a0
   10933/    B54C : 6000 FF54           		bra.w	loc_B4A2
   10934/    B550 :                     ; ---------------------------------------------------------------------------
   10935/    B550 :                     word_B550:
   10936/    B550 : 002C                		dc.w $2C
   10937/    B552 : 0001                		dc.w 1
   10938/    B554 : 0000                		dc.w 0
   10939/    B556 : 0000                		dc.w 0
   10940/    B558 : 0030                		dc.w $30
   10941/    B55A : FFF5                		dc.w $FFF5
   10942/    B55C : FFFF                		dc.w $FFFF
   10943/    B55E : 0000                		dc.w 0
   10944/    B560 : 0034                		dc.w $34
   10945/    B562 : FFFF                		dc.w $FFFF
   10946/    B564 : FFF6                		dc.w $FFF6
   10947/    B566 : 0000                		dc.w 0
   10948/    B568 : 0038                		dc.w $38
   10949/    B56A : 0002                		dc.w 2
   10950/    B56C : FFF5                		dc.w $FFF5
   10951/    B56E : 0000                		dc.w 0
   10952/    B570 : 0024                		dc.w $24
   10953/    B572 : 0006                		dc.w 6
   10954/    B574 : FFEC                		dc.w $FFEC
   10955/    B576 : 0000                		dc.w 0
   10956/    B578 : 0028                		dc.w $28
   10957/    B57A : 0003                		dc.w 3
   10958/    B57C : FFF5                		dc.w $FFF5
   10959/    B57E : 0000                		dc.w 0
   10960/    B580 :                     ; ---------------------------------------------------------------------------
   10961/    B580 :                     
   10962/    B580 :                     sub_B580:
   10963/    B580 : 41FA 0006           		lea	word_B588(pc),a0
   10964/    B584 : 6000 FF1C           		bra.w	loc_B4A2
   10965/    B588 :                     ; ---------------------------------------------------------------------------
   10966/    B588 :                     word_B588:
   10967/    B588 : 0044                		dc.w $44
   10968/    B58A : FFFA                		dc.w $FFFA
   10969/    B58C : FFFF                		dc.w $FFFF
   10970/    B58E : 0000                		dc.w 0
   10971/    B590 : 0048                		dc.w $48
   10972/    B592 : FFFE                		dc.w $FFFE
   10973/    B594 : 0003                		dc.w 3
   10974/    B596 : 0000                		dc.w 0
   10975/    B598 : 004C                		dc.w $4C
   10976/    B59A : FFFA                		dc.w $FFFA
   10977/    B59C : FFFE                		dc.w $FFFE
   10978/    B59E : 0000                		dc.w 0
   10979/    B5A0 : 0050                		dc.w $50
   10980/    B5A2 : FFF9                		dc.w $FFF9
   10981/    B5A4 : FFF3                		dc.w $FFF3
   10982/    B5A6 : 0000                		dc.w 0
   10983/    B5A8 : 003C                		dc.w $3C
   10984/    B5AA : FFF5                		dc.w $FFF5
   10985/    B5AC : FFEC                		dc.w $FFEC
   10986/    B5AE : 0000                		dc.w 0
   10987/    B5B0 : 0040                		dc.w $40
   10988/    B5B2 : 0000                		dc.w 0
   10989/    B5B4 : FFEF                		dc.w $FFEF
   10990/    B5B6 : 0000                		dc.w 0
   10991/    B5B8 :                     ; ---------------------------------------------------------------------------
   10992/    B5B8 :                     
   10993/    B5B8 :                     sub_B5B8:
   10994/    B5B8 : 41FA 0006           		lea	loc_B5C0(pc),a0
   10995/    B5BC : 6000 FEE4           		bra.w	loc_B4A2
   10996/    B5C0 :                     ; ---------------------------------------------------------------------------
   10997/    B5C0 : 005C                loc_B5C0:	dc.w $5C
   10998/    B5C2 : 0007                		dc.w 7
   10999/    B5C4 : FFF9                		dc.w $FFF9
   11000/    B5C6 : 0000                		dc.w 0
   11001/    B5C8 : 0060                		dc.w $60
   11002/    B5CA : 0006                		dc.w 6
   11003/    B5CC : 0005                		dc.w 5
   11004/    B5CE : 0000                		dc.w 0
   11005/    B5D0 : 0064                		dc.w $64
   11006/    B5D2 : FFFD                		dc.w $FFFD
   11007/    B5D4 : FFFB                		dc.w $FFFB
   11008/    B5D6 : 0000                		dc.w 0
   11009/    B5D8 : 0068                		dc.w $68
   11010/    B5DA : FFFC                		dc.w $FFFC
   11011/    B5DC : FFF8                		dc.w $FFF8
   11012/    B5DE : 0000                		dc.w 0
   11013/    B5E0 : 0054                		dc.w $54
   11014/    B5E2 : FFF3                		dc.w $FFF3
   11015/    B5E4 : FFF4                		dc.w $FFF4
   11016/    B5E6 : 0000                		dc.w 0
   11017/    B5E8 : 0058                		dc.w $58
   11018/    B5EA : FFFC                		dc.w $FFFC
   11019/    B5EC : FFEF                		dc.w $FFEF
   11020/    B5EE : 0000                		dc.w 0
   11021/    B5F0 :                     ; ---------------------------------------------------------------------------
   11022/    B5F0 :                     
   11023/    B5F0 :                     sub_B5F0:
   11024/    B5F0 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11025/    B5F6 : 70F2                		moveq	#$FFFFFFF2,d0
   11026/    B5F8 : 72F3                		moveq	#$FFFFFFF3,d1
   11027/    B5FA : 082D 0000 0028      		btst	#0,$28(a5)
   11028/    B600 : 6702                		beq.s	loc_B604
   11029/    B602 : 70F1                		moveq	#$FFFFFFF1,d0
   11030/    B604 :                     
   11031/    B604 :                     loc_B604:
   11032/    B604 : 6100 147C           		bsr.w	sub_CA82
   11033/    B608 : 3D7C 006C 0026      		move.w	#$6C,$26(a6)
   11034/    B60E : 4E75                		rts
   11035/    B610 :                     ; ---------------------------------------------------------------------------
   11036/    B610 :                     
   11037/    B610 :                     sub_B610:
   11038/    B610 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11039/    B616 : 70FE                		moveq	#-2,d0
   11040/    B618 : 72F6                		moveq	#$FFFFFFF6,d1
   11041/    B61A : 082D 0000 0028      		btst	#0,$28(a5)
   11042/    B620 : 6704                		beq.s	loc_B626
   11043/    B622 : 70FD                		moveq	#-3,d0
   11044/    B624 : 72F7                		moveq	#$FFFFFFF7,d1
   11045/    B626 :                     
   11046/    B626 :                     loc_B626:
   11047/    B626 : 6100 145A           		bsr.w	sub_CA82
   11048/    B62A : 3D7C 0070 0026      		move.w	#$70,$26(a6)
   11049/    B630 : 4E75                		rts
   11050/    B632 :                     ; ---------------------------------------------------------------------------
   11051/    B632 :                     
   11052/    B632 :                     sub_B632:
   11053/    B632 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11054/    B638 : 70F3                		moveq	#$FFFFFFF3,d0
   11055/    B63A : 72F8                		moveq	#$FFFFFFF8,d1
   11056/    B63C : 082D 0000 0028      		btst	#0,$28(a5)
   11057/    B642 : 6702                		beq.s	loc_B646
   11058/    B644 : 72F9                		moveq	#$FFFFFFF9,d1
   11059/    B646 :                     
   11060/    B646 :                     loc_B646:
   11061/    B646 : 6100 143A           		bsr.w	sub_CA82
   11062/    B64A : 3D7C 0074 0026      		move.w	#$74,$26(a6)
   11063/    B650 : 4E75                		rts
   11064/    B652 :                     ; ---------------------------------------------------------------------------
   11065/    B652 :                     
   11066/    B652 :                     sub_B652:
   11067/    B652 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11068/    B658 : 70FD                		moveq	#-3,d0
   11069/    B65A : 72F4                		moveq	#$FFFFFFF4,d1
   11070/    B65C : 082D 0000 0028      		btst	#0,$28(a5)
   11071/    B662 : 6704                		beq.s	loc_B668
   11072/    B664 : 70FE                		moveq	#-2,d0
   11073/    B666 : 72F5                		moveq	#$FFFFFFF5,d1
   11074/    B668 :                     
   11075/    B668 :                     loc_B668:
   11076/    B668 : 6100 1418           		bsr.w	sub_CA82
   11077/    B66C : 3D7C 0078 0026      		move.w	#$78,$26(a6)
   11078/    B672 : 4E75                		rts
   11079/    B674 :                     ; ---------------------------------------------------------------------------
   11080/    B674 :                     
   11081/    B674 :                     loc_B674:
   11082/    B674 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11083/    B67A : 4E75                		rts
   11084/    B67C :                     ; ---------------------------------------------------------------------------
   11085/    B67C :                     
   11086/    B67C :                     sub_B67C:
   11087/    B67C : 006E 0080 0004      		ori.w	#$80,4(a6)
   11088/    B682 : 70EA                		moveq	#$FFFFFFEA,d0
   11089/    B684 : 72F4                		moveq	#$FFFFFFF4,d1
   11090/    B686 : 6100 13FA           		bsr.w	sub_CA82
   11091/    B68A : 7000                		moveq	#0,d0
   11092/    B68C : 102D 0028           		move.b	$28(a5),d0
   11093/    B690 : D040                		add.w	d0,d0
   11094/    B692 : 3D7B 0006 0026      		move.w	word_B69A(pc,d0.w),$26(a6)
   11095/    B698 : 4E75                		rts
   11096/    B69A :                     ; ---------------------------------------------------------------------------
   11097/    B69A : 0000                word_B69A:	dc.w word_B69A-word_B69A
   11098/    B69C : 0004                		dc.w 4
   11099/    B69E : 0008                		dc.w sub_B6A2-word_B69A
   11100/    B6A0 : 0004                		dc.w 4
   11101/    B6A2 :                     ; ---------------------------------------------------------------------------
   11102/    B6A2 :                     
   11103/    B6A2 :                     sub_B6A2:
   11104/    B6A2 : 41FA 0008           		lea	word_B6AC(pc),a0
   11105/    B6A6 : 6100 FE44           		bsr.w	sub_B4EC
   11106/    B6AA : 4E75                		rts
   11107/    B6AC :                     ; ---------------------------------------------------------------------------
   11108/    B6AC :                     word_B6AC:
   11109/    B6AC : 00F4                		dc.w $F4
   11110/    B6AE : FFEE                		dc.w $FFEE
   11111/    B6B0 : FFEC                		dc.w $FFEC
   11112/    B6B2 : 0000                		dc.w 0
   11113/    B6B4 : 00F8                		dc.w $F8
   11114/    B6B6 : FFEC                		dc.w $FFEC
   11115/    B6B8 : FFEA                		dc.w $FFEA
   11116/    B6BA : 0000                		dc.w 0
   11117/    B6BC : 00FC                		dc.w $FC
   11118/    B6BE : FFEC                		dc.w $FFEC
   11119/    B6C0 : FFEA                		dc.w $FFEA
   11120/    B6C2 : 0000                		dc.w 0
   11121/    B6C4 : 00F8                		dc.w $F8
   11122/    B6C6 : FFEC                		dc.w $FFEC
   11123/    B6C8 : FFEA                		dc.w $FFEA
   11124/    B6CA : 0000                		dc.w 0
   11125/    B6CC :                     ; ---------------------------------------------------------------------------
   11126/    B6CC :                     
   11127/    B6CC :                     sub_B6CC:
   11128/    B6CC : 41FA 0008           		lea	word_B6D6(pc),a0
   11129/    B6D0 : 6100 FE1A           		bsr.w	sub_B4EC
   11130/    B6D4 : 4E75                		rts
   11131/    B6D6 :                     ; ---------------------------------------------------------------------------
   11132/    B6D6 : 0100                word_B6D6:	dc.w $100
   11133/    B6D8 : FFEC                		dc.w $FFEC
   11134/    B6DA : FFEC                		dc.w $FFEC
   11135/    B6DC : 0000                		dc.w 0
   11136/    B6DE : 0104                		dc.w $104
   11137/    B6E0 : FFEC                		dc.w $FFEC
   11138/    B6E2 : FFEA                		dc.w $FFEA
   11139/    B6E4 : 0000                		dc.w 0
   11140/    B6E6 : 0108                		dc.w $108
   11141/    B6E8 : FFEC                		dc.w $FFEC
   11142/    B6EA : FFEC                		dc.w $FFEC
   11143/    B6EC : 0000                		dc.w 0
   11144/    B6EE : 0104                		dc.w $104
   11145/    B6F0 : FFEC                		dc.w $FFEC
   11146/    B6F2 : FFEC                		dc.w $FFEC
   11147/    B6F4 : 0000                		dc.w 0
   11148/    B6F6 :                     ; ---------------------------------------------------------------------------
   11149/    B6F6 :                     
   11150/    B6F6 :                     loc_B6F6:
   11151/    B6F6 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11152/    B6FC : 4E75                		rts
   11153/    B6FE :                     ; ---------------------------------------------------------------------------
   11154/    B6FE :                     
   11155/    B6FE :                     sub_B6FE:
   11156/    B6FE : 006E 0080 0004      		ori.w	#$80,4(a6)
   11157/    B704 : 70FD                		moveq	#-3,d0
   11158/    B706 : 72F3                		moveq	#$FFFFFFF3,d1
   11159/    B708 : 6100 1378           		bsr.w	sub_CA82
   11160/    B70C : 3D7C 00BC 0026      		move.w	#$BC,$26(a6)
   11161/    B712 : 4E75                		rts
   11162/    B714 :                     ; ---------------------------------------------------------------------------
   11163/    B714 :                     
   11164/    B714 :                     sub_B714:
   11165/    B714 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11166/    B71A : 7000                		moveq	#0,d0
   11167/    B71C : 72F3                		moveq	#$FFFFFFF3,d1
   11168/    B71E : 082D 0000 0028      		btst	#0,$28(a5)
   11169/    B724 : 6702                		beq.s	loc_B728
   11170/    B726 : 70FE                		moveq	#-2,d0
   11171/    B728 :                     
   11172/    B728 :                     loc_B728:
   11173/    B728 : 6100 1358           		bsr.w	sub_CA82
   11174/    B72C : 3D7C 00BC 0026      		move.w	#$BC,$26(a6)
   11175/    B732 : 4E75                		rts
   11176/    B734 :                     ; ---------------------------------------------------------------------------
   11177/    B734 :                     
   11178/    B734 :                     sub_B734:
   11179/    B734 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11180/    B73A : 7004                		moveq	#4,d0
   11181/    B73C : 72E7                		moveq	#$FFFFFFE7,d1
   11182/    B73E : 082D 0000 0028      		btst	#0,$28(a5)
   11183/    B744 : 6704                		beq.s	loc_B74A
   11184/    B746 : 7003                		moveq	#3,d0
   11185/    B748 : 72E8                		moveq	#$FFFFFFE8,d1
   11186/    B74A :                     
   11187/    B74A :                     loc_B74A:
   11188/    B74A : 6100 1336           		bsr.w	sub_CA82
   11189/    B74E : 3D7C 00C0 0026      		move.w	#$C0,$26(a6)
   11190/    B754 : 4E75                		rts
   11191/    B756 :                     ; ---------------------------------------------------------------------------
   11192/    B756 :                     
   11193/    B756 :                     sub_B756:
   11194/    B756 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11195/    B75C : 70FB                		moveq	#-5,d0
   11196/    B75E : 72E9                		moveq	#$FFFFFFE9,d1
   11197/    B760 : 082D 0000 0028      		btst	#0,$28(a5)
   11198/    B766 : 6702                		beq.s	loc_B76A
   11199/    B768 : 72EB                		moveq	#$FFFFFFEB,d1
   11200/    B76A :                     
   11201/    B76A :                     loc_B76A:
   11202/    B76A : 6100 1316           		bsr.w	sub_CA82
   11203/    B76E : 3D7C 00C4 0026      		move.w	#$C4,$26(a6)
   11204/    B774 : 4E75                		rts
   11205/    B776 :                     ; ---------------------------------------------------------------------------
   11206/    B776 :                     
   11207/    B776 :                     sub_B776:
   11208/    B776 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11209/    B77C : 70EE                		moveq	#$FFFFFFEE,d0
   11210/    B77E : 72F6                		moveq	#$FFFFFFF6,d1
   11211/    B780 : 082D 0000 0028      		btst	#0,$28(a5)
   11212/    B786 : 6704                		beq.s	loc_B78C
   11213/    B788 : 70EF                		moveq	#$FFFFFFEF,d0
   11214/    B78A : 72F7                		moveq	#$FFFFFFF7,d1
   11215/    B78C :                     
   11216/    B78C :                     loc_B78C:
   11217/    B78C : 6100 12F4           		bsr.w	sub_CA82
   11218/    B790 : 3D7C 00C8 0026      		move.w	#$C8,$26(a6)
   11219/    B796 : 4E75                		rts
   11220/    B798 :                     ; ---------------------------------------------------------------------------
   11221/    B798 :                     
   11222/    B798 :                     loc_B798:
   11223/    B798 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11224/    B79E : 4E75                		rts
   11225/    B7A0 :                     ; ---------------------------------------------------------------------------
   11226/    B7A0 :                     
   11227/    B7A0 :                     loc_B7A0:
   11228/    B7A0 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11229/    B7A6 : 4E75                		rts
   11230/    B7A8 :                     ; ---------------------------------------------------------------------------
   11231/    B7A8 :                     
   11232/    B7A8 :                     sub_B7A8:
   11233/    B7A8 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11234/    B7AE : 70F0                		moveq	#$FFFFFFF0,d0
   11235/    B7B0 : 72E9                		moveq	#$FFFFFFE9,d1
   11236/    B7B2 : 6100 12CE           		bsr.w	sub_CA82
   11237/    B7B6 : 7000                		moveq	#0,d0
   11238/    B7B8 : 102D 0028           		move.b	$28(a5),d0
   11239/    B7BC : D040                		add.w	d0,d0
   11240/    B7BE : 3D7B 0006 0026      		move.w	word_B7C6(pc,d0.w),$26(a6)
   11241/    B7C4 : 4E75                		rts
   11242/    B7C6 :                     ; ---------------------------------------------------------------------------
   11243/    B7C6 : 00FC                word_B7C6:	dc.w $FC
   11244/    B7C8 : 0100                		dc.w $100
   11245/    B7CA : 0104                		dc.w $104
   11246/    B7CC : 0108                		dc.w $108
   11247/    B7CE : 010C                		dc.w $10C
   11248/    B7D0 : 0110                		dc.w $110
   11249/    B7D2 :                     ; ---------------------------------------------------------------------------
   11250/    B7D2 :                     
   11251/    B7D2 :                     loc_B7D2:
   11252/    B7D2 :                     
   11253/    B7D2 : 4A2E 0005           		tst.b	5(a6)
   11254/    B7D6 : 6B02                		bmi.s	loc_B7DA
   11255/    B7D8 : 4E75                		rts
   11256/    B7DA :                     ; ---------------------------------------------------------------------------
   11257/    B7DA :                     
   11258/    B7DA :                     loc_B7DA:
   11259/    B7DA : 302E 0026           		move.w	$26(a6),d0
   11260/    B7DE : 41F9 0006 6680      		lea	(PLCMAP_SonArm_MainIndex).l,a0
   11261/    B7E4 : 43F9 0006 6B34      		lea	(Map_SonicArm).l,a1
   11262/    B7EA : 45F9 0006 67D8      		lea	(PLC_SonicArm).l,a2
   11263/    B7F0 : D2F0 0000           		adda.w	(a0,d0.w),a1
   11264/    B7F4 : D4F0 0002           		adda.w	2(a0,d0.w),a2
   11265/    B7F8 : 2D49 0010           		move.l	a1,obMap(a6)
   11266/    B7FC : 4A2D 0006           		tst.b	6(a5)
   11267/    B800 : 660C                		bne.s	loc_B80E
   11268/    B802 : 21CA D888           		move.l	a2,($FFFFD888).w
   11269/    B806 : 0038 0008 D87A      		ori.b	#8,($FFFFD87A).w
   11270/    B80C : 4E75                		rts
   11271/    B80E :                     ; ---------------------------------------------------------------------------
   11272/    B80E :                     
   11273/    B80E :                     loc_B80E:
   11274/    B80E : 21CA D88C           		move.l	a2,($FFFFD88C).w
   11275/    B812 : 0038 0010 D87A      		ori.b	#$10,($FFFFD87A).w
   11276/    B818 : 4E75                		rts
   11277/    B81A :                     ; ---------------------------------------------------------------------------
   11278/    B81A :                     
   11279/    B81A :                     loc_B81A:
   11280/    B81A : 3A6E 0024           		movea.w	$24(a6),a5
   11281/    B81E : 4A2D 0005           		tst.b	5(a5)
   11282/    B822 : 6B0A                		bmi.s	loc_B82E
   11283/    B824 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11284/    B82A : 6000 03BC           		bra.w	loc_BBE8
   11285/    B82E :                     ; ---------------------------------------------------------------------------
   11286/    B82E :                     
   11287/    B82E :                     loc_B82E:
   11288/    B82E : 4879 0000 BBE8      		pea	(loc_BBE8).l
   11289/    B834 : 3E2D 0026           		move.w	$26(a5),d7
   11290/    B838 : 3E3B 7006           		move.w	off_B840(pc,d7.w),d7
   11291/    B83C : 4EFB 7002           		jmp	off_B840(pc,d7.w)
   11292/    B840 :                     ; ---------------------------------------------------------------------------
   11293/    B840 : 0034                off_B840:	dc.w sub_B874-off_B840
   11294/    B842 : 00D6                		dc.w sub_B916-off_B840
   11295/    B844 : 011C                		dc.w sub_B95C-off_B840
   11296/    B846 : 0164                		dc.w sub_B9A4-off_B840
   11297/    B848 : 01AC                		dc.w sub_B9EC-off_B840
   11298/    B84A : 01F4                		dc.w sub_BA34-off_B840
   11299/    B84C : 020A                		dc.w sub_BA4A-off_B840
   11300/    B84E : 0220                		dc.w sub_BA60-off_B840
   11301/    B850 : 0236                		dc.w sub_BA76-off_B840
   11302/    B852 : 024C                		dc.w loc_BA8C-off_B840
   11303/    B854 : 0254                		dc.w sub_BA94-off_B840
   11304/    B856 : 0274                		dc.w sub_BAB4-off_B840
   11305/    B858 : 029E                		dc.w sub_BADE-off_B840
   11306/    B85A : 02C8                		dc.w loc_BB08-off_B840
   11307/    B85C : 02D0                		dc.w sub_BB10-off_B840
   11308/    B85E : 02E6                		dc.w sub_BB26-off_B840
   11309/    B860 : 0306                		dc.w sub_BB46-off_B840
   11310/    B862 : 0328                		dc.w sub_BB68-off_B840
   11311/    B864 : 0348                		dc.w sub_BB88-off_B840
   11312/    B866 : 02E6                		dc.w sub_BB26-off_B840
   11313/    B868 : 0306                		dc.w sub_BB46-off_B840
   11314/    B86A : 0328                		dc.w sub_BB68-off_B840
   11315/    B86C : 0348                		dc.w sub_BB88-off_B840
   11316/    B86E : 036A                		dc.w loc_BBAA-off_B840
   11317/    B870 : 0372                		dc.w loc_BBB2-off_B840
   11318/    B872 : 037A                		dc.w sub_BBBA-off_B840
   11319/    B874 :                     ; ---------------------------------------------------------------------------
   11320/    B874 :                     
   11321/    B874 :                     sub_B874:
   11322/    B874 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11323/    B87A : 0C2D 0002 0028      		cmpi.b	#2,$28(a5)
   11324/    B880 : 6610                		bne.s	loc_B892
   11325/    B882 : 70F9                		moveq	#$FFFFFFF9,d0
   11326/    B884 : 72F6                		moveq	#$FFFFFFF6,d1
   11327/    B886 : 6100 11FA           		bsr.w	sub_CA82
   11328/    B88A : 3D7C 0064 0026      		move.w	#$64,$26(a6)
   11329/    B890 : 4E75                		rts
   11330/    B892 :                     ; ---------------------------------------------------------------------------
   11331/    B892 :                     
   11332/    B892 :                     loc_B892:
   11333/    B892 : 70F4                		moveq	#$FFFFFFF4,d0
   11334/    B894 : 72EE                		moveq	#$FFFFFFEE,d1
   11335/    B896 : 6100 11EA           		bsr.w	sub_CA82
   11336/    B89A : 3D7C 005C 0026      		move.w	#$5C,$26(a6)
   11337/    B8A0 : 4E75                		rts
   11338/    B8A2 :                     ; ---------------------------------------------------------------------------
   11339/    B8A2 :                     
   11340/    B8A2 :                     loc_B8A2:
   11341/    B8A2 : 4A6D 002E           		tst.w	$2E(a5)
   11342/    B8A6 : 6748                		beq.s	sub_B8F0
   11343/    B8A8 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11344/    B8AE : 102D 002B           		move.b	$2B(a5),d0
   11345/    B8B2 : 5000                		addq.b	#8,d0
   11346/    B8B4 : E648                		lsr.w	#3,d0
   11347/    B8B6 : 0240 001E           		andi.w	#$1E,d0
   11348/    B8BA : 3D7B 0014 0026      		move.w	word_B8D0(pc,d0.w),$26(a6)
   11349/    B8C0 : 422E 0020           		clr.b	$20(a6)
   11350/    B8C4 : 7000                		moveq	#0,d0
   11351/    B8C6 : 72FE                		moveq	#-2,d1
   11352/    B8C8 : 142D 0020           		move.b	$20(a5),d2
   11353/    B8CC : 6000 11BC           		bra.w	loc_CA8A
   11354/    B8D0 :                     ; ---------------------------------------------------------------------------
   11355/    B8D0 : 0020                word_B8D0:	dc.w $20
   11356/    B8D2 : 001C                		dc.w $1C
   11357/    B8D4 : 0018                		dc.w $18
   11358/    B8D6 : 0014                		dc.w $14
   11359/    B8D8 : 0010                		dc.w $10
   11360/    B8DA : 000C                		dc.w $C
   11361/    B8DC : 0008                		dc.w 8
   11362/    B8DE : 0004                		dc.w 4
   11363/    B8E0 : 0000                		dc.w 0
   11364/    B8E2 : 003C                		dc.w $3C
   11365/    B8E4 : 0038                		dc.w $38
   11366/    B8E6 : 0034                		dc.w $34
   11367/    B8E8 : 0030                		dc.w $30
   11368/    B8EA : 002C                		dc.w $2C
   11369/    B8EC : 0028                		dc.w $28
   11370/    B8EE : 0024                		dc.w $24
   11371/    B8F0 :                     
   11372/    B8F0 :                     ; =============== S U B	R O U T	I N E =======================================
   11373/    B8F0 :                     
   11374/    B8F0 :                     
   11375/    B8F0 :                     sub_B8F0:
   11376/    B8F0 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11377/    B8F6 : 7800                		moveq	#0,d4
   11378/    B8F8 : 182D 0028           		move.b	$28(a5),d4
   11379/    B8FC : D844                		add.w	d4,d4
   11380/    B8FE : D844                		add.w	d4,d4
   11381/    B900 : D844                		add.w	d4,d4
   11382/    B902 : 3D70 4000 0026      		move.w	(a0,d4.w),$26(a6)
   11383/    B908 : 3030 4002           		move.w	2(a0,d4.w),d0
   11384/    B90C : 3230 4004           		move.w	4(a0,d4.w),d1
   11385/    B910 : 6100 1170           		bsr.w	sub_CA82
   11386/    B914 : 4E75                		rts
   11387/    B916 :                     ; End of function sub_B8F0
   11388/    B916 :                     
   11389/    B916 :                     ; ---------------------------------------------------------------------------
   11390/    B916 :                     
   11391/    B916 :                     sub_B916:
   11392/    B916 : 41FA 0004           		lea	word_B91C(pc),a0
   11393/    B91A : 6086                		bra.s	loc_B8A2
   11394/    B91C :                     ; ---------------------------------------------------------------------------
   11395/    B91C : 0060                word_B91C:	dc.w $60
   11396/    B91E : FFF4                		dc.w $FFF4
   11397/    B920 : FFEE                		dc.w $FFEE
   11398/    B922 : 0000                		dc.w 0
   11399/    B924 : 0064                		dc.w $64
   11400/    B926 : FFF4                		dc.w $FFF4
   11401/    B928 : FFEE                		dc.w $FFEE
   11402/    B92A : 0000                		dc.w 0
   11403/    B92C : 0058                		dc.w $58
   11404/    B92E : FFF4                		dc.w $FFF4
   11405/    B930 : FFEE                		dc.w $FFEE
   11406/    B932 : 0000                		dc.w 0
   11407/    B934 : 005C                		dc.w $5C
   11408/    B936 : FFF4                		dc.w $FFF4
   11409/    B938 : FFEE                		dc.w $FFEE
   11410/    B93A : 0000                		dc.w 0
   11411/    B93C : 0060                		dc.w $60
   11412/    B93E : FFF4                		dc.w $FFF4
   11413/    B940 : FFEE                		dc.w $FFEE
   11414/    B942 : 0000                		dc.w 0
   11415/    B944 : 0064                		dc.w $64
   11416/    B946 : FFF4                		dc.w $FFF4
   11417/    B948 : FFEE                		dc.w $FFEE
   11418/    B94A : 0000                		dc.w 0
   11419/    B94C : 0058                		dc.w $58
   11420/    B94E : FFF4                		dc.w $FFF4
   11421/    B950 : FFEE                		dc.w $FFEE
   11422/    B952 : 0000                		dc.w 0
   11423/    B954 : 005C                		dc.w $5C
   11424/    B956 : FFF4                		dc.w $FFF4
   11425/    B958 : FFEE                		dc.w $FFEE
   11426/    B95A : 0000                		dc.w 0
   11427/    B95C :                     ; ---------------------------------------------------------------------------
   11428/    B95C :                     
   11429/    B95C :                     sub_B95C:
   11430/    B95C : 41FA 0006           		lea	word_B964(pc),a0
   11431/    B960 : 6000 FF40           		bra.w	loc_B8A2
   11432/    B964 :                     ; ---------------------------------------------------------------------------
   11433/    B964 : 0070                word_B964:	dc.w $70
   11434/    B966 : FFF0                		dc.w $FFF0
   11435/    B968 : FFE9                		dc.w $FFE9
   11436/    B96A : 0000                		dc.w 0
   11437/    B96C : 0074                		dc.w $74
   11438/    B96E : FFF0                		dc.w $FFF0
   11439/    B970 : FFE9                		dc.w $FFE9
   11440/    B972 : 0000                		dc.w 0
   11441/    B974 : 0068                		dc.w $68
   11442/    B976 : FFF0                		dc.w $FFF0
   11443/    B978 : FFE9                		dc.w $FFE9
   11444/    B97A : 0000                		dc.w 0
   11445/    B97C : 006C                		dc.w $6C
   11446/    B97E : FFF0                		dc.w $FFF0
   11447/    B980 : FFE9                		dc.w $FFE9
   11448/    B982 : 0000                		dc.w 0
   11449/    B984 : 0070                		dc.w $70
   11450/    B986 : FFF0                		dc.w $FFF0
   11451/    B988 : FFE9                		dc.w $FFE9
   11452/    B98A : 0000                		dc.w 0
   11453/    B98C : 0074                		dc.w $74
   11454/    B98E : FFF0                		dc.w $FFF0
   11455/    B990 : FFE9                		dc.w $FFE9
   11456/    B992 : 0000                		dc.w 0
   11457/    B994 : 0068                		dc.w $68
   11458/    B996 : FFF0                		dc.w $FFF0
   11459/    B998 : FFE9                		dc.w $FFE9
   11460/    B99A : 0000                		dc.w 0
   11461/    B99C : 006C                		dc.w $6C
   11462/    B99E : FFF0                		dc.w $FFF0
   11463/    B9A0 : FFE9                		dc.w $FFE9
   11464/    B9A2 : 0000                		dc.w 0
   11465/    B9A4 :                     ; ---------------------------------------------------------------------------
   11466/    B9A4 :                     
   11467/    B9A4 :                     sub_B9A4:
   11468/    B9A4 : 41FA 0006           		lea	word_B9AC(pc),a0
   11469/    B9A8 : 6000 FEF8           		bra.w	loc_B8A2
   11470/    B9AC :                     ; ---------------------------------------------------------------------------
   11471/    B9AC : 0080                word_B9AC:	dc.w $80
   11472/    B9AE : FFEE                		dc.w $FFEE
   11473/    B9B0 : FFEC                		dc.w $FFEC
   11474/    B9B2 : 0000                		dc.w 0
   11475/    B9B4 : 0084                		dc.w $84
   11476/    B9B6 : FFEE                		dc.w $FFEE
   11477/    B9B8 : FFEC                		dc.w $FFEC
   11478/    B9BA : 0000                		dc.w 0
   11479/    B9BC : 0078                		dc.w $78
   11480/    B9BE : FFEE                		dc.w $FFEE
   11481/    B9C0 : FFEC                		dc.w $FFEC
   11482/    B9C2 : 0000                		dc.w 0
   11483/    B9C4 : 007C                		dc.w $7C
   11484/    B9C6 : FFEE                		dc.w $FFEE
   11485/    B9C8 : FFEC                		dc.w $FFEC
   11486/    B9CA : 0000                		dc.w 0
   11487/    B9CC : 0080                		dc.w $80
   11488/    B9CE : FFEE                		dc.w $FFEE
   11489/    B9D0 : FFEC                		dc.w $FFEC
   11490/    B9D2 : 0000                		dc.w 0
   11491/    B9D4 : 0084                		dc.w $84
   11492/    B9D6 : FFEE                		dc.w $FFEE
   11493/    B9D8 : FFEC                		dc.w $FFEC
   11494/    B9DA : 0000                		dc.w 0
   11495/    B9DC : 0078                		dc.w $78
   11496/    B9DE : FFEE                		dc.w $FFEE
   11497/    B9E0 : FFEC                		dc.w $FFEC
   11498/    B9E2 : 0000                		dc.w 0
   11499/    B9E4 : 007C                		dc.w $7C
   11500/    B9E6 : FFEE                		dc.w $FFEE
   11501/    B9E8 : FFEC                		dc.w $FFEC
   11502/    B9EA : 0000                		dc.w 0
   11503/    B9EC :                     ; ---------------------------------------------------------------------------
   11504/    B9EC :                     
   11505/    B9EC :                     sub_B9EC:
   11506/    B9EC : 41FA 0006           		lea	word_B9F4(pc),a0
   11507/    B9F0 : 6000 FEB0           		bra.w	loc_B8A2
   11508/    B9F4 :                     ; ---------------------------------------------------------------------------
   11509/    B9F4 : 0080                word_B9F4:	dc.w $80
   11510/    B9F6 : FFF0                		dc.w $FFF0
   11511/    B9F8 : FFE8                		dc.w $FFE8
   11512/    B9FA : 0000                		dc.w 0
   11513/    B9FC : 0084                		dc.w $84
   11514/    B9FE : FFF0                		dc.w $FFF0
   11515/    BA00 : FFE8                		dc.w $FFE8
   11516/    BA02 : 0000                		dc.w 0
   11517/    BA04 : 0078                		dc.w $78
   11518/    BA06 : FFF0                		dc.w $FFF0
   11519/    BA08 : FFE8                		dc.w $FFE8
   11520/    BA0A : 0000                		dc.w 0
   11521/    BA0C : 007C                		dc.w $7C
   11522/    BA0E : FFF0                		dc.w $FFF0
   11523/    BA10 : FFE8                		dc.w $FFE8
   11524/    BA12 : 0000                		dc.w 0
   11525/    BA14 : 0080                		dc.w $80
   11526/    BA16 : FFF0                		dc.w $FFF0
   11527/    BA18 : FFE8                		dc.w $FFE8
   11528/    BA1A : 0000                		dc.w 0
   11529/    BA1C : 0084                		dc.w $84
   11530/    BA1E : FFF0                		dc.w $FFF0
   11531/    BA20 : FFE8                		dc.w $FFE8
   11532/    BA22 : 0000                		dc.w 0
   11533/    BA24 : 0078                		dc.w $78
   11534/    BA26 : FFF0                		dc.w $FFF0
   11535/    BA28 : FFE8                		dc.w $FFE8
   11536/    BA2A : 0000                		dc.w 0
   11537/    BA2C : 007C                		dc.w $7C
   11538/    BA2E : FFF0                		dc.w $FFF0
   11539/    BA30 : FFE8                		dc.w $FFE8
   11540/    BA32 : 0000                		dc.w 0
   11541/    BA34 :                     ; ---------------------------------------------------------------------------
   11542/    BA34 :                     
   11543/    BA34 :                     sub_BA34:
   11544/    BA34 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11545/    BA3A : 70F0                		moveq	#$FFFFFFF0,d0
   11546/    BA3C : 72EE                		moveq	#$FFFFFFEE,d1
   11547/    BA3E : 6100 1042           		bsr.w	sub_CA82
   11548/    BA42 : 3D7C 00A8 0026      		move.w	#$A8,$26(a6)
   11549/    BA48 : 4E75                		rts
   11550/    BA4A :                     ; ---------------------------------------------------------------------------
   11551/    BA4A :                     
   11552/    BA4A :                     sub_BA4A:
   11553/    BA4A : 006E 0080 0004      		ori.w	#$80,4(a6)
   11554/    BA50 : 70F0                		moveq	#$FFFFFFF0,d0
   11555/    BA52 : 72E9                		moveq	#$FFFFFFE9,d1
   11556/    BA54 : 6100 102C           		bsr.w	sub_CA82
   11557/    BA58 : 3D7C 00AC 0026      		move.w	#$AC,$26(a6)
   11558/    BA5E : 4E75                		rts
   11559/    BA60 :                     ; ---------------------------------------------------------------------------
   11560/    BA60 :                     
   11561/    BA60 :                     sub_BA60:
   11562/    BA60 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11563/    BA66 : 70EE                		moveq	#$FFFFFFEE,d0
   11564/    BA68 : 72F0                		moveq	#$FFFFFFF0,d1
   11565/    BA6A : 6100 1016           		bsr.w	sub_CA82
   11566/    BA6E : 3D7C 00B0 0026      		move.w	#$B0,$26(a6)
   11567/    BA74 : 4E75                		rts
   11568/    BA76 :                     ; ---------------------------------------------------------------------------
   11569/    BA76 :                     
   11570/    BA76 :                     sub_BA76:
   11571/    BA76 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11572/    BA7C : 70F0                		moveq	#$FFFFFFF0,d0
   11573/    BA7E : 72E8                		moveq	#$FFFFFFE8,d1
   11574/    BA80 : 6100 1000           		bsr.w	sub_CA82
   11575/    BA84 : 3D7C 00B4 0026      		move.w	#$B4,$26(a6)
   11576/    BA8A : 4E75                		rts
   11577/    BA8C :                     ; ---------------------------------------------------------------------------
   11578/    BA8C :                     
   11579/    BA8C :                     loc_BA8C:
   11580/    BA8C : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11581/    BA92 : 4E75                		rts
   11582/    BA94 :                     ; ---------------------------------------------------------------------------
   11583/    BA94 :                     
   11584/    BA94 :                     sub_BA94:
   11585/    BA94 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11586/    BA9A : 70F4                		moveq	#$FFFFFFF4,d0
   11587/    BA9C : 0C2D 0014 0028      		cmpi.b	#$14,$28(a5)
   11588/    BAA2 : 6502                		bcs.s	loc_BAA6
   11589/    BAA4 : 5340                		subq.w	#1,d0
   11590/    BAA6 :                     
   11591/    BAA6 :                     loc_BAA6:
   11592/    BAA6 : 72EE                		moveq	#$FFFFFFEE,d1
   11593/    BAA8 : 6100 0FD8           		bsr.w	sub_CA82
   11594/    BAAC : 3D7C 005C 0026      		move.w	#$5C,$26(a6)
   11595/    BAB2 : 4E75                		rts
   11596/    BAB4 :                     ; ---------------------------------------------------------------------------
   11597/    BAB4 :                     
   11598/    BAB4 :                     sub_BAB4:
   11599/    BAB4 : 41FA 0008           		lea	word_BABE(pc),a0
   11600/    BAB8 : 6100 FE36           		bsr.w	sub_B8F0
   11601/    BABC : 4E75                		rts
   11602/    BABE :                     ; ---------------------------------------------------------------------------
   11603/    BABE : 0040                word_BABE:	dc.w $40
   11604/    BAC0 : FFEE                		dc.w $FFEE
   11605/    BAC2 : FFEC                		dc.w $FFEC
   11606/    BAC4 : 0000                		dc.w 0
   11607/    BAC6 : 0044                		dc.w $44
   11608/    BAC8 : FFEC                		dc.w $FFEC
   11609/    BACA : FFEA                		dc.w $FFEA
   11610/    BACC : 0000                		dc.w 0
   11611/    BACE : 0048                		dc.w $48
   11612/    BAD0 : FFEC                		dc.w $FFEC
   11613/    BAD2 : FFEA                		dc.w $FFEA
   11614/    BAD4 : 0000                		dc.w 0
   11615/    BAD6 : 0044                		dc.w $44
   11616/    BAD8 : FFEC                		dc.w $FFEC
   11617/    BADA : FFEA                		dc.w $FFEA
   11618/    BADC : 0000                		dc.w 0
   11619/    BADE :                     ; ---------------------------------------------------------------------------
   11620/    BADE :                     
   11621/    BADE :                     sub_BADE:
   11622/    BADE : 41FA 0008           		lea	loc_BAE8(pc),a0
   11623/    BAE2 : 6100 FE0C           		bsr.w	sub_B8F0
   11624/    BAE6 : 4E75                		rts
   11625/    BAE8 :                     ; ---------------------------------------------------------------------------
   11626/    BAE8 : 004C                loc_BAE8:	dc.w $4C
   11627/    BAEA : FFEC                		dc.w $FFEC
   11628/    BAEC : FFEC                		dc.w $FFEC
   11629/    BAEE : 0000                		dc.w 0
   11630/    BAF0 : 0050                		dc.w $50
   11631/    BAF2 : FFEC                		dc.w $FFEC
   11632/    BAF4 : FFEA                		dc.w $FFEA
   11633/    BAF6 : 0000                		dc.w 0
   11634/    BAF8 : 0054                		dc.w $54
   11635/    BAFA : FFEC                		dc.w $FFEC
   11636/    BAFC : FFEC                		dc.w $FFEC
   11637/    BAFE : 0000                		dc.w 0
   11638/    BB00 : 0050                		dc.w $50
   11639/    BB02 : FFEC                		dc.w $FFEC
   11640/    BB04 : FFEC                		dc.w $FFEC
   11641/    BB06 : 0000                		dc.w 0
   11642/    BB08 :                     ; ---------------------------------------------------------------------------
   11643/    BB08 :                     
   11644/    BB08 :                     loc_BB08:
   11645/    BB08 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11646/    BB0E : 4E75                		rts
   11647/    BB10 :                     ; ---------------------------------------------------------------------------
   11648/    BB10 :                     
   11649/    BB10 :                     sub_BB10:
   11650/    BB10 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11651/    BB16 : 70FD                		moveq	#-3,d0
   11652/    BB18 : 72FB                		moveq	#-5,d1
   11653/    BB1A : 6100 0F66           		bsr.w	sub_CA82
   11654/    BB1E : 3D7C 00BC 0026      		move.w	#$BC,$26(a6)
   11655/    BB24 : 4E75                		rts
   11656/    BB26 :                     ; ---------------------------------------------------------------------------
   11657/    BB26 :                     
   11658/    BB26 :                     sub_BB26:
   11659/    BB26 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11660/    BB2C : 7000                		moveq	#0,d0
   11661/    BB2E : 72FB                		moveq	#-5,d1
   11662/    BB30 : 082D 0000 0028      		btst	#0,$28(a5)
   11663/    BB36 : 6702                		beq.s	loc_BB3A
   11664/    BB38 : 70FE                		moveq	#-2,d0
   11665/    BB3A :                     
   11666/    BB3A :                     loc_BB3A:
   11667/    BB3A : 6100 0F46           		bsr.w	sub_CA82
   11668/    BB3E : 3D7C 00BC 0026      		move.w	#$BC,$26(a6)
   11669/    BB44 : 4E75                		rts
   11670/    BB46 :                     ; ---------------------------------------------------------------------------
   11671/    BB46 :                     
   11672/    BB46 :                     sub_BB46:
   11673/    BB46 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11674/    BB4C : 7004                		moveq	#4,d0
   11675/    BB4E : 72E7                		moveq	#$FFFFFFE7,d1
   11676/    BB50 : 082D 0000 0028      		btst	#0,$28(a5)
   11677/    BB56 : 6704                		beq.s	loc_BB5C
   11678/    BB58 : 7003                		moveq	#3,d0
   11679/    BB5A : 72E8                		moveq	#$FFFFFFE8,d1
   11680/    BB5C :                     
   11681/    BB5C :                     loc_BB5C:
   11682/    BB5C : 6100 0F24           		bsr.w	sub_CA82
   11683/    BB60 : 3D7C 00C0 0026      		move.w	#$C0,$26(a6)
   11684/    BB66 : 4E75                		rts
   11685/    BB68 :                     ; ---------------------------------------------------------------------------
   11686/    BB68 :                     
   11687/    BB68 :                     sub_BB68:
   11688/    BB68 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11689/    BB6E : 70FB                		moveq	#-5,d0
   11690/    BB70 : 72E9                		moveq	#$FFFFFFE9,d1
   11691/    BB72 : 082D 0000 0028      		btst	#0,$28(a5)
   11692/    BB78 : 6702                		beq.s	loc_BB7C
   11693/    BB7A : 72EB                		moveq	#$FFFFFFEB,d1
   11694/    BB7C :                     
   11695/    BB7C :                     loc_BB7C:
   11696/    BB7C : 6100 0F04           		bsr.w	sub_CA82
   11697/    BB80 : 3D7C 00C4 0026      		move.w	#$C4,$26(a6)
   11698/    BB86 : 4E75                		rts
   11699/    BB88 :                     ; ---------------------------------------------------------------------------
   11700/    BB88 :                     
   11701/    BB88 :                     sub_BB88:
   11702/    BB88 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11703/    BB8E : 70EE                		moveq	#$FFFFFFEE,d0
   11704/    BB90 : 72F6                		moveq	#$FFFFFFF6,d1
   11705/    BB92 : 082D 0000 0028      		btst	#0,$28(a5)
   11706/    BB98 : 6704                		beq.s	loc_BB9E
   11707/    BB9A : 70EF                		moveq	#$FFFFFFEF,d0
   11708/    BB9C : 72F7                		moveq	#$FFFFFFF7,d1
   11709/    BB9E :                     
   11710/    BB9E :                     loc_BB9E:
   11711/    BB9E : 6100 0EE2           		bsr.w	sub_CA82
   11712/    BBA2 : 3D7C 00C8 0026      		move.w	#$C8,$26(a6)
   11713/    BBA8 : 4E75                		rts
   11714/    BBAA :                     ; ---------------------------------------------------------------------------
   11715/    BBAA :                     
   11716/    BBAA :                     loc_BBAA:
   11717/    BBAA : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11718/    BBB0 : 4E75                		rts
   11719/    BBB2 :                     ; ---------------------------------------------------------------------------
   11720/    BBB2 :                     
   11721/    BBB2 :                     loc_BBB2:
   11722/    BBB2 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11723/    BBB8 : 4E75                		rts
   11724/    BBBA :                     ; ---------------------------------------------------------------------------
   11725/    BBBA :                     
   11726/    BBBA :                     sub_BBBA:
   11727/    BBBA : 006E 0080 0004      		ori.w	#$80,4(a6)
   11728/    BBC0 : 70F4                		moveq	#$FFFFFFF4,d0
   11729/    BBC2 : 72EE                		moveq	#$FFFFFFEE,d1
   11730/    BBC4 : 6100 0EBC           		bsr.w	sub_CA82
   11731/    BBC8 : 7000                		moveq	#0,d0
   11732/    BBCA : 102D 0028           		move.b	$28(a5),d0
   11733/    BBCE : D040                		add.w	d0,d0
   11734/    BBD0 : 3D7B 0006 0026      		move.w	word_BBD8(pc,d0.w),$26(a6)
   11735/    BBD6 : 4E75                		rts
   11736/    BBD8 :                     ; ---------------------------------------------------------------------------
   11737/    BBD8 : 00F0                word_BBD8:	dc.w $F0
   11738/    BBDA : 00F4                		dc.w $F4
   11739/    BBDC : 00F8                		dc.w $F8
   11740/    BBDE : 00FC                		dc.w $FC
   11741/    BBE0 : 0100                		dc.w $100
   11742/    BBE2 : 0104                		dc.w $104
   11743/    BBE4 : 0108                		dc.w $108
   11744/    BBE6 : 010C                		dc.w $10C
   11745/    BBE8 :                     ; ---------------------------------------------------------------------------
   11746/    BBE8 :                     
   11747/    BBE8 :                     loc_BBE8:
   11748/    BBE8 :                     
   11749/    BBE8 : 4A2E 0005           		tst.b	5(a6)
   11750/    BBEC : 6B02                		bmi.s	loc_BBF0
   11751/    BBEE : 4E75                		rts
   11752/    BBF0 :                     ; ---------------------------------------------------------------------------
   11753/    BBF0 :                     
   11754/    BBF0 :                     loc_BBF0:
   11755/    BBF0 : 302E 0026           		move.w	$26(a6),d0
   11756/    BBF4 : 41F9 0006 777C      		lea	(PLCMAP_TalArm_MainIndex).l,a0
   11757/    BBFA : 43F9 0006 7B34      		lea	(MAP_TailsArm).l,a1
   11758/    BC00 : 45F9 0006 788C      		lea	(PLC_TailsArm).l,a2
   11759/    BC06 : D2F0 0000           		adda.w	(a0,d0.w),a1
   11760/    BC0A : D4F0 0002           		adda.w	2(a0,d0.w),a2
   11761/    BC0E : 2D49 0010           		move.l	a1,obMap(a6)
   11762/    BC12 : 4A2D 0006           		tst.b	6(a5)
   11763/    BC16 : 660C                		bne.s	loc_BC24
   11764/    BC18 : 21CA D888           		move.l	a2,($FFFFD888).w
   11765/    BC1C : 0038 0008 D87A      		ori.b	#8,($FFFFD87A).w
   11766/    BC22 : 4E75                		rts
   11767/    BC24 :                     ; ---------------------------------------------------------------------------
   11768/    BC24 :                     
   11769/    BC24 :                     loc_BC24:
   11770/    BC24 : 21CA D88C           		move.l	a2,($FFFFD88C).w
   11771/    BC28 : 0038 0010 D87A      		ori.b	#$10,($FFFFD87A).w
   11772/    BC2E : 4E75                		rts
   11773/    BC30 :                     ; ---------------------------------------------------------------------------
   11774/    BC30 :                     
   11775/    BC30 :                     loc_BC30:
   11776/    BC30 : 3A6E 0024           		movea.w	$24(a6),a5
   11777/    BC34 : 4A2D 0005           		tst.b	5(a5)
   11778/    BC38 : 6B0A                		bmi.s	loc_BC44
   11779/    BC3A : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11780/    BC40 : 6000 01E4           		bra.w	loc_BE26
   11781/    BC44 :                     ; ---------------------------------------------------------------------------
   11782/    BC44 :                     
   11783/    BC44 :                     loc_BC44:
   11784/    BC44 : 4879 0000 BE26      		pea	(loc_BE26).l
   11785/    BC4A : 3E2D 0026           		move.w	$26(a5),d7
   11786/    BC4E : 3E3B 7006           		move.w	word_BC56(pc,d7.w),d7
   11787/    BC52 : 4EFB 7002           		jmp	word_BC56(pc,d7.w)
   11788/    BC56 :                     ; ---------------------------------------------------------------------------
   11789/    BC56 : 0034                word_BC56:	dc.w loc_BC8A-word_BC56
   11790/    BC58 : 0066                		dc.w loc_BCBC-word_BC56
   11791/    BC5A : 0066                		dc.w loc_BCBC-word_BC56
   11792/    BC5C : 0066                		dc.w loc_BCBC-word_BC56
   11793/    BC5E : 0066                		dc.w loc_BCBC-word_BC56
   11794/    BC60 : 006E                		dc.w loc_BCC4-word_BC56
   11795/    BC62 : 006E                		dc.w loc_BCC4-word_BC56
   11796/    BC64 : 006E                		dc.w loc_BCC4-word_BC56
   11797/    BC66 : 006E                		dc.w loc_BCC4-word_BC56
   11798/    BC68 : 009A                		dc.w loc_BCF0-word_BC56
   11799/    BC6A : 0034                		dc.w loc_BC8A-word_BC56
   11800/    BC6C : 0034                		dc.w loc_BC8A-word_BC56
   11801/    BC6E : 0034                		dc.w loc_BC8A-word_BC56
   11802/    BC70 : 0180                		dc.w loc_BDD6-word_BC56
   11803/    BC72 : 0034                		dc.w loc_BC8A-word_BC56
   11804/    BC74 : 0066                		dc.w loc_BCBC-word_BC56
   11805/    BC76 : 0066                		dc.w loc_BCBC-word_BC56
   11806/    BC78 : 0066                		dc.w loc_BCBC-word_BC56
   11807/    BC7A : 0066                		dc.w loc_BCBC-word_BC56
   11808/    BC7C : 006E                		dc.w loc_BCC4-word_BC56
   11809/    BC7E : 006E                		dc.w loc_BCC4-word_BC56
   11810/    BC80 : 006E                		dc.w loc_BCC4-word_BC56
   11811/    BC82 : 006E                		dc.w loc_BCC4-word_BC56
   11812/    BC84 : 0188                		dc.w loc_BDDE-word_BC56
   11813/    BC86 : 01C0                		dc.w loc_BE16-word_BC56
   11814/    BC88 : 01C8                		dc.w loc_BE1E-word_BC56
   11815/    BC8A :                     ; ---------------------------------------------------------------------------
   11816/    BC8A :                     
   11817/    BC8A :                     loc_BC8A:
   11818/    BC8A : 006E 0080 0004      		ori.w	#$80,4(a6)
   11819/    BC90 :                     
   11820/    BC90 :                     sub_BC90:
   11821/    BC90 : 302E 002A           		move.w	$2A(a6),d0
   11822/    BC94 : 0640 0020           		addi.w	#$20,d0
   11823/    BC98 : 0C40 0500           		cmpi.w	#$500,d0
   11824/    BC9C : 6502                		bcs.s	loc_BCA0
   11825/    BC9E : 7000                		moveq	#0,d0
   11826/    BCA0 :                     
   11827/    BCA0 :                     loc_BCA0:
   11828/    BCA0 : 3D40 002A           		move.w	d0,$2A(a6)
   11829/    BCA4 : 7000                		moveq	#0,d0
   11830/    BCA6 : 102E 002A           		move.b	$2A(a6),d0
   11831/    BCAA : 0640 0076           		addi.w	#$76,d0
   11832/    BCAE : 3D40 0026           		move.w	d0,$26(a6)
   11833/    BCB2 : 70DC                		moveq	#$FFFFFFDC,d0
   11834/    BCB4 : 72EE                		moveq	#$FFFFFFEE,d1
   11835/    BCB6 : 6100 0DCA           		bsr.w	sub_CA82
   11836/    BCBA : 4E75                		rts
   11837/    BCBC :                     ; ---------------------------------------------------------------------------
   11838/    BCBC :                     
   11839/    BCBC :                     loc_BCBC:
   11840/    BCBC : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11841/    BCC2 : 4E75                		rts
   11842/    BCC4 :                     ; ---------------------------------------------------------------------------
   11843/    BCC4 :                     
   11844/    BCC4 :                     loc_BCC4:
   11845/    BCC4 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11846/    BCCA : 3D7C 0067 0026      		move.w	#$67,$26(a6)
   11847/    BCD0 : 70F0                		moveq	#$FFFFFFF0,d0
   11848/    BCD2 : 7200                		moveq	#0,d1
   11849/    BCD4 : 1D7C 0000 0020      		move.b	#0,$20(a6)
   11850/    BCDA : 4A2D 0028           		tst.b	$28(a5)
   11851/    BCDE : 6706                		beq.s	loc_BCE6
   11852/    BCE0 : 1D7C 0018 0020      		move.b	#$18,$20(a6)
   11853/    BCE6 :                     
   11854/    BCE6 :                     loc_BCE6:
   11855/    BCE6 : 142D 0020           		move.b	$20(a5),d2
   11856/    BCEA : 6100 0D9E           		bsr.w	loc_CA8A
   11857/    BCEE : 4E75                		rts
   11858/    BCF0 :                     ; ---------------------------------------------------------------------------
   11859/    BCF0 :                     
   11860/    BCF0 :                     loc_BCF0:
   11861/    BCF0 : 006E 0080 0004      		ori.w	#$80,4(a6)
   11862/    BCF6 : 302D 0018           		move.w	$18(a5),d0
   11863/    BCFA : 322D 001C           		move.w	$1C(a5),d1
   11864/    BCFE : 4EB8 42CE           		jsr	(sub_42CE).w
   11865/    BD02 : 0642 0010           		addi.w	#$10,d2
   11866/    BD06 : 0242 00E0           		andi.w	#$E0,d2
   11867/    BD0A : E44A                		lsr.w	#2,d2
   11868/    BD0C : 303B 202C           		move.w	word_BD36+4(pc,d2.w),d0
   11869/    BD10 : 122D 0028           		move.b	$28(a5),d1
   11870/    BD14 : 0241 001E           		andi.w	#$1E,d1
   11871/    BD18 : D041                		add.w	d1,d0
   11872/    BD1A : 3D7B 005A 0026      		move.w	word_BD76(pc,d0.w),$26(a6)
   11873/    BD20 : 303B 2014           		move.w	word_BD36(pc,d2.w),d0
   11874/    BD24 : 323B 2012           		move.w	word_BD36+2(pc,d2.w),d1
   11875/    BD28 : 343B 2012           		move.w	word_BD36+6(pc,d2.w),d2
   11876/    BD2C : 1D42 0020           		move.b	d2,$20(a6)
   11877/    BD30 : 6100 0D58           		bsr.w	loc_CA8A
   11878/    BD34 : 4E75                		rts
   11879/    BD36 :                     ; ---------------------------------------------------------------------------
   11880/    BD36 : FFDC                word_BD36:	dc.w $FFDC
   11881/    BD38 : FFF8                		dc.w $FFF8
   11882/    BD3A : 0000                		dc.w 0
   11883/    BD3C : 0000                		dc.w 0
   11884/    BD3E : 0007                		dc.w 7
   11885/    BD40 : 0007                		dc.w 7
   11886/    BD42 : 0048                		dc.w $48
   11887/    BD44 : 0018                		dc.w $18
   11888/    BD46 : FFF8                		dc.w $FFF8
   11889/    BD48 : 000C                		dc.w $C
   11890/    BD4A : 0030                		dc.w $30
   11891/    BD4C : 0018                		dc.w $18
   11892/    BD4E : FFE1                		dc.w $FFE1
   11893/    BD50 : 0007                		dc.w 7
   11894/    BD52 : 0018                		dc.w $18
   11895/    BD54 : 0018                		dc.w $18
   11896/    BD56 : FFDC                		dc.w $FFDC
   11897/    BD58 : FFF8                		dc.w $FFF8
   11898/    BD5A : 0000                		dc.w 0
   11899/    BD5C : 0018                		dc.w $18
   11900/    BD5E : 0007                		dc.w 7
   11901/    BD60 : 0007                		dc.w 7
   11902/    BD62 : 0048                		dc.w $48
   11903/    BD64 : 0000                		dc.w 0
   11904/    BD66 : FFF8                		dc.w $FFF8
   11905/    BD68 : 000C                		dc.w $C
   11906/    BD6A : 0030                		dc.w $30
   11907/    BD6C : 0000                		dc.w 0
   11908/    BD6E : FFE1                		dc.w $FFE1
   11909/    BD70 : 0007                		dc.w 7
   11910/    BD72 : 0018                		dc.w $18
   11911/    BD74 : 0000                		dc.w 0
   11912/    BD76 : 0054                word_BD76:	dc.w $54
   11913/    BD78 : 0055                		dc.w $55
   11914/    BD7A : 0056                		dc.w $56
   11915/    BD7C : 0057                		dc.w $57
   11916/    BD7E : 0054                		dc.w $54
   11917/    BD80 : 0055                		dc.w $55
   11918/    BD82 : 0056                		dc.w $56
   11919/    BD84 : 0057                		dc.w $57
   11920/    BD86 : 0054                		dc.w $54
   11921/    BD88 : 0055                		dc.w $55
   11922/    BD8A : 0056                		dc.w $56
   11923/    BD8C : 0057                		dc.w $57
   11924/    BD8E : 0058                		dc.w $58
   11925/    BD90 : 0059                		dc.w $59
   11926/    BD92 : 005A                		dc.w $5A
   11927/    BD94 : 005B                		dc.w $5B
   11928/    BD96 : 0058                		dc.w $58
   11929/    BD98 : 0059                		dc.w $59
   11930/    BD9A : 005A                		dc.w $5A
   11931/    BD9C : 005B                		dc.w $5B
   11932/    BD9E : 0058                		dc.w $58
   11933/    BDA0 : 0059                		dc.w $59
   11934/    BDA2 : 005A                		dc.w $5A
   11935/    BDA4 : 005B                		dc.w $5B
   11936/    BDA6 : 005C                		dc.w $5C
   11937/    BDA8 : 005D                		dc.w $5D
   11938/    BDAA : 005E                		dc.w $5E
   11939/    BDAC : 005F                		dc.w $5F
   11940/    BDAE : 005C                		dc.w $5C
   11941/    BDB0 : 005D                		dc.w $5D
   11942/    BDB2 : 005E                		dc.w $5E
   11943/    BDB4 : 005F                		dc.w $5F
   11944/    BDB6 : 005C                		dc.w $5C
   11945/    BDB8 : 005D                		dc.w $5D
   11946/    BDBA : 005E                		dc.w $5E
   11947/    BDBC : 005F                		dc.w $5F
   11948/    BDBE : 0060                		dc.w $60
   11949/    BDC0 : 0061                		dc.w $61
   11950/    BDC2 : 0062                		dc.w $62
   11951/    BDC4 : 0063                		dc.w $63
   11952/    BDC6 : 0060                		dc.w $60
   11953/    BDC8 : 0061                		dc.w $61
   11954/    BDCA : 0062                		dc.w $62
   11955/    BDCC : 0063                		dc.w $63
   11956/    BDCE : 0060                		dc.w $60
   11957/    BDD0 : 0061                		dc.w $61
   11958/    BDD2 : 0062                		dc.w $62
   11959/    BDD4 : 0063                		dc.w $63
   11960/    BDD6 :                     ; ---------------------------------------------------------------------------
   11961/    BDD6 :                     
   11962/    BDD6 :                     loc_BDD6:
   11963/    BDD6 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11964/    BDDC : 4E75                		rts
   11965/    BDDE :                     ; ---------------------------------------------------------------------------
   11966/    BDDE :                     
   11967/    BDDE :                     loc_BDDE:
   11968/    BDDE : 006E 0080 0004      		ori.w	#$80,4(a6)
   11969/    BDE4 : 7000                		moveq	#0,d0
   11970/    BDE6 : 102D 0028           		move.b	$28(a5),d0
   11971/    BDEA : D040                		add.w	d0,d0
   11972/    BDEC : 3D7B 000E 0026      		move.w	word_BDFC(pc,d0.w),$26(a6)
   11973/    BDF2 : 70E0                		moveq	#-$20,d0
   11974/    BDF4 : 72FC                		moveq	#-4,d1
   11975/    BDF6 : 6100 0C8A           		bsr.w	sub_CA82
   11976/    BDFA : 4E75                		rts
   11977/    BDFC :                     ; ---------------------------------------------------------------------------
   11978/    BDFC : 0054                word_BDFC:	dc.w $54
   11979/    BDFE : 0054                		dc.w $54
   11980/    BE00 : 0054                		dc.w $54
   11981/    BE02 : 0055                		dc.w $55
   11982/    BE04 : 0055                		dc.w $55
   11983/    BE06 : 0055                		dc.w $55
   11984/    BE08 : 0056                		dc.w $56
   11985/    BE0A : 0056                		dc.w $56
   11986/    BE0C : 0056                		dc.w $56
   11987/    BE0E : 0057                		dc.w $57
   11988/    BE10 : 0057                		dc.w $57
   11989/    BE12 : 0057                		dc.w $57
   11990/    BE14 : FFFF                		dc.w $FFFF
   11991/    BE16 :                     ; ---------------------------------------------------------------------------
   11992/    BE16 :                     
   11993/    BE16 :                     loc_BE16:
   11994/    BE16 : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   11995/    BE1C : 4E75                		rts
   11996/    BE1E :                     ; ---------------------------------------------------------------------------
   11997/    BE1E :                     
   11998/    BE1E :                     loc_BE1E:
   11999/    BE1E : 026E FF7F 0004      		andi.w	#$FF7F,4(a6)
   12000/    BE24 : 4E75                		rts
   12001/    BE26 :                     ; ---------------------------------------------------------------------------
   12002/    BE26 :                     
   12003/    BE26 :                     loc_BE26:
   12004/    BE26 :                     
   12005/    BE26 : 4A2E 0005           		tst.b	5(a6)
   12006/    BE2A : 6B02                		bmi.s	loc_BE2E
   12007/    BE2C : 4E75                		rts
   12008/    BE2E :                     ; ---------------------------------------------------------------------------
   12009/    BE2E :                     
   12010/    BE2E :                     loc_BE2E:
   12011/    BE2E : 302E 0026           		move.w	$26(a6),d0
   12012/    BE32 : D040                		add.w	d0,d0
   12013/    BE34 : D040                		add.w	d0,d0
   12014/    BE36 : 41F9 0006 7DD2      		lea	(PLCMAP_Tails_MainIndex).l,a0
   12015/    BE3C : 43F9 0006 852C      		lea	(MAP_Tails).l,a1
   12016/    BE42 : 45F9 0006 7FBE      		lea	(PLC_Tails).l,a2
   12017/    BE48 : D2F0 0000           		adda.w	(a0,d0.w),a1
   12018/    BE4C : D4F0 0002           		adda.w	2(a0,d0.w),a2
   12019/    BE50 : 2D49 0010           		move.l	a1,obMap(a6)
   12020/    BE54 : 4A2D 0006           		tst.b	6(a5)
   12021/    BE58 : 660C                		bne.s	loc_BE66
   12022/    BE5A : 21CA D894           		move.l	a2,($FFFFD894).w
   12023/    BE5E : 0038 0040 D87A      		ori.b	#$40,($FFFFD87A).w
   12024/    BE64 : 4E75                		rts
   12025/    BE66 :                     ; ---------------------------------------------------------------------------
   12026/    BE66 :                     
   12027/    BE66 :                     loc_BE66:
   12028/    BE66 : 21CA D898           		move.l	a2,($FFFFD898).w
   12029/    BE6A : 0038 0080 D87A      		ori.b	#$80,($FFFFD87A).w
   12030/    BE70 : 4E75                		rts
   12031/    BE72 :                     
   12032/    BE72 :                     ; =============== S U B	R O U T	I N E =======================================
   12033/    BE72 :                     
   12034/    BE72 :                     
   12035/    BE72 :                     sub_BE72:
   12036/    BE72 : 31FC 0000 D866      		move.w	#0,($FFFFD866).w
   12037/    BE78 : 31FC 0004 D868      		move.w	#4,($FFFFD868).w
   12038/    BE7E : 7004                		moveq	#4,d0
   12039/    BE80 : 4EB8 1918           		jsr	(sub_1918).w
   12040/    BE84 : 6B16                		bmi.s	loc_BE9C
   12041/    BE86 : 317C 0080 0004      		move.w	#$80,4(a0)
   12042/    BE8C : 317C 0800 0006      		move.w	#$800,6(a0)
   12043/    BE92 : 317C 0000 0020      		move.w	#0,$20(a0)
   12044/    BE98 : 31C8 D862           		move.w	a0,($FFFFD862).w
   12045/    BE9C :                     
   12046/    BE9C :                     loc_BE9C:
   12047/    BE9C : 7004                		moveq	#4,d0
   12048/    BE9E : 4EB8 1918           		jsr	(sub_1918).w
   12049/    BEA2 : 6B3C                		bmi.s	loc_BEE0
   12050/    BEA4 : 317C 0080 0004      		move.w	#$80,4(a0)
   12051/    BEAA : 317C 0002 0006      		move.w	#2,6(a0)
   12052/    BEB0 : 3038 C9DE           		move.w	($FFFFC9DE).w,d0
   12053/    BEB4 : 0640 00B8           		addi.w	#$B8,d0
   12054/    BEB8 : 3140 0008           		move.w	d0,8(a0)
   12055/    BEBC : 3038 C9EE           		move.w	($FFFFC9EE).w,d0
   12056/    BEC0 : 0640 0070           		addi.w	#$70,d0
   12057/    BEC4 : 3140 000C           		move.w	d0,$C(a0)
   12058/    BEC8 : 317C 0000 0020      		move.w	#0,$20(a0)
   12059/    BECE : 3C78 D862           		movea.w	($FFFFD862).w,a6
   12060/    BED2 : 31C8 D862           		move.w	a0,($FFFFD862).w
   12061/    BED6 : 3D48 0024           		move.w	a0,$24(a6)
   12062/    BEDA : 317C 0010 0032      		move.w	#$10,$32(a0)
   12063/    BEE0 :                     
   12064/    BEE0 :                     loc_BEE0:
   12065/    BEE0 : 7004                		moveq	#4,d0
   12066/    BEE2 : 4EB8 1918           		jsr	(sub_1918).w
   12067/    BEE6 : 6B18                		bmi.s	loc_BF00
   12068/    BEE8 : 317C 0080 0004      		move.w	#$80,4(a0)
   12069/    BEEE : 317C 1000 0006      		move.w	#$1000,6(a0)
   12070/    BEF4 : 317C 0000 0020      		move.w	#0,$20(a0)
   12071/    BEFA : 3178 D862 0024      		move.w	($FFFFD862).w,$24(a0)
   12072/    BF00 :                     
   12073/    BF00 :                     loc_BF00:
   12074/    BF00 : 7004                		moveq	#4,d0
   12075/    BF02 : 4EB8 1918           		jsr	(sub_1918).w
   12076/    BF06 : 6B16                		bmi.s	loc_BF1E
   12077/    BF08 : 317C 0080 0004      		move.w	#$80,4(a0)
   12078/    BF0E : 317C 0C00 0006      		move.w	#$C00,6(a0)
   12079/    BF14 : 317C 0021 0020      		move.w	#$21,$20(a0)
   12080/    BF1A : 31C8 D864           		move.w	a0,($FFFFD864).w
   12081/    BF1E :                     
   12082/    BF1E :                     loc_BF1E:
   12083/    BF1E : 7004                		moveq	#4,d0
   12084/    BF20 : 4EB8 1918           		jsr	(sub_1918).w
   12085/    BF24 : 6B3C                		bmi.s	loc_BF62
   12086/    BF26 : 317C 0080 0004      		move.w	#$80,4(a0)
   12087/    BF2C : 317C 0402 0006      		move.w	#$402,6(a0)
   12088/    BF32 : 3038 C9DE           		move.w	($FFFFC9DE).w,d0
   12089/    BF36 : 0640 0088           		addi.w	#$88,d0
   12090/    BF3A : 3140 0008           		move.w	d0,8(a0)
   12091/    BF3E : 3038 C9EE           		move.w	($FFFFC9EE).w,d0
   12092/    BF42 : 0640 0070           		addi.w	#$70,d0
   12093/    BF46 : 3140 000C           		move.w	d0,$C(a0)
   12094/    BF4A : 317C 0021 0020      		move.w	#$21,$20(a0)
   12095/    BF50 : 3C78 D864           		movea.w	($FFFFD864).w,a6
   12096/    BF54 : 31C8 D864           		move.w	a0,($FFFFD864).w
   12097/    BF58 : 3D48 0024           		move.w	a0,$24(a6)
   12098/    BF5C : 317C 0010 0032      		move.w	#$10,$32(a0)
   12099/    BF62 :                     
   12100/    BF62 :                     loc_BF62:
   12101/    BF62 : 7004                		moveq	#4,d0
   12102/    BF64 : 4EB8 1918           		jsr	(sub_1918).w
   12103/    BF68 : 6B18                		bmi.s	locret_BF82
   12104/    BF6A : 317C 0080 0004      		move.w	#$80,4(a0)
   12105/    BF70 : 317C 1400 0006      		move.w	#$1400,6(a0)
   12106/    BF76 : 317C 0021 0020      		move.w	#$21,$20(a0)
   12107/    BF7C : 3178 D864 0024      		move.w	($FFFFD864).w,$24(a0)
   12108/    BF82 :                     
   12109/    BF82 :                     locret_BF82:
   12110/    BF82 : 4E75                		rts
   12111/    BF84 :                     ; End of function sub_BE72
   12112/    BF84 :                     
   12113/    BF84 :                     
   12114/    BF84 :                     ; =============== S U B	R O U T	I N E =======================================
   12115/    BF84 :                     
   12116/    BF84 :                     
   12117/    BF84 :                     sub_BF84:
   12118/    BF84 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12119/    BF88 : 7A00                		moveq	#0,d5
   12120/    BF8A : 4A02                		tst.b	d2
   12121/    BF8C : 6602                		bne.s	loc_BF90
   12122/    BF8E : 7400                		moveq	#0,d2
   12123/    BF90 :                     
   12124/    BF90 :                     loc_BF90:
   12125/    BF90 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12126/    BF94 : 671E                		beq.s	loc_BFB4
   12127/    BF96 : 1A11                		move.b	(a1),d5
   12128/    BF98 : 675E                		beq.s	loc_BFF8
   12129/    BF9A : 0C05 0010           		cmpi.b	#$10,d5
   12130/    BF9E : 6714                		beq.s	loc_BFB4
   12131/    BFA0 : 0803 001B           		btst	#$1B,d3
   12132/    BFA4 : 6650                		bne.s	loc_BFF6
   12133/    BFA6 : 3C01                		move.w	d1,d6
   12134/    BFA8 : 0246 000F           		andi.w	#$F,d6
   12135/    BFAC : 9A46                		sub.w	d6,d5
   12136/    BFAE : 4445                		neg.w	d5
   12137/    BFB0 : 5245                		addq.w	#1,d5
   12138/    BFB2 : 4E75                		rts
   12139/    BFB4 :                     ; ---------------------------------------------------------------------------
   12140/    BFB4 :                     
   12141/    BFB4 :                     loc_BFB4:
   12142/    BFB4 : 0641 0010           		addi.w	#$10,d1
   12143/    BFB8 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12144/    BFBC : 7A00                		moveq	#0,d5
   12145/    BFBE : 4A02                		tst.b	d2
   12146/    BFC0 : 6602                		bne.s	loc_BFC4
   12147/    BFC2 : 7400                		moveq	#0,d2
   12148/    BFC4 :                     
   12149/    BFC4 :                     loc_BFC4:
   12150/    BFC4 : 0441 0010           		subi.w	#$10,d1
   12151/    BFC8 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12152/    BFCC : 6708                		beq.s	loc_BFD6
   12153/    BFCE : 1A11                		move.b	(a1),d5
   12154/    BFD0 : 0C05 0010           		cmpi.b	#$10,d5
   12155/    BFD4 : 6604                		bne.s	loc_BFDA
   12156/    BFD6 :                     
   12157/    BFD6 :                     loc_BFD6:
   12158/    BFD6 : 7A80                		moveq	#$FFFFFF80,d5
   12159/    BFD8 : 4E75                		rts
   12160/    BFDA :                     ; ---------------------------------------------------------------------------
   12161/    BFDA :                     
   12162/    BFDA :                     loc_BFDA:
   12163/    BFDA : 0803 001B           		btst	#$1B,d3
   12164/    BFDE : 6704                		beq.s	loc_BFE4
   12165/    BFE0 : 7A00                		moveq	#0,d5
   12166/    BFE2 : 7400                		moveq	#0,d2
   12167/    BFE4 :                     
   12168/    BFE4 :                     loc_BFE4:
   12169/    BFE4 : 3C01                		move.w	d1,d6
   12170/    BFE6 : 0246 000F           		andi.w	#$F,d6
   12171/    BFEA : 9A46                		sub.w	d6,d5
   12172/    BFEC : 4445                		neg.w	d5
   12173/    BFEE : 6BE6                		bmi.s	loc_BFD6
   12174/    BFF0 : 0445 000F           		subi.w	#$F,d5
   12175/    BFF4 : 4E75                		rts
   12176/    BFF6 :                     ; ---------------------------------------------------------------------------
   12177/    BFF6 :                     
   12178/    BFF6 :                     loc_BFF6:
   12179/    BFF6 : 7400                		moveq	#0,d2
   12180/    BFF8 :                     
   12181/    BFF8 :                     loc_BFF8:
   12182/    BFF8 : 0441 0010           		subi.w	#$10,d1
   12183/    BFFC : 3F02                		move.w	d2,-(sp)
   12184/    BFFE : 2F03                		move.l	d3,-(sp)
   12185/    C000 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12186/    C004 : 7A00                		moveq	#0,d5
   12187/    C006 : 4A02                		tst.b	d2
   12188/    C008 : 6602                		bne.s	loc_C00C
   12189/    C00A : 7400                		moveq	#0,d2
   12190/    C00C :                     
   12191/    C00C :                     loc_C00C:
   12192/    C00C : 2E1F                		move.l	(sp)+,d7
   12193/    C00E : 3C1F                		move.w	(sp)+,d6
   12194/    C010 : 0641 0010           		addi.w	#$10,d1
   12195/    C014 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12196/    C018 : 6720                		beq.s	loc_C03A
   12197/    C01A : 1A11                		move.b	(a1),d5
   12198/    C01C : 0C05 0010           		cmpi.b	#$10,d5
   12199/    C020 : 6718                		beq.s	loc_C03A
   12200/    C022 : 3C01                		move.w	d1,d6
   12201/    C024 : 0246 000F           		andi.w	#$F,d6
   12202/    C028 : 4445                		neg.w	d5
   12203/    C02A : 0645 0011           		addi.w	#$11,d5
   12204/    C02E : DA46                		add.w	d6,d5
   12205/    C030 : 0C45 0010           		cmpi.w	#$10,d5
   12206/    C034 : 6302                		bls.s	locret_C038
   12207/    C036 : 7A10                		moveq	#$10,d5
   12208/    C038 :                     
   12209/    C038 :                     locret_C038:
   12210/    C038 : 4E75                		rts
   12211/    C03A :                     ; ---------------------------------------------------------------------------
   12212/    C03A :                     
   12213/    C03A :                     loc_C03A:
   12214/    C03A : 3A01                		move.w	d1,d5
   12215/    C03C : 0245 000F           		andi.w	#$F,d5
   12216/    C040 : 5245                		addq.w	#1,d5
   12217/    C042 : 3406                		move.w	d6,d2
   12218/    C044 : 2607                		move.l	d7,d3
   12219/    C046 : 4E75                		rts
   12220/    C048 :                     ; End of function sub_BF84
   12221/    C048 :                     
   12222/    C048 :                     
   12223/    C048 :                     ; =============== S U B	R O U T	I N E =======================================
   12224/    C048 :                     
   12225/    C048 :                     
   12226/    C048 :                     sub_C048:
   12227/    C048 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12228/    C04C : 7A00                		moveq	#0,d5
   12229/    C04E : 4A02                		tst.b	d2
   12230/    C050 : 6602                		bne.s	loc_C054
   12231/    C052 : 74C0                		moveq	#$FFFFFFC0,d2
   12232/    C054 :                     
   12233/    C054 :                     loc_C054:
   12234/    C054 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12235/    C058 : 671E                		beq.s	loc_C078
   12236/    C05A : 1A12                		move.b	(a2),d5
   12237/    C05C : 6768                		beq.s	loc_C0C6
   12238/    C05E : 0C05 0010           		cmpi.b	#$10,d5
   12239/    C062 : 6714                		beq.s	loc_C078
   12240/    C064 : 0803 001A           		btst	#$1A,d3
   12241/    C068 : 665A                		bne.s	loc_C0C4
   12242/    C06A : 3C00                		move.w	d0,d6
   12243/    C06C : 0246 000F           		andi.w	#$F,d6
   12244/    C070 : 9A46                		sub.w	d6,d5
   12245/    C072 : 4445                		neg.w	d5
   12246/    C074 : 5245                		addq.w	#1,d5
   12247/    C076 : 4E75                		rts
   12248/    C078 :                     ; ---------------------------------------------------------------------------
   12249/    C078 :                     
   12250/    C078 :                     loc_C078:
   12251/    C078 : 0640 0010           		addi.w	#$10,d0
   12252/    C07C : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12253/    C080 : 7A00                		moveq	#0,d5
   12254/    C082 : 4A02                		tst.b	d2
   12255/    C084 : 6602                		bne.s	loc_C088
   12256/    C086 : 74C0                		moveq	#$FFFFFFC0,d2
   12257/    C088 :                     
   12258/    C088 :                     loc_C088:
   12259/    C088 : 0440 0010           		subi.w	#$10,d0
   12260/    C08C : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12261/    C090 : 6708                		beq.s	loc_C09A
   12262/    C092 : 1A12                		move.b	(a2),d5
   12263/    C094 : 0C05 0010           		cmpi.b	#$10,d5
   12264/    C098 : 6604                		bne.s	loc_C09E
   12265/    C09A :                     
   12266/    C09A :                     loc_C09A:
   12267/    C09A : 7A80                		moveq	#$FFFFFF80,d5
   12268/    C09C : 4E75                		rts
   12269/    C09E :                     ; ---------------------------------------------------------------------------
   12270/    C09E :                     
   12271/    C09E :                     loc_C09E:
   12272/    C09E : 0803 001A           		btst	#$1A,d3
   12273/    C0A2 : 670E                		beq.s	loc_C0B2
   12274/    C0A4 : 3A00                		move.w	d0,d5
   12275/    C0A6 : 0245 000F           		andi.w	#$F,d5
   12276/    C0AA : 0445 000F           		subi.w	#$F,d5
   12277/    C0AE : 74C0                		moveq	#$FFFFFFC0,d2
   12278/    C0B0 : 4E75                		rts
   12279/    C0B2 :                     ; ---------------------------------------------------------------------------
   12280/    C0B2 :                     
   12281/    C0B2 :                     loc_C0B2:
   12282/    C0B2 : 3C00                		move.w	d0,d6
   12283/    C0B4 : 0246 000F           		andi.w	#$F,d6
   12284/    C0B8 : 9A46                		sub.w	d6,d5
   12285/    C0BA : 4445                		neg.w	d5
   12286/    C0BC : 6BDC                		bmi.s	loc_C09A
   12287/    C0BE : 0445 000F           		subi.w	#$F,d5
   12288/    C0C2 : 4E75                		rts
   12289/    C0C4 :                     ; ---------------------------------------------------------------------------
   12290/    C0C4 :                     
   12291/    C0C4 :                     loc_C0C4:
   12292/    C0C4 : 74C0                		moveq	#$FFFFFFC0,d2
   12293/    C0C6 :                     
   12294/    C0C6 :                     loc_C0C6:
   12295/    C0C6 : 0440 0010           		subi.w	#$10,d0
   12296/    C0CA : 3F02                		move.w	d2,-(sp)
   12297/    C0CC : 2F03                		move.l	d3,-(sp)
   12298/    C0CE : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12299/    C0D2 : 7A00                		moveq	#0,d5
   12300/    C0D4 : 4A02                		tst.b	d2
   12301/    C0D6 : 6602                		bne.s	loc_C0DA
   12302/    C0D8 : 74C0                		moveq	#$FFFFFFC0,d2
   12303/    C0DA :                     
   12304/    C0DA :                     loc_C0DA:
   12305/    C0DA : 2E1F                		move.l	(sp)+,d7
   12306/    C0DC : 3C1F                		move.w	(sp)+,d6
   12307/    C0DE : 0640 0010           		addi.w	#$10,d0
   12308/    C0E2 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12309/    C0E6 : 6720                		beq.s	loc_C108
   12310/    C0E8 : 1A12                		move.b	(a2),d5
   12311/    C0EA : 0C05 0010           		cmpi.b	#$10,d5
   12312/    C0EE : 6718                		beq.s	loc_C108
   12313/    C0F0 : 3C00                		move.w	d0,d6
   12314/    C0F2 : 0246 000F           		andi.w	#$F,d6
   12315/    C0F6 : 4445                		neg.w	d5
   12316/    C0F8 : 0645 0011           		addi.w	#$11,d5
   12317/    C0FC : DA46                		add.w	d6,d5
   12318/    C0FE : 0C45 0010           		cmpi.w	#$10,d5
   12319/    C102 : 6302                		bls.s	locret_C106
   12320/    C104 : 7A10                		moveq	#$10,d5
   12321/    C106 :                     
   12322/    C106 :                     locret_C106:
   12323/    C106 : 4E75                		rts
   12324/    C108 :                     ; ---------------------------------------------------------------------------
   12325/    C108 :                     
   12326/    C108 :                     loc_C108:
   12327/    C108 : 3A00                		move.w	d0,d5
   12328/    C10A : 0245 000F           		andi.w	#$F,d5
   12329/    C10E : 5245                		addq.w	#1,d5
   12330/    C110 : 3406                		move.w	d6,d2
   12331/    C112 : 2607                		move.l	d7,d3
   12332/    C114 : 4E75                		rts
   12333/    C116 :                     ; End of function sub_C048
   12334/    C116 :                     
   12335/    C116 :                     
   12336/    C116 :                     ; =============== S U B	R O U T	I N E =======================================
   12337/    C116 :                     
   12338/    C116 :                     
   12339/    C116 :                     sub_C116:
   12340/    C116 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12341/    C11A : 7A00                		moveq	#0,d5
   12342/    C11C : 4A02                		tst.b	d2
   12343/    C11E : 6602                		bne.s	loc_C122
   12344/    C120 : 7480                		moveq	#$FFFFFF80,d2
   12345/    C122 :                     
   12346/    C122 :                     loc_C122:
   12347/    C122 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12348/    C126 : 671E                		beq.s	loc_C146
   12349/    C128 : 1A11                		move.b	(a1),d5
   12350/    C12A : 675C                		beq.s	loc_C188
   12351/    C12C : 0C05 0010           		cmpi.b	#$10,d5
   12352/    C130 : 6714                		beq.s	loc_C146
   12353/    C132 : 0803 001B           		btst	#$1B,d3
   12354/    C136 : 674E                		beq.s	loc_C186
   12355/    C138 : 3C01                		move.w	d1,d6
   12356/    C13A : 0246 000F           		andi.w	#$F,d6
   12357/    C13E : 0446 0010           		subi.w	#$10,d6
   12358/    C142 : DA46                		add.w	d6,d5
   12359/    C144 : 4E75                		rts
   12360/    C146 :                     ; ---------------------------------------------------------------------------
   12361/    C146 :                     
   12362/    C146 :                     loc_C146:
   12363/    C146 : 0441 0010           		subi.w	#$10,d1
   12364/    C14A : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12365/    C14E : 7A00                		moveq	#0,d5
   12366/    C150 : 4A02                		tst.b	d2
   12367/    C152 : 6602                		bne.s	loc_C156
   12368/    C154 : 7480                		moveq	#$FFFFFF80,d2
   12369/    C156 :                     
   12370/    C156 :                     loc_C156:
   12371/    C156 : 0641 0010           		addi.w	#$10,d1
   12372/    C15A : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12373/    C15E : 6708                		beq.s	loc_C168
   12374/    C160 : 1A11                		move.b	(a1),d5
   12375/    C162 : 0C05 0010           		cmpi.b	#$10,d5
   12376/    C166 : 6604                		bne.s	loc_C16C
   12377/    C168 :                     
   12378/    C168 :                     loc_C168:
   12379/    C168 : 7A7F                		moveq	#$7F,d5
   12380/    C16A : 4E75                		rts
   12381/    C16C :                     ; ---------------------------------------------------------------------------
   12382/    C16C :                     
   12383/    C16C :                     loc_C16C:
   12384/    C16C : 0803 001B           		btst	#$1B,d3
   12385/    C170 : 660A                		bne.s	loc_C17C
   12386/    C172 : 3A01                		move.w	d1,d5
   12387/    C174 : 0245 000F           		andi.w	#$F,d5
   12388/    C178 : 7480                		moveq	#$FFFFFF80,d2
   12389/    C17A : 4E75                		rts
   12390/    C17C :                     ; ---------------------------------------------------------------------------
   12391/    C17C :                     
   12392/    C17C :                     loc_C17C:
   12393/    C17C : 3C01                		move.w	d1,d6
   12394/    C17E : 0246 000F           		andi.w	#$F,d6
   12395/    C182 : DA46                		add.w	d6,d5
   12396/    C184 : 4E75                		rts
   12397/    C186 :                     ; ---------------------------------------------------------------------------
   12398/    C186 :                     
   12399/    C186 :                     loc_C186:
   12400/    C186 : 7480                		moveq	#$FFFFFF80,d2
   12401/    C188 :                     
   12402/    C188 :                     loc_C188:
   12403/    C188 : 0641 0010           		addi.w	#$10,d1
   12404/    C18C : 3F02                		move.w	d2,-(sp)
   12405/    C18E : 2F03                		move.l	d3,-(sp)
   12406/    C190 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12407/    C194 : 7A00                		moveq	#0,d5
   12408/    C196 : 4A02                		tst.b	d2
   12409/    C198 : 6602                		bne.s	loc_C19C
   12410/    C19A : 7480                		moveq	#$FFFFFF80,d2
   12411/    C19C :                     
   12412/    C19C :                     loc_C19C:
   12413/    C19C : 2E1F                		move.l	(sp)+,d7
   12414/    C19E : 3C1F                		move.w	(sp)+,d6
   12415/    C1A0 : 0441 0010           		subi.w	#$10,d1
   12416/    C1A4 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12417/    C1A8 : 6720                		beq.s	loc_C1CA
   12418/    C1AA : 1A11                		move.b	(a1),d5
   12419/    C1AC : 0C05 0010           		cmpi.b	#$10,d5
   12420/    C1B0 : 6718                		beq.s	loc_C1CA
   12421/    C1B2 : 3C01                		move.w	d1,d6
   12422/    C1B4 : 0246 000F           		andi.w	#$F,d6
   12423/    C1B8 : 0446 0020           		subi.w	#$20,d6
   12424/    C1BC : 9C45                		sub.w	d5,d6
   12425/    C1BE : 3A06                		move.w	d6,d5
   12426/    C1C0 : 0C45 FFF0           		cmpi.w	#$FFF0,d5
   12427/    C1C4 : 6402                		bcc.s	locret_C1C8
   12428/    C1C6 : 7AF0                		moveq	#$FFFFFFF0,d5
   12429/    C1C8 :                     
   12430/    C1C8 :                     locret_C1C8:
   12431/    C1C8 : 4E75                		rts
   12432/    C1CA :                     ; ---------------------------------------------------------------------------
   12433/    C1CA :                     
   12434/    C1CA :                     loc_C1CA:
   12435/    C1CA : 3A01                		move.w	d1,d5
   12436/    C1CC : 0245 000F           		andi.w	#$F,d5
   12437/    C1D0 : 0445 0010           		subi.w	#$10,d5
   12438/    C1D4 : 3406                		move.w	d6,d2
   12439/    C1D6 : 2607                		move.l	d7,d3
   12440/    C1D8 : 4E75                		rts
   12441/    C1DA :                     ; End of function sub_C116
   12442/    C1DA :                     
   12443/    C1DA :                     
   12444/    C1DA :                     ; =============== S U B	R O U T	I N E =======================================
   12445/    C1DA :                     
   12446/    C1DA :                     
   12447/    C1DA :                     sub_C1DA:
   12448/    C1DA : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12449/    C1DE : 7A00                		moveq	#0,d5
   12450/    C1E0 : 4A02                		tst.b	d2
   12451/    C1E2 : 6602                		bne.s	loc_C1E6
   12452/    C1E4 : 7440                		moveq	#$40,d2
   12453/    C1E6 :                     
   12454/    C1E6 :                     loc_C1E6:
   12455/    C1E6 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12456/    C1EA : 671E                		beq.s	loc_C20A
   12457/    C1EC : 1A12                		move.b	(a2),d5
   12458/    C1EE : 675C                		beq.s	loc_C24C
   12459/    C1F0 : 0C05 0010           		cmpi.b	#$10,d5
   12460/    C1F4 : 6714                		beq.s	loc_C20A
   12461/    C1F6 : 0803 001A           		btst	#$1A,d3
   12462/    C1FA : 674E                		beq.s	loc_C24A
   12463/    C1FC : 3C00                		move.w	d0,d6
   12464/    C1FE : 0246 000F           		andi.w	#$F,d6
   12465/    C202 : 0446 0010           		subi.w	#$10,d6
   12466/    C206 : DA46                		add.w	d6,d5
   12467/    C208 : 4E75                		rts
   12468/    C20A :                     ; ---------------------------------------------------------------------------
   12469/    C20A :                     
   12470/    C20A :                     loc_C20A:
   12471/    C20A : 0440 0010           		subi.w	#$10,d0
   12472/    C20E : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12473/    C212 : 7A00                		moveq	#0,d5
   12474/    C214 : 4A02                		tst.b	d2
   12475/    C216 : 6602                		bne.s	loc_C21A
   12476/    C218 : 7440                		moveq	#$40,d2
   12477/    C21A :                     
   12478/    C21A :                     loc_C21A:
   12479/    C21A : 0640 0010           		addi.w	#$10,d0
   12480/    C21E : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12481/    C222 : 6708                		beq.s	loc_C22C
   12482/    C224 : 1A12                		move.b	(a2),d5
   12483/    C226 : 0C05 0010           		cmpi.b	#$10,d5
   12484/    C22A : 6604                		bne.s	loc_C230
   12485/    C22C :                     
   12486/    C22C :                     loc_C22C:
   12487/    C22C : 7A7F                		moveq	#$7F,d5
   12488/    C22E : 4E75                		rts
   12489/    C230 :                     ; ---------------------------------------------------------------------------
   12490/    C230 :                     
   12491/    C230 :                     loc_C230:
   12492/    C230 : 0803 001A           		btst	#$1A,d3
   12493/    C234 : 660A                		bne.s	loc_C240
   12494/    C236 : 3A00                		move.w	d0,d5
   12495/    C238 : 0245 000F           		andi.w	#$F,d5
   12496/    C23C : 7440                		moveq	#$40,d2
   12497/    C23E : 4E75                		rts
   12498/    C240 :                     ; ---------------------------------------------------------------------------
   12499/    C240 :                     
   12500/    C240 :                     loc_C240:
   12501/    C240 : 3C00                		move.w	d0,d6
   12502/    C242 : 0246 000F           		andi.w	#$F,d6
   12503/    C246 : DA46                		add.w	d6,d5
   12504/    C248 : 4E75                		rts
   12505/    C24A :                     ; ---------------------------------------------------------------------------
   12506/    C24A :                     
   12507/    C24A :                     loc_C24A:
   12508/    C24A : 7440                		moveq	#$40,d2
   12509/    C24C :                     
   12510/    C24C :                     loc_C24C:
   12511/    C24C : 0640 0010           		addi.w	#$10,d0
   12512/    C250 : 3F02                		move.w	d2,-(sp)
   12513/    C252 : 2F03                		move.l	d3,-(sp)
   12514/    C254 : 4EB8 1B3E           		jsr	(sub_1B3E).w
   12515/    C258 : 7A00                		moveq	#0,d5
   12516/    C25A : 4A02                		tst.b	d2
   12517/    C25C : 6602                		bne.s	loc_C260
   12518/    C25E : 7440                		moveq	#$40,d2
   12519/    C260 :                     
   12520/    C260 :                     loc_C260:
   12521/    C260 : 2E1F                		move.l	(sp)+,d7
   12522/    C262 : 3C1F                		move.w	(sp)+,d6
   12523/    C264 : 0440 0010           		subi.w	#$10,d0
   12524/    C268 : 0738 FAE8           		btst	d3,($FFFFFAE8).w
   12525/    C26C : 6720                		beq.s	loc_C28E
   12526/    C26E : 1A12                		move.b	(a2),d5
   12527/    C270 : 0C05 0010           		cmpi.b	#$10,d5
   12528/    C274 : 6718                		beq.s	loc_C28E
   12529/    C276 : 3C00                		move.w	d0,d6
   12530/    C278 : 0246 000F           		andi.w	#$F,d6
   12531/    C27C : 0446 0020           		subi.w	#$20,d6
   12532/    C280 : 9C45                		sub.w	d5,d6
   12533/    C282 : 3A06                		move.w	d6,d5
   12534/    C284 : 0C45 FFF0           		cmpi.w	#$FFF0,d5
   12535/    C288 : 6402                		bcc.s	locret_C28C
   12536/    C28A : 7AF0                		moveq	#$FFFFFFF0,d5
   12537/    C28C :                     
   12538/    C28C :                     locret_C28C:
   12539/    C28C : 4E75                		rts
   12540/    C28E :                     ; ---------------------------------------------------------------------------
   12541/    C28E :                     
   12542/    C28E :                     loc_C28E:
   12543/    C28E : 3A00                		move.w	d0,d5
   12544/    C290 : 0245 000F           		andi.w	#$F,d5
   12545/    C294 : 0445 0010           		subi.w	#$10,d5
   12546/    C298 : 3406                		move.w	d6,d2
   12547/    C29A : 2607                		move.l	d7,d3
   12548/    C29C : 4E75                		rts
   12549/    C29E :                     ; End of function sub_C1DA
   12550/    C29E :                     
   12551/    C29E :                     
   12552/    C29E :                     ; =============== S U B	R O U T	I N E =======================================
   12553/    C29E :                     
   12554/    C29E :                     
   12555/    C29E :                     sub_C29E:
   12556/    C29E : 382E 0024           		move.w	$24(a6),d4
   12557/    C2A2 : 0244 0002           		andi.w	#2,d4
   12558/    C2A6 : 11FC 000A FAE8      		move.b	#$A,($FFFFFAE8).w
   12559/    C2AC : 102E 002A           		move.b	$2A(a6),d0
   12560/    C2B0 : 0600 0020           		addi.b	#$20,d0
   12561/    C2B4 : 0240 00C0           		andi.w	#$C0,d0
   12562/    C2B8 : E848                		lsr.w	#4,d0
   12563/    C2BA : 4EFB 0002           		jmp	loc_C2BE(pc,d0.w)
   12564/    C2BE :                     ; End of function sub_C29E
   12565/    C2BE :                     
   12566/    C2BE :                     ; ---------------------------------------------------------------------------
   12567/    C2BE :                     
   12568/    C2BE :                     loc_C2BE:
   12569/    C2BE : 6000 000E           		bra.w	loc_C2CE
   12570/    C2C2 :                     ; ---------------------------------------------------------------------------
   12571/    C2C2 : 6000 007C           		bra.w	loc_C340
   12572/    C2C6 :                     ; ---------------------------------------------------------------------------
   12573/    C2C6 : 6000 00EC           		bra.w	loc_C3B4
   12574/    C2CA :                     ; ---------------------------------------------------------------------------
   12575/    C2CA : 6000 015C           		bra.w	loc_C428
   12576/    C2CE :                     ; ---------------------------------------------------------------------------
   12577/    C2CE :                     
   12578/    C2CE :                     loc_C2CE:
   12579/    C2CE : 7000                		moveq	#0,d0
   12580/    C2D0 : 102E 0022           		move.b	$22(a6),d0
   12581/    C2D4 : D06E 0008           		add.w	8(a6),d0
   12582/    C2D8 : 7200                		moveq	#0,d1
   12583/    C2DA : 122E 0023           		move.b	$23(a6),d1
   12584/    C2DE : D26E 000C           		add.w	$C(a6),d1
   12585/    C2E2 : 6100 FCA0           		bsr.w	sub_BF84
   12586/    C2E6 : 2F03                		move.l	d3,-(sp)
   12587/    C2E8 : 3F02                		move.w	d2,-(sp)
   12588/    C2EA : 3F05                		move.w	d5,-(sp)
   12589/    C2EC : 11C2 FAC5           		move.b	d2,($FFFFFAC5).w
   12590/    C2F0 : 21C8 FACA           		move.l	a0,($FFFFFACA).w
   12591/    C2F4 : 7400                		moveq	#0,d2
   12592/    C2F6 : 142E 0022           		move.b	$22(a6),d2
   12593/    C2FA : 4442                		neg.w	d2
   12594/    C2FC : D042                		add.w	d2,d0
   12595/    C2FE : D042                		add.w	d2,d0
   12596/    C300 : 6100 FC82           		bsr.w	sub_BF84
   12597/    C304 : 11C2 FAC4           		move.b	d2,($FFFFFAC4).w
   12598/    C308 : 21C8 FAC6           		move.l	a0,($FFFFFAC6).w
   12599/    C30C : 3005                		move.w	d5,d0
   12600/    C30E : 321F                		move.w	(sp)+,d1
   12601/    C310 : B041                		cmp.w	d1,d0
   12602/    C312 : 6E12                		bgt.s	loc_C326
   12603/    C314 : 671E                		beq.s	loc_C334
   12604/    C316 : 936E 000C           		sub.w	d1,$C(a6)
   12605/    C31A : 341F                		move.w	(sp)+,d2
   12606/    C31C : 1D42 002A           		move.b	d2,$2A(a6)
   12607/    C320 : 261F                		move.l	(sp)+,d3
   12608/    C322 : 7AFF                		moveq	#-1,d5
   12609/    C324 : 4E75                		rts
   12610/    C326 :                     ; ---------------------------------------------------------------------------
   12611/    C326 :                     
   12612/    C326 :                     loc_C326:
   12613/    C326 : 916E 000C           		sub.w	d0,$C(a6)
   12614/    C32A : 1D42 002A           		move.b	d2,$2A(a6)
   12615/    C32E : 5C8F                		addq.l	#6,sp
   12616/    C330 : 7AFF                		moveq	#-1,d5
   12617/    C332 : 4E75                		rts
   12618/    C334 :                     ; ---------------------------------------------------------------------------
   12619/    C334 :                     
   12620/    C334 :                     loc_C334:
   12621/    C334 : 7400                		moveq	#0,d2
   12622/    C336 : 0C40 FF80           		cmpi.w	#$FF80,d0
   12623/    C33A : 66EA                		bne.s	loc_C326
   12624/    C33C : 5C8F                		addq.l	#6,sp
   12625/    C33E : 4E75                		rts
   12626/    C340 :                     ; ---------------------------------------------------------------------------
   12627/    C340 :                     
   12628/    C340 :                     loc_C340:
   12629/    C340 : 7000                		moveq	#0,d0
   12630/    C342 : 102E 0022           		move.b	$22(a6),d0
   12631/    C346 : 4440                		neg.w	d0
   12632/    C348 : D06E 0008           		add.w	8(a6),d0
   12633/    C34C : 7200                		moveq	#0,d1
   12634/    C34E : 122E 0023           		move.b	$23(a6),d1
   12635/    C352 : D26E 000C           		add.w	$C(a6),d1
   12636/    C356 : 6100 FE82           		bsr.w	sub_C1DA
   12637/    C35A : 2F03                		move.l	d3,-(sp)
   12638/    C35C : 3F02                		move.w	d2,-(sp)
   12639/    C35E : 3F05                		move.w	d5,-(sp)
   12640/    C360 : 11C2 FAC5           		move.b	d2,($FFFFFAC5).w
   12641/    C364 : 21C8 FACA           		move.l	a0,($FFFFFACA).w
   12642/    C368 : 7400                		moveq	#0,d2
   12643/    C36A : 142E 0023           		move.b	$23(a6),d2
   12644/    C36E : 4442                		neg.w	d2
   12645/    C370 : D242                		add.w	d2,d1
   12646/    C372 : D242                		add.w	d2,d1
   12647/    C374 : 6100 FE64           		bsr.w	sub_C1DA
   12648/    C378 : 11C2 FAC4           		move.b	d2,($FFFFFAC4).w
   12649/    C37C : 21C8 FAC6           		move.l	a0,($FFFFFAC6).w
   12650/    C380 : 3005                		move.w	d5,d0
   12651/    C382 : 321F                		move.w	(sp)+,d1
   12652/    C384 : B041                		cmp.w	d1,d0
   12653/    C386 : 6D12                		blt.s	loc_C39A
   12654/    C388 : 671E                		beq.s	loc_C3A8
   12655/    C38A : 936E 0008           		sub.w	d1,8(a6)
   12656/    C38E : 341F                		move.w	(sp)+,d2
   12657/    C390 : 1D42 002A           		move.b	d2,$2A(a6)
   12658/    C394 : 261F                		move.l	(sp)+,d3
   12659/    C396 : 7AFF                		moveq	#-1,d5
   12660/    C398 : 4E75                		rts
   12661/    C39A :                     ; ---------------------------------------------------------------------------
   12662/    C39A :                     
   12663/    C39A :                     loc_C39A:
   12664/    C39A : 916E 0008           		sub.w	d0,8(a6)
   12665/    C39E : 1D42 002A           		move.b	d2,$2A(a6)
   12666/    C3A2 : 5C8F                		addq.l	#6,sp
   12667/    C3A4 : 7AFF                		moveq	#-1,d5
   12668/    C3A6 : 4E75                		rts
   12669/    C3A8 :                     ; ---------------------------------------------------------------------------
   12670/    C3A8 :                     
   12671/    C3A8 :                     loc_C3A8:
   12672/    C3A8 : 7440                		moveq	#$40,d2
   12673/    C3AA : 0C40 007F           		cmpi.w	#$7F,d0
   12674/    C3AE : 66EA                		bne.s	loc_C39A
   12675/    C3B0 : 5C8F                		addq.l	#6,sp
   12676/    C3B2 : 4E75                		rts
   12677/    C3B4 :                     ; ---------------------------------------------------------------------------
   12678/    C3B4 :                     
   12679/    C3B4 :                     loc_C3B4:
   12680/    C3B4 : 7000                		moveq	#0,d0
   12681/    C3B6 : 102E 0022           		move.b	$22(a6),d0
   12682/    C3BA : 4440                		neg.w	d0
   12683/    C3BC : D06E 0008           		add.w	8(a6),d0
   12684/    C3C0 : 7200                		moveq	#0,d1
   12685/    C3C2 : 122E 0023           		move.b	$23(a6),d1
   12686/    C3C6 : 4441                		neg.w	d1
   12687/    C3C8 : D26E 000C           		add.w	$C(a6),d1
   12688/    C3CC : 6100 FD48           		bsr.w	sub_C116
   12689/    C3D0 : 2F03                		move.l	d3,-(sp)
   12690/    C3D2 : 3F02                		move.w	d2,-(sp)
   12691/    C3D4 : 3F05                		move.w	d5,-(sp)
   12692/    C3D6 : 11C2 FAC5           		move.b	d2,($FFFFFAC5).w
   12693/    C3DA : 21C8 FACA           		move.l	a0,($FFFFFACA).w
   12694/    C3DE : 7400                		moveq	#0,d2
   12695/    C3E0 : 142E 0022           		move.b	$22(a6),d2
   12696/    C3E4 : D042                		add.w	d2,d0
   12697/    C3E6 : D042                		add.w	d2,d0
   12698/    C3E8 : 6100 FD2C           		bsr.w	sub_C116
   12699/    C3EC : 11C2 FAC4           		move.b	d2,($FFFFFAC4).w
   12700/    C3F0 : 21C8 FAC6           		move.l	a0,($FFFFFAC6).w
   12701/    C3F4 : 3005                		move.w	d5,d0
   12702/    C3F6 : 321F                		move.w	(sp)+,d1
   12703/    C3F8 : B041                		cmp.w	d1,d0
   12704/    C3FA : 6D12                		blt.s	loc_C40E
   12705/    C3FC : 671E                		beq.s	loc_C41C
   12706/    C3FE : 936E 000C           		sub.w	d1,$C(a6)
   12707/    C402 : 341F                		move.w	(sp)+,d2
   12708/    C404 : 1D42 002A           		move.b	d2,$2A(a6)
   12709/    C408 : 261F                		move.l	(sp)+,d3
   12710/    C40A : 7AFF                		moveq	#-1,d5
   12711/    C40C : 4E75                		rts
   12712/    C40E :                     ; ---------------------------------------------------------------------------
   12713/    C40E :                     
   12714/    C40E :                     loc_C40E:
   12715/    C40E : 916E 000C           		sub.w	d0,$C(a6)
   12716/    C412 : 1D42 002A           		move.b	d2,$2A(a6)
   12717/    C416 : 5C8F                		addq.l	#6,sp
   12718/    C418 : 7AFF                		moveq	#-1,d5
   12719/    C41A : 4E75                		rts
   12720/    C41C :                     ; ---------------------------------------------------------------------------
   12721/    C41C :                     
   12722/    C41C :                     loc_C41C:
   12723/    C41C : 7480                		moveq	#$FFFFFF80,d2
   12724/    C41E : 0C40 007F           		cmpi.w	#$7F,d0
   12725/    C422 : 66EA                		bne.s	loc_C40E
   12726/    C424 : 5C8F                		addq.l	#6,sp
   12727/    C426 : 4E75                		rts
   12728/    C428 :                     ; ---------------------------------------------------------------------------
   12729/    C428 :                     
   12730/    C428 :                     loc_C428:
   12731/    C428 : 7000                		moveq	#0,d0
   12732/    C42A : 102E 0022           		move.b	$22(a6),d0
   12733/    C42E : D06E 0008           		add.w	8(a6),d0
   12734/    C432 : 7200                		moveq	#0,d1
   12735/    C434 : 122E 0023           		move.b	$23(a6),d1
   12736/    C438 : 4441                		neg.w	d1
   12737/    C43A : D26E 000C           		add.w	$C(a6),d1
   12738/    C43E : 6100 FC08           		bsr.w	sub_C048
   12739/    C442 :                     
   12740/    C442 :                     loc_C442:
   12741/    C442 : 2F03                		move.l	d3,-(sp)
   12742/    C444 : 3F02                		move.w	d2,-(sp)
   12743/    C446 : 3F05                		move.w	d5,-(sp)
   12744/    C448 : 11C2 FAC5           		move.b	d2,($FFFFFAC5).w
   12745/    C44C : 21C8 FACA           		move.l	a0,($FFFFFACA).w
   12746/    C450 : 7400                		moveq	#0,d2
   12747/    C452 : 142E 0023           		move.b	$23(a6),d2
   12748/    C456 : D242                		add.w	d2,d1
   12749/    C458 : D242                		add.w	d2,d1
   12750/    C45A : 6100 FBEC           		bsr.w	sub_C048
   12751/    C45E : 11C2 FAC4           		move.b	d2,($FFFFFAC4).w
   12752/    C462 : 21C8 FAC6           		move.l	a0,($FFFFFAC6).w
   12753/    C466 : 3005                		move.w	d5,d0
   12754/    C468 : 321F                		move.w	(sp)+,d1
   12755/    C46A : B041                		cmp.w	d1,d0
   12756/    C46C : 6E12                		bgt.s	loc_C480
   12757/    C46E : 671E                		beq.s	loc_C48E
   12758/    C470 : 936E 0008           		sub.w	d1,8(a6)
   12759/    C474 : 341F                		move.w	(sp)+,d2
   12760/    C476 : 1D42 002A           		move.b	d2,$2A(a6)
   12761/    C47A : 261F                		move.l	(sp)+,d3
   12762/    C47C : 7AFF                		moveq	#-1,d5
   12763/    C47E : 4E75                		rts
   12764/    C480 :                     ; ---------------------------------------------------------------------------
   12765/    C480 :                     
   12766/    C480 :                     loc_C480:
   12767/    C480 : 916E 0008           		sub.w	d0,8(a6)
   12768/    C484 : 1D42 002A           		move.b	d2,$2A(a6)
   12769/    C488 : 5C8F                		addq.l	#6,sp
   12770/    C48A : 7AFF                		moveq	#-1,d5
   12771/    C48C : 4E75                		rts
   12772/    C48E :                     ; ---------------------------------------------------------------------------
   12773/    C48E :                     
   12774/    C48E :                     loc_C48E:
   12775/    C48E : 74C0                		moveq	#$FFFFFFC0,d2
   12776/    C490 : 0C40 FF80           		cmpi.w	#$FF80,d0
   12777/    C494 : 66EA                		bne.s	loc_C480
   12778/    C496 : 5C8F                		addq.l	#6,sp
   12779/    C498 : 4E75                		rts
   12780/    C49A :                     
   12781/    C49A :                     ; =============== S U B	R O U T	I N E =======================================
   12782/    C49A :                     
   12783/    C49A :                     
   12784/    C49A :                     sub_C49A:
   12785/    C49A : 382E 0024           		move.w	$24(a6),d4
   12786/    C49E : 0244 0002           		andi.w	#2,d4
   12787/    C4A2 : 11FC 0008 FAE8      		move.b	#8,($FFFFFAE8).w
   12788/    C4A8 : 102E 002A           		move.b	$2A(a6),d0
   12789/    C4AC : 0600 0020           		addi.b	#$20,d0
   12790/    C4B0 : 0240 0040           		andi.w	#$40,d0
   12791/    C4B4 : E848                		lsr.w	#4,d0
   12792/    C4B6 : 4EFB 0002           		jmp	loc_C4BA(pc,d0.w)
   12793/    C4BA :                     ; End of function sub_C49A
   12794/    C4BA :                     
   12795/    C4BA :                     ; ---------------------------------------------------------------------------
   12796/    C4BA :                     
   12797/    C4BA :                     loc_C4BA:
   12798/    C4BA : 6000 000E           		bra.w	loc_C4CA
   12799/    C4BE :                     ; ---------------------------------------------------------------------------
   12800/    C4BE : 6000 0064           		bra.w	loc_C524
   12801/    C4C2 :                     ; ---------------------------------------------------------------------------
   12802/    C4C2 : 6000 00BC           		bra.w	loc_C580
   12803/    C4C6 :                     ; ---------------------------------------------------------------------------
   12804/    C4C6 : 6000 0114           		bra.w	loc_C5DC
   12805/    C4CA :                     ; ---------------------------------------------------------------------------
   12806/    C4CA :                     
   12807/    C4CA :                     loc_C4CA:
   12808/    C4CA : 7000                		moveq	#0,d0
   12809/    C4CC : 102E 0022           		move.b	$22(a6),d0
   12810/    C4D0 : 5240                		addq.w	#1,d0
   12811/    C4D2 : 4440                		neg.w	d0
   12812/    C4D4 : D06E 0008           		add.w	8(a6),d0
   12813/    C4D8 : 7200                		moveq	#0,d1
   12814/    C4DA : 122E 0023           		move.b	$23(a6),d1
   12815/    C4DE : D26E 000C           		add.w	$C(a6),d1
   12816/    C4E2 : 5141                		subq.w	#8,d1
   12817/    C4E4 : 6100 FCF4           		bsr.w	sub_C1DA
   12818/    C4E8 : 4A45                		tst.w	d5
   12819/    C4EA : 6A10                		bpl.s	loc_C4FC
   12820/    C4EC : 9B6E 0008           		sub.w	d5,8(a6)
   12821/    C4F0 : 426E 002C           		clr.w	$2C(a6)
   12822/    C4F4 : 42AE 0018           		clr.l	$18(a6)
   12823/    C4F8 : 7AFF                		moveq	#-1,d5
   12824/    C4FA : 4E75                		rts
   12825/    C4FC :                     ; ---------------------------------------------------------------------------
   12826/    C4FC :                     
   12827/    C4FC :                     loc_C4FC:
   12828/    C4FC : 7000                		moveq	#0,d0
   12829/    C4FE : 102E 0022           		move.b	$22(a6),d0
   12830/    C502 : 5240                		addq.w	#1,d0
   12831/    C504 : D06E 0008           		add.w	8(a6),d0
   12832/    C508 : 6100 FB3E           		bsr.w	sub_C048
   12833/    C50C : 4A45                		tst.w	d5
   12834/    C50E : 6B10                		bmi.s	loc_C520
   12835/    C510 : 9B6E 0008           		sub.w	d5,8(a6)
   12836/    C514 : 426E 002C           		clr.w	$2C(a6)
   12837/    C518 : 42AE 0018           		clr.l	$18(a6)
   12838/    C51C : 7AFF                		moveq	#-1,d5
   12839/    C51E : 4E75                		rts
   12840/    C520 :                     ; ---------------------------------------------------------------------------
   12841/    C520 :                     
   12842/    C520 :                     loc_C520:
   12843/    C520 : 7A00                		moveq	#0,d5
   12844/    C522 : 4E75                		rts
   12845/    C524 :                     ; ---------------------------------------------------------------------------
   12846/    C524 :                     
   12847/    C524 :                     loc_C524:
   12848/    C524 : 7000                		moveq	#0,d0
   12849/    C526 : 102E 0022           		move.b	$22(a6),d0
   12850/    C52A : 4440                		neg.w	d0
   12851/    C52C : D06E 0008           		add.w	8(a6),d0
   12852/    C530 : 5040                		addq.w	#8,d0
   12853/    C532 : 7200                		moveq	#0,d1
   12854/    C534 : 122E 0023           		move.b	$23(a6),d1
   12855/    C538 : 5241                		addq.w	#1,d1
   12856/    C53A : 4441                		neg.w	d1
   12857/    C53C : D26E 000C           		add.w	$C(a6),d1
   12858/    C540 : 6100 FBD4           		bsr.w	sub_C116
   12859/    C544 : 4A45                		tst.w	d5
   12860/    C546 : 6A10                		bpl.s	loc_C558
   12861/    C548 : 9B6E 000C           		sub.w	d5,$C(a6)
   12862/    C54C : 426E 002C           		clr.w	$2C(a6)
   12863/    C550 : 42AE 001C           		clr.l	$1C(a6)
   12864/    C554 : 7AFF                		moveq	#-1,d5
   12865/    C556 : 4E75                		rts
   12866/    C558 :                     ; ---------------------------------------------------------------------------
   12867/    C558 :                     
   12868/    C558 :                     loc_C558:
   12869/    C558 : 7200                		moveq	#0,d1
   12870/    C55A : 122E 0023           		move.b	$23(a6),d1
   12871/    C55E : 5241                		addq.w	#1,d1
   12872/    C560 : D26E 000C           		add.w	$C(a6),d1
   12873/    C564 : 6100 FA1E           		bsr.w	sub_BF84
   12874/    C568 : 4A45                		tst.w	d5
   12875/    C56A : 6B10                		bmi.s	loc_C57C
   12876/    C56C : 9B6E 000C           		sub.w	d5,$C(a6)
   12877/    C570 : 426E 002C           		clr.w	$2C(a6)
   12878/    C574 : 42AE 001C           		clr.l	$1C(a6)
   12879/    C578 : 7AFF                		moveq	#-1,d5
   12880/    C57A : 4E75                		rts
   12881/    C57C :                     ; ---------------------------------------------------------------------------
   12882/    C57C :                     
   12883/    C57C :                     loc_C57C:
   12884/    C57C : 7A00                		moveq	#0,d5
   12885/    C57E : 4E75                		rts
   12886/    C580 :                     ; ---------------------------------------------------------------------------
   12887/    C580 :                     
   12888/    C580 :                     loc_C580:
   12889/    C580 : 7000                		moveq	#0,d0
   12890/    C582 : 102E 0022           		move.b	$22(a6),d0
   12891/    C586 : 5240                		addq.w	#1,d0
   12892/    C588 : 4440                		neg.w	d0
   12893/    C58A : D06E 0008           		add.w	8(a6),d0
   12894/    C58E : 7200                		moveq	#0,d1
   12895/    C590 : 122E 0023           		move.b	$23(a6),d1
   12896/    C594 : 4441                		neg.w	d1
   12897/    C596 : D26E 000C           		add.w	$C(a6),d1
   12898/    C59A : 5041                		addq.w	#8,d1
   12899/    C59C : 6100 FC3C           		bsr.w	sub_C1DA
   12900/    C5A0 : 4A45                		tst.w	d5
   12901/    C5A2 : 6A10                		bpl.s	loc_C5B4
   12902/    C5A4 : 9B6E 0008           		sub.w	d5,8(a6)
   12903/    C5A8 : 426E 002C           		clr.w	$2C(a6)
   12904/    C5AC : 42AE 0018           		clr.l	$18(a6)
   12905/    C5B0 : 7AFF                		moveq	#-1,d5
   12906/    C5B2 : 4E75                		rts
   12907/    C5B4 :                     ; ---------------------------------------------------------------------------
   12908/    C5B4 :                     
   12909/    C5B4 :                     loc_C5B4:
   12910/    C5B4 : 7000                		moveq	#0,d0
   12911/    C5B6 : 102E 0022           		move.b	$22(a6),d0
   12912/    C5BA : 5240                		addq.w	#1,d0
   12913/    C5BC : D06E 0008           		add.w	8(a6),d0
   12914/    C5C0 : 6100 FA86           		bsr.w	sub_C048
   12915/    C5C4 : 4A45                		tst.w	d5
   12916/    C5C6 : 6B10                		bmi.s	loc_C5D8
   12917/    C5C8 : 9B6E 0008           		sub.w	d5,8(a6)
   12918/    C5CC : 426E 002C           		clr.w	$2C(a6)
   12919/    C5D0 : 42AE 0018           		clr.l	$18(a6)
   12920/    C5D4 : 7AFF                		moveq	#-1,d5
   12921/    C5D6 : 4E75                		rts
   12922/    C5D8 :                     ; ---------------------------------------------------------------------------
   12923/    C5D8 :                     
   12924/    C5D8 :                     loc_C5D8:
   12925/    C5D8 : 7A00                		moveq	#0,d5
   12926/    C5DA : 4E75                		rts
   12927/    C5DC :                     ; ---------------------------------------------------------------------------
   12928/    C5DC :                     
   12929/    C5DC :                     loc_C5DC:
   12930/    C5DC : 7000                		moveq	#0,d0
   12931/    C5DE : 102E 0022           		move.b	$22(a6),d0
   12932/    C5E2 : D06E 0008           		add.w	8(a6),d0
   12933/    C5E6 : 5140                		subq.w	#8,d0
   12934/    C5E8 : 7200                		moveq	#0,d1
   12935/    C5EA : 122E 0023           		move.b	$23(a6),d1
   12936/    C5EE : 5241                		addq.w	#1,d1
   12937/    C5F0 : 4441                		neg.w	d1
   12938/    C5F2 : D26E 000C           		add.w	$C(a6),d1
   12939/    C5F6 : 6100 FB1E           		bsr.w	sub_C116
   12940/    C5FA : 4A45                		tst.w	d5
   12941/    C5FC : 6A10                		bpl.s	loc_C60E
   12942/    C5FE : 9B6E 000C           		sub.w	d5,$C(a6)
   12943/    C602 : 426E 002C           		clr.w	$2C(a6)
   12944/    C606 : 42AE 001C           		clr.l	$1C(a6)
   12945/    C60A : 7AFF                		moveq	#-1,d5
   12946/    C60C : 4E75                		rts
   12947/    C60E :                     ; ---------------------------------------------------------------------------
   12948/    C60E :                     
   12949/    C60E :                     loc_C60E:
   12950/    C60E : 7200                		moveq	#0,d1
   12951/    C610 : 122E 0023           		move.b	$23(a6),d1
   12952/    C614 : 5241                		addq.w	#1,d1
   12953/    C616 : D26E 000C           		add.w	$C(a6),d1
   12954/    C61A : 6100 F968           		bsr.w	sub_BF84
   12955/    C61E : 4A45                		tst.w	d5
   12956/    C620 : 6B10                		bmi.s	loc_C632
   12957/    C622 : 9B6E 000C           		sub.w	d5,$C(a6)
   12958/    C626 : 426E 002C           		clr.w	$2C(a6)
   12959/    C62A : 42AE 001C           		clr.l	$1C(a6)
   12960/    C62E : 7AFF                		moveq	#-1,d5
   12961/    C630 : 4E75                		rts
   12962/    C632 :                     ; ---------------------------------------------------------------------------
   12963/    C632 :                     
   12964/    C632 :                     loc_C632:
   12965/    C632 : 7A00                		moveq	#0,d5
   12966/    C634 : 4E75                		rts
   12967/    C636 :                     
   12968/    C636 :                     ; =============== S U B	R O U T	I N E =======================================
   12969/    C636 :                     
   12970/    C636 :                     
   12971/    C636 :                     sub_C636:
   12972/    C636 : 4AAE 001C           		tst.l	$1C(a6)
   12973/    C63A : 6A00 004E           		bpl.w	loc_C68A
   12974/    C63E : 11FC 0008 FAE8      		move.b	#8,($FFFFFAE8).w
   12975/    C644 : 7000                		moveq	#0,d0
   12976/    C646 : 102E 0022           		move.b	$22(a6),d0
   12977/    C64A : 4440                		neg.w	d0
   12978/    C64C : D06E 0008           		add.w	8(a6),d0
   12979/    C650 : 7200                		moveq	#0,d1
   12980/    C652 : 122E 0023           		move.b	$23(a6),d1
   12981/    C656 : 4441                		neg.w	d1
   12982/    C658 : D26E 000C           		add.w	$C(a6),d1
   12983/    C65C : 6100 FAB8           		bsr.w	sub_C116
   12984/    C660 : 4A45                		tst.w	d5
   12985/    C662 : 6A08                		bpl.s	loc_C66C
   12986/    C664 : 9B6E 000C           		sub.w	d5,$C(a6)
   12987/    C668 : 7AFF                		moveq	#-1,d5
   12988/    C66A : 4E75                		rts
   12989/    C66C :                     ; ---------------------------------------------------------------------------
   12990/    C66C :                     
   12991/    C66C :                     loc_C66C:
   12992/    C66C : 7000                		moveq	#0,d0
   12993/    C66E : 102E 0022           		move.b	$22(a6),d0
   12994/    C672 : D06E 0008           		add.w	8(a6),d0
   12995/    C676 : 6100 FA9E           		bsr.w	sub_C116
   12996/    C67A : 4A45                		tst.w	d5
   12997/    C67C : 6A08                		bpl.s	loc_C686
   12998/    C67E : 9B6E 000C           		sub.w	d5,$C(a6)
   12999/    C682 : 7AFF                		moveq	#-1,d5
   13000/    C684 : 4E75                		rts
   13001/    C686 :                     ; ---------------------------------------------------------------------------
   13002/    C686 :                     
   13003/    C686 :                     loc_C686:
   13004/    C686 : 7A00                		moveq	#0,d5
   13005/    C688 : 4E75                		rts
   13006/    C68A :                     ; ---------------------------------------------------------------------------
   13007/    C68A :                     
   13008/    C68A :                     loc_C68A:
   13009/    C68A : 11FC 000A FAE8      		move.b	#$A,($FFFFFAE8).w
   13010/    C690 : 7000                		moveq	#0,d0
   13011/    C692 : 102E 0022           		move.b	$22(a6),d0
   13012/    C696 : D06E 0008           		add.w	8(a6),d0
   13013/    C69A : 7200                		moveq	#0,d1
   13014/    C69C : 122E 0023           		move.b	$23(a6),d1
   13015/    C6A0 : D26E 000C           		add.w	$C(a6),d1
   13016/    C6A4 : 6100 F8DE           		bsr.w	sub_BF84
   13017/    C6A8 : 4A45                		tst.w	d5
   13018/    C6AA : 6B08                		bmi.s	loc_C6B4
   13019/    C6AC : 9B6E 000C           		sub.w	d5,$C(a6)
   13020/    C6B0 : 7AFF                		moveq	#-1,d5
   13021/    C6B2 : 4E75                		rts
   13022/    C6B4 :                     ; ---------------------------------------------------------------------------
   13023/    C6B4 :                     
   13024/    C6B4 :                     loc_C6B4:
   13025/    C6B4 : 7000                		moveq	#0,d0
   13026/    C6B6 : 102E 0022           		move.b	$22(a6),d0
   13027/    C6BA : 4440                		neg.w	d0
   13028/    C6BC : D06E 0008           		add.w	8(a6),d0
   13029/    C6C0 : 6100 F8C2           		bsr.w	sub_BF84
   13030/    C6C4 : 4A45                		tst.w	d5
   13031/    C6C6 : 6B08                		bmi.s	loc_C6D0
   13032/    C6C8 : 9B6E 000C           		sub.w	d5,$C(a6)
   13033/    C6CC : 7AFF                		moveq	#-1,d5
   13034/    C6CE : 4E75                		rts
   13035/    C6D0 :                     ; ---------------------------------------------------------------------------
   13036/    C6D0 :                     
   13037/    C6D0 :                     loc_C6D0:
   13038/    C6D0 : 7A00                		moveq	#0,d5
   13039/    C6D2 : 4E75                		rts
   13040/    C6D4 :                     ; End of function sub_C636
   13041/    C6D4 :                     
   13042/    C6D4 :                     
   13043/    C6D4 :                     ; =============== S U B	R O U T	I N E =======================================
   13044/    C6D4 :                     
   13045/    C6D4 :                     
   13046/    C6D4 :                     sub_C6D4:
   13047/    C6D4 : 202E 0018           		move.l	$18(a6),d0
   13048/    C6D8 : 6A12                		bpl.s	loc_C6EC
   13049/    C6DA : 0C80 FFF0 0000      		cmpi.l	#$FFF00000,d0
   13050/    C6E0 : 6C1A                		bge.s	loc_C6FC
   13051/    C6E2 : 2D7C FFF0 0000      		move.l	#$FFF00000,$18(a6)
             C6E8 : 0018             
   13052/    C6EA : 6010                		bra.s	loc_C6FC
   13053/    C6EC :                     ; ---------------------------------------------------------------------------
   13054/    C6EC :                     
   13055/    C6EC :                     loc_C6EC:
   13056/    C6EC : 0C80 0010 0000      		cmpi.l	#$100000,d0
   13057/    C6F2 : 6508                		bcs.s	loc_C6FC
   13058/    C6F4 : 2D7C 0010 0000      		move.l	#$100000,$18(a6)
             C6FA : 0018             
   13059/    C6FC :                     
   13060/    C6FC :                     loc_C6FC:
   13061/    C6FC : 202E 001C           		move.l	$1C(a6),d0
   13062/    C700 : 6A12                		bpl.s	loc_C714
   13063/    C702 : 0C80 FFF0 0000      		cmpi.l	#$FFF00000,d0
   13064/    C708 : 6C1A                		bge.s	loc_C724
   13065/    C70A : 2D7C FFF0 0000      		move.l	#$FFF00000,$1C(a6)
             C710 : 001C             
   13066/    C712 : 4E75                		rts
   13067/    C714 :                     ; ---------------------------------------------------------------------------
   13068/    C714 :                     
   13069/    C714 :                     loc_C714:
   13070/    C714 : 0C80 0010 0000      		cmpi.l	#$100000,d0
   13071/    C71A : 6508                		bcs.s	loc_C724
   13072/    C71C : 2D7C 0010 0000      		move.l	#$100000,$1C(a6)
             C722 : 001C             
   13073/    C724 :                     
   13074/    C724 :                     loc_C724:
   13075/    C724 : 302E 002C           		move.w	$2C(a6),d0
   13076/    C728 : 6A0E                		bpl.s	loc_C738
   13077/    C72A : 0C40 F000           		cmpi.w	#$F000,d0
   13078/    C72E : 6C14                		bge.s	locret_C744
   13079/    C730 : 3D7C F000 002C      		move.w	#$F000,$2C(a6)
   13080/    C736 : 4E75                		rts
   13081/    C738 :                     ; ---------------------------------------------------------------------------
   13082/    C738 :                     
   13083/    C738 :                     loc_C738:
   13084/    C738 : 0C40 1000           		cmpi.w	#$1000,d0
   13085/    C73C : 6506                		bcs.s	locret_C744
   13086/    C73E : 3D7C 1000 002C      		move.w	#$1000,$2C(a6)
   13087/    C744 :                     
   13088/    C744 :                     locret_C744:
   13089/    C744 : 4E75                		rts
   13090/    C746 :                     ; End of function sub_C6D4
   13091/    C746 :                     
   13092/    C746 :                     ; ---------------------------------------------------------------------------
   13093/    C746 :                     
   13094/    C746 :                     loc_C746:
   13095/    C746 : 3E2E 0004           		move.w	4(a6),d7
   13096/    C74A : 0047 0080           		ori.w	#$80,d7
   13097/    C74E : 082E 0006 0005      		btst	#6,5(a6)
   13098/    C754 : 6704                		beq.s	loc_C75A
   13099/    C756 : 0247 FF7F           		andi.w	#$FF7F,d7
   13100/    C75A :                     
   13101/    C75A :                     loc_C75A:
   13102/    C75A : 4A6E 0030           		tst.w	$30(a6)
   13103/    C75E : 670C                		beq.s	loc_C76C
   13104/    C760 : 6B06                		bmi.s	loc_C768
   13105/    C762 : 536E 0030           		subq.w	#1,$30(a6)
   13106/    C766 : 6004                		bra.s	loc_C76C
   13107/    C768 :                     ; ---------------------------------------------------------------------------
   13108/    C768 :                     
   13109/    C768 :                     loc_C768:
   13110/    C768 : 426E 0030           		clr.w	$30(a6)
   13111/    C76C :                     
   13112/    C76C :                     loc_C76C:
   13113/    C76C : 3D47 0004           		move.w	d7,4(a6)
   13114/    C770 : 102E 0025           		move.b	$25(a6),d0
   13115/    C774 : 0200 0080           		andi.b	#$80,d0
   13116/    C778 : 122E 0020           		move.b	$20(a6),d1
   13117/    C77C : 0201 007F           		andi.b	#$7F,d1
   13118/    C780 : 8001                		or.b	d1,d0
   13119/    C782 : 1D40 0020           		move.b	d0,$20(a6)
   13120/    C786 : 4A2E 0006           		tst.b	6(a6)
   13121/    C78A : 6600 0030           		bne.w	loc_C7BC
   13122/    C78E : 0C2E 000A 0007      		cmpi.b	#$A,7(a6)
   13123/    C794 : 6726                		beq.s	loc_C7BC
   13124/    C796 : 3038 FAE0           		move.w	($FFFFFAE0).w,d0
   13125/    C79A : 0C40 0010           		cmpi.w	#$10,d0
   13126/    C79E : 641C                		bcc.s	loc_C7BC
   13127/    C7A0 : 3078 D864           		movea.w	($FFFFD864).w,a0
   13128/    C7A4 : 302E 0008           		move.w	8(a6),d0
   13129/    C7A8 : 9068 0008           		sub.w	8(a0),d0
   13130/    C7AC : 5BC0                		smi	d0
   13131/    C7AE : 4880                		ext.w	d0
   13132/    C7B0 : 0040 0001           		ori.w	#1,d0
   13133/    C7B4 : D16E 0008           		add.w	d0,8(a6)
   13134/    C7B8 : 9168 0008           		sub.w	d0,8(a0)
   13135/    C7BC :                     
   13136/    C7BC :                     loc_C7BC:
   13137/    C7BC : 6100 FF16           		bsr.w	sub_C6D4
   13138/    C7C0 : 6100 0108           		bsr.w	sub_C8CA
   13139/    C7C4 : 4A2E 0006           		tst.b	6(a6)
   13140/    C7C8 : 660C                		bne.s	loc_C7D6
   13141/    C7CA : 49F8 D87C           		lea	($FFFFD87C).w,a4
   13142/    C7CE : 7401                		moveq	#1,d2
   13143/    C7D0 : 3038 D866           		move.w	($FFFFD866).w,d0
   13144/    C7D4 : 600A                		bra.s	loc_C7E0
   13145/    C7D6 :                     ; ---------------------------------------------------------------------------
   13146/    C7D6 :                     
   13147/    C7D6 :                     loc_C7D6:
   13148/    C7D6 : 49F8 D880           		lea	($FFFFD880).w,a4
   13149/    C7DA : 7402                		moveq	#2,d2
   13150/    C7DC : 3038 D868           		move.w	($FFFFD868).w,d0
   13151/    C7E0 :                     
   13152/    C7E0 :                     loc_C7E0:
   13153/    C7E0 : 47FB 0068           		lea	off_C84A(pc,d0.w),a3
   13154/    C7E4 : 2053                		movea.l	(a3),a0
   13155/    C7E6 : 226B 0020           		movea.l	$20(a3),a1
   13156/    C7EA : 246B 0040           		movea.l	$40(a3),a2
   13157/    C7EE : 266B 0060           		movea.l	$60(a3),a3
   13158/    C7F2 : 302E 0026           		move.w	$26(a6),d0			; load animation frame number?
   13159/    C7F6 : D0F0 0000           		adda.w	(a0,d0.w),a0
   13160/    C7FA : 7200                		moveq	#0,d1
   13161/    C7FC : 122E 0028           		move.b	$28(a6),d1
   13162/    C800 : 1030 1003           		move.b	3(a0,d1.w),d0
   13163/    C804 : B228 0001           		cmp.b	1(a0),d1
   13164/    C808 : 630E                		bls.s	loc_C818
   13165/    C80A : 1028 0002           		move.b	2(a0),d0
   13166/    C80E : 1D40 0028           		move.b	d0,$28(a6)
   13167/    C812 : 1030 0003           		move.b	3(a0,d0.w),d0
   13168/    C816 : 6016                		bra.s	loc_C82E
   13169/    C818 :                     ; ---------------------------------------------------------------------------
   13170/    C818 :                     
   13171/    C818 :                     loc_C818:
   13172/    C818 : 1210                		move.b	(a0),d1
   13173/    C81A : D36E 0028           		add.w	d1,$28(a6)
   13174/    C81E : 122E 0028           		move.b	$28(a6),d1
   13175/    C822 : B228 0001           		cmp.b	1(a0),d1
   13176/    C826 : 630A                		bls.s	loc_C832
   13177/    C828 : 1D68 0002 0028      		move.b	2(a0),$28(a6)
   13178/    C82E :                     
   13179/    C82E :                     loc_C82E:
   13180/    C82E : 422E 0029           		clr.b	$29(a6)
   13181/    C832 :                     
   13182/    C832 :                     loc_C832:
   13183/    C832 : D040                		add.w	d0,d0
   13184/    C834 : D040                		add.w	d0,d0
   13185/    C836 : D6F1 0000           		adda.w	(a1,d0.w),a3
   13186/    C83A : D4F1 0002           		adda.w	2(a1,d0.w),a2
   13187/    C83E : 288A                		move.l	a2,(a4)
   13188/    C840 : 8538 D87A           		or.b	d2,($FFFFD87A).w
   13189/    C844 : 2D4B 0010           		move.l	a3,obMap(a6)
   13190/    C848 : 4E75                		rts
   13191/    C84A :                     ; ---------------------------------------------------------------------------
   13192/    C84A : 0006 6D5C           off_C84A:	dc.l ANI_Sonic
   13193/    C84E : 0006 7CD2           		dc.l ANI_Tails
   13194/    C852 : 0000 0000           		dc.l 0
   13195/    C856 : 0000 0000           		dc.l 0
   13196/    C85A : 0000 0000           		dc.l 0
   13197/    C85E : 0000 0000           		dc.l 0
   13198/    C862 : 0000 0000           		dc.l 0
   13199/    C866 : 0000 0000           		dc.l 0
   13200/    C86A : 0006 6E26           		dc.l PLCMAP_Sonic_MainIndex
   13201/    C86E : 0006 7DD2           		dc.l PLCMAP_Tails_MainIndex
   13202/    C872 : 0000 0000           		dc.l 0
   13203/    C876 : 0000 0000           		dc.l 0
   13204/    C87A : 0000 0000           		dc.l 0
   13205/    C87E : 0000 0000           		dc.l 0
   13206/    C882 : 0000 0000           		dc.l 0
   13207/    C886 : 0000 0000           		dc.l 0
   13208/    C88A : 0006 6F92           		dc.l PLC_Sonic
   13209/    C88E : 0006 7FBE           		dc.l PLC_Tails
   13210/    C892 : 0000 0000           		dc.l 0
   13211/    C896 : 0000 0000           		dc.l 0
   13212/    C89A : 0000 0000           		dc.l 0
   13213/    C89E : 0000 0000           		dc.l 0
   13214/    C8A2 : 0000 0000           		dc.l 0
   13215/    C8A6 : 0000 0000           		dc.l 0
   13216/    C8AA : 0006 7302           		dc.l Map_Sonic
   13217/    C8AE : 0006 852C           		dc.l MAP_Tails
   13218/    C8B2 : 0000 0000           		dc.l 0
   13219/    C8B6 : 0000 0000           		dc.l 0
   13220/    C8BA : 0000 0000           		dc.l 0
   13221/    C8BE : 0000 0000           		dc.l 0
   13222/    C8C2 : 0000 0000           		dc.l 0
   13223/    C8C6 : 0000 0000           		dc.l 0
   13224/    C8CA :                     
   13225/    C8CA :                     ; =============== S U B	R O U T	I N E =======================================
   13226/    C8CA :                     
   13227/    C8CA :                     
   13228/    C8CA :                     sub_C8CA:
   13229/    C8CA : 4A2E 0006           		tst.b	6(a6)
   13230/    C8CE : 6600 010C           		bne.w	locret_C9DC
   13231/    C8D2 : (MACRO)              		disable_ints
   13231/    C8D2 : 46FC 2700                           move    #$2700,sr
   13232/    C8D6 : 302E 0006           		move.w	6(a6),d0
   13233/    C8DA : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13234/    C8DE : 0641 0C00           		addi.w	#$C00,d1
   13235/    C8E2 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13236/    C8E8 : 302E 0024           		move.w	$24(a6),d0
   13237/    C8EC : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13238/    C8F0 : 0641 0C08           		addi.w	#$C08,d1
   13239/    C8F4 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13240/    C8FA : 302E 0026           		move.w	$26(a6),d0
   13241/    C8FE : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13242/    C902 : 0641 0C88           		addi.w	#$C88,d1
   13243/    C906 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13244/    C90C : 302E 0028           		move.w	$28(a6),d0
   13245/    C910 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13246/    C914 : 0641 0D08           		addi.w	#$D08,d1
   13247/    C918 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13248/    C91E : 7000                		moveq	#0,d0
   13249/    C920 : 302E 002A           		move.w	$2A(a6),d0
   13250/    C924 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13251/    C928 : 0641 0C12           		addi.w	#$C12,d1
   13252/    C92C : 4EB9 0000 5090      		jsr	(sub_5090).l
   13253/    C932 : 302E 002C           		move.w	$2C(a6),d0
   13254/    C936 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13255/    C93A : 0641 0C92           		addi.w	#$C92,d1
   13256/    C93E : 4EB9 0000 5090      		jsr	(sub_5090).l
   13257/    C944 : 302E 002E           		move.w	$2E(a6),d0
   13258/    C948 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13259/    C94C : 0641 0D12           		addi.w	#$D12,d1
   13260/    C950 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13261/    C956 : 3038 FAC0           		move.w	($FFFFFAC0).w,d0
   13262/    C95A : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13263/    C95E : 0641 0C9C           		addi.w	#$C9C,d1
   13264/    C962 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13265/    C968 : 3038 FAC2           		move.w	($FFFFFAC2).w,d0
   13266/    C96C : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13267/    C970 : 0641 0CA6           		addi.w	#$CA6,d1
   13268/    C974 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13269/    C97A : 2078 FAC6           		movea.l	($FFFFFAC6).w,a0
   13270/    C97E : 3010                		move.w	(a0),d0
   13271/    C980 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13272/    C984 : 0641 0D1C           		addi.w	#$D1C,d1
   13273/    C988 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13274/    C98E : 2078 FACA           		movea.l	($FFFFFACA).w,a0
   13275/    C992 : 3010                		move.w	(a0),d0
   13276/    C994 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13277/    C998 : 0641 0D26           		addi.w	#$D26,d1
   13278/    C99C : 4EB9 0000 5090      		jsr	(sub_5090).l
   13279/    C9A2 : 302E 0008           		move.w	8(a6),d0
   13280/    C9A6 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13281/    C9AA : 0641 0C1C           		addi.w	#$C1C,d1
   13282/    C9AE : 4EB9 0000 5090      		jsr	(sub_5090).l
   13283/    C9B4 : 302E 000C           		move.w	$C(a6),d0
   13284/    C9B8 : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13285/    C9BC : 0641 0C26           		addi.w	#$C26,d1
   13286/    C9C0 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13287/    C9C6 : 302E 0030           		move.w	$30(a6),d0
   13288/    C9CA : 3238 D81E           		move.w	($FFFFD81E).w,d1
   13289/    C9CE : 0641 0C30           		addi.w	#$C30,d1
   13290/    C9D2 : 4EB9 0000 5090      		jsr	(sub_5090).l
   13291/    C9D8 : (MACRO)              		enable_ints
   13291/    C9D8 : 46FC 2300                           move    #$2300,sr
   13292/    C9DC :                     
   13293/    C9DC :                     locret_C9DC:
   13294/    C9DC : 4E75                		rts
   13295/    C9DE :                     ; End of function sub_C8CA
   13296/    C9DE :                     
   13297/    C9DE :                     
   13298/    C9DE :                     ; =============== S U B	R O U T	I N E =======================================
   13299/    C9DE :                     
   13300/    C9DE :                     
   13301/    C9DE :                     sub_C9DE:
   13302/    C9DE : 4DF9 00C0 0004      		lea	(vdp_control_port).l,a6
   13303/    C9E4 : (MACRO)              		stopZ80
   13303/    C9E4 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
             C9EA : 1100             
   13304/    C9EC : (MACRO)              		waitZ80
   13304/    C9EC : 0839 0000 00A1      .wait:          btst    #0,(z80_bus_request).l
             C9F2 : 1100             
   13304/    C9F4 : 66F6                                bne.s   .wait
   13305/    C9F6 : 3CBC 8154           		move.w	#$8154,(a6)
   13306/    C9FA :                     
   13307/    C9FA :                     loc_C9FA:
   13308/    C9FA : 1638 D87A           		move.b	($FFFFD87A).w,d3
   13309/    C9FE : 4238 D87A           		clr.b	($FFFFD87A).w
   13310/    CA02 : 43F8 D87C           		lea	($FFFFD87C).w,a1
   13311/    CA06 :                     
   13312/    CA06 :                     loc_CA06:
   13313/    CA06 : 45FA 0024           		lea	loc_CA2C(pc),a2
   13314/    CA0A : 7807                		moveq	#7,d4
   13315/    CA0C :                     
   13316/    CA0C :                     loc_CA0C:
   13317/    CA0C : E24B                		lsr.w	#1,d3
   13318/    CA0E : 6406                		bcc.s	loc_CA16
   13319/    CA10 : 2051                		movea.l	(a1),a0
   13320/    CA12 : 3412                		move.w	(a2),d2
   13321/    CA14 : 6126                		bsr.s	sub_CA3C
   13322/    CA16 :                     
   13323/    CA16 :                     loc_CA16:
   13324/    CA16 : 5849                		addq.w	#4,a1
   13325/    CA18 : 544A                		addq.w	#2,a2
   13326/    CA1A : 51CC FFF0           		dbf	d4,loc_CA0C
   13327/    CA1E : 3CBC 8164           		move.w	#$8164,(a6)
   13328/    CA22 : (MACRO)              		startZ80
   13328/    CA22 : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
             CA28 : 1100             
   13329/    CA2A : 4E75                		rts
   13330/    CA2C :                     ; End of function sub_C9DE
   13331/    CA2C :                     
   13332/    CA2C :                     ; ---------------------------------------------------------------------------
   13333/    CA2C : 0000 0420           loc_CA2C:	dc.l $420
   13334/    CA30 : 0000                		dc.w 0
   13335/    CA32 : 0000 0420           		dc.l $420
   13336/    CA36 : 0000                		dc.w 0
   13337/    CA38 : 0000 0420           		dc.l $420
   13338/    CA3C :                     
   13339/    CA3C :                     ; =============== S U B	R O U T	I N E =======================================
   13340/    CA3C :                     
   13341/    CA3C :                     
   13342/    CA3C :                     sub_CA3C:
   13343/    CA3C : 203C 9400 9300      		move.l	#$94009300,d0
   13344/    CA42 : 1018                		move.b	(a0)+,d0
   13345/    CA44 : 4840                		swap	d0
   13346/    CA46 : 1018                		move.b	(a0)+,d0
   13347/    CA48 : 2C80                		move.l	d0,(a6)
   13348/    CA4A : 3018                		move.w	(a0)+,d0
   13349/    CA4C : 4840                		swap	d0
   13350/    CA4E : 303C 9600           		move.w	#$9600,d0
   13351/    CA52 : 1018                		move.b	(a0)+,d0
   13352/    CA54 : 2C80                		move.l	d0,(a6)
   13353/    CA56 : 303C 9500           		move.w	#$9500,d0
   13354/    CA5A : 1018                		move.b	(a0)+,d0
   13355/    CA5C : 4840                		swap	d0
   13356/    CA5E : 3018                		move.w	(a0)+,d0
   13357/    CA60 : 3200                		move.w	d0,d1
   13358/    CA62 : D042                		add.w	d2,d0
   13359/    CA64 : 0240 3FFF           		andi.w	#$3FFF,d0
   13360/    CA68 : 0040 4000           		ori.w	#$4000,d0
   13361/    CA6C : 2C80                		move.l	d0,(a6)
   13362/    CA6E : E559                		rol.w	#2,d1
   13363/    CA70 : 0241 0003           		andi.w	#3,d1
   13364/    CA74 : 0041 0080           		ori.w	#$80,d1
   13365/    CA78 : 3F01                		move.w	d1,-(sp)
   13366/    CA7A : 3C9F                		move.w	(sp)+,(a6)
   13367/    CA7C : 4A58                		tst.w	(a0)+
   13368/    CA7E : 67BC                		beq.s	sub_CA3C
   13369/    CA80 : 4E75                		rts
   13370/    CA82 :                     ; End of function sub_CA3C
   13371/    CA82 :                     
   13372/    CA82 :                     
   13373/    CA82 :                     ; =============== S U B	R O U T	I N E =======================================
   13374/    CA82 :                     
   13375/    CA82 :                     
   13376/    CA82 :                     sub_CA82:
   13377/    CA82 : 142D 0020           		move.b	$20(a5),d2
   13378/    CA86 : 1D42 0020           		move.b	d2,$20(a6)
   13379/    CA8A :                     
   13380/    CA8A :                     loc_CA8A:
   13381/    CA8A : 362D 0008           		move.w	8(a5),d3
   13382/    CA8E : 0802 0003           		btst	#3,d2
   13383/    CA92 : 6620                		bne.s	loc_CAB4
   13384/    CA94 : D640                		add.w	d0,d3
   13385/    CA96 : 3D43 0008           		move.w	d3,8(a6)
   13386/    CA9A : 362D 000C           		move.w	$C(a5),d3
   13387/    CA9E : 0802 0004           		btst	#4,d2
   13388/    CAA2 : 6608                		bne.s	loc_CAAC
   13389/    CAA4 : D641                		add.w	d1,d3
   13390/    CAA6 : 3D43 000C           		move.w	d3,$C(a6)
   13391/    CAAA : 4E75                		rts
   13392/    CAAC :                     ; ---------------------------------------------------------------------------
   13393/    CAAC :                     
   13394/    CAAC :                     loc_CAAC:
   13395/    CAAC : 9641                		sub.w	d1,d3
   13396/    CAAE : 3D43 000C           		move.w	d3,$C(a6)
   13397/    CAB2 : 4E75                		rts
   13398/    CAB4 :                     ; ---------------------------------------------------------------------------
   13399/    CAB4 :                     
   13400/    CAB4 :                     loc_CAB4:
   13401/    CAB4 : 9640                		sub.w	d0,d3
   13402/    CAB6 : 3D43 0008           		move.w	d3,8(a6)
   13403/    CABA : 362D 000C           		move.w	$C(a5),d3
   13404/    CABE : 0802 0004           		btst	#4,d2
   13405/    CAC2 : 6608                		bne.s	loc_CACC
   13406/    CAC4 : D641                		add.w	d1,d3
   13407/    CAC6 : 3D43 000C           		move.w	d3,$C(a6)
   13408/    CACA : 4E75                		rts
   13409/    CACC :                     ; ---------------------------------------------------------------------------
   13410/    CACC :                     
   13411/    CACC :                     loc_CACC:
   13412/    CACC : 9641                		sub.w	d1,d3
   13413/    CACE : 3D43 000C           		move.w	d3,$C(a6)
   13414/    CAD2 : 4E75                		rts
   13415/    CAD4 :                     ; End of function sub_CA82
   13416/    CAD4 :                     
   13417/    CAD4 :                     ; ---------------------------------------------------------------------------
   13418/    CAD4 :                     
   13419/    CAD4 :                     loc_CAD4:
   13420/    CAD4 : 48E7 FF00           		movem.l	d0-d7,-(sp)
   13421/    CAD8 : 4EB9 0000 EA3E      		jsr	(sub_EA3E).l
   13422/    CADE : B068 0008           		cmp.w	8(a0),d0
   13423/    CAE2 : 6606                		bne.s	loc_CAEA
   13424/    CAE4 : B268 000C           		cmp.w	$C(a0),d1
   13425/    CAE8 : 672A                		beq.s	loc_CB14
   13426/    CAEA :                     
   13427/    CAEA :                     loc_CAEA:
   13428/    CAEA : 4A6F FFE0           		tst.w	-$20(sp)
   13429/    CAEE : 6724                		beq.s	loc_CB14
   13430/    CAF0 : 3140 0008           		move.w	d0,8(a0)
   13431/    CAF4 : 3141 000C           		move.w	d1,$C(a0)
   13432/    CAF8 : 7000                		moveq	#0,d0
   13433/    CAFA : 3140 002C           		move.w	d0,$2C(a0)
   13434/    CAFE : 2140 0018           		move.l	d0,$18(a0)
   13435/    CB02 : 2140 001C           		move.l	d0,$1C(a0)
   13436/    CB06 : 08E8 0000 0025      		bset	#0,$25(a0)
   13437/    CB0C : 70FF                		moveq	#-1,d0
   13438/    CB0E : 4CDF 00FF           		movem.l	(sp)+,d0-d7
   13439/    CB12 : 4E75                		rts
   13440/    CB14 :                     ; ---------------------------------------------------------------------------
   13441/    CB14 :                     
   13442/    CB14 :                     loc_CB14:
   13443/    CB14 : 7000                		moveq	#0,d0
   13444/    CB16 : 4CDF 00FF           		movem.l	(sp)+,d0-d7
   13445/    CB1A : 4E75                		rts
   13446/    CB1C :                     
   13447/    CB1C :                     ; =============== S U B	R O U T	I N E =======================================
   13448/    CB1C :                     
   13449/    CB1C :                     
   13450/    CB1C :                     loc_CB1C:
   13451/    CB1C : 2F02                		move.l	d2,-(sp)
   13452/    CB1E : 2428 0018           		move.l	$18(a0),d2
   13453/    CB22 : D082                		add.l	d2,d0
   13454/    CB24 : B182                		eor.l	d0,d2
   13455/    CB26 : 6A04                		bpl.s	loc_CB2C
   13456/    CB28 : B182                		eor.l	d0,d2
   13457/    CB2A : 9082                		sub.l	d2,d0
   13458/    CB2C :                     
   13459/    CB2C :                     loc_CB2C:
   13460/    CB2C : 4A80                		tst.l	d0
   13461/    CB2E : 6A10                		bpl.s	loc_CB40
   13462/    CB30 : 0C80 FFF0 0000      		cmpi.l	#$FFF00000,d0
   13463/    CB36 : 6C16                		bge.s	loc_CB4E
   13464/    CB38 : 203C FFF0 0000      		move.l	#$FFF00000,d0
   13465/    CB3E : 600E                		bra.s	loc_CB4E
   13466/    CB40 :                     ; ---------------------------------------------------------------------------
   13467/    CB40 :                     
   13468/    CB40 :                     loc_CB40:
   13469/    CB40 : 0C80 0010 0000      		cmpi.l	#$100000,d0
   13470/    CB46 : 6506                		bcs.s	loc_CB4E
   13471/    CB48 : 203C 0010 0000      		move.l	#$100000,d0
   13472/    CB4E :                     
   13473/    CB4E :                     loc_CB4E:
   13474/    CB4E : 2140 0018           		move.l	d0,$18(a0)
   13475/    CB52 : 2428 001C           		move.l	$1C(a0),d2
   13476/    CB56 : D282                		add.l	d2,d1
   13477/    CB58 : B382                		eor.l	d1,d2
   13478/    CB5A : 6A04                		bpl.s	loc_CB60
   13479/    CB5C : B382                		eor.l	d1,d2
   13480/    CB5E : 9282                		sub.l	d2,d1
   13481/    CB60 :                     
   13482/    CB60 :                     loc_CB60:
   13483/    CB60 : 4A81                		tst.l	d1
   13484/    CB62 : 6A10                		bpl.s	loc_CB74
   13485/    CB64 : 0C81 FFF0 0000      		cmpi.l	#$FFF00000,d1
   13486/    CB6A : 6C16                		bge.s	loc_CB82
   13487/    CB6C : 223C FFF0 0000      		move.l	#$FFF00000,d1
   13488/    CB72 : 600E                		bra.s	loc_CB82
   13489/    CB74 :                     ; ---------------------------------------------------------------------------
   13490/    CB74 :                     
   13491/    CB74 :                     loc_CB74:
   13492/    CB74 : 0C81 0010 0000      		cmpi.l	#$100000,d1
   13493/    CB7A : 6506                		bcs.s	loc_CB82
   13494/    CB7C : 223C 0010 0000      		move.l	#$100000,d1
   13495/    CB82 :                     
   13496/    CB82 :                     loc_CB82:
   13497/    CB82 : 2141 001C           		move.l	d1,$1C(a0)
   13498/    CB86 : 117C 0008 0007      		move.b	#8,7(a0)
   13499/    CB8C : 241F                		move.l	(sp)+,d2
   13500/    CB8E : 4E75                		rts
   13501/    CB90 :                     ; End of function loc_CB1C
   13502/    CB90 :                     
   13503/    CB90 :                     
   13504/    CB90 :                     ; =============== S U B	R O U T	I N E =======================================
   13505/    CB90 :                     
   13506/    CB90 :                     
   13507/    CB90 :                     loc_CB90:
   13508/    CB90 : 9168 0032           		sub.w	d0,$32(a0)
   13509/    CB94 : 08A8 0000 0025      		bclr	#0,$25(a0)
   13510/    CB9A : 117C 0010 0007      		move.b	#$10,7(a0)
   13511/    CBA0 : 217C 0001 0000      		move.l	#$10000,$18(a0)
             CBA6 : 0018             
   13512/    CBA8 : 217C FFFB 0000      		move.l	#$FFFB0000,$1C(a0)
             CBAE : 001C             
   13513/    CBB0 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
   13514/    CBB4 : 2C48                		movea.l	a0,a6
   13515/    CBB6 : 6100 00A4           		bsr.w	sub_CC5C
   13516/    CBBA : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
   13517/    CBBE : 4E75                		rts
   13518/    CBC0 :                     ; End of function loc_CB90
   13519/    CBC0 :                     
   13520/    CBC0 :                     
   13521/    CBC0 :                     ; =============== S U B	R O U T	I N E =======================================
   13522/    CBC0 :                     
   13523/    CBC0 :                     
   13524/    CBC0 :                     sub_CBC0:
   13525/    CBC0 : 262E 0018           		move.l	$18(a6),d3
   13526/    CBC4 : 282E 001C           		move.l	$1C(a6),d4
   13527/    CBC8 : 142E 002A           		move.b	$2A(a6),d2
   13528/    CBCC : 082E 0003 0025      		btst	#3,$25(a6)
   13529/    CBD2 : 6704                		beq.s	loc_CBD8
   13530/    CBD4 : 0602 0080           		addi.b	#-$80,d2
   13531/    CBD8 :                     
   13532/    CBD8 :                     loc_CBD8:
   13533/    CBD8 : 4EB8 3F14           		jsr	(CalcSine).w
   13534/    CBDC : 342E 002C           		move.w	$2C(a6),d2
   13535/    CBE0 : C1C2                		muls.w	d2,d0
   13536/    CBE2 : C3C2                		muls.w	d2,d1
   13537/    CBE4 : 4A42                		tst.w	d2
   13538/    CBE6 : 6726                		beq.s	loc_CC0E
   13539/    CBE8 : EC80                		asr.l	#6,d0
   13540/    CBEA : EC81                		asr.l	#6,d1
   13541/    CBEC : D680                		add.l	d0,d3
   13542/    CBEE : D881                		add.l	d1,d4
   13543/    CBF0 : 2403                		move.l	d3,d2
   13544/    CBF2 : 8484                		or.l	d4,d2
   13545/    CBF4 : 6718                		beq.s	loc_CC0E
   13546/    CBF6 : 142E 002B           		move.b	$2B(a6),d2
   13547/    CBFA : 4EB8 3F14           		jsr	(CalcSine).w
   13548/    CBFE : 342E 002E           		move.w	$2E(a6),d2
   13549/    CC02 : C1C2                		muls.w	d2,d0
   13550/    CC04 : C3C2                		muls.w	d2,d1
   13551/    CC06 : EC80                		asr.l	#6,d0
   13552/    CC08 : EC81                		asr.l	#6,d1
   13553/    CC0A : D680                		add.l	d0,d3
   13554/    CC0C : D881                		add.l	d1,d4
   13555/    CC0E :                     
   13556/    CC0E :                     loc_CC0E:
   13557/    CC0E : 4A83                		tst.l	d3
   13558/    CC10 : 6A10                		bpl.s	loc_CC22
   13559/    CC12 : 0C83 FFF0 0000      		cmpi.l	#$FFF00000,d3
   13560/    CC18 : 6C16                		bge.s	loc_CC30
   13561/    CC1A : 263C FFF0 0000      		move.l	#$FFF00000,d3
   13562/    CC20 : 600E                		bra.s	loc_CC30
   13563/    CC22 :                     ; ---------------------------------------------------------------------------
   13564/    CC22 :                     
   13565/    CC22 :                     loc_CC22:
   13566/    CC22 : 0C83 0010 0000      		cmpi.l	#$100000,d3
   13567/    CC28 : 6506                		bcs.s	loc_CC30
   13568/    CC2A : 263C 0010 0000      		move.l	#$100000,d3
   13569/    CC30 :                     
   13570/    CC30 :                     loc_CC30:
   13571/    CC30 : 4A84                		tst.l	d4
   13572/    CC32 : 6A10                		bpl.s	loc_CC44
   13573/    CC34 : 0C84 FFF0 0000      		cmpi.l	#$FFF00000,d4
   13574/    CC3A : 6C16                		bge.s	loc_CC52
   13575/    CC3C : 283C FFF0 0000      		move.l	#$FFF00000,d4
   13576/    CC42 : 600E                		bra.s	loc_CC52
   13577/    CC44 :                     ; ---------------------------------------------------------------------------
   13578/    CC44 :                     
   13579/    CC44 :                     loc_CC44:
   13580/    CC44 : 0C84 0010 0000      		cmpi.l	#$100000,d4
   13581/    CC4A : 6506                		bcs.s	loc_CC52
   13582/    CC4C : 283C 0010 0000      		move.l	#$100000,d4
   13583/    CC52 :                     
   13584/    CC52 :                     loc_CC52:
   13585/    CC52 : D7AE 0008           		add.l	d3,8(a6)
   13586/    CC56 : D9AE 000C           		add.l	d4,$C(a6)
   13587/    CC5A : 4E75                		rts
   13588/    CC5C :                     ; End of function sub_CBC0
   13589/    CC5C :                     
   13590/    CC5C :                     
   13591/    CC5C :                     ; =============== S U B	R O U T	I N E =======================================
   13592/    CC5C :                     
   13593/    CC5C :                     
   13594/    CC5C :                     sub_CC5C:
   13595/    CC5C : 3C3C 0288           		move.w	#$288,d6
   13596/    CC60 : 7E1F                		moveq	#$1F,d7
   13597/    CC62 :                     
   13598/    CC62 :                     loc_CC62:
   13599/    CC62 : 700C                		moveq	#$C,d0
   13600/    CC64 : 4EB8 1918           		jsr	(sub_1918).w
   13601/    CC68 : 6B5E                		bmi.s	locret_CCC8
   13602/    CC6A : 317C 0080 0004      		move.w	#$80,4(a0)
   13603/    CC70 : 317C 0028 0006      		move.w	#$28,6(a0)
   13604/    CC76 : 317C 0028 0006      		move.w	#$28,6(a0)
   13605/    CC7C : 317C 00FF 0026      		move.w	#$FF,$26(a0)
   13606/    CC82 : 316E 0008 0008      		move.w	8(a6),8(a0)
   13607/    CC88 : 316E 000C 000C      		move.w	$C(a6),$C(a0)
   13608/    CC8E : 3406                		move.w	d6,d2
   13609/    CC90 : 6B26                		bmi.s	loc_CCB8
   13610/    CC92 : 4EB8 3F14           		jsr	(CalcSine).w
   13611/    CC96 : E04A                		lsr.w	#8,d2
   13612/    CC98 : 48C0                		ext.l	d0
   13613/    CC9A : 48C1                		ext.l	d1
   13614/    CC9C : E580                		asl.l	#2,d0
   13615/    CC9E : E581                		asl.l	#2,d1
   13616/    CCA0 : E5A0                		asl.l	d2,d0
   13617/    CCA2 : E5A1                		asl.l	d2,d1
   13618/    CCA4 : 2600                		move.l	d0,d3
   13619/    CCA6 : 2801                		move.l	d1,d4
   13620/    CCA8 : 0606 0010           		addi.b	#$10,d6
   13621/    CCAC : 640A                		bcc.s	loc_CCB8
   13622/    CCAE : 0446 0080           		subi.w	#$80,d6
   13623/    CCB2 : 6404                		bcc.s	loc_CCB8
   13624/    CCB4 : 3C3C 0288           		move.w	#$288,d6
   13625/    CCB8 :                     
   13626/    CCB8 :                     loc_CCB8:
   13627/    CCB8 : 2144 0018           		move.l	d4,$18(a0)
   13628/    CCBC : 2143 001C           		move.l	d3,$1C(a0)
   13629/    CCC0 : 4484                		neg.l	d4
   13630/    CCC2 : 4446                		neg.w	d6
   13631/    CCC4 : 51CF FF9C           		dbf	d7,loc_CC62
   13632/    CCC8 :                     
   13633/    CCC8 :                     locret_CCC8:
   13634/    CCC8 : 4E75                		rts
   13635/    CCCA :                     ; End of function sub_CC5C
   13636/    CCCA :                     
   13637/    CCCA :                     
   13638/    CCCA :                     ; =============== S U B	R O U T	I N E =======================================
   13639/    CCCA :                     
   13640/    CCCA :                     
   13641/    CCCA :                     sub_CCCA:
   13642/    CCCA :                     							; Field_PauseGame+110p ...
   13643/    CCCA : 3078 D862           		movea.w	($FFFFD862).w,a0
   13644/    CCCE : 3278 D864           		movea.w	($FFFFD864).w,a1
   13645/    CCD2 : 3028 0008           		move.w	8(a0),d0
   13646/    CCD6 : 48C0                		ext.l	d0
   13647/    CCD8 : 3229 0008           		move.w	8(a1),d1
   13648/    CCDC : 48C1                		ext.l	d1
   13649/    CCDE : D081                		add.l	d1,d0
   13650/    CCE0 : E288                		lsr.l	#1,d0
   13651/    CCE2 : 0440 00A0           		subi.w	#$A0,d0
   13652/    CCE6 : 31C0 D830           		move.w	d0,($FFFFD830).w
   13653/    CCEA : 3028 000C           		move.w	$C(a0),d0
   13654/    CCEE : 48C0                		ext.l	d0
   13655/    CCF0 : 3229 000C           		move.w	$C(a1),d1
   13656/    CCF4 : 48C1                		ext.l	d1
   13657/    CCF6 : D081                		add.l	d1,d0
   13658/    CCF8 : E288                		lsr.l	#1,d0
   13659/    CCFA : 0440 0070           		subi.w	#$70,d0
   13660/    CCFE : 31C0 D832           		move.w	d0,($FFFFD832).w
   13661/    CD02 : 45FA 02CC           		lea	loc_CFD0(pc),a2
   13662/    CD06 : 7000                		moveq	#0,d0
   13663/    CD08 : 3140 002E           		move.w	d0,$2E(a0)
   13664/    CD0C : 3340 002E           		move.w	d0,$2E(a1)
   13665/    CD10 : 3228 0008           		move.w	8(a0),d1
   13666/    CD14 : 3428 000C           		move.w	$C(a0),d2
   13667/    CD18 : 3629 0008           		move.w	8(a1),d3
   13668/    CD1C : 3829 000C           		move.w	$C(a1),d4
   13669/    CD20 : 4EB8 41AA           		jsr	(sub_41AA).w
   13670/    CD24 : 1140 002B           		move.b	d0,$2B(a0)
   13671/    CD28 : 0600 0080           		addi.b	#-$80,d0
   13672/    CD2C : 1340 002B           		move.b	d0,$2B(a1)
   13673/    CD30 : 9243                		sub.w	d3,d1
   13674/    CD32 : 9444                		sub.w	d4,d2
   13675/    CD34 : C3C1                		muls.w	d1,d1
   13676/    CD36 : C5C2                		muls.w	d2,d2
   13677/    CD38 : D282                		add.l	d2,d1
   13678/    CD3A : 2001                		move.l	d1,d0
   13679/    CD3C : 4EB8 42A0           		jsr	(word_42A0).w
   13680/    CD40 : 31C0 FAE0           		move.w	d0,($FFFFFAE0).w
   13681/    CD44 : 3600                		move.w	d0,d3
   13682/    CD46 : 9652                		sub.w	(a2),d3
   13683/    CD48 : 6B00 01A8           		bmi.w	loc_CEF2
   13684/    CD4C : B66A 0002           		cmp.w	2(a2),d3
   13685/    CD50 : 652E                		bcs.s	loc_CD80
   13686/    CD52 : 362A 0002           		move.w	2(a2),d3
   13687/    CD56 : 1428 002B           		move.b	$2B(a0),d2
   13688/    CD5A : 0602 0080           		addi.b	#-$80,d2
   13689/    CD5E : 4EB8 3F14           		jsr	(CalcSine).w
   13690/    CD62 : 3412                		move.w	(a2),d2
   13691/    CD64 : D46A 0002           		add.w	2(a2),d2
   13692/    CD68 : C1C2                		muls.w	d2,d0
   13693/    CD6A : C3C2                		muls.w	d2,d1
   13694/    CD6C : E580                		asl.l	#2,d0
   13695/    CD6E : E581                		asl.l	#2,d1
   13696/    CD70 : D0A9 0008           		add.l	8(a1),d0
   13697/    CD74 : D2A9 000C           		add.l	$C(a1),d1
   13698/    CD78 : 2140 0008           		move.l	d0,8(a0)
   13699/    CD7C : 2141 000C           		move.l	d1,$C(a0)
   13700/    CD80 :                     
   13701/    CD80 :                     loc_CD80:
   13702/    CD80 : 0243 00FF           		andi.w	#$FF,d3
   13703/    CD84 : 1632 3004           		move.b	4(a2,d3.w),d3
   13704/    CD88 : 5243                		addq.w	#1,d3
   13705/    CD8A : E74B                		lsl.w	#3,d3
   13706/    CD8C : 1428 002B           		move.b	$2B(a0),d2
   13707/    CD90 : 1838 D89E           		move.b	($FFFFD89E).w,d4
   13708/    CD94 : 0204 000F           		andi.b	#btnDir,d4
   13709/    CD98 : 6600 0098           		bne.w	loc_CE32
   13710/    CD9C : 0828 0000 0025      		btst	#0,$25(a0)
   13711/    CDA2 : 6618                		bne.s	loc_CDBC
   13712/    CDA4 : 4EB8 3F14           		jsr	(CalcSine).w
   13713/    CDA8 : C1C3                		muls.w	d3,d0
   13714/    CDAA : C3C3                		muls.w	d3,d1
   13715/    CDAC : EC80                		asr.l	#6,d0
   13716/    CDAE : EC81                		asr.l	#6,d1
   13717/    CDB0 : D1A8 0018           		add.l	d0,$18(a0)
   13718/    CDB4 : D3A8 001C           		add.l	d1,$1C(a0)
   13719/    CDB8 : 6000 007C           		bra.w	loc_CE36
   13720/    CDBC :                     ; ---------------------------------------------------------------------------
   13721/    CDBC :                     
   13722/    CDBC :                     loc_CDBC:
   13723/    CDBC : 9428 002A           		sub.b	$2A(a0),d2
   13724/    CDC0 : 0C02 00A0           		cmpi.b	#$A0,d2
   13725/    CDC4 : 6500 004E           		bcs.w	loc_CE14
   13726/    CDC8 : 0C02 00E0           		cmpi.b	#$E0,d2
   13727/    CDCC : 6200 0046           		bhi.w	loc_CE14
   13728/    CDD0 : 117C 0008 0007      		move.b	#8,7(a0)
   13729/    CDD6 : 1428 002A           		move.b	$2A(a0),d2
   13730/    CDDA : 0828 0003 0025      		btst	#3,$25(a0)
   13731/    CDE0 : 6704                		beq.s	loc_CDE6
   13732/    CDE2 : 0602 0080           		addi.b	#-$80,d2
   13733/    CDE6 :                     
   13734/    CDE6 :                     loc_CDE6:
   13735/    CDE6 : 4EB8 3F14           		jsr	(CalcSine).w
   13736/    CDEA : 3428 002C           		move.w	$2C(a0),d2
   13737/    CDEE : C1C2                		muls.w	d2,d0
   13738/    CDF0 : C3C2                		muls.w	d2,d1
   13739/    CDF2 : 2800                		move.l	d0,d4
   13740/    CDF4 : 2A01                		move.l	d1,d5
   13741/    CDF6 : 1428 002B           		move.b	$2B(a0),d2
   13742/    CDFA : 4EB8 3F14           		jsr	(CalcSine).w
   13743/    CDFE : C1C3                		muls.w	d3,d0
   13744/    CE00 : C3C3                		muls.w	d3,d1
   13745/    CE02 : D084                		add.l	d4,d0
   13746/    CE04 : D285                		add.l	d5,d1
   13747/    CE06 : EC80                		asr.l	#6,d0
   13748/    CE08 : EC81                		asr.l	#6,d1
   13749/    CE0A : 2140 0018           		move.l	d0,$18(a0)
   13750/    CE0E : 2141 001C           		move.l	d1,$1C(a0)
   13751/    CE12 : 6022                		bra.s	loc_CE36
   13752/    CE14 :                     ; ---------------------------------------------------------------------------
   13753/    CE14 :                     
   13754/    CE14 :                     loc_CE14:
   13755/    CE14 :                     							; sub_CCCA+102j
   13756/    CE14 : 4EB8 3F14           		jsr	(CalcSine).w
   13757/    CE18 : C1C3                		muls.w	d3,d0
   13758/    CE1A : E588                		lsl.l	#2,d0
   13759/    CE1C : 4840                		swap	d0
   13760/    CE1E : 0828 0003 0025      		btst	#3,$25(a0)
   13761/    CE24 : 6706                		beq.s	loc_CE2C
   13762/    CE26 : 9168 002C           		sub.w	d0,$2C(a0)
   13763/    CE2A : 600A                		bra.s	loc_CE36
   13764/    CE2C :                     ; ---------------------------------------------------------------------------
   13765/    CE2C :                     
   13766/    CE2C :                     loc_CE2C:
   13767/    CE2C : D168 002C           		add.w	d0,$2C(a0)
   13768/    CE30 : 6004                		bra.s	loc_CE36
   13769/    CE32 :                     ; ---------------------------------------------------------------------------
   13770/    CE32 :                     
   13771/    CE32 :                     loc_CE32:
   13772/    CE32 : 3143 002E           		move.w	d3,$2E(a0)
   13773/    CE36 :                     
   13774/    CE36 :                     loc_CE36:
   13775/    CE36 :                     							; sub_CCCA+148j ...
   13776/    CE36 : 1429 002B           		move.b	$2B(a1),d2
   13777/    CE3A : 4A38 D8AC           		tst.b	($FFFFD8AC).w
   13778/    CE3E : 6B0E                		bmi.s	loc_CE4E
   13779/    CE40 : 1838 D8AE           		move.b	($FFFFD8AE).w,d4
   13780/    CE44 : 0204 000F           		andi.b	#$F,d4
   13781/    CE48 : 6600 00A4           		bne.w	loc_CEEE
   13782/    CE4C : 600C                		bra.s	loc_CE5A
   13783/    CE4E :                     ; ---------------------------------------------------------------------------
   13784/    CE4E :                     
   13785/    CE4E :                     loc_CE4E:
   13786/    CE4E : 1838 D89E           		move.b	($FFFFD89E).w,d4
   13787/    CE52 : 0204 0070           		andi.b	#btnABC,d4
   13788/    CE56 : 6600 0096           		bne.w	loc_CEEE
   13789/    CE5A :                     
   13790/    CE5A :                     loc_CE5A:
   13791/    CE5A : 0829 0000 0025      		btst	#0,$25(a1)
   13792/    CE60 : 6616                		bne.s	loc_CE78
   13793/    CE62 : 4EB8 3F14           		jsr	(CalcSine).w
   13794/    CE66 : C1C3                		muls.w	d3,d0
   13795/    CE68 : C3C3                		muls.w	d3,d1
   13796/    CE6A : EC80                		asr.l	#6,d0
   13797/    CE6C : EC81                		asr.l	#6,d1
   13798/    CE6E : D1A9 0018           		add.l	d0,$18(a1)
   13799/    CE72 : D3A9 001C           		add.l	d1,$1C(a1)
   13800/    CE76 : 607A                		bra.s	loc_CEF2
   13801/    CE78 :                     ; ---------------------------------------------------------------------------
   13802/    CE78 :                     
   13803/    CE78 :                     loc_CE78:
   13804/    CE78 : 9429 002A           		sub.b	$2A(a1),d2
   13805/    CE7C : 0C02 00A0           		cmpi.b	#$A0,d2
   13806/    CE80 : 6500 004E           		bcs.w	loc_CED0
   13807/    CE84 : 0C02 00E0           		cmpi.b	#$E0,d2
   13808/    CE88 : 6200 0046           		bhi.w	loc_CED0
   13809/    CE8C : 137C 0008 0007      		move.b	#8,7(a1)
   13810/    CE92 : 1429 002A           		move.b	$2A(a1),d2
   13811/    CE96 : 0829 0003 0025      		btst	#3,$25(a1)
   13812/    CE9C : 6704                		beq.s	loc_CEA2
   13813/    CE9E : 0602 0080           		addi.b	#-$80,d2
   13814/    CEA2 :                     
   13815/    CEA2 :                     loc_CEA2:
   13816/    CEA2 : 4EB8 3F14           		jsr	(CalcSine).w
   13817/    CEA6 : 3429 002C           		move.w	$2C(a1),d2
   13818/    CEAA : C1C2                		muls.w	d2,d0
   13819/    CEAC : C3C2                		muls.w	d2,d1
   13820/    CEAE : 2800                		move.l	d0,d4
   13821/    CEB0 : 2A01                		move.l	d1,d5
   13822/    CEB2 : 1429 002B           		move.b	$2B(a1),d2
   13823/    CEB6 : 4EB8 3F14           		jsr	(CalcSine).w
   13824/    CEBA : C1C3                		muls.w	d3,d0
   13825/    CEBC : C3C3                		muls.w	d3,d1
   13826/    CEBE : D084                		add.l	d4,d0
   13827/    CEC0 : D285                		add.l	d5,d1
   13828/    CEC2 : EC80                		asr.l	#6,d0
   13829/    CEC4 : EC81                		asr.l	#6,d1
   13830/    CEC6 : 2340 0018           		move.l	d0,$18(a1)
   13831/    CECA : 2341 001C           		move.l	d1,$1C(a1)
   13832/    CECE : 6022                		bra.s	loc_CEF2
   13833/    CED0 :                     ; ---------------------------------------------------------------------------
   13834/    CED0 :                     
   13835/    CED0 :                     loc_CED0:
   13836/    CED0 :                     							; sub_CCCA+1BEj
   13837/    CED0 : 4EB8 3F14           		jsr	(CalcSine).w
   13838/    CED4 : C1C3                		muls.w	d3,d0
   13839/    CED6 : E588                		lsl.l	#2,d0
   13840/    CED8 : 4840                		swap	d0
   13841/    CEDA : 0829 0003 0025      		btst	#3,$25(a1)
   13842/    CEE0 : 6706                		beq.s	loc_CEE8
   13843/    CEE2 : 9169 002C           		sub.w	d0,$2C(a1)
   13844/    CEE6 : 600A                		bra.s	loc_CEF2
   13845/    CEE8 :                     ; ---------------------------------------------------------------------------
   13846/    CEE8 :                     
   13847/    CEE8 :                     loc_CEE8:
   13848/    CEE8 : D169 002C           		add.w	d0,$2C(a1)
   13849/    CEEC : 6004                		bra.s	loc_CEF2
   13850/    CEEE :                     ; ---------------------------------------------------------------------------
   13851/    CEEE :                     
   13852/    CEEE :                     loc_CEEE:
   13853/    CEEE :                     							; sub_CCCA+18Cj
   13854/    CEEE : 3343 002E           		move.w	d3,$2E(a1)
   13855/    CEF2 :                     
   13856/    CEF2 :                     loc_CEF2:
   13857/    CEF2 :                     							; sub_CCCA+1ACj ...
   13858/    CEF2 : 3078 D854           		movea.w	($FFFFD854).w,a0
   13859/    CEF6 : 3278 D862           		movea.w	($FFFFD862).w,a1
   13860/    CEFA : 3478 D864           		movea.w	($FFFFD864).w,a2
   13861/    CEFE : 222A 0008           		move.l	8(a2),d1
   13862/    CF02 : 2629 0008           		move.l	8(a1),d3
   13863/    CF06 : 9681                		sub.l	d1,d3
   13864/    CF08 : E683                		asr.l	#3,d3
   13865/    CF0A : 242A 000C           		move.l	$C(a2),d2
   13866/    CF0E : 2829 000C           		move.l	$C(a1),d4
   13867/    CF12 : 9882                		sub.l	d2,d4
   13868/    CF14 : E684                		asr.l	#3,d4
   13869/    CF16 : 0838 0000 F001      		btst	#0,($FFFFF001).w
   13870/    CF1C : 670C                		beq.s	loc_CF2A
   13871/    CF1E : 2A03                		move.l	d3,d5
   13872/    CF20 : 2C04                		move.l	d4,d6
   13873/    CF22 : E285                		asr.l	#1,d5
   13874/    CF24 : E286                		asr.l	#1,d6
   13875/    CF26 : D285                		add.l	d5,d1
   13876/    CF28 : D486                		add.l	d6,d2
   13877/    CF2A :                     
   13878/    CF2A :                     loc_CF2A:
   13879/    CF2A : 5468 0024           		addq.w	#2,$24(a0)
   13880/    CF2E : 3A28 0024           		move.w	$24(a0),d5
   13881/    CF32 : 47FA 005C           		lea	loc_CF90(pc),a3
   13882/    CF36 : 0245 001E           		andi.w	#$1E,d5
   13883/    CF3A : 4A73 5000           		tst.w	(a3,d5.w)
   13884/    CF3E : 6A06                		bpl.s	loc_CF46
   13885/    CF40 : 7A00                		moveq	#0,d5
   13886/    CF42 : 3145 0024           		move.w	d5,$24(a0)
   13887/    CF46 :                     
   13888/    CF46 :                     loc_CF46:
   13889/    CF46 : 41F8 D854           		lea	($FFFFD854).w,a0
   13890/    CF4A :                     
   13891/    CF4A :                     loc_CF4A:
   13892/    CF4A : 3010                		move.w	(a0),d0
   13893/    CF4C : 6740                		beq.s	locret_CF8E
   13894/    CF4E : 3040                		movea.w	d0,a0
   13895/    CF50 : 2141 0008           		move.l	d1,8(a0)
   13896/    CF54 : 2142 000C           		move.l	d2,$C(a0)
   13897/    CF58 : D283                		add.l	d3,d1
   13898/    CF5A : D484                		add.l	d4,d2
   13899/    CF5C : 3033 5000           		move.w	(a3,d5.w),d0
   13900/    CF60 : 0838 0000 F001      		btst	#0,($FFFFF001).w
   13901/    CF66 : 660C                		bne.s	loc_CF74
   13902/    CF68 : 4A69 0020           		tst.w	$20(a1)
   13903/    CF6C : 6A10                		bpl.s	loc_CF7E
   13904/    CF6E : 0040 8000           		ori.w	#$8000,d0
   13905/    CF72 : 600A                		bra.s	loc_CF7E
   13906/    CF74 :                     ; ---------------------------------------------------------------------------
   13907/    CF74 :                     
   13908/    CF74 :                     loc_CF74:
   13909/    CF74 : 4A6A 0020           		tst.w	$20(a2)
   13910/    CF78 : 6A04                		bpl.s	loc_CF7E
   13911/    CF7A : 0040 8000           		ori.w	#$8000,d0
   13912/    CF7E :                     
   13913/    CF7E :                     loc_CF7E:
   13914/    CF7E : 3140 0020           		move.w	d0,$20(a0)
   13915/    CF82 : 5445                		addq.w	#2,d5
   13916/    CF84 : 4A73 5000           		tst.w	(a3,d5.w)
   13917/    CF88 : 6AC0                		bpl.s	loc_CF4A
   13918/    CF8A : 7A00                		moveq	#0,d5
   13919/    CF8C : 60BC                		bra.s	loc_CF4A
   13920/    CF8E :                     ; ---------------------------------------------------------------------------
   13921/    CF8E :                     
   13922/    CF8E :                     locret_CF8E:
   13923/    CF8E : 4E75                		rts
   13924/    CF90 :                     ; End of function sub_CCCA
   13925/    CF90 :                     
   13926/    CF90 :                     ; ---------------------------------------------------------------------------
   13927/    CF90 : 05C2                loc_CF90:	dc.w $5C2
   13928/    CF92 : 05C2                		dc.w $5C2
   13929/    CF94 : 05C6                		dc.w $5C6
   13930/    CF96 : 05C6                		dc.w $5C6
   13931/    CF98 : 05CA                		dc.w $5CA
   13932/    CF9A : 05CA                		dc.w $5CA
   13933/    CF9C : 05C6                		dc.w $5C6
   13934/    CF9E : 05C6                		dc.w $5C6
   13935/    CFA0 : 05C2                		dc.w $5C2
   13936/    CFA2 : 05C2                		dc.w $5C2
   13937/    CFA4 : 0000                		dc.w 0
   13938/    CFA6 : 0000                		dc.w 0
   13939/    CFA8 : 0000                		dc.w 0
   13940/    CFAA : 0000                		dc.w 0
   13941/    CFAC : FFFF                		dc.w $FFFF
   13942/    CFAE : FFFF                		dc.w $FFFF
   13943/    CFB0 : 05C2                		dc.w $5C2
   13944/    CFB2 : 05C6                		dc.w $5C6
   13945/    CFB4 : 05CA                		dc.w $5CA
   13946/    CFB6 : 05CE                		dc.w $5CE
   13947/    CFB8 : 05D2                		dc.w $5D2
   13948/    CFBA : 05CE                		dc.w $5CE
   13949/    CFBC : 05CA                		dc.w $5CA
   13950/    CFBE : 05C6                		dc.w $5C6
   13951/    CFC0 : 05C2                		dc.w $5C2
   13952/    CFC2 : 0000                		dc.w 0
   13953/    CFC4 : 0000                		dc.w 0
   13954/    CFC6 : 0000                		dc.w 0
   13955/    CFC8 : 0000                		dc.w 0
   13956/    CFCA : FFFF                		dc.w $FFFF
   13957/    CFCC : FFFF                		dc.w $FFFF
   13958/    CFCE : FFFF                		dc.w $FFFF
   13959/    CFD0 : 00                  loc_CFD0:	dc.b   0
   13960/    CFD1 : 80                  		dc.b $80
   13961/    CFD2 : 00                  		dc.b   0
   13962/    CFD3 : 7F                  		dc.b $7F
   13963/    CFD4 : 00                  		dc.b   0
   13964/    CFD5 : 02                  		dc.b   2
   13965/    CFD6 : 04                  		dc.b   4
   13966/    CFD7 : 06                  		dc.b   6
   13967/    CFD8 : 08                  		dc.b   8
   13968/    CFD9 : 0A                  		dc.b  $A
   13969/    CFDA : 0C                  		dc.b  $C
   13970/    CFDB : 0E                  		dc.b  $E
   13971/    CFDC : 10                  		dc.b $10
   13972/    CFDD : 12                  		dc.b $12
   13973/    CFDE : 14                  		dc.b $14
   13974/    CFDF : 16                  		dc.b $16
   13975/    CFE0 : 18                  		dc.b $18
   13976/    CFE1 : 1A                  		dc.b $1A
   13977/    CFE2 : 1C                  		dc.b $1C
   13978/    CFE3 : 1E                  		dc.b $1E
   13979/    CFE4 : 20                  		dc.b $20
   13980/    CFE5 : 22                  		dc.b $22
   13981/    CFE6 : 24                  		dc.b $24
   13982/    CFE7 : 26                  		dc.b $26
   13983/    CFE8 : 28                  		dc.b $28
   13984/    CFE9 : 2A                  		dc.b $2A
   13985/    CFEA : 2C                  		dc.b $2C
   13986/    CFEB : 2E                  		dc.b $2E
   13987/    CFEC : 30                  		dc.b $30
   13988/    CFED : 32                  		dc.b $32
   13989/    CFEE : 34                  		dc.b $34
   13990/    CFEF : 36                  		dc.b $36
   13991/    CFF0 : 38                  		dc.b $38
   13992/    CFF1 : 3A                  		dc.b $3A
   13993/    CFF2 : 3C                  		dc.b $3C
   13994/    CFF3 : 3E                  		dc.b $3E
   13995/    CFF4 : 40                  		dc.b $40
   13996/    CFF5 : 42                  		dc.b $42
   13997/    CFF6 : 44                  		dc.b $44
   13998/    CFF7 : 46                  		dc.b $46
   13999/    CFF8 : 48                  		dc.b $48
   14000/    CFF9 : 4A                  		dc.b $4A
   14001/    CFFA : 4C                  		dc.b $4C
   14002/    CFFB : 4E                  		dc.b $4E
   14003/    CFFC : 50                  		dc.b $50
   14004/    CFFD : 52                  		dc.b $52
   14005/    CFFE : 54                  		dc.b $54
   14006/    CFFF : 56                  		dc.b $56
   14007/    D000 : 58                  		dc.b $58
   14008/    D001 : 5A                  		dc.b $5A
   14009/    D002 : 5C                  		dc.b $5C
   14010/    D003 : 5E                  		dc.b $5E
   14011/    D004 : 60                  		dc.b $60
   14012/    D005 : 62                  		dc.b $62
   14013/    D006 : 64                  		dc.b $64
   14014/    D007 : 66                  		dc.b $66
   14015/    D008 : 68                  		dc.b $68
   14016/    D009 : 6A                  		dc.b $6A
   14017/    D00A : 6C                  		dc.b $6C
   14018/    D00B : 6E                  		dc.b $6E
   14019/    D00C : 70                  		dc.b $70
   14020/    D00D : 72                  		dc.b $72
   14021/    D00E : 74                  		dc.b $74
   14022/    D00F : 76                  		dc.b $76
   14023/    D010 : 78                  		dc.b $78
   14024/    D011 : 7A                  		dc.b $7A
   14025/    D012 : 7C                  		dc.b $7C
   14026/    D013 : 7E                  		dc.b $7E
   14027/    D014 : 80                  		dc.b $80
   14028/    D015 : 82                  		dc.b $82
   14029/    D016 : 84                  		dc.b $84
   14030/    D017 : 86                  		dc.b $86
   14031/    D018 : 88                  		dc.b $88
   14032/    D019 : 8A                  		dc.b $8A
   14033/    D01A : 8C                  		dc.b $8C
   14034/    D01B : 8E                  		dc.b $8E
   14035/    D01C : 90                  		dc.b $90
   14036/    D01D : 92                  		dc.b $92
   14037/    D01E : 94                  		dc.b $94
   14038/    D01F : 96                  		dc.b $96
   14039/    D020 : 98                  		dc.b $98
   14040/    D021 : 9A                  		dc.b $9A
   14041/    D022 : 9C                  		dc.b $9C
   14042/    D023 : 9E                  		dc.b $9E
   14043/    D024 : A0                  		dc.b $A0
   14044/    D025 : A2                  		dc.b $A2
   14045/    D026 : A4                  		dc.b $A4
   14046/    D027 : A6                  		dc.b $A6
   14047/    D028 : A8                  		dc.b $A8
   14048/    D029 : AA                  		dc.b $AA
   14049/    D02A : AC                  		dc.b $AC
   14050/    D02B : AE                  		dc.b $AE
   14051/    D02C : B0                  		dc.b $B0
   14052/    D02D : B2                  		dc.b $B2
   14053/    D02E : B4                  		dc.b $B4
   14054/    D02F : B6                  		dc.b $B6
   14055/    D030 : B8                  		dc.b $B8
   14056/    D031 : BA                  		dc.b $BA
   14057/    D032 : BC                  		dc.b $BC
   14058/    D033 : BE                  		dc.b $BE
   14059/    D034 : C0                  		dc.b $C0
   14060/    D035 : C2                  		dc.b $C2
   14061/    D036 : C4                  		dc.b $C4
   14062/    D037 : C6                  		dc.b $C6
   14063/    D038 : C8                  		dc.b $C8
   14064/    D039 : CA                  		dc.b $CA
   14065/    D03A : CC                  		dc.b $CC
   14066/    D03B : CE                  		dc.b $CE
   14067/    D03C : D0                  		dc.b $D0
   14068/    D03D : D2                  		dc.b $D2
   14069/    D03E : D4                  		dc.b $D4
   14070/    D03F : D6                  		dc.b $D6
   14071/    D040 : D8                  		dc.b $D8
   14072/    D041 : DA                  		dc.b $DA
   14073/    D042 : DC                  		dc.b $DC
   14074/    D043 : DE                  		dc.b $DE
   14075/    D044 : E0                  		dc.b $E0
   14076/    D045 : E2                  		dc.b $E2
   14077/    D046 : E4                  		dc.b $E4
   14078/    D047 : E6                  		dc.b $E6
   14079/    D048 : E8                  		dc.b $E8
   14080/    D049 : EA                  		dc.b $EA
   14081/    D04A : EC                  		dc.b $EC
   14082/    D04B : EE                  		dc.b $EE
   14083/    D04C : F0                  		dc.b $F0
   14084/    D04D : F2                  		dc.b $F2
   14085/    D04E : F4                  		dc.b $F4
   14086/    D04F : F6                  		dc.b $F6
   14087/    D050 : F8                  		dc.b $F8
   14088/    D051 : FA                  		dc.b $FA
   14089/    D052 : FC                  		dc.b $FC
   14090/    D053 : FE                  		dc.b $FE
   14091/    D054 : 00                  		dc.b   0
   14092/    D055 : 80                  		dc.b $80
   14093/    D056 : 00                  		dc.b   0
   14094/    D057 : 7F                  		dc.b $7F
   14095/    D058 : 00                  		dc.b   0
   14096/    D059 : 02                  		dc.b   2
   14097/    D05A : 04                  		dc.b   4
   14098/    D05B : 06                  		dc.b   6
   14099/    D05C : 08                  		dc.b   8
   14100/    D05D : 0A                  		dc.b  $A
   14101/    D05E : 0C                  		dc.b  $C
   14102/    D05F : 0E                  		dc.b  $E
   14103/    D060 : 10                  		dc.b $10
   14104/    D061 : 12                  		dc.b $12
   14105/    D062 : 14                  		dc.b $14
   14106/    D063 : 16                  		dc.b $16
   14107/    D064 : 18                  		dc.b $18
   14108/    D065 : 1A                  		dc.b $1A
   14109/    D066 : 1C                  		dc.b $1C
   14110/    D067 : 1E                  		dc.b $1E
   14111/    D068 : 20                  		dc.b $20
   14112/    D069 : 22                  		dc.b $22
   14113/    D06A : 24                  		dc.b $24
   14114/    D06B : 26                  		dc.b $26
   14115/    D06C : 28                  		dc.b $28
   14116/    D06D : 2A                  		dc.b $2A
   14117/    D06E : 2C                  		dc.b $2C
   14118/    D06F : 2E                  		dc.b $2E
   14119/    D070 : 30                  		dc.b $30
   14120/    D071 : 32                  		dc.b $32
   14121/    D072 : 34                  		dc.b $34
   14122/    D073 : 36                  		dc.b $36
   14123/    D074 : 38                  		dc.b $38
   14124/    D075 : 3A                  		dc.b $3A
   14125/    D076 : 3C                  		dc.b $3C
   14126/    D077 : 3E                  		dc.b $3E
   14127/    D078 : 40                  		dc.b $40
   14128/    D079 : 42                  		dc.b $42
   14129/    D07A : 44                  		dc.b $44
   14130/    D07B : 46                  		dc.b $46
   14131/    D07C : 48                  		dc.b $48
   14132/    D07D : 4A                  		dc.b $4A
   14133/    D07E : 4C                  		dc.b $4C
   14134/    D07F : 4E                  		dc.b $4E
   14135/    D080 : 50                  		dc.b $50
   14136/    D081 : 52                  		dc.b $52
   14137/    D082 : 54                  		dc.b $54
   14138/    D083 : 56                  		dc.b $56
   14139/    D084 : 58                  		dc.b $58
   14140/    D085 : 5A                  		dc.b $5A
   14141/    D086 : 5C                  		dc.b $5C
   14142/    D087 : 5E                  		dc.b $5E
   14143/    D088 : 60                  		dc.b $60
   14144/    D089 : 62                  		dc.b $62
   14145/    D08A : 64                  		dc.b $64
   14146/    D08B : 66                  		dc.b $66
   14147/    D08C : 68                  		dc.b $68
   14148/    D08D : 6A                  		dc.b $6A
   14149/    D08E : 6C                  		dc.b $6C
   14150/    D08F : 6E                  		dc.b $6E
   14151/    D090 : 70                  		dc.b $70
   14152/    D091 : 72                  		dc.b $72
   14153/    D092 : 74                  		dc.b $74
   14154/    D093 : 76                  		dc.b $76
   14155/    D094 : 78                  		dc.b $78
   14156/    D095 : 7A                  		dc.b $7A
   14157/    D096 : 7C                  		dc.b $7C
   14158/    D097 : 7E                  		dc.b $7E
   14159/    D098 : 80                  		dc.b $80
   14160/    D099 : 82                  		dc.b $82
   14161/    D09A : 84                  		dc.b $84
   14162/    D09B : 86                  		dc.b $86
   14163/    D09C : 88                  		dc.b $88
   14164/    D09D : 8A                  		dc.b $8A
   14165/    D09E : 8C                  		dc.b $8C
   14166/    D09F : 8E                  		dc.b $8E
   14167/    D0A0 : 90                  		dc.b $90
   14168/    D0A1 : 92                  		dc.b $92
   14169/    D0A2 : 94                  		dc.b $94
   14170/    D0A3 : 96                  		dc.b $96
   14171/    D0A4 : 98                  		dc.b $98
   14172/    D0A5 : 9A                  		dc.b $9A
   14173/    D0A6 : 9C                  		dc.b $9C
   14174/    D0A7 : 9E                  		dc.b $9E
   14175/    D0A8 : A0                  		dc.b $A0
   14176/    D0A9 : A2                  		dc.b $A2
   14177/    D0AA : A4                  		dc.b $A4
   14178/    D0AB : A6                  		dc.b $A6
   14179/    D0AC : A8                  		dc.b $A8
   14180/    D0AD : AA                  		dc.b $AA
   14181/    D0AE : AC                  		dc.b $AC
   14182/    D0AF : AE                  		dc.b $AE
   14183/    D0B0 : B0                  		dc.b $B0
   14184/    D0B1 : B2                  		dc.b $B2
   14185/    D0B2 : B4                  		dc.b $B4
   14186/    D0B3 : B6                  		dc.b $B6
   14187/    D0B4 : B8                  		dc.b $B8
   14188/    D0B5 : BA                  		dc.b $BA
   14189/    D0B6 : BC                  		dc.b $BC
   14190/    D0B7 : BE                  		dc.b $BE
   14191/    D0B8 : C0                  		dc.b $C0
   14192/    D0B9 : C2                  		dc.b $C2
   14193/    D0BA : C4                  		dc.b $C4
   14194/    D0BB : C6                  		dc.b $C6
   14195/    D0BC : C8                  		dc.b $C8
   14196/    D0BD : CA                  		dc.b $CA
   14197/    D0BE : CC                  		dc.b $CC
   14198/    D0BF : CE                  		dc.b $CE
   14199/    D0C0 : D0                  		dc.b $D0
   14200/    D0C1 : D2                  		dc.b $D2
   14201/    D0C2 : D4                  		dc.b $D4
   14202/    D0C3 : D6                  		dc.b $D6
   14203/    D0C4 : D8                  		dc.b $D8
   14204/    D0C5 : DA                  		dc.b $DA
   14205/    D0C6 : DC                  		dc.b $DC
   14206/    D0C7 : DE                  		dc.b $DE
   14207/    D0C8 : E0                  		dc.b $E0
   14208/    D0C9 : E2                  		dc.b $E2
   14209/    D0CA : E4                  		dc.b $E4
   14210/    D0CB : E6                  		dc.b $E6
   14211/    D0CC : E8                  		dc.b $E8
   14212/    D0CD : EA                  		dc.b $EA
   14213/    D0CE : EC                  		dc.b $EC
   14214/    D0CF : EE                  		dc.b $EE
   14215/    D0D0 : F0                  		dc.b $F0
   14216/    D0D1 : F2                  		dc.b $F2
   14217/    D0D2 : F4                  		dc.b $F4
   14218/    D0D3 : F6                  		dc.b $F6
   14219/    D0D4 : F8                  		dc.b $F8
   14220/    D0D5 : FA                  		dc.b $FA
   14221/    D0D6 : FC                  		dc.b $FC
   14222/    D0D7 : FE                  		dc.b $FE
   14223/    D0D8 : 00                  		dc.b   0
   14224/    D0D9 : 80                  		dc.b $80
   14225/    D0DA : 00                  		dc.b   0
   14226/    D0DB : 7F                  		dc.b $7F
   14227/    D0DC : 00                  		dc.b   0
   14228/    D0DD : 02                  		dc.b   2
   14229/    D0DE : 04                  		dc.b   4
   14230/    D0DF : 06                  		dc.b   6
   14231/    D0E0 : 08                  		dc.b   8
   14232/    D0E1 : 0A                  		dc.b  $A
   14233/    D0E2 : 0C                  		dc.b  $C
   14234/    D0E3 : 0E                  		dc.b  $E
   14235/    D0E4 : 10                  		dc.b $10
   14236/    D0E5 : 12                  		dc.b $12
   14237/    D0E6 : 14                  		dc.b $14
   14238/    D0E7 : 16                  		dc.b $16
   14239/    D0E8 : 18                  		dc.b $18
   14240/    D0E9 : 1A                  		dc.b $1A
   14241/    D0EA : 1C                  		dc.b $1C
   14242/    D0EB : 1E                  		dc.b $1E
   14243/    D0EC : 20                  		dc.b $20
   14244/    D0ED : 22                  		dc.b $22
   14245/    D0EE : 24                  		dc.b $24
   14246/    D0EF : 26                  		dc.b $26
   14247/    D0F0 : 28                  		dc.b $28
   14248/    D0F1 : 2A                  		dc.b $2A
   14249/    D0F2 : 2C                  		dc.b $2C
   14250/    D0F3 : 2E                  		dc.b $2E
   14251/    D0F4 : 30                  		dc.b $30
   14252/    D0F5 : 32                  		dc.b $32
   14253/    D0F6 : 34                  		dc.b $34
   14254/    D0F7 : 36                  		dc.b $36
   14255/    D0F8 : 38                  		dc.b $38
   14256/    D0F9 : 3A                  		dc.b $3A
   14257/    D0FA : 3C                  		dc.b $3C
   14258/    D0FB : 3E                  		dc.b $3E
   14259/    D0FC : 40                  		dc.b $40
   14260/    D0FD : 42                  		dc.b $42
   14261/    D0FE : 44                  		dc.b $44
   14262/    D0FF : 46                  		dc.b $46
   14263/    D100 : 48                  		dc.b $48
   14264/    D101 : 4A                  		dc.b $4A
   14265/    D102 : 4C                  		dc.b $4C
   14266/    D103 : 4E                  		dc.b $4E
   14267/    D104 : 50                  		dc.b $50
   14268/    D105 : 52                  		dc.b $52
   14269/    D106 : 54                  		dc.b $54
   14270/    D107 : 56                  		dc.b $56
   14271/    D108 : 58                  		dc.b $58
   14272/    D109 : 5A                  		dc.b $5A
   14273/    D10A : 5C                  		dc.b $5C
   14274/    D10B : 5E                  		dc.b $5E
   14275/    D10C : 60                  		dc.b $60
   14276/    D10D : 62                  		dc.b $62
   14277/    D10E : 64                  		dc.b $64
   14278/    D10F : 66                  		dc.b $66
   14279/    D110 : 68                  		dc.b $68
   14280/    D111 : 6A                  		dc.b $6A
   14281/    D112 : 6C                  		dc.b $6C
   14282/    D113 : 6E                  		dc.b $6E
   14283/    D114 : 70                  		dc.b $70
   14284/    D115 : 72                  		dc.b $72
   14285/    D116 : 74                  		dc.b $74
   14286/    D117 : 76                  		dc.b $76
   14287/    D118 : 78                  		dc.b $78
   14288/    D119 : 7A                  		dc.b $7A
   14289/    D11A : 7C                  		dc.b $7C
   14290/    D11B : 7E                  		dc.b $7E
   14291/    D11C : 80                  		dc.b $80
   14292/    D11D : 82                  		dc.b $82
   14293/    D11E : 84                  		dc.b $84
   14294/    D11F : 86                  		dc.b $86
   14295/    D120 : 88                  		dc.b $88
   14296/    D121 : 8A                  		dc.b $8A
   14297/    D122 : 8C                  		dc.b $8C
   14298/    D123 : 8E                  		dc.b $8E
   14299/    D124 : 90                  		dc.b $90
   14300/    D125 : 92                  		dc.b $92
   14301/    D126 : 94                  		dc.b $94
   14302/    D127 : 96                  		dc.b $96
   14303/    D128 : 98                  		dc.b $98
   14304/    D129 : 9A                  		dc.b $9A
   14305/    D12A : 9C                  		dc.b $9C
   14306/    D12B : 9E                  		dc.b $9E
   14307/    D12C : A0                  		dc.b $A0
   14308/    D12D : A2                  		dc.b $A2
   14309/    D12E : A4                  		dc.b $A4
   14310/    D12F : A6                  		dc.b $A6
   14311/    D130 : A8                  		dc.b $A8
   14312/    D131 : AA                  		dc.b $AA
   14313/    D132 : AC                  		dc.b $AC
   14314/    D133 : AE                  		dc.b $AE
   14315/    D134 : B0                  		dc.b $B0
   14316/    D135 : B2                  		dc.b $B2
   14317/    D136 : B4                  		dc.b $B4
   14318/    D137 : B6                  		dc.b $B6
   14319/    D138 : B8                  		dc.b $B8
   14320/    D139 : BA                  		dc.b $BA
   14321/    D13A : BC                  		dc.b $BC
   14322/    D13B : BE                  		dc.b $BE
   14323/    D13C : C0                  		dc.b $C0
   14324/    D13D : C2                  		dc.b $C2
   14325/    D13E : C4                  		dc.b $C4
   14326/    D13F : C6                  		dc.b $C6
   14327/    D140 : C8                  		dc.b $C8
   14328/    D141 : CA                  		dc.b $CA
   14329/    D142 : CC                  		dc.b $CC
   14330/    D143 : CE                  		dc.b $CE
   14331/    D144 : D0                  		dc.b $D0
   14332/    D145 : D2                  		dc.b $D2
   14333/    D146 : D4                  		dc.b $D4
   14334/    D147 : D6                  		dc.b $D6
   14335/    D148 : D8                  		dc.b $D8
   14336/    D149 : DA                  		dc.b $DA
   14337/    D14A : DC                  		dc.b $DC
   14338/    D14B : DE                  		dc.b $DE
   14339/    D14C : E0                  		dc.b $E0
   14340/    D14D : E2                  		dc.b $E2
   14341/    D14E : E4                  		dc.b $E4
   14342/    D14F : E6                  		dc.b $E6
   14343/    D150 : E8                  		dc.b $E8
   14344/    D151 : EA                  		dc.b $EA
   14345/    D152 : EC                  		dc.b $EC
   14346/    D153 : EE                  		dc.b $EE
   14347/    D154 : F0                  		dc.b $F0
   14348/    D155 : F2                  		dc.b $F2
   14349/    D156 : F4                  		dc.b $F4
   14350/    D157 : F6                  		dc.b $F6
   14351/    D158 : F8                  		dc.b $F8
   14352/    D159 : FA                  		dc.b $FA
   14353/    D15A : FC                  		dc.b $FC
   14354/    D15B : FE                  		dc.b $FE
   14355/    D15C : 00                  		dc.b   0
   14356/    D15D : 80                  		dc.b $80
   14357/    D15E : 00                  		dc.b   0
   14358/    D15F : 7F                  		dc.b $7F
   14359/    D160 : 00                  		dc.b   0
   14360/    D161 : 02                  		dc.b   2
   14361/    D162 : 04                  		dc.b   4
   14362/    D163 : 06                  		dc.b   6
   14363/    D164 : 08                  unk_D164:	dc.b   8
   14364/    D165 : 0A                  		dc.b  $A
   14365/    D166 : 0C                  		dc.b  $C
   14366/    D167 : 0E                  		dc.b  $E
   14367/    D168 : 10                  		dc.b $10
   14368/    D169 : 12                  		dc.b $12
   14369/    D16A : 14                  		dc.b $14
   14370/    D16B : 16                  		dc.b $16
   14371/    D16C : 18                  		dc.b $18
   14372/    D16D : 1A                  		dc.b $1A
   14373/    D16E : 1C                  		dc.b $1C
   14374/    D16F : 1E                  		dc.b $1E
   14375/    D170 : 20                  		dc.b $20
   14376/    D171 : 22                  		dc.b $22
   14377/    D172 : 24                  		dc.b $24
   14378/    D173 : 26                  		dc.b $26
   14379/    D174 : 28                  		dc.b $28
   14380/    D175 : 2A                  		dc.b $2A
   14381/    D176 : 2C                  		dc.b $2C
   14382/    D177 : 2E                  		dc.b $2E
   14383/    D178 : 30                  		dc.b $30
   14384/    D179 : 32                  		dc.b $32
   14385/    D17A : 34                  		dc.b $34
   14386/    D17B : 36                  		dc.b $36
   14387/    D17C : 38                  		dc.b $38
   14388/    D17D : 3A                  		dc.b $3A
   14389/    D17E : 3C                  		dc.b $3C
   14390/    D17F : 3E                  		dc.b $3E
   14391/    D180 : 40                  		dc.b $40
   14392/    D181 : 42                  		dc.b $42
   14393/    D182 : 44                  		dc.b $44
   14394/    D183 : 46                  		dc.b $46
   14395/    D184 : 48                  unk_D184:	dc.b $48
   14396/    D185 : 4A                  		dc.b $4A
   14397/    D186 : 4C                  		dc.b $4C
   14398/    D187 : 4E                  		dc.b $4E
   14399/    D188 : 50                  		dc.b $50
   14400/    D189 : 52                  		dc.b $52
   14401/    D18A : 54                  		dc.b $54
   14402/    D18B : 56                  		dc.b $56
   14403/    D18C : 58                  		dc.b $58
   14404/    D18D : 5A                  		dc.b $5A
   14405/    D18E : 5C                  		dc.b $5C
   14406/    D18F : 5E                  		dc.b $5E
   14407/    D190 : 60                  		dc.b $60
   14408/    D191 : 62                  		dc.b $62
   14409/    D192 : 64                  		dc.b $64
   14410/    D193 : 66                  		dc.b $66
   14411/    D194 : 68                  		dc.b $68
   14412/    D195 : 6A                  		dc.b $6A
   14413/    D196 : 6C                  		dc.b $6C
   14414/    D197 : 6E                  		dc.b $6E
   14415/    D198 : 70                  		dc.b $70
   14416/    D199 : 72                  		dc.b $72
   14417/    D19A : 74                  		dc.b $74
   14418/    D19B : 76                  		dc.b $76
   14419/    D19C : 78                  		dc.b $78
   14420/    D19D : 7A                  		dc.b $7A
   14421/    D19E : 7C                  		dc.b $7C
   14422/    D19F : 7E                  		dc.b $7E
   14423/    D1A0 : 80                  		dc.b $80
   14424/    D1A1 : 82                  		dc.b $82
   14425/    D1A2 : 84                  		dc.b $84
   14426/    D1A3 : 86                  		dc.b $86
   14427/    D1A4 : 88                  		dc.b $88
   14428/    D1A5 : 8A                  		dc.b $8A
   14429/    D1A6 : 8C                  		dc.b $8C
   14430/    D1A7 : 8E                  		dc.b $8E
   14431/    D1A8 : 90                  		dc.b $90
   14432/    D1A9 : 92                  		dc.b $92
   14433/    D1AA : 94                  		dc.b $94
   14434/    D1AB : 96                  		dc.b $96
   14435/    D1AC : 98                  		dc.b $98
   14436/    D1AD : 9A                  		dc.b $9A
   14437/    D1AE : 9C                  		dc.b $9C
   14438/    D1AF : 9E                  		dc.b $9E
   14439/    D1B0 : A0                  		dc.b $A0
   14440/    D1B1 : A2                  		dc.b $A2
   14441/    D1B2 : A4                  		dc.b $A4
   14442/    D1B3 : A6                  		dc.b $A6
   14443/    D1B4 : A8                  		dc.b $A8
   14444/    D1B5 : AA                  		dc.b $AA
   14445/    D1B6 : AC                  		dc.b $AC
   14446/    D1B7 : AE                  		dc.b $AE
   14447/    D1B8 : B0                  		dc.b $B0
   14448/    D1B9 : B2                  		dc.b $B2
   14449/    D1BA : B4                  		dc.b $B4
   14450/    D1BB : B6                  		dc.b $B6
   14451/    D1BC : B8                  		dc.b $B8
   14452/    D1BD : BA                  		dc.b $BA
   14453/    D1BE : BC                  		dc.b $BC
   14454/    D1BF : BE                  		dc.b $BE
   14455/    D1C0 : C0                  		dc.b $C0
   14456/    D1C1 : C2                  		dc.b $C2
   14457/    D1C2 : C4                  		dc.b $C4
   14458/    D1C3 : C6                  		dc.b $C6
   14459/    D1C4 : C8                  		dc.b $C8
   14460/    D1C5 : CA                  		dc.b $CA
   14461/    D1C6 : CC                  		dc.b $CC
   14462/    D1C7 : CE                  		dc.b $CE
   14463/    D1C8 : D0                  		dc.b $D0
   14464/    D1C9 : D2                  		dc.b $D2
   14465/    D1CA : D4                  		dc.b $D4
   14466/    D1CB : D6                  		dc.b $D6
   14467/    D1CC : D8                  		dc.b $D8
   14468/    D1CD : DA                  		dc.b $DA
   14469/    D1CE : DC                  		dc.b $DC
   14470/    D1CF : DE                  		dc.b $DE
   14471/    D1D0 : E0                  		dc.b $E0
   14472/    D1D1 : E2                  		dc.b $E2
   14473/    D1D2 : E4                  		dc.b $E4
   14474/    D1D3 : E6                  		dc.b $E6
   14475/    D1D4 : E8                  		dc.b $E8
   14476/    D1D5 : EA                  		dc.b $EA
   14477/    D1D6 : EC                  		dc.b $EC
   14478/    D1D7 : EE                  		dc.b $EE
   14479/    D1D8 : F0                  		dc.b $F0
   14480/    D1D9 : F2                  		dc.b $F2
   14481/    D1DA : F4                  		dc.b $F4
   14482/    D1DB : F6                  		dc.b $F6
   14483/    D1DC : F8                  		dc.b $F8
   14484/    D1DD : FA                  		dc.b $FA
   14485/    D1DE : FC                  		dc.b $FC
   14486/    D1DF : FE                  		dc.b $FE
   14487/    D1E0 :                     
   14488/    D1E0 :                     ; =============== S U B	R O U T	I N E =======================================
   14489/    D1E0 :                     ; star tether
   14490/    D1E0 :                     
   14491/    D1E0 :                     sub_D1E0:
   14492/    D1E0 : 7E07                		moveq	#7,d7
   14493/    D1E2 :                     
   14494/    D1E2 :                     loc_D1E2:
   14495/    D1E2 : 7008                		moveq	#8,d0
   14496/    D1E4 : 4EB8 1918           		jsr	(sub_1918).w
   14497/    D1E8 : 6B18                		bmi.s	locret_D202
   14498/    D1EA : 317C 0080 0004      		move.w	#$80,4(a0)
   14499/    D1F0 : 317C 0800 0006      		move.w	#$800,6(a0)
   14500/    D1F6 : 217C 0000 D204      		move.l	#TethCodingValue,$10(a0)
             D1FC : 0010             
   14501/    D1FE : 51CF FFE2           		dbf	d7,loc_D1E2
   14502/    D202 :                     
   14503/    D202 :                     locret_D202:
   14504/    D202 : 4E75                		rts
   14505/    D204 :                     ; End of function sub_D1E0
   14506/    D204 :                     
   14507/    D204 :                     ; ---------------------------------------------------------------------------
   14508/    D204 :                     ; this is the data that sets correct position and art for the tether stars
   14509/    D204 :                     
   14510/    D204 :                     TethCodingValue:
   14511/    D204 : 00FC                		dc.w $00FC
   14512/    D206 : 0000                		dc.w $0000
   14513/    D208 : FCFF                		dc.w $FCFF
   14514/    D20A :                     
   14515/    D20A :                     ; =============== S U B	R O U T	I N E =======================================
   14516/    D20A :                     
   14517/    D20A :                     
   14518/    D20A :                     sub_D20A:
   14519/    D20A : 4DF8 D858           		lea	($FFFFD858).w,a6
   14520/    D20E :                     
   14521/    D20E :                     loc_D20E:
   14522/    D20E : (MACRO)              		_move.w	0(a6),d0
   14522/    D20E :  (MACRO-2)                           insn2op move.w, 0(a6),d0
   14522/    D20E : =>FALSE                        if (chkop("0(a6)","0("))
   14522/    D20E :                                       if (chkop("d0","0("))
   14522/    D20E :                                             !move.w   0(a6),d0
   14522/    D20E :                                       else
   14522/    D20E :                                             !move.w   0(a6),1+d0
   14522/    D20E :                                             !org    *-1
   14522/    D20E :                                             !dc.b   0
   14522/    D20E : [14522]                                endif
   14522/    D20E : =>TRUE                         else
   14522/    D20E : =>FALSE                              if chkop("d0","d")
   14522/    D20E :                                       if (chkop("d0","0("))
   14522/    D20E :                     start:
   14522/    D20E :                                             !move.w   1+0(a6),d0
   14522/    D20E :                     end:
   14522/    D20E :                                             !org    start+3
   14522/    D20E :                                             !dc.b   0
   14522/    D20E :                                             !org    end
   14522/    D20E :                                       else
   14522/    D20E :                                             !move.w   1+0(a6),1+d0
   14522/    D20E :                                             !org    *-3
   14522/    D20E :                                             !dc.b   0
   14522/    D20E :                                             !org    *+1
   14522/    D20E :                                             !dc.b   0
   14522/    D20E : [14522]                                endif
   14522/    D20E : =>TRUE                               else
   14522/    D20E : 302E 0001                                   !move.w   1+0(a6),d0
   14522/    D211 :                                             !org    *-1
   14522/    D211 : 00                                          !dc.b   0
   14522/    D212 : [14522]                              endif
   14522/    D212 : [14522]                        endif
   14523/    D212 : 6602                		bne.s	loc_D216
   14524/    D214 : 4E75                		rts
   14525/    D216 :                     ; ---------------------------------------------------------------------------
   14526/    D216 :                     
   14527/    D216 :                     loc_D216:
   14528/    D216 : 3C40                		movea.w	d0,a6
   14529/    D218 : 7000                		moveq	#0,d0
   14530/    D21A : 302E 0006           		move.w	6(a6),d0
   14531/    D21E : 4EBB 0004           		jsr	Obj_Index(pc,d0.w)
   14532/    D222 : 60EA                		bra.s	loc_D20E
   14533/    D224 :                     ; End of function sub_D20A
   14534/    D224 :                     
   14535/    D224 :                     ; ---------------------------------------------------------------------------
   14536/    D224 :                     
   14537/    D224 :                     Obj_Index:
   14538/    D224 : 6000 0082           		bra.w	loc_D2A8
   14539/    D228 : 6000 016A           		bra.w	loc_D394
   14540/    D22C : 6000 0256           		bra.w	loc_D484
   14541/    D230 : 6000 0342           		bra.w	loc_D574
   14542/    D234 : 6000 1976           		bra.w	locret_EBAC
   14543/    D238 : 6000 0426           		bra.w	loc_D660
   14544/    D23C : 6000 0532           		bra.w	loc_D770
   14545/    D240 : 6000 0642           		bra.w	loc_D884
   14546/    D244 : 6000 074A           		bra.w	loc_D990
   14547/    D248 : 6000 1072           		bra.w	locret_E2BC
   14548/    D24C : 6000 1070           		bra.w	loc_E2BE
   14549/    D250 : 6000 1100           		bra.w	locret_E352
   14550/    D254 : 6000 10FE           		bra.w	locret_E354
   14551/    D258 : 6000 0846           		bra.w	loc_DAA0
   14552/    D25C : 6000 092E           		bra.w	loc_DB8C
   14553/    D260 : 6000 0A1A           		bra.w	loc_DC7C
   14554/    D264 : 6000 0B06           		bra.w	loc_DD6C
   14555/    D268 : 6000 0BEE           		bra.w	loc_DE58
   14556/    D26C : 6000 0CFA           		bra.w	loc_DF68
   14557/    D270 : 6000 0E0A           		bra.w	loc_E07C
   14558/    D274 : 6000 0F12           		bra.w	loc_E188
   14559/    D278 : 6000 1284           		bra.w	loc_E4FE
   14560/    D27C : 6000 1328           		bra.w	loc_E5A6
   14561/    D280 : 6000 13CC           		bra.w	loc_E64E
   14562/    D284 : 6000 1470           		bra.w	loc_E6F6
   14563/    D288 : 6000 1514           		bra.w	loc_E79E
   14564/    D28C : 6000 15B8           		bra.w	loc_E846
   14565/    D290 : 6000 165C           		bra.w	loc_E8EE
   14566/    D294 : 6000 1700           		bra.w	loc_E996
   14567/    D298 : 6000 10BC           		bra.w	loc_E356
   14568/    D29C : 6000 11BC           		bra.w	loc_E45A
   14569/    D2A0 : 6000 1258           		bra.w	locret_E4FA
   14570/    D2A4 : 6000 1256           		bra.w	locret_E4FC
   14571/    D2A8 :                     ; ---------------------------------------------------------------------------
   14572/    D2A8 :                     
   14573/    D2A8 :                     loc_D2A8:
   14574/    D2A8 : 7007                		moveq	#7,d0
   14575/    D2AA : 01AE 0028           		bclr	d0,$28(a6)
   14576/    D2AE : 6726                		beq.s	loc_D2D6
   14577/    D2B0 : 2D7C 0004 22BC      		move.l	#Map_SpringLR,obMap(a6)
             D2B6 : 0010             
   14578/    D2B8 : 3D7C 0407 0020      		move.w	#$407,$20(a6)
   14579/    D2BE : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   14580/    D2C4 : 1D7C 0008 0022      		move.b	#8,$22(a6)
   14581/    D2CA : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   14582/    D2D0 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   14583/    D2D6 :                     
   14584/    D2D6 :                     loc_D2D6:
   14585/    D2D6 : 3078 D862           		movea.w	($FFFFD862).w,a0
   14586/    D2DA : 303C 000F           		move.w	#$F,d0
   14587/    D2DE : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14588/    D2E4 : 6736                		beq.s	loc_D31C
   14589/    D2E6 : 302E 0008           		move.w	8(a6),d0
   14590/    D2EA : 322E 000C           		move.w	$C(a6),d1
   14591/    D2EE : 3428 0008           		move.w	8(a0),d2
   14592/    D2F2 : 3628 000C           		move.w	$C(a0),d3
   14593/    D2F6 : 6100 1894           		bsr.w	sub_EB8C
   14594/    D2FA : 0C44 0000           		cmpi.w	#0,d4
   14595/    D2FE : 6708                		beq.s	loc_D308
   14596/    D300 : 0C44 0002           		cmpi.w	#2,d4
   14597/    D304 : 6702                		beq.s	loc_D308
   14598/    D306 : 6014                		bra.s	loc_D31C
   14599/    D308 :                     ; ---------------------------------------------------------------------------
   14600/    D308 :                     
   14601/    D308 :                     loc_D308:
   14602/    D308 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14603/    D30E : 203C 000F 0000      		move.l	#$F0000,d0
   14604/    D314 : 7200                		moveq	#0,d1
   14605/    D316 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14606/    D31C :                     
   14607/    D31C :                     loc_D31C:
   14608/    D31C : 3078 D864           		movea.w	($FFFFD864).w,a0
   14609/    D320 : 303C 000F           		move.w	#$F,d0
   14610/    D324 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14611/    D32A : 6736                		beq.s	loc_D362
   14612/    D32C : 302E 0008           		move.w	8(a6),d0
   14613/    D330 : 322E 000C           		move.w	$C(a6),d1
   14614/    D334 : 3428 0008           		move.w	8(a0),d2
   14615/    D338 : 3628 000C           		move.w	$C(a0),d3
   14616/    D33C : 6100 184E           		bsr.w	sub_EB8C
   14617/    D340 : 0C44 0000           		cmpi.w	#0,d4
   14618/    D344 : 6708                		beq.s	loc_D34E
   14619/    D346 : 0C44 0002           		cmpi.w	#2,d4
   14620/    D34A : 6702                		beq.s	loc_D34E
   14621/    D34C : 6014                		bra.s	loc_D362
   14622/    D34E :                     ; ---------------------------------------------------------------------------
   14623/    D34E :                     
   14624/    D34E :                     loc_D34E:
   14625/    D34E : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14626/    D354 : 203C 000F 0000      		move.l	#$F0000,d0
   14627/    D35A : 7200                		moveq	#0,d1
   14628/    D35C : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14629/    D362 :                     
   14630/    D362 :                     loc_D362:
   14631/    D362 : 302E 002A           		move.w	$2A(a6),d0
   14632/    D366 : 0800 0000           		btst	#0,d0
   14633/    D36A : 671C                		beq.s	loc_D388
   14634/    D36C : 41F9 0004 2358      		lea	(unk_42358).l,a0
   14635/    D372 : 43F9 0000 E298      		lea	(word_E298).l,a1
   14636/    D378 : 6100 17A8           		bsr.w	sub_EB22
   14637/    D37C : 0C00 00FF           		cmpi.b	#$FF,d0
   14638/    D380 : 6606                		bne.s	loc_D388
   14639/    D382 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   14640/    D388 :                     
   14641/    D388 :                     loc_D388:
   14642/    D388 : 6100 1F46           		bsr.w	loc_F2D0
   14643/    D38C : 6404                		bcc.s	locret_D392
   14644/    D38E : 6100 1EF6           		bsr.w	sub_F286
   14645/    D392 :                     
   14646/    D392 :                     locret_D392:
   14647/    D392 : 4E75                		rts
   14648/    D394 :                     ; ---------------------------------------------------------------------------
   14649/    D394 :                     
   14650/    D394 :                     loc_D394:
   14651/    D394 : 7007                		moveq	#7,d0
   14652/    D396 : 01AE 0028           		bclr	d0,$28(a6)
   14653/    D39A : 6726                		beq.s	loc_D3C2
   14654/    D39C : 2D7C 0004 22BC      		move.l	#Map_SpringLR,obMap(a6)
             D3A2 : 0010             
   14655/    D3A4 : 3D7C 0C07 0020      		move.w	#$C07,$20(a6)
   14656/    D3AA : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   14657/    D3B0 : 1D7C 0008 0022      		move.b	#8,$22(a6)
   14658/    D3B6 : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   14659/    D3BC : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   14660/    D3C2 :                     
   14661/    D3C2 :                     loc_D3C2:
   14662/    D3C2 : 3078 D862           		movea.w	($FFFFD862).w,a0
   14663/    D3C6 : 303C 000F           		move.w	#$F,d0
   14664/    D3CA : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14665/    D3D0 : 6738                		beq.s	loc_D40A
   14666/    D3D2 : 302E 0008           		move.w	8(a6),d0
   14667/    D3D6 : 322E 000C           		move.w	$C(a6),d1
   14668/    D3DA : 3428 0008           		move.w	8(a0),d2
   14669/    D3DE : 3628 000C           		move.w	$C(a0),d3
   14670/    D3E2 : 6100 17A8           		bsr.w	sub_EB8C
   14671/    D3E6 : 0C44 0001           		cmpi.w	#1,d4
   14672/    D3EA : 6708                		beq.s	loc_D3F4
   14673/    D3EC : 0C44 0003           		cmpi.w	#3,d4
   14674/    D3F0 : 6702                		beq.s	loc_D3F4
   14675/    D3F2 : 6016                		bra.s	loc_D40A
   14676/    D3F4 :                     ; ---------------------------------------------------------------------------
   14677/    D3F4 :                     
   14678/    D3F4 :                     loc_D3F4:
   14679/    D3F4 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14680/    D3FA : 203C 000F 0000      		move.l	#$F0000,d0
   14681/    D400 : 4480                		neg.l	d0
   14682/    D402 : 7200                		moveq	#0,d1
   14683/    D404 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14684/    D40A :                     
   14685/    D40A :                     loc_D40A:
   14686/    D40A : 3078 D864           		movea.w	($FFFFD864).w,a0
   14687/    D40E : 303C 000F           		move.w	#$F,d0
   14688/    D412 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14689/    D418 : 6738                		beq.s	loc_D452
   14690/    D41A : 302E 0008           		move.w	8(a6),d0
   14691/    D41E : 322E 000C           		move.w	$C(a6),d1
   14692/    D422 : 3428 0008           		move.w	8(a0),d2
   14693/    D426 : 3628 000C           		move.w	$C(a0),d3
   14694/    D42A : 6100 1760           		bsr.w	sub_EB8C
   14695/    D42E : 0C44 0001           		cmpi.w	#1,d4
   14696/    D432 : 6708                		beq.s	loc_D43C
   14697/    D434 : 0C44 0003           		cmpi.w	#3,d4
   14698/    D438 : 6702                		beq.s	loc_D43C
   14699/    D43A : 6016                		bra.s	loc_D452
   14700/    D43C :                     ; ---------------------------------------------------------------------------
   14701/    D43C :                     
   14702/    D43C :                     loc_D43C:
   14703/    D43C : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14704/    D442 : 203C 000F 0000      		move.l	#$F0000,d0
   14705/    D448 : 4480                		neg.l	d0
   14706/    D44A : 7200                		moveq	#0,d1
   14707/    D44C : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14708/    D452 :                     
   14709/    D452 :                     loc_D452:
   14710/    D452 : 302E 002A           		move.w	$2A(a6),d0
   14711/    D456 : 0800 0000           		btst	#0,d0
   14712/    D45A : 671C                		beq.s	loc_D478
   14713/    D45C : 41F9 0004 2358      		lea	(unk_42358).l,a0
   14714/    D462 : 43F9 0000 E298      		lea	(word_E298).l,a1
   14715/    D468 : 6100 16B8           		bsr.w	sub_EB22
   14716/    D46C : 0C40 00FF           		cmpi.w	#$FF,d0
   14717/    D470 : 6606                		bne.s	loc_D478
   14718/    D472 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   14719/    D478 :                     
   14720/    D478 :                     loc_D478:
   14721/    D478 : 6100 1E56           		bsr.w	loc_F2D0
   14722/    D47C : 6404                		bcc.s	locret_D482
   14723/    D47E : 6100 1E06           		bsr.w	sub_F286
   14724/    D482 :                     
   14725/    D482 :                     locret_D482:
   14726/    D482 : 4E75                		rts
   14727/    D484 :                     ; ---------------------------------------------------------------------------
   14728/    D484 :                     
   14729/    D484 :                     loc_D484:
   14730/    D484 : 7007                		moveq	#7,d0
   14731/    D486 : 01AE 0028           		bclr	d0,$28(a6)
   14732/    D48A : 6726                		beq.s	loc_D4B2
   14733/    D48C : 2D7C 0004 22E0      		move.l	#Map_SpringUp,obMap(a6)
             D492 : 0010             
   14734/    D494 : 3D7C 0407 0020      		move.w	#$407,$20(a6)
   14735/    D49A : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   14736/    D4A0 : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   14737/    D4A6 : 1D7C 0008 0023      		move.b	#8,$23(a6)
   14738/    D4AC : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   14739/    D4B2 :                     
   14740/    D4B2 :                     loc_D4B2:
   14741/    D4B2 : 3078 D862           		movea.w	($FFFFD862).w,a0
   14742/    D4B6 : 303C 000F           		move.w	#$F,d0
   14743/    D4BA : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14744/    D4C0 : 6738                		beq.s	loc_D4FA
   14745/    D4C2 : 302E 0008           		move.w	8(a6),d0
   14746/    D4C6 : 322E 000C           		move.w	$C(a6),d1
   14747/    D4CA : 3428 0008           		move.w	8(a0),d2
   14748/    D4CE : 3628 000C           		move.w	$C(a0),d3
   14749/    D4D2 : 6100 16B8           		bsr.w	sub_EB8C
   14750/    D4D6 : 0C44 0007           		cmpi.w	#7,d4
   14751/    D4DA : 6708                		beq.s	loc_D4E4
   14752/    D4DC : 0C44 0006           		cmpi.w	#6,d4
   14753/    D4E0 : 6702                		beq.s	loc_D4E4
   14754/    D4E2 : 6016                		bra.s	loc_D4FA
   14755/    D4E4 :                     ; ---------------------------------------------------------------------------
   14756/    D4E4 :                     
   14757/    D4E4 :                     loc_D4E4:
   14758/    D4E4 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14759/    D4EA : 223C 000F 0000      		move.l	#$F0000,d1
   14760/    D4F0 : 4481                		neg.l	d1
   14761/    D4F2 : 7000                		moveq	#0,d0
   14762/    D4F4 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14763/    D4FA :                     
   14764/    D4FA :                     loc_D4FA:
   14765/    D4FA : 3078 D864           		movea.w	($FFFFD864).w,a0
   14766/    D4FE : 303C 000F           		move.w	#$F,d0
   14767/    D502 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14768/    D508 : 6738                		beq.s	loc_D542
   14769/    D50A : 302E 0008           		move.w	8(a6),d0
   14770/    D50E : 322E 000C           		move.w	$C(a6),d1
   14771/    D512 : 3428 0008           		move.w	8(a0),d2
   14772/    D516 : 3628 000C           		move.w	$C(a0),d3
   14773/    D51A : 6100 1670           		bsr.w	sub_EB8C
   14774/    D51E : 0C44 0007           		cmpi.w	#7,d4
   14775/    D522 : 6708                		beq.s	loc_D52C
   14776/    D524 : 0C44 0006           		cmpi.w	#6,d4
   14777/    D528 : 6702                		beq.s	loc_D52C
   14778/    D52A : 6016                		bra.s	loc_D542
   14779/    D52C :                     ; ---------------------------------------------------------------------------
   14780/    D52C :                     
   14781/    D52C :                     loc_D52C:
   14782/    D52C : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14783/    D532 : 223C 000F 0000      		move.l	#$F0000,d1
   14784/    D538 : 4481                		neg.l	d1
   14785/    D53A : 7000                		moveq	#0,d0
   14786/    D53C : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14787/    D542 :                     
   14788/    D542 :                     loc_D542:
   14789/    D542 : 302E 002A           		move.w	$2A(a6),d0
   14790/    D546 : 0800 0000           		btst	#0,d0
   14791/    D54A : 671C                		beq.s	loc_D568
   14792/    D54C : 41F9 0004 235E      		lea	(unk_4235E).l,a0
   14793/    D552 : 43F9 0000 E2A4      		lea	(word_E2A4).l,a1
   14794/    D558 : 6100 15C8           		bsr.w	sub_EB22
   14795/    D55C : 0C00 00FF           		cmpi.b	#$FF,d0
   14796/    D560 : 6606                		bne.s	loc_D568
   14797/    D562 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   14798/    D568 :                     
   14799/    D568 :                     loc_D568:
   14800/    D568 : 6100 1D66           		bsr.w	loc_F2D0
   14801/    D56C : 6404                		bcc.s	locret_D572
   14802/    D56E : 6100 1D16           		bsr.w	sub_F286
   14803/    D572 :                     
   14804/    D572 :                     locret_D572:
   14805/    D572 : 4E75                		rts
   14806/    D574 :                     ; ---------------------------------------------------------------------------
   14807/    D574 :                     
   14808/    D574 :                     loc_D574:
   14809/    D574 : 7007                		moveq	#7,d0
   14810/    D576 : 01AE 0028           		bclr	d0,$28(a6)
   14811/    D57A : 6726                		beq.s	loc_D5A2
   14812/    D57C : 2D7C 0004 22E0      		move.l	#Map_SpringUp,obMap(a6)
             D582 : 0010             
   14813/    D584 : 3D7C 1407 0020      		move.w	#$1407,$20(a6)
   14814/    D58A : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   14815/    D590 : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   14816/    D596 : 1D7C 0008 0023      		move.b	#8,$23(a6)
   14817/    D59C : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   14818/    D5A2 :                     
   14819/    D5A2 :                     loc_D5A2:
   14820/    D5A2 : 3078 D862           		movea.w	($FFFFD862).w,a0
   14821/    D5A6 : 303C 000F           		move.w	#$F,d0
   14822/    D5AA : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14823/    D5B0 : 6736                		beq.s	loc_D5E8
   14824/    D5B2 : 302E 0008           		move.w	8(a6),d0
   14825/    D5B6 : 322E 000C           		move.w	$C(a6),d1
   14826/    D5BA : 3428 0008           		move.w	8(a0),d2
   14827/    D5BE : 3628 000C           		move.w	$C(a0),d3
   14828/    D5C2 : 6100 15C8           		bsr.w	sub_EB8C
   14829/    D5C6 : 0C44 0004           		cmpi.w	#4,d4
   14830/    D5CA : 6708                		beq.s	loc_D5D4
   14831/    D5CC : 0C44 0005           		cmpi.w	#5,d4
   14832/    D5D0 : 6702                		beq.s	loc_D5D4
   14833/    D5D2 : 6014                		bra.s	loc_D5E8
   14834/    D5D4 :                     ; ---------------------------------------------------------------------------
   14835/    D5D4 :                     
   14836/    D5D4 :                     loc_D5D4:
   14837/    D5D4 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14838/    D5DA : 223C 000F 0000      		move.l	#$F0000,d1
   14839/    D5E0 : 7000                		moveq	#0,d0
   14840/    D5E2 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14841/    D5E8 :                     
   14842/    D5E8 :                     loc_D5E8:
   14843/    D5E8 : 3078 D864           		movea.w	($FFFFD864).w,a0
   14844/    D5EC : 303C 000F           		move.w	#$F,d0
   14845/    D5F0 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14846/    D5F6 : 6736                		beq.s	loc_D62E
   14847/    D5F8 : 302E 0008           		move.w	8(a6),d0
   14848/    D5FC : 322E 000C           		move.w	$C(a6),d1
   14849/    D600 : 3428 0008           		move.w	8(a0),d2
   14850/    D604 : 3628 000C           		move.w	$C(a0),d3
   14851/    D608 : 6100 1582           		bsr.w	sub_EB8C
   14852/    D60C : 0C44 0005           		cmpi.w	#5,d4
   14853/    D610 : 6708                		beq.s	loc_D61A
   14854/    D612 : 0C44 0004           		cmpi.w	#4,d4
   14855/    D616 : 6702                		beq.s	loc_D61A
   14856/    D618 : 6014                		bra.s	loc_D62E
   14857/    D61A :                     ; ---------------------------------------------------------------------------
   14858/    D61A :                     loc_D61A:
   14859/    D61A : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14860/    D620 : 223C 000F 0000      		move.l	#$F0000,d1
   14861/    D626 : 7000                		moveq	#0,d0
   14862/    D628 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14863/    D62E :                     
   14864/    D62E :                     loc_D62E:
   14865/    D62E : 302E 002A           		move.w	$2A(a6),d0
   14866/    D632 : 0800 0000           		btst	#0,d0
   14867/    D636 : 671C                		beq.s	loc_D654
   14868/    D638 : 41F9 0004 235E      		lea	(unk_4235E).l,a0
   14869/    D63E : 43F9 0000 E2A4      		lea	(word_E2A4).l,a1
   14870/    D644 : 6100 14DC           		bsr.w	sub_EB22
   14871/    D648 : 0C00 00FF           		cmpi.b	#$FF,d0
   14872/    D64C : 6606                		bne.s	loc_D654
   14873/    D64E : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   14874/    D654 :                     
   14875/    D654 :                     loc_D654:
   14876/    D654 : 6100 1C7A           		bsr.w	loc_F2D0
   14877/    D658 : 6404                		bcc.s	locret_D65E
   14878/    D65A : 6100 1C2A           		bsr.w	sub_F286
   14879/    D65E :                     
   14880/    D65E :                     locret_D65E:
   14881/    D65E : 4E75                		rts
   14882/    D660 :                     ; ---------------------------------------------------------------------------
   14883/    D660 :                     
   14884/    D660 :                     loc_D660:
   14885/    D660 : 7007                		moveq	#7,d0
   14886/    D662 : 01AE 0028           		bclr	d0,$28(a6)
   14887/    D666 : 6726                		beq.s	loc_D68E
   14888/    D668 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             D66E : 0010             
   14889/    D670 : 3D7C 0407 0020      		move.w	#$407,$20(a6)
   14890/    D676 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   14891/    D67C : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   14892/    D682 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   14893/    D688 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   14894/    D68E :                     
   14895/    D68E :                     loc_D68E:
   14896/    D68E : 3078 D862           		movea.w	($FFFFD862).w,a0
   14897/    D692 : 303C 000F           		move.w	#$F,d0
   14898/    D696 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14899/    D69C : 6748                		beq.s	loc_D6E6
   14900/    D69E : 302E 0008           		move.w	8(a6),d0
   14901/    D6A2 : 322E 000C           		move.w	$C(a6),d1
   14902/    D6A6 : 3428 0008           		move.w	8(a0),d2
   14903/    D6AA : 3628 000C           		move.w	$C(a0),d3
   14904/    D6AE : 6100 14DC           		bsr.w	sub_EB8C
   14905/    D6B2 : 0C44 0002           		cmpi.w	#2,d4
   14906/    D6B6 : 6714                		beq.s	loc_D6CC
   14907/    D6B8 : 0C44 0006           		cmpi.w	#6,d4
   14908/    D6BC : 670E                		beq.s	loc_D6CC
   14909/    D6BE : 0C44 0007           		cmpi.w	#7,d4
   14910/    D6C2 : 6708                		beq.s	loc_D6CC
   14911/    D6C4 : 0C44 0000           		cmpi.w	#0,d4
   14912/    D6C8 : 6702                		beq.s	loc_D6CC
   14913/    D6CA : 601A                		bra.s	loc_D6E6
   14914/    D6CC :                     ; ---------------------------------------------------------------------------
   14915/    D6CC :                     
   14916/    D6CC :                     loc_D6CC:
   14917/    D6CC : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14918/    D6D2 : 203C 000A 8F98      		move.l	#$A8F98,d0
   14919/    D6D8 : 223C 000A 8F98      		move.l	#$A8F98,d1
   14920/    D6DE : 4481                		neg.l	d1
   14921/    D6E0 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14922/    D6E6 :                     
   14923/    D6E6 :                     loc_D6E6:
   14924/    D6E6 : 3078 D864           		movea.w	($FFFFD864).w,a0
   14925/    D6EA : 303C 000F           		move.w	#$F,d0
   14926/    D6EE : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14927/    D6F4 : 6748                		beq.s	loc_D73E
   14928/    D6F6 : 302E 0008           		move.w	8(a6),d0
   14929/    D6FA : 322E 000C           		move.w	$C(a6),d1
   14930/    D6FE : 3428 0008           		move.w	8(a0),d2
   14931/    D702 : 3628 000C           		move.w	$C(a0),d3
   14932/    D706 : 6100 1484           		bsr.w	sub_EB8C
   14933/    D70A : 0C44 0002           		cmpi.w	#2,d4
   14934/    D70E : 6714                		beq.s	loc_D724
   14935/    D710 : 0C44 0006           		cmpi.w	#6,d4
   14936/    D714 : 670E                		beq.s	loc_D724
   14937/    D716 : 0C44 0007           		cmpi.w	#7,d4
   14938/    D71A : 6708                		beq.s	loc_D724
   14939/    D71C : 0C44 0000           		cmpi.w	#0,d4
   14940/    D720 : 6702                		beq.s	loc_D724
   14941/    D722 : 601A                		bra.s	loc_D73E
   14942/    D724 :                     ; ---------------------------------------------------------------------------
   14943/    D724 :                     
   14944/    D724 :                     loc_D724:
   14945/    D724 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   14946/    D72A : 203C 000A 8F98      		move.l	#$A8F98,d0
   14947/    D730 : 223C 000A 8F98      		move.l	#$A8F98,d1
   14948/    D736 : 4481                		neg.l	d1
   14949/    D738 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   14950/    D73E :                     
   14951/    D73E :                     loc_D73E:
   14952/    D73E : 302E 002A           		move.w	$2A(a6),d0
   14953/    D742 : 0800 0000           		btst	#0,d0
   14954/    D746 : 671C                		beq.s	loc_D764
   14955/    D748 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   14956/    D74E : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   14957/    D754 : 6100 13CC           		bsr.w	sub_EB22
   14958/    D758 : 0C00 00FF           		cmpi.b	#$FF,d0
   14959/    D75C : 6606                		bne.s	loc_D764
   14960/    D75E : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   14961/    D764 :                     
   14962/    D764 :                     loc_D764:
   14963/    D764 : 6100 1B6A           		bsr.w	loc_F2D0
   14964/    D768 : 6404                		bcc.s	locret_D76E
   14965/    D76A : 6100 1B1A           		bsr.w	sub_F286
   14966/    D76E :                     
   14967/    D76E :                     locret_D76E:
   14968/    D76E : 4E75                		rts
   14969/    D770 :                     ; ---------------------------------------------------------------------------
   14970/    D770 :                     
   14971/    D770 :                     loc_D770:
   14972/    D770 : 7007                		moveq	#7,d0
   14973/    D772 : 01AE 0028           		bclr	d0,$28(a6)
   14974/    D776 : 6726                		beq.s	loc_D79E
   14975/    D778 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             D77E : 0010             
   14976/    D780 : 3D7C 0C07 0020      		move.w	#$C07,$20(a6)
   14977/    D786 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   14978/    D78C : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   14979/    D792 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   14980/    D798 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   14981/    D79E :                     
   14982/    D79E :                     loc_D79E:
   14983/    D79E : 3078 D862           		movea.w	($FFFFD862).w,a0
   14984/    D7A2 : 303C 000F           		move.w	#$F,d0
   14985/    D7A6 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   14986/    D7AC : 674A                		beq.s	loc_D7F8
   14987/    D7AE : 302E 0008           		move.w	8(a6),d0
   14988/    D7B2 : 322E 000C           		move.w	$C(a6),d1
   14989/    D7B6 : 3428 0008           		move.w	8(a0),d2
   14990/    D7BA : 3628 000C           		move.w	$C(a0),d3
   14991/    D7BE : 6100 13CC           		bsr.w	sub_EB8C
   14992/    D7C2 : 0C44 0003           		cmpi.w	#3,d4
   14993/    D7C6 : 6714                		beq.s	loc_D7DC
   14994/    D7C8 : 0C44 0007           		cmpi.w	#7,d4
   14995/    D7CC : 670E                		beq.s	loc_D7DC
   14996/    D7CE : 0C44 0006           		cmpi.w	#6,d4
   14997/    D7D2 : 6708                		beq.s	loc_D7DC
   14998/    D7D4 : 0C44 0001           		cmpi.w	#1,d4
   14999/    D7D8 : 6702                		beq.s	loc_D7DC
   15000/    D7DA : 601C                		bra.s	loc_D7F8
   15001/    D7DC :                     ; ---------------------------------------------------------------------------
   15002/    D7DC :                     
   15003/    D7DC :                     loc_D7DC:
   15004/    D7DC : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15005/    D7E2 : 203C 000A 8F98      		move.l	#$A8F98,d0
   15006/    D7E8 : 223C 000A 8F98      		move.l	#$A8F98,d1
   15007/    D7EE : 4480                		neg.l	d0
   15008/    D7F0 : 4481                		neg.l	d1
   15009/    D7F2 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15010/    D7F8 :                     
   15011/    D7F8 :                     loc_D7F8:
   15012/    D7F8 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15013/    D7FC : 303C 000F           		move.w	#$F,d0
   15014/    D800 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15015/    D806 : 674A                		beq.s	loc_D852
   15016/    D808 : 302E 0008           		move.w	8(a6),d0
   15017/    D80C : 322E 000C           		move.w	$C(a6),d1
   15018/    D810 : 3428 0008           		move.w	8(a0),d2
   15019/    D814 : 3628 000C           		move.w	$C(a0),d3
   15020/    D818 : 6100 1372           		bsr.w	sub_EB8C
   15021/    D81C : 0C44 0003           		cmpi.w	#3,d4
   15022/    D820 : 6714                		beq.s	loc_D836
   15023/    D822 : 0C44 0007           		cmpi.w	#7,d4
   15024/    D826 : 670E                		beq.s	loc_D836
   15025/    D828 : 0C44 0006           		cmpi.w	#6,d4
   15026/    D82C : 6708                		beq.s	loc_D836
   15027/    D82E : 0C44 0001           		cmpi.w	#1,d4
   15028/    D832 : 6702                		beq.s	loc_D836
   15029/    D834 : 601C                		bra.s	loc_D852
   15030/    D836 :                     ; ---------------------------------------------------------------------------
   15031/    D836 :                     
   15032/    D836 :                     loc_D836:
   15033/    D836 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15034/    D83C : 203C 000A 8F98      		move.l	#$A8F98,d0
   15035/    D842 : 223C 000A 8F98      		move.l	#$A8F98,d1
   15036/    D848 : 4480                		neg.l	d0
   15037/    D84A : 4481                		neg.l	d1
   15038/    D84C : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15039/    D852 :                     
   15040/    D852 :                     loc_D852:
   15041/    D852 : 302E 002A           		move.w	$2A(a6),d0
   15042/    D856 : 0800 0000           		btst	#0,d0
   15043/    D85A : 671C                		beq.s	loc_D878
   15044/    D85C : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15045/    D862 : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15046/    D868 : 6100 12B8           		bsr.w	sub_EB22
   15047/    D86C : 0C00 00FF           		cmpi.b	#$FF,d0
   15048/    D870 : 6606                		bne.s	loc_D878
   15049/    D872 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15050/    D878 :                     
   15051/    D878 :                     loc_D878:
   15052/    D878 : 6100 1A56           		bsr.w	loc_F2D0
   15053/    D87C : 6404                		bcc.s	locret_D882
   15054/    D87E : 6100 1A06           		bsr.w	sub_F286
   15055/    D882 :                     
   15056/    D882 :                     locret_D882:
   15057/    D882 : 4E75                		rts
   15058/    D884 :                     ; ---------------------------------------------------------------------------
   15059/    D884 :                     
   15060/    D884 :                     loc_D884:
   15061/    D884 : 7007                		moveq	#7,d0
   15062/    D886 : 01AE 0028           		bclr	d0,$28(a6)
   15063/    D88A : 6726                		beq.s	loc_D8B2
   15064/    D88C : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             D892 : 0010             
   15065/    D894 : 3D7C 1407 0020      		move.w	#$1407,$20(a6)
   15066/    D89A : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15067/    D8A0 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   15068/    D8A6 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   15069/    D8AC : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15070/    D8B2 :                     
   15071/    D8B2 :                     loc_D8B2:
   15072/    D8B2 : 3078 D862           		movea.w	($FFFFD862).w,a0
   15073/    D8B6 : 303C 000F           		move.w	#$F,d0
   15074/    D8BA : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15075/    D8C0 : 6746                		beq.s	loc_D908
   15076/    D8C2 : 302E 0008           		move.w	8(a6),d0
   15077/    D8C6 : 322E 000C           		move.w	$C(a6),d1
   15078/    D8CA : 3428 0008           		move.w	8(a0),d2
   15079/    D8CE : 3628 000C           		move.w	$C(a0),d3
   15080/    D8D2 : 6100 12B8           		bsr.w	sub_EB8C
   15081/    D8D6 : 0C44 0000           		cmpi.w	#0,d4
   15082/    D8DA : 6714                		beq.s	loc_D8F0
   15083/    D8DC : 0C44 0004           		cmpi.w	#4,d4
   15084/    D8E0 : 670E                		beq.s	loc_D8F0
   15085/    D8E2 : 0C44 0002           		cmpi.w	#2,d4
   15086/    D8E6 : 6708                		beq.s	loc_D8F0
   15087/    D8E8 : 0C44 0005           		cmpi.w	#5,d4
   15088/    D8EC : 6702                		beq.s	loc_D8F0
   15089/    D8EE : 6018                		bra.s	loc_D908
   15090/    D8F0 :                     ; ---------------------------------------------------------------------------
   15091/    D8F0 :                     
   15092/    D8F0 :                     loc_D8F0:
   15093/    D8F0 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15094/    D8F6 : 203C 000A 8F98      		move.l	#$A8F98,d0
   15095/    D8FC : 223C 000A 8F98      		move.l	#$A8F98,d1
   15096/    D902 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15097/    D908 :                     
   15098/    D908 :                     loc_D908:
   15099/    D908 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15100/    D90C : 303C 000F           		move.w	#$F,d0
   15101/    D910 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15102/    D916 : 6746                		beq.s	loc_D95E
   15103/    D918 : 302E 0008           		move.w	8(a6),d0
   15104/    D91C : 322E 000C           		move.w	$C(a6),d1
   15105/    D920 : 3428 0008           		move.w	8(a0),d2
   15106/    D924 : 3628 000C           		move.w	$C(a0),d3
   15107/    D928 : 6100 1262           		bsr.w	sub_EB8C
   15108/    D92C : 0C44 0000           		cmpi.w	#0,d4
   15109/    D930 : 6714                		beq.s	loc_D946
   15110/    D932 : 0C44 0004           		cmpi.w	#4,d4
   15111/    D936 : 670E                		beq.s	loc_D946
   15112/    D938 : 0C44 0002           		cmpi.w	#2,d4
   15113/    D93C : 6708                		beq.s	loc_D946
   15114/    D93E : 0C44 0005           		cmpi.w	#5,d4
   15115/    D942 : 6702                		beq.s	loc_D946
   15116/    D944 : 6018                		bra.s	loc_D95E
   15117/    D946 :                     ; ---------------------------------------------------------------------------
   15118/    D946 :                     
   15119/    D946 :                     loc_D946:
   15120/    D946 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15121/    D94C : 203C 000A 8F98      		move.l	#$A8F98,d0
   15122/    D952 : 223C 000A 8F98      		move.l	#$A8F98,d1
   15123/    D958 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15124/    D95E :                     
   15125/    D95E :                     loc_D95E:
   15126/    D95E : 302E 002A           		move.w	$2A(a6),d0
   15127/    D962 : 0800 0000           		btst	#0,d0
   15128/    D966 : 671C                		beq.s	loc_D984
   15129/    D968 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15130/    D96E : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15131/    D974 : 6100 11AC           		bsr.w	sub_EB22
   15132/    D978 : 0C00 00FF           		cmpi.b	#$FF,d0
   15133/    D97C : 6606                		bne.s	loc_D984
   15134/    D97E : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15135/    D984 :                     
   15136/    D984 :                     loc_D984:
   15137/    D984 : 6100 194A           		bsr.w	loc_F2D0
   15138/    D988 : 6404                		bcc.s	locret_D98E
   15139/    D98A : 6100 18FA           		bsr.w	sub_F286
   15140/    D98E :                     
   15141/    D98E :                     locret_D98E:
   15142/    D98E : 4E75                		rts
   15143/    D990 :                     ; ---------------------------------------------------------------------------
   15144/    D990 :                     
   15145/    D990 :                     loc_D990:
   15146/    D990 : 7007                		moveq	#7,d0
   15147/    D992 : 01AE 0028           		bclr	d0,$28(a6)
   15148/    D996 : 6726                		beq.s	loc_D9BE
   15149/    D998 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             D99E : 0010             
   15150/    D9A0 : 3D7C 1C07 0020      		move.w	#$1C07,$20(a6)
   15151/    D9A6 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15152/    D9AC : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   15153/    D9B2 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   15154/    D9B8 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15155/    D9BE :                     
   15156/    D9BE :                     loc_D9BE:
   15157/    D9BE : 3078 D862           		movea.w	($FFFFD862).w,a0
   15158/    D9C2 : 303C 000F           		move.w	#$F,d0
   15159/    D9C6 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15160/    D9CC : 6748                		beq.s	loc_DA16
   15161/    D9CE : 302E 0008           		move.w	8(a6),d0
   15162/    D9D2 : 322E 000C           		move.w	$C(a6),d1
   15163/    D9D6 : 3428 0008           		move.w	8(a0),d2
   15164/    D9DA : 3628 000C           		move.w	$C(a0),d3
   15165/    D9DE : 6100 11AC           		bsr.w	sub_EB8C
   15166/    D9E2 : 0C44 0001           		cmpi.w	#1,d4
   15167/    D9E6 : 6714                		beq.s	loc_D9FC
   15168/    D9E8 : 0C44 0005           		cmpi.w	#5,d4
   15169/    D9EC : 670E                		beq.s	loc_D9FC
   15170/    D9EE : 0C44 0003           		cmpi.w	#3,d4
   15171/    D9F2 : 6708                		beq.s	loc_D9FC
   15172/    D9F4 : 0C44 0004           		cmpi.w	#4,d4
   15173/    D9F8 : 6702                		beq.s	loc_D9FC
   15174/    D9FA : 601A                		bra.s	loc_DA16
   15175/    D9FC :                     ; ---------------------------------------------------------------------------
   15176/    D9FC :                     
   15177/    D9FC :                     loc_D9FC:
   15178/    D9FC : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15179/    DA02 : 203C 000A 8F98      		move.l	#$A8F98,d0
   15180/    DA08 : 223C 000A 8F98      		move.l	#$A8F98,d1
   15181/    DA0E : 4480                		neg.l	d0
   15182/    DA10 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15183/    DA16 :                     
   15184/    DA16 :                     loc_DA16:
   15185/    DA16 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15186/    DA1A : 303C 000F           		move.w	#$F,d0
   15187/    DA1E : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15188/    DA24 : 6748                		beq.s	loc_DA6E
   15189/    DA26 : 302E 0008           		move.w	8(a6),d0
   15190/    DA2A : 322E 000C           		move.w	$C(a6),d1
   15191/    DA2E : 3428 0008           		move.w	8(a0),d2
   15192/    DA32 : 3628 000C           		move.w	$C(a0),d3
   15193/    DA36 : 6100 1154           		bsr.w	sub_EB8C
   15194/    DA3A : 0C44 0001           		cmpi.w	#1,d4
   15195/    DA3E : 6714                		beq.s	loc_DA54
   15196/    DA40 : 0C44 0005           		cmpi.w	#5,d4
   15197/    DA44 : 670E                		beq.s	loc_DA54
   15198/    DA46 : 0C44 0003           		cmpi.w	#3,d4
   15199/    DA4A : 6708                		beq.s	loc_DA54
   15200/    DA4C : 0C44 0004           		cmpi.w	#4,d4
   15201/    DA50 : 6702                		beq.s	loc_DA54
   15202/    DA52 : 601A                		bra.s	loc_DA6E
   15203/    DA54 :                     ; ---------------------------------------------------------------------------
   15204/    DA54 :                     
   15205/    DA54 :                     loc_DA54:
   15206/    DA54 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15207/    DA5A : 203C 000A 8F98      		move.l	#$A8F98,d0
   15208/    DA60 : 223C 000A 8F98      		move.l	#$A8F98,d1
   15209/    DA66 : 4480                		neg.l	d0
   15210/    DA68 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15211/    DA6E :                     
   15212/    DA6E :                     loc_DA6E:
   15213/    DA6E : 302E 002A           		move.w	$2A(a6),d0
   15214/    DA72 : 0800 0000           		btst	#0,d0
   15215/    DA76 : 671C                		beq.s	loc_DA94
   15216/    DA78 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15217/    DA7E : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15218/    DA84 : 6100 109C           		bsr.w	sub_EB22
   15219/    DA88 : 0C00 00FF           		cmpi.b	#$FF,d0
   15220/    DA8C : 6606                		bne.s	loc_DA94
   15221/    DA8E : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15222/    DA94 :                     
   15223/    DA94 :                     loc_DA94:
   15224/    DA94 : 6100 183A           		bsr.w	loc_F2D0
   15225/    DA98 : 6404                		bcc.s	locret_DA9E
   15226/    DA9A : 6100 17EA           		bsr.w	sub_F286
   15227/    DA9E :                     
   15228/    DA9E :                     locret_DA9E:
   15229/    DA9E : 4E75                		rts
   15230/    DAA0 :                     ; ---------------------------------------------------------------------------
   15231/    DAA0 :                     
   15232/    DAA0 :                     loc_DAA0:
   15233/    DAA0 : 7007                		moveq	#7,d0
   15234/    DAA2 : 01AE 0028           		bclr	d0,$28(a6)
   15235/    DAA6 : 6726                		beq.s	loc_DACE
   15236/    DAA8 : 2D7C 0004 22BC      		move.l	#Map_SpringLR,obMap(a6)
             DAAE : 0010             
   15237/    DAB0 : 3D7C 2407 0020      		move.w	#$2407,$20(a6)
   15238/    DAB6 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15239/    DABC : 1D7C 0008 0022      		move.b	#8,$22(a6)
   15240/    DAC2 : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   15241/    DAC8 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15242/    DACE :                     
   15243/    DACE :                     loc_DACE:
   15244/    DACE : 3078 D862           		movea.w	($FFFFD862).w,a0
   15245/    DAD2 : 303C 000F           		move.w	#$F,d0
   15246/    DAD6 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15247/    DADC : 6736                		beq.s	loc_DB14
   15248/    DADE : 302E 0008           		move.w	8(a6),d0
   15249/    DAE2 : 322E 000C           		move.w	$C(a6),d1
   15250/    DAE6 : 3428 0008           		move.w	8(a0),d2
   15251/    DAEA : 3628 000C           		move.w	$C(a0),d3
   15252/    DAEE : 6100 109C           		bsr.w	sub_EB8C
   15253/    DAF2 : 0C44 0000           		cmpi.w	#0,d4
   15254/    DAF6 : 6708                		beq.s	loc_DB00
   15255/    DAF8 : 0C44 0002           		cmpi.w	#2,d4
   15256/    DAFC : 6702                		beq.s	loc_DB00
   15257/    DAFE : 6014                		bra.s	loc_DB14
   15258/    DB00 :                     ; ---------------------------------------------------------------------------
   15259/    DB00 :                     
   15260/    DB00 :                     loc_DB00:
   15261/    DB00 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15262/    DB06 : 203C 000A 0000      		move.l	#ARTUNC_Tails,d0
   15263/    DB0C : 7200                		moveq	#0,d1
   15264/    DB0E : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15265/    DB14 :                     
   15266/    DB14 :                     loc_DB14:
   15267/    DB14 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15268/    DB18 : 303C 000F           		move.w	#$F,d0
   15269/    DB1C : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15270/    DB22 : 6736                		beq.s	loc_DB5A
   15271/    DB24 : 302E 0008           		move.w	8(a6),d0
   15272/    DB28 : 322E 000C           		move.w	$C(a6),d1
   15273/    DB2C : 3428 0008           		move.w	8(a0),d2
   15274/    DB30 : 3628 000C           		move.w	$C(a0),d3
   15275/    DB34 : 6100 1056           		bsr.w	sub_EB8C
   15276/    DB38 : 0C44 0000           		cmpi.w	#0,d4
   15277/    DB3C : 6708                		beq.s	loc_DB46
   15278/    DB3E : 0C44 0002           		cmpi.w	#2,d4
   15279/    DB42 : 6702                		beq.s	loc_DB46
   15280/    DB44 : 6014                		bra.s	loc_DB5A
   15281/    DB46 :                     ; ---------------------------------------------------------------------------
   15282/    DB46 :                     
   15283/    DB46 :                     loc_DB46:
   15284/    DB46 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15285/    DB4C : 203C 000A 0000      		move.l	#ARTUNC_Tails,d0
   15286/    DB52 : 7200                		moveq	#0,d1
   15287/    DB54 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15288/    DB5A :                     
   15289/    DB5A :                     loc_DB5A:
   15290/    DB5A : 302E 002A           		move.w	$2A(a6),d0
   15291/    DB5E : 0800 0000           		btst	#0,d0
   15292/    DB62 : 671C                		beq.s	loc_DB80
   15293/    DB64 : 41F9 0004 2358      		lea	(unk_42358).l,a0
   15294/    DB6A : 43F9 0000 E298      		lea	(word_E298).l,a1
   15295/    DB70 : 6100 0FB0           		bsr.w	sub_EB22
   15296/    DB74 : 0C00 00FF           		cmpi.b	#$FF,d0
   15297/    DB78 : 6606                		bne.s	loc_DB80
   15298/    DB7A : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15299/    DB80 :                     
   15300/    DB80 :                     loc_DB80:
   15301/    DB80 : 6100 174E           		bsr.w	loc_F2D0
   15302/    DB84 : 6404                		bcc.s	locret_DB8A
   15303/    DB86 : 6100 16FE           		bsr.w	sub_F286
   15304/    DB8A :                     
   15305/    DB8A :                     locret_DB8A:
   15306/    DB8A : 4E75                		rts
   15307/    DB8C :                     ; ---------------------------------------------------------------------------
   15308/    DB8C :                     ; Object coding for Spring
   15309/    DB8C :                     
   15310/    DB8C :                     loc_DB8C:
   15311/    DB8C : 7007                		moveq	#7,d0
   15312/    DB8E : 01AE 0028           		bclr	d0,$28(a6)
   15313/    DB92 : 6726                		beq.s	loc_DBBA
   15314/    DB94 : 2D7C 0004 22BC      		move.l	#Map_SpringLR,obMap(a6)		; mappings to load for object
             DB9A : 0010             
   15315/    DB9C : 3D7C 2C07 0020      		move.w	#$2C07,$20(a6)
   15316/    DBA2 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15317/    DBA8 : 1D7C 0008 0022      		move.b	#8,$22(a6)
   15318/    DBAE : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   15319/    DBB4 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15320/    DBBA :                     
   15321/    DBBA :                     loc_DBBA:
   15322/    DBBA : 3078 D862           		movea.w	($FFFFD862).w,a0
   15323/    DBBE : 303C 000F           		move.w	#$F,d0
   15324/    DBC2 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15325/    DBC8 : 6738                		beq.s	loc_DC02
   15326/    DBCA : 302E 0008           		move.w	8(a6),d0
   15327/    DBCE : 322E 000C           		move.w	$C(a6),d1
   15328/    DBD2 : 3428 0008           		move.w	8(a0),d2
   15329/    DBD6 : 3628 000C           		move.w	$C(a0),d3
   15330/    DBDA : 6100 0FB0           		bsr.w	sub_EB8C
   15331/    DBDE : 0C44 0001           		cmpi.w	#1,d4
   15332/    DBE2 : 6708                		beq.s	loc_DBEC
   15333/    DBE4 : 0C44 0003           		cmpi.w	#3,d4
   15334/    DBE8 : 6702                		beq.s	loc_DBEC
   15335/    DBEA : 6016                		bra.s	loc_DC02
   15336/    DBEC :                     ; ---------------------------------------------------------------------------
   15337/    DBEC :                     
   15338/    DBEC :                     loc_DBEC:
   15339/    DBEC : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15340/    DBF2 : 203C 000A 0000      		move.l	#ARTUNC_Tails,d0
   15341/    DBF8 : 4480                		neg.l	d0
   15342/    DBFA : 7200                		moveq	#0,d1
   15343/    DBFC : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15344/    DC02 :                     
   15345/    DC02 :                     loc_DC02:
   15346/    DC02 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15347/    DC06 : 303C 000F           		move.w	#$F,d0
   15348/    DC0A : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15349/    DC10 : 6738                		beq.s	loc_DC4A
   15350/    DC12 : 302E 0008           		move.w	8(a6),d0
   15351/    DC16 : 322E 000C           		move.w	$C(a6),d1
   15352/    DC1A : 3428 0008           		move.w	8(a0),d2
   15353/    DC1E : 3628 000C           		move.w	$C(a0),d3
   15354/    DC22 : 6100 0F68           		bsr.w	sub_EB8C
   15355/    DC26 : 0C44 0001           		cmpi.w	#1,d4
   15356/    DC2A : 6708                		beq.s	loc_DC34
   15357/    DC2C : 0C44 0003           		cmpi.w	#3,d4
   15358/    DC30 : 6702                		beq.s	loc_DC34
   15359/    DC32 : 6016                		bra.s	loc_DC4A
   15360/    DC34 :                     ; ---------------------------------------------------------------------------
   15361/    DC34 :                     
   15362/    DC34 :                     loc_DC34:
   15363/    DC34 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15364/    DC3A : 203C 000A 0000      		move.l	#ARTUNC_Tails,d0
   15365/    DC40 : 4480                		neg.l	d0
   15366/    DC42 : 7200                		moveq	#0,d1
   15367/    DC44 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15368/    DC4A :                     
   15369/    DC4A :                     loc_DC4A:
   15370/    DC4A : 302E 002A           		move.w	$2A(a6),d0
   15371/    DC4E : 0800 0000           		btst	#0,d0
   15372/    DC52 : 671C                		beq.s	loc_DC70
   15373/    DC54 : 41F9 0004 2358      		lea	(unk_42358).l,a0
   15374/    DC5A : 43F9 0000 E298      		lea	(word_E298).l,a1
   15375/    DC60 : 6100 0EC0           		bsr.w	sub_EB22
   15376/    DC64 : 0C40 00FF           		cmpi.w	#$FF,d0
   15377/    DC68 : 6606                		bne.s	loc_DC70
   15378/    DC6A : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15379/    DC70 :                     
   15380/    DC70 :                     loc_DC70:
   15381/    DC70 : 6100 165E           		bsr.w	loc_F2D0
   15382/    DC74 : 6404                		bcc.s	locret_DC7A
   15383/    DC76 : 6100 160E           		bsr.w	sub_F286
   15384/    DC7A :                     
   15385/    DC7A :                     locret_DC7A:
   15386/    DC7A : 4E75                		rts
   15387/    DC7C :                     ; ---------------------------------------------------------------------------
   15388/    DC7C :                     
   15389/    DC7C :                     loc_DC7C:
   15390/    DC7C : 7007                		moveq	#7,d0
   15391/    DC7E : 01AE 0028           		bclr	d0,$28(a6)
   15392/    DC82 : 6726                		beq.s	loc_DCAA
   15393/    DC84 : 2D7C 0004 22E0      		move.l	#Map_SpringUp,obMap(a6)
             DC8A : 0010             
   15394/    DC8C : 3D7C 2407 0020      		move.w	#$2407,$20(a6)
   15395/    DC92 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15396/    DC98 : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   15397/    DC9E : 1D7C 0008 0023      		move.b	#8,$23(a6)
   15398/    DCA4 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15399/    DCAA :                     
   15400/    DCAA :                     loc_DCAA:
   15401/    DCAA : 3078 D862           		movea.w	($FFFFD862).w,a0
   15402/    DCAE : 303C 000F           		move.w	#$F,d0
   15403/    DCB2 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15404/    DCB8 : 6738                		beq.s	loc_DCF2
   15405/    DCBA : 302E 0008           		move.w	8(a6),d0
   15406/    DCBE : 322E 000C           		move.w	$C(a6),d1
   15407/    DCC2 : 3428 0008           		move.w	8(a0),d2
   15408/    DCC6 : 3628 000C           		move.w	$C(a0),d3
   15409/    DCCA : 6100 0EC0           		bsr.w	sub_EB8C
   15410/    DCCE : 0C44 0007           		cmpi.w	#7,d4
   15411/    DCD2 : 6708                		beq.s	loc_DCDC
   15412/    DCD4 : 0C44 0006           		cmpi.w	#6,d4
   15413/    DCD8 : 6702                		beq.s	loc_DCDC
   15414/    DCDA : 6016                		bra.s	loc_DCF2
   15415/    DCDC :                     ; ---------------------------------------------------------------------------
   15416/    DCDC :                     
   15417/    DCDC :                     loc_DCDC:
   15418/    DCDC : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15419/    DCE2 : 223C 000A 0000      		move.l	#ARTUNC_Tails,d1
   15420/    DCE8 : 4481                		neg.l	d1
   15421/    DCEA : 7000                		moveq	#0,d0
   15422/    DCEC : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15423/    DCF2 :                     
   15424/    DCF2 :                     loc_DCF2:
   15425/    DCF2 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15426/    DCF6 : 303C 000F           		move.w	#$F,d0
   15427/    DCFA : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15428/    DD00 : 6738                		beq.s	loc_DD3A
   15429/    DD02 : 302E 0008           		move.w	8(a6),d0
   15430/    DD06 : 322E 000C           		move.w	$C(a6),d1
   15431/    DD0A : 3428 0008           		move.w	8(a0),d2
   15432/    DD0E : 3628 000C           		move.w	$C(a0),d3
   15433/    DD12 : 6100 0E78           		bsr.w	sub_EB8C
   15434/    DD16 : 0C44 0007           		cmpi.w	#7,d4
   15435/    DD1A : 6708                		beq.s	loc_DD24
   15436/    DD1C : 0C44 0006           		cmpi.w	#6,d4
   15437/    DD20 : 6702                		beq.s	loc_DD24
   15438/    DD22 : 6016                		bra.s	loc_DD3A
   15439/    DD24 :                     ; ---------------------------------------------------------------------------
   15440/    DD24 :                     
   15441/    DD24 :                     loc_DD24:
   15442/    DD24 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15443/    DD2A : 223C 000A 0000      		move.l	#ARTUNC_Tails,d1
   15444/    DD30 : 4481                		neg.l	d1
   15445/    DD32 : 7000                		moveq	#0,d0
   15446/    DD34 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15447/    DD3A :                     
   15448/    DD3A :                     loc_DD3A:
   15449/    DD3A : 302E 002A           		move.w	$2A(a6),d0
   15450/    DD3E : 0800 0000           		btst	#0,d0
   15451/    DD42 : 671C                		beq.s	loc_DD60
   15452/    DD44 : 41F9 0004 235E      		lea	(unk_4235E).l,a0
   15453/    DD4A : 43F9 0000 E2A4      		lea	(word_E2A4).l,a1
   15454/    DD50 : 6100 0DD0           		bsr.w	sub_EB22
   15455/    DD54 : 0C00 00FF           		cmpi.b	#$FF,d0
   15456/    DD58 : 6606                		bne.s	loc_DD60
   15457/    DD5A : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15458/    DD60 :                     
   15459/    DD60 :                     loc_DD60:
   15460/    DD60 : 6100 156E           		bsr.w	loc_F2D0
   15461/    DD64 : 6404                		bcc.s	locret_DD6A
   15462/    DD66 : 6100 151E           		bsr.w	sub_F286
   15463/    DD6A :                     
   15464/    DD6A :                     locret_DD6A:
   15465/    DD6A : 4E75                		rts
   15466/    DD6C :                     ; ---------------------------------------------------------------------------
   15467/    DD6C :                     
   15468/    DD6C :                     loc_DD6C:
   15469/    DD6C : 7007                		moveq	#7,d0
   15470/    DD6E : 01AE 0028           		bclr	d0,$28(a6)
   15471/    DD72 : 6726                		beq.s	loc_DD9A
   15472/    DD74 : 2D7C 0004 22E0      		move.l	#Map_SpringUp,obMap(a6)
             DD7A : 0010             
   15473/    DD7C : 3D7C 3407 0020      		move.w	#$3407,$20(a6)
   15474/    DD82 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15475/    DD88 : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   15476/    DD8E : 1D7C 0008 0023      		move.b	#8,$23(a6)
   15477/    DD94 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15478/    DD9A :                     
   15479/    DD9A :                     loc_DD9A:
   15480/    DD9A : 3078 D862           		movea.w	($FFFFD862).w,a0
   15481/    DD9E : 303C 000F           		move.w	#$F,d0
   15482/    DDA2 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15483/    DDA8 : 6736                		beq.s	loc_DDE0
   15484/    DDAA : 302E 0008           		move.w	8(a6),d0
   15485/    DDAE : 322E 000C           		move.w	$C(a6),d1
   15486/    DDB2 : 3428 0008           		move.w	8(a0),d2
   15487/    DDB6 : 3628 000C           		move.w	$C(a0),d3
   15488/    DDBA : 6100 0DD0           		bsr.w	sub_EB8C
   15489/    DDBE : 0C44 0004           		cmpi.w	#4,d4
   15490/    DDC2 : 6708                		beq.s	loc_DDCC
   15491/    DDC4 : 0C44 0005           		cmpi.w	#5,d4
   15492/    DDC8 : 6702                		beq.s	loc_DDCC
   15493/    DDCA : 6014                		bra.s	loc_DDE0
   15494/    DDCC :                     ; ---------------------------------------------------------------------------
   15495/    DDCC :                     
   15496/    DDCC :                     loc_DDCC:
   15497/    DDCC : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15498/    DDD2 : 223C 000A 0000      		move.l	#ARTUNC_Tails,d1
   15499/    DDD8 : 7000                		moveq	#0,d0
   15500/    DDDA : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15501/    DDE0 :                     
   15502/    DDE0 :                     loc_DDE0:
   15503/    DDE0 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15504/    DDE4 : 303C 000F           		move.w	#$F,d0
   15505/    DDE8 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15506/    DDEE : 6736                		beq.s	loc_DE26
   15507/    DDF0 : 302E 0008           		move.w	8(a6),d0
   15508/    DDF4 : 322E 000C           		move.w	$C(a6),d1
   15509/    DDF8 : 3428 0008           		move.w	8(a0),d2
   15510/    DDFC : 3628 000C           		move.w	$C(a0),d3
   15511/    DE00 : 6100 0D8A           		bsr.w	sub_EB8C
   15512/    DE04 : 0C44 0005           		cmpi.w	#5,d4
   15513/    DE08 : 6708                		beq.s	loc_DE12
   15514/    DE0A : 0C44 0004           		cmpi.w	#4,d4
   15515/    DE0E : 6702                		beq.s	loc_DE12
   15516/    DE10 : 6014                		bra.s	loc_DE26
   15517/    DE12 :                     ; ---------------------------------------------------------------------------
   15518/    DE12 :                     
   15519/    DE12 :                     loc_DE12:
   15520/    DE12 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15521/    DE18 : 223C 000A 0000      		move.l	#ARTUNC_Tails,d1
   15522/    DE1E : 7000                		moveq	#0,d0
   15523/    DE20 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15524/    DE26 :                     
   15525/    DE26 :                     loc_DE26:
   15526/    DE26 : 302E 002A           		move.w	$2A(a6),d0
   15527/    DE2A : 0800 0000           		btst	#0,d0
   15528/    DE2E : 671C                		beq.s	loc_DE4C
   15529/    DE30 : 41F9 0004 235E      		lea	(unk_4235E).l,a0
   15530/    DE36 : 43F9 0000 E2A4      		lea	(word_E2A4).l,a1
   15531/    DE3C : 6100 0CE4           		bsr.w	sub_EB22
   15532/    DE40 : 0C00 00FF           		cmpi.b	#$FF,d0
   15533/    DE44 : 6606                		bne.s	loc_DE4C
   15534/    DE46 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15535/    DE4C :                     
   15536/    DE4C :                     loc_DE4C:
   15537/    DE4C : 6100 1482           		bsr.w	loc_F2D0
   15538/    DE50 : 6404                		bcc.s	locret_DE56
   15539/    DE52 : 6100 1432           		bsr.w	sub_F286
   15540/    DE56 :                     
   15541/    DE56 :                     locret_DE56:
   15542/    DE56 : 4E75                		rts
   15543/    DE58 :                     ; ---------------------------------------------------------------------------
   15544/    DE58 :                     
   15545/    DE58 :                     loc_DE58:
   15546/    DE58 : 7007                		moveq	#7,d0
   15547/    DE5A : 01AE 0028           		bclr	d0,$28(a6)
   15548/    DE5E : 6726                		beq.s	loc_DE86
   15549/    DE60 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             DE66 : 0010             
   15550/    DE68 : 3D7C 2407 0020      		move.w	#$2407,$20(a6)
   15551/    DE6E : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15552/    DE74 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   15553/    DE7A : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   15554/    DE80 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15555/    DE86 :                     
   15556/    DE86 :                     loc_DE86:
   15557/    DE86 : 3078 D862           		movea.w	($FFFFD862).w,a0
   15558/    DE8A : 303C 000F           		move.w	#$F,d0
   15559/    DE8E : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15560/    DE94 : 6748                		beq.s	loc_DEDE
   15561/    DE96 : 302E 0008           		move.w	8(a6),d0
   15562/    DE9A : 322E 000C           		move.w	$C(a6),d1
   15563/    DE9E : 3428 0008           		move.w	8(a0),d2
   15564/    DEA2 : 3628 000C           		move.w	$C(a0),d3
   15565/    DEA6 : 6100 0CE4           		bsr.w	sub_EB8C
   15566/    DEAA : 0C44 0002           		cmpi.w	#2,d4
   15567/    DEAE : 6714                		beq.s	loc_DEC4
   15568/    DEB0 : 0C44 0006           		cmpi.w	#6,d4
   15569/    DEB4 : 670E                		beq.s	loc_DEC4
   15570/    DEB6 : 0C44 0007           		cmpi.w	#7,d4
   15571/    DEBA : 6708                		beq.s	loc_DEC4
   15572/    DEBC : 0C44 0000           		cmpi.w	#0,d4
   15573/    DEC0 : 6702                		beq.s	loc_DEC4
   15574/    DEC2 : 601A                		bra.s	loc_DEDE
   15575/    DEC4 :                     ; ---------------------------------------------------------------------------
   15576/    DEC4 :                     
   15577/    DEC4 :                     loc_DEC4:
   15578/    DEC4 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15579/    DECA : 203C 0003 2985      		move.l	#$32985,d0
   15580/    DED0 : 223C 0003 2985      		move.l	#$32985,d1
   15581/    DED6 : 4481                		neg.l	d1
   15582/    DED8 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15583/    DEDE :                     
   15584/    DEDE :                     loc_DEDE:
   15585/    DEDE : 3078 D864           		movea.w	($FFFFD864).w,a0
   15586/    DEE2 : 303C 000F           		move.w	#$F,d0
   15587/    DEE6 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15588/    DEEC : 6748                		beq.s	loc_DF36
   15589/    DEEE : 302E 0008           		move.w	8(a6),d0
   15590/    DEF2 : 322E 000C           		move.w	$C(a6),d1
   15591/    DEF6 : 3428 0008           		move.w	8(a0),d2
   15592/    DEFA : 3628 000C           		move.w	$C(a0),d3
   15593/    DEFE : 6100 0C8C           		bsr.w	sub_EB8C
   15594/    DF02 : 0C44 0002           		cmpi.w	#2,d4
   15595/    DF06 : 6714                		beq.s	loc_DF1C
   15596/    DF08 : 0C44 0006           		cmpi.w	#6,d4
   15597/    DF0C : 670E                		beq.s	loc_DF1C
   15598/    DF0E : 0C44 0007           		cmpi.w	#7,d4
   15599/    DF12 : 6708                		beq.s	loc_DF1C
   15600/    DF14 : 0C44 0000           		cmpi.w	#0,d4
   15601/    DF18 : 6702                		beq.s	loc_DF1C
   15602/    DF1A : 601A                		bra.s	loc_DF36
   15603/    DF1C :                     ; ---------------------------------------------------------------------------
   15604/    DF1C :                     
   15605/    DF1C :                     loc_DF1C:
   15606/    DF1C : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15607/    DF22 : 203C 0003 2985      		move.l	#$32985,d0
   15608/    DF28 : 223C 0003 2985      		move.l	#$32985,d1
   15609/    DF2E : 4481                		neg.l	d1
   15610/    DF30 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15611/    DF36 :                     
   15612/    DF36 :                     loc_DF36:
   15613/    DF36 : 302E 002A           		move.w	$2A(a6),d0
   15614/    DF3A : 0800 0000           		btst	#0,d0
   15615/    DF3E : 671C                		beq.s	loc_DF5C
   15616/    DF40 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15617/    DF46 : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15618/    DF4C : 6100 0BD4           		bsr.w	sub_EB22
   15619/    DF50 : 0C00 00FF           		cmpi.b	#$FF,d0
   15620/    DF54 : 6606                		bne.s	loc_DF5C
   15621/    DF56 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15622/    DF5C :                     
   15623/    DF5C :                     loc_DF5C:
   15624/    DF5C : 6100 1372           		bsr.w	loc_F2D0
   15625/    DF60 : 6404                		bcc.s	locret_DF66
   15626/    DF62 : 6100 1322           		bsr.w	sub_F286
   15627/    DF66 :                     
   15628/    DF66 :                     locret_DF66:
   15629/    DF66 : 4E75                		rts
   15630/    DF68 :                     ; ---------------------------------------------------------------------------
   15631/    DF68 :                     
   15632/    DF68 :                     loc_DF68:
   15633/    DF68 : 7007                		moveq	#7,d0
   15634/    DF6A : 01AE 0028           		bclr	d0,$28(a6)
   15635/    DF6E : 6726                		beq.s	loc_DF96
   15636/    DF70 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             DF76 : 0010             
   15637/    DF78 : 3D7C 2C07 0020      		move.w	#$2C07,$20(a6)
   15638/    DF7E : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15639/    DF84 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   15640/    DF8A : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   15641/    DF90 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15642/    DF96 :                     
   15643/    DF96 :                     loc_DF96:
   15644/    DF96 : 3078 D862           		movea.w	($FFFFD862).w,a0
   15645/    DF9A : 303C 000F           		move.w	#$F,d0
   15646/    DF9E : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15647/    DFA4 : 674A                		beq.s	loc_DFF0
   15648/    DFA6 : 302E 0008           		move.w	8(a6),d0
   15649/    DFAA : 322E 000C           		move.w	$C(a6),d1
   15650/    DFAE : 3428 0008           		move.w	8(a0),d2
   15651/    DFB2 : 3628 000C           		move.w	$C(a0),d3
   15652/    DFB6 : 6100 0BD4           		bsr.w	sub_EB8C
   15653/    DFBA : 0C44 0003           		cmpi.w	#3,d4
   15654/    DFBE : 6714                		beq.s	loc_DFD4
   15655/    DFC0 : 0C44 0007           		cmpi.w	#7,d4
   15656/    DFC4 : 670E                		beq.s	loc_DFD4
   15657/    DFC6 : 0C44 0006           		cmpi.w	#6,d4
   15658/    DFCA : 6708                		beq.s	loc_DFD4
   15659/    DFCC : 0C44 0001           		cmpi.w	#1,d4
   15660/    DFD0 : 6702                		beq.s	loc_DFD4
   15661/    DFD2 : 601C                		bra.s	loc_DFF0
   15662/    DFD4 :                     ; ---------------------------------------------------------------------------
   15663/    DFD4 :                     
   15664/    DFD4 :                     loc_DFD4:
   15665/    DFD4 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15666/    DFDA : 203C 0003 2985      		move.l	#$32985,d0
   15667/    DFE0 : 223C 0003 2985      		move.l	#$32985,d1
   15668/    DFE6 : 4480                		neg.l	d0
   15669/    DFE8 : 4481                		neg.l	d1
   15670/    DFEA : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15671/    DFF0 :                     
   15672/    DFF0 :                     loc_DFF0:
   15673/    DFF0 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15674/    DFF4 : 303C 000F           		move.w	#$F,d0
   15675/    DFF8 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15676/    DFFE : 674A                		beq.s	loc_E04A
   15677/    E000 : 302E 0008           		move.w	8(a6),d0
   15678/    E004 : 322E 000C           		move.w	$C(a6),d1
   15679/    E008 : 3428 0008           		move.w	8(a0),d2
   15680/    E00C : 3628 000C           		move.w	$C(a0),d3
   15681/    E010 : 6100 0B7A           		bsr.w	sub_EB8C
   15682/    E014 : 0C44 0003           		cmpi.w	#3,d4
   15683/    E018 : 6714                		beq.s	loc_E02E
   15684/    E01A : 0C44 0007           		cmpi.w	#7,d4
   15685/    E01E : 670E                		beq.s	loc_E02E
   15686/    E020 : 0C44 0006           		cmpi.w	#6,d4
   15687/    E024 : 6708                		beq.s	loc_E02E
   15688/    E026 : 0C44 0001           		cmpi.w	#1,d4
   15689/    E02A : 6702                		beq.s	loc_E02E
   15690/    E02C : 601C                		bra.s	loc_E04A
   15691/    E02E :                     ; ---------------------------------------------------------------------------
   15692/    E02E :                     
   15693/    E02E :                     loc_E02E:
   15694/    E02E : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15695/    E034 : 203C 0003 2985      		move.l	#$32985,d0
   15696/    E03A : 223C 0003 2985      		move.l	#$32985,d1
   15697/    E040 : 4480                		neg.l	d0
   15698/    E042 : 4481                		neg.l	d1
   15699/    E044 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15700/    E04A :                     
   15701/    E04A :                     loc_E04A:
   15702/    E04A : 302E 002A           		move.w	$2A(a6),d0
   15703/    E04E : 0800 0000           		btst	#0,d0
   15704/    E052 : 671C                		beq.s	loc_E070
   15705/    E054 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15706/    E05A : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15707/    E060 : 6100 0AC0           		bsr.w	sub_EB22
   15708/    E064 : 0C00 00FF           		cmpi.b	#$FF,d0
   15709/    E068 : 6606                		bne.s	loc_E070
   15710/    E06A : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15711/    E070 :                     
   15712/    E070 :                     loc_E070:
   15713/    E070 : 6100 125E           		bsr.w	loc_F2D0
   15714/    E074 : 6404                		bcc.s	locret_E07A
   15715/    E076 : 6100 120E           		bsr.w	sub_F286
   15716/    E07A :                     
   15717/    E07A :                     locret_E07A:
   15718/    E07A : 4E75                		rts
   15719/    E07C :                     ; ---------------------------------------------------------------------------
   15720/    E07C :                     
   15721/    E07C :                     loc_E07C:
   15722/    E07C : 7007                		moveq	#7,d0
   15723/    E07E : 01AE 0028           		bclr	d0,$28(a6)
   15724/    E082 : 6726                		beq.s	loc_E0AA
   15725/    E084 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             E08A : 0010             
   15726/    E08C : 3D7C 3407 0020      		move.w	#$3407,$20(a6)
   15727/    E092 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15728/    E098 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   15729/    E09E : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   15730/    E0A4 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15731/    E0AA :                     
   15732/    E0AA :                     loc_E0AA:
   15733/    E0AA : 3078 D862           		movea.w	($FFFFD862).w,a0
   15734/    E0AE : 303C 000F           		move.w	#$F,d0
   15735/    E0B2 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15736/    E0B8 : 6746                		beq.s	loc_E100
   15737/    E0BA : 302E 0008           		move.w	8(a6),d0
   15738/    E0BE : 322E 000C           		move.w	$C(a6),d1
   15739/    E0C2 : 3428 0008           		move.w	8(a0),d2
   15740/    E0C6 : 3628 000C           		move.w	$C(a0),d3
   15741/    E0CA : 6100 0AC0           		bsr.w	sub_EB8C
   15742/    E0CE : 0C44 0000           		cmpi.w	#0,d4
   15743/    E0D2 : 6714                		beq.s	loc_E0E8
   15744/    E0D4 : 0C44 0004           		cmpi.w	#4,d4
   15745/    E0D8 : 670E                		beq.s	loc_E0E8
   15746/    E0DA : 0C44 0002           		cmpi.w	#2,d4
   15747/    E0DE : 6708                		beq.s	loc_E0E8
   15748/    E0E0 : 0C44 0005           		cmpi.w	#5,d4
   15749/    E0E4 : 6702                		beq.s	loc_E0E8
   15750/    E0E6 : 6018                		bra.s	loc_E100
   15751/    E0E8 :                     ; ---------------------------------------------------------------------------
   15752/    E0E8 :                     
   15753/    E0E8 :                     loc_E0E8:
   15754/    E0E8 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15755/    E0EE : 203C 0003 2985      		move.l	#$32985,d0
   15756/    E0F4 : 223C 0003 2985      		move.l	#$32985,d1
   15757/    E0FA : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15758/    E100 :                     
   15759/    E100 :                     loc_E100:
   15760/    E100 : 3078 D864           		movea.w	($FFFFD864).w,a0
   15761/    E104 : 303C 000F           		move.w	#$F,d0
   15762/    E108 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15763/    E10E : 6746                		beq.s	loc_E156
   15764/    E110 : 302E 0008           		move.w	8(a6),d0
   15765/    E114 : 322E 000C           		move.w	$C(a6),d1
   15766/    E118 : 3428 0008           		move.w	8(a0),d2
   15767/    E11C : 3628 000C           		move.w	$C(a0),d3
   15768/    E120 : 6100 0A6A           		bsr.w	sub_EB8C
   15769/    E124 : 0C44 0000           		cmpi.w	#0,d4
   15770/    E128 : 6714                		beq.s	loc_E13E
   15771/    E12A : 0C44 0004           		cmpi.w	#4,d4
   15772/    E12E : 670E                		beq.s	loc_E13E
   15773/    E130 : 0C44 0002           		cmpi.w	#2,d4
   15774/    E134 : 6708                		beq.s	loc_E13E
   15775/    E136 : 0C44 0005           		cmpi.w	#5,d4
   15776/    E13A : 6702                		beq.s	loc_E13E
   15777/    E13C : 6018                		bra.s	loc_E156
   15778/    E13E :                     ; ---------------------------------------------------------------------------
   15779/    E13E :                     
   15780/    E13E :                     loc_E13E:
   15781/    E13E : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15782/    E144 : 203C 0003 2985      		move.l	#$32985,d0
   15783/    E14A : 223C 0003 2985      		move.l	#$32985,d1
   15784/    E150 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15785/    E156 :                     
   15786/    E156 :                     loc_E156:
   15787/    E156 : 302E 002A           		move.w	$2A(a6),d0
   15788/    E15A : 0800 0000           		btst	#0,d0
   15789/    E15E : 671C                		beq.s	loc_E17C
   15790/    E160 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15791/    E166 : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15792/    E16C : 6100 09B4           		bsr.w	sub_EB22
   15793/    E170 : 0C00 00FF           		cmpi.b	#$FF,d0
   15794/    E174 : 6606                		bne.s	loc_E17C
   15795/    E176 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15796/    E17C :                     
   15797/    E17C :                     loc_E17C:
   15798/    E17C : 6100 1152           		bsr.w	loc_F2D0
   15799/    E180 : 6404                		bcc.s	locret_E186
   15800/    E182 : 6100 1102           		bsr.w	sub_F286
   15801/    E186 :                     
   15802/    E186 :                     locret_E186:
   15803/    E186 : 4E75                		rts
   15804/    E188 :                     ; ---------------------------------------------------------------------------
   15805/    E188 :                     
   15806/    E188 :                     loc_E188:
   15807/    E188 : 7007                		moveq	#7,d0
   15808/    E18A : 01AE 0028           		bclr	d0,$28(a6)
   15809/    E18E : 6726                		beq.s	loc_E1B6
   15810/    E190 : 2D7C 0004 2304      		move.l	#Map_SpringAngUp,obMap(a6)
             E196 : 0010             
   15811/    E198 : 3D7C 3C07 0020      		move.w	#$3C07,$20(a6)
   15812/    E19E : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   15813/    E1A4 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   15814/    E1AA : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   15815/    E1B0 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   15816/    E1B6 :                     
   15817/    E1B6 :                     loc_E1B6:
   15818/    E1B6 : 3078 D862           		movea.w	($FFFFD862).w,a0
   15819/    E1BA : 303C 000F           		move.w	#$F,d0
   15820/    E1BE : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15821/    E1C4 : 6748                		beq.s	loc_E20E
   15822/    E1C6 : 302E 0008           		move.w	8(a6),d0
   15823/    E1CA : 322E 000C           		move.w	$C(a6),d1
   15824/    E1CE : 3428 0008           		move.w	8(a0),d2
   15825/    E1D2 : 3628 000C           		move.w	$C(a0),d3
   15826/    E1D6 : 6100 09B4           		bsr.w	sub_EB8C
   15827/    E1DA : 0C44 0001           		cmpi.w	#1,d4
   15828/    E1DE : 6714                		beq.s	loc_E1F4
   15829/    E1E0 : 0C44 0005           		cmpi.w	#5,d4
   15830/    E1E4 : 670E                		beq.s	loc_E1F4
   15831/    E1E6 : 0C44 0003           		cmpi.w	#3,d4
   15832/    E1EA : 6708                		beq.s	loc_E1F4
   15833/    E1EC : 0C44 0004           		cmpi.w	#4,d4
   15834/    E1F0 : 6702                		beq.s	loc_E1F4
   15835/    E1F2 : 601A                		bra.s	loc_E20E
   15836/    E1F4 :                     ; ---------------------------------------------------------------------------
   15837/    E1F4 :                     
   15838/    E1F4 :                     loc_E1F4:
   15839/    E1F4 : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15840/    E1FA : 203C 0003 2985      		move.l	#$32985,d0
   15841/    E200 : 223C 0003 2985      		move.l	#$32985,d1
   15842/    E206 : 4480                		neg.l	d0
   15843/    E208 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15844/    E20E :                     
   15845/    E20E :                     loc_E20E:
   15846/    E20E : 3078 D864           		movea.w	($FFFFD864).w,a0
   15847/    E212 : 303C 000F           		move.w	#$F,d0
   15848/    E216 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   15849/    E21C : 6748                		beq.s	loc_E266
   15850/    E21E : 302E 0008           		move.w	8(a6),d0
   15851/    E222 : 322E 000C           		move.w	$C(a6),d1
   15852/    E226 : 3428 0008           		move.w	8(a0),d2
   15853/    E22A : 3628 000C           		move.w	$C(a0),d3
   15854/    E22E : 6100 095C           		bsr.w	sub_EB8C
   15855/    E232 : 0C44 0001           		cmpi.w	#1,d4
   15856/    E236 : 6714                		beq.s	loc_E24C
   15857/    E238 : 0C44 0005           		cmpi.w	#5,d4
   15858/    E23C : 670E                		beq.s	loc_E24C
   15859/    E23E : 0C44 0003           		cmpi.w	#3,d4
   15860/    E242 : 6708                		beq.s	loc_E24C
   15861/    E244 : 0C44 0004           		cmpi.w	#4,d4
   15862/    E248 : 6702                		beq.s	loc_E24C
   15863/    E24A : 601A                		bra.s	loc_E266
   15864/    E24C :                     ; ---------------------------------------------------------------------------
   15865/    E24C :                     
   15866/    E24C :                     loc_E24C:
   15867/    E24C : 006E 0001 002A      		ori.w	#1,$2A(a6)
   15868/    E252 : 203C 0003 2985      		move.l	#$32985,d0
   15869/    E258 : 223C 0003 2985      		move.l	#$32985,d1
   15870/    E25E : 4480                		neg.l	d0
   15871/    E260 : 4EB9 0000 CB1C      		jsr	(loc_CB1C).l
   15872/    E266 :                     
   15873/    E266 :                     loc_E266:
   15874/    E266 : 302E 002A           		move.w	$2A(a6),d0
   15875/    E26A : 0800 0000           		btst	#0,d0
   15876/    E26E : 671C                		beq.s	loc_E28C
   15877/    E270 : 41F9 0004 2364      		lea	(unk_42364).l,a0
   15878/    E276 : 43F9 0000 E2B0      		lea	(word_E2B0).l,a1
   15879/    E27C : 6100 08A4           		bsr.w	sub_EB22
   15880/    E280 : 0C00 00FF           		cmpi.b	#$FF,d0
   15881/    E284 : 6606                		bne.s	loc_E28C
   15882/    E286 : 026E FFFE 002A      		andi.w	#$FFFE,$2A(a6)
   15883/    E28C :                     
   15884/    E28C :                     loc_E28C:
   15885/    E28C : 6100 1042           		bsr.w	loc_F2D0
   15886/    E290 : 6404                		bcc.s	locret_E296
   15887/    E292 : 6100 0FF2           		bsr.w	sub_F286
   15888/    E296 :                     
   15889/    E296 :                     locret_E296:
   15890/    E296 : 4E75                		rts
   15891/    E298 :                     ; ---------------------------------------------------------------------------
   15892/    E298 : 0601                word_E298:	dc.w $601
   15893/    E29A : 0602                		dc.w $602
   15894/    E29C : 0600                		dc.w $600
   15895/    E29E : 82FF                		dc.w $82FF
   15896/    E2A0 : 0100                		dc.w $100
   15897/    E2A2 : 8080                		dc.w $8080
   15898/    E2A4 : 0601                word_E2A4:	dc.w $601
   15899/    E2A6 : 0602                		dc.w $602
   15900/    E2A8 : 0600                		dc.w $600
   15901/    E2AA : 82FF                		dc.w $82FF
   15902/    E2AC : 0100                		dc.w $100
   15903/    E2AE : 8080                		dc.w $8080
   15904/    E2B0 : 0601                word_E2B0:	dc.w $601
   15905/    E2B2 : 0802                		dc.w $802
   15906/    E2B4 : 0600                		dc.w $600
   15907/    E2B6 : 82FF                		dc.w $82FF
   15908/    E2B8 : 0100                		dc.w $100
   15909/    E2BA : 8080                		dc.w $8080
   15910/    E2BC :                     ; ---------------------------------------------------------------------------
   15911/    E2BC :                     
   15912/    E2BC :                     locret_E2BC:
   15913/    E2BC : 4E75                		rts
   15914/    E2BE :                     ; ---------------------------------------------------------------------------
   15915/    E2BE :                     
   15916/    E2BE :                     loc_E2BE:
   15917/    E2BE : 536E 0026           		subq.w	#1,$26(a6)
   15918/    E2C2 : 6604                		bne.s	loc_E2C8
   15919/    E2C4 : 4EF8 1980           		jmp	(sub_1980).w
   15920/    E2C8 :                     ; ---------------------------------------------------------------------------
   15921/    E2C8 :                     
   15922/    E2C8 :                     loc_E2C8:
   15923/    E2C8 : 302E 0008           		move.w	8(a6),d0
   15924/    E2CC : 322E 000C           		move.w	$C(a6),d1
   15925/    E2D0 : 4EB8 1DA8           		jsr	(sub_1DA8).w
   15926/    E2D4 : 6710                		beq.s	loc_E2E6
   15927/    E2D6 : 2C2E 001C           		move.l	$1C(a6),d6
   15928/    E2DA : 4486                		neg.l	d6
   15929/    E2DC : 2E06                		move.l	d6,d7
   15930/    E2DE : E487                		asr.l	#2,d7
   15931/    E2E0 : 9C87                		sub.l	d7,d6
   15932/    E2E2 : 2D46 001C           		move.l	d6,$1C(a6)
   15933/    E2E6 :                     
   15934/    E2E6 :                     loc_E2E6:
   15935/    E2E6 : 3D40 0008           		move.w	d0,8(a6)
   15936/    E2EA : 3D41 000C           		move.w	d1,$C(a6)
   15937/    E2EE : 202E 0018           		move.l	$18(a6),d0
   15938/    E2F2 : D1AE 0008           		add.l	d0,8(a6)
   15939/    E2F6 : 202E 001C           		move.l	$1C(a6),d0
   15940/    E2FA : 0680 0000 1800      		addi.l	#$1800,d0
   15941/    E300 : 2D40 001C           		move.l	d0,$1C(a6)
   15942/    E304 : D1AE 000C           		add.l	d0,$C(a6)
   15943/    E308 : 3039 FFFF F000      		move.w	($FFFFF000).l,d0
   15944/    E30E : 0240 000C           		andi.w	#$C,d0
   15945/    E312 : D040                		add.w	d0,d0
   15946/    E314 : 41FB 001E           		lea	word_E334(pc,d0.w),a0
   15947/    E318 : 2D48 0010           		move.l	a0,$10(a6)
   15948/    E31C : 082E 0006 0005      		btst	#6,5(a6)
   15949/    E322 : 6708                		beq.s	loc_E32C
   15950/    E324 : 08AE 0007 0005      		bclr	#7,5(a6)
   15951/    E32A : 4E75                		rts
   15952/    E32C :                     ; ---------------------------------------------------------------------------
   15953/    E32C :                     
   15954/    E32C :                     loc_E32C:
   15955/    E32C : 08EE 0007 0005      		bset	#7,5(a6)
   15956/    E332 : 4E75                		rts
   15957/    E334 :                     ; ---------------------------------------------------------------------------
   15958/    E334 : 05F8                word_E334:	dc.w $5F8
   15959/    E336 : 25F0                		dc.w $25F0
   15960/    E338 : F8FF                		dc.w $F8FF
   15961/    E33A : 4E71                		nop
   15962/    E33C : 05F8                		dc.w $5F8
   15963/    E33E : 25F4                		dc.w $25F4
   15964/    E340 : F8FF                		dc.w $F8FF
   15965/    E342 : 4E71                		nop
   15966/    E344 : 01F8                		dc.w $1F8
   15967/    E346 : 25B4                		dc.w $25B4
   15968/    E348 : FCFF                		dc.w $FCFF
   15969/    E34A : 4E71                		nop
   15970/    E34C : 05F8                		dc.w $5F8
   15971/    E34E : 2DF4                		dc.w $2DF4
   15972/    E350 : F8FF                		dc.w $F8FF
   15973/    E352 :                     ; ---------------------------------------------------------------------------
   15974/    E352 :                     
   15975/    E352 :                     locret_E352:
   15976/    E352 : 4E75                		rts
   15977/    E354 :                     ; ---------------------------------------------------------------------------
   15978/    E354 :                     
   15979/    E354 :                     locret_E354:
   15980/    E354 : 4E75                		rts
   15981/    E356 :                     ; ---------------------------------------------------------------------------
   15982/    E356 :                     
   15983/    E356 :                     loc_E356:
   15984/    E356 : 4A2E 0028           		tst.b	$28(a6)
   15985/    E35A : 6620                		bne.s	loc_E37C
   15986/    E35C : 3D7C 0000 0004      		move.w	#0,4(a6)
   15987/    E362 : 3D7C 2020 0022      		move.w	#$2020,$22(a6)
   15988/    E368 : 2D7C 0000 E376      		move.l	#word_E376,$10(a6)
             E36E : 0010             
   15989/    E370 : 522E 0028           		addq.b	#1,$28(a6)
   15990/    E374 : 6006                		bra.s	loc_E37C
   15991/    E376 :                     ; ---------------------------------------------------------------------------
   15992/    E376 :                     word_E376:
   15993/    E376 : 0FF0                		dc.w $FF0
   15994/    E378 : 8001                		dc.w $8001
   15995/    E37A : F0FF                		dc.w $F0FF
   15996/    E37C :                     ; ---------------------------------------------------------------------------
   15997/    E37C :                     
   15998/    E37C :                     loc_E37C:
   15999/    E37C : 4EB9 0000 F2D0      		jsr	(loc_F2D0).l
   16000/    E382 : 6406                		bcc.s	loc_E38A
   16001/    E384 : 4EF9 0000 F286      		jmp	(sub_F286).l
   16002/    E38A :                     ; ---------------------------------------------------------------------------
   16003/    E38A :                     
   16004/    E38A :                     loc_E38A:
   16005/    E38A : 3078 D862           		movea.w	($FFFFD862).w,a0
   16006/    E38E : 4EB9 0000 EAA0      		jsr	(sub_EAA0).l
   16007/    E394 : 6402                		bcc.s	loc_E398
   16008/    E396 : 6110                		bsr.s	sub_E3A8
   16009/    E398 :                     
   16010/    E398 :                     loc_E398:
   16011/    E398 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16012/    E39C : 4EB9 0000 EAA0      		jsr	(sub_EAA0).l
   16013/    E3A2 : 6402                		bcc.s	locret_E3A6
   16014/    E3A4 : 6102                		bsr.s	sub_E3A8
   16015/    E3A6 :                     
   16016/    E3A6 :                     locret_E3A6:
   16017/    E3A6 : 4E75                		rts
   16018/    E3A8 :                     
   16019/    E3A8 :                     ; =============== S U B	R O U T	I N E =======================================
   16020/    E3A8 :                     
   16021/    E3A8 :                     
   16022/    E3A8 :                     sub_E3A8:
   16023/    E3A8 : 3028 0008           		move.w	8(a0),d0
   16024/    E3AC : 906E 0008           		sub.w	8(a6),d0
   16025/    E3B0 : 3228 000C           		move.w	$C(a0),d1
   16026/    E3B4 : 926E 000C           		sub.w	$C(a6),d1
   16027/    E3B8 : 7400                		moveq	#0,d2
   16028/    E3BA : 142E 0029           		move.b	$29(a6),d2
   16029/    E3BE : 4EFB 201E           		jmp	loc_E3DE(pc,d2.w)
   16030/    E3C2 :                     ; End of function sub_E3A8
   16031/    E3C2 :                     
   16032/    E3C2 :                     ; ---------------------------------------------------------------------------
   16033/    E3C2 :                     
   16034/    E3C2 :                     loc_E3C2:
   16035/    E3C2 : 08A8 0007 0025      		bclr	#7,$25(a0)
   16036/    E3C8 :                     
   16037/    E3C8 :                     loc_E3C8:
   16038/    E3C8 : 08A8 0001 0025      		bclr	#1,$25(a0)
   16039/    E3CE : 4E75                		rts
   16040/    E3D0 :                     ; ---------------------------------------------------------------------------
   16041/    E3D0 :                     
   16042/    E3D0 :                     loc_E3D0:
   16043/    E3D0 : 08A8 0007 0025      		bclr	#7,$25(a0)
   16044/    E3D6 :                     
   16045/    E3D6 :                     loc_E3D6:
   16046/    E3D6 : 08E8 0001 0025      		bset	#1,$25(a0)
   16047/    E3DC : 4E75                		rts
   16048/    E3DE :                     ; ---------------------------------------------------------------------------
   16049/    E3DE :                     
   16050/    E3DE :                     loc_E3DE:
   16051/    E3DE : 4A40                		tst.w	d0
   16052/    E3E0 : 6AE6                		bpl.s	loc_E3C8
   16053/    E3E2 : 60F2                		bra.s	loc_E3D6
   16054/    E3E4 :                     ; ---------------------------------------------------------------------------
   16055/    E3E4 : 4E71                		nop
   16056/    E3E6 : 4A40                		tst.w	d0
   16057/    E3E8 : 6AEC                		bpl.s	loc_E3D6
   16058/    E3EA : 60DC                		bra.s	loc_E3C8
   16059/    E3EC :                     ; ---------------------------------------------------------------------------
   16060/    E3EC : 4E71                		nop
   16061/    E3EE : 4A41                		tst.w	d1
   16062/    E3F0 : 6AD6                		bpl.s	loc_E3C8
   16063/    E3F2 : 60E2                		bra.s	loc_E3D6
   16064/    E3F4 :                     ; ---------------------------------------------------------------------------
   16065/    E3F4 : 4E71                		nop
   16066/    E3F6 : 4A41                		tst.w	d1
   16067/    E3F8 : 6ADC                		bpl.s	loc_E3D6
   16068/    E3FA : 60CC                		bra.s	loc_E3C8
   16069/    E3FC :                     ; ---------------------------------------------------------------------------
   16070/    E3FC : 4E71                		nop
   16071/    E3FE : 4A40                		tst.w	d0
   16072/    E400 : 6AC0                		bpl.s	loc_E3C2
   16073/    E402 : 6048                		bra.s	loc_E44C
   16074/    E404 :                     ; ---------------------------------------------------------------------------
   16075/    E404 : 4E71                		nop
   16076/    E406 : 4A40                		tst.w	d0
   16077/    E408 : 6AC6                		bpl.s	loc_E3D0
   16078/    E40A : 6032                		bra.s	loc_E43E
   16079/    E40C :                     ; ---------------------------------------------------------------------------
   16080/    E40C : 4E71                		nop
   16081/    E40E : 4A41                		tst.w	d1
   16082/    E410 : 6AB0                		bpl.s	loc_E3C2
   16083/    E412 : 6038                		bra.s	loc_E44C
   16084/    E414 :                     ; ---------------------------------------------------------------------------
   16085/    E414 : 4E71                		nop
   16086/    E416 : 4A41                		tst.w	d1
   16087/    E418 : 6AB6                		bpl.s	loc_E3D0
   16088/    E41A : 6022                		bra.s	loc_E43E
   16089/    E41C :                     ; ---------------------------------------------------------------------------
   16090/    E41C : 4E71                		nop
   16091/    E41E : 4A40                		tst.w	d0
   16092/    E420 : 6A1C                		bpl.s	loc_E43E
   16093/    E422 : 60AC                		bra.s	loc_E3D0
   16094/    E424 :                     ; ---------------------------------------------------------------------------
   16095/    E424 : 4E71                		nop
   16096/    E426 : 4A40                		tst.w	d0
   16097/    E428 : 6A22                		bpl.s	loc_E44C
   16098/    E42A : 6096                		bra.s	loc_E3C2
   16099/    E42C :                     ; ---------------------------------------------------------------------------
   16100/    E42C : 4E71                		nop
   16101/    E42E : 4A41                		tst.w	d1
   16102/    E430 : 6A0C                		bpl.s	loc_E43E
   16103/    E432 : 609C                		bra.s	loc_E3D0
   16104/    E434 :                     ; ---------------------------------------------------------------------------
   16105/    E434 : 4E71                		nop
   16106/    E436 : 4A41                		tst.w	d1
   16107/    E438 : 6A12                		bpl.s	loc_E44C
   16108/    E43A : 6086                		bra.s	loc_E3C2
   16109/    E43C :                     ; ---------------------------------------------------------------------------
   16110/    E43C : 4E71                		nop
   16111/    E43E :                     
   16112/    E43E :                     loc_E43E:
   16113/    E43E : 08E8 0007 0025      		bset	#7,$25(a0)
   16114/    E444 : 08A8 0001 0025      		bclr	#1,$25(a0)
   16115/    E44A : 4E75                		rts
   16116/    E44C :                     ; ---------------------------------------------------------------------------
   16117/    E44C :                     
   16118/    E44C :                     loc_E44C:
   16119/    E44C : 08E8 0007 0025      		bset	#7,$25(a0)
   16120/    E452 : 08E8 0001 0025      		bset	#1,$25(a0)
   16121/    E458 : 4E75                		rts
   16122/    E45A :                     ; ---------------------------------------------------------------------------
   16123/    E45A :                     
   16124/    E45A :                     loc_E45A:
   16125/    E45A : 4A2E 0028           		tst.b	$28(a6)
   16126/    E45E : 6620                		bne.s	loc_E480
   16127/    E460 : 3D7C 0000 0004      		move.w	#0,4(a6)
   16128/    E466 : 3D7C 2020 0022      		move.w	#$2020,$22(a6)
   16129/    E46C : 2D7C 0000 E47A      		move.l	#word_E47A,$10(a6)
             E472 : 0010             
   16130/    E474 : 522E 0028           		addq.b	#1,$28(a6)
   16131/    E478 : 6006                		bra.s	loc_E480
   16132/    E47A :                     ; ---------------------------------------------------------------------------
   16133/    E47A :                     word_E47A:
   16134/    E47A : 0FF0                		dc.w $FF0
   16135/    E47C : 8001                		dc.w $8001
   16136/    E47E : F0FF                		dc.w $F0FF
   16137/    E480 :                     ; ---------------------------------------------------------------------------
   16138/    E480 :                     
   16139/    E480 :                     loc_E480:
   16140/    E480 : 4EB9 0000 F2D0      		jsr	(loc_F2D0).l
   16141/    E486 : 6406                		bcc.s	loc_E48E
   16142/    E488 : 4EF9 0000 F286      		jmp	(sub_F286).l
   16143/    E48E :                     ; ---------------------------------------------------------------------------
   16144/    E48E :                     
   16145/    E48E :                     loc_E48E:
   16146/    E48E : 3078 D862           		movea.w	($FFFFD862).w,a0
   16147/    E492 : 4EB9 0000 EAA0      		jsr	(sub_EAA0).l
   16148/    E498 : 6402                		bcc.s	loc_E49C
   16149/    E49A : 6110                		bsr.s	sub_E4AC
   16150/    E49C :                     
   16151/    E49C :                     loc_E49C:
   16152/    E49C : 3078 D864           		movea.w	($FFFFD864).w,a0
   16153/    E4A0 : 4EB9 0000 EAA0      		jsr	(sub_EAA0).l
   16154/    E4A6 : 6402                		bcc.s	locret_E4AA
   16155/    E4A8 : 6102                		bsr.s	sub_E4AC
   16156/    E4AA :                     
   16157/    E4AA :                     locret_E4AA:
   16158/    E4AA : 4E75                		rts
   16159/    E4AC :                     
   16160/    E4AC :                     ; =============== S U B	R O U T	I N E =======================================
   16161/    E4AC :                     
   16162/    E4AC :                     
   16163/    E4AC :                     sub_E4AC:
   16164/    E4AC : 7000                		moveq	#0,d0
   16165/    E4AE : 102E 0029           		move.b	$29(a6),d0
   16166/    E4B2 : 4EFB 0002           		jmp	loc_E4B6(pc,d0.w)
   16167/    E4B6 :                     ; End of function sub_E4AC
   16168/    E4B6 :                     
   16169/    E4B6 :                     ; ---------------------------------------------------------------------------
   16170/    E4B6 :                     
   16171/    E4B6 :                     loc_E4B6:
   16172/    E4B6 : 6010                		bra.s	loc_E4C8
   16173/    E4B8 :                     ; ---------------------------------------------------------------------------
   16174/    E4B8 : 601C                		bra.s	loc_E4D6
   16175/    E4BA :                     ; ---------------------------------------------------------------------------
   16176/    E4BA : 6006                		bra.s	loc_E4C2
   16177/    E4BC :                     ; ---------------------------------------------------------------------------
   16178/    E4BC : 6012                		bra.s	loc_E4D0
   16179/    E4BE :                     ; ---------------------------------------------------------------------------
   16180/    E4BE : 601E                		bra.s	loc_E4DE
   16181/    E4C0 :                     ; ---------------------------------------------------------------------------
   16182/    E4C0 : 602A                		bra.s	loc_E4EC
   16183/    E4C2 :                     ; ---------------------------------------------------------------------------
   16184/    E4C2 :                     
   16185/    E4C2 :                     loc_E4C2:
   16186/    E4C2 : 08A8 0007 0025      		bclr	#7,$25(a0)
   16187/    E4C8 :                     
   16188/    E4C8 :                     loc_E4C8:
   16189/    E4C8 : 08A8 0001 0025      		bclr	#1,$25(a0)
   16190/    E4CE : 4E75                		rts
   16191/    E4D0 :                     ; ---------------------------------------------------------------------------
   16192/    E4D0 :                     
   16193/    E4D0 :                     loc_E4D0:
   16194/    E4D0 : 08A8 0007 0025      		bclr	#7,$25(a0)
   16195/    E4D6 :                     
   16196/    E4D6 :                     loc_E4D6:
   16197/    E4D6 : 08E8 0001 0025      		bset	#1,$25(a0)
   16198/    E4DC : 4E75                		rts
   16199/    E4DE :                     ; ---------------------------------------------------------------------------
   16200/    E4DE :                     
   16201/    E4DE :                     loc_E4DE:
   16202/    E4DE : 08E8 0007 0025      		bset	#7,$25(a0)
   16203/    E4E4 : 08A8 0001 0025      		bclr	#1,$25(a0)
   16204/    E4EA : 4E75                		rts
   16205/    E4EC :                     ; ---------------------------------------------------------------------------
   16206/    E4EC :                     
   16207/    E4EC :                     loc_E4EC:
   16208/    E4EC : 08E8 0007 0025      		bset	#7,$25(a0)
   16209/    E4F2 : 08E8 0001 0025      		bset	#1,$25(a0)
   16210/    E4F8 : 4E75                		rts
   16211/    E4FA :                     ; ---------------------------------------------------------------------------
   16212/    E4FA :                     
   16213/    E4FA :                     locret_E4FA:
   16214/    E4FA : 4E75                		rts
   16215/    E4FC :                     ; ---------------------------------------------------------------------------
   16216/    E4FC :                     
   16217/    E4FC :                     locret_E4FC:
   16218/    E4FC : 4E75                		rts
   16219/    E4FE :                     ; ---------------------------------------------------------------------------
   16220/    E4FE :                     
   16221/    E4FE :                     loc_E4FE:
   16222/    E4FE : 7007                		moveq	#7,d0
   16223/    E500 : 01AE 0028           		bclr	d0,$28(a6)
   16224/    E504 : 6720                		beq.s	loc_E526
   16225/    E506 : 2D7C 0004 233A      		move.l	#Map_SpikesUpLrg,obMap(a6)
             E50C : 0010             
   16226/    E50E : 3D7C 23BF 0020      		move.w	#$23BF,$20(a6)
   16227/    E514 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16228/    E51A : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   16229/    E520 : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   16230/    E526 :                     
   16231/    E526 :                     loc_E526:
   16232/    E526 : 3078 D862           		movea.w	($FFFFD862).w,a0
   16233/    E52A : 303C 000F           		move.w	#$F,d0
   16234/    E52E : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16235/    E534 : 672A                		beq.s	loc_E560
   16236/    E536 : 302E 0008           		move.w	8(a6),d0
   16237/    E53A : 322E 000C           		move.w	$C(a6),d1
   16238/    E53E : 3428 0008           		move.w	8(a0),d2
   16239/    E542 : 3628 000C           		move.w	$C(a0),d3
   16240/    E546 : 6100 0644           		bsr.w	sub_EB8C
   16241/    E54A : 0C44 0007           		cmpi.w	#7,d4
   16242/    E54E : 6708                		beq.s	loc_E558
   16243/    E550 : 0C44 0006           		cmpi.w	#6,d4
   16244/    E554 : 6702                		beq.s	loc_E558
   16245/    E556 : 6008                		bra.s	loc_E560
   16246/    E558 :                     ; ---------------------------------------------------------------------------
   16247/    E558 :                     
   16248/    E558 :                     loc_E558:
   16249/    E558 : 7001                		moveq	#1,d0
   16250/    E55A : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16251/    E560 :                     
   16252/    E560 :                     loc_E560:
   16253/    E560 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16254/    E564 : 303C 000F           		move.w	#$F,d0
   16255/    E568 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16256/    E56E : 672A                		beq.s	loc_E59A
   16257/    E570 : 302E 0008           		move.w	8(a6),d0
   16258/    E574 : 322E 000C           		move.w	$C(a6),d1
   16259/    E578 : 3428 0008           		move.w	8(a0),d2
   16260/    E57C : 3628 000C           		move.w	$C(a0),d3
   16261/    E580 : 6100 060A           		bsr.w	sub_EB8C
   16262/    E584 : 0C44 0007           		cmpi.w	#7,d4
   16263/    E588 : 6708                		beq.s	loc_E592
   16264/    E58A : 0C44 0006           		cmpi.w	#6,d4
   16265/    E58E : 6702                		beq.s	loc_E592
   16266/    E590 : 6008                		bra.s	loc_E59A
   16267/    E592 :                     ; ---------------------------------------------------------------------------
   16268/    E592 :                     
   16269/    E592 :                     loc_E592:
   16270/    E592 : 7001                		moveq	#1,d0
   16271/    E594 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16272/    E59A :                     
   16273/    E59A :                     loc_E59A:
   16274/    E59A : 6100 0D34           		bsr.w	loc_F2D0
   16275/    E59E : 6404                		bcc.s	locret_E5A4
   16276/    E5A0 : 6100 0CE4           		bsr.w	sub_F286
   16277/    E5A4 :                     
   16278/    E5A4 :                     locret_E5A4:
   16279/    E5A4 : 4E75                		rts
   16280/    E5A6 :                     ; ---------------------------------------------------------------------------
   16281/    E5A6 :                     
   16282/    E5A6 :                     loc_E5A6:
   16283/    E5A6 : 7007                		moveq	#7,d0
   16284/    E5A8 : 01AE 0028           		bclr	d0,$28(a6)
   16285/    E5AC : 6720                		beq.s	loc_E5CE
   16286/    E5AE : 2D7C 0004 233A      		move.l	#Map_SpikesUpLrg,obMap(a6)
             E5B4 : 0010             
   16287/    E5B6 : 3D7C 33BF 0020      		move.w	#$33BF,$20(a6)
   16288/    E5BC : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16289/    E5C2 : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   16290/    E5C8 : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   16291/    E5CE :                     
   16292/    E5CE :                     loc_E5CE:
   16293/    E5CE : 3078 D862           		movea.w	($FFFFD862).w,a0
   16294/    E5D2 : 303C 000F           		move.w	#$F,d0
   16295/    E5D6 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16296/    E5DC : 672A                		beq.s	loc_E608
   16297/    E5DE : 302E 0008           		move.w	8(a6),d0
   16298/    E5E2 : 322E 000C           		move.w	$C(a6),d1
   16299/    E5E6 : 3428 0008           		move.w	8(a0),d2
   16300/    E5EA : 3628 000C           		move.w	$C(a0),d3
   16301/    E5EE : 6100 059C           		bsr.w	sub_EB8C
   16302/    E5F2 : 0C44 0005           		cmpi.w	#5,d4
   16303/    E5F6 : 6708                		beq.s	loc_E600
   16304/    E5F8 : 0C44 0004           		cmpi.w	#4,d4
   16305/    E5FC : 6702                		beq.s	loc_E600
   16306/    E5FE : 6008                		bra.s	loc_E608
   16307/    E600 :                     ; ---------------------------------------------------------------------------
   16308/    E600 :                     
   16309/    E600 :                     loc_E600:
   16310/    E600 : 7001                		moveq	#1,d0
   16311/    E602 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16312/    E608 :                     
   16313/    E608 :                     loc_E608:
   16314/    E608 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16315/    E60C : 303C 000F           		move.w	#$F,d0
   16316/    E610 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16317/    E616 : 672A                		beq.s	loc_E642
   16318/    E618 : 302E 0008           		move.w	8(a6),d0
   16319/    E61C : 322E 000C           		move.w	$C(a6),d1
   16320/    E620 : 3428 0008           		move.w	8(a0),d2
   16321/    E624 : 3628 000C           		move.w	$C(a0),d3
   16322/    E628 : 6100 0562           		bsr.w	sub_EB8C
   16323/    E62C : 0C44 0005           		cmpi.w	#5,d4
   16324/    E630 : 6708                		beq.s	loc_E63A
   16325/    E632 : 0C44 0004           		cmpi.w	#4,d4
   16326/    E636 : 6702                		beq.s	loc_E63A
   16327/    E638 : 6008                		bra.s	loc_E642
   16328/    E63A :                     ; ---------------------------------------------------------------------------
   16329/    E63A :                     
   16330/    E63A :                     loc_E63A:
   16331/    E63A : 7001                		moveq	#1,d0
   16332/    E63C : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16333/    E642 :                     
   16334/    E642 :                     loc_E642:
   16335/    E642 : 6100 0C8C           		bsr.w	loc_F2D0
   16336/    E646 : 6404                		bcc.s	locret_E64C
   16337/    E648 : 6100 0C3C           		bsr.w	sub_F286
   16338/    E64C :                     
   16339/    E64C :                     locret_E64C:
   16340/    E64C : 4E75                		rts
   16341/    E64E :                     ; ---------------------------------------------------------------------------
   16342/    E64E :                     
   16343/    E64E :                     loc_E64E:
   16344/    E64E : 7007                		moveq	#7,d0
   16345/    E650 : 01AE 0028           		bclr	d0,$28(a6)
   16346/    E654 : 6720                		beq.s	loc_E676
   16347/    E656 : 2D7C 0004 2346      		move.l	#Map_SpikesLR,obMap(a6)
             E65C : 0010             
   16348/    E65E : 3D7C 23BF 0020      		move.w	#$23BF,$20(a6)
   16349/    E664 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16350/    E66A : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   16351/    E670 : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   16352/    E676 :                     
   16353/    E676 :                     loc_E676:
   16354/    E676 : 3078 D862           		movea.w	($FFFFD862).w,a0
   16355/    E67A : 303C 000F           		move.w	#$F,d0
   16356/    E67E : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16357/    E684 : 672A                		beq.s	loc_E6B0
   16358/    E686 : 302E 0008           		move.w	8(a6),d0
   16359/    E68A : 322E 000C           		move.w	$C(a6),d1
   16360/    E68E : 3428 0008           		move.w	8(a0),d2
   16361/    E692 : 3628 000C           		move.w	$C(a0),d3
   16362/    E696 : 6100 04F4           		bsr.w	sub_EB8C
   16363/    E69A : 0C44 0002           		cmpi.w	#2,d4
   16364/    E69E : 6708                		beq.s	loc_E6A8
   16365/    E6A0 : 0C44 0000           		cmpi.w	#0,d4
   16366/    E6A4 : 6702                		beq.s	loc_E6A8
   16367/    E6A6 : 6008                		bra.s	loc_E6B0
   16368/    E6A8 :                     ; ---------------------------------------------------------------------------
   16369/    E6A8 :                     
   16370/    E6A8 :                     loc_E6A8:
   16371/    E6A8 : 7001                		moveq	#1,d0
   16372/    E6AA : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16373/    E6B0 :                     
   16374/    E6B0 :                     loc_E6B0:
   16375/    E6B0 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16376/    E6B4 : 303C 000F           		move.w	#$F,d0
   16377/    E6B8 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16378/    E6BE : 672A                		beq.s	loc_E6EA
   16379/    E6C0 : 302E 0008           		move.w	8(a6),d0
   16380/    E6C4 : 322E 000C           		move.w	$C(a6),d1
   16381/    E6C8 : 3428 0008           		move.w	8(a0),d2
   16382/    E6CC : 3628 000C           		move.w	$C(a0),d3
   16383/    E6D0 : 6100 04BA           		bsr.w	sub_EB8C
   16384/    E6D4 : 0C44 0002           		cmpi.w	#2,d4
   16385/    E6D8 : 6708                		beq.s	loc_E6E2
   16386/    E6DA : 0C44 0000           		cmpi.w	#0,d4
   16387/    E6DE : 6702                		beq.s	loc_E6E2
   16388/    E6E0 : 6008                		bra.s	loc_E6EA
   16389/    E6E2 :                     ; ---------------------------------------------------------------------------
   16390/    E6E2 :                     
   16391/    E6E2 :                     loc_E6E2:
   16392/    E6E2 : 7001                		moveq	#1,d0
   16393/    E6E4 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16394/    E6EA :                     
   16395/    E6EA :                     loc_E6EA:
   16396/    E6EA : 6100 0BE4           		bsr.w	loc_F2D0
   16397/    E6EE : 6404                		bcc.s	locret_E6F4
   16398/    E6F0 : 6100 0B94           		bsr.w	sub_F286
   16399/    E6F4 :                     
   16400/    E6F4 :                     locret_E6F4:
   16401/    E6F4 : 4E75                		rts
   16402/    E6F6 :                     ; ---------------------------------------------------------------------------
   16403/    E6F6 :                     
   16404/    E6F6 :                     loc_E6F6:
   16405/    E6F6 : 7007                		moveq	#7,d0
   16406/    E6F8 : 01AE 0028           		bclr	d0,$28(a6)
   16407/    E6FC : 6720                		beq.s	loc_E71E
   16408/    E6FE : 2D7C 0004 2346      		move.l	#Map_SpikesLR,obMap(a6)
             E704 : 0010             
   16409/    E706 : 3D7C 2BBF 0020      		move.w	#$2BBF,$20(a6)
   16410/    E70C : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16411/    E712 : 1D7C 0010 0022      		move.b	#$10,$22(a6)
   16412/    E718 : 1D7C 0010 0023      		move.b	#$10,$23(a6)
   16413/    E71E :                     
   16414/    E71E :                     loc_E71E:
   16415/    E71E : 3078 D862           		movea.w	($FFFFD862).w,a0
   16416/    E722 : 303C 000F           		move.w	#$F,d0
   16417/    E726 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16418/    E72C : 672A                		beq.s	loc_E758
   16419/    E72E : 302E 0008           		move.w	8(a6),d0
   16420/    E732 : 322E 000C           		move.w	$C(a6),d1
   16421/    E736 : 3428 0008           		move.w	8(a0),d2
   16422/    E73A : 3628 000C           		move.w	$C(a0),d3
   16423/    E73E : 6100 044C           		bsr.w	sub_EB8C
   16424/    E742 : 0C44 0001           		cmpi.w	#1,d4
   16425/    E746 : 6708                		beq.s	loc_E750
   16426/    E748 : 0C44 0003           		cmpi.w	#3,d4
   16427/    E74C : 6702                		beq.s	loc_E750
   16428/    E74E : 6008                		bra.s	loc_E758
   16429/    E750 :                     ; ---------------------------------------------------------------------------
   16430/    E750 :                     
   16431/    E750 :                     loc_E750:
   16432/    E750 : 7001                		moveq	#1,d0
   16433/    E752 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16434/    E758 :                     
   16435/    E758 :                     loc_E758:
   16436/    E758 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16437/    E75C : 303C 000F           		move.w	#$F,d0
   16438/    E760 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16439/    E766 : 672A                		beq.s	loc_E792
   16440/    E768 : 302E 0008           		move.w	8(a6),d0
   16441/    E76C : 322E 000C           		move.w	$C(a6),d1
   16442/    E770 : 3428 0008           		move.w	8(a0),d2
   16443/    E774 : 3628 000C           		move.w	$C(a0),d3
   16444/    E778 : 6100 0412           		bsr.w	sub_EB8C
   16445/    E77C : 0C44 0001           		cmpi.w	#1,d4
   16446/    E780 : 6708                		beq.s	loc_E78A
   16447/    E782 : 0C44 0003           		cmpi.w	#3,d4
   16448/    E786 : 6702                		beq.s	loc_E78A
   16449/    E788 : 6008                		bra.s	loc_E792
   16450/    E78A :                     ; ---------------------------------------------------------------------------
   16451/    E78A :                     
   16452/    E78A :                     loc_E78A:
   16453/    E78A : 7001                		moveq	#1,d0
   16454/    E78C : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16455/    E792 :                     
   16456/    E792 :                     loc_E792:
   16457/    E792 : 6100 0B3C           		bsr.w	loc_F2D0
   16458/    E796 : 6404                		bcc.s	locret_E79C
   16459/    E798 : 6100 0AEC           		bsr.w	sub_F286
   16460/    E79C :                     
   16461/    E79C :                     locret_E79C:
   16462/    E79C : 4E75                		rts
   16463/    E79E :                     ; ---------------------------------------------------------------------------
   16464/    E79E :                     
   16465/    E79E :                     loc_E79E:
   16466/    E79E : 7007                		moveq	#7,d0
   16467/    E7A0 : 01AE 0028           		bclr	d0,$28(a6)
   16468/    E7A4 : 6720                		beq.s	loc_E7C6
   16469/    E7A6 : 2D7C 0004 234C      		move.l	#Map_SpikesAng,obMap(a6)
             E7AC : 0010             
   16470/    E7AE : 3D7C 2BBF 0020      		move.w	#$2BBF,$20(a6)
   16471/    E7B4 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16472/    E7BA : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   16473/    E7C0 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   16474/    E7C6 :                     
   16475/    E7C6 :                     loc_E7C6:
   16476/    E7C6 : 3078 D862           		movea.w	($FFFFD862).w,a0
   16477/    E7CA : 303C 000F           		move.w	#$F,d0
   16478/    E7CE : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16479/    E7D4 : 672A                		beq.s	loc_E800
   16480/    E7D6 : 302E 0008           		move.w	8(a6),d0
   16481/    E7DA : 322E 000C           		move.w	$C(a6),d1
   16482/    E7DE : 3428 0008           		move.w	8(a0),d2
   16483/    E7E2 : 3628 000C           		move.w	$C(a0),d3
   16484/    E7E6 : 6100 03A4           		bsr.w	sub_EB8C
   16485/    E7EA : 0C44 0006           		cmpi.w	#6,d4
   16486/    E7EE : 6708                		beq.s	loc_E7F8
   16487/    E7F0 : 0C44 0002           		cmpi.w	#2,d4
   16488/    E7F4 : 6702                		beq.s	loc_E7F8
   16489/    E7F6 : 6008                		bra.s	loc_E800
   16490/    E7F8 :                     ; ---------------------------------------------------------------------------
   16491/    E7F8 :                     
   16492/    E7F8 :                     loc_E7F8:
   16493/    E7F8 : 7001                		moveq	#1,d0
   16494/    E7FA : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16495/    E800 :                     
   16496/    E800 :                     loc_E800:
   16497/    E800 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16498/    E804 : 303C 000F           		move.w	#$F,d0
   16499/    E808 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16500/    E80E : 672A                		beq.s	loc_E83A
   16501/    E810 : 302E 0008           		move.w	8(a6),d0
   16502/    E814 : 322E 000C           		move.w	$C(a6),d1
   16503/    E818 : 3428 0008           		move.w	8(a0),d2
   16504/    E81C : 3628 000C           		move.w	$C(a0),d3
   16505/    E820 : 6100 036A           		bsr.w	sub_EB8C
   16506/    E824 : 0C44 0006           		cmpi.w	#6,d4
   16507/    E828 : 6708                		beq.s	loc_E832
   16508/    E82A : 0C44 0002           		cmpi.w	#2,d4
   16509/    E82E : 6702                		beq.s	loc_E832
   16510/    E830 : 6008                		bra.s	loc_E83A
   16511/    E832 :                     ; ---------------------------------------------------------------------------
   16512/    E832 :                     
   16513/    E832 :                     loc_E832:
   16514/    E832 : 7001                		moveq	#1,d0
   16515/    E834 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16516/    E83A :                     
   16517/    E83A :                     loc_E83A:
   16518/    E83A : 6100 0A94           		bsr.w	loc_F2D0
   16519/    E83E : 6404                		bcc.s	locret_E844
   16520/    E840 : 6100 0A44           		bsr.w	sub_F286
   16521/    E844 :                     
   16522/    E844 :                     locret_E844:
   16523/    E844 : 4E75                		rts
   16524/    E846 :                     ; ---------------------------------------------------------------------------
   16525/    E846 :                     
   16526/    E846 :                     loc_E846:
   16527/    E846 : 7007                		moveq	#7,d0
   16528/    E848 : 01AE 0028           		bclr	d0,$28(a6)
   16529/    E84C : 6720                		beq.s	loc_E86E
   16530/    E84E : 2D7C 0004 234C      		move.l	#Map_SpikesAng,obMap(a6)
             E854 : 0010             
   16531/    E856 : 3D7C 23BF 0020      		move.w	#$23BF,$20(a6)
   16532/    E85C : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16533/    E862 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   16534/    E868 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   16535/    E86E :                     
   16536/    E86E :                     loc_E86E:
   16537/    E86E : 3078 D862           		movea.w	($FFFFD862).w,a0
   16538/    E872 : 303C 000F           		move.w	#$F,d0
   16539/    E876 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16540/    E87C : 672A                		beq.s	loc_E8A8
   16541/    E87E : 302E 0008           		move.w	8(a6),d0
   16542/    E882 : 322E 000C           		move.w	$C(a6),d1
   16543/    E886 : 3428 0008           		move.w	8(a0),d2
   16544/    E88A : 3628 000C           		move.w	$C(a0),d3
   16545/    E88E : 6100 02FC           		bsr.w	sub_EB8C
   16546/    E892 : 0C44 0007           		cmpi.w	#7,d4
   16547/    E896 : 6708                		beq.s	loc_E8A0
   16548/    E898 : 0C44 0003           		cmpi.w	#3,d4
   16549/    E89C : 6702                		beq.s	loc_E8A0
   16550/    E89E : 6008                		bra.s	loc_E8A8
   16551/    E8A0 :                     ; ---------------------------------------------------------------------------
   16552/    E8A0 :                     
   16553/    E8A0 :                     loc_E8A0:
   16554/    E8A0 : 7001                		moveq	#1,d0
   16555/    E8A2 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16556/    E8A8 :                     
   16557/    E8A8 :                     loc_E8A8:
   16558/    E8A8 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16559/    E8AC : 303C 000F           		move.w	#$F,d0
   16560/    E8B0 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16561/    E8B6 : 672A                		beq.s	loc_E8E2
   16562/    E8B8 : 302E 0008           		move.w	8(a6),d0
   16563/    E8BC : 322E 000C           		move.w	$C(a6),d1
   16564/    E8C0 : 3428 0008           		move.w	8(a0),d2
   16565/    E8C4 : 3628 000C           		move.w	$C(a0),d3
   16566/    E8C8 : 6100 02C2           		bsr.w	sub_EB8C
   16567/    E8CC : 0C44 0007           		cmpi.w	#7,d4
   16568/    E8D0 : 6708                		beq.s	loc_E8DA
   16569/    E8D2 : 0C44 0003           		cmpi.w	#3,d4
   16570/    E8D6 : 6702                		beq.s	loc_E8DA
   16571/    E8D8 : 6008                		bra.s	loc_E8E2
   16572/    E8DA :                     ; ---------------------------------------------------------------------------
   16573/    E8DA :                     
   16574/    E8DA :                     loc_E8DA:
   16575/    E8DA : 7001                		moveq	#1,d0
   16576/    E8DC : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16577/    E8E2 :                     
   16578/    E8E2 :                     loc_E8E2:
   16579/    E8E2 : 6100 09EC           		bsr.w	loc_F2D0
   16580/    E8E6 : 6404                		bcc.s	locret_E8EC
   16581/    E8E8 : 6100 099C           		bsr.w	sub_F286
   16582/    E8EC :                     
   16583/    E8EC :                     locret_E8EC:
   16584/    E8EC : 4E75                		rts
   16585/    E8EE :                     ; ---------------------------------------------------------------------------
   16586/    E8EE :                     
   16587/    E8EE :                     loc_E8EE:
   16588/    E8EE : 7007                		moveq	#7,d0
   16589/    E8F0 : 01AE 0028           		bclr	d0,$28(a6)
   16590/    E8F4 : 6720                		beq.s	loc_E916
   16591/    E8F6 : 2D7C 0004 234C      		move.l	#Map_SpikesAng,obMap(a6)
             E8FC : 0010             
   16592/    E8FE : 3D7C 3BBF 0020      		move.w	#$3BBF,$20(a6)
   16593/    E904 : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16594/    E90A : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   16595/    E910 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   16596/    E916 :                     
   16597/    E916 :                     loc_E916:
   16598/    E916 : 3078 D862           		movea.w	($FFFFD862).w,a0
   16599/    E91A : 303C 000F           		move.w	#$F,d0
   16600/    E91E : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16601/    E924 : 672A                		beq.s	loc_E950
   16602/    E926 : 302E 0008           		move.w	8(a6),d0
   16603/    E92A : 322E 000C           		move.w	$C(a6),d1
   16604/    E92E : 3428 0008           		move.w	8(a0),d2
   16605/    E932 : 3628 000C           		move.w	$C(a0),d3
   16606/    E936 : 6100 0254           		bsr.w	sub_EB8C
   16607/    E93A : 0C44 0000           		cmpi.w	#0,d4
   16608/    E93E : 6708                		beq.s	loc_E948
   16609/    E940 : 0C44 0004           		cmpi.w	#4,d4
   16610/    E944 : 6702                		beq.s	loc_E948
   16611/    E946 : 6008                		bra.s	loc_E950
   16612/    E948 :                     ; ---------------------------------------------------------------------------
   16613/    E948 :                     
   16614/    E948 :                     loc_E948:
   16615/    E948 : 7001                		moveq	#1,d0
   16616/    E94A : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16617/    E950 :                     
   16618/    E950 :                     loc_E950:
   16619/    E950 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16620/    E954 : 303C 000F           		move.w	#$F,d0
   16621/    E958 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16622/    E95E : 672A                		beq.s	loc_E98A
   16623/    E960 : 302E 0008           		move.w	8(a6),d0
   16624/    E964 : 322E 000C           		move.w	$C(a6),d1
   16625/    E968 : 3428 0008           		move.w	8(a0),d2
   16626/    E96C : 3628 000C           		move.w	$C(a0),d3
   16627/    E970 : 6100 021A           		bsr.w	sub_EB8C
   16628/    E974 : 0C44 0000           		cmpi.w	#0,d4
   16629/    E978 : 6708                		beq.s	loc_E982
   16630/    E97A : 0C44 0004           		cmpi.w	#4,d4
   16631/    E97E : 6702                		beq.s	loc_E982
   16632/    E980 : 6008                		bra.s	loc_E98A
   16633/    E982 :                     ; ---------------------------------------------------------------------------
   16634/    E982 :                     
   16635/    E982 :                     loc_E982:
   16636/    E982 : 7001                		moveq	#1,d0
   16637/    E984 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16638/    E98A :                     
   16639/    E98A :                     loc_E98A:
   16640/    E98A : 6100 0944           		bsr.w	loc_F2D0
   16641/    E98E : 6404                		bcc.s	locret_E994
   16642/    E990 : 6100 08F4           		bsr.w	sub_F286
   16643/    E994 :                     
   16644/    E994 :                     locret_E994:
   16645/    E994 : 4E75                		rts
   16646/    E996 :                     ; ---------------------------------------------------------------------------
   16647/    E996 :                     
   16648/    E996 :                     loc_E996:
   16649/    E996 : 7007                		moveq	#7,d0
   16650/    E998 : 01AE 0028           		bclr	d0,$28(a6)
   16651/    E99C : 6720                		beq.s	loc_E9BE
   16652/    E99E : 2D7C 0004 234C      		move.l	#Map_SpikesAng,obMap(a6)
             E9A4 : 0010             
   16653/    E9A6 : 3D7C 33BF 0020      		move.w	#$33BF,$20(a6)
   16654/    E9AC : 3D7C 8080 0004      		move.w	#$8080,4(a6)
   16655/    E9B2 : 1D7C 000C 0022      		move.b	#$C,$22(a6)
   16656/    E9B8 : 1D7C 000C 0023      		move.b	#$C,$23(a6)
   16657/    E9BE :                     
   16658/    E9BE :                     loc_E9BE:
   16659/    E9BE : 3078 D862           		movea.w	($FFFFD862).w,a0
   16660/    E9C2 : 303C 000F           		move.w	#$F,d0
   16661/    E9C6 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16662/    E9CC : 672A                		beq.s	loc_E9F8
   16663/    E9CE : 302E 0008           		move.w	8(a6),d0
   16664/    E9D2 : 322E 000C           		move.w	$C(a6),d1
   16665/    E9D6 : 3428 0008           		move.w	8(a0),d2
   16666/    E9DA : 3628 000C           		move.w	$C(a0),d3
   16667/    E9DE : 6100 01AC           		bsr.w	sub_EB8C
   16668/    E9E2 : 0C44 0001           		cmpi.w	#1,d4
   16669/    E9E6 : 6708                		beq.s	loc_E9F0
   16670/    E9E8 : 0C44 0005           		cmpi.w	#5,d4
   16671/    E9EC : 6702                		beq.s	loc_E9F0
   16672/    E9EE : 6008                		bra.s	loc_E9F8
   16673/    E9F0 :                     ; ---------------------------------------------------------------------------
   16674/    E9F0 :                     
   16675/    E9F0 :                     loc_E9F0:
   16676/    E9F0 : 7001                		moveq	#1,d0
   16677/    E9F2 : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16678/    E9F8 :                     
   16679/    E9F8 :                     loc_E9F8:
   16680/    E9F8 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16681/    E9FC : 303C 000F           		move.w	#$F,d0
   16682/    EA00 : 4EB9 0000 CAD4      		jsr	(loc_CAD4).l
   16683/    EA06 : 672A                		beq.s	loc_EA32
   16684/    EA08 : 302E 0008           		move.w	8(a6),d0
   16685/    EA0C : 322E 000C           		move.w	$C(a6),d1
   16686/    EA10 : 3428 0008           		move.w	8(a0),d2
   16687/    EA14 : 3628 000C           		move.w	$C(a0),d3
   16688/    EA18 : 6100 0172           		bsr.w	sub_EB8C
   16689/    EA1C : 0C44 0001           		cmpi.w	#1,d4
   16690/    EA20 : 6708                		beq.s	loc_EA2A
   16691/    EA22 : 0C44 0005           		cmpi.w	#5,d4
   16692/    EA26 : 6702                		beq.s	loc_EA2A
   16693/    EA28 : 6008                		bra.s	loc_EA32
   16694/    EA2A :                     ; ---------------------------------------------------------------------------
   16695/    EA2A :                     
   16696/    EA2A :                     loc_EA2A:
   16697/    EA2A : 7001                		moveq	#1,d0
   16698/    EA2C : 4EB9 0000 CB90      		jsr	(loc_CB90).l
   16699/    EA32 :                     
   16700/    EA32 :                     loc_EA32:
   16701/    EA32 : 6100 089C           		bsr.w	loc_F2D0
   16702/    EA36 : 6404                		bcc.s	locret_EA3C
   16703/    EA38 : 6100 084C           		bsr.w	sub_F286
   16704/    EA3C :                     
   16705/    EA3C :                     locret_EA3C:
   16706/    EA3C : 4E75                		rts
   16707/    EA3E :                     
   16708/    EA3E :                     ; =============== S U B	R O U T	I N E =======================================
   16709/    EA3E :                     
   16710/    EA3E :                     
   16711/    EA3E :                     sub_EA3E:
   16712/    EA3E : 3028 0008           		move.w	8(a0),d0
   16713/    EA42 : 3228 000C           		move.w	$C(a0),d1
   16714/    EA46 : 342E 0008           		move.w	8(a6),d2
   16715/    EA4A : 362E 000C           		move.w	$C(a6),d3
   16716/    EA4E : 7800                		moveq	#0,d4
   16717/    EA50 : 7A00                		moveq	#0,d5
   16718/    EA52 : 1828 0022           		move.b	$22(a0),d4
   16719/    EA56 : 1A2E 0022           		move.b	$22(a6),d5
   16720/    EA5A : D845                		add.w	d5,d4
   16721/    EA5C : 3A00                		move.w	d0,d5
   16722/    EA5E : 9A42                		sub.w	d2,d5
   16723/    EA60 : 6A02                		bpl.s	loc_EA64
   16724/    EA62 : 4445                		neg.w	d5
   16725/    EA64 :                     
   16726/    EA64 :                     loc_EA64:
   16727/    EA64 : 9845                		sub.w	d5,d4
   16728/    EA66 : 6A02                		bpl.s	loc_EA6A
   16729/    EA68 : 4E75                		rts
   16730/    EA6A :                     ; ---------------------------------------------------------------------------
   16731/    EA6A :                     
   16732/    EA6A :                     loc_EA6A:
   16733/    EA6A : 7C00                		moveq	#0,d6
   16734/    EA6C : 7E00                		moveq	#0,d7
   16735/    EA6E : 1C28 0023           		move.b	$23(a0),d6
   16736/    EA72 : 1E2E 0023           		move.b	$23(a6),d7
   16737/    EA76 : DC47                		add.w	d7,d6
   16738/    EA78 : 3E01                		move.w	d1,d7
   16739/    EA7A : 9E43                		sub.w	d3,d7
   16740/    EA7C : 6A02                		bpl.s	loc_EA80
   16741/    EA7E : 4447                		neg.w	d7
   16742/    EA80 :                     
   16743/    EA80 :                     loc_EA80:
   16744/    EA80 : 9C47                		sub.w	d7,d6
   16745/    EA82 : 6A02                		bpl.s	loc_EA86
   16746/    EA84 : 4E75                		rts
   16747/    EA86 :                     ; ---------------------------------------------------------------------------
   16748/    EA86 :                     
   16749/    EA86 :                     loc_EA86:
   16750/    EA86 : BC44                		cmp.w	d4,d6
   16751/    EA88 : 640C                		bcc.s	loc_EA96
   16752/    EA8A : 6100 0074           		bsr.w	sub_EB00
   16753/    EA8E : 3200                		move.w	d0,d1
   16754/    EA90 : 3028 0008           		move.w	8(a0),d0
   16755/    EA94 : 4E75                		rts
   16756/    EA96 :                     ; ---------------------------------------------------------------------------
   16757/    EA96 :                     
   16758/    EA96 :                     loc_EA96:
   16759/    EA96 : 6100 0046           		bsr.w	sub_EADE
   16760/    EA9A : 3228 000C           		move.w	$C(a0),d1
   16761/    EA9E : 4E75                		rts
   16762/    EAA0 :                     ; End of function sub_EA3E
   16763/    EAA0 :                     
   16764/    EAA0 :                     
   16765/    EAA0 :                     ; =============== S U B	R O U T	I N E =======================================
   16766/    EAA0 :                     
   16767/    EAA0 :                     
   16768/    EAA0 :                     sub_EAA0:
   16769/    EAA0 : 7200                		moveq	#0,d1
   16770/    EAA2 : 1228 0022           		move.b	$22(a0),d1
   16771/    EAA6 : 7400                		moveq	#0,d2
   16772/    EAA8 : 142E 0022           		move.b	$22(a6),d2
   16773/    EAAC : D242                		add.w	d2,d1
   16774/    EAAE : 3028 0008           		move.w	8(a0),d0
   16775/    EAB2 : 906E 0008           		sub.w	8(a6),d0
   16776/    EAB6 : 6A02                		bpl.s	loc_EABA
   16777/    EAB8 : 4440                		neg.w	d0
   16778/    EABA :                     
   16779/    EABA :                     loc_EABA:
   16780/    EABA : B041                		cmp.w	d1,d0
   16781/    EABC : 6502                		bcs.s	loc_EAC0
   16782/    EABE : 4E75                		rts
   16783/    EAC0 :                     ; ---------------------------------------------------------------------------
   16784/    EAC0 :                     
   16785/    EAC0 :                     loc_EAC0:
   16786/    EAC0 : 7200                		moveq	#0,d1
   16787/    EAC2 : 1228 0023           		move.b	$23(a0),d1
   16788/    EAC6 : 7400                		moveq	#0,d2
   16789/    EAC8 : 142E 0023           		move.b	$23(a6),d2
   16790/    EACC : D242                		add.w	d2,d1
   16791/    EACE : 3028 000C           		move.w	$C(a0),d0
   16792/    EAD2 : 906E 000C           		sub.w	$C(a6),d0
   16793/    EAD6 : 6A02                		bpl.s	loc_EADA
   16794/    EAD8 : 4440                		neg.w	d0
   16795/    EADA :                     
   16796/    EADA :                     loc_EADA:
   16797/    EADA : B041                		cmp.w	d1,d0
   16798/    EADC : 4E75                		rts
   16799/    EADE :                     ; End of function sub_EAA0
   16800/    EADE :                     
   16801/    EADE :                     
   16802/    EADE :                     ; =============== S U B	R O U T	I N E =======================================
   16803/    EADE :                     
   16804/    EADE :                     
   16805/    EADE :                     sub_EADE:
   16806/    EADE : 7200                		moveq	#0,d1
   16807/    EAE0 : 1228 0022           		move.b	$22(a0),d1
   16808/    EAE4 : 7400                		moveq	#0,d2
   16809/    EAE6 : 142E 0022           		move.b	$22(a6),d2
   16810/    EAEA : D441                		add.w	d1,d2
   16811/    EAEC : 3028 0008           		move.w	8(a0),d0
   16812/    EAF0 : 322E 0008           		move.w	8(a6),d1
   16813/    EAF4 : B240                		cmp.w	d0,d1
   16814/    EAF6 : 6A02                		bpl.s	loc_EAFA
   16815/    EAF8 : 4442                		neg.w	d2
   16816/    EAFA :                     
   16817/    EAFA :                     loc_EAFA:
   16818/    EAFA : 3001                		move.w	d1,d0
   16819/    EAFC : 9042                		sub.w	d2,d0
   16820/    EAFE : 4E75                		rts
   16821/    EB00 :                     ; End of function sub_EADE
   16822/    EB00 :                     
   16823/    EB00 :                     
   16824/    EB00 :                     ; =============== S U B	R O U T	I N E =======================================
   16825/    EB00 :                     
   16826/    EB00 :                     
   16827/    EB00 :                     sub_EB00:
   16828/    EB00 : 7200                		moveq	#0,d1
   16829/    EB02 : 1228 0023           		move.b	$23(a0),d1
   16830/    EB06 : 7400                		moveq	#0,d2
   16831/    EB08 : 142E 0023           		move.b	$23(a6),d2
   16832/    EB0C : D441                		add.w	d1,d2
   16833/    EB0E : 3028 000C           		move.w	$C(a0),d0
   16834/    EB12 : 322E 000C           		move.w	$C(a6),d1
   16835/    EB16 : B240                		cmp.w	d0,d1
   16836/    EB18 : 6A02                		bpl.s	loc_EB1C
   16837/    EB1A : 4442                		neg.w	d2
   16838/    EB1C :                     
   16839/    EB1C :                     loc_EB1C:
   16840/    EB1C : 3001                		move.w	d1,d0
   16841/    EB1E : 9042                		sub.w	d2,d0
   16842/    EB20 : 4E75                		rts
   16843/    EB22 :                     ; End of function sub_EB00
   16844/    EB22 :                     
   16845/    EB22 :                     
   16846/    EB22 :                     ; =============== S U B	R O U T	I N E =======================================
   16847/    EB22 :                     
   16848/    EB22 :                     
   16849/    EB22 :                     sub_EB22:
   16850/    EB22 : 532E 0026           		subq.b	#1,$26(a6)
   16851/    EB26 : 6A04                		bpl.s	loc_EB2C
   16852/    EB28 : 422E 0027           		clr.b	$27(a6)
   16853/    EB2C :                     
   16854/    EB2C :                     loc_EB2C:
   16855/    EB2C : 6702                		beq.s	loc_EB30
   16856/    EB2E : 4E75                		rts
   16857/    EB30 :                     ; ---------------------------------------------------------------------------
   16858/    EB30 :                     
   16859/    EB30 :                     loc_EB30:
   16860/    EB30 : 7200                		moveq	#0,d1
   16861/    EB32 : 7400                		moveq	#0,d2
   16862/    EB34 :                     
   16863/    EB34 :                     loc_EB34:
   16864/    EB34 : 7000                		moveq	#0,d0
   16865/    EB36 : 102E 0027           		move.b	$27(a6),d0
   16866/    EB3A : 1231 0000           		move.b	(a1,d0.w),d1
   16867/    EB3E : 6B18                		bmi.s	loc_EB58
   16868/    EB40 : 1D41 0026           		move.b	d1,$26(a6)
   16869/    EB44 : 1231 0001           		move.b	1(a1,d0.w),d1
   16870/    EB48 : D241                		add.w	d1,d1
   16871/    EB4A : D0F0 1000           		adda.w	(a0,d1.w),a0
   16872/    EB4E : 542E 0027           		addq.b	#2,$27(a6)
   16873/    EB52 : 2D48 0010           		move.l	a0,$10(a6)
   16874/    EB56 : 4E75                		rts
   16875/    EB58 :                     ; ---------------------------------------------------------------------------
   16876/    EB58 :                     
   16877/    EB58 :                     loc_EB58:
   16878/    EB58 : D201                		add.b	d1,d1
   16879/    EB5A : 4EFB 1002           		jmp	loc_EB5E(pc,d1.w)
   16880/    EB5E :                     ; End of function sub_EB22
   16881/    EB5E :                     
   16882/    EB5E :                     ; ---------------------------------------------------------------------------
   16883/    EB5E :                     
   16884/    EB5E :                     loc_EB5E:
   16885/    EB5E : 6006                		bra.s	loc_EB66
   16886/    EB60 :                     ; ---------------------------------------------------------------------------
   16887/    EB60 : 600A                		bra.s	loc_EB6C
   16888/    EB62 :                     ; ---------------------------------------------------------------------------
   16889/    EB62 : 6014                		bra.s	loc_EB78
   16890/    EB64 :                     ; ---------------------------------------------------------------------------
   16891/    EB64 : 4E75                		rts
   16892/    EB66 :                     ; ---------------------------------------------------------------------------
   16893/    EB66 :                     
   16894/    EB66 :                     loc_EB66:
   16895/    EB66 : 422E 0027           		clr.b	$27(a6)
   16896/    EB6A : 60C8                		bra.s	loc_EB34
   16897/    EB6C :                     ; ---------------------------------------------------------------------------
   16898/    EB6C :                     
   16899/    EB6C :                     loc_EB6C:
   16900/    EB6C : 1231 0001           		move.b	1(a1,d0.w),d1
   16901/    EB70 : D201                		add.b	d1,d1
   16902/    EB72 : D32E 0027           		add.b	d1,$27(a6)
   16903/    EB76 : 60BC                		bra.s	loc_EB34
   16904/    EB78 :                     ; ---------------------------------------------------------------------------
   16905/    EB78 :                     
   16906/    EB78 :                     loc_EB78:
   16907/    EB78 : 1231 0001           		move.b	1(a1,d0.w),d1
   16908/    EB7C : 3F01                		move.w	d1,-(sp)
   16909/    EB7E : 542E 0027           		addq.b	#2,$27(a6)
   16910/    EB82 : 61B0                		bsr.s	loc_EB34
   16911/    EB84 : 301F                		move.w	(sp)+,d0
   16912/    EB86 : 003C 0001           		ori	#1,ccr
   16913/    EB8A : 4E75                		rts
   16914/    EB8C :                     
   16915/    EB8C :                     ; =============== S U B	R O U T	I N E =======================================
   16916/    EB8C :                     
   16917/    EB8C :                     
   16918/    EB8C :                     sub_EB8C:
   16919/    EB8C : 7800                		moveq	#0,d4
   16920/    EB8E : 9440                		sub.w	d0,d2
   16921/    EB90 : 6406                		bcc.s	loc_EB98
   16922/    EB92 : 0044 0001           		ori.w	#1,d4
   16923/    EB96 : 4442                		neg.w	d2
   16924/    EB98 :                     
   16925/    EB98 :                     loc_EB98:
   16926/    EB98 : 9641                		sub.w	d1,d3
   16927/    EB9A : 6406                		bcc.s	loc_EBA2
   16928/    EB9C : 0044 0002           		ori.w	#2,d4
   16929/    EBA0 : 4443                		neg.w	d3
   16930/    EBA2 :                     
   16931/    EBA2 :                     loc_EBA2:
   16932/    EBA2 : B642                		cmp.w	d2,d3
   16933/    EBA4 : 6304                		bls.s	locret_EBAA
   16934/    EBA6 : 0044 0004           		ori.w	#4,d4
   16935/    EBAA :                     
   16936/    EBAA :                     locret_EBAA:
   16937/    EBAA : 4E75                		rts
   16938/    EBAC :                     ; End of function sub_EB8C
   16939/    EBAC :                     
   16940/    EBAC :                     ; ---------------------------------------------------------------------------
   16941/    EBAC :                     
   16942/    EBAC :                     locret_EBAC:
   16943/    EBAC : 4E75                		rts
   16944/    EBAE :                     
   16945/    EBAE :                     ; =============== S U B	R O U T	I N E =======================================
   16946/    EBAE :                     
   16947/    EBAE :                     
   16948/    EBAE :                     Level_UpdateHUD:
   16949/    EBAE : 4DF8 D85C           		lea	($FFFFD85C).w,a6
   16950/    EBB2 :                     
   16951/    EBB2 :                     loc_EBB2:
   16952/    EBB2 : (MACRO)              		_move.w	0(a6),d0
   16952/    EBB2 :  (MACRO-2)                           insn2op move.w, 0(a6),d0
   16952/    EBB2 : =>FALSE                        if (chkop("0(a6)","0("))
   16952/    EBB2 :                                       if (chkop("d0","0("))
   16952/    EBB2 :                                             !move.w   0(a6),d0
   16952/    EBB2 :                                       else
   16952/    EBB2 :                                             !move.w   0(a6),1+d0
   16952/    EBB2 :                                             !org    *-1
   16952/    EBB2 :                                             !dc.b   0
   16952/    EBB2 : [16952]                                endif
   16952/    EBB2 : =>TRUE                         else
   16952/    EBB2 : =>FALSE                              if chkop("d0","d")
   16952/    EBB2 :                                       if (chkop("d0","0("))
   16952/    EBB2 :                     start:
   16952/    EBB2 :                                             !move.w   1+0(a6),d0
   16952/    EBB2 :                     end:
   16952/    EBB2 :                                             !org    start+3
   16952/    EBB2 :                                             !dc.b   0
   16952/    EBB2 :                                             !org    end
   16952/    EBB2 :                                       else
   16952/    EBB2 :                                             !move.w   1+0(a6),1+d0
   16952/    EBB2 :                                             !org    *-3
   16952/    EBB2 :                                             !dc.b   0
   16952/    EBB2 :                                             !org    *+1
   16952/    EBB2 :                                             !dc.b   0
   16952/    EBB2 : [16952]                                endif
   16952/    EBB2 : =>TRUE                               else
   16952/    EBB2 : 302E 0001                                   !move.w   1+0(a6),d0
   16952/    EBB5 :                                             !org    *-1
   16952/    EBB5 : 00                                          !dc.b   0
   16952/    EBB6 : [16952]                              endif
   16952/    EBB6 : [16952]                        endif
   16953/    EBB6 : 6602                		bne.s	loc_EBBA
   16954/    EBB8 : 4E75                		rts
   16955/    EBBA :                     ; ---------------------------------------------------------------------------
   16956/    EBBA :                     
   16957/    EBBA :                     loc_EBBA:
   16958/    EBBA : 3C40                		movea.w	d0,a6
   16959/    EBBC : 7000                		moveq	#0,d0
   16960/    EBBE : 102E 0006           		move.b	6(a6),d0
   16961/    EBC2 : 4EBB 0004           		jsr	loc_EBC8(pc,d0.w)
   16962/    EBC6 : 60EA                		bra.s	loc_EBB2
   16963/    EBC8 :                     ; End of function Level_UpdateHUD
   16964/    EBC8 :                     
   16965/    EBC8 :                     ; ---------------------------------------------------------------------------
   16966/    EBC8 :                     
   16967/    EBC8 :                     loc_EBC8:
   16968/    EBC8 : 6000 0016           		bra.w	loc_EBE0
   16969/    EBCC :                     ; ---------------------------------------------------------------------------
   16970/    EBCC : 6000 01AE           		bra.w	loc_ED7C
   16971/    EBD0 :                     ; ---------------------------------------------------------------------------
   16972/    EBD0 : 6000 023A           		bra.w	loc_EE0C
   16973/    EBD4 :                     ; ---------------------------------------------------------------------------
   16974/    EBD4 : 6000 0286           		bra.w	loc_EE5C
   16975/    EBD8 :                     ; ---------------------------------------------------------------------------
   16976/    EBD8 : 6000 0300           		bra.w	loc_EEDA
   16977/    EBDC :                     ; ---------------------------------------------------------------------------
   16978/    EBDC : 6000 037A           		bra.w	loc_EF58
   16979/    EBE0 :                     ; ---------------------------------------------------------------------------
   16980/    EBE0 :                     
   16981/    EBE0 :                     loc_EBE0:
   16982/    EBE0 : 4A78 D834           		tst.w	($FFFFD834).w
   16983/    EBE4 : 671C                		beq.s	loc_EC02
   16984/    EBE6 : 3078 D862           		movea.w	($FFFFD862).w,a0
   16985/    EBEA : 0C68 008F 000C      		cmpi.w	#$8F,$C(a0)
   16986/    EBF0 : 650C                		bcs.s	loc_EBFE
   16987/    EBF2 : 3078 D864           		movea.w	($FFFFD864).w,a0
   16988/    EBF6 : 0C68 008F 000C      		cmpi.w	#$8F,$C(a0)
   16989/    EBFC : 6404                		bcc.s	loc_EC02
   16990/    EBFE :                     
   16991/    EBFE :                     loc_EBFE:
   16992/    EBFE : 6000 0020           		bra.w	loc_EC20
   16993/    EC02 :                     ; ---------------------------------------------------------------------------
   16994/    EC02 :                     
   16995/    EC02 :                     loc_EC02:
   16996/    EC02 : 4A6E 0026           		tst.w	$26(a6)
   16997/    EC06 : 66F6                		bne.s	loc_EBFE
   16998/    EC08 : 3E2E 0024           		move.w	$24(a6),d7
   16999/    EC0C : 5247                		addq.w	#1,d7
   17000/    EC0E : 0C47 2D00           		cmpi.w	#$2D00,d7
   17001/    EC12 : 620C                		bhi.s	loc_EC20
   17002/    EC14 : 4A78 D834           		tst.w	($FFFFD834).w
   17003/    EC18 : 6648                		bne.s	loc_EC62
   17004/    EC1A : 0C47 0F00           		cmpi.w	#$F00,d7
   17005/    EC1E : 6342                		bls.s	loc_EC62
   17006/    EC20 :                     
   17007/    EC20 :                     loc_EC20:
   17008/    EC20 : 103C 0086           		move.b	#bgm_GameOver,d0
   17009/    EC24 : 4EB9 0000 6402      		jsr	(PlayMusic).l
   17010/    EC2A : 303C 0300           		move.w	#$300,d0			; this basically performs a spinlock for 12 seconds
   17011/    EC2E :                     
   17012/    EC2E :                     .loop:
   17013/    EC2E : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
   17014/    EC34 :                     
   17015/    EC34 :                     .wait:
   17016/    EC34 : 4A38 FFC9           		tst.b	(v_lagger).w	
   17017/    EC38 : 6AFA                		bpl.s	.wait
   17018/    EC3A : 51C8 FFF2           		dbf	d0,.loop
   17019/    EC3E : 4278 D824           		clr.w	(v_subgamemode).w
   17020/    EC42 : 3038 D834           		move.w	($FFFFD834).w,d0
   17021/    EC46 : 5240                		addq.w	#1,d0
   17022/    EC48 : 0240 0001           		andi.w	#1,d0
   17023/    EC4C : 31C0 D834           		move.w	d0,($FFFFD834).w
   17024/    EC50 : 4278 D836           		clr.w	($FFFFD836).w
   17025/    EC54 : 31FC 0010 D822      		move.w	#id_Field,(v_gamemode).w	; change game mode to Field
   17026/    EC5A : 2E78 0000           		movea.l	(RomStart).w,sp			; set the stack pointer
   17027/    EC5E : 4EF8 5000           		jmp	(MAINPROG).w			; jump to the main game loop
   17028/    EC62 :                     ; ---------------------------------------------------------------------------
   17029/    EC62 :                     
   17030/    EC62 :                     loc_EC62:
   17031/    EC62 : 3D47 0024           		move.w	d7,$24(a6)
   17032/    EC66 : 3C3C A500           		move.w	#$A500,d6
   17033/    EC6A : 3007                		move.w	d7,d0
   17034/    EC6C : EC48                		lsr.w	#6,d0
   17035/    EC6E : 48C0                		ext.l	d0
   17036/    EC70 : 80FC 000A           		divu.w	#$A,d0
   17037/    EC74 : 4840                		swap	d0
   17038/    EC76 : 1C00                		move.b	d0,d6
   17039/    EC78 : DC06                		add.b	d6,d6
   17040/    EC7A : 31C6 DA26           		move.w	d6,($FFFFDA26).w
   17041/    EC7E : 4840                		swap	d0
   17042/    EC80 : 48C0                		ext.l	d0
   17043/    EC82 : 80FC 0006           		divu.w	#6,d0
   17044/    EC86 : 1C00                		move.b	d0,d6
   17045/    EC88 : DC06                		add.b	d6,d6
   17046/    EC8A : 31C6 DA0E           		move.w	d6,($FFFFDA0E).w
   17047/    EC8E : 4840                		swap	d0
   17048/    EC90 : 1C00                		move.b	d0,d6
   17049/    EC92 : DC06                		add.b	d6,d6
   17050/    EC94 : 31C6 DA1E           		move.w	d6,($FFFFDA1E).w
   17051/    EC98 : 3007                		move.w	d7,d0
   17052/    EC9A : 0240 003F           		andi.w	#$3F,d0
   17053/    EC9E : 103B 0046           		move.b	unk_ECE6(pc,d0.w),d0
   17054/    ECA2 : 1C00                		move.b	d0,d6
   17055/    ECA4 : E80E                		lsr.b	#4,d6
   17056/    ECA6 : DC06                		add.b	d6,d6
   17057/    ECA8 : 31C6 DA36           		move.w	d6,($FFFFDA36).w
   17058/    ECAC : 1C00                		move.b	d0,d6
   17059/    ECAE : 0206 000F           		andi.b	#$F,d6
   17060/    ECB2 : DC06                		add.b	d6,d6
   17061/    ECB4 : 31C6 DA3E           		move.w	d6,($FFFFDA3E).w
   17062/    ECB8 : 302E 0024           		move.w	$24(a6),d0
   17063/    ECBC : 0C40 2580           		cmpi.w	#$2580,d0
   17064/    ECC0 : 640C                		bcc.s	loc_ECCE
   17065/    ECC2 : 4A78 D834           		tst.w	($FFFFD834).w
   17066/    ECC6 : 661C                		bne.s	locret_ECE4
   17067/    ECC8 : 0C40 0780           		cmpi.w	#$780,d0
   17068/    ECCC : 6516                		bcs.s	locret_ECE4
   17069/    ECCE :                     
   17070/    ECCE :                     loc_ECCE:
   17071/    ECCE : 0240 000F           		andi.w	#$F,d0
   17072/    ECD2 : 6610                		bne.s	locret_ECE4
   17073/    ECD4 : 303C 2000           		move.w	#$2000,d0
   17074/    ECD8 : B178 D9F6           		eor.w	d0,($FFFFD9F6).w
   17075/    ECDC : B178 D9FE           		eor.w	d0,($FFFFD9FE).w
   17076/    ECE0 : B178 DA06           		eor.w	d0,($FFFFDA06).w
   17077/    ECE4 :                     
   17078/    ECE4 :                     locret_ECE4:
   17079/    ECE4 : 4E75                		rts
   17080/    ECE6 :                     ; ---------------------------------------------------------------------------
   17081/    ECE6 : 00                  unk_ECE6:	dc.b   0
   17082/    ECE7 : 02                  		dc.b   2
   17083/    ECE8 : 03                  		dc.b   3
   17084/    ECE9 : 05                  		dc.b   5
   17085/    ECEA : 06                  		dc.b   6
   17086/    ECEB : 08                  		dc.b   8
   17087/    ECEC : 09                  		dc.b   9
   17088/    ECED : 11                  		dc.b $11
   17089/    ECEE : 13                  		dc.b $13
   17090/    ECEF : 14                  		dc.b $14
   17091/    ECF0 : 16                  		dc.b $16
   17092/    ECF1 : 17                  		dc.b $17
   17093/    ECF2 : 19                  		dc.b $19
   17094/    ECF3 : 20                  		dc.b $20
   17095/    ECF4 : 22                  		dc.b $22
   17096/    ECF5 : 23                  		dc.b $23
   17097/    ECF6 : 25                  		dc.b $25
   17098/    ECF7 : 27                  		dc.b $27
   17099/    ECF8 : 28                  		dc.b $28
   17100/    ECF9 : 30                  		dc.b $30
   17101/    ECFA : 31                  		dc.b $31
   17102/    ECFB : 33                  		dc.b $33
   17103/    ECFC : 34                  		dc.b $34
   17104/    ECFD : 36                  		dc.b $36
   17105/    ECFE : 38                  		dc.b $38
   17106/    ECFF : 39                  		dc.b $39
   17107/    ED00 : 41                  		dc.b $41
   17108/    ED01 : 42                  		dc.b $42
   17109/    ED02 : 44                  		dc.b $44
   17110/    ED03 : 45                  		dc.b $45
   17111/    ED04 : 47                  		dc.b $47
   17112/    ED05 : 48                  		dc.b $48
   17113/    ED06 : 50                  		dc.b $50
   17114/    ED07 : 52                  		dc.b $52
   17115/    ED08 : 53                  		dc.b $53
   17116/    ED09 : 55                  		dc.b $55
   17117/    ED0A : 56                  		dc.b $56
   17118/    ED0B : 58                  		dc.b $58
   17119/    ED0C : 59                  		dc.b $59
   17120/    ED0D : 61                  		dc.b $61
   17121/    ED0E : 63                  		dc.b $63
   17122/    ED0F : 64                  		dc.b $64
   17123/    ED10 : 66                  		dc.b $66
   17124/    ED11 : 67                  		dc.b $67
   17125/    ED12 : 69                  		dc.b $69
   17126/    ED13 : 70                  		dc.b $70
   17127/    ED14 : 72                  		dc.b $72
   17128/    ED15 : 73                  		dc.b $73
   17129/    ED16 : 75                  		dc.b $75
   17130/    ED17 : 77                  		dc.b $77
   17131/    ED18 : 78                  		dc.b $78
   17132/    ED19 : 80                  		dc.b $80
   17133/    ED1A : 81                  		dc.b $81
   17134/    ED1B : 83                  		dc.b $83
   17135/    ED1C : 84                  		dc.b $84
   17136/    ED1D : 86                  		dc.b $86
   17137/    ED1E : 88                  		dc.b $88
   17138/    ED1F : 89                  		dc.b $89
   17139/    ED20 : 91                  		dc.b $91
   17140/    ED21 : 92                  		dc.b $92
   17141/    ED22 : 94                  		dc.b $94
   17142/    ED23 : 95                  		dc.b $95
   17143/    ED24 : 97                  		dc.b $97
   17144/    ED25 : 99                  		dc.b $99
   17145/    ED26 :                     
   17146/    ED26 :                     ; =============== S U B	R O U T	I N E =======================================
   17147/    ED26 :                     
   17148/    ED26 :                     sub_ED26:
   17149/    ED26 : 3038 D834           		move.w	($FFFFD834).w,d0
   17150/    ED2A : E388                		lsl.l	#1,d0
   17151/    ED2C : 4EFB 0002           		jmp	loc_ED30(pc,d0.w)
   17152/    ED30 :                     ; End of function sub_ED26
   17153/    ED30 :                     
   17154/    ED30 :                     ; ---------------------------------------------------------------------------
   17155/    ED30 :                     
   17156/    ED30 :                     loc_ED30:
   17157/    ED30 : 6002                		bra.s	locret_ED34
   17158/    ED32 :                     ; ---------------------------------------------------------------------------
   17159/    ED32 : 6002                		bra.s	loc_ED36
   17160/    ED34 :                     ; ---------------------------------------------------------------------------
   17161/    ED34 :                     
   17162/    ED34 :                     locret_ED34:
   17163/    ED34 : 4E75                		rts
   17164/    ED36 :                     ; ---------------------------------------------------------------------------
   17165/    ED36 :                     
   17166/    ED36 :                     loc_ED36:
   17167/    ED36 : 7010                		moveq	#$10,d0
   17168/    ED38 : 4EB8 1918           		jsr	(sub_1918).w
   17169/    ED3C : 6B00 0020           		bmi.w	loc_ED5E
   17170/    ED40 : 7E00                		moveq	#0,d7
   17171/    ED42 : 3E38 D83A           		move.w	($FFFFD83A).w,d7
   17172/    ED46 : 0247 0003           		andi.w	#3,d7
   17173/    ED4A : 5247                		addq.w	#1,d7
   17174/    ED4C : E58F                		lsl.l	#2,d7
   17175/    ED4E : 1147 0006           		move.b	d7,6(a0)
   17176/    ED52 : 317C 0000 0026      		move.w	#0,$26(a0)
   17177/    ED58 : 317C 0000 0024      		move.w	#0,$24(a0)
   17178/    ED5E :                     
   17179/    ED5E :                     loc_ED5E:
   17180/    ED5E : 7010                		moveq	#$10,d0
   17181/    ED60 : 4EB8 1918           		jsr	(sub_1918).w
   17182/    ED64 : 6B00 0014           		bmi.w	locret_ED7A
   17183/    ED68 : 117C 0014 0006      		move.b	#$14,6(a0)
   17184/    ED6E : 317C 0000 0026      		move.w	#0,$26(a0)
   17185/    ED74 : 317C 0000 0024      		move.w	#0,$24(a0)
   17186/    ED7A :                     
   17187/    ED7A :                     locret_ED7A:
   17188/    ED7A : 4E75                		rts
   17189/    ED7C :                     ; ---------------------------------------------------------------------------
   17190/    ED7C :                     
   17191/    ED7C :                     loc_ED7C:
   17192/    ED7C : 526E 0024           		addq.w	#1,$24(a6)
   17193/    ED80 : 026E 0003 0024      		andi.w	#3,$24(a6)
   17194/    ED86 : 661E                		bne.s	loc_EDA6
   17195/    ED88 : 526E 0026           		addq.w	#1,$26(a6)
   17196/    ED8C : 026E 0007 0026      		andi.w	#7,$26(a6)
   17197/    ED92 : 7400                		moveq	#0,d2
   17198/    ED94 : 342E 0026           		move.w	$26(a6),d2
   17199/    ED98 : E38A                		lsl.l	#1,d2
   17200/    ED9A : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17201/    ED9E : 303B 2044           		move.w	word_EDE4(pc,d2.w),d0
   17202/    EDA2 : 3140 007A           		move.w	d0,$7A(a0)
   17203/    EDA6 :                     
   17204/    EDA6 :                     loc_EDA6:
   17205/    EDA6 : 526E 0028           		addq.w	#1,$28(a6)
   17206/    EDAA : 026E 0007 0028      		andi.w	#7,$28(a6)
   17207/    EDB0 : 6630                		bne.s	locret_EDE2
   17208/    EDB2 : 526E 002A           		addq.w	#1,$2A(a6)
   17209/    EDB6 : 342E 002A           		move.w	$2A(a6),d2
   17210/    EDBA : 0C42 0006           		cmpi.w	#6,d2
   17211/    EDBE : 6606                		bne.s	loc_EDC6
   17212/    EDC0 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   17213/    EDC6 :                     
   17214/    EDC6 :                     loc_EDC6:
   17215/    EDC6 : 7400                		moveq	#0,d2
   17216/    EDC8 : 342E 002A           		move.w	$2A(a6),d2
   17217/    EDCC : E38A                		lsl.l	#1,d2
   17218/    EDCE : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17219/    EDD2 : 303B 2020           		move.w	word_EDF4(pc,d2.w),d0
   17220/    EDD6 : 3140 007C           		move.w	d0,$7C(a0)
   17221/    EDDA : 303B 2024           		move.w	word_EE00(pc,d2.w),d0
   17222/    EDDE : 3140 007E           		move.w	d0,$7E(a0)
   17223/    EDE2 :                     
   17224/    EDE2 :                     locret_EDE2:
   17225/    EDE2 : 4E75                		rts
   17226/    EDE4 :                     ; ---------------------------------------------------------------------------
   17227/    EDE4 : 000E                word_EDE4:	dc.w $E
   17228/    EDE6 : 000C                		dc.w $C
   17229/    EDE8 : 000A                		dc.w $A
   17230/    EDEA : 0008                		dc.w 8
   17231/    EDEC : 0006                		dc.w 6
   17232/    EDEE : 0008                		dc.w 8
   17233/    EDF0 : 000A                		dc.w $A
   17234/    EDF2 : 000C                		dc.w $C
   17235/    EDF4 : 0A66                word_EDF4:	dc.w $A66
   17236/    EDF6 : 0C66                		dc.w $C66
   17237/    EDF8 : 0C86                		dc.w $C86
   17238/    EDFA : 0C88                		dc.w $C88
   17239/    EDFC : 0A88                		dc.w $A88
   17240/    EDFE : 0A68                		dc.w $A68
   17241/    EE00 : 0C88                word_EE00:	dc.w $C88
   17242/    EE02 : 0C86                		dc.w $C86
   17243/    EE04 : 0C66                		dc.w $C66
   17244/    EE06 : 0A66                		dc.w $A66
   17245/    EE08 : 0A68                		dc.w $A68
   17246/    EE0A : 0A88                		dc.w $A88
   17247/    EE0C :                     ; ---------------------------------------------------------------------------
   17248/    EE0C :                     
   17249/    EE0C :                     loc_EE0C:
   17250/    EE0C : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17251/    EE10 : 303C 0006           		move.w	#6,d0
   17252/    EE14 : 3140 007A           		move.w	d0,$7A(a0)
   17253/    EE18 : 526E 0028           		addq.w	#1,$28(a6)
   17254/    EE1C : 026E 0007 0028      		andi.w	#7,$28(a6)
   17255/    EE22 : 6626                		bne.s	locret_EE4A
   17256/    EE24 : 526E 002A           		addq.w	#1,$2A(a6)
   17257/    EE28 : 026E 0003 002A      		andi.w	#3,$2A(a6)
   17258/    EE2E : 7400                		moveq	#0,d2
   17259/    EE30 : 342E 002A           		move.w	$2A(a6),d2
   17260/    EE34 : E38A                		lsl.l	#1,d2
   17261/    EE36 : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17262/    EE3A : 303B 2010           		move.w	word_EE4C(pc,d2.w),d0
   17263/    EE3E : 3140 007C           		move.w	d0,$7C(a0)
   17264/    EE42 : 303B 2010           		move.w	word_EE54(pc,d2.w),d0
   17265/    EE46 : 3140 007E           		move.w	d0,$7E(a0)
   17266/    EE4A :                     
   17267/    EE4A :                     locret_EE4A:
   17268/    EE4A : 4E75                		rts
   17269/    EE4C :                     ; ---------------------------------------------------------------------------
   17270/    EE4C : 0800                word_EE4C:	dc.w $800
   17271/    EE4E : 0820                		dc.w $820
   17272/    EE50 : 0840                		dc.w $840
   17273/    EE52 : 0820                		dc.w $820
   17274/    EE54 : 0840                word_EE54:	dc.w $840
   17275/    EE56 : 0820                		dc.w $820
   17276/    EE58 : 0800                		dc.w $800
   17277/    EE5A : 0820                		dc.w $820
   17278/    EE5C :                     ; ---------------------------------------------------------------------------
   17279/    EE5C :                     
   17280/    EE5C :                     loc_EE5C:
   17281/    EE5C : 526E 0024           		addq.w	#1,$24(a6)
   17282/    EE60 : 026E 0003 0024      		andi.w	#3,$24(a6)
   17283/    EE66 : 661E                		bne.s	loc_EE86
   17284/    EE68 : 526E 0026           		addq.w	#1,$26(a6)
   17285/    EE6C : 026E 0007 0026      		andi.w	#7,$26(a6)
   17286/    EE72 : 7400                		moveq	#0,d2
   17287/    EE74 : 342E 0026           		move.w	$26(a6),d2
   17288/    EE78 : E38A                		lsl.l	#1,d2
   17289/    EE7A : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17290/    EE7E : 303B 203A           		move.w	word_EEBA(pc,d2.w),d0
   17291/    EE82 : 3140 007A           		move.w	d0,$7A(a0)
   17292/    EE86 :                     
   17293/    EE86 :                     loc_EE86:
   17294/    EE86 : 526E 0028           		addq.w	#1,$28(a6)
   17295/    EE8A : 026E 0007 0028      		andi.w	#7,$28(a6)
   17296/    EE90 : 6626                		bne.s	locret_EEB8
   17297/    EE92 : 526E 002A           		addq.w	#1,$2A(a6)
   17298/    EE96 : 026E 0003 002A      		andi.w	#3,$2A(a6)
   17299/    EE9C : 7400                		moveq	#0,d2
   17300/    EE9E : 342E 002A           		move.w	$2A(a6),d2
   17301/    EEA2 : E38A                		lsl.l	#1,d2
   17302/    EEA4 : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17303/    EEA8 : 303B 2020           		move.w	word_EECA(pc,d2.w),d0
   17304/    EEAC : 3140 007C           		move.w	d0,$7C(a0)
   17305/    EEB0 : 303B 2020           		move.w	word_EED2(pc,d2.w),d0
   17306/    EEB4 : 3140 007E           		move.w	d0,$7E(a0)
   17307/    EEB8 :                     
   17308/    EEB8 :                     locret_EEB8:
   17309/    EEB8 : 4E75                		rts
   17310/    EEBA :                     ; ---------------------------------------------------------------------------
   17311/    EEBA : 000E                word_EEBA:	dc.w $E
   17312/    EEBC : 000C                		dc.w $C
   17313/    EEBE : 000A                		dc.w $A
   17314/    EEC0 : 0008                		dc.w 8
   17315/    EEC2 : 0006                		dc.w 6
   17316/    EEC4 : 0008                		dc.w 8
   17317/    EEC6 : 000A                		dc.w $A
   17318/    EEC8 : 000C                		dc.w $C
   17319/    EECA : 0828                word_EECA:	dc.w $828
   17320/    EECC : 0628                		dc.w $628
   17321/    EECE : 062A                		dc.w $62A
   17322/    EED0 : 082A                		dc.w $82A
   17323/    EED2 : 062A                word_EED2:	dc.w $62A
   17324/    EED4 : 082A                		dc.w $82A
   17325/    EED6 : 0828                		dc.w $828
   17326/    EED8 : 0628                		dc.w $628
   17327/    EEDA :                     ; ---------------------------------------------------------------------------
   17328/    EEDA :                     
   17329/    EEDA :                     loc_EEDA:
   17330/    EEDA : 526E 0024           		addq.w	#1,$24(a6)
   17331/    EEDE : 026E 0003 0024      		andi.w	#3,$24(a6)
   17332/    EEE4 : 661E                		bne.s	loc_EF04
   17333/    EEE6 : 526E 0026           		addq.w	#1,$26(a6)
   17334/    EEEA : 026E 0007 0026      		andi.w	#7,$26(a6)
   17335/    EEF0 : 7400                		moveq	#0,d2
   17336/    EEF2 : 342E 0026           		move.w	$26(a6),d2
   17337/    EEF6 : E38A                		lsl.l	#1,d2
   17338/    EEF8 : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17339/    EEFC : 303B 203A           		move.w	word_EF38(pc,d2.w),d0
   17340/    EF00 : 3140 007A           		move.w	d0,$7A(a0)
   17341/    EF04 :                     
   17342/    EF04 :                     loc_EF04:
   17343/    EF04 : 526E 0028           		addq.w	#1,$28(a6)
   17344/    EF08 : 026E 0007 0028      		andi.w	#7,$28(a6)
   17345/    EF0E : 6626                		bne.s	locret_EF36
   17346/    EF10 : 526E 002A           		addq.w	#1,$2A(a6)
   17347/    EF14 : 026E 0003 002A      		andi.w	#3,$2A(a6)
   17348/    EF1A : 7400                		moveq	#0,d2
   17349/    EF1C : 342E 002A           		move.w	$2A(a6),d2
   17350/    EF20 : E38A                		lsl.l	#1,d2
   17351/    EF22 : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17352/    EF26 : 303B 2020           		move.w	word_EF48(pc,d2.w),d0
   17353/    EF2A : 3140 007C           		move.w	d0,$7C(a0)
   17354/    EF2E : 303B 2020           		move.w	word_EF50(pc,d2.w),d0
   17355/    EF32 : 3140 007E           		move.w	d0,$7E(a0)
   17356/    EF36 :                     
   17357/    EF36 :                     locret_EF36:
   17358/    EF36 : 4E75                		rts
   17359/    EF38 :                     ; ---------------------------------------------------------------------------
   17360/    EF38 : 000E                word_EF38:	dc.w $E
   17361/    EF3A : 000C                		dc.w $C
   17362/    EF3C : 000A                		dc.w $A
   17363/    EF3E : 0008                		dc.w 8
   17364/    EF40 : 0006                		dc.w 6
   17365/    EF42 : 0008                		dc.w 8
   17366/    EF44 : 000A                		dc.w $A
   17367/    EF46 : 000C                		dc.w $C
   17368/    EF48 : 0200                word_EF48:	dc.w $200
   17369/    EF4A : 0400                		dc.w $400
   17370/    EF4C : 0600                		dc.w $600
   17371/    EF4E : 0400                		dc.w $400
   17372/    EF50 : 0600                word_EF50:	dc.w $600
   17373/    EF52 : 0400                		dc.w $400
   17374/    EF54 : 0200                		dc.w $200
   17375/    EF56 : 0400                		dc.w $400
   17376/    EF58 :                     ; ---------------------------------------------------------------------------
   17377/    EF58 :                     
   17378/    EF58 :                     loc_EF58:
   17379/    EF58 : 526E 0028           		addq.w	#1,$28(a6)
   17380/    EF5C : 026E 0007 0028      		andi.w	#7,$28(a6)
   17381/    EF62 : 663E                		bne.s	locret_EFA2
   17382/    EF64 : 526E 002A           		addq.w	#1,$2A(a6)
   17383/    EF68 : 026E 0007 002A      		andi.w	#7,$2A(a6)
   17384/    EF6E : 342E 002A           		move.w	$2A(a6),d2
   17385/    EF72 : 0C42 0006           		cmpi.w	#6,d2
   17386/    EF76 : 6606                		bne.s	loc_EF7E
   17387/    EF78 : 3D7C 0000 002A      		move.w	#0,$2A(a6)
   17388/    EF7E :                     
   17389/    EF7E :                     loc_EF7E:
   17390/    EF7E : 7400                		moveq	#0,d2
   17391/    EF80 : 342E 002A           		move.w	$2A(a6),d2
   17392/    EF84 : E38A                		lsl.l	#1,d2
   17393/    EF86 : 41F8 D3E4           		lea	($FFFFD3E4).w,a0
   17394/    EF8A : 303B 2018           		move.w	word_EFA4(pc,d2.w),d0
   17395/    EF8E : 3140 0054           		move.w	d0,$54(a0)
   17396/    EF92 : 303B 2020           		move.w	word_EFB4(pc,d2.w),d0
   17397/    EF96 : 3140 0056           		move.w	d0,$56(a0)
   17398/    EF9A : 303B 2028           		move.w	word_EFC4(pc,d2.w),d0
   17399/    EF9E : 3140 0058           		move.w	d0,$58(a0)
   17400/    EFA2 :                     
   17401/    EFA2 :                     locret_EFA2:
   17402/    EFA2 : 4E75                		rts
   17403/    EFA4 :                     ; ---------------------------------------------------------------------------
   17404/    EFA4 : 00EE                word_EFA4:	dc.w $EE
   17405/    EFA6 : 00AC                		dc.w $AC
   17406/    EFA8 : 0068                		dc.w $68
   17407/    EFAA : 0046                		dc.w $46
   17408/    EFAC : 0024                		dc.w $24
   17409/    EFAE : 0046                		dc.w $46
   17410/    EFB0 : 0068                		dc.w $68
   17411/    EFB2 : 00AC                		dc.w $AC
   17412/    EFB4 : 006A                word_EFB4:	dc.w $6A
   17413/    EFB6 : 0048                		dc.w $48
   17414/    EFB8 : 0024                		dc.w $24
   17415/    EFBA : 0022                		dc.w $22
   17416/    EFBC : 0202                		dc.w $202
   17417/    EFBE : 0022                		dc.w $22
   17418/    EFC0 : 0024                		dc.w $24
   17419/    EFC2 : 0048                		dc.w $48
   17420/    EFC4 : 002E                word_EFC4:	dc.w $2E
   17421/    EFC6 : 000A                		dc.w $A
   17422/    EFC8 : 0006                		dc.w 6
   17423/    EFCA : 0004                		dc.w 4
   17424/    EFCC : 0002                		dc.w 2
   17425/    EFCE : 0004                		dc.w 4
   17426/    EFD0 : 0006                		dc.w 6
   17427/    EFD2 : 000A                		dc.w $A
   17428/    EFD4 :                     
   17429/    EFD4 :                     ; =============== S U B	R O U T	I N E =======================================
   17430/    EFD4 :                     
   17431/    EFD4 :                     
   17432/    EFD4 :                     sub_EFD4:
   17433/    EFD4 : 7010                		moveq	#$10,d0
   17434/    EFD6 : 4EB8 1918           		jsr	(sub_1918).w
   17435/    EFDA : 6B00 0102           		bmi.w	loc_F0DE
   17436/    EFDE : 317C 0000 0004      		move.w	#0,4(a0)
   17437/    EFE4 : 217C 0000 0000      		move.l	#0,$24(a0)
             EFEA : 0024             
   17438/    EFEC : 43FA 0020           		lea	loc_F00E(pc),a1
   17439/    EFF0 : 45F8 D9F2           		lea	($FFFFD9F2).w,a2
   17440/    EFF4 : 303C 0067           		move.w	#$67,d0
   17441/    EFF8 :                     
   17442/    EFF8 :                     loc_EFF8:
   17443/    EFF8 : 34D9                		move.w	(a1)+,(a2)+
   17444/    EFFA : 51C8 FFFC           		dbf	d0,loc_EFF8
   17445/    EFFE : 4A78 D834           		tst.w	($FFFFD834).w
   17446/    F002 : 6606                		bne.s	loc_F00A
   17447/    F004 : 11FC 0000 DA85      		move.b	#0,($FFFFDA85).w
   17448/    F00A :                     
   17449/    F00A :                     loc_F00A:
   17450/    F00A : 6000 00D2           		bra.w	loc_F0DE
   17451/    F00E :                     ; ---------------------------------------------------------------------------
   17452/    F00E :                     loc_F00E:
   17453/    F00E : 0090                		dc.w $90
   17454/    F010 : 0D01                		dc.w $D01
   17455/    F012 : A514                		dc.w $A514
   17456/    F014 : 0098                		dc.w $98
   17457/    F016 : 0090                		dc.w $90
   17458/    F018 : 0D02                		dc.w $D02
   17459/    F01A : A528                		dc.w $A528
   17460/    F01C : 00C0                		dc.w $C0
   17461/    F01E : 0090                		dc.w $90
   17462/    F020 : 0503                		dc.w $503
   17463/    F022 : A530                		dc.w $A530
   17464/    F024 : 00E0                		dc.w $E0
   17465/    F026 : 0090                		dc.w $90
   17466/    F028 : 0104                		dc.w $104
   17467/    F02A : A500                		dc.w $A500
   17468/    F02C : 00F8                		dc.w $F8
   17469/    F02E : 0090                		dc.w $90
   17470/    F030 : 0005                		dc.w 5
   17471/    F032 : A54A                		dc.w $A54A
   17472/    F034 : 0100                		dc.w $100
   17473/    F036 : 0090                		dc.w $90
   17474/    F038 : 0106                		dc.w $106
   17475/    F03A : A500                		dc.w $A500
   17476/    F03C : 0108                		dc.w $108
   17477/    F03E : 0090                		dc.w $90
   17478/    F040 : 0107                		dc.w $107
   17479/    F042 : A500                		dc.w $A500
   17480/    F044 : 0110                		dc.w $110
   17481/    F046 : 0090                		dc.w $90
   17482/    F048 : 0008                		dc.w 8
   17483/    F04A : A54B                		dc.w $A54B
   17484/    F04C : 0118                		dc.w $118
   17485/    F04E : 0090                		dc.w $90
   17486/    F050 : 0109                		dc.w $109
   17487/    F052 : A500                		dc.w $A500
   17488/    F054 : 0120                		dc.w $120
   17489/    F056 : 0090                		dc.w $90
   17490/    F058 : 010A                		dc.w $10A
   17491/    F05A : A500                		dc.w $A500
   17492/    F05C : 0128                		dc.w $128
   17493/    F05E : 00A0                		dc.w $A0
   17494/    F060 : 0D0B                		dc.w $D0B
   17495/    F062 : A534                		dc.w $A534
   17496/    F064 : 0098                		dc.w $98
   17497/    F066 : 00A0                		dc.w $A0
   17498/    F068 : 010C                		dc.w $10C
   17499/    F06A : A53C                		dc.w $A53C
   17500/    F06C : 00B8                		dc.w $B8
   17501/    F06E : 00A0                		dc.w $A0
   17502/    F070 : 010D                		dc.w $10D
   17503/    F072 : A500                		dc.w $A500
   17504/    F074 : 00D8                		dc.w $D8
   17505/    F076 : 00A0                		dc.w $A0
   17506/    F078 : 010E                		dc.w $10E
   17507/    F07A : A570                		dc.w $A570
   17508/    F07C : 00E4                		dc.w $E4
   17509/    F07E : 00A0                		dc.w $A0
   17510/    F080 : 010F                		dc.w $10F
   17511/    F082 : A502                		dc.w $A502
   17512/    F084 : 00F0                		dc.w $F0
   17513/    F086 : 00A0                		dc.w $A0
   17514/    F088 : 0110                		dc.w $110
   17515/    F08A : A500                		dc.w $A500
   17516/    F08C : 00F8                		dc.w $F8
   17517/    F08E : 00A0                		dc.w $A0
   17518/    F090 : 0100                		dc.w $100
   17519/    F092 : A500                		dc.w $A500
   17520/    F094 : 0100                		dc.w $100
   17521/    F096 : 00D0                		dc.w $D0
   17522/    F098 : 0D12                		dc.w $D12
   17523/    F09A : A54C                		dc.w $A54C
   17524/    F09C : 00EC                		dc.w $EC
   17525/    F09E : 00D0                		dc.w $D0
   17526/    F0A0 : 0113                		dc.w $113
   17527/    F0A2 : A554                		dc.w $A554
   17528/    F0A4 : 010C                		dc.w $10C
   17529/    F0A6 : 0080                		dc.w $80
   17530/    F0A8 : 0714                		dc.w $714
   17531/    F0AA : C7F8                		dc.w $C7F8
   17532/    F0AC : 0080                		dc.w $80
   17533/    F0AE : 00A0                		dc.w $A0
   17534/    F0B0 : 0715                		dc.w $715
   17535/    F0B2 : C7F8                		dc.w $C7F8
   17536/    F0B4 : 0080                		dc.w $80
   17537/    F0B6 : 00C0                		dc.w $C0
   17538/    F0B8 : 0716                		dc.w $716
   17539/    F0BA : C7F8                		dc.w $C7F8
   17540/    F0BC : 0080                		dc.w $80
   17541/    F0BE : 00E0                		dc.w $E0
   17542/    F0C0 : 0717                		dc.w $717
   17543/    F0C2 : C7F8                		dc.w $C7F8
   17544/    F0C4 : 0080                		dc.w $80
   17545/    F0C6 : 0100                		dc.w $100
   17546/    F0C8 : 0718                		dc.w $718
   17547/    F0CA : C7F8                		dc.w $C7F8
   17548/    F0CC : 0080                		dc.w $80
   17549/    F0CE : 0120                		dc.w $120
   17550/    F0D0 : 0719                		dc.w $719
   17551/    F0D2 : C7F8                		dc.w $C7F8
   17552/    F0D4 : 0080                		dc.w $80
   17553/    F0D6 : 0140                		dc.w $140
   17554/    F0D8 : 0700                		dc.w $700
   17555/    F0DA : C7F8                		dc.w $C7F8
   17556/    F0DC : 0080                		dc.w $80
   17557/    F0DE :                     ; ---------------------------------------------------------------------------
   17558/    F0DE :                     
   17559/    F0DE :                     loc_F0DE:
   17560/    F0DE : (MACRO)              		disable_ints
   17560/    F0DE : 46FC 2700                           move    #$2700,sr
   17561/    F0E2 : 203C 0003 0000      		move.l	#ArtUnc_HUD,d0
   17562/    F0E8 : 323C A000           		move.w	#$A000,d1
   17563/    F0EC : 343C 0800           		move.w	#$800,d2
   17564/    F0F0 : 4EB8 05E8           		jsr	(sub_5E8).w
   17565/    F0F4 : 23FC 7F00 0003      		move.l	#$7F000003,(vdp_control_port).l
             F0FA : 00C0 0004          
   17566/    F0FE : 203C DDDD DDDD      		move.l	#$DDDDDDDD,d0
   17567/    F104 : 723F                		moveq	#$3F,d1
   17568/    F106 :                     
   17569/    F106 :                     loc_F106:
   17570/    F106 : 23C0 00C0 0000      		move.l	d0,(vdp_data_port).l
   17571/    F10C : 51C9 FFF8           		dbf	d1,loc_F106
   17572/    F110 : (MACRO)              		enable_ints
   17572/    F110 : 46FC 2300                           move    #$2300,sr
   17573/    F114 : 4E75                		rts
   17574/    F116 :                     ; End of function sub_EFD4
   17575/    F116 :                     
   17576/    F116 :                     
   17577/    F116 :                     ; =============== S U B	R O U T	I N E =======================================
   17578/    F116 :                     
   17579/    F116 :                     
   17580/    F116 :                     sub_F116:
   17581/    F116 : 6100 0120           		bsr.w	sub_F238
   17582/    F11A : 31C2 D8E8           		move.w	d2,($FFFFD8E8).w
   17583/    F11E : 31C3 D8EA           		move.w	d3,($FFFFD8EA).w
   17584/    F122 : 6100 00A6           		bsr.w	sub_F1CA
   17585/    F126 : 6100 000E           		bsr.w	sub_F136
   17586/    F12A : 4E75                		rts
   17587/    F12C :                     ; End of function sub_F116
   17588/    F12C :                     
   17589/    F12C :                     
   17590/    F12C :                     ; =============== S U B	R O U T	I N E =======================================
   17591/    F12C :                     
   17592/    F12C :                     
   17593/    F12C :                     sub_F12C:
   17594/    F12C : 6100 009C           		bsr.w	sub_F1CA
   17595/    F130 : 6100 0004           		bsr.w	sub_F136
   17596/    F134 : 4E75                		rts
   17597/    F136 :                     ; End of function sub_F12C
   17598/    F136 :                     
   17599/    F136 :                     
   17600/    F136 :                     ; =============== S U B	R O U T	I N E =======================================
   17601/    F136 :                     
   17602/    F136 :                     
   17603/    F136 :                     sub_F136:
   17604/    F136 : 2078 D8EC           		movea.l	($FFFFD8EC).w,a0
   17605/    F13A : 43F8 D8F2           		lea	($FFFFD8F2).w,a1
   17606/    F13E : 7A00                		moveq	#0,d5
   17607/    F140 :                     
   17608/    F140 :                     loc_F140:
   17609/    F140 : 1011                		move.b	(a1),d0
   17610/    F142 : 5245                		addq.w	#1,d5
   17611/    F144 : 0C00 00FF           		cmpi.b	#$FF,d0
   17612/    F148 : 677E                		beq.s	locret_F1C8
   17613/    F14A : 0200 000F           		andi.b	#$F,d0
   17614/    F14E : 0C00 0002           		cmpi.b	#2,d0
   17615/    F152 : 6664                		bne.s	loc_F1B8
   17616/    F154 : (MACRO)              		_move.w	0(a0),d0
   17616/    F154 :  (MACRO-2)                           insn2op move.w, 0(a0),d0
   17616/    F154 : =>FALSE                        if (chkop("0(a0)","0("))
   17616/    F154 :                                       if (chkop("d0","0("))
   17616/    F154 :                                             !move.w   0(a0),d0
   17616/    F154 :                                       else
   17616/    F154 :                                             !move.w   0(a0),1+d0
   17616/    F154 :                                             !org    *-1
   17616/    F154 :                                             !dc.b   0
   17616/    F154 : [17616]                                endif
   17616/    F154 : =>TRUE                         else
   17616/    F154 : =>FALSE                              if chkop("d0","d")
   17616/    F154 :                                       if (chkop("d0","0("))
   17616/    F154 :                     start:
   17616/    F154 :                                             !move.w   1+0(a0),d0
   17616/    F154 :                     end:
   17616/    F154 :                                             !org    start+3
   17616/    F154 :                                             !dc.b   0
   17616/    F154 :                                             !org    end
   17616/    F154 :                                       else
   17616/    F154 :                                             !move.w   1+0(a0),1+d0
   17616/    F154 :                                             !org    *-3
   17616/    F154 :                                             !dc.b   0
   17616/    F154 :                                             !org    *+1
   17616/    F154 :                                             !dc.b   0
   17616/    F154 : [17616]                                endif
   17616/    F154 : =>TRUE                               else
   17616/    F154 : 3028 0001                                   !move.w   1+0(a0),d0
   17616/    F157 :                                             !org    *-1
   17616/    F157 : 00                                          !dc.b   0
   17616/    F158 : [17616]                              endif
   17616/    F158 : [17616]                        endif
   17617/    F158 : 3238 D8DC           		move.w	($FFFFD8DC).w,d1
   17618/    F15C : 3438 D8E0           		move.w	($FFFFD8E0).w,d2
   17619/    F160 : 6100 00CA           		bsr.w	sub_F22C
   17620/    F164 : 6552                		bcs.s	loc_F1B8
   17621/    F166 : 3028 0002           		move.w	2(a0),d0
   17622/    F16A : 3238 D8DE           		move.w	($FFFFD8DE).w,d1
   17623/    F16E : 3438 D8E2           		move.w	($FFFFD8E2).w,d2
   17624/    F172 : 6100 00B8           		bsr.w	sub_F22C
   17625/    F176 : 6540                		bcs.s	loc_F1B8
   17626/    F178 : 2849                		movea.l	a1,a4
   17627/    F17A : 47F8 D8F2           		lea	($FFFFD8F2).w,a3
   17628/    F17E : 99CB                		suba.l	a3,a4
   17629/    F180 : 2A48                		movea.l	a0,a5
   17630/    F182 : 2C49                		movea.l	a1,a6
   17631/    F184 : 700C                		moveq	#$C,d0
   17632/    F186 : 4EB8 1918           		jsr	(sub_1918).w
   17633/    F18A : 6B2C                		bmi.s	loc_F1B8
   17634/    F18C : 316D 0004 0006      		move.w	4(a5),6(a0)
   17635/    F192 : (MACRO)              		_move.w	0(a5),8(a0)
   17635/    F192 :  (MACRO-2)                           insn2op move.w, 0(a5),8(a0)
   17635/    F192 : =>FALSE                        if (chkop("0(a5)","0("))
   17635/    F192 :                                       if (chkop("8(a0)","0("))
   17635/    F192 :                                             !move.w   0(a5),8(a0)
   17635/    F192 :                                       else
   17635/    F192 :                                             !move.w   0(a5),1+8(a0)
   17635/    F192 :                                             !org    *-1
   17635/    F192 :                                             !dc.b   0
   17635/    F192 : [17635]                                endif
   17635/    F192 : =>TRUE                         else
   17635/    F192 : =>TRUE                               if chkop("8(a0)","d")
   17635/    F192 : =>TRUE                                 if (chkop("8(a0)","0("))
   17635/    F192 :                     start:
   17635/    F192 : 316D 0001 0008                              !move.w   1+0(a5),8(a0)
   17635/    F198 :                     end:
   17635/    F195 :                                             !org    start+3
   17635/    F195 : 00                                          !dc.b   0
   17635/    F198 :                                             !org    end
   17635/    F198 : =>FALSE                                else
   17635/    F198 :                                             !move.w   1+0(a5),1+8(a0)
   17635/    F198 :                                             !org    *-3
   17635/    F198 :                                             !dc.b   0
   17635/    F198 :                                             !org    *+1
   17635/    F198 :                                             !dc.b   0
   17635/    F198 : [17635]                                endif
   17635/    F198 : =>FALSE                              else
   17635/    F198 :                                             !move.w   1+0(a5),8(a0)
   17635/    F198 :                                             !org    *-1
   17635/    F198 :                                             !dc.b   0
   17635/    F198 : [17635]                              endif
   17635/    F198 : [17635]                        endif
   17636/    F198 : 316D 0002 000C      		move.w	2(a5),$C(a0)
   17637/    F19E : 314C 0024           		move.w	a4,$24(a0)
   17638/    F1A2 : 316D 0006 0028      		move.w	6(a5),$28(a0)
   17639/    F1A8 : 204D                		movea.l	a5,a0
   17640/    F1AA : 224E                		movea.l	a6,a1
   17641/    F1AC : 1011                		move.b	(a1),d0
   17642/    F1AE : 0200 00F0           		andi.b	#$F0,d0
   17643/    F1B2 : 0000 0001           		ori.b	#1,d0
   17644/    F1B6 : 1280                		move.b	d0,(a1)
   17645/    F1B8 :                     
   17646/    F1B8 :                     loc_F1B8:
   17647/    F1B8 : D1FC 0000 0008      		adda.l	#8,a0
   17648/    F1BE : D3FC 0000 0001      		adda.l	#1,a1
   17649/    F1C4 : 6000 FF7A           		bra.w	loc_F140
   17650/    F1C8 :                     ; ---------------------------------------------------------------------------
   17651/    F1C8 :                     
   17652/    F1C8 :                     locret_F1C8:
   17653/    F1C8 : 4E75                		rts
   17654/    F1CA :                     ; End of function sub_F136
   17655/    F1CA :                     
   17656/    F1CA :                     
   17657/    F1CA :                     ; =============== S U B	R O U T	I N E =======================================
   17658/    F1CA :                     
   17659/    F1CA :                     
   17660/    F1CA :                     sub_F1CA:
   17661/    F1CA : 41F8 C9DE           		lea	($FFFFC9DE).w,a0
   17662/    F1CE : (MACRO)              		_move.w	0(a0),d0
   17662/    F1CE :  (MACRO-2)                           insn2op move.w, 0(a0),d0
   17662/    F1CE : =>FALSE                        if (chkop("0(a0)","0("))
   17662/    F1CE :                                       if (chkop("d0","0("))
   17662/    F1CE :                                             !move.w   0(a0),d0
   17662/    F1CE :                                       else
   17662/    F1CE :                                             !move.w   0(a0),1+d0
   17662/    F1CE :                                             !org    *-1
   17662/    F1CE :                                             !dc.b   0
   17662/    F1CE : [17662]                                endif
   17662/    F1CE : =>TRUE                         else
   17662/    F1CE : =>FALSE                              if chkop("d0","d")
   17662/    F1CE :                                       if (chkop("d0","0("))
   17662/    F1CE :                     start:
   17662/    F1CE :                                             !move.w   1+0(a0),d0
   17662/    F1CE :                     end:
   17662/    F1CE :                                             !org    start+3
   17662/    F1CE :                                             !dc.b   0
   17662/    F1CE :                                             !org    end
   17662/    F1CE :                                       else
   17662/    F1CE :                                             !move.w   1+0(a0),1+d0
   17662/    F1CE :                                             !org    *-3
   17662/    F1CE :                                             !dc.b   0
   17662/    F1CE :                                             !org    *+1
   17662/    F1CE :                                             !dc.b   0
   17662/    F1CE : [17662]                                endif
   17662/    F1CE : =>TRUE                               else
   17662/    F1CE : 3028 0001                                   !move.w   1+0(a0),d0
   17662/    F1D1 :                                             !org    *-1
   17662/    F1D1 : 00                                          !dc.b   0
   17662/    F1D2 : [17662]                              endif
   17662/    F1D2 : [17662]                        endif
   17663/    F1D2 : 3228 0010           		move.w	$10(a0),d1
   17664/    F1D6 : 0640 00A0           		addi.w	#$A0,d0
   17665/    F1DA : 0641 0070           		addi.w	#$70,d1
   17666/    F1DE : 31C0 D8E4           		move.w	d0,($FFFFD8E4).w
   17667/    F1E2 : 31C1 D8E6           		move.w	d1,($FFFFD8E6).w
   17668/    F1E6 : 0440 0140           		subi.w	#$140,d0
   17669/    F1EA : 6402                		bcc.s	loc_F1EE
   17670/    F1EC : 7000                		moveq	#0,d0
   17671/    F1EE :                     
   17672/    F1EE :                     loc_F1EE:
   17673/    F1EE : 31C0 D8DC           		move.w	d0,($FFFFD8DC).w
   17674/    F1F2 : 0441 00E0           		subi.w	#$E0,d1
   17675/    F1F6 : 6402                		bcc.s	loc_F1FA
   17676/    F1F8 : 7200                		moveq	#0,d1
   17677/    F1FA :                     
   17678/    F1FA :                     loc_F1FA:
   17679/    F1FA : 31C1 D8DE           		move.w	d1,($FFFFD8DE).w
   17680/    F1FE : 3038 D8E4           		move.w	($FFFFD8E4).w,d0
   17681/    F202 : 3238 D8E6           		move.w	($FFFFD8E6).w,d1
   17682/    F206 : 0640 0140           		addi.w	#$140,d0
   17683/    F20A : B078 D8E8           		cmp.w	($FFFFD8E8).w,d0
   17684/    F20E : 6504                		bcs.s	loc_F214
   17685/    F210 : 3038 D8E8           		move.w	($FFFFD8E8).w,d0
   17686/    F214 :                     
   17687/    F214 :                     loc_F214:
   17688/    F214 : 31C0 D8E0           		move.w	d0,($FFFFD8E0).w
   17689/    F218 : 0641 00E0           		addi.w	#$E0,d1
   17690/    F21C : B278 D8EA           		cmp.w	($FFFFD8EA).w,d1
   17691/    F220 : 6504                		bcs.s	loc_F226
   17692/    F222 : 3238 D8EA           		move.w	($FFFFD8EA).w,d1
   17693/    F226 :                     
   17694/    F226 :                     loc_F226:
   17695/    F226 : 31C1 D8E2           		move.w	d1,($FFFFD8E2).w
   17696/    F22A : 4E75                		rts
   17697/    F22C :                     ; End of function sub_F1CA
   17698/    F22C :                     
   17699/    F22C :                     
   17700/    F22C :                     ; =============== S U B	R O U T	I N E =======================================
   17701/    F22C :                     
   17702/    F22C :                     
   17703/    F22C :                     sub_F22C:
   17704/    F22C : 9041                		sub.w	d1,d0
   17705/    F22E : 9441                		sub.w	d1,d2
   17706/    F230 : B440                		cmp.w	d0,d2
   17707/    F232 : 6402                		bcc.s	locret_F236
   17708/    F234 : 4E75                		rts
   17709/    F236 :                     ; ---------------------------------------------------------------------------
   17710/    F236 :                     
   17711/    F236 :                     locret_F236:
   17712/    F236 : 4E75                		rts
   17713/    F238 :                     ; End of function sub_F22C
   17714/    F238 :                     
   17715/    F238 :                     
   17716/    F238 :                     ; =============== S U B	R O U T	I N E =======================================
   17717/    F238 :                     
   17718/    F238 :                     
   17719/    F238 :                     sub_F238:
   17720/    F238 : 21C8 D8EC           		move.l	a0,($FFFFD8EC).w
   17721/    F23C : 41F8 D8F2           		lea	($FFFFD8F2).w,a0
   17722/    F240 : 3E3C 000F           		move.w	#$F,d7
   17723/    F244 :                     
   17724/    F244 :                     loc_F244:
   17725/    F244 : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17726/    F248 : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17727/    F24C : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17728/    F250 : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17729/    F254 : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17730/    F258 : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17731/    F25C : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17732/    F260 : 30FC FFFF           		move.w	#$FFFF,(a0)+
   17733/    F264 : 51CF FFDE           		dbf	d7,loc_F244
   17734/    F268 : 2078 D8EC           		movea.l	($FFFFD8EC).w,a0
   17735/    F26C : 43F8 D8F2           		lea	($FFFFD8F2).w,a1
   17736/    F270 :                     
   17737/    F270 :                     loc_F270:
   17738/    F270 : 3010                		move.w	(a0),d0
   17739/    F272 : 0C40 FFFF           		cmpi.w	#$FFFF,d0
   17740/    F276 : 670C                		beq.s	locret_F284
   17741/    F278 : 12FC 0002           		move.b	#2,(a1)+
   17742/    F27C : D1FC 0000 0008      		adda.l	#8,a0
   17743/    F282 : 60EC                		bra.s	loc_F270
   17744/    F284 :                     ; ---------------------------------------------------------------------------
   17745/    F284 :                     
   17746/    F284 :                     locret_F284:
   17747/    F284 : 4E75                		rts
   17748/    F286 :                     ; End of function sub_F238
   17749/    F286 :                     
   17750/    F286 :                     
   17751/    F286 :                     ; =============== S U B	R O U T	I N E =======================================
   17752/    F286 :                     
   17753/    F286 :                     
   17754/    F286 :                     sub_F286:
   17755/    F286 : 302E 0024           		move.w	$24(a6),d0
   17756/    F28A : 41F8 D8F2           		lea	($FFFFD8F2).w,a0
   17757/    F28E : 11BC 0002 0000      		move.b	#2,(a0,d0.w)
   17758/    F294 : 4EB8 1980           		jsr	(sub_1980).w
   17759/    F298 : 4E75                		rts
   17760/    F29A :                     ; End of function sub_F286
   17761/    F29A :                     
   17762/    F29A :                     
   17763/    F29A :                     ; =============== S U B	R O U T	I N E =======================================
   17764/    F29A :                     
   17765/    F29A :                     
   17766/    F29A :                     loc_F29A:
   17767/    F29A : 302E 0004           		move.w	4(a6),d0
   17768/    F29E : 0040 0080           		ori.w	#$80,d0
   17769/    F2A2 : 3D40 0004           		move.w	d0,4(a6)
   17770/    F2A6 : 4E75                		rts
   17771/    F2A8 :                     ; End of function loc_F29A
   17772/    F2A8 :                     
   17773/    F2A8 :                     
   17774/    F2A8 :                     ; =============== S U B	R O U T	I N E =======================================
   17775/    F2A8 :                     
   17776/    F2A8 :                     
   17777/    F2A8 :                     loc_F2A8:
   17778/    F2A8 : 302E 0004           		move.w	4(a6),d0
   17779/    F2AC : 0240 FF7F           		andi.w	#$FF7F,d0
   17780/    F2B0 : 3D40 0004           		move.w	d0,4(a6)
   17781/    F2B4 : 4E75                		rts
   17782/    F2B6 :                     ; End of function loc_F2A8
   17783/    F2B6 :                     
   17784/    F2B6 :                     ; ---------------------------------------------------------------------------
   17785/    F2B6 : 302E 0024           		move.w	$24(a6),d0
   17786/    F2BA : 43F8 D8F2           		lea	($FFFFD8F2).w,a1
   17787/    F2BE : 1231 0000           		move.b	(a1,d0.w),d1
   17788/    F2C2 : 0201 00F0           		andi.b	#$F0,d1
   17789/    F2C6 : 1381 0000           		move.b	d1,(a1,d0.w)
   17790/    F2CA : 4EB8 1980           		jsr	(sub_1980).w
   17791/    F2CE : 4E75                		rts
   17792/    F2D0 :                     
   17793/    F2D0 :                     ; =============== S U B	R O U T	I N E =======================================
   17794/    F2D0 :                     
   17795/    F2D0 :                     
   17796/    F2D0 :                     loc_F2D0:
   17797/    F2D0 : 302E 0008           		move.w	8(a6),d0
   17798/    F2D4 : 3238 D8DC           		move.w	($FFFFD8DC).w,d1
   17799/    F2D8 : 3438 D8E0           		move.w	($FFFFD8E0).w,d2
   17800/    F2DC : 6100 FF4E           		bsr.w	sub_F22C
   17801/    F2E0 : 6510                		bcs.s	locret_F2F2
   17802/    F2E2 : 302E 000C           		move.w	$C(a6),d0
   17803/    F2E6 : 3238 D8DE           		move.w	($FFFFD8DE).w,d1
   17804/    F2EA : 3438 D8E2           		move.w	($FFFFD8E2).w,d2
   17805/    F2EE : 6100 FF3C           		bsr.w	sub_F22C
   17806/    F2F2 :                     
   17807/    F2F2 :                     locret_F2F2:
   17808/    F2F2 : 4E75                		rts
   17809/    F2F4 :                     ; End of function loc_F2D0
   17810/    F2F4 :                     
   17811/    F2F4 :                     ; ---------------------------------------------------------------------------
   17812/    F2F4 : 41F8 D8F2           		lea	($FFFFD8F2).w,a0
   17813/    F2F8 : 322E 0024           		move.w	$24(a6),d1
   17814/    F2FC : 1180 1000           		move.b	d0,(a0,d1.w)
   17815/    F300 : 4E75                		rts
   17816/    F302 :                     ; ---------------------------------------------------------------------------
   17817/    F302 : 41F8 D8F2           		lea	($FFFFD8F2).w,a0
   17818/    F306 : 322E 0024           		move.w	$24(a6),d1
   17819/    F30A : 1030 1000           		move.b	(a0,d1.w),d0
   17820/    F30E : 4E75                		rts
   17821/    F310 :                     ; ---------------------------------------------------------------------------
   17822/    F310 : 4EB9 0000 F2D0      		jsr	(loc_F2D0).l
   17823/    F316 : 6508                		bcs.s	loc_F320
   17824/    F318 : 4EB9 0000 F29A      		jsr	(loc_F29A).l
   17825/    F31E : 4E75                		rts
   17826/    F320 :                     ; ---------------------------------------------------------------------------
   17827/    F320 :                     
   17828/    F320 :                     loc_F320:
   17829/    F320 : 4EB9 0000 F2A8      		jsr	(loc_F2A8).l
   17830/    F326 : 4E75                		rts
   17831/    F328 :                     
   17832/    F328 :                     ; =============== S U B	R O U T	I N E =======================================
   17833/    F328 :                     
   17834/    F328 :                     
   17835/    F328 :                     sub_F328:
   17836/    F328 : 7200                		moveq	#0,d1
   17837/    F32A : 323C 0020           		move.w	#$20,d1
   17838/    F32E : 207C 0004 194E      		movea.l	#ARTUNC_TitleCardBGAndPause,a0
   17839/    F334 : 3410                		move.w	(a0),d2
   17840/    F336 : E24A                		lsr.w	#1,d2
   17841/    F338 : D1E8 0002           		adda.l	2(a0),a0
   17842/    F33C : 2008                		move.l	a0,d0
   17843/    F33E : 48E7 0102           		movem.l	d7/a6,-(sp)
   17844/    F342 : 4EB8 05E8           		jsr	(sub_5E8).w
   17845/    F346 : 4CDF 4080           		movem.l	(sp)+,d7/a6
   17846/    F34A : 7008                		moveq	#8,d0
   17847/    F34C : 7213                		moveq	#$13,d1
   17848/    F34E : 343C A001           		move.w	#$A001,d2
   17849/    F352 : 3638 D81E           		move.w	($FFFFD81E).w,d3
   17850/    F356 : 0643 0040           		addi.w	#$40,d3
   17851/    F35A : 4EB8 086E           		jsr	(sub_86E).w
   17852/    F35E : 7028                		moveq	#$28,d0
   17853/    F360 : 7209                		moveq	#9,d1
   17854/    F362 : 343C A001           		move.w	#$A001,d2
   17855/    F366 : 3638 D81E           		move.w	($FFFFD81E).w,d3
   17856/    F36A : 0643 0980           		addi.w	#$980,d3
   17857/    F36E : 4EB8 086E           		jsr	(sub_86E).w
   17858/    F372 : 4E75                		rts
   17859/    F374 :                     ; End of function sub_F328
   17860/    F374 :                     
   17861/    F374 :                     
   17862/    F374 :                     ; =============== S U B	R O U T	I N E =======================================
   17863/    F374 :                     
   17864/    F374 :                     
   17865/    F374 :                     sub_F374:
   17866/    F374 :                     							; Level_PauseGame+70p
   17867/    F374 : 4A38 FDC1           		tst.b	($FFFFFDC1).w
   17868/    F378 : 6E02                		bgt.s	loc_F37C
   17869/    F37A : 61AC                		bsr.s	sub_F328
   17870/    F37C :                     
   17871/    F37C :                     loc_F37C:
   17872/    F37C : 0C38 0008 FDC1      		cmpi.b	#8,($FFFFFDC1).w
   17873/    F382 : 6C30                		bge.s	locret_F3B4
   17874/    F384 : 11FC 0011 DA75      		move.b	#$11,($FFFFDA75).w
   17875/    F38A : 5438 FDC1           		addq.b	#2,($FFFFFDC1).w
   17876/    F38E : 601A                		bra.s	loc_F3AA
   17877/    F390 :                     ; End of function sub_F374
   17878/    F390 :                     
   17879/    F390 :                     
   17880/    F390 :                     ; =============== S U B	R O U T	I N E =======================================
   17881/    F390 :                     
   17882/    F390 :                     
   17883/    F390 :                     sub_F390:
   17884/    F390 : 4A38 FDC1           		tst.b	($FFFFFDC1).w
   17885/    F394 : 671E                		beq.s	locret_F3B4
   17886/    F396 : 11F8 DA85 DA75      		move.b	($FFFFDA85).w,($FFFFDA75).w
   17887/    F39C : 5538 FDC1           		subq.b	#2,($FFFFFDC1).w
   17888/    F3A0 : 4A38 FDC1           		tst.b	($FFFFFDC1).w
   17889/    F3A4 : 6E04                		bgt.s	loc_F3AA
   17890/    F3A6 : 6100 069C           		bsr.w	sub_FA44
   17891/    F3AA :                     
   17892/    F3AA :                     loc_F3AA:
   17893/    F3AA : 4240                		clr.w	d0
   17894/    F3AC : 1038 FDC1           		move.b	($FFFFFDC1).w,d0
   17895/    F3B0 : 4EBB 0004           		jsr	loc_F3B6(pc,d0.w)
   17896/    F3B4 :                     
   17897/    F3B4 :                     locret_F3B4:
   17898/    F3B4 : 4E75                		rts
   17899/    F3B6 :                     ; End of function sub_F390
   17900/    F3B6 :                     
   17901/    F3B6 :                     ; ---------------------------------------------------------------------------
   17902/    F3B6 :                     
   17903/    F3B6 :                     loc_F3B6:
   17904/    F3B6 : 600E                		bra.s	loc_F3C6
   17905/    F3B8 :                     ; ---------------------------------------------------------------------------
   17906/    F3B8 : 602A                		bra.s	loc_F3E4
   17907/    F3BA :                     ; ---------------------------------------------------------------------------
   17908/    F3BA : 6046                		bra.s	loc_F402
   17909/    F3BC :                     ; ---------------------------------------------------------------------------
   17910/    F3BC : 6062                		bra.s	loc_F420
   17911/    F3BE :                     ; ---------------------------------------------------------------------------
   17912/    F3BE : 607E                		bra.s	loc_F43E
   17913/    F3C0 :                     ; ---------------------------------------------------------------------------
> > > sonic.asm(17914): warning #180: address is not properly aligned
> > >   clr.w ($FFFFFDC1).w
   17914/    F3C0 : 4278 FDC1           		clr.w	($FFFFFDC1).w
   17915/    F3C4 : 4E75                		rts
   17916/    F3C6 :                     ; ---------------------------------------------------------------------------
   17917/    F3C6 :                     
   17918/    F3C6 :                     loc_F3C6:
   17919/    F3C6 : 33FC 9100 00C0      		move.w	#$9100,(vdp_control_port).l
             F3CC : 0004             
   17920/    F3CE : 31FC 9100 C9DA      		move.w	#$9100,($FFFFC9DA).w
   17921/    F3D4 : 33FC 9200 00C0      		move.w	#$9200,(vdp_control_port).l
             F3DA : 0004             
   17922/    F3DC : 31FC 9200 C9DC      		move.w	#$9200,($FFFFC9DC).w
   17923/    F3E2 : 4E75                		rts
   17924/    F3E4 :                     ; ---------------------------------------------------------------------------
   17925/    F3E4 :                     
   17926/    F3E4 :                     loc_F3E4:
   17927/    F3E4 : 33FC 9193 00C0      		move.w	#$9193,(vdp_control_port).l
             F3EA : 0004             
   17928/    F3EC : 31FC 9193 C9DA      		move.w	#$9193,($FFFFC9DA).w
   17929/    F3F2 : 33FC 929C 00C0      		move.w	#$929C,(vdp_control_port).l
             F3F8 : 0004             
   17930/    F3FA : 31FC 929C C9DC      		move.w	#$929C,($FFFFC9DC).w
   17931/    F400 : 4E75                		rts
   17932/    F402 :                     ; ---------------------------------------------------------------------------
   17933/    F402 :                     
   17934/    F402 :                     loc_F402:
   17935/    F402 : 33FC 9192 00C0      		move.w	#$9192,(vdp_control_port).l
             F408 : 0004             
   17936/    F40A : 31FC 9192 C9DA      		move.w	#$9192,($FFFFC9DA).w
   17937/    F410 : 33FC 9299 00C0      		move.w	#$9299,(vdp_control_port).l
             F416 : 0004             
   17938/    F418 : 31FC 9299 C9DC      		move.w	#$9299,($FFFFC9DC).w
   17939/    F41E : 4E75                		rts
   17940/    F420 :                     ; ---------------------------------------------------------------------------
   17941/    F420 :                     
   17942/    F420 :                     loc_F420:
   17943/    F420 : 33FC 9191 00C0      		move.w	#$9191,(vdp_control_port).l
             F426 : 0004             
   17944/    F428 : 31FC 9191 C9DA      		move.w	#$9191,($FFFFC9DA).w
   17945/    F42E : 33FC 9296 00C0      		move.w	#$9296,(vdp_control_port).l
             F434 : 0004             
   17946/    F436 : 31FC 9296 C9DC      		move.w	#$9296,($FFFFC9DC).w
   17947/    F43C : 4E75                		rts
   17948/    F43E :                     ; ---------------------------------------------------------------------------
   17949/    F43E :                     
   17950/    F43E :                     loc_F43E:
   17951/    F43E : 33FC 9190 00C0      		move.w	#$9190,(vdp_control_port).l
             F444 : 0004             
   17952/    F446 : 31FC 9190 C9DA      		move.w	#$9190,($FFFFC9DA).w
   17953/    F44C : 33FC 9293 00C0      		move.w	#$9293,(vdp_control_port).l
             F452 : 0004             
   17954/    F454 : 31FC 9293 C9DC      		move.w	#$9293,($FFFFC9DC).w
   17955/    F45A : 4E75                		rts
   17956/    F45C :                     
   17957/    F45C :                     ; =============== S U B	R O U T	I N E =======================================
   17958/    F45C :                     
   17959/    F45C :                     
   17960/    F45C :                     sub_F45C:
   17961/    F45C : 7E0B                		moveq	#$B,d7
   17962/    F45E : 4DFA 0030           		lea	TitleCardBG_TileLocationArray(pc),a6
   17963/    F462 :                     
   17964/    F462 :                     loc_F462:
   17965/    F462 : 610E                		bsr.s	sub_F472
   17966/    F464 : 51CF FFFC           		dbf	d7,loc_F462
   17967/    F468 : 4EB8 04CC           		jsr	VDPSetup_02
   17968/    F46C : 6000 006A           		bra.w	loc_F4D8
   17969/    F470 :                     ; End of function sub_F45C
   17970/    F470 :                     
   17971/    F470 :                     ; ---------------------------------------------------------------------------
   17972/    F470 : 4E75                		rts
   17973/    F472 :                     
   17974/    F472 :                     ; =============== S U B	R O U T	I N E =======================================
   17975/    F472 :                     
   17976/    F472 :                     
   17977/    F472 :                     sub_F472:
   17978/    F472 : 7200                		moveq	#0,d1
   17979/    F474 : 321E                		move.w	(a6)+,d1
   17980/    F476 : 205E                		movea.l	(a6)+,a0
   17981/    F478 : 3410                		move.w	(a0),d2
   17982/    F47A : E24A                		lsr.w	#1,d2
   17983/    F47C : D1E8 0002           		adda.l	2(a0),a0
   17984/    F480 : 2008                		move.l	a0,d0
   17985/    F482 : 48E7 0102           		movem.l	d7/a6,-(sp)
   17986/    F486 : 4EB8 0568           		jsr	(sub_568).w
   17987/    F48A : 4CDF 4080           		movem.l	(sp)+,d7/a6
   17988/    F48E : 4E75                		rts
   17989/    F490 :                     ; End of function sub_F472
   17990/    F490 :                     
   17991/    F490 :                     ; ---------------------------------------------------------------------------
   17992/    F490 :                     TitleCardBG_TileLocationArray:
   17993/    F490 : 0040                		dc.w $40
   17994/    F492 : 0004 1974           		dc.l TCBG_Tile2
   17995/    F496 : 0060                		dc.w $60
   17996/    F498 : 0004 199A           		dc.l TCBG_Tile3
   17997/    F49C : 0080                		dc.w $80
   17998/    F49E : 0004 19C0           		dc.l TCBG_Tile4
   17999/    F4A2 : 00A0                		dc.w $A0
   18000/    F4A4 : 0004 19E6           		dc.l TCBG_Tile5
   18001/    F4A8 : 00C0                		dc.w $C0
   18002/    F4AA : 0004 1A0C           		dc.l TCBG_Tile6
   18003/    F4AE : 00E0                		dc.w $E0
   18004/    F4B0 : 0004 1A32           		dc.l TCBG_Tile7
   18005/    F4B4 : 0100                		dc.w $100
   18006/    F4B6 : 0004 1A58           		dc.l TCBG_Tile8
   18007/    F4BA : 0120                		dc.w $120
   18008/    F4BC : 0004 1A7E           		dc.l TCBG_Tile9
   18009/    F4C0 : 0140                		dc.w $140
   18010/    F4C2 : 0004 1AA4           		dc.l TCBG_TileA
   18011/    F4C6 : 0160                		dc.w $160
   18012/    F4C8 : 0004 1ACA           		dc.l TCBG_TileB
   18013/    F4CC : 01A0                		dc.w $1A0
   18014/    F4CE : 0004 1B10           		dc.l TCBG_TileC
   18015/    F4D2 : 01E0                		dc.w $1E0
   18016/    F4D4 : 0004 1B56           		dc.l TCBG_TileD
   18017/    F4D8 :                     ; ---------------------------------------------------------------------------
   18018/    F4D8 :                     ; START	OF FUNCTION CHUNK FOR sub_F45C
   18019/    F4D8 :                     
   18020/    F4D8 :                     loc_F4D8:
   18021/    F4D8 : 11FC 0001 FDC2      		move.b	#1,($FFFFFDC2).w
   18022/    F4DE : 6100 0004           		bsr.w	sub_F4E4
   18023/    F4E2 : 4E75                		rts
   18024/    F4E4 :                     ; END OF FUNCTION CHUNK	FOR sub_F45C
   18025/    F4E4 :                     
   18026/    F4E4 :                     ; =============== S U B	R O U T	I N E =======================================
   18027/    F4E4 :                     
   18028/    F4E4 :                     
   18029/    F4E4 :                     sub_F4E4:
   18030/    F4E4 : 4278 FDC4           		clr.w	($FFFFFDC4).w
   18031/    F4E8 : 4278 FDC6           		clr.w	($FFFFFDC6).w
   18032/    F4EC : 4278 FDC8           		clr.w	($FFFFFDC8).w
   18033/    F4F0 : 4278 FDCA           		clr.w	($FFFFFDCA).w
   18034/    F4F4 : 4278 FDCC           		clr.w	($FFFFFDCC).w
   18035/    F4F8 : 4278 FDCE           		clr.w	($FFFFFDCE).w
   18036/    F4FC : 4E75                		rts
   18037/    F4FE :                     ; End of function sub_F4E4
   18038/    F4FE :                     
   18039/    F4FE :                     
   18040/    F4FE :                     ; =============== S U B	R O U T	I N E =======================================
   18041/    F4FE :                     
   18042/    F4FE :                     
   18043/    F4FE :                     sub_F4FE:
   18044/    F4FE : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
   18045/    F504 :                     
   18046/    F504 :                     .wait:
   18047/    F504 : 4A38 FFC9           		tst.b	(v_lagger).w
   18048/    F508 : 6AFA                		bpl.s	.wait
   18049/    F50A : 3038 FDC4           		move.w	($FFFFFDC4).w,d0
   18050/    F50E : 0C40 0014           		cmpi.w	#$14,d0
   18051/    F512 : 6C22                		bge.s	locret_F536
   18052/    F514 : 4EBB 000A           		jsr	loc_F520(pc,d0.w)
   18053/    F518 : 4EB8 1640           		jsr	(BuildSprites).w
   18054/    F51C : 60E0                		bra.s	sub_F4FE
   18055/    F51E :                     ; ---------------------------------------------------------------------------
   18056/    F51E : 4E75                		rts
   18057/    F520 :                     ; ---------------------------------------------------------------------------
   18058/    F520 :                     
   18059/    F520 :                     loc_F520:
   18060/    F520 : 6000 007C           		bra.w	loc_F59E
   18061/    F524 :                     ; ---------------------------------------------------------------------------
   18062/    F524 : 6000 00EC           		bra.w	loc_F612
   18063/    F528 :                     ; ---------------------------------------------------------------------------
   18064/    F528 : 6000 013E           		bra.w	loc_F668
   18065/    F52C :                     ; ---------------------------------------------------------------------------
   18066/    F52C : 6000 0356           		bra.w	loc_F884
   18067/    F530 :                     ; ---------------------------------------------------------------------------
   18068/    F530 : 6000 01EE           		bra.w	loc_F720
   18069/    F534 :                     ; ---------------------------------------------------------------------------
   18070/    F534 : 4240                		clr.w	d0
   18071/    F536 :                     
   18072/    F536 :                     locret_F536:
   18073/    F536 : 4E75                		rts
   18074/    F538 :                     ; End of function sub_F4FE
   18075/    F538 :                     
   18076/    F538 :                     
   18077/    F538 :                     ; =============== S U B	R O U T	I N E =======================================
   18078/    F538 :                     
   18079/    F538 :                     
   18080/    F538 :                     sub_F538:
   18081/    F538 : 08B8 0007 FFC9      		bclr	#7,(v_lagger).w
   18082/    F53E :                     
   18083/    F53E :                     .wait:
   18084/    F53E : 4A38 FFC9           		tst.b	(v_lagger).w
   18085/    F542 : 6AFA                		bpl.s	.wait
   18086/    F544 : 4EB8 096E           		jsr	(sub_96E).w
   18087/    F548 : 4EB8 1640           		jsr	(BuildSprites).w
   18088/    F54C : 4A38 FDC2           		tst.b	($FFFFFDC2).w
   18089/    F550 : 6710                		beq.s	loc_F562
   18090/    F552 : 0838 0007 C93D      		btst	#7,($FFFFC93D).w
   18091/    F558 : 67DE                		beq.s	sub_F538
   18092/    F55A : 4238 FDC2           		clr.b	($FFFFFDC2).w
   18093/    F55E : 4278 FDC4           		clr.w	($FFFFFDC4).w
   18094/    F562 :                     
   18095/    F562 :                     loc_F562:
   18096/    F562 : 3038 FDC4           		move.w	($FFFFFDC4).w,d0
   18097/    F566 : 0C40 0014           		cmpi.w	#$14,d0
   18098/    F56A : 6C1E                		bge.s	locret_F58A
   18099/    F56C : 4EBB 0006           		jsr	loc_F574(pc,d0.w)
   18100/    F570 : 60C6                		bra.s	sub_F538
   18101/    F572 :                     ; ---------------------------------------------------------------------------
   18102/    F572 : 4E75                		rts
   18103/    F574 :                     ; ---------------------------------------------------------------------------
   18104/    F574 :                     
   18105/    F574 :                     loc_F574:
   18106/    F574 : 6000 0272           		bra.w	loc_F7E8
   18107/    F578 :                     ; ---------------------------------------------------------------------------
   18108/    F578 : 6000 0338           		bra.w	loc_F8B2
   18109/    F57C :                     ; ---------------------------------------------------------------------------
   18110/    F57C : 6000 013A           		bra.w	loc_F6B8
   18111/    F580 :                     ; ---------------------------------------------------------------------------
   18112/    F580 : 6000 00BA           		bra.w	loc_F63C
   18113/    F584 :                     ; ---------------------------------------------------------------------------
   18114/    F584 : 6000 003C           		bra.w	loc_F5C2
   18115/    F588 :                     ; ---------------------------------------------------------------------------
   18116/    F588 : 4240                		clr.w	d0
   18117/    F58A :                     
   18118/    F58A :                     locret_F58A:
   18119/    F58A : 4E75                		rts
   18120/    F58C :                     ; End of function sub_F538
   18121/    F58C :                     
   18122/    F58C :                     
   18123/    F58C :                     ; =============== S U B	R O U T	I N E =======================================
   18124/    F58C :                     
   18125/    F58C :                     
   18126/    F58C :                     sub_F58C:
   18127/    F58C : 7028                		moveq	#$28,d0
   18128/    F58E : 7220                		moveq	#$20,d1
   18129/    F590 : 343C 8002           		move.w	#$8002,d2
   18130/    F594 : 3638 D816           		move.w	($FFFFD816).w,d3
   18131/    F598 : 4EB8 086E           		jsr	(sub_86E).w
   18132/    F59C : 4E75                		rts
   18133/    F59E :                     ; End of function sub_F58C
   18134/    F59E :                     
   18135/    F59E :                     ; ---------------------------------------------------------------------------
   18136/    F59E :                     ; START	OF FUNCTION CHUNK FOR sub_F4FE
   18137/    F59E :                     
   18138/    F59E :                     loc_F59E:
   18139/    F59E : 5478 FDC6           		addq.w	#2,($FFFFFDC6).w
   18140/    F5A2 : 7040                		moveq	#$40,d0
   18141/    F5A4 : 3238 FDC6           		move.w	($FFFFFDC6).w,d1
   18142/    F5A8 : 343C 8003           		move.w	#$8003,d2
   18143/    F5AC : 3638 D816           		move.w	($FFFFD816).w,d3
   18144/    F5B0 : 4EB8 086E           		jsr	(sub_86E).w
   18145/    F5B4 : 0C78 0020 FDC6      		cmpi.w	#$20,($FFFFFDC6).w
   18146/    F5BA : 6F04                		ble.s	locret_F5C0
   18147/    F5BC : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18148/    F5C0 :                     
   18149/    F5C0 :                     locret_F5C0:
   18150/    F5C0 : 4E75                		rts
   18151/    F5C2 :                     ; END OF FUNCTION CHUNK	FOR sub_F4FE
   18152/    F5C2 :                     ; ---------------------------------------------------------------------------
   18153/    F5C2 :                     ; START	OF FUNCTION CHUNK FOR sub_F538
   18154/    F5C2 :                     
   18155/    F5C2 :                     loc_F5C2:
   18156/    F5C2 : 5578 FDC6           		subq.w	#2,($FFFFFDC6).w
   18157/    F5C6 : 4A78 FDC6           		tst.w	($FFFFFDC6).w
   18158/    F5CA : 6C0C                		bge.s	loc_F5D8
   18159/    F5CC : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18160/    F5D0 : 31F8 CA3C C9FC      		move.w	($FFFFCA3C).w,($FFFFC9FC).w
   18161/    F5D6 : 4E75                		rts
   18162/    F5D8 :                     ; ---------------------------------------------------------------------------
   18163/    F5D8 :                     
   18164/    F5D8 :                     loc_F5D8:
   18165/    F5D8 : 43F8 C9DE           		lea	($FFFFC9DE).w,a1
   18166/    F5DC : 47F9 00FF 0A00      		lea	(unk_0A00&$FFFFFF).l,a3
   18167/    F5E2 : 49F9 00FF 0B02      		lea	(unk_0B02&$FFFFFF).l,a4
   18168/    F5E8 : 2A49                		movea.l	a1,a5
   18169/    F5EA : 204B                		movea.l	a3,a0
   18170/    F5EC : (MACRO)              		_move.w	0(a1),d0
   18170/    F5EC :  (MACRO-2)                           insn2op move.w, 0(a1),d0
   18170/    F5EC : =>FALSE                        if (chkop("0(a1)","0("))
   18170/    F5EC :                                       if (chkop("d0","0("))
   18170/    F5EC :                                             !move.w   0(a1),d0
   18170/    F5EC :                                       else
   18170/    F5EC :                                             !move.w   0(a1),1+d0
   18170/    F5EC :                                             !org    *-1
   18170/    F5EC :                                             !dc.b   0
   18170/    F5EC : [18170]                                endif
   18170/    F5EC : =>TRUE                         else
   18170/    F5EC : =>FALSE                              if chkop("d0","d")
   18170/    F5EC :                                       if (chkop("d0","0("))
   18170/    F5EC :                     start:
   18170/    F5EC :                                             !move.w   1+0(a1),d0
   18170/    F5EC :                     end:
   18170/    F5EC :                                             !org    start+3
   18170/    F5EC :                                             !dc.b   0
   18170/    F5EC :                                             !org    end
   18170/    F5EC :                                       else
   18170/    F5EC :                                             !move.w   1+0(a1),1+d0
   18170/    F5EC :                                             !org    *-3
   18170/    F5EC :                                             !dc.b   0
   18170/    F5EC :                                             !org    *+1
   18170/    F5EC :                                             !dc.b   0
   18170/    F5EC : [18170]                                endif
   18170/    F5EC : =>TRUE                               else
   18170/    F5EC : 3029 0001                                   !move.w   1+0(a1),d0
   18170/    F5EF :                                             !org    *-1
   18170/    F5EF : 00                                          !dc.b   0
   18170/    F5F0 : [18170]                              endif
   18170/    F5F0 : [18170]                        endif
   18171/    F5F0 : 3238 FDC6           		move.w	($FFFFFDC6).w,d1
   18172/    F5F4 : E749                		lsl.w	#3,d1
   18173/    F5F6 : D269 0010           		add.w	$10(a1),d1
   18174/    F5FA : 3829 0018           		move.w	$18(a1),d4
   18175/    F5FE : 4EB8 1272           		jsr	(sub_1272).w
   18176/    F602 : 2648                		movea.l	a0,a3
   18177/    F604 : (MACRO)              		disable_ints
   18177/    F604 : 46FC 2700                           move    #$2700,sr
   18178/    F608 : 4EB8 14E4           		jsr	(sub_14E4).w
   18179/    F60C : 46FC 2000           		move	#$2000,sr
   18180/    F610 : 4E75                		rts
   18181/    F612 :                     ; END OF FUNCTION CHUNK	FOR sub_F538
   18182/    F612 :                     ; ---------------------------------------------------------------------------
   18183/    F612 :                     ; START	OF FUNCTION CHUNK FOR sub_F4FE
   18184/    F612 :                     
   18185/    F612 :                     loc_F612:
   18186/    F612 : 5478 FDC8           		addq.w	#2,($FFFFFDC8).w
   18187/    F616 : 7002                		moveq	#2,d0
   18188/    F618 : 7205                		moveq	#5,d1
   18189/    F61A : 343C 8004           		move.w	#$8004,d2
   18190/    F61E : 7628                		moveq	#$28,d3
   18191/    F620 : 9678 FDC8           		sub.w	($FFFFFDC8).w,d3
   18192/    F624 : E34B                		lsl.w	#1,d3
   18193/    F626 : D678 D816           		add.w	($FFFFD816).w,d3
   18194/    F62A : 4EB8 086E           		jsr	(sub_86E).w
   18195/    F62E : 0C78 0028 FDC8      		cmpi.w	#$28,($FFFFFDC8).w
   18196/    F634 : 6D04                		blt.s	locret_F63A
   18197/    F636 : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18198/    F63A :                     
   18199/    F63A :                     locret_F63A:
   18200/    F63A : 4E75                		rts
   18201/    F63C :                     ; END OF FUNCTION CHUNK	FOR sub_F4FE
   18202/    F63C :                     ; ---------------------------------------------------------------------------
   18203/    F63C :                     ; START	OF FUNCTION CHUNK FOR sub_F538
   18204/    F63C :                     
   18205/    F63C :                     loc_F63C:
   18206/    F63C : 5578 FDC8           		subq.w	#2,($FFFFFDC8).w
   18207/    F640 : 4A78 FDC8           		tst.w	($FFFFFDC8).w
   18208/    F644 : 6C0C                		bge.s	loc_F652
   18209/    F646 : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18210/    F64A : 31FC 0104 C9FC      		move.w	#$104,($FFFFC9FC).w
   18211/    F650 : 4E75                		rts
   18212/    F652 :                     ; ---------------------------------------------------------------------------
   18213/    F652 :                     
   18214/    F652 :                     loc_F652:
   18215/    F652 : 7028                		moveq	#$28,d0
   18216/    F654 : 9078 FDC8           		sub.w	($FFFFFDC8).w,d0
   18217/    F658 : 7205                		moveq	#5,d1
   18218/    F65A : 343C 8003           		move.w	#$8003,d2
   18219/    F65E : 3638 D816           		move.w	($FFFFD816).w,d3
   18220/    F662 : 4EB8 086E           		jsr	(sub_86E).w
   18221/    F666 : 4E75                		rts
   18222/    F668 :                     ; END OF FUNCTION CHUNK	FOR sub_F538
   18223/    F668 :                     ; ---------------------------------------------------------------------------
   18224/    F668 :                     ; START	OF FUNCTION CHUNK FOR sub_F4FE
   18225/    F668 :                     
   18226/    F668 :                     loc_F668:
   18227/    F668 : 5278 FDCA           		addq.w	#1,($FFFFFDCA).w
   18228/    F66C : 3038 FDCA           		move.w	($FFFFFDCA).w,d0
   18229/    F670 : 721C                		moveq	#$1C,d1
   18230/    F672 : 343C 8005           		move.w	#$8005,d2
   18231/    F676 : 3638 D816           		move.w	($FFFFD816).w,d3
   18232/    F67A : 3F03                		move.w	d3,-(sp)
   18233/    F67C : 4EB8 086E           		jsr	(sub_86E).w
   18234/    F680 : 361F                		move.w	(sp)+,d3
   18235/    F682 : D678 FDCA           		add.w	($FFFFFDCA).w,d3
   18236/    F686 : D678 FDCA           		add.w	($FFFFFDCA).w,d3
   18237/    F68A : 203C 800B 800C      		move.l	#$800B800C,d0
   18238/    F690 : 7205                		moveq	#5,d1
   18239/    F692 : 3F03                		move.w	d3,-(sp)
   18240/    F694 : 6100 026E           		bsr.w	sub_F904
   18241/    F698 : 361F                		move.w	(sp)+,d3
   18242/    F69A : 203C 800E 800D      		move.l	#$800E800D,d0
   18243/    F6A0 : 7217                		moveq	#$17,d1
   18244/    F6A2 : 0643 0280           		addi.w	#$280,d3
   18245/    F6A6 : 6100 025C           		bsr.w	sub_F904
   18246/    F6AA : 0C78 0009 FDCA      		cmpi.w	#9,($FFFFFDCA).w
   18247/    F6B0 : 6D04                		blt.s	locret_F6B6
   18248/    F6B2 : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18249/    F6B6 :                     
   18250/    F6B6 :                     locret_F6B6:
   18251/    F6B6 : 4E75                		rts
   18252/    F6B8 :                     ; END OF FUNCTION CHUNK	FOR sub_F4FE
   18253/    F6B8 :                     ; ---------------------------------------------------------------------------
   18254/    F6B8 :                     ; START	OF FUNCTION CHUNK FOR sub_F538
   18255/    F6B8 :                     
   18256/    F6B8 :                     loc_F6B8:
   18257/    F6B8 : 5378 FDCA           		subq.w	#1,($FFFFFDCA).w
   18258/    F6BC : 0C78 FFFF FDCA      		cmpi.w	#$FFFF,($FFFFFDCA).w
   18259/    F6C2 : 6C06                		bge.s	loc_F6CA
   18260/    F6C4 : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18261/    F6C8 : 4E75                		rts
   18262/    F6CA :                     ; ---------------------------------------------------------------------------
   18263/    F6CA :                     
   18264/    F6CA :                     loc_F6CA:
   18265/    F6CA : 7001                		moveq	#1,d0
   18266/    F6CC : 7205                		moveq	#5,d1
   18267/    F6CE : 343C 8004           		move.w	#$8004,d2
   18268/    F6D2 : 3638 FDCA           		move.w	($FFFFFDCA).w,d3
   18269/    F6D6 : 5243                		addq.w	#1,d3
   18270/    F6D8 : E34B                		lsl.w	#1,d3
   18271/    F6DA : D678 D816           		add.w	($FFFFD816).w,d3
   18272/    F6DE : 48A7 9000           		movem.w	d0/d3,-(sp)
   18273/    F6E2 : 4EB8 086E           		jsr	(sub_86E).w
   18274/    F6E6 : 4C9F 0009           		movem.w	(sp)+,d0/d3
   18275/    F6EA : 7219                		moveq	#$19,d1
   18276/    F6EC : 343C 8003           		move.w	#$8003,d2
   18277/    F6F0 : 3F03                		move.w	d3,-(sp)
   18278/    F6F2 : 0643 0280           		addi.w	#$280,d3
   18279/    F6F6 : 4EB8 086E           		jsr	(sub_86E).w
   18280/    F6FA : 361F                		move.w	(sp)+,d3
   18281/    F6FC : 203C 800B 800C      		move.l	#$800B800C,d0
   18282/    F702 : 7205                		moveq	#5,d1
   18283/    F704 : 5543                		subq.w	#2,d3
   18284/    F706 : 3F03                		move.w	d3,-(sp)
   18285/    F708 : 6100 01FA           		bsr.w	sub_F904
   18286/    F70C : 361F                		move.w	(sp)+,d3
   18287/    F70E : 203C 800E 800D      		move.l	#$800E800D,d0
   18288/    F714 : 7217                		moveq	#$17,d1
   18289/    F716 : 0643 0280           		addi.w	#$280,d3
   18290/    F71A : 6100 01E8           		bsr.w	sub_F904
   18291/    F71E : 4E75                		rts
   18292/    F720 :                     ; END OF FUNCTION CHUNK	FOR sub_F538
   18293/    F720 :                     ; ---------------------------------------------------------------------------
   18294/    F720 :                     ; START	OF FUNCTION CHUNK FOR sub_F4FE
   18295/    F720 :                     
   18296/    F720 :                     loc_F720:
   18297/    F720 : 5278 FDCC           		addq.w	#1,($FFFFFDCC).w
   18298/    F724 : 7001                		moveq	#1,d0
   18299/    F726 : 7628                		moveq	#$28,d3
   18300/    F728 : 9678 FDCC           		sub.w	($FFFFFDCC).w,d3
   18301/    F72C : E34B                		lsl.w	#1,d3
   18302/    F72E : D678 D816           		add.w	($FFFFD816).w,d3
   18303/    F732 : 7205                		moveq	#5,d1
   18304/    F734 : 343C 8007           		move.w	#$8007,d2
   18305/    F738 : 48A7 9000           		movem.w	d0/d3,-(sp)
   18306/    F73C : 4EB8 086E           		jsr	(sub_86E).w
   18307/    F740 : 4C9F 0009           		movem.w	(sp)+,d0/d3
   18308/    F744 : 7202                		moveq	#2,d1
   18309/    F746 : 343C 8009           		move.w	#$8009,d2
   18310/    F74A : 48A7 B000           		movem.w	d0/d2-d3,-(sp)
   18311/    F74E : 0643 0280           		addi.w	#$280,d3
   18312/    F752 : 4EB8 086E           		jsr	(sub_86E).w
   18313/    F756 : 4C9F 000D           		movem.w	(sp)+,d0/d2-d3
   18314/    F75A : 720F                		moveq	#$F,d1
   18315/    F75C : 48A7 9000           		movem.w	d0/d3,-(sp)
   18316/    F760 : 0643 0480           		addi.w	#$480,d3
   18317/    F764 : 4EB8 086E           		jsr	(sub_86E).w
   18318/    F768 : 4C9F 0009           		movem.w	(sp)+,d0/d3
   18319/    F76C : 7206                		moveq	#6,d1
   18320/    F76E : 343C 8008           		move.w	#$8008,d2
   18321/    F772 : 0643 0B00           		addi.w	#$B00,d3
   18322/    F776 : 4EB8 086E           		jsr	(sub_86E).w
   18323/    F77A : 7201                		moveq	#1,d1
   18324/    F77C : 761C                		moveq	#$1C,d3
   18325/    F77E : 9678 FDCC           		sub.w	($FFFFFDCC).w,d3
   18326/    F782 : EF4B                		lsl.w	#7,d3
   18327/    F784 : D678 D816           		add.w	($FFFFD816).w,d3
   18328/    F788 : 7009                		moveq	#9,d0
   18329/    F78A : 343C 8006           		move.w	#$8006,d2
   18330/    F78E : 48A7 5000           		movem.w	d1/d3,-(sp)
   18331/    F792 : 4EB8 086E           		jsr	(sub_86E).w
   18332/    F796 : 4C9F 000A           		movem.w	(sp)+,d1/d3
   18333/    F79A : 203C 800F 8010      		move.l	#$800F8010,d0
   18334/    F7A0 : 0643 0012           		addi.w	#$12,d3
   18335/    F7A4 : 48A7 5000           		movem.w	d1/d3,-(sp)
   18336/    F7A8 : 6100 015A           		bsr.w	sub_F904
   18337/    F7AC : 4C9F 000A           		movem.w	(sp)+,d1/d3
   18338/    F7B0 : 7018                		moveq	#$18,d0
   18339/    F7B2 : 343C 8009           		move.w	#$8009,d2
   18340/    F7B6 : 5443                		addq.w	#2,d3
   18341/    F7B8 : 48A7 5000           		movem.w	d1/d3,-(sp)
   18342/    F7BC : 4EB8 086E           		jsr	(sub_86E).w
   18343/    F7C0 : 4C9F 000A           		movem.w	(sp)+,d1/d3
   18344/    F7C4 : 7006                		moveq	#6,d0
   18345/    F7C6 : 343C 8008           		move.w	#$8008,d2
   18346/    F7CA : 0643 0030           		addi.w	#$30,d3
   18347/    F7CE : 4EB8 086E           		jsr	(sub_86E).w
   18348/    F7D2 : 0C78 0006 FDCC      		cmpi.w	#6,($FFFFFDCC).w
   18349/    F7D8 : 6D0C                		blt.s	locret_F7E6
   18350/    F7DA : 0C78 0006 FDCC      		cmpi.w	#6,($FFFFFDCC).w
   18351/    F7E0 : 6D04                		blt.s	locret_F7E6
   18352/    F7E2 : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18353/    F7E6 :                     
   18354/    F7E6 :                     locret_F7E6:
   18355/    F7E6 :                     							; sub_F4FE+2E2j
   18356/    F7E6 : 4E75                		rts
   18357/    F7E8 :                     ; END OF FUNCTION CHUNK	FOR sub_F4FE
   18358/    F7E8 :                     ; ---------------------------------------------------------------------------
   18359/    F7E8 :                     ; START	OF FUNCTION CHUNK FOR sub_F538
   18360/    F7E8 :                     
   18361/    F7E8 :                     loc_F7E8:
   18362/    F7E8 : 5378 FDCC           		subq.w	#1,($FFFFFDCC).w
   18363/    F7EC : 4A78 FDCC           		tst.w	($FFFFFDCC).w
   18364/    F7F0 : 6C06                		bge.s	loc_F7F8
   18365/    F7F2 : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18366/    F7F6 : 4E75                		rts
   18367/    F7F8 :                     ; ---------------------------------------------------------------------------
   18368/    F7F8 :                     
   18369/    F7F8 :                     loc_F7F8:
   18370/    F7F8 : 7006                		moveq	#6,d0
   18371/    F7FA : 9078 FDCC           		sub.w	($FFFFFDCC).w,d0
   18372/    F7FE : 3638 D816           		move.w	($FFFFD816).w,d3
   18373/    F802 : 0643 0044           		addi.w	#$44,d3
   18374/    F806 : 7205                		moveq	#5,d1
   18375/    F808 : 343C 8004           		move.w	#$8004,d2
   18376/    F80C : 48A7 9000           		movem.w	d0/d3,-(sp)
   18377/    F810 : 4EB8 086E           		jsr	(sub_86E).w
   18378/    F814 : 4C9F 0009           		movem.w	(sp)+,d0/d3
   18379/    F818 : 7202                		moveq	#2,d1
   18380/    F81A : 343C 8003           		move.w	#$8003,d2
   18381/    F81E : 48A7 B000           		movem.w	d0/d2-d3,-(sp)
   18382/    F822 : 0643 0280           		addi.w	#$280,d3
   18383/    F826 : 4EB8 086E           		jsr	(sub_86E).w
   18384/    F82A : 4C9F 000D           		movem.w	(sp)+,d0/d2-d3
   18385/    F82E : 7213                		moveq	#$13,d1
   18386/    F830 : 9278 FDCC           		sub.w	($FFFFFDCC).w,d1
   18387/    F834 : 0643 0480           		addi.w	#$480,d3
   18388/    F838 : 4EB8 086E           		jsr	(sub_86E).w
   18389/    F83C : 7206                		moveq	#6,d1
   18390/    F83E : 9278 FDCC           		sub.w	($FFFFFDCC).w,d1
   18391/    F842 : 3638 D816           		move.w	($FFFFD816).w,d3
   18392/    F846 : 0643 0B00           		addi.w	#$B00,d3
   18393/    F84A : 7009                		moveq	#9,d0
   18394/    F84C : 343C 8005           		move.w	#$8005,d2
   18395/    F850 : 48A7 5000           		movem.w	d1/d3,-(sp)
   18396/    F854 : 4EB8 086E           		jsr	(sub_86E).w
   18397/    F858 : 4C9F 000A           		movem.w	(sp)+,d1/d3
   18398/    F85C : 203C 800E 800D      		move.l	#$800E800D,d0
   18399/    F862 : 0643 0012           		addi.w	#$12,d3
   18400/    F866 : 48A7 5000           		movem.w	d1/d3,-(sp)
   18401/    F86A : 0443 0080           		subi.w	#$80,d3
   18402/    F86E : 6100 0094           		bsr.w	sub_F904
   18403/    F872 : 4C9F 000A           		movem.w	(sp)+,d1/d3
   18404/    F876 : 7018                		moveq	#$18,d0
   18405/    F878 : 343C 8003           		move.w	#$8003,d2
   18406/    F87C : 5443                		addq.w	#2,d3
   18407/    F87E : 4EB8 086E           		jsr	(sub_86E).w
   18408/    F882 : 4E75                		rts
   18409/    F884 :                     ; END OF FUNCTION CHUNK	FOR sub_F538
   18410/    F884 :                     ; ---------------------------------------------------------------------------
   18411/    F884 :                     ; START	OF FUNCTION CHUNK FOR sub_F4FE
   18412/    F884 :                     
   18413/    F884 :                     loc_F884:
   18414/    F884 : 5678 FDCE           		addq.w	#3,($FFFFFDCE).w
   18415/    F888 : 7003                		moveq	#3,d0
   18416/    F88A : 7202                		moveq	#2,d1
   18417/    F88C : 343C 800A           		move.w	#$800A,d2
   18418/    F890 : 7628                		moveq	#$28,d3
   18419/    F892 : 9678 FDCE           		sub.w	($FFFFFDCE).w,d3
   18420/    F896 : E34B                		lsl.w	#1,d3
   18421/    F898 : 0643 0380           		addi.w	#$380,d3
   18422/    F89C : D678 D816           		add.w	($FFFFD816).w,d3
   18423/    F8A0 : 4EB8 086E           		jsr	(sub_86E).w
   18424/    F8A4 : 0C78 0021 FDCE      		cmpi.w	#$21,($FFFFFDCE).w
   18425/    F8AA : 6D04                		blt.s	locret_F8B0
   18426/    F8AC : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18427/    F8B0 :                     
   18428/    F8B0 :                     locret_F8B0:
   18429/    F8B0 : 4E75                		rts
   18430/    F8B2 :                     ; END OF FUNCTION CHUNK	FOR sub_F4FE
   18431/    F8B2 :                     ; ---------------------------------------------------------------------------
   18432/    F8B2 :                     ; START	OF FUNCTION CHUNK FOR sub_F538
   18433/    F8B2 :                     
   18434/    F8B2 :                     loc_F8B2:
   18435/    F8B2 : 5778 FDCE           		subq.w	#3,($FFFFFDCE).w
   18436/    F8B6 : 4A78 FDCE           		tst.w	($FFFFFDCE).w
   18437/    F8BA : 6C06                		bge.s	loc_F8C2
   18438/    F8BC : 5878 FDC4           		addq.w	#4,($FFFFFDC4).w
   18439/    F8C0 : 4E75                		rts
   18440/    F8C2 :                     ; ---------------------------------------------------------------------------
   18441/    F8C2 :                     
   18442/    F8C2 :                     loc_F8C2:
   18443/    F8C2 : 7202                		moveq	#2,d1
   18444/    F8C4 : 3638 D816           		move.w	($FFFFD816).w,d3
   18445/    F8C8 : 0643 0380           		addi.w	#$380,d3
   18446/    F8CC : 0643 000E           		addi.w	#$E,d3
   18447/    F8D0 : 701E                		moveq	#$1E,d0
   18448/    F8D2 : 9078 FDCE           		sub.w	($FFFFFDCE).w,d0
   18449/    F8D6 : 6620                		bne.s	loc_F8F8
   18450/    F8D8 : 7002                		moveq	#2,d0
   18451/    F8DA : 343C 8005           		move.w	#$8005,d2
   18452/    F8DE : 48A7 5000           		movem.w	d1/d3,-(sp)
   18453/    F8E2 : 4EB8 086E           		jsr	(sub_86E).w
   18454/    F8E6 : 4C9F 000A           		movem.w	(sp)+,d1/d3
   18455/    F8EA : 203C 800E 800D      		move.l	#$800E800D,d0
   18456/    F8F0 : 5843                		addq.w	#4,d3
   18457/    F8F2 : 6100 0010           		bsr.w	sub_F904
   18458/    F8F6 : 4E75                		rts
   18459/    F8F8 :                     ; ---------------------------------------------------------------------------
   18460/    F8F8 :                     
   18461/    F8F8 :                     loc_F8F8:
   18462/    F8F8 : 343C 8003           		move.w	#$8003,d2
   18463/    F8FC : 5C43                		addq.w	#6,d3
   18464/    F8FE : 4EB8 086E           		jsr	(sub_86E).w
   18465/    F902 : 4E75                		rts
   18466/    F904 :                     ; END OF FUNCTION CHUNK	FOR sub_F538
   18467/    F904 :                     
   18468/    F904 :                     ; =============== S U B	R O U T	I N E =======================================
   18469/    F904 :                     
   18470/    F904 :                     
   18471/    F904 :                     sub_F904:
   18472/    F904 :                     							; sub_F4FE+1A8p ...
   18473/    F904 : 0803 0007           		btst	#7,d3
   18474/    F908 : 6702                		beq.s	loc_F90C
   18475/    F90A : 4840                		swap	d0
   18476/    F90C :                     
   18477/    F90C :                     loc_F90C:
   18478/    F90C : E58B                		lsl.l	#2,d3
   18479/    F90E : E44B                		lsr.w	#2,d3
   18480/    F910 : 0043 4000           		ori.w	#$4000,d3
   18481/    F914 : 4843                		swap	d3
   18482/    F916 : 0243 0003           		andi.w	#3,d3
   18483/    F91A : 43F9 00C0 0000      		lea	(vdp_data_port).l,a1
   18484/    F920 : 33FC 8F80 00C0      		move.w	#$8F80,(vdp_control_port).l
             F926 : 0004             
   18485/    F928 : 31FC 8F80 C9D6      		move.w	#$8F80,($FFFFC9D6).w
   18486/    F92E : 2343 0004           		move.l	d3,4(a1)
   18487/    F932 : E289                		lsr.l	#1,d1
   18488/    F934 :                     
   18489/    F934 :                     loc_F934:
   18490/    F934 : 2280                		move.l	d0,(a1)
   18491/    F936 : 51C9 FFFC           		dbf	d1,loc_F934
   18492/    F93A : 33FC 8F02 00C0      		move.w	#$8F02,(vdp_control_port).l
             F940 : 0004             
   18493/    F942 : 31FC 8F02 C9D6      		move.w	#$8F02,($FFFFC9D6).w
   18494/    F948 : 4E75                		rts
   18495/    F94A :                     ; End of function sub_F904
   18496/    F94A :                     
   18497/    F94A :                     
   18498/    F94A :                     ; =============== S U B	R O U T	I N E =======================================
   18499/    F94A :                     
   18500/    F94A :                     
   18501/    F94A :                     sub_F94A:
   18502/    F94A : 31FC FFFF F9C0      		move.w	#$FFFF,($FFFFF9C0).w
   18503/    F950 : 4E75                		rts
   18504/    F952 :                     ; End of function sub_F94A
   18505/    F952 :                     
   18506/    F952 :                     ; ---------------------------------------------------------------------------
   18507/    F952 : 4E75                		rts
   18508/    F954 :                     
   18509/    F954 :                     ; =============== S U B	R O U T	I N E =======================================
   18510/    F954 :                     
   18511/    F954 :                     
   18512/    F954 :                     Level_AnimateBG:
   18513/    F954 : 3038 D834           		move.w	($FFFFD834).w,d0
   18514/    F958 : D040                		add.w	d0,d0
   18515/    F95A : 41FA 0008           		lea	loc_F964(pc),a0
   18516/    F95E : D0F0 0000           		adda.w	(a0,d0.w),a0
   18517/    F962 : 4ED0                		jmp	(a0)
   18518/    F964 :                     ; End of function Level_AnimateBG
   18519/    F964 :                     
   18520/    F964 :                     ; ---------------------------------------------------------------------------
   18521/    F964 : 00A6                loc_F964:	dc.w locret_FA0A-loc_F964
   18522/    F966 : 00A8                		dc.w loc_FA0C-loc_F964
   18523/    F968 : 00A6                		dc.w locret_FA0A-loc_F964
   18524/    F96A : 00A6                		dc.w locret_FA0A-loc_F964
   18525/    F96C : 00A6                		dc.w locret_FA0A-loc_F964
   18526/    F96E : 00A6                		dc.w locret_FA0A-loc_F964
   18527/    F970 : 00A6                		dc.w locret_FA0A-loc_F964
   18528/    F972 : 00A6                		dc.w locret_FA0A-loc_F964
   18529/    F974 :                     ; ---------------------------------------------------------------------------
   18530/    F974 :                     
   18531/    F974 :                     loc_F974:
   18532/    F974 : 4DF8 F9C0           		lea	($FFFFF9C0).w,a6
   18533/    F978 : 3E16                		move.w	(a6),d7
   18534/    F97A : 6A00 0040           		bpl.w	loc_F9BC
   18535/    F97E : 4BEE 0002           		lea	2(a6),a5
   18536/    F982 :                     
   18537/    F982 :                     loc_F982:
   18538/    F982 : 3018                		move.w	(a0)+,d0
   18539/    F984 : 677E                		beq.s	locret_FA04
   18540/    F986 : 43F0 00FE           		lea	-2(a0,d0.w),a1
   18541/    F98A : 49D5                		lea	(a5),a4
   18542/    F98C : 425C                		clr.w	(a4)+
   18543/    F98E : 28C9                		move.l	a1,(a4)+
   18544/    F990 : 18D9                		move.b	(a1)+,(a4)+
   18545/    F992 : 18D9                		move.b	(a1)+,(a4)+
   18546/    F994 : 38D9                		move.w	(a1)+,(a4)+
   18547/    F996 : 3018                		move.w	(a0)+,d0
   18548/    F998 : 7200                		moveq	#0,d1
   18549/    F99A : 1218                		move.b	(a0)+,d1
   18550/    F99C : D241                		add.w	d1,d1
   18551/    F99E : 347B 1066           		movea.w	loc_FA06(pc,d1.w),a2
   18552/    F9A2 : 3212                		move.w	(a2),d1
   18553/    F9A4 : EB49                		lsl.w	#5,d1
   18554/    F9A6 : D041                		add.w	d1,d0
   18555/    F9A8 : 38C0                		move.w	d0,(a4)+
   18556/    F9AA : 28D9                		move.l	(a1)+,(a4)+
   18557/    F9AC : 1018                		move.b	(a0)+,d0
   18558/    F9AE : D02D 0006           		add.b	6(a5),d0
   18559/    F9B2 : 1A80                		move.b	d0,(a5)
   18560/    F9B4 : 4BED 0010           		lea	$10(a5),a5
   18561/    F9B8 : 5256                		addq.w	#1,(a6)
   18562/    F9BA : 60C6                		bra.s	loc_F982
   18563/    F9BC :                     ; ---------------------------------------------------------------------------
   18564/    F9BC :                     
   18565/    F9BC :                     loc_F9BC:
   18566/    F9BC : 3E1E                		move.w	(a6)+,d7
   18567/    F9BE :                     
   18568/    F9BE :                     loc_F9BE:
   18569/    F9BE : 5316                		subq.b	#1,(a6)
   18570/    F9C0 : 663A                		bne.s	loc_F9FC
   18571/    F9C2 : 1CAE 0006           		move.b	6(a6),(a6)
   18572/    F9C6 : 7001                		moveq	#1,d0
   18573/    F9C8 : D02E 0001           		add.b	1(a6),d0
   18574/    F9CC : B02E 0007           		cmp.b	7(a6),d0
   18575/    F9D0 : 6502                		bcs.s	loc_F9D4
   18576/    F9D2 : 7000                		moveq	#0,d0
   18577/    F9D4 :                     
   18578/    F9D4 :                     loc_F9D4:
   18579/    F9D4 : 1D40 0001           		move.b	d0,1(a6)
   18580/    F9D8 : D040                		add.w	d0,d0
   18581/    F9DA : D040                		add.w	d0,d0
   18582/    F9DC : 206E 0002           		movea.l	2(a6),a0
   18583/    F9E0 : 2030 0004           		move.l	4(a0,d0.w),d0
   18584/    F9E4 : 322E 000A           		move.w	$A(a6),d1
   18585/    F9E8 : 342E 0008           		move.w	8(a6),d2
   18586/    F9EC : 2D40 000C           		move.l	d0,$C(a6)
   18587/    F9F0 : 48E7 0102           		movem.l	d7/a6,-(sp)
   18588/    F9F4 : 4EB8 0568           		jsr	(sub_568).w
   18589/    F9F8 : 4CDF 4080           		movem.l	(sp)+,d7/a6
   18590/    F9FC :                     
   18591/    F9FC :                     loc_F9FC:
   18592/    F9FC : 4DEE 0010           		lea	$10(a6),a6
   18593/    FA00 : 51CF FFBC           		dbf	d7,loc_F9BE
   18594/    FA04 :                     
   18595/    FA04 :                     locret_FA04:
   18596/    FA04 : 4E75                		rts
   18597/    FA06 :                     ; ---------------------------------------------------------------------------
   18598/    FA06 :                     
   18599/    FA06 :                     loc_FA06:
   18600/    FA06 : C9FA CA3A           		muls.w	loc_C442(pc),d4
   18601/    FA0A :                     locret_FA0A:
   18602/    FA0A : 4E75                		rts
   18603/    FA0C :                     ; ---------------------------------------------------------------------------
   18604/    FA0C :                     
   18605/    FA0C :                     loc_FA0C:
   18606/    FA0C : 41FA 0006           		lea	TTZ_AniTileLocs(pc),a0
   18607/    FA10 : 6000 FF62           		bra.w	loc_F974
   18608/    FA14 :                     ; ---------------------------------------------------------------------------
   18609/    FA14 : 0010 23E0           TTZ_AniTileLocs:dc.l $001023E0
   18610/    FA18 : 0000 0016           		dc.l $00000016
   18611/    FA1C : 2960 0101           		dc.l $29600101
   18612/    FA20 : 0000 0000           		dc.l $00000000
   18613/    FA24 : 0402 0100           		dc.l $04020100
   18614/    FA28 : 0004 2486           		dc.l ARTUNC_TTZAnimatedFanFG1
   18615/    FA2C : 0004 2686           		dc.l ARTUNC_TTZAnimatedFanFG2
   18616/    FA30 : 0204 0200           		dc.l $02040200
   18617/    FA34 : 0004 2886           		dc.l ARTUNC_TTZAnimatedTurbineBG1
   18618/    FA38 : 0004 2C86           		dc.l ARTUNC_TTZAnimatedTurbineBG2
   18619/    FA3C : 0004 3086           		dc.l ARTUNC_TTZAnimatedTurbineBG3
   18620/    FA40 : 0004 3486           		dc.l ARTUNC_TTZAnimatedTurbineBG4
   18621/    FA44 :                     ; ---------------------------------------------------------------------------
   18622/    FA44 :                     ; ===========================================================================
   18623/    FA44 :                     ; ---------------------------------------------------------------------------
   18624/    FA44 :                     ; Some sort of DMA cue system for uncompressed art such as animated tiles and HUD
   18625/    FA44 :                     ; ---------------------------------------------------------------------------
   18626/    FA44 :                     
   18627/    FA44 :                     sub_FA44:
   18628/    FA44 : 3E3A 0022           		move.w	UnkReps(pc),d7			; load number of repeat times (22) to d7
   18629/    FA48 : 41FA 0020           		lea	UnkReps+2(pc),a0		; load data location to a0
   18630/    FA4C :                     
   18631/    FA4C :                     loc_FA4C:
   18632/    FA4C : 3218                		move.w	(a0)+,d1			; load VRAM location
   18633/    FA4E : D278 D81E           		add.w	($FFFFD81E).w,d1
   18634/    FA52 : 2018                		move.l	(a0)+,d0			; load art location to d0
   18635/    FA54 : 3418                		move.w	(a0)+,d2			; load size of art to d2
   18636/    FA56 : 48E7 0180           		movem.l	d7-a0,-(sp)			; store all register data to the stack pointer
   18637/    FA5A : 4EB8 05E8           		jsr	(sub_5E8).w			; dump art
   18638/    FA5E : 4CDF 0180           		movem.l	(sp)+,d7-a0			; reload art from stack
   18639/    FA62 : 51CF FFE8           		dbf	d7,loc_FA4C			; repeat til all uncompressed art is loaded to their respected locations
   18640/    FA66 : 4E75                		rts
   18641/    FA68 :                     
   18642/    FA68 :                     ; ===========================================================================
   18643/    FA68 :                     ; ---------------------------------------------------------------------------
   18644/    FA68 :                     ; Uncompressed Animated PLC Table
   18645/    FA68 :                     ; ---------------------------------------------------------------------------
   18646/    FA68 :                     
   18647/    FA68 : 0022                UnkReps:	dc.w $0022				; number of uncompressed art files to read
   18648/    FA6A : 0000                		dc.w $0000				; VRAM location
   18649/    FA6C : 0004 4F66           		dc.l AniArt_Hud1to9_Sym			; "0" Hud	; location of Art
   18650/    FA70 : 0020                		dc.w $0020				; size of Art
   18651/    FA72 : 0080                		dc.w $0080
   18652/    FA74 : 0004 4FA6           		dc.l AniArt_Hud1to9_Sym+$40		; "1" Hud
   18653/    FA78 : 0020                		dc.w $0020
   18654/    FA7A : 0100                		dc.w $0100
   18655/    FA7C : 0004 4FE6           		dc.l AniArt_Hud1to9_Sym+$80		; "2" Hud
   18656/    FA80 : 0020                		dc.w $0020
   18657/    FA82 : 0180                		dc.w $0180
   18658/    FA84 : 0004 5026           		dc.l AniArt_Hud1to9_Sym+$C0		; "3" Hud
   18659/    FA88 : 0020                		dc.w $0020
   18660/    FA8A : 0200                		dc.w $0200
   18661/    FA8C : 0004 5066           		dc.l AniArt_Hud1to9_Sym+$100		; "4" Hud
   18662/    FA90 : 0020                		dc.w $0020
   18663/    FA92 : 0280                		dc.w $0280
   18664/    FA94 : 0004 50A6           		dc.l AniArt_Hud1to9_Sym+$140		; "5" Hud
   18665/    FA98 : 0020                		dc.w $0020
   18666/    FA9A : 0300                		dc.w $0300
   18667/    FA9C : 0004 50E6           		dc.l AniArt_Hud1to9_Sym+$180		; "6" Hud
   18668/    FAA0 : 0020                		dc.w $0020
   18669/    FAA2 : 0380                		dc.w $0380
   18670/    FAA4 : 0004 5126           		dc.l AniArt_Hud1to9_Sym+$1C0		; "7" Hud
   18671/    FAA8 : 0020                		dc.w $0020
   18672/    FAAA : 0400                		dc.w $0400
   18673/    FAAC : 0004 5166           		dc.l AniArt_Hud1to9_Sym+$200		; "8" Hud
   18674/    FAB0 : 0020                		dc.w $0020
   18675/    FAB2 : 0480                		dc.w $0480
   18676/    FAB4 : 0004 51A6           		dc.l AniArt_Hud1to9_Sym+$240		; "9" Hud
   18677/    FAB8 : 0020                		dc.w $0020
   18678/    FABA : 0500                		dc.w $0500
   18679/    FABC : 0004 51E6           		dc.l AniArt_Hud1to9_Sym+$280		; "!" Hud (Unused)
   18680/    FAC0 : 0020                		dc.w $0020
   18681/    FAC2 : 0580                		dc.w $0580
   18682/    FAC4 : 0004 5226           		dc.l AniArt_Hud1to9_Sym+$2C0		; """ (Minute/Second Symbol)
   18683/    FAC8 : 0020                		dc.w $0020
   18684/    FACA : 0600                		dc.w $0600
   18685/    FACC : 0004 5906           		dc.l AniArt_MiliSymbol			; "" (Second/Mili-Second Symbol)
   18686/    FAD0 : 0020                		dc.w $0020
   18687/    FAD2 : 0680                		dc.w $0680
   18688/    FAD4 : 0004 5406           		dc.l AniArt_RingSprites+$1C0		; Ring Sprite (Frame 3)
   18689/    FAD8 : 0020                		dc.w $0020
   18690/    FADA : 0700                		dc.w $0700
   18691/    FADC : 0004 4E66           		dc.l AniArt_SLTime			; "/TIME" (Unused)
   18692/    FAE0 : 0020                		dc.w $0020
   18693/    FAE2 : 0780                		dc.w $0780
   18694/    FAE4 : 0004 4886           		dc.l ARTUNC_TTZAnimatedTurbineBG5	; animated turbine (Frame 8)
   18695/    FAE8 : 0020                		dc.w $0020
   18696/    FAEA : 0800                		dc.w $0800
   18697/    FAEC : 0004 4906           		dc.l ARTUNC_TTZAnimatedTurbineBG7	; animated turbine (Frame 7)
   18698/    FAF0 : 0020                		dc.w $0020
   18699/    FAF2 : 0880                		dc.w $0880
   18700/    FAF4 : 0004 48C6           		dc.l ARTUNC_TTZAnimatedTurbineBG6	; animated turbine (Frame 6)
   18701/    FAF8 : 0020                		dc.w $0020
   18702/    FAFA : 0900                		dc.w $0900
   18703/    FAFC : 0004 52C6           		dc.l AniArt_RingSprites+$80		; 5 Point Stars (Unused)
   18704/    FB00 : 0020                		dc.w $0020
   18705/    FB02 : 0840                		dc.w $0840
   18706/    FB04 : 0004 5446           		dc.l AniArt_Tether			; Tether (Frame 1)
   18707/    FB08 : 0010                		dc.w $0010
   18708/    FB0A : 08C0                		dc.w $08C0
   18709/    FB0C : 0004 5466           		dc.l AniArt_Tether+$20			; Tether (Frame 2)
   18710/    FB10 : 0010                		dc.w $0010
   18711/    FB12 : 0940                		dc.w $0940
   18712/    FB14 : 0004 5486           		dc.l AniArt_Tether+$40			; Tether (Frame 3)
   18713/    FB18 : 0010                		dc.w $0010
   18714/    FB1A : 09C0                		dc.w $09C0
   18715/    FB1C : 0004 54A6           		dc.l AniArt_Tether+$60			; Tether (Frame 4)
   18716/    FB20 : 0010                		dc.w $0010
   18717/    FB22 : 0980                		dc.w $0980
   18718/    FB24 : 0004 54C6           		dc.l AniArt_MultiStars			; Vertical Star (Frame 1) (Unused)
   18719/    FB28 : 0020                		dc.w $0020
   18720/    FB2A : 0A00                		dc.w $0A00
   18721/    FB2C : 0004 5506           		dc.l AniArt_MultiStars+$40		; Horizontal Star (Frame 1) Vertical Star (Frame 2) (Unused)
   18722/    FB30 : 0020                		dc.w $0020
   18723/    FB32 : 0A80                		dc.w $0A80
   18724/    FB34 : 0004 5586           		dc.l AniArt_MultiStars+$C0		; Horizontal Star (Frame 2) (Unused) Chain? (Unused)
   18725/    FB38 : 0040                		dc.w $0040
   18726/    FB3A : 0B00                		dc.w $0B00
   18727/    FB3C : 0004 5606           		dc.l AniArt_MultiStars+$140		; Vertical and Horizontal White Star (Unused)
   18728/    FB40 : 0040                		dc.w $0040
   18729/    FB42 : 0B80                		dc.w $0B80
   18730/    FB44 : 0004 5686           		dc.l AniArt_MultiStars+$1C0		; More Chain Pieces? (Unused)
   18731/    FB48 : 0040                		dc.w $0040
   18732/    FB4A : 0C00                		dc.w $0C00
   18733/    FB4C : 0004 5706           		dc.l AniArt_MultiStars+$240		; Vertical and Horizontal White Star (Exact same design as the one before) (Unused)
   18734/    FB50 : 0040                		dc.w $0040
   18735/    FB52 : 0C80                		dc.w $0C80
   18736/    FB54 : 0004 5786           		dc.l AniArt_MultiStars+$2C0		; Vertical and Horizontal White Star (More Sparkly) (Unused)
   18737/    FB58 : 0040                		dc.w $0040
   18738/    FB5A : 0D00                		dc.w $0D00
   18739/    FB5C : 0004 5806           		dc.l AniArt_MultiStars+$340		; Centre of Night Sky Styled Star (Unused)
   18740/    FB60 : 0040                		dc.w $0040
   18741/    FB62 : 0D80                		dc.w $0D80
   18742/    FB64 : 0004 5886           		dc.l AniArt_MultiStars+$3C0		; Edges of Night Sky Styled Star (Unused)
   18743/    FB68 : 0040                		dc.w $0040
   18744/    FB6A : 0E00                		dc.w $0E00
   18745/    FB6C : 0004 5306           		dc.l AniArt_RingSprites+$C0		; Ring Sprite (Frame 1)
   18746/    FB70 : 0040                		dc.w $0040
   18747/    FB72 : 0E80                		dc.w $0E80
   18748/    FB74 : 0004 5386           		dc.l AniArt_RingSprites+$140		; Ring Sprite (Frame 2)
   18749/    FB78 : 0040                		dc.w $0040
   18750/    FB7A : 0F00                		dc.w $0F00
   18751/    FB7C : 0004 5246           		dc.l AniArt_RingSprites			; Stars (Ring Collect)
   18752/    FB80 : 0040                		dc.w $0040
   18753/    FB82 :                     ; ---------------------------------------------------------------------------
   18754/    FB82 :                     ; ===========================================================================
   18755/    FB82 :                     ; ---------------------------------------------------------------------------
   18756/    FB82 :                     ; Unknown Data
   18757/    FB82 :                     ; ---------------------------------------------------------------------------
   18758/    FB82 :                     ; Data Location (0000FB82 - 0000FDAF)
   18759/    FB82 :                     ; Striped out
   18760/    FB82 :                     ; UnkData_0000FB82:
   18761/    FB82 :                     		binclude	"UnknownCodes/UnknownData_0000FB82.bin"
   18762/    FDB0 : (MACRO)              		even
   18762/    FDB0 : =>TRUE                       if notZ80(MOMCPU)
   18762/    FDB0 : =>FALSE                              if (*)&1
   18762/    FDB0 :                                             dc.b 0                          ;ds.b 1
   18762/    FDB0 : [18762]                              endif
   18762/    FDB0 : =>FALSE                      else
   18762/    FDB0 :                                     if ($)&1
   18762/    FDB0 :                                             db 0
   18762/    FDB0 : [18762]                              endif
   18762/    FDB0 : [18762]                      endif
   18763/    FDB0 :                     ; ---------------------------------------------------------------------------
   18764/    FDB0 :                     ; ===========================================================================
   18765/    FDB0 :                     ; ---------------------------------------------------------------------------
   18766/    FDB0 :                     ; Unknown Data
   18767/    FDB0 :                     ; ---------------------------------------------------------------------------
   18768/    FDB0 :                     ; Data Location (0000FDB0 - 0000FFFF)
   18769/    FDB0 :                     ; Striped out
   18770/    FDB0 :                     ; UnkData_0000FDB0:
   18771/    FDB0 :                     		binclude	"UnknownCodes/UnknownData_0000FDB0.bin"
   18772/   10000 : (MACRO)              		even
   18772/   10000 : =>TRUE                       if notZ80(MOMCPU)
   18772/   10000 : =>FALSE                              if (*)&1
   18772/   10000 :                                             dc.b 0                          ;ds.b 1
   18772/   10000 : [18772]                              endif
   18772/   10000 : =>FALSE                      else
   18772/   10000 :                                     if ($)&1
   18772/   10000 :                                             db 0
   18772/   10000 : [18772]                              endif
   18772/   10000 : [18772]                      endif
   18773/   10000 :                     ; ---------------------------------------------------------------------------
   18774/   10000 :                     ; ===========================================================================
   18775/   10000 :                     ; ---------------------------------------------------------------------------
   18776/   10000 :                     ; Music Data (Z80 aligned to $00010000)
   18777/   10000 :                     ; ---------------------------------------------------------------------------
   18778/   10000 : (MACRO)              MusicBank:	startBank
   18778/   10000 :  (MACRO-2)                   align   $8000
   18778/   10000 :   (MACRO-3)                  cnop 0,$8000
   18778/   10000 : =>TRUE                       if notZ80(MOMCPU)
   18778/   10000 :    (MACRO-4)                         org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   18778/   10000 : =>TRUE                       if notZ80(MOMCPU)
   18778/   10000 : =>FALSE                              if (*-1+($8000)-((*-1+(-(0)))#($8000))) < *
   18778/   10000 :                                             error "too much stuff before org $\{(*-1+($8000)-((*-1+(-(0)))#($8000)))} ($\{(*-(*-1+($8000)-((*-1+(-(0)))#($8000))))} bytes)"
   18778/   10000 : =>TRUE                               else
   18778/   10000 :                                             !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   18778/   10000 : [18778]                              endif
   18778/   10000 : =>FALSE                      else
   18778/   10000 :                                     if (*-1+($8000)-((*-1+(-(0)))#($8000))) < $
   18778/   10000 :                                             error "too much stuff before org 0\{(*-1+($8000)-((*-1+(-(0)))#($8000)))}h (0\{($-(*-1+($8000)-((*-1+(-(0)))#($8000))))}h bytes)"
   18778/   10000 :                                     else
   18778/   10000 :                                             while (*-1+($8000)-((*-1+(-(0)))#($8000))) > $
   18778/   10000 :                                                     db 0
   18778/   10000 :                                             endm
   18778/   10000 : [18778]                              endif
   18778/   10000 : [18778]                      endif
   18778/   10000 : =>FALSE                      else
   18778/   10000 :                                     org ($-1+($8000)-(($-1+(-(0)))#($8000)))
   18778/   10000 : [18778]                      endif
   18778/   10000 : =$10000              MusicBank label *
   18778/   10000 : =$10000              soundBankStart := MusicBank
   18778/   10000 : ="MusicBank"         soundBankName := "MusicBank"
   18779/   10000 :                     Music81:	include	"Sound/Music/Mus81 - Electoria.asm"
(1)    1/   10000 :                     Electoria_Header:
(1)    2/   10000 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   10000 :                     
(1)    2/   10000 : =$3                  SourceDriver set 3
(1)    2/   10000 :                     
(1)    2/   10000 : =>TRUE                       if ("1"<>"")
(1)    2/   10000 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   10000 : =>FALSE                      else
(1)    2/   10000 :                                     set SourceSMPS2ASM,0
(1)    2/   10000 : [2]                          endif
(1)    2/   10000 :                     
(1)    2/   10000 : =$10000              songStart set *
(1)    2/   10000 :                     
(1)    2/   10000 : =>TRUE                       if MOMPASS>1
(1)    2/   10000 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   10000 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   10000 : [2]                                  endif
(1)    2/   10000 : [2]                          endif
(1)    2/   10000 :                     
(1)    3/   10000 : (MACRO)              	smpsHeaderVoice     Electoria_Voices
(1)    3/   10000 : =>FALSE                      if songStart<>*
(1)    3/   10000 :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   10000 : [3]                          endif
(1)    3/   10000 : =>TRUE                       if SonicDriverVer<>1
(1)    3/   10000 : 0F88                                dc.w    z80_ptr(Electoria_Voices)
(1)    3/   10002 : =>FALSE                      else
(1)    3/   10002 :                                     if MOMPASS>1
(1)    3/   10002 :                                             if Electoria_Voices<songStart
(1)    3/   10002 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/   10002 : [3]                                          endif
(1)    3/   10002 : [3]                                  endif
(1)    3/   10002 :                                     dc.w    Electoria_Voices-songStart
(1)    3/   10002 : [3]                          endif
(1)    4/   10002 : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/   10002 : 0603                        dc.b    $06,$03
(1)    5/   10004 : (MACRO)              	smpsHeaderTempo     $01, $19
(1)    5/   10004 : 01                          dc.b    $01
(1)    5/   10005 :  (MACRO-2)                   convertMainTempoMod $19
(1)    5/   10005 : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/   10005 : 19                                  dc.b    $19
(1)    5/   10006 : =>FALSE                      elseif SourceDriver==1
(1)    5/   10006 :                                     if $19==1
(1)    5/   10006 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/   10006 : [5]                                  endif
(1)    5/   10006 :                                     if SonicDriverVer==2
(1)    5/   10006 :                                             dc.b    s1TempotoS2($19)
(1)    5/   10006 :                                     else;if SonicDriverVer>=3
(1)    5/   10006 :                                             dc.b    s1TempotoS3($19)
(1)    5/   10006 : [5]                                  endif
(1)    5/   10006 : =>FALSE                      elseif SourceDriver==2
(1)    5/   10006 :                                     if $19==0
(1)    5/   10006 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/   10006 : [5]                                  endif
(1)    5/   10006 :                                     if SonicDriverVer==1
(1)    5/   10006 :                                             dc.b    s2TempotoS1($19)
(1)    5/   10006 :                                     else;if SonicDriverVer>=3
(1)    5/   10006 :                                             dc.b    s2TempotoS3($19)
(1)    5/   10006 : [5]                                  endif
(1)    5/   10006 : =>FALSE                      else;if SourceDriver>=3
(1)    5/   10006 :                                     if $19==0
(1)    5/   10006 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/   10006 : [5]                                  endif
(1)    5/   10006 :                                     if SonicDriverVer==1
(1)    5/   10006 :                                             dc.b    s3TempotoS1($19)
(1)    5/   10006 :                                     else;if SonicDriverVer==2
(1)    5/   10006 :                                             dc.b    s3TempotoS2($19)
(1)    5/   10006 : [5]                                  endif
(1)    5/   10006 : [5]                          endif
(1)    6/   10006 :                     
(1)    7/   10006 : (MACRO)              	smpsHeaderDAC       Electoria_DAC
(1)    7/   10006 :  (MACRO-2)                   CheckedChannelPointer Electoria_DAC
(1)    7/   10006 : =>TRUE                       if SonicDriverVer<>1
(1)    7/   10006 : 4887                                dc.w    z80_ptr(Electoria_DAC)
(1)    7/   10008 : =>FALSE                      else
(1)    7/   10008 :                                     if MOMPASS>1
(1)    7/   10008 :                                             if Electoria_DAC<songStart
(1)    7/   10008 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/   10008 : [7]                                          endif
(1)    7/   10008 : [7]                                  endif
(1)    7/   10008 :                                     dc.w    Electoria_DAC-songStart
(1)    7/   10008 : [7]                          endif
(1)    7/   10008 : =>FALSE                      if (""<>"")
(1)    7/   10008 :                                     dc.b    
(1)    7/   10008 :                                     if (""<>"")
(1)    7/   10008 :                                             dc.b    
(1)    7/   10008 :                                     else
(1)    7/   10008 :                                             dc.b    $00
(1)    7/   10008 : [7]                                  endif
(1)    7/   10008 : =>TRUE                       else
(1)    7/   10008 : 0000                                dc.w    $00
(1)    7/   1000A : [7]                          endif
(1)    8/   1000A : (MACRO)              	smpsHeaderFM        Electoria_FM1,	$00, $0E
(1)    8/   1000A :  (MACRO-2)                   CheckedChannelPointer Electoria_FM1
(1)    8/   1000A : =>TRUE                       if SonicDriverVer<>1
(1)    8/   1000A : 3080                                dc.w    z80_ptr(Electoria_FM1)
(1)    8/   1000C : =>FALSE                      else
(1)    8/   1000C :                                     if MOMPASS>1
(1)    8/   1000C :                                             if Electoria_FM1<songStart
(1)    8/   1000C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   1000C : [8]                                          endif
(1)    8/   1000C : [8]                                  endif
(1)    8/   1000C :                                     dc.w    Electoria_FM1-songStart
(1)    8/   1000C : [8]                          endif
(1)    8/   1000C : 000E                        dc.b    $00,$0E
(1)    9/   1000E : (MACRO)              	smpsHeaderFM        Electoria_FM2,	$00, $18
(1)    9/   1000E :  (MACRO-2)                   CheckedChannelPointer Electoria_FM2
(1)    9/   1000E : =>TRUE                       if SonicDriverVer<>1
(1)    9/   1000E : B280                                dc.w    z80_ptr(Electoria_FM2)
(1)    9/   10010 : =>FALSE                      else
(1)    9/   10010 :                                     if MOMPASS>1
(1)    9/   10010 :                                             if Electoria_FM2<songStart
(1)    9/   10010 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   10010 : [9]                                          endif
(1)    9/   10010 : [9]                                  endif
(1)    9/   10010 :                                     dc.w    Electoria_FM2-songStart
(1)    9/   10010 : [9]                          endif
(1)    9/   10010 : 0018                        dc.b    $00,$18
(1)   10/   10012 : (MACRO)              	smpsHeaderFM        Electoria_FM3,	$00, $18
(1)   10/   10012 :  (MACRO-2)                   CheckedChannelPointer Electoria_FM3
(1)   10/   10012 : =>TRUE                       if SonicDriverVer<>1
(1)   10/   10012 : DD83                                dc.w    z80_ptr(Electoria_FM3)
(1)   10/   10014 : =>FALSE                      else
(1)   10/   10014 :                                     if MOMPASS>1
(1)   10/   10014 :                                             if Electoria_FM3<songStart
(1)   10/   10014 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/   10014 : [10]                                         endif
(1)   10/   10014 : [10]                                 endif
(1)   10/   10014 :                                     dc.w    Electoria_FM3-songStart
(1)   10/   10014 : [10]                         endif
(1)   10/   10014 : 0018                        dc.b    $00,$18
(1)   11/   10016 : (MACRO)              	smpsHeaderFM        Electoria_FM4,	$00, $18
(1)   11/   10016 :  (MACRO-2)                   CheckedChannelPointer Electoria_FM4
(1)   11/   10016 : =>TRUE                       if SonicDriverVer<>1
(1)   11/   10016 : E884                                dc.w    z80_ptr(Electoria_FM4)
(1)   11/   10018 : =>FALSE                      else
(1)   11/   10018 :                                     if MOMPASS>1
(1)   11/   10018 :                                             if Electoria_FM4<songStart
(1)   11/   10018 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/   10018 : [11]                                         endif
(1)   11/   10018 : [11]                                 endif
(1)   11/   10018 :                                     dc.w    Electoria_FM4-songStart
(1)   11/   10018 : [11]                         endif
(1)   11/   10018 : 0018                        dc.b    $00,$18
(1)   12/   1001A : (MACRO)              	smpsHeaderFM        Electoria_FM5,	$00, $18
(1)   12/   1001A :  (MACRO-2)                   CheckedChannelPointer Electoria_FM5
(1)   12/   1001A : =>TRUE                       if SonicDriverVer<>1
(1)   12/   1001A : 6F85                                dc.w    z80_ptr(Electoria_FM5)
(1)   12/   1001C : =>FALSE                      else
(1)   12/   1001C :                                     if MOMPASS>1
(1)   12/   1001C :                                             if Electoria_FM5<songStart
(1)   12/   1001C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   1001C : [12]                                         endif
(1)   12/   1001C : [12]                                 endif
(1)   12/   1001C :                                     dc.w    Electoria_FM5-songStart
(1)   12/   1001C : [12]                         endif
(1)   12/   1001C : 0018                        dc.b    $00,$18
(1)   13/   1001E : (MACRO)              	smpsHeaderPSG       Electoria_PSG1,	$00, $04, $00, sTone_0C
(1)   13/   1001E :  (MACRO-2)                   CheckedChannelPointer Electoria_PSG1
(1)   13/   1001E : =>TRUE                       if SonicDriverVer<>1
(1)   13/   1001E : C985                                dc.w    z80_ptr(Electoria_PSG1)
(1)   13/   10020 : =>FALSE                      else
(1)   13/   10020 :                                     if MOMPASS>1
(1)   13/   10020 :                                             if Electoria_PSG1<songStart
(1)   13/   10020 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   10020 : [13]                                         endif
(1)   13/   10020 : [13]                                 endif
(1)   13/   10020 :                                     dc.w    Electoria_PSG1-songStart
(1)   13/   10020 : [13]                         endif
(1)   13/   10020 :  (MACRO-2)                   PSGPitchConvert $00
(1)   13/   10020 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/   10020 :                                     dc.b    ($00+psgdelta)&$FF
(1)   13/   10020 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/   10020 :                                     dc.b    ($00-psgdelta)&$FF
(1)   13/   10020 : =>TRUE                       else
(1)   13/   10020 : 00                                  dc.b    $00
(1)   13/   10021 : [13]                         endif
(1)   13/   10021 : 04                          dc.b    $04
(1)   13/   10022 :                             ; Frequency envelope
(1)   13/   10022 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/   10022 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/   10022 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/   10022 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/   10022 :                                     dc.b    0
(1)   13/   10022 : =>TRUE                       else
(1)   13/   10022 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/   10022 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/   10022 : [13]                                 endif
(1)   13/   10022 : 00                                  dc.b    $00
(1)   13/   10023 : [13]                         endif
(1)   13/   10023 :                             ; Volume envelope
(1)   13/   10023 : 0C                          dc.b    sTone_0C
(1)   14/   10024 : (MACRO)              	smpsHeaderPSG       Electoria_PSG2,	$F4, $04, $00, sTone_0C
(1)   14/   10024 :  (MACRO-2)                   CheckedChannelPointer Electoria_PSG2
(1)   14/   10024 : =>TRUE                       if SonicDriverVer<>1
(1)   14/   10024 : 4E86                                dc.w    z80_ptr(Electoria_PSG2)
(1)   14/   10026 : =>FALSE                      else
(1)   14/   10026 :                                     if MOMPASS>1
(1)   14/   10026 :                                             if Electoria_PSG2<songStart
(1)   14/   10026 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   10026 : [14]                                         endif
(1)   14/   10026 : [14]                                 endif
(1)   14/   10026 :                                     dc.w    Electoria_PSG2-songStart
(1)   14/   10026 : [14]                         endif
(1)   14/   10026 :  (MACRO-2)                   PSGPitchConvert $F4
(1)   14/   10026 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   10026 :                                     dc.b    ($F4+psgdelta)&$FF
(1)   14/   10026 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   10026 :                                     dc.b    ($F4-psgdelta)&$FF
(1)   14/   10026 : =>TRUE                       else
(1)   14/   10026 : F4                                  dc.b    $F4
(1)   14/   10027 : [14]                         endif
(1)   14/   10027 : 04                          dc.b    $04
(1)   14/   10028 :                             ; Frequency envelope
(1)   14/   10028 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/   10028 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/   10028 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/   10028 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/   10028 :                                     dc.b    0
(1)   14/   10028 : =>TRUE                       else
(1)   14/   10028 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/   10028 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/   10028 : [14]                                 endif
(1)   14/   10028 : 00                                  dc.b    $00
(1)   14/   10029 : [14]                         endif
(1)   14/   10029 :                             ; Volume envelope
(1)   14/   10029 : 0C                          dc.b    sTone_0C
(1)   15/   1002A : (MACRO)              	smpsHeaderPSG       Electoria_PSG3,	$23, $01, $00, sTone_02
(1)   15/   1002A :  (MACRO-2)                   CheckedChannelPointer Electoria_PSG3
(1)   15/   1002A : =>TRUE                       if SonicDriverVer<>1
(1)   15/   1002A : FD86                                dc.w    z80_ptr(Electoria_PSG3)
(1)   15/   1002C : =>FALSE                      else
(1)   15/   1002C :                                     if MOMPASS>1
(1)   15/   1002C :                                             if Electoria_PSG3<songStart
(1)   15/   1002C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/   1002C : [15]                                         endif
(1)   15/   1002C : [15]                                 endif
(1)   15/   1002C :                                     dc.w    Electoria_PSG3-songStart
(1)   15/   1002C : [15]                         endif
(1)   15/   1002C :  (MACRO-2)                   PSGPitchConvert $23
(1)   15/   1002C : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/   1002C :                                     dc.b    ($23+psgdelta)&$FF
(1)   15/   1002C : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/   1002C :                                     dc.b    ($23-psgdelta)&$FF
(1)   15/   1002C : =>TRUE                       else
(1)   15/   1002C : 23                                  dc.b    $23
(1)   15/   1002D : [15]                         endif
(1)   15/   1002D : 01                          dc.b    $01
(1)   15/   1002E :                             ; Frequency envelope
(1)   15/   1002E : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/   1002E :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/   1002E :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/   1002E :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/   1002E :                                     dc.b    0
(1)   15/   1002E : =>TRUE                       else
(1)   15/   1002E : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/   1002E :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/   1002E : [15]                                 endif
(1)   15/   1002E : 00                                  dc.b    $00
(1)   15/   1002F : [15]                         endif
(1)   15/   1002F :                             ; Volume envelope
(1)   15/   1002F : 02                          dc.b    sTone_02
(1)   16/   10030 :                     
(1)   17/   10030 :                     ; FM1 Data
(1)   18/   10030 :                     Electoria_FM1:
(1)   19/   10030 : (MACRO)              	smpsSetvoice        $00
(1)   19/   10030 :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   10030 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   10030 :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   10030 : =>TRUE                       else
(1)   19/   10030 : EF00                                dc.b    $EF,$00
(1)   19/   10032 : [19]                         endif
(1)   20/   10032 : 8F06 9B9B 919D      	dc.b	nD1, $06, nD2, nD2, nE1, nE2, nE2, nE1, nE2, nE2, nG1, nG2
            10038 : 9D91 9D9D 94A0    
(1)   21/   1003E : A096 A28F 0C        	dc.b	nG2, nA1, nA2, nD1, $0C
(1)   22/   10043 :                     
(1)   23/   10043 :                     Electoria_Loop16:
(1)   24/   10043 : (MACRO)              	smpsCall            Electoria_Call0B
(1)   24/   10043 : F8                          dc.b    $F8
(1)   24/   10044 : =>TRUE                       if SonicDriverVer<>1
(1)   24/   10044 : A180                                dc.w    z80_ptr(Electoria_Call0B)
(1)   24/   10046 : =>FALSE                      else
(1)   24/   10046 :                                     dc.w    Electoria_Call0B-*-1
(1)   24/   10046 : [24]                         endif
(1)   25/   10046 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop16
(1)   25/   10046 : F7                          dc.b    $F7
(1)   25/   10047 : 0008                        dc.b    $00,$08
(1)   25/   10049 : =>TRUE                       if SonicDriverVer<>1
(1)   25/   10049 : 4380                                dc.w    z80_ptr(Electoria_Loop16)
(1)   25/   1004B : =>FALSE                      else
(1)   25/   1004B :                                     dc.w    Electoria_Loop16-*-1
(1)   25/   1004B : [25]                         endif
(1)   26/   1004B :                     
(1)   27/   1004B :                     Electoria_Loop17:
(1)   28/   1004B : (MACRO)              	smpsCall            Electoria_Call0B
(1)   28/   1004B : F8                          dc.b    $F8
(1)   28/   1004C : =>TRUE                       if SonicDriverVer<>1
(1)   28/   1004C : A180                                dc.w    z80_ptr(Electoria_Call0B)
(1)   28/   1004E : =>FALSE                      else
(1)   28/   1004E :                                     dc.w    Electoria_Call0B-*-1
(1)   28/   1004E : [28]                         endif
(1)   29/   1004E : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop17
(1)   29/   1004E : F7                          dc.b    $F7
(1)   29/   1004F : 0008                        dc.b    $00,$08
(1)   29/   10051 : =>TRUE                       if SonicDriverVer<>1
(1)   29/   10051 : 4B80                                dc.w    z80_ptr(Electoria_Loop17)
(1)   29/   10053 : =>FALSE                      else
(1)   29/   10053 :                                     dc.w    Electoria_Loop17-*-1
(1)   29/   10053 : [29]                         endif
(1)   30/   10053 : (MACRO)              	smpsChangeTransposition $FC
(1)   30/   10053 : =>TRUE                       if SonicDriverVer>=3
(1)   30/   10053 : FBFC                                dc.b    $FB,$FC
(1)   30/   10055 : =>FALSE                      else
(1)   30/   10055 :                                     dc.b    $E9,$FC
(1)   30/   10055 : [30]                         endif
(1)   31/   10055 :                     
(1)   32/   10055 :                     Electoria_Loop18:
(1)   33/   10055 : (MACRO)              	smpsCall            Electoria_Call0B
(1)   33/   10055 : F8                          dc.b    $F8
(1)   33/   10056 : =>TRUE                       if SonicDriverVer<>1
(1)   33/   10056 : A180                                dc.w    z80_ptr(Electoria_Call0B)
(1)   33/   10058 : =>FALSE                      else
(1)   33/   10058 :                                     dc.w    Electoria_Call0B-*-1
(1)   33/   10058 : [33]                         endif
(1)   34/   10058 : (MACRO)              	smpsLoop            $00, $07, Electoria_Loop18
(1)   34/   10058 : F7                          dc.b    $F7
(1)   34/   10059 : 0007                        dc.b    $00,$07
(1)   34/   1005B : =>TRUE                       if SonicDriverVer<>1
(1)   34/   1005B : 5580                                dc.w    z80_ptr(Electoria_Loop18)
(1)   34/   1005D : =>FALSE                      else
(1)   34/   1005D :                                     dc.w    Electoria_Loop18-*-1
(1)   34/   1005D : [34]                         endif
(1)   35/   1005D : (MACRO)              	smpsChangeTransposition $04
(1)   35/   1005D : =>TRUE                       if SonicDriverVer>=3
(1)   35/   1005D : FB04                                dc.b    $FB,$04
(1)   35/   1005F : =>FALSE                      else
(1)   35/   1005F :                                     dc.b    $E9,$04
(1)   35/   1005F : [35]                         endif
(1)   36/   1005F : 900C 9C06 8090      	dc.b	nEb1, $0C, nEb2, $06, nRst, nEb1, nRst, nEb2, nEb1, nRst, nRst, nEb2
            10065 : 809C 9080 809C    
(1)   37/   1006B : 80                  	dc.b	nRst
(1)   38/   1006C : (MACRO)              	smpsModSet          $01, $08, $EC, $00
(1)   38/   1006C : F0                          dc.b    $F0
(1)   38/   1006D : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   1006D :                                     dc.b    $01+1,$08,$EC,(($00+1) * $08) & $FF
(1)   38/   1006D : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   38/   1006D :                                     dc.b    $01-1,$08,$EC,conv0To256($00)/conv0To256($08)-1
(1)   38/   1006D : =>TRUE                       else
(1)   38/   1006D : 0108 EC00                           dc.b    $01,$08,$EC,$00
(1)   38/   10071 : [38]                         endif
(1)   38/   10071 :                             ;dc.b   $08,$EC,$00
(1)   39/   10071 : 9018                	dc.b	nEb1, $18
(1)   40/   10073 : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)   40/   10073 : F0                          dc.b    $F0
(1)   40/   10074 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   40/   10074 :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)   40/   10074 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   40/   10074 :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)   40/   10074 : =>TRUE                       else
(1)   40/   10074 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)   40/   10078 : [40]                         endif
(1)   40/   10078 :                             ;dc.b   $00,$00,$00
(1)   41/   10078 :                     
(1)   42/   10078 :                     Electoria_Loop19:
(1)   43/   10078 : (MACRO)              	smpsCall            Electoria_Call0B
(1)   43/   10078 : F8                          dc.b    $F8
(1)   43/   10079 : =>TRUE                       if SonicDriverVer<>1
(1)   43/   10079 : A180                                dc.w    z80_ptr(Electoria_Call0B)
(1)   43/   1007B : =>FALSE                      else
(1)   43/   1007B :                                     dc.w    Electoria_Call0B-*-1
(1)   43/   1007B : [43]                         endif
(1)   44/   1007B : (MACRO)              	smpsLoop            $00, $07, Electoria_Loop19
(1)   44/   1007B : F7                          dc.b    $F7
(1)   44/   1007C : 0007                        dc.b    $00,$07
(1)   44/   1007E : =>TRUE                       if SonicDriverVer<>1
(1)   44/   1007E : 7880                                dc.w    z80_ptr(Electoria_Loop19)
(1)   44/   10080 : =>FALSE                      else
(1)   44/   10080 :                                     dc.w    Electoria_Loop19-*-1
(1)   44/   10080 : [44]                         endif
(1)   45/   10080 : 8F0C 9B91 9D92      	dc.b	nD1, $0C, nD2, nE1, nE2, nF1, $06, nF2, nF1, nRst, nD1, nD2
            10086 : 069E 9280 8F9B    
(1)   46/   1008C : 8F80                	dc.b	nD1, nRst
(1)   47/   1008E :                     
(1)   48/   1008E :                     Electoria_Loop1A:
(1)   49/   1008E : (MACRO)              	smpsCall            Electoria_Call0B
(1)   49/   1008E : F8                          dc.b    $F8
(1)   49/   1008F : =>TRUE                       if SonicDriverVer<>1
(1)   49/   1008F : A180                                dc.w    z80_ptr(Electoria_Call0B)
(1)   49/   10091 : =>FALSE                      else
(1)   49/   10091 :                                     dc.w    Electoria_Call0B-*-1
(1)   49/   10091 : [49]                         endif
(1)   50/   10091 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop1A
(1)   50/   10091 : F7                          dc.b    $F7
(1)   50/   10092 : 0008                        dc.b    $00,$08
(1)   50/   10094 : =>TRUE                       if SonicDriverVer<>1
(1)   50/   10094 : 8E80                                dc.w    z80_ptr(Electoria_Loop1A)
(1)   50/   10096 : =>FALSE                      else
(1)   50/   10096 :                                     dc.w    Electoria_Loop1A-*-1
(1)   50/   10096 : [50]                         endif
(1)   51/   10096 :                     
(1)   52/   10096 :                     Electoria_Loop1B:
(1)   53/   10096 : (MACRO)              	smpsCall            Electoria_Call0B
(1)   53/   10096 : F8                          dc.b    $F8
(1)   53/   10097 : =>TRUE                       if SonicDriverVer<>1
(1)   53/   10097 : A180                                dc.w    z80_ptr(Electoria_Call0B)
(1)   53/   10099 : =>FALSE                      else
(1)   53/   10099 :                                     dc.w    Electoria_Call0B-*-1
(1)   53/   10099 : [53]                         endif
(1)   54/   10099 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop1B
(1)   54/   10099 : F7                          dc.b    $F7
(1)   54/   1009A : 0008                        dc.b    $00,$08
(1)   54/   1009C : =>TRUE                       if SonicDriverVer<>1
(1)   54/   1009C : 9680                                dc.w    z80_ptr(Electoria_Loop1B)
(1)   54/   1009E : =>FALSE                      else
(1)   54/   1009E :                                     dc.w    Electoria_Loop1B-*-1
(1)   54/   1009E : [54]                         endif
(1)   55/   1009E : (MACRO)              	smpsJump            Electoria_Loop17
(1)   55/   1009E : F6                          dc.b    $F6
(1)   55/   1009F : =>TRUE                       if SonicDriverVer<>1
(1)   55/   1009F : 4B80                                dc.w    z80_ptr(Electoria_Loop17)
(1)   55/   100A1 : =>FALSE                      else
(1)   55/   100A1 :                                     dc.w    Electoria_Loop17-*-1
(1)   55/   100A1 : [55]                         endif
(1)   56/   100A1 :                     
(1)   57/   100A1 :                     Electoria_Call0B:
(1)   58/   100A1 : 940C A006 8094      	dc.b	nG1, $0C, nG2, $06, nRst, nG1, $0C, nRst, $06, nG1, nRst, nG1
            100A7 : 0C80 0694 8094    
(1)   59/   100AD : 940C 9293           	dc.b	nG1, $0C, nF1, nFs1
(1)   60/   100B1 : (MACRO)              	smpsReturn
(1)   60/   100B1 : =>TRUE                       if SonicDriverVer>=3
(1)   60/   100B1 : F9                                  dc.b    $F9
(1)   60/   100B2 : =>FALSE                      else
(1)   60/   100B2 :                                     dc.b    $E3
(1)   60/   100B2 : [60]                         endif
(1)   61/   100B2 :                     
(1)   62/   100B2 :                     ; FM2 Data
(1)   63/   100B2 :                     Electoria_FM2:
(1)   64/   100B2 : (MACRO)              	smpsSetvoice        $03
(1)   64/   100B2 :  (MACRO-2)                   smpsFMvoice $03
(1)   64/   100B2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   64/   100B2 :                                     dc.b    $EF,$03|$80,+$81
(1)   64/   100B2 : =>TRUE                       else
(1)   64/   100B2 : EF03                                dc.b    $EF,$03
(1)   64/   100B4 : [64]                         endif
(1)   65/   100B4 : 8060                	dc.b	nRst, $60
(1)   66/   100B6 :                     
(1)   67/   100B6 :                     Electoria_Loop14:
(1)   68/   100B6 : (MACRO)              	smpsCall            Electoria_Call04
(1)   68/   100B6 : F8                          dc.b    $F8
(1)   68/   100B7 : =>TRUE                       if SonicDriverVer<>1
(1)   68/   100B7 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)   68/   100B9 : =>FALSE                      else
(1)   68/   100B9 :                                     dc.w    Electoria_Call04-*-1
(1)   68/   100B9 : [68]                         endif
(1)   69/   100B9 : (MACRO)              	smpsChangeTransposition $01
(1)   69/   100B9 : =>TRUE                       if SonicDriverVer>=3
(1)   69/   100B9 : FB01                                dc.b    $FB,$01
(1)   69/   100BB : =>FALSE                      else
(1)   69/   100BB :                                     dc.b    $E9,$01
(1)   69/   100BB : [69]                         endif
(1)   70/   100BB : (MACRO)              	smpsCall            Electoria_Call04
(1)   70/   100BB : F8                          dc.b    $F8
(1)   70/   100BC : =>TRUE                       if SonicDriverVer<>1
(1)   70/   100BC : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)   70/   100BE : =>FALSE                      else
(1)   70/   100BE :                                     dc.w    Electoria_Call04-*-1
(1)   70/   100BE : [70]                         endif
(1)   71/   100BE : (MACRO)              	smpsChangeTransposition $FF
(1)   71/   100BE : =>TRUE                       if SonicDriverVer>=3
(1)   71/   100BE : FBFF                                dc.b    $FB,$FF
(1)   71/   100C0 : =>FALSE                      else
(1)   71/   100C0 :                                     dc.b    $E9,$FF
(1)   71/   100C0 : [71]                         endif
(1)   72/   100C0 : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop14
(1)   72/   100C0 : F7                          dc.b    $F7
(1)   72/   100C1 : 0004                        dc.b    $00,$04
(1)   72/   100C3 : =>TRUE                       if SonicDriverVer<>1
(1)   72/   100C3 : B680                                dc.w    z80_ptr(Electoria_Loop14)
(1)   72/   100C5 : =>FALSE                      else
(1)   72/   100C5 :                                     dc.w    Electoria_Loop14-*-1
(1)   72/   100C5 : [72]                         endif
(1)   73/   100C5 : (MACRO)              	smpsFMAlterVol      $FA
(1)   73/   100C5 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   73/   100C5 :                                     dc.b    $E5,$FA,
(1)   73/   100C5 : =>TRUE                       else
(1)   73/   100C5 : E6FA                                dc.b    $E6,$FA
(1)   73/   100C7 : [73]                         endif
(1)   74/   100C7 :                     
(1)   75/   100C7 :                     Electoria_Jump01:
(1)   76/   100C7 : (MACRO)              	smpsSetvoice        $01
(1)   76/   100C7 :  (MACRO-2)                   smpsFMvoice $01
(1)   76/   100C7 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   76/   100C7 :                                     dc.b    $EF,$01|$80,+$81
(1)   76/   100C7 : =>TRUE                       else
(1)   76/   100C7 : EF01                                dc.b    $EF,$01
(1)   76/   100C9 : [76]                         endif
(1)   77/   100C9 : (MACRO)              	smpsChangeTransposition $0C
(1)   77/   100C9 : =>TRUE                       if SonicDriverVer>=3
(1)   77/   100C9 : FB0C                                dc.b    $FB,$0C
(1)   77/   100CB : =>FALSE                      else
(1)   77/   100CB :                                     dc.b    $E9,$0C
(1)   77/   100CB : [77]                         endif
(1)   78/   100CB : (MACRO)              	smpsFMAlterVol      $FB
(1)   78/   100CB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   78/   100CB :                                     dc.b    $E5,$FB,
(1)   78/   100CB : =>TRUE                       else
(1)   78/   100CB : E6FB                                dc.b    $E6,$FB
(1)   78/   100CD : [78]                         endif
(1)   79/   100CD : AF12 AC06 803C      	dc.b	nBb3, $12, nG3, $06, nRst, $3C, nF3, $06, nG3, nC4, nRst, nC4
            100D3 : AA06 ACB1 80B1    
(1)   80/   100D9 : 80B1 0CB3 06AC      	dc.b	nRst, nC4, $0C, nD4, $06, nG3, smpsNoAttack, $0C, nF3, nG3, $06, nRst
            100DF : E70C AAAC 0680    
(1)   81/   100E5 : AC0C 8060           	dc.b	nG3, $0C, nRst, $60
(1)   82/   100E9 : (MACRO)              	smpsPan             panLeft, $00
(1)   82/   100E9 : =$0                  panNone set $00
(1)   82/   100E9 : =$40                 panRight set $40
(1)   82/   100E9 : =$80                 panLeft set $80
(1)   82/   100E9 : =$C0                 panCentre set $C0
(1)   82/   100E9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   82/   100E9 : E080                        dc.b $E0,panLeft+$00
(1)   83/   100EB : (MACRO)              	smpsChangeTransposition $F4
(1)   83/   100EB : =>TRUE                       if SonicDriverVer>=3
(1)   83/   100EB : FBF4                                dc.b    $FB,$F4
(1)   83/   100ED : =>FALSE                      else
(1)   83/   100ED :                                     dc.b    $E9,$F4
(1)   83/   100ED : [83]                         endif
(1)   84/   100ED : (MACRO)              	smpsSetvoice        $02
(1)   84/   100ED :  (MACRO-2)                   smpsFMvoice $02
(1)   84/   100ED : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   84/   100ED :                                     dc.b    $EF,$02|$80,+$81
(1)   84/   100ED : =>TRUE                       else
(1)   84/   100ED : EF02                                dc.b    $EF,$02
(1)   84/   100EF : [84]                         endif
(1)   85/   100EF : (MACRO)              	smpsFMAlterVol      $0A
(1)   85/   100EF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   85/   100EF :                                     dc.b    $E5,$0A,
(1)   85/   100EF : =>TRUE                       else
(1)   85/   100EF : E60A                                dc.b    $E6,$0A
(1)   85/   100F1 : [85]                         endif
(1)   86/   100F1 : (MACRO)              	smpsCall            Electoria_Call06
(1)   86/   100F1 : F8                          dc.b    $F8
(1)   86/   100F2 : =>TRUE                       if SonicDriverVer<>1
(1)   86/   100F2 : AE81                                dc.w    z80_ptr(Electoria_Call06)
(1)   86/   100F4 : =>FALSE                      else
(1)   86/   100F4 :                                     dc.w    Electoria_Call06-*-1
(1)   86/   100F4 : [86]                         endif
(1)   87/   100F4 : (MACRO)              	smpsPan             panCenter, $00
(1)   87/   100F4 : =$0                  panNone set $00
(1)   87/   100F4 : =$40                 panRight set $40
(1)   87/   100F4 : =$80                 panLeft set $80
(1)   87/   100F4 : =$C0                 panCentre set $C0
(1)   87/   100F4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   87/   100F4 : E0C0                        dc.b $E0,panCenter+$00
(1)   88/   100F6 : (MACRO)              	smpsSetvoice        $01
(1)   88/   100F6 :  (MACRO-2)                   smpsFMvoice $01
(1)   88/   100F6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   88/   100F6 :                                     dc.b    $EF,$01|$80,+$81
(1)   88/   100F6 : =>TRUE                       else
(1)   88/   100F6 : EF01                                dc.b    $EF,$01
(1)   88/   100F8 : [88]                         endif
(1)   89/   100F8 : (MACRO)              	smpsChangeTransposition $0C
(1)   89/   100F8 : =>TRUE                       if SonicDriverVer>=3
(1)   89/   100F8 : FB0C                                dc.b    $FB,$0C
(1)   89/   100FA : =>FALSE                      else
(1)   89/   100FA :                                     dc.b    $E9,$0C
(1)   89/   100FA : [89]                         endif
(1)   90/   100FA : (MACRO)              	smpsFMAlterVol      $F6
(1)   90/   100FA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   90/   100FA :                                     dc.b    $E5,$F6,
(1)   90/   100FA : =>TRUE                       else
(1)   90/   100FA : E6F6                                dc.b    $E6,$F6
(1)   90/   100FC : [90]                         endif
(1)   91/   100FC : AF0C E70C AC06      	dc.b	nBb3, $0C, smpsNoAttack, $0C, nG3, $06, nRst, nRst, $3C, nF4, $0C, smpsNoAttack
            10102 : 8080 3CB6 0CE7    
(1)   92/   10108 : 0680 B580 B3B5      	dc.b	$06, nRst, nE4, nRst, nD4, nE4, nRst, nD4, smpsNoAttack, nD4, nRst, nC4
            1010E : 80B3 E7B3 80B1    
(1)   93/   10114 : 80AF B180 B0E7 60   	dc.b	nRst, nBb3, nC4, nRst, nB3, smpsNoAttack, $60
(1)   94/   1011B : (MACRO)              	smpsPan             panLeft, $00
(1)   94/   1011B : =$0                  panNone set $00
(1)   94/   1011B : =$40                 panRight set $40
(1)   94/   1011B : =$80                 panLeft set $80
(1)   94/   1011B : =$C0                 panCentre set $C0
(1)   94/   1011B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   94/   1011B : E080                        dc.b $E0,panLeft+$00
(1)   95/   1011D : (MACRO)              	smpsChangeTransposition $F4
(1)   95/   1011D : =>TRUE                       if SonicDriverVer>=3
(1)   95/   1011D : FBF4                                dc.b    $FB,$F4
(1)   95/   1011F : =>FALSE                      else
(1)   95/   1011F :                                     dc.b    $E9,$F4
(1)   95/   1011F : [95]                         endif
(1)   96/   1011F : (MACRO)              	smpsSetvoice        $02
(1)   96/   1011F :  (MACRO-2)                   smpsFMvoice $02
(1)   96/   1011F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   96/   1011F :                                     dc.b    $EF,$02|$80,+$81
(1)   96/   1011F : =>TRUE                       else
(1)   96/   1011F : EF02                                dc.b    $EF,$02
(1)   96/   10121 : [96]                         endif
(1)   97/   10121 : (MACRO)              	smpsFMAlterVol      $0A
(1)   97/   10121 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   97/   10121 :                                     dc.b    $E5,$0A,
(1)   97/   10121 : =>TRUE                       else
(1)   97/   10121 : E60A                                dc.b    $E6,$0A
(1)   97/   10123 : [97]                         endif
(1)   98/   10123 : (MACRO)              	smpsCall            Electoria_Call07
(1)   98/   10123 : F8                          dc.b    $F8
(1)   98/   10124 : =>TRUE                       if SonicDriverVer<>1
(1)   98/   10124 : C381                                dc.w    z80_ptr(Electoria_Call07)
(1)   98/   10126 : =>FALSE                      else
(1)   98/   10126 :                                     dc.w    Electoria_Call07-*-1
(1)   98/   10126 : [98]                         endif
(1)   99/   10126 : (MACRO)              	smpsPan             panCenter, $00
(1)   99/   10126 : =$0                  panNone set $00
(1)   99/   10126 : =$40                 panRight set $40
(1)   99/   10126 : =$80                 panLeft set $80
(1)   99/   10126 : =$C0                 panCentre set $C0
(1)   99/   10126 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   99/   10126 : E0C0                        dc.b $E0,panCenter+$00
(1)  100/   10128 : (MACRO)              	smpsSetvoice        $01
(1)  100/   10128 :  (MACRO-2)                   smpsFMvoice $01
(1)  100/   10128 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  100/   10128 :                                     dc.b    $EF,$01|$80,+$81
(1)  100/   10128 : =>TRUE                       else
(1)  100/   10128 : EF01                                dc.b    $EF,$01
(1)  100/   1012A : [100]                        endif
(1)  101/   1012A : (MACRO)              	smpsFMAlterVol      $F6
(1)  101/   1012A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  101/   1012A :                                     dc.b    $E5,$F6,
(1)  101/   1012A : =>TRUE                       else
(1)  101/   1012A : E6F6                                dc.b    $E6,$F6
(1)  101/   1012C : [101]                        endif
(1)  102/   1012C : (MACRO)              	smpsCall            Electoria_Call08
(1)  102/   1012C : F8                          dc.b    $F8
(1)  102/   1012D : =>TRUE                       if SonicDriverVer<>1
(1)  102/   1012D : EE81                                dc.w    z80_ptr(Electoria_Call08)
(1)  102/   1012F : =>FALSE                      else
(1)  102/   1012F :                                     dc.w    Electoria_Call08-*-1
(1)  102/   1012F : [102]                        endif
(1)  103/   1012F : 8030                	dc.b	nRst, $30
(1)  104/   10131 : (MACRO)              	smpsSetvoice        $02
(1)  104/   10131 :  (MACRO-2)                   smpsFMvoice $02
(1)  104/   10131 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  104/   10131 :                                     dc.b    $EF,$02|$80,+$81
(1)  104/   10131 : =>TRUE                       else
(1)  104/   10131 : EF02                                dc.b    $EF,$02
(1)  104/   10133 : [104]                        endif
(1)  105/   10133 : (MACRO)              	smpsFMAlterVol      $0B
(1)  105/   10133 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  105/   10133 :                                     dc.b    $E5,$0B,
(1)  105/   10133 : =>TRUE                       else
(1)  105/   10133 : E60B                                dc.b    $E6,$0B
(1)  105/   10135 : [105]                        endif
(1)  106/   10135 : (MACRO)              	smpsCall            Electoria_Call09
(1)  106/   10135 : F8                          dc.b    $F8
(1)  106/   10136 : =>TRUE                       if SonicDriverVer<>1
(1)  106/   10136 : 5C82                                dc.w    z80_ptr(Electoria_Call09)
(1)  106/   10138 : =>FALSE                      else
(1)  106/   10138 :                                     dc.w    Electoria_Call09-*-1
(1)  106/   10138 : [106]                        endif
(1)  107/   10138 : B012 B34E 8060      	dc.b	nB3, $12, nD4, $4E, nRst, $60
(1)  108/   1013E : (MACRO)              	smpsCall            Electoria_Call0A
(1)  108/   1013E : F8                          dc.b    $F8
(1)  108/   1013F : =>TRUE                       if SonicDriverVer<>1
(1)  108/   1013F : CB82                                dc.w    z80_ptr(Electoria_Call0A)
(1)  108/   10141 : =>FALSE                      else
(1)  108/   10141 :                                     dc.w    Electoria_Call0A-*-1
(1)  108/   10141 : [108]                        endif
(1)  109/   10141 : B312 B84E BD18      	dc.b	nD4, $12, nG4, $4E, nC5, $18, nB4, $06
            10147 : BC06             
(1)  110/   10149 : (MACRO)              	smpsFMAlterVol      $0A
(1)  110/   10149 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  110/   10149 :                                     dc.b    $E5,$0A,
(1)  110/   10149 : =>TRUE                       else
(1)  110/   10149 : E60A                                dc.b    $E6,$0A
(1)  110/   1014B : [110]                        endif
(1)  111/   1014B : (MACRO)              	smpsPan             panRight, $00
(1)  111/   1014B : =$0                  panNone set $00
(1)  111/   1014B : =$40                 panRight set $40
(1)  111/   1014B : =$80                 panLeft set $80
(1)  111/   1014B : =$C0                 panCentre set $C0
(1)  111/   1014B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  111/   1014B : E040                        dc.b $E0,panRight+$00
(1)  112/   1014D : BC                  	dc.b	nB4
(1)  113/   1014E : (MACRO)              	smpsFMAlterVol      $F6
(1)  113/   1014E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  113/   1014E :                                     dc.b    $E5,$F6,
(1)  113/   1014E : =>TRUE                       else
(1)  113/   1014E : E6F6                                dc.b    $E6,$F6
(1)  113/   10150 : [113]                        endif
(1)  114/   10150 : (MACRO)              	smpsPan             panCenter, $00
(1)  114/   10150 : =$0                  panNone set $00
(1)  114/   10150 : =$40                 panRight set $40
(1)  114/   10150 : =$80                 panLeft set $80
(1)  114/   10150 : =$C0                 panCentre set $C0
(1)  114/   10150 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  114/   10150 : E0C0                        dc.b $E0,panCenter+$00
(1)  115/   10152 : BA12                	dc.b	nA4, $12
(1)  116/   10154 : (MACRO)              	smpsFMAlterVol      $0A
(1)  116/   10154 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  116/   10154 :                                     dc.b    $E5,$0A,
(1)  116/   10154 : =>TRUE                       else
(1)  116/   10154 : E60A                                dc.b    $E6,$0A
(1)  116/   10156 : [116]                        endif
(1)  117/   10156 : (MACRO)              	smpsPan             panRight, $00
(1)  117/   10156 : =$0                  panNone set $00
(1)  117/   10156 : =$40                 panRight set $40
(1)  117/   10156 : =$80                 panLeft set $80
(1)  117/   10156 : =$C0                 panCentre set $C0
(1)  117/   10156 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  117/   10156 : E040                        dc.b $E0,panRight+$00
(1)  118/   10158 : 06                  	dc.b	$06
(1)  119/   10159 : (MACRO)              	smpsFMAlterVol      $F6
(1)  119/   10159 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  119/   10159 :                                     dc.b    $E5,$F6,
(1)  119/   10159 : =>TRUE                       else
(1)  119/   10159 : E6F6                                dc.b    $E6,$F6
(1)  119/   1015B : [119]                        endif
(1)  120/   1015B : (MACRO)              	smpsPan             panCenter, $00
(1)  120/   1015B : =$0                  panNone set $00
(1)  120/   1015B : =$40                 panRight set $40
(1)  120/   1015B : =$80                 panLeft set $80
(1)  120/   1015B : =$C0                 panCentre set $C0
(1)  120/   1015B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  120/   1015B : E0C0                        dc.b $E0,panCenter+$00
(1)  121/   1015D : BC12                	dc.b	nB4, $12
(1)  122/   1015F : (MACRO)              	smpsFMAlterVol      $0A
(1)  122/   1015F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  122/   1015F :                                     dc.b    $E5,$0A,
(1)  122/   1015F : =>TRUE                       else
(1)  122/   1015F : E60A                                dc.b    $E6,$0A
(1)  122/   10161 : [122]                        endif
(1)  123/   10161 : (MACRO)              	smpsPan             panRight, $00
(1)  123/   10161 : =$0                  panNone set $00
(1)  123/   10161 : =$40                 panRight set $40
(1)  123/   10161 : =$80                 panLeft set $80
(1)  123/   10161 : =$C0                 panCentre set $C0
(1)  123/   10161 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  123/   10161 : E040                        dc.b $E0,panRight+$00
(1)  124/   10163 : 06                  	dc.b	$06
(1)  125/   10164 : (MACRO)              	smpsFMAlterVol      $F6
(1)  125/   10164 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  125/   10164 :                                     dc.b    $E5,$F6,
(1)  125/   10164 : =>TRUE                       else
(1)  125/   10164 : E6F6                                dc.b    $E6,$F6
(1)  125/   10166 : [125]                        endif
(1)  126/   10166 : (MACRO)              	smpsPan             panCenter, $00
(1)  126/   10166 : =$0                  panNone set $00
(1)  126/   10166 : =$40                 panRight set $40
(1)  126/   10166 : =$80                 panLeft set $80
(1)  126/   10166 : =$C0                 panCentre set $C0
(1)  126/   10166 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  126/   10166 : E0C0                        dc.b $E0,panCenter+$00
(1)  127/   10168 : B80C E760           	dc.b	nG4, $0C, smpsNoAttack, $60
(1)  128/   1016C : (MACRO)              	smpsSetvoice        $03
(1)  128/   1016C :  (MACRO-2)                   smpsFMvoice $03
(1)  128/   1016C : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  128/   1016C :                                     dc.b    $EF,$03|$80,+$81
(1)  128/   1016C : =>TRUE                       else
(1)  128/   1016C : EF03                                dc.b    $EF,$03
(1)  128/   1016E : [128]                        endif
(1)  129/   1016E : A060 6030 80        	dc.b	nG2, $60, $60, $30, nRst
(1)  130/   10173 :                     
(1)  131/   10173 :                     Electoria_Loop15:
(1)  132/   10173 : A060                	dc.b	nG2, $60
(1)  133/   10175 : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop15
(1)  133/   10175 : F7                          dc.b    $F7
(1)  133/   10176 : 0004                        dc.b    $00,$04
(1)  133/   10178 : =>TRUE                       if SonicDriverVer<>1
(1)  133/   10178 : 7381                                dc.w    z80_ptr(Electoria_Loop15)
(1)  133/   1017A : =>FALSE                      else
(1)  133/   1017A :                                     dc.w    Electoria_Loop15-*-1
(1)  133/   1017A : [133]                        endif
(1)  134/   1017A : (MACRO)              	smpsSetvoice        $01
(1)  134/   1017A :  (MACRO-2)                   smpsFMvoice $01
(1)  134/   1017A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  134/   1017A :                                     dc.b    $EF,$01|$80,+$81
(1)  134/   1017A : =>TRUE                       else
(1)  134/   1017A : EF01                                dc.b    $EF,$01
(1)  134/   1017C : [134]                        endif
(1)  135/   1017C : (MACRO)              	smpsFMAlterVol      $FA
(1)  135/   1017C : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  135/   1017C :                                     dc.b    $E5,$FA,
(1)  135/   1017C : =>TRUE                       else
(1)  135/   1017C : E6FA                                dc.b    $E6,$FA
(1)  135/   1017E : [135]                        endif
(1)  136/   1017E : (MACRO)              	smpsJump            Electoria_Jump01
(1)  136/   1017E : F6                          dc.b    $F6
(1)  136/   1017F : =>TRUE                       if SonicDriverVer<>1
(1)  136/   1017F : C780                                dc.w    z80_ptr(Electoria_Jump01)
(1)  136/   10181 : =>FALSE                      else
(1)  136/   10181 :                                     dc.w    Electoria_Jump01-*-1
(1)  136/   10181 : [136]                        endif
(1)  137/   10181 :                     
(1)  138/   10181 :                     Electoria_Call04:
(1)  139/   10181 : 800C B00C           	dc.b	nRst, $0C, nB3, $0C
(1)  140/   10185 : (MACRO)              	smpsFMAlterVol      $0A
(1)  140/   10185 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  140/   10185 :                                     dc.b    $E5,$0A,
(1)  140/   10185 : =>TRUE                       else
(1)  140/   10185 : E60A                                dc.b    $E6,$0A
(1)  140/   10187 : [140]                        endif
(1)  141/   10187 : (MACRO)              	smpsPan             panLeft, $00
(1)  141/   10187 : =$0                  panNone set $00
(1)  141/   10187 : =$40                 panRight set $40
(1)  141/   10187 : =$80                 panLeft set $80
(1)  141/   10187 : =$C0                 panCentre set $C0
(1)  141/   10187 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  141/   10187 : E080                        dc.b $E0,panLeft+$00
(1)  142/   10189 : 06                  	dc.b	$06
(1)  143/   1018A : (MACRO)              	smpsFMAlterVol      $F6
(1)  143/   1018A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  143/   1018A :                                     dc.b    $E5,$F6,
(1)  143/   1018A : =>TRUE                       else
(1)  143/   1018A : E6F6                                dc.b    $E6,$F6
(1)  143/   1018C : [143]                        endif
(1)  144/   1018C : (MACRO)              	smpsPan             panCenter, $00
(1)  144/   1018C : =$0                  panNone set $00
(1)  144/   1018C : =$40                 panRight set $40
(1)  144/   1018C : =$80                 panLeft set $80
(1)  144/   1018C : =$C0                 panCentre set $C0
(1)  144/   1018C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  144/   1018C : E0C0                        dc.b $E0,panCenter+$00
(1)  145/   1018E : 0C                  	dc.b	$0C
(1)  146/   1018F : (MACRO)              	smpsFMAlterVol      $0A
(1)  146/   1018F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  146/   1018F :                                     dc.b    $E5,$0A,
(1)  146/   1018F : =>TRUE                       else
(1)  146/   1018F : E60A                                dc.b    $E6,$0A
(1)  146/   10191 : [146]                        endif
(1)  147/   10191 : (MACRO)              	smpsPan             panLeft, $00
(1)  147/   10191 : =$0                  panNone set $00
(1)  147/   10191 : =$40                 panRight set $40
(1)  147/   10191 : =$80                 panLeft set $80
(1)  147/   10191 : =$C0                 panCentre set $C0
(1)  147/   10191 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  147/   10191 : E080                        dc.b $E0,panLeft+$00
(1)  148/   10193 : 06                  	dc.b	$06
(1)  149/   10194 : (MACRO)              	smpsFMAlterVol      $F6
(1)  149/   10194 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  149/   10194 :                                     dc.b    $E5,$F6,
(1)  149/   10194 : =>TRUE                       else
(1)  149/   10194 : E6F6                                dc.b    $E6,$F6
(1)  149/   10196 : [149]                        endif
(1)  150/   10196 : (MACRO)              	smpsPan             panCenter, $00
(1)  150/   10196 : =$0                  panNone set $00
(1)  150/   10196 : =$40                 panRight set $40
(1)  150/   10196 : =$80                 panLeft set $80
(1)  150/   10196 : =$C0                 panCentre set $C0
(1)  150/   10196 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  150/   10196 : E0C0                        dc.b $E0,panCenter+$00
(1)  151/   10198 : 0C                  	dc.b	$0C
(1)  152/   10199 : (MACRO)              	smpsFMAlterVol      $0A
(1)  152/   10199 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  152/   10199 :                                     dc.b    $E5,$0A,
(1)  152/   10199 : =>TRUE                       else
(1)  152/   10199 : E60A                                dc.b    $E6,$0A
(1)  152/   1019B : [152]                        endif
(1)  153/   1019B : (MACRO)              	smpsPan             panLeft, $00
(1)  153/   1019B : =$0                  panNone set $00
(1)  153/   1019B : =$40                 panRight set $40
(1)  153/   1019B : =$80                 panLeft set $80
(1)  153/   1019B : =$C0                 panCentre set $C0
(1)  153/   1019B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  153/   1019B : E080                        dc.b $E0,panLeft+$00
(1)  154/   1019D : 06                  	dc.b	$06
(1)  155/   1019E : (MACRO)              	smpsFMAlterVol      $F6
(1)  155/   1019E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  155/   1019E :                                     dc.b    $E5,$F6,
(1)  155/   1019E : =>TRUE                       else
(1)  155/   1019E : E6F6                                dc.b    $E6,$F6
(1)  155/   101A0 : [155]                        endif
(1)  156/   101A0 : (MACRO)              	smpsPan             panCenter, $00
(1)  156/   101A0 : =$0                  panNone set $00
(1)  156/   101A0 : =$40                 panRight set $40
(1)  156/   101A0 : =$80                 panLeft set $80
(1)  156/   101A0 : =$C0                 panCentre set $C0
(1)  156/   101A0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  156/   101A0 : E0C0                        dc.b $E0,panCenter+$00
(1)  157/   101A2 : 0C                  	dc.b	$0C
(1)  158/   101A3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  158/   101A3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  158/   101A3 :                                     dc.b    $E5,$0A,
(1)  158/   101A3 : =>TRUE                       else
(1)  158/   101A3 : E60A                                dc.b    $E6,$0A
(1)  158/   101A5 : [158]                        endif
(1)  159/   101A5 : (MACRO)              	smpsPan             panLeft, $00
(1)  159/   101A5 : =$0                  panNone set $00
(1)  159/   101A5 : =$40                 panRight set $40
(1)  159/   101A5 : =$80                 panLeft set $80
(1)  159/   101A5 : =$C0                 panCentre set $C0
(1)  159/   101A5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  159/   101A5 : E080                        dc.b $E0,panLeft+$00
(1)  160/   101A7 : 06                  	dc.b	$06
(1)  161/   101A8 : (MACRO)              	smpsFMAlterVol      $F6
(1)  161/   101A8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  161/   101A8 :                                     dc.b    $E5,$F6,
(1)  161/   101A8 : =>TRUE                       else
(1)  161/   101A8 : E6F6                                dc.b    $E6,$F6
(1)  161/   101AA : [161]                        endif
(1)  162/   101AA : (MACRO)              	smpsPan             panCenter, $00
(1)  162/   101AA : =$0                  panNone set $00
(1)  162/   101AA : =$40                 panRight set $40
(1)  162/   101AA : =$80                 panLeft set $80
(1)  162/   101AA : =$C0                 panCentre set $C0
(1)  162/   101AA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  162/   101AA : E0C0                        dc.b $E0,panCenter+$00
(1)  163/   101AC : 0C                  	dc.b	$0C
(1)  164/   101AD : (MACRO)              	smpsReturn
(1)  164/   101AD : =>TRUE                       if SonicDriverVer>=3
(1)  164/   101AD : F9                                  dc.b    $F9
(1)  164/   101AE : =>FALSE                      else
(1)  164/   101AE :                                     dc.b    $E3
(1)  164/   101AE : [164]                        endif
(1)  165/   101AE :                     
(1)  166/   101AE :                     Electoria_Call06:
(1)  167/   101AE : BD12                	dc.b	nC5, $12
(1)  168/   101B0 : (MACRO)              	smpsFMAlterVol      $0A
(1)  168/   101B0 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  168/   101B0 :                                     dc.b    $E5,$0A,
(1)  168/   101B0 : =>TRUE                       else
(1)  168/   101B0 : E60A                                dc.b    $E6,$0A
(1)  168/   101B2 : [168]                        endif
(1)  169/   101B2 : 06                  	dc.b	$06
(1)  170/   101B3 : (MACRO)              	smpsFMAlterVol      $F6
(1)  170/   101B3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  170/   101B3 :                                     dc.b    $E5,$F6,
(1)  170/   101B3 : =>TRUE                       else
(1)  170/   101B3 : E6F6                                dc.b    $E6,$F6
(1)  170/   101B5 : [170]                        endif
(1)  171/   101B5 : BC12 BD06 BAB8      	dc.b	nB4, $12, nC5, $06, nA4, nG4
(1)  172/   101BB : (MACRO)              	smpsFMAlterVol      $0A
(1)  172/   101BB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  172/   101BB :                                     dc.b    $E5,$0A,
(1)  172/   101BB : =>TRUE                       else
(1)  172/   101BB : E60A                                dc.b    $E6,$0A
(1)  172/   101BD : [172]                        endif
(1)  173/   101BD : B8                  	dc.b	nG4
(1)  174/   101BE : (MACRO)              	smpsFMAlterVol      $F6
(1)  174/   101BE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  174/   101BE :                                     dc.b    $E5,$F6,
(1)  174/   101BE : =>TRUE                       else
(1)  174/   101BE : E6F6                                dc.b    $E6,$F6
(1)  174/   101C0 : [174]                        endif
(1)  175/   101C0 : B812                	dc.b	nG4, $12
(1)  176/   101C2 : (MACRO)              	smpsReturn
(1)  176/   101C2 : =>TRUE                       if SonicDriverVer>=3
(1)  176/   101C2 : F9                                  dc.b    $F9
(1)  176/   101C3 : =>FALSE                      else
(1)  176/   101C3 :                                     dc.b    $E3
(1)  176/   101C3 : [176]                        endif
(1)  177/   101C3 :                     
(1)  178/   101C3 :                     Electoria_Call07:
(1)  179/   101C3 : B30C                	dc.b	nD4, $0C
(1)  180/   101C5 : (MACRO)              	smpsFMAlterVol      $0A
(1)  180/   101C5 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  180/   101C5 :                                     dc.b    $E5,$0A,
(1)  180/   101C5 : =>TRUE                       else
(1)  180/   101C5 : E60A                                dc.b    $E6,$0A
(1)  180/   101C7 : [180]                        endif
(1)  181/   101C7 : 06                  	dc.b	$06
(1)  182/   101C8 : (MACRO)              	smpsFMAlterVol      $F6
(1)  182/   101C8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  182/   101C8 :                                     dc.b    $E5,$F6,
(1)  182/   101C8 : =>TRUE                       else
(1)  182/   101C8 : E6F6                                dc.b    $E6,$F6
(1)  182/   101CA : [182]                        endif
(1)  183/   101CA : B20C                	dc.b	nCs4, $0C
(1)  184/   101CC : (MACRO)              	smpsFMAlterVol      $0A
(1)  184/   101CC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  184/   101CC :                                     dc.b    $E5,$0A,
(1)  184/   101CC : =>TRUE                       else
(1)  184/   101CC : E60A                                dc.b    $E6,$0A
(1)  184/   101CE : [184]                        endif
(1)  185/   101CE : 06                  	dc.b	$06
(1)  186/   101CF : (MACRO)              	smpsFMAlterVol      $F6
(1)  186/   101CF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  186/   101CF :                                     dc.b    $E5,$F6,
(1)  186/   101CF : =>TRUE                       else
(1)  186/   101CF : E6F6                                dc.b    $E6,$F6
(1)  186/   101D1 : [186]                        endif
(1)  187/   101D1 : B10C                	dc.b	nC4, $0C
(1)  188/   101D3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  188/   101D3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  188/   101D3 :                                     dc.b    $E5,$0A,
(1)  188/   101D3 : =>TRUE                       else
(1)  188/   101D3 : E60A                                dc.b    $E6,$0A
(1)  188/   101D5 : [188]                        endif
(1)  189/   101D5 : 06                  	dc.b	$06
(1)  190/   101D6 : (MACRO)              	smpsFMAlterVol      $F6
(1)  190/   101D6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  190/   101D6 :                                     dc.b    $E5,$F6,
(1)  190/   101D6 : =>TRUE                       else
(1)  190/   101D6 : E6F6                                dc.b    $E6,$F6
(1)  190/   101D8 : [190]                        endif
(1)  191/   101D8 : B00C                	dc.b	nB3, $0C
(1)  192/   101DA : (MACRO)              	smpsFMAlterVol      $0A
(1)  192/   101DA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  192/   101DA :                                     dc.b    $E5,$0A,
(1)  192/   101DA : =>TRUE                       else
(1)  192/   101DA : E60A                                dc.b    $E6,$0A
(1)  192/   101DC : [192]                        endif
(1)  193/   101DC : 06                  	dc.b	$06
(1)  194/   101DD : (MACRO)              	smpsFMAlterVol      $F6
(1)  194/   101DD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  194/   101DD :                                     dc.b    $E5,$F6,
(1)  194/   101DD : =>TRUE                       else
(1)  194/   101DD : E6F6                                dc.b    $E6,$F6
(1)  194/   101DF : [194]                        endif
(1)  195/   101DF : AF                  	dc.b	nBb3
(1)  196/   101E0 : (MACRO)              	smpsFMAlterVol      $0A
(1)  196/   101E0 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  196/   101E0 :                                     dc.b    $E5,$0A,
(1)  196/   101E0 : =>TRUE                       else
(1)  196/   101E0 : E60A                                dc.b    $E6,$0A
(1)  196/   101E2 : [196]                        endif
(1)  197/   101E2 : AF                  	dc.b	nBb3
(1)  198/   101E3 : (MACRO)              	smpsFMAlterVol      $F6
(1)  198/   101E3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  198/   101E3 :                                     dc.b    $E5,$F6,
(1)  198/   101E3 : =>TRUE                       else
(1)  198/   101E3 : E6F6                                dc.b    $E6,$F6
(1)  198/   101E5 : [198]                        endif
(1)  199/   101E5 : AE                  	dc.b	nA3
(1)  200/   101E6 : (MACRO)              	smpsFMAlterVol      $0A
(1)  200/   101E6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  200/   101E6 :                                     dc.b    $E5,$0A,
(1)  200/   101E6 : =>TRUE                       else
(1)  200/   101E6 : E60A                                dc.b    $E6,$0A
(1)  200/   101E8 : [200]                        endif
(1)  201/   101E8 : AE                  	dc.b	nA3
(1)  202/   101E9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  202/   101E9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  202/   101E9 :                                     dc.b    $E5,$F6,
(1)  202/   101E9 : =>TRUE                       else
(1)  202/   101E9 : E6F6                                dc.b    $E6,$F6
(1)  202/   101EB : [202]                        endif
(1)  203/   101EB : AC0C                	dc.b	nG3, $0C
(1)  204/   101ED : (MACRO)              	smpsReturn
(1)  204/   101ED : =>TRUE                       if SonicDriverVer>=3
(1)  204/   101ED : F9                                  dc.b    $F9
(1)  204/   101EE : =>FALSE                      else
(1)  204/   101EE :                                     dc.b    $E3
(1)  204/   101EE : [204]                        endif
(1)  205/   101EE :                     
(1)  206/   101EE :                     Electoria_Call08:
(1)  207/   101EE : (MACRO)              	smpsChangeTransposition $0C
(1)  207/   101EE : =>TRUE                       if SonicDriverVer>=3
(1)  207/   101EE : FB0C                                dc.b    $FB,$0C
(1)  207/   101F0 : =>FALSE                      else
(1)  207/   101F0 :                                     dc.b    $E9,$0C
(1)  207/   101F0 : [207]                        endif
(1)  208/   101F0 : AF06 80AF 80AF      	dc.b	nBb3, $06, nRst, nBb3, nRst, nBb3, nRst, nBb3, $0C, nG3, $06, nBb3
            101F6 : 80AF 0CAC 06AF    
(1)  209/   101FC : 80B1 80B3 E70C      	dc.b	nRst, nC4, nRst, nD4, smpsNoAttack, $0C, nC4, $06, nRst, nBb3, nRst, nC4
            10202 : B106 80AF 80B1    
(1)  210/   10208 : 80B3 0C80 06B6      	dc.b	nRst, nD4, $0C, nRst, $06, nF4, $12, nD4, $06, nRst, nC4, $0C
            1020E : 12B3 0680 B10C    
(1)  211/   10214 : 8006 B380 4880      	dc.b	nRst, $06, nD4, nRst, $48, nRst, $0C, nF3, $06, nRst, nG3, nRst
            1021A : 0CAA 0680 AC80    
(1)  212/   10220 : AF80 B180 B380      	dc.b	nBb3, nRst, nC4, nRst, nD4, nRst, nF4, $0C, nD4, $06, nRst, nRst
            10226 : B60C B306 8080    
(1)  213/   1022C : 0CB3 0680 B680      	dc.b	$0C, nD4, $06, nRst, nF4, nRst, nD4, nRst, nF4, $0C, nG4, $06
            10232 : B380 B60C B806    
(1)  214/   10238 : AF80 B180 B3E7      	dc.b	nBb3, nRst, nC4, nRst, nD4, smpsNoAttack, $0C, nC4, $06, nRst, nBb3, nRst
            1023E : 0CB1 0680 AF80    
(1)  215/   10244 : B180 B30C 8006      	dc.b	nC4, nRst, nD4, $0C, nRst, $06, nC4, $12, nF4, $06, nRst, nF3
            1024A : B112 B606 80AA    
(1)  216/   10250 : 6080 0CAF 12B1      	dc.b	$60, nRst, $0C, nBb3, $12, nC4, $0C, nF4, $06
            10256 : 0CB6 06          
(1)  217/   10259 : (MACRO)              	smpsChangeTransposition $F4
(1)  217/   10259 : =>TRUE                       if SonicDriverVer>=3
(1)  217/   10259 : FBF4                                dc.b    $FB,$F4
(1)  217/   1025B : =>FALSE                      else
(1)  217/   1025B :                                     dc.b    $E9,$F4
(1)  217/   1025B : [217]                        endif
(1)  218/   1025B : (MACRO)              	smpsReturn
(1)  218/   1025B : =>TRUE                       if SonicDriverVer>=3
(1)  218/   1025B : F9                                  dc.b    $F9
(1)  218/   1025C : =>FALSE                      else
(1)  218/   1025C :                                     dc.b    $E3
(1)  218/   1025C : [218]                        endif
(1)  219/   1025C :                     
(1)  220/   1025C :                     Electoria_Call09:
(1)  221/   1025C : (MACRO)              	smpsCall            Electoria_Call13
(1)  221/   1025C : F8                          dc.b    $F8
(1)  221/   1025D : =>TRUE                       if SonicDriverVer<>1
(1)  221/   1025D : 3A83                                dc.w    z80_ptr(Electoria_Call13)
(1)  221/   1025F : =>FALSE                      else
(1)  221/   1025F :                                     dc.w    Electoria_Call13-*-1
(1)  221/   1025F : [221]                        endif
(1)  222/   1025F : B30C E706           	dc.b	nD4, $0C, smpsNoAttack, $06
(1)  223/   10263 : (MACRO)              	smpsFMAlterVol      $0A
(1)  223/   10263 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  223/   10263 :                                     dc.b    $E5,$0A,
(1)  223/   10263 : =>TRUE                       else
(1)  223/   10263 : E60A                                dc.b    $E6,$0A
(1)  223/   10265 : [223]                        endif
(1)  224/   10265 : (MACRO)              	smpsPan             panRight, $00
(1)  224/   10265 : =$0                  panNone set $00
(1)  224/   10265 : =$40                 panRight set $40
(1)  224/   10265 : =$80                 panLeft set $80
(1)  224/   10265 : =$C0                 panCentre set $C0
(1)  224/   10265 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  224/   10265 : E040                        dc.b $E0,panRight+$00
(1)  225/   10267 : B3                  	dc.b	nD4
(1)  226/   10268 : (MACRO)              	smpsFMAlterVol      $F6
(1)  226/   10268 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  226/   10268 :                                     dc.b    $E5,$F6,
(1)  226/   10268 : =>TRUE                       else
(1)  226/   10268 : E6F6                                dc.b    $E6,$F6
(1)  226/   1026A : [226]                        endif
(1)  227/   1026A : (MACRO)              	smpsPan             panCenter, $00
(1)  227/   1026A : =$0                  panNone set $00
(1)  227/   1026A : =$40                 panRight set $40
(1)  227/   1026A : =$80                 panLeft set $80
(1)  227/   1026A : =$C0                 panCentre set $C0
(1)  227/   1026A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  227/   1026A : E0C0                        dc.b $E0,panCenter+$00
(1)  228/   1026C : B318 B006           	dc.b	nD4, $18, nB3, $06
(1)  229/   10270 : (MACRO)              	smpsFMAlterVol      $0A
(1)  229/   10270 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  229/   10270 :                                     dc.b    $E5,$0A,
(1)  229/   10270 : =>TRUE                       else
(1)  229/   10270 : E60A                                dc.b    $E6,$0A
(1)  229/   10272 : [229]                        endif
(1)  230/   10272 : (MACRO)              	smpsPan             panRight, $00
(1)  230/   10272 : =$0                  panNone set $00
(1)  230/   10272 : =$40                 panRight set $40
(1)  230/   10272 : =$80                 panLeft set $80
(1)  230/   10272 : =$C0                 panCentre set $C0
(1)  230/   10272 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  230/   10272 : E040                        dc.b $E0,panRight+$00
(1)  231/   10274 : B0                  	dc.b	nB3
(1)  232/   10275 : (MACRO)              	smpsFMAlterVol      $F6
(1)  232/   10275 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  232/   10275 :                                     dc.b    $E5,$F6,
(1)  232/   10275 : =>TRUE                       else
(1)  232/   10275 : E6F6                                dc.b    $E6,$F6
(1)  232/   10277 : [232]                        endif
(1)  233/   10277 : (MACRO)              	smpsPan             panCenter, $00
(1)  233/   10277 : =$0                  panNone set $00
(1)  233/   10277 : =$40                 panRight set $40
(1)  233/   10277 : =$80                 panLeft set $80
(1)  233/   10277 : =$C0                 panCentre set $C0
(1)  233/   10277 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  233/   10277 : E0C0                        dc.b $E0,panCenter+$00
(1)  234/   10279 : B312 B50C           	dc.b	nD4, $12, nE4, $0C
(1)  235/   1027D : (MACRO)              	smpsFMAlterVol      $0A
(1)  235/   1027D : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  235/   1027D :                                     dc.b    $E5,$0A,
(1)  235/   1027D : =>TRUE                       else
(1)  235/   1027D : E60A                                dc.b    $E6,$0A
(1)  235/   1027F : [235]                        endif
(1)  236/   1027F : (MACRO)              	smpsPan             panRight, $00
(1)  236/   1027F : =$0                  panNone set $00
(1)  236/   1027F : =$40                 panRight set $40
(1)  236/   1027F : =$80                 panLeft set $80
(1)  236/   1027F : =$C0                 panCentre set $C0
(1)  236/   1027F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  236/   1027F : E040                        dc.b $E0,panRight+$00
(1)  237/   10281 : 06                  	dc.b	$06
(1)  238/   10282 : (MACRO)              	smpsFMAlterVol      $F6
(1)  238/   10282 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  238/   10282 :                                     dc.b    $E5,$F6,
(1)  238/   10282 : =>TRUE                       else
(1)  238/   10282 : E6F6                                dc.b    $E6,$F6
(1)  238/   10284 : [238]                        endif
(1)  239/   10284 : (MACRO)              	smpsPan             panCenter, $00
(1)  239/   10284 : =$0                  panNone set $00
(1)  239/   10284 : =$40                 panRight set $40
(1)  239/   10284 : =$80                 panLeft set $80
(1)  239/   10284 : =$C0                 panCentre set $C0
(1)  239/   10284 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  239/   10284 : E0C0                        dc.b $E0,panCenter+$00
(1)  240/   10286 : B60C E706           	dc.b	nF4, $0C, smpsNoAttack, $06
(1)  241/   1028A : (MACRO)              	smpsFMAlterVol      $0A
(1)  241/   1028A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  241/   1028A :                                     dc.b    $E5,$0A,
(1)  241/   1028A : =>TRUE                       else
(1)  241/   1028A : E60A                                dc.b    $E6,$0A
(1)  241/   1028C : [241]                        endif
(1)  242/   1028C : (MACRO)              	smpsPan             panRight, $00
(1)  242/   1028C : =$0                  panNone set $00
(1)  242/   1028C : =$40                 panRight set $40
(1)  242/   1028C : =$80                 panLeft set $80
(1)  242/   1028C : =$C0                 panCentre set $C0
(1)  242/   1028C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  242/   1028C : E040                        dc.b $E0,panRight+$00
(1)  243/   1028E : B6                  	dc.b	nF4
(1)  244/   1028F : (MACRO)              	smpsFMAlterVol      $F6
(1)  244/   1028F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  244/   1028F :                                     dc.b    $E5,$F6,
(1)  244/   1028F : =>TRUE                       else
(1)  244/   1028F : E6F6                                dc.b    $E6,$F6
(1)  244/   10291 : [244]                        endif
(1)  245/   10291 : (MACRO)              	smpsPan             panCenter, $00
(1)  245/   10291 : =$0                  panNone set $00
(1)  245/   10291 : =$40                 panRight set $40
(1)  245/   10291 : =$80                 panLeft set $80
(1)  245/   10291 : =$C0                 panCentre set $C0
(1)  245/   10291 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  245/   10291 : E0C0                        dc.b $E0,panCenter+$00
(1)  246/   10293 : B5                  	dc.b	nE4
(1)  247/   10294 : (MACRO)              	smpsFMAlterVol      $0A
(1)  247/   10294 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  247/   10294 :                                     dc.b    $E5,$0A,
(1)  247/   10294 : =>TRUE                       else
(1)  247/   10294 : E60A                                dc.b    $E6,$0A
(1)  247/   10296 : [247]                        endif
(1)  248/   10296 : (MACRO)              	smpsPan             panRight, $00
(1)  248/   10296 : =$0                  panNone set $00
(1)  248/   10296 : =$40                 panRight set $40
(1)  248/   10296 : =$80                 panLeft set $80
(1)  248/   10296 : =$C0                 panCentre set $C0
(1)  248/   10296 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  248/   10296 : E040                        dc.b $E0,panRight+$00
(1)  249/   10298 : B5                  	dc.b	nE4
(1)  250/   10299 : (MACRO)              	smpsFMAlterVol      $F6
(1)  250/   10299 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  250/   10299 :                                     dc.b    $E5,$F6,
(1)  250/   10299 : =>TRUE                       else
(1)  250/   10299 : E6F6                                dc.b    $E6,$F6
(1)  250/   1029B : [250]                        endif
(1)  251/   1029B : (MACRO)              	smpsPan             panCenter, $00
(1)  251/   1029B : =$0                  panNone set $00
(1)  251/   1029B : =$40                 panRight set $40
(1)  251/   1029B : =$80                 panLeft set $80
(1)  251/   1029B : =$C0                 panCentre set $C0
(1)  251/   1029B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  251/   1029B : E0C0                        dc.b $E0,panCenter+$00
(1)  252/   1029D : B6B5                	dc.b	nF4, nE4
(1)  253/   1029F : (MACRO)              	smpsFMAlterVol      $0A
(1)  253/   1029F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  253/   1029F :                                     dc.b    $E5,$0A,
(1)  253/   1029F : =>TRUE                       else
(1)  253/   1029F : E60A                                dc.b    $E6,$0A
(1)  253/   102A1 : [253]                        endif
(1)  254/   102A1 : (MACRO)              	smpsPan             panRight, $00
(1)  254/   102A1 : =$0                  panNone set $00
(1)  254/   102A1 : =$40                 panRight set $40
(1)  254/   102A1 : =$80                 panLeft set $80
(1)  254/   102A1 : =$C0                 panCentre set $C0
(1)  254/   102A1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  254/   102A1 : E040                        dc.b $E0,panRight+$00
(1)  255/   102A3 : B5                  	dc.b	nE4
(1)  256/   102A4 : (MACRO)              	smpsFMAlterVol      $F6
(1)  256/   102A4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  256/   102A4 :                                     dc.b    $E5,$F6,
(1)  256/   102A4 : =>TRUE                       else
(1)  256/   102A4 : E6F6                                dc.b    $E6,$F6
(1)  256/   102A6 : [256]                        endif
(1)  257/   102A6 : (MACRO)              	smpsPan             panCenter, $00
(1)  257/   102A6 : =$0                  panNone set $00
(1)  257/   102A6 : =$40                 panRight set $40
(1)  257/   102A6 : =$80                 panLeft set $80
(1)  257/   102A6 : =$C0                 panCentre set $C0
(1)  257/   102A6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  257/   102A6 : E0C0                        dc.b $E0,panCenter+$00
(1)  258/   102A8 : B30C                	dc.b	nD4, $0C
(1)  259/   102AA : (MACRO)              	smpsFMAlterVol      $0A
(1)  259/   102AA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  259/   102AA :                                     dc.b    $E5,$0A,
(1)  259/   102AA : =>TRUE                       else
(1)  259/   102AA : E60A                                dc.b    $E6,$0A
(1)  259/   102AC : [259]                        endif
(1)  260/   102AC : (MACRO)              	smpsPan             panRight, $00
(1)  260/   102AC : =$0                  panNone set $00
(1)  260/   102AC : =$40                 panRight set $40
(1)  260/   102AC : =$80                 panLeft set $80
(1)  260/   102AC : =$C0                 panCentre set $C0
(1)  260/   102AC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  260/   102AC : E040                        dc.b $E0,panRight+$00
(1)  261/   102AE : 06                  	dc.b	$06
(1)  262/   102AF : (MACRO)              	smpsFMAlterVol      $F6
(1)  262/   102AF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  262/   102AF :                                     dc.b    $E5,$F6,
(1)  262/   102AF : =>TRUE                       else
(1)  262/   102AF : E6F6                                dc.b    $E6,$F6
(1)  262/   102B1 : [262]                        endif
(1)  263/   102B1 : (MACRO)              	smpsPan             panCenter, $00
(1)  263/   102B1 : =$0                  panNone set $00
(1)  263/   102B1 : =$40                 panRight set $40
(1)  263/   102B1 : =$80                 panLeft set $80
(1)  263/   102B1 : =$C0                 panCentre set $C0
(1)  263/   102B1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  263/   102B1 : E0C0                        dc.b $E0,panCenter+$00
(1)  264/   102B3 : B1                  	dc.b	nC4
(1)  265/   102B4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  265/   102B4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  265/   102B4 :                                     dc.b    $E5,$0A,
(1)  265/   102B4 : =>TRUE                       else
(1)  265/   102B4 : E60A                                dc.b    $E6,$0A
(1)  265/   102B6 : [265]                        endif
(1)  266/   102B6 : (MACRO)              	smpsPan             panRight, $00
(1)  266/   102B6 : =$0                  panNone set $00
(1)  266/   102B6 : =$40                 panRight set $40
(1)  266/   102B6 : =$80                 panLeft set $80
(1)  266/   102B6 : =$C0                 panCentre set $C0
(1)  266/   102B6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  266/   102B6 : E040                        dc.b $E0,panRight+$00
(1)  267/   102B8 : B1                  	dc.b	nC4
(1)  268/   102B9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  268/   102B9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  268/   102B9 :                                     dc.b    $E5,$F6,
(1)  268/   102B9 : =>TRUE                       else
(1)  268/   102B9 : E6F6                                dc.b    $E6,$F6
(1)  268/   102BB : [268]                        endif
(1)  269/   102BB : (MACRO)              	smpsPan             panCenter, $00
(1)  269/   102BB : =$0                  panNone set $00
(1)  269/   102BB : =$40                 panRight set $40
(1)  269/   102BB : =$80                 panLeft set $80
(1)  269/   102BB : =$C0                 panCentre set $C0
(1)  269/   102BB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  269/   102BB : E0C0                        dc.b $E0,panCenter+$00
(1)  270/   102BD : B10C B306           	dc.b	nC4, $0C, nD4, $06
(1)  271/   102C1 : (MACRO)              	smpsFMAlterVol      $0A
(1)  271/   102C1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  271/   102C1 :                                     dc.b    $E5,$0A,
(1)  271/   102C1 : =>TRUE                       else
(1)  271/   102C1 : E60A                                dc.b    $E6,$0A
(1)  271/   102C3 : [271]                        endif
(1)  272/   102C3 : (MACRO)              	smpsPan             panRight, $00
(1)  272/   102C3 : =$0                  panNone set $00
(1)  272/   102C3 : =$40                 panRight set $40
(1)  272/   102C3 : =$80                 panLeft set $80
(1)  272/   102C3 : =$C0                 panCentre set $C0
(1)  272/   102C3 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  272/   102C3 : E040                        dc.b $E0,panRight+$00
(1)  273/   102C5 : B3                  	dc.b	nD4
(1)  274/   102C6 : (MACRO)              	smpsFMAlterVol      $F6
(1)  274/   102C6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  274/   102C6 :                                     dc.b    $E5,$F6,
(1)  274/   102C6 : =>TRUE                       else
(1)  274/   102C6 : E6F6                                dc.b    $E6,$F6
(1)  274/   102C8 : [274]                        endif
(1)  275/   102C8 : (MACRO)              	smpsPan             panCenter, $00
(1)  275/   102C8 : =$0                  panNone set $00
(1)  275/   102C8 : =$40                 panRight set $40
(1)  275/   102C8 : =$80                 panLeft set $80
(1)  275/   102C8 : =$C0                 panCentre set $C0
(1)  275/   102C8 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  275/   102C8 : E0C0                        dc.b $E0,panCenter+$00
(1)  276/   102CA : (MACRO)              	smpsReturn
(1)  276/   102CA : =>TRUE                       if SonicDriverVer>=3
(1)  276/   102CA : F9                                  dc.b    $F9
(1)  276/   102CB : =>FALSE                      else
(1)  276/   102CB :                                     dc.b    $E3
(1)  276/   102CB : [276]                        endif
(1)  277/   102CB :                     
(1)  278/   102CB :                     Electoria_Call0A:
(1)  279/   102CB : (MACRO)              	smpsCall            Electoria_Call13
(1)  279/   102CB : F8                          dc.b    $F8
(1)  279/   102CC : =>TRUE                       if SonicDriverVer<>1
(1)  279/   102CC : 3A83                                dc.w    z80_ptr(Electoria_Call13)
(1)  279/   102CE : =>FALSE                      else
(1)  279/   102CE :                                     dc.w    Electoria_Call13-*-1
(1)  279/   102CE : [279]                        endif
(1)  280/   102CE : B60C E706           	dc.b	nF4, $0C, smpsNoAttack, $06
(1)  281/   102D2 : (MACRO)              	smpsFMAlterVol      $0A
(1)  281/   102D2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  281/   102D2 :                                     dc.b    $E5,$0A,
(1)  281/   102D2 : =>TRUE                       else
(1)  281/   102D2 : E60A                                dc.b    $E6,$0A
(1)  281/   102D4 : [281]                        endif
(1)  282/   102D4 : (MACRO)              	smpsPan             panRight, $00
(1)  282/   102D4 : =$0                  panNone set $00
(1)  282/   102D4 : =$40                 panRight set $40
(1)  282/   102D4 : =$80                 panLeft set $80
(1)  282/   102D4 : =$C0                 panCentre set $C0
(1)  282/   102D4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  282/   102D4 : E040                        dc.b $E0,panRight+$00
(1)  283/   102D6 : B6                  	dc.b	nF4
(1)  284/   102D7 : (MACRO)              	smpsFMAlterVol      $F6
(1)  284/   102D7 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  284/   102D7 :                                     dc.b    $E5,$F6,
(1)  284/   102D7 : =>TRUE                       else
(1)  284/   102D7 : E6F6                                dc.b    $E6,$F6
(1)  284/   102D9 : [284]                        endif
(1)  285/   102D9 : (MACRO)              	smpsPan             panCenter, $00
(1)  285/   102D9 : =$0                  panNone set $00
(1)  285/   102D9 : =$40                 panRight set $40
(1)  285/   102D9 : =$80                 panLeft set $80
(1)  285/   102D9 : =$C0                 panCentre set $C0
(1)  285/   102D9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  285/   102D9 : E0C0                        dc.b $E0,panCenter+$00
(1)  286/   102DB : B618 B306           	dc.b	nF4, $18, nD4, $06
(1)  287/   102DF : (MACRO)              	smpsFMAlterVol      $0A
(1)  287/   102DF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  287/   102DF :                                     dc.b    $E5,$0A,
(1)  287/   102DF : =>TRUE                       else
(1)  287/   102DF : E60A                                dc.b    $E6,$0A
(1)  287/   102E1 : [287]                        endif
(1)  288/   102E1 : (MACRO)              	smpsPan             panRight, $00
(1)  288/   102E1 : =$0                  panNone set $00
(1)  288/   102E1 : =$40                 panRight set $40
(1)  288/   102E1 : =$80                 panLeft set $80
(1)  288/   102E1 : =$C0                 panCentre set $C0
(1)  288/   102E1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  288/   102E1 : E040                        dc.b $E0,panRight+$00
(1)  289/   102E3 : B3                  	dc.b	nD4
(1)  290/   102E4 : (MACRO)              	smpsFMAlterVol      $F6
(1)  290/   102E4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  290/   102E4 :                                     dc.b    $E5,$F6,
(1)  290/   102E4 : =>TRUE                       else
(1)  290/   102E4 : E6F6                                dc.b    $E6,$F6
(1)  290/   102E6 : [290]                        endif
(1)  291/   102E6 : (MACRO)              	smpsPan             panCenter, $00
(1)  291/   102E6 : =$0                  panNone set $00
(1)  291/   102E6 : =$40                 panRight set $40
(1)  291/   102E6 : =$80                 panLeft set $80
(1)  291/   102E6 : =$C0                 panCentre set $C0
(1)  291/   102E6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  291/   102E6 : E0C0                        dc.b $E0,panCenter+$00
(1)  292/   102E8 : B612 B80C           	dc.b	nF4, $12, nG4, $0C
(1)  293/   102EC : (MACRO)              	smpsFMAlterVol      $0A
(1)  293/   102EC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  293/   102EC :                                     dc.b    $E5,$0A,
(1)  293/   102EC : =>TRUE                       else
(1)  293/   102EC : E60A                                dc.b    $E6,$0A
(1)  293/   102EE : [293]                        endif
(1)  294/   102EE : (MACRO)              	smpsPan             panRight, $00
(1)  294/   102EE : =$0                  panNone set $00
(1)  294/   102EE : =$40                 panRight set $40
(1)  294/   102EE : =$80                 panLeft set $80
(1)  294/   102EE : =$C0                 panCentre set $C0
(1)  294/   102EE : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  294/   102EE : E040                        dc.b $E0,panRight+$00
(1)  295/   102F0 : 06                  	dc.b	$06
(1)  296/   102F1 : (MACRO)              	smpsFMAlterVol      $F6
(1)  296/   102F1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  296/   102F1 :                                     dc.b    $E5,$F6,
(1)  296/   102F1 : =>TRUE                       else
(1)  296/   102F1 : E6F6                                dc.b    $E6,$F6
(1)  296/   102F3 : [296]                        endif
(1)  297/   102F3 : (MACRO)              	smpsPan             panCenter, $00
(1)  297/   102F3 : =$0                  panNone set $00
(1)  297/   102F3 : =$40                 panRight set $40
(1)  297/   102F3 : =$80                 panLeft set $80
(1)  297/   102F3 : =$C0                 panCentre set $C0
(1)  297/   102F3 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  297/   102F3 : E0C0                        dc.b $E0,panCenter+$00
(1)  298/   102F5 : BC0C E706           	dc.b	nB4, $0C, smpsNoAttack, $06
(1)  299/   102F9 : (MACRO)              	smpsFMAlterVol      $0A
(1)  299/   102F9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  299/   102F9 :                                     dc.b    $E5,$0A,
(1)  299/   102F9 : =>TRUE                       else
(1)  299/   102F9 : E60A                                dc.b    $E6,$0A
(1)  299/   102FB : [299]                        endif
(1)  300/   102FB : (MACRO)              	smpsPan             panRight, $00
(1)  300/   102FB : =$0                  panNone set $00
(1)  300/   102FB : =$40                 panRight set $40
(1)  300/   102FB : =$80                 panLeft set $80
(1)  300/   102FB : =$C0                 panCentre set $C0
(1)  300/   102FB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  300/   102FB : E040                        dc.b $E0,panRight+$00
(1)  301/   102FD : BC                  	dc.b	nB4
(1)  302/   102FE : (MACRO)              	smpsFMAlterVol      $F6
(1)  302/   102FE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  302/   102FE :                                     dc.b    $E5,$F6,
(1)  302/   102FE : =>TRUE                       else
(1)  302/   102FE : E6F6                                dc.b    $E6,$F6
(1)  302/   10300 : [302]                        endif
(1)  303/   10300 : (MACRO)              	smpsPan             panCenter, $00
(1)  303/   10300 : =$0                  panNone set $00
(1)  303/   10300 : =$40                 panRight set $40
(1)  303/   10300 : =$80                 panLeft set $80
(1)  303/   10300 : =$C0                 panCentre set $C0
(1)  303/   10300 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  303/   10300 : E0C0                        dc.b $E0,panCenter+$00
(1)  304/   10302 : BD                  	dc.b	nC5
(1)  305/   10303 : (MACRO)              	smpsFMAlterVol      $0A
(1)  305/   10303 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  305/   10303 :                                     dc.b    $E5,$0A,
(1)  305/   10303 : =>TRUE                       else
(1)  305/   10303 : E60A                                dc.b    $E6,$0A
(1)  305/   10305 : [305]                        endif
(1)  306/   10305 : (MACRO)              	smpsPan             panRight, $00
(1)  306/   10305 : =$0                  panNone set $00
(1)  306/   10305 : =$40                 panRight set $40
(1)  306/   10305 : =$80                 panLeft set $80
(1)  306/   10305 : =$C0                 panCentre set $C0
(1)  306/   10305 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  306/   10305 : E040                        dc.b $E0,panRight+$00
(1)  307/   10307 : BD                  	dc.b	nC5
(1)  308/   10308 : (MACRO)              	smpsFMAlterVol      $F6
(1)  308/   10308 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  308/   10308 :                                     dc.b    $E5,$F6,
(1)  308/   10308 : =>TRUE                       else
(1)  308/   10308 : E6F6                                dc.b    $E6,$F6
(1)  308/   1030A : [308]                        endif
(1)  309/   1030A : (MACRO)              	smpsPan             panCenter, $00
(1)  309/   1030A : =$0                  panNone set $00
(1)  309/   1030A : =$40                 panRight set $40
(1)  309/   1030A : =$80                 panLeft set $80
(1)  309/   1030A : =$C0                 panCentre set $C0
(1)  309/   1030A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  309/   1030A : E0C0                        dc.b $E0,panCenter+$00
(1)  310/   1030C : BCBA                	dc.b	nB4, nA4
(1)  311/   1030E : (MACRO)              	smpsFMAlterVol      $0A
(1)  311/   1030E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  311/   1030E :                                     dc.b    $E5,$0A,
(1)  311/   1030E : =>TRUE                       else
(1)  311/   1030E : E60A                                dc.b    $E6,$0A
(1)  311/   10310 : [311]                        endif
(1)  312/   10310 : (MACRO)              	smpsPan             panRight, $00
(1)  312/   10310 : =$0                  panNone set $00
(1)  312/   10310 : =$40                 panRight set $40
(1)  312/   10310 : =$80                 panLeft set $80
(1)  312/   10310 : =$C0                 panCentre set $C0
(1)  312/   10310 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  312/   10310 : E040                        dc.b $E0,panRight+$00
(1)  313/   10312 : BA                  	dc.b	nA4
(1)  314/   10313 : (MACRO)              	smpsFMAlterVol      $F6
(1)  314/   10313 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  314/   10313 :                                     dc.b    $E5,$F6,
(1)  314/   10313 : =>TRUE                       else
(1)  314/   10313 : E6F6                                dc.b    $E6,$F6
(1)  314/   10315 : [314]                        endif
(1)  315/   10315 : (MACRO)              	smpsPan             panCenter, $00
(1)  315/   10315 : =$0                  panNone set $00
(1)  315/   10315 : =$40                 panRight set $40
(1)  315/   10315 : =$80                 panLeft set $80
(1)  315/   10315 : =$C0                 panCentre set $C0
(1)  315/   10315 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  315/   10315 : E0C0                        dc.b $E0,panCenter+$00
(1)  316/   10317 : BF0C                	dc.b	nD5, $0C
(1)  317/   10319 : (MACRO)              	smpsFMAlterVol      $0A
(1)  317/   10319 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  317/   10319 :                                     dc.b    $E5,$0A,
(1)  317/   10319 : =>TRUE                       else
(1)  317/   10319 : E60A                                dc.b    $E6,$0A
(1)  317/   1031B : [317]                        endif
(1)  318/   1031B : (MACRO)              	smpsPan             panRight, $00
(1)  318/   1031B : =$0                  panNone set $00
(1)  318/   1031B : =$40                 panRight set $40
(1)  318/   1031B : =$80                 panLeft set $80
(1)  318/   1031B : =$C0                 panCentre set $C0
(1)  318/   1031B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  318/   1031B : E040                        dc.b $E0,panRight+$00
(1)  319/   1031D : 06                  	dc.b	$06
(1)  320/   1031E : (MACRO)              	smpsFMAlterVol      $F6
(1)  320/   1031E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  320/   1031E :                                     dc.b    $E5,$F6,
(1)  320/   1031E : =>TRUE                       else
(1)  320/   1031E : E6F6                                dc.b    $E6,$F6
(1)  320/   10320 : [320]                        endif
(1)  321/   10320 : (MACRO)              	smpsPan             panCenter, $00
(1)  321/   10320 : =$0                  panNone set $00
(1)  321/   10320 : =$40                 panRight set $40
(1)  321/   10320 : =$80                 panLeft set $80
(1)  321/   10320 : =$C0                 panCentre set $C0
(1)  321/   10320 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  321/   10320 : E0C0                        dc.b $E0,panCenter+$00
(1)  322/   10322 : B6                  	dc.b	nF4
(1)  323/   10323 : (MACRO)              	smpsFMAlterVol      $0A
(1)  323/   10323 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  323/   10323 :                                     dc.b    $E5,$0A,
(1)  323/   10323 : =>TRUE                       else
(1)  323/   10323 : E60A                                dc.b    $E6,$0A
(1)  323/   10325 : [323]                        endif
(1)  324/   10325 : (MACRO)              	smpsPan             panRight, $00
(1)  324/   10325 : =$0                  panNone set $00
(1)  324/   10325 : =$40                 panRight set $40
(1)  324/   10325 : =$80                 panLeft set $80
(1)  324/   10325 : =$C0                 panCentre set $C0
(1)  324/   10325 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  324/   10325 : E040                        dc.b $E0,panRight+$00
(1)  325/   10327 : B6                  	dc.b	nF4
(1)  326/   10328 : (MACRO)              	smpsFMAlterVol      $F6
(1)  326/   10328 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  326/   10328 :                                     dc.b    $E5,$F6,
(1)  326/   10328 : =>TRUE                       else
(1)  326/   10328 : E6F6                                dc.b    $E6,$F6
(1)  326/   1032A : [326]                        endif
(1)  327/   1032A : (MACRO)              	smpsPan             panCenter, $00
(1)  327/   1032A : =$0                  panNone set $00
(1)  327/   1032A : =$40                 panRight set $40
(1)  327/   1032A : =$80                 panLeft set $80
(1)  327/   1032A : =$C0                 panCentre set $C0
(1)  327/   1032A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  327/   1032A : E0C0                        dc.b $E0,panCenter+$00
(1)  328/   1032C : B60C B806           	dc.b	nF4, $0C, nG4, $06
(1)  329/   10330 : (MACRO)              	smpsFMAlterVol      $0A
(1)  329/   10330 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  329/   10330 :                                     dc.b    $E5,$0A,
(1)  329/   10330 : =>TRUE                       else
(1)  329/   10330 : E60A                                dc.b    $E6,$0A
(1)  329/   10332 : [329]                        endif
(1)  330/   10332 : (MACRO)              	smpsPan             panRight, $00
(1)  330/   10332 : =$0                  panNone set $00
(1)  330/   10332 : =$40                 panRight set $40
(1)  330/   10332 : =$80                 panLeft set $80
(1)  330/   10332 : =$C0                 panCentre set $C0
(1)  330/   10332 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  330/   10332 : E040                        dc.b $E0,panRight+$00
(1)  331/   10334 : B8                  	dc.b	nG4
(1)  332/   10335 : (MACRO)              	smpsFMAlterVol      $F6
(1)  332/   10335 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  332/   10335 :                                     dc.b    $E5,$F6,
(1)  332/   10335 : =>TRUE                       else
(1)  332/   10335 : E6F6                                dc.b    $E6,$F6
(1)  332/   10337 : [332]                        endif
(1)  333/   10337 : (MACRO)              	smpsPan             panCenter, $00
(1)  333/   10337 : =$0                  panNone set $00
(1)  333/   10337 : =$40                 panRight set $40
(1)  333/   10337 : =$80                 panLeft set $80
(1)  333/   10337 : =$C0                 panCentre set $C0
(1)  333/   10337 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  333/   10337 : E0C0                        dc.b $E0,panCenter+$00
(1)  334/   10339 : (MACRO)              	smpsReturn
(1)  334/   10339 : =>TRUE                       if SonicDriverVer>=3
(1)  334/   10339 : F9                                  dc.b    $F9
(1)  334/   1033A : =>FALSE                      else
(1)  334/   1033A :                                     dc.b    $E3
(1)  334/   1033A : [334]                        endif
(1)  335/   1033A :                     
(1)  336/   1033A :                     Electoria_Call13:
(1)  337/   1033A : 800C B6B8 0680 06   	dc.b	nRst, $0C, nF4, nG4, $06, nRst, $06
(1)  338/   10341 : (MACRO)              	smpsFMAlterVol      $0A
(1)  338/   10341 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  338/   10341 :                                     dc.b    $E5,$0A,
(1)  338/   10341 : =>TRUE                       else
(1)  338/   10341 : E60A                                dc.b    $E6,$0A
(1)  338/   10343 : [338]                        endif
(1)  339/   10343 : (MACRO)              	smpsPan             panRight, $00
(1)  339/   10343 : =$0                  panNone set $00
(1)  339/   10343 : =$40                 panRight set $40
(1)  339/   10343 : =$80                 panLeft set $80
(1)  339/   10343 : =$C0                 panCentre set $C0
(1)  339/   10343 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  339/   10343 : E040                        dc.b $E0,panRight+$00
(1)  340/   10345 : B880                	dc.b	nG4, nRst
(1)  341/   10347 : (MACRO)              	smpsFMAlterVol      $F6
(1)  341/   10347 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  341/   10347 :                                     dc.b    $E5,$F6,
(1)  341/   10347 : =>TRUE                       else
(1)  341/   10347 : E6F6                                dc.b    $E6,$F6
(1)  341/   10349 : [341]                        endif
(1)  342/   10349 : (MACRO)              	smpsPan             panCenter, $00
(1)  342/   10349 : =$0                  panNone set $00
(1)  342/   10349 : =$40                 panRight set $40
(1)  342/   10349 : =$80                 panLeft set $80
(1)  342/   10349 : =$C0                 panCentre set $C0
(1)  342/   10349 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  342/   10349 : E0C0                        dc.b $E0,panCenter+$00
(1)  343/   1034B : BC12 B806           	dc.b	nB4, $12, nG4, $06
(1)  344/   1034F : (MACRO)              	smpsFMAlterVol      $0A
(1)  344/   1034F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  344/   1034F :                                     dc.b    $E5,$0A,
(1)  344/   1034F : =>TRUE                       else
(1)  344/   1034F : E60A                                dc.b    $E6,$0A
(1)  344/   10351 : [344]                        endif
(1)  345/   10351 : (MACRO)              	smpsPan             panRight, $00
(1)  345/   10351 : =$0                  panNone set $00
(1)  345/   10351 : =$40                 panRight set $40
(1)  345/   10351 : =$80                 panLeft set $80
(1)  345/   10351 : =$C0                 panCentre set $C0
(1)  345/   10351 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  345/   10351 : E040                        dc.b $E0,panRight+$00
(1)  346/   10353 : 0680                	dc.b	$06, nRst
(1)  347/   10355 : (MACRO)              	smpsFMAlterVol      $F6
(1)  347/   10355 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  347/   10355 :                                     dc.b    $E5,$F6,
(1)  347/   10355 : =>TRUE                       else
(1)  347/   10355 : E6F6                                dc.b    $E6,$F6
(1)  347/   10357 : [347]                        endif
(1)  348/   10357 : (MACRO)              	smpsPan             panCenter, $00
(1)  348/   10357 : =$0                  panNone set $00
(1)  348/   10357 : =$40                 panRight set $40
(1)  348/   10357 : =$80                 panLeft set $80
(1)  348/   10357 : =$C0                 panCentre set $C0
(1)  348/   10357 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  348/   10357 : E0C0                        dc.b $E0,panCenter+$00
(1)  349/   10359 : BD0C E70C BC06      	dc.b	nC5, $0C, smpsNoAttack, $0C, nB4, $06
(1)  350/   1035F : (MACRO)              	smpsFMAlterVol      $0A
(1)  350/   1035F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  350/   1035F :                                     dc.b    $E5,$0A,
(1)  350/   1035F : =>TRUE                       else
(1)  350/   1035F : E60A                                dc.b    $E6,$0A
(1)  350/   10361 : [350]                        endif
(1)  351/   10361 : (MACRO)              	smpsPan             panRight, $00
(1)  351/   10361 : =$0                  panNone set $00
(1)  351/   10361 : =$40                 panRight set $40
(1)  351/   10361 : =$80                 panLeft set $80
(1)  351/   10361 : =$C0                 panCentre set $C0
(1)  351/   10361 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  351/   10361 : E040                        dc.b $E0,panRight+$00
(1)  352/   10363 : BC                  	dc.b	nB4
(1)  353/   10364 : (MACRO)              	smpsFMAlterVol      $F6
(1)  353/   10364 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  353/   10364 :                                     dc.b    $E5,$F6,
(1)  353/   10364 : =>TRUE                       else
(1)  353/   10364 : E6F6                                dc.b    $E6,$F6
(1)  353/   10366 : [353]                        endif
(1)  354/   10366 : (MACRO)              	smpsPan             panCenter, $00
(1)  354/   10366 : =$0                  panNone set $00
(1)  354/   10366 : =$40                 panRight set $40
(1)  354/   10366 : =$80                 panLeft set $80
(1)  354/   10366 : =$C0                 panCentre set $C0
(1)  354/   10366 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  354/   10366 : E0C0                        dc.b $E0,panCenter+$00
(1)  355/   10368 : BDBF                	dc.b	nC5, nD5
(1)  356/   1036A : (MACRO)              	smpsFMAlterVol      $0A
(1)  356/   1036A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  356/   1036A :                                     dc.b    $E5,$0A,
(1)  356/   1036A : =>TRUE                       else
(1)  356/   1036A : E60A                                dc.b    $E6,$0A
(1)  356/   1036C : [356]                        endif
(1)  357/   1036C : (MACRO)              	smpsPan             panRight, $00
(1)  357/   1036C : =$0                  panNone set $00
(1)  357/   1036C : =$40                 panRight set $40
(1)  357/   1036C : =$80                 panLeft set $80
(1)  357/   1036C : =$C0                 panCentre set $C0
(1)  357/   1036C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  357/   1036C : E040                        dc.b $E0,panRight+$00
(1)  358/   1036E : BF                  	dc.b	nD5
(1)  359/   1036F : (MACRO)              	smpsFMAlterVol      $F6
(1)  359/   1036F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  359/   1036F :                                     dc.b    $E5,$F6,
(1)  359/   1036F : =>TRUE                       else
(1)  359/   1036F : E6F6                                dc.b    $E6,$F6
(1)  359/   10371 : [359]                        endif
(1)  360/   10371 : (MACRO)              	smpsPan             panCenter, $00
(1)  360/   10371 : =$0                  panNone set $00
(1)  360/   10371 : =$40                 panRight set $40
(1)  360/   10371 : =$80                 panLeft set $80
(1)  360/   10371 : =$C0                 panCentre set $C0
(1)  360/   10371 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  360/   10371 : E0C0                        dc.b $E0,panCenter+$00
(1)  361/   10373 : BD0C                	dc.b	nC5, $0C
(1)  362/   10375 : (MACRO)              	smpsFMAlterVol      $0A
(1)  362/   10375 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  362/   10375 :                                     dc.b    $E5,$0A,
(1)  362/   10375 : =>TRUE                       else
(1)  362/   10375 : E60A                                dc.b    $E6,$0A
(1)  362/   10377 : [362]                        endif
(1)  363/   10377 : (MACRO)              	smpsPan             panRight, $00
(1)  363/   10377 : =$0                  panNone set $00
(1)  363/   10377 : =$40                 panRight set $40
(1)  363/   10377 : =$80                 panLeft set $80
(1)  363/   10377 : =$C0                 panCentre set $C0
(1)  363/   10377 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  363/   10377 : E040                        dc.b $E0,panRight+$00
(1)  364/   10379 : 06                  	dc.b	$06
(1)  365/   1037A : (MACRO)              	smpsFMAlterVol      $F6
(1)  365/   1037A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  365/   1037A :                                     dc.b    $E5,$F6,
(1)  365/   1037A : =>TRUE                       else
(1)  365/   1037A : E6F6                                dc.b    $E6,$F6
(1)  365/   1037C : [365]                        endif
(1)  366/   1037C : (MACRO)              	smpsPan             panCenter, $00
(1)  366/   1037C : =$0                  panNone set $00
(1)  366/   1037C : =$40                 panRight set $40
(1)  366/   1037C : =$80                 panLeft set $80
(1)  366/   1037C : =$C0                 panCentre set $C0
(1)  366/   1037C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  366/   1037C : E0C0                        dc.b $E0,panCenter+$00
(1)  367/   1037E : BC0C                	dc.b	nB4, $0C
(1)  368/   10380 : (MACRO)              	smpsFMAlterVol      $0A
(1)  368/   10380 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  368/   10380 :                                     dc.b    $E5,$0A,
(1)  368/   10380 : =>TRUE                       else
(1)  368/   10380 : E60A                                dc.b    $E6,$0A
(1)  368/   10382 : [368]                        endif
(1)  369/   10382 : (MACRO)              	smpsPan             panRight, $00
(1)  369/   10382 : =$0                  panNone set $00
(1)  369/   10382 : =$40                 panRight set $40
(1)  369/   10382 : =$80                 panLeft set $80
(1)  369/   10382 : =$C0                 panCentre set $C0
(1)  369/   10382 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  369/   10382 : E040                        dc.b $E0,panRight+$00
(1)  370/   10384 : 06                  	dc.b	$06
(1)  371/   10385 : (MACRO)              	smpsFMAlterVol      $F6
(1)  371/   10385 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  371/   10385 :                                     dc.b    $E5,$F6,
(1)  371/   10385 : =>TRUE                       else
(1)  371/   10385 : E6F6                                dc.b    $E6,$F6
(1)  371/   10387 : [371]                        endif
(1)  372/   10387 : (MACRO)              	smpsPan             panCenter, $00
(1)  372/   10387 : =$0                  panNone set $00
(1)  372/   10387 : =$40                 panRight set $40
(1)  372/   10387 : =$80                 panLeft set $80
(1)  372/   10387 : =$C0                 panCentre set $C0
(1)  372/   10387 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  372/   10387 : E0C0                        dc.b $E0,panCenter+$00
(1)  373/   10389 : BA12                	dc.b	nA4, $12
(1)  374/   1038B : (MACRO)              	smpsFMAlterVol      $0A
(1)  374/   1038B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  374/   1038B :                                     dc.b    $E5,$0A,
(1)  374/   1038B : =>TRUE                       else
(1)  374/   1038B : E60A                                dc.b    $E6,$0A
(1)  374/   1038D : [374]                        endif
(1)  375/   1038D : (MACRO)              	smpsPan             panRight, $00
(1)  375/   1038D : =$0                  panNone set $00
(1)  375/   1038D : =$40                 panRight set $40
(1)  375/   1038D : =$80                 panLeft set $80
(1)  375/   1038D : =$C0                 panCentre set $C0
(1)  375/   1038D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  375/   1038D : E040                        dc.b $E0,panRight+$00
(1)  376/   1038F : 0C                  	dc.b	$0C
(1)  377/   10390 : (MACRO)              	smpsFMAlterVol      $F6
(1)  377/   10390 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  377/   10390 :                                     dc.b    $E5,$F6,
(1)  377/   10390 : =>TRUE                       else
(1)  377/   10390 : E6F6                                dc.b    $E6,$F6
(1)  377/   10392 : [377]                        endif
(1)  378/   10392 : (MACRO)              	smpsPan             panCenter, $00
(1)  378/   10392 : =$0                  panNone set $00
(1)  378/   10392 : =$40                 panRight set $40
(1)  378/   10392 : =$80                 panLeft set $80
(1)  378/   10392 : =$C0                 panCentre set $C0
(1)  378/   10392 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  378/   10392 : E0C0                        dc.b $E0,panCenter+$00
(1)  379/   10394 : B6B8 0680 06        	dc.b	nF4, nG4, $06, nRst, $06
(1)  380/   10399 : (MACRO)              	smpsFMAlterVol      $0A
(1)  380/   10399 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  380/   10399 :                                     dc.b    $E5,$0A,
(1)  380/   10399 : =>TRUE                       else
(1)  380/   10399 : E60A                                dc.b    $E6,$0A
(1)  380/   1039B : [380]                        endif
(1)  381/   1039B : (MACRO)              	smpsPan             panRight, $00
(1)  381/   1039B : =$0                  panNone set $00
(1)  381/   1039B : =$40                 panRight set $40
(1)  381/   1039B : =$80                 panLeft set $80
(1)  381/   1039B : =$C0                 panCentre set $C0
(1)  381/   1039B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  381/   1039B : E040                        dc.b $E0,panRight+$00
(1)  382/   1039D : B880                	dc.b	nG4, nRst
(1)  383/   1039F : (MACRO)              	smpsFMAlterVol      $F6
(1)  383/   1039F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  383/   1039F :                                     dc.b    $E5,$F6,
(1)  383/   1039F : =>TRUE                       else
(1)  383/   1039F : E6F6                                dc.b    $E6,$F6
(1)  383/   103A1 : [383]                        endif
(1)  384/   103A1 : (MACRO)              	smpsPan             panCenter, $00
(1)  384/   103A1 : =$0                  panNone set $00
(1)  384/   103A1 : =$40                 panRight set $40
(1)  384/   103A1 : =$80                 panLeft set $80
(1)  384/   103A1 : =$C0                 panCentre set $C0
(1)  384/   103A1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  384/   103A1 : E0C0                        dc.b $E0,panCenter+$00
(1)  385/   103A3 : BC12 B806           	dc.b	nB4, $12, nG4, $06
(1)  386/   103A7 : (MACRO)              	smpsFMAlterVol      $0A
(1)  386/   103A7 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  386/   103A7 :                                     dc.b    $E5,$0A,
(1)  386/   103A7 : =>TRUE                       else
(1)  386/   103A7 : E60A                                dc.b    $E6,$0A
(1)  386/   103A9 : [386]                        endif
(1)  387/   103A9 : (MACRO)              	smpsPan             panRight, $00
(1)  387/   103A9 : =$0                  panNone set $00
(1)  387/   103A9 : =$40                 panRight set $40
(1)  387/   103A9 : =$80                 panLeft set $80
(1)  387/   103A9 : =$C0                 panCentre set $C0
(1)  387/   103A9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  387/   103A9 : E040                        dc.b $E0,panRight+$00
(1)  388/   103AB : 0C                  	dc.b	$0C
(1)  389/   103AC : (MACRO)              	smpsFMAlterVol      $F6
(1)  389/   103AC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  389/   103AC :                                     dc.b    $E5,$F6,
(1)  389/   103AC : =>TRUE                       else
(1)  389/   103AC : E6F6                                dc.b    $E6,$F6
(1)  389/   103AE : [389]                        endif
(1)  390/   103AE : (MACRO)              	smpsPan             panCenter, $00
(1)  390/   103AE : =$0                  panNone set $00
(1)  390/   103AE : =$40                 panRight set $40
(1)  390/   103AE : =$80                 panLeft set $80
(1)  390/   103AE : =$C0                 panCentre set $C0
(1)  390/   103AE : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  390/   103AE : E0C0                        dc.b $E0,panCenter+$00
(1)  391/   103B0 : B6E7 06             	dc.b	nF4, smpsNoAttack, $06
(1)  392/   103B3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  392/   103B3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  392/   103B3 :                                     dc.b    $E5,$0A,
(1)  392/   103B3 : =>TRUE                       else
(1)  392/   103B3 : E60A                                dc.b    $E6,$0A
(1)  392/   103B5 : [392]                        endif
(1)  393/   103B5 : (MACRO)              	smpsPan             panRight, $00
(1)  393/   103B5 : =$0                  panNone set $00
(1)  393/   103B5 : =$40                 panRight set $40
(1)  393/   103B5 : =$80                 panLeft set $80
(1)  393/   103B5 : =$C0                 panCentre set $C0
(1)  393/   103B5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  393/   103B5 : E040                        dc.b $E0,panRight+$00
(1)  394/   103B7 : B6                  	dc.b	nF4
(1)  395/   103B8 : (MACRO)              	smpsFMAlterVol      $F6
(1)  395/   103B8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  395/   103B8 :                                     dc.b    $E5,$F6,
(1)  395/   103B8 : =>TRUE                       else
(1)  395/   103B8 : E6F6                                dc.b    $E6,$F6
(1)  395/   103BA : [395]                        endif
(1)  396/   103BA : (MACRO)              	smpsPan             panCenter, $00
(1)  396/   103BA : =$0                  panNone set $00
(1)  396/   103BA : =$40                 panRight set $40
(1)  396/   103BA : =$80                 panLeft set $80
(1)  396/   103BA : =$C0                 panCentre set $C0
(1)  396/   103BA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  396/   103BA : E0C0                        dc.b $E0,panCenter+$00
(1)  397/   103BC : B8                  	dc.b	nG4
(1)  398/   103BD : (MACRO)              	smpsFMAlterVol      $0A
(1)  398/   103BD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  398/   103BD :                                     dc.b    $E5,$0A,
(1)  398/   103BD : =>TRUE                       else
(1)  398/   103BD : E60A                                dc.b    $E6,$0A
(1)  398/   103BF : [398]                        endif
(1)  399/   103BF : (MACRO)              	smpsPan             panRight, $00
(1)  399/   103BF : =$0                  panNone set $00
(1)  399/   103BF : =$40                 panRight set $40
(1)  399/   103BF : =$80                 panLeft set $80
(1)  399/   103BF : =$C0                 panCentre set $C0
(1)  399/   103BF : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  399/   103BF : E040                        dc.b $E0,panRight+$00
(1)  400/   103C1 : B8                  	dc.b	nG4
(1)  401/   103C2 : (MACRO)              	smpsFMAlterVol      $F6
(1)  401/   103C2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  401/   103C2 :                                     dc.b    $E5,$F6,
(1)  401/   103C2 : =>TRUE                       else
(1)  401/   103C2 : E6F6                                dc.b    $E6,$F6
(1)  401/   103C4 : [401]                        endif
(1)  402/   103C4 : (MACRO)              	smpsPan             panCenter, $00
(1)  402/   103C4 : =$0                  panNone set $00
(1)  402/   103C4 : =$40                 panRight set $40
(1)  402/   103C4 : =$80                 panLeft set $80
(1)  402/   103C4 : =$C0                 panCentre set $C0
(1)  402/   103C4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  402/   103C4 : E0C0                        dc.b $E0,panCenter+$00
(1)  403/   103C6 : B6B5                	dc.b	nF4, nE4
(1)  404/   103C8 : (MACRO)              	smpsFMAlterVol      $0A
(1)  404/   103C8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  404/   103C8 :                                     dc.b    $E5,$0A,
(1)  404/   103C8 : =>TRUE                       else
(1)  404/   103C8 : E60A                                dc.b    $E6,$0A
(1)  404/   103CA : [404]                        endif
(1)  405/   103CA : (MACRO)              	smpsPan             panRight, $00
(1)  405/   103CA : =$0                  panNone set $00
(1)  405/   103CA : =$40                 panRight set $40
(1)  405/   103CA : =$80                 panLeft set $80
(1)  405/   103CA : =$C0                 panCentre set $C0
(1)  405/   103CA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  405/   103CA : E040                        dc.b $E0,panRight+$00
(1)  406/   103CC : B5                  	dc.b	nE4
(1)  407/   103CD : (MACRO)              	smpsFMAlterVol      $F6
(1)  407/   103CD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  407/   103CD :                                     dc.b    $E5,$F6,
(1)  407/   103CD : =>TRUE                       else
(1)  407/   103CD : E6F6                                dc.b    $E6,$F6
(1)  407/   103CF : [407]                        endif
(1)  408/   103CF : (MACRO)              	smpsPan             panCenter, $00
(1)  408/   103CF : =$0                  panNone set $00
(1)  408/   103CF : =$40                 panRight set $40
(1)  408/   103CF : =$80                 panLeft set $80
(1)  408/   103CF : =$C0                 panCentre set $C0
(1)  408/   103CF : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  408/   103CF : E0C0                        dc.b $E0,panCenter+$00
(1)  409/   103D1 : B31E                	dc.b	nD4, $1E
(1)  410/   103D3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  410/   103D3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  410/   103D3 :                                     dc.b    $E5,$0A,
(1)  410/   103D3 : =>TRUE                       else
(1)  410/   103D3 : E60A                                dc.b    $E6,$0A
(1)  410/   103D5 : [410]                        endif
(1)  411/   103D5 : (MACRO)              	smpsPan             panRight, $00
(1)  411/   103D5 : =$0                  panNone set $00
(1)  411/   103D5 : =$40                 panRight set $40
(1)  411/   103D5 : =$80                 panLeft set $80
(1)  411/   103D5 : =$C0                 panCentre set $C0
(1)  411/   103D5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  411/   103D5 : E040                        dc.b $E0,panRight+$00
(1)  412/   103D7 : 0C                  	dc.b	$0C
(1)  413/   103D8 : (MACRO)              	smpsFMAlterVol      $F6
(1)  413/   103D8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  413/   103D8 :                                     dc.b    $E5,$F6,
(1)  413/   103D8 : =>TRUE                       else
(1)  413/   103D8 : E6F6                                dc.b    $E6,$F6
(1)  413/   103DA : [413]                        endif
(1)  414/   103DA : (MACRO)              	smpsPan             panCenter, $00
(1)  414/   103DA : =$0                  panNone set $00
(1)  414/   103DA : =$40                 panRight set $40
(1)  414/   103DA : =$80                 panLeft set $80
(1)  414/   103DA : =$C0                 panCentre set $C0
(1)  414/   103DA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  414/   103DA : E0C0                        dc.b $E0,panCenter+$00
(1)  415/   103DC : (MACRO)              	smpsReturn
(1)  415/   103DC : =>TRUE                       if SonicDriverVer>=3
(1)  415/   103DC : F9                                  dc.b    $F9
(1)  415/   103DD : =>FALSE                      else
(1)  415/   103DD :                                     dc.b    $E3
(1)  415/   103DD : [415]                        endif
(1)  416/   103DD :                     
(1)  417/   103DD :                     ; FM3 Data
(1)  418/   103DD :                     Electoria_FM3:
(1)  419/   103DD : (MACRO)              	smpsSetvoice        $03
(1)  419/   103DD :  (MACRO-2)                   smpsFMvoice $03
(1)  419/   103DD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  419/   103DD :                                     dc.b    $EF,$03|$80,+$81
(1)  419/   103DD : =>TRUE                       else
(1)  419/   103DD : EF03                                dc.b    $EF,$03
(1)  419/   103DF : [419]                        endif
(1)  420/   103DF : 8060                	dc.b	nRst, $60
(1)  421/   103E1 : (MACRO)              	smpsChangeTransposition $FA
(1)  421/   103E1 : =>TRUE                       if SonicDriverVer>=3
(1)  421/   103E1 : FBFA                                dc.b    $FB,$FA
(1)  421/   103E3 : =>FALSE                      else
(1)  421/   103E3 :                                     dc.b    $E9,$FA
(1)  421/   103E3 : [421]                        endif
(1)  422/   103E3 :                     
(1)  423/   103E3 :                     Electoria_Loop11:
(1)  424/   103E3 : (MACRO)              	smpsCall            Electoria_Call04
(1)  424/   103E3 : F8                          dc.b    $F8
(1)  424/   103E4 : =>TRUE                       if SonicDriverVer<>1
(1)  424/   103E4 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  424/   103E6 : =>FALSE                      else
(1)  424/   103E6 :                                     dc.w    Electoria_Call04-*-1
(1)  424/   103E6 : [424]                        endif
(1)  425/   103E6 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop11
(1)  425/   103E6 : F7                          dc.b    $F7
(1)  425/   103E7 : 0008                        dc.b    $00,$08
(1)  425/   103E9 : =>TRUE                       if SonicDriverVer<>1
(1)  425/   103E9 : E383                                dc.w    z80_ptr(Electoria_Loop11)
(1)  425/   103EB : =>FALSE                      else
(1)  425/   103EB :                                     dc.w    Electoria_Loop11-*-1
(1)  425/   103EB : [425]                        endif
(1)  426/   103EB : (MACRO)              	smpsChangeTransposition $06
(1)  426/   103EB : =>TRUE                       if SonicDriverVer>=3
(1)  426/   103EB : FB06                                dc.b    $FB,$06
(1)  426/   103ED : =>FALSE                      else
(1)  426/   103ED :                                     dc.b    $E9,$06
(1)  426/   103ED : [426]                        endif
(1)  427/   103ED : (MACRO)              	smpsFMAlterVol      $FC
(1)  427/   103ED : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  427/   103ED :                                     dc.b    $E5,$FC,
(1)  427/   103ED : =>TRUE                       else
(1)  427/   103ED : E6FC                                dc.b    $E6,$FC
(1)  427/   103EF : [427]                        endif
(1)  428/   103EF :                     
(1)  429/   103EF :                     Electoria_Jump00:
(1)  430/   103EF : (MACRO)              	smpsSetvoice        $01
(1)  430/   103EF :  (MACRO-2)                   smpsFMvoice $01
(1)  430/   103EF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  430/   103EF :                                     dc.b    $EF,$01|$80,+$81
(1)  430/   103EF : =>TRUE                       else
(1)  430/   103EF : EF01                                dc.b    $EF,$01
(1)  430/   103F1 : [430]                        endif
(1)  431/   103F1 : (MACRO)              	smpsPan             panLeft, $00
(1)  431/   103F1 : =$0                  panNone set $00
(1)  431/   103F1 : =$40                 panRight set $40
(1)  431/   103F1 : =$80                 panLeft set $80
(1)  431/   103F1 : =$C0                 panCentre set $C0
(1)  431/   103F1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  431/   103F1 : E080                        dc.b $E0,panLeft+$00
(1)  432/   103F3 : (MACRO)              	smpsModSet          $01, $01, $02, $03
(1)  432/   103F3 : F0                          dc.b    $F0
(1)  432/   103F4 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  432/   103F4 :                                     dc.b    $01+1,$01,$02,(($03+1) * $01) & $FF
(1)  432/   103F4 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  432/   103F4 :                                     dc.b    $01-1,$01,$02,conv0To256($03)/conv0To256($01)-1
(1)  432/   103F4 : =>TRUE                       else
(1)  432/   103F4 : 0101 0203                           dc.b    $01,$01,$02,$03
(1)  432/   103F8 : [432]                        endif
(1)  432/   103F8 :                             ;dc.b   $01,$02,$03
(1)  433/   103F8 : (MACRO)              	smpsChangeTransposition $0C
(1)  433/   103F8 : =>TRUE                       if SonicDriverVer>=3
(1)  433/   103F8 : FB0C                                dc.b    $FB,$0C
(1)  433/   103FA : =>FALSE                      else
(1)  433/   103FA :                                     dc.b    $E9,$0C
(1)  433/   103FA : [433]                        endif
(1)  434/   103FA : 8006 AF12 AC06      	dc.b	nRst, $06, nBb3, $12, nG3, $06, nRst, $3C, nF3, $06, nG3, nC4
            10400 : 803C AA06 ACB1    
(1)  435/   10406 : 80B1 80B1 0CB3      	dc.b	nRst, nC4, nRst, nC4, $0C, nD4, $06, nG3, smpsNoAttack, $0C, nF3, nG3
            1040C : 06AC E70C AAAC    
(1)  436/   10412 : 0680 AC0C 805A      	dc.b	$06, nRst, nG3, $0C, nRst, $5A
(1)  437/   10418 : (MACRO)              	smpsSetvoice        $02
(1)  437/   10418 :  (MACRO-2)                   smpsFMvoice $02
(1)  437/   10418 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  437/   10418 :                                     dc.b    $EF,$02|$80,+$81
(1)  437/   10418 : =>TRUE                       else
(1)  437/   10418 : EF02                                dc.b    $EF,$02
(1)  437/   1041A : [437]                        endif
(1)  438/   1041A : (MACRO)              	smpsFMAlterVol      $03
(1)  438/   1041A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  438/   1041A :                                     dc.b    $E5,$03,
(1)  438/   1041A : =>TRUE                       else
(1)  438/   1041A : E603                                dc.b    $E6,$03
(1)  438/   1041C : [438]                        endif
(1)  439/   1041C : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)  439/   1041C : F0                          dc.b    $F0
(1)  439/   1041D : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  439/   1041D :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)  439/   1041D : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  439/   1041D :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)  439/   1041D : =>TRUE                       else
(1)  439/   1041D : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  439/   10421 : [439]                        endif
(1)  439/   10421 :                             ;dc.b   $00,$00,$00
(1)  440/   10421 : (MACRO)              	smpsPan             panRight, $00
(1)  440/   10421 : =$0                  panNone set $00
(1)  440/   10421 : =$40                 panRight set $40
(1)  440/   10421 : =$80                 panLeft set $80
(1)  440/   10421 : =$C0                 panCentre set $C0
(1)  440/   10421 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  440/   10421 : E040                        dc.b $E0,panRight+$00
(1)  441/   10423 : (MACRO)              	smpsChangeTransposition $E8
(1)  441/   10423 : =>TRUE                       if SonicDriverVer>=3
(1)  441/   10423 : FBE8                                dc.b    $FB,$E8
(1)  441/   10425 : =>FALSE                      else
(1)  441/   10425 :                                     dc.b    $E9,$E8
(1)  441/   10425 : [441]                        endif
(1)  442/   10425 : (MACRO)              	smpsCall            Electoria_Call06
(1)  442/   10425 : F8                          dc.b    $F8
(1)  442/   10426 : =>TRUE                       if SonicDriverVer<>1
(1)  442/   10426 : AE81                                dc.w    z80_ptr(Electoria_Call06)
(1)  442/   10428 : =>FALSE                      else
(1)  442/   10428 :                                     dc.w    Electoria_Call06-*-1
(1)  442/   10428 : [442]                        endif
(1)  443/   10428 : (MACRO)              	smpsModSet          $01, $01, $01, $05
(1)  443/   10428 : F0                          dc.b    $F0
(1)  443/   10429 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  443/   10429 :                                     dc.b    $01+1,$01,$01,(($05+1) * $01) & $FF
(1)  443/   10429 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  443/   10429 :                                     dc.b    $01-1,$01,$01,conv0To256($05)/conv0To256($01)-1
(1)  443/   10429 : =>TRUE                       else
(1)  443/   10429 : 0101 0105                           dc.b    $01,$01,$01,$05
(1)  443/   1042D : [443]                        endif
(1)  443/   1042D :                             ;dc.b   $01,$01,$05
(1)  444/   1042D : (MACRO)              	smpsPan             panLeft, $00
(1)  444/   1042D : =$0                  panNone set $00
(1)  444/   1042D : =$40                 panRight set $40
(1)  444/   1042D : =$80                 panLeft set $80
(1)  444/   1042D : =$C0                 panCentre set $C0
(1)  444/   1042D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  444/   1042D : E080                        dc.b $E0,panLeft+$00
(1)  445/   1042F : (MACRO)              	smpsChangeTransposition $18
(1)  445/   1042F : =>TRUE                       if SonicDriverVer>=3
(1)  445/   1042F : FB18                                dc.b    $FB,$18
(1)  445/   10431 : =>FALSE                      else
(1)  445/   10431 :                                     dc.b    $E9,$18
(1)  445/   10431 : [445]                        endif
(1)  446/   10431 : (MACRO)              	smpsSetvoice        $01
(1)  446/   10431 :  (MACRO-2)                   smpsFMvoice $01
(1)  446/   10431 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  446/   10431 :                                     dc.b    $EF,$01|$80,+$81
(1)  446/   10431 : =>TRUE                       else
(1)  446/   10431 : EF01                                dc.b    $EF,$01
(1)  446/   10433 : [446]                        endif
(1)  447/   10433 : (MACRO)              	smpsFMAlterVol      $FD
(1)  447/   10433 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  447/   10433 :                                     dc.b    $E5,$FD,
(1)  447/   10433 : =>TRUE                       else
(1)  447/   10433 : E6FD                                dc.b    $E6,$FD
(1)  447/   10435 : [447]                        endif
(1)  448/   10435 : 8006 AF0C E70C      	dc.b	nRst, $06, nBb3, $0C, smpsNoAttack, $0C, nG3, $06, nRst, nRst, $3C, nF4
            1043B : AC06 8080 3CB6    
(1)  449/   10441 : 0CE7 0680 B580      	dc.b	$0C, smpsNoAttack, $06, nRst, nE4, nRst, nD4, nE4, nRst, nD4, smpsNoAttack, nD4
            10447 : B3B5 80B3 E7B3    
(1)  450/   1044D : 80B1 80AF B180      	dc.b	nRst, nC4, nRst, nBb3, nC4, nRst, nB3, smpsNoAttack, $5A
            10453 : B0E7 5A          
(1)  451/   10456 : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)  451/   10456 : F0                          dc.b    $F0
(1)  451/   10457 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  451/   10457 :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)  451/   10457 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  451/   10457 :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)  451/   10457 : =>TRUE                       else
(1)  451/   10457 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  451/   1045B : [451]                        endif
(1)  451/   1045B :                             ;dc.b   $00,$00,$00
(1)  452/   1045B : (MACRO)              	smpsPan             panRight, $00
(1)  452/   1045B : =$0                  panNone set $00
(1)  452/   1045B : =$40                 panRight set $40
(1)  452/   1045B : =$80                 panLeft set $80
(1)  452/   1045B : =$C0                 panCentre set $C0
(1)  452/   1045B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  452/   1045B : E040                        dc.b $E0,panRight+$00
(1)  453/   1045D : (MACRO)              	smpsChangeTransposition $E8
(1)  453/   1045D : =>TRUE                       if SonicDriverVer>=3
(1)  453/   1045D : FBE8                                dc.b    $FB,$E8
(1)  453/   1045F : =>FALSE                      else
(1)  453/   1045F :                                     dc.b    $E9,$E8
(1)  453/   1045F : [453]                        endif
(1)  454/   1045F : (MACRO)              	smpsSetvoice        $02
(1)  454/   1045F :  (MACRO-2)                   smpsFMvoice $02
(1)  454/   1045F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  454/   1045F :                                     dc.b    $EF,$02|$80,+$81
(1)  454/   1045F : =>TRUE                       else
(1)  454/   1045F : EF02                                dc.b    $EF,$02
(1)  454/   10461 : [454]                        endif
(1)  455/   10461 : (MACRO)              	smpsFMAlterVol      $03
(1)  455/   10461 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  455/   10461 :                                     dc.b    $E5,$03,
(1)  455/   10461 : =>TRUE                       else
(1)  455/   10461 : E603                                dc.b    $E6,$03
(1)  455/   10463 : [455]                        endif
(1)  456/   10463 : (MACRO)              	smpsCall            Electoria_Call07
(1)  456/   10463 : F8                          dc.b    $F8
(1)  456/   10464 : =>TRUE                       if SonicDriverVer<>1
(1)  456/   10464 : C381                                dc.w    z80_ptr(Electoria_Call07)
(1)  456/   10466 : =>FALSE                      else
(1)  456/   10466 :                                     dc.w    Electoria_Call07-*-1
(1)  456/   10466 : [456]                        endif
(1)  457/   10466 : (MACRO)              	smpsPan             panLeft, $00
(1)  457/   10466 : =$0                  panNone set $00
(1)  457/   10466 : =$40                 panRight set $40
(1)  457/   10466 : =$80                 panLeft set $80
(1)  457/   10466 : =$C0                 panCentre set $C0
(1)  457/   10466 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  457/   10466 : E080                        dc.b $E0,panLeft+$00
(1)  458/   10468 : (MACRO)              	smpsSetvoice        $01
(1)  458/   10468 :  (MACRO-2)                   smpsFMvoice $01
(1)  458/   10468 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  458/   10468 :                                     dc.b    $EF,$01|$80,+$81
(1)  458/   10468 : =>TRUE                       else
(1)  458/   10468 : EF01                                dc.b    $EF,$01
(1)  458/   1046A : [458]                        endif
(1)  459/   1046A : (MACRO)              	smpsFMAlterVol      $FD
(1)  459/   1046A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  459/   1046A :                                     dc.b    $E5,$FD,
(1)  459/   1046A : =>TRUE                       else
(1)  459/   1046A : E6FD                                dc.b    $E6,$FD
(1)  459/   1046C : [459]                        endif
(1)  460/   1046C : (MACRO)              	smpsChangeTransposition $0C
(1)  460/   1046C : =>TRUE                       if SonicDriverVer>=3
(1)  460/   1046C : FB0C                                dc.b    $FB,$0C
(1)  460/   1046E : =>FALSE                      else
(1)  460/   1046E :                                     dc.b    $E9,$0C
(1)  460/   1046E : [460]                        endif
(1)  461/   1046E : (MACRO)              	smpsModSet          $01, $01, $02, $03
(1)  461/   1046E : F0                          dc.b    $F0
(1)  461/   1046F : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  461/   1046F :                                     dc.b    $01+1,$01,$02,(($03+1) * $01) & $FF
(1)  461/   1046F : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  461/   1046F :                                     dc.b    $01-1,$01,$02,conv0To256($03)/conv0To256($01)-1
(1)  461/   1046F : =>TRUE                       else
(1)  461/   1046F : 0101 0203                           dc.b    $01,$01,$02,$03
(1)  461/   10473 : [461]                        endif
(1)  461/   10473 :                             ;dc.b   $01,$02,$03
(1)  462/   10473 : 8006                	dc.b	nRst, $06
(1)  463/   10475 : (MACRO)              	smpsCall            Electoria_Call08
(1)  463/   10475 : F8                          dc.b    $F8
(1)  463/   10476 : =>TRUE                       if SonicDriverVer<>1
(1)  463/   10476 : EE81                                dc.w    z80_ptr(Electoria_Call08)
(1)  463/   10478 : =>FALSE                      else
(1)  463/   10478 :                                     dc.w    Electoria_Call08-*-1
(1)  463/   10478 : [463]                        endif
(1)  464/   10478 : 802A                	dc.b	nRst, $2A
(1)  465/   1047A : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)  465/   1047A : F0                          dc.b    $F0
(1)  465/   1047B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  465/   1047B :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)  465/   1047B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  465/   1047B :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)  465/   1047B : =>TRUE                       else
(1)  465/   1047B : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  465/   1047F : [465]                        endif
(1)  465/   1047F :                             ;dc.b   $00,$00,$00
(1)  466/   1047F : (MACRO)              	smpsChangeTransposition $F4
(1)  466/   1047F : =>TRUE                       if SonicDriverVer>=3
(1)  466/   1047F : FBF4                                dc.b    $FB,$F4
(1)  466/   10481 : =>FALSE                      else
(1)  466/   10481 :                                     dc.b    $E9,$F4
(1)  466/   10481 : [466]                        endif
(1)  467/   10481 : (MACRO)              	smpsSetvoice        $02
(1)  467/   10481 :  (MACRO-2)                   smpsFMvoice $02
(1)  467/   10481 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  467/   10481 :                                     dc.b    $EF,$02|$80,+$81
(1)  467/   10481 : =>TRUE                       else
(1)  467/   10481 : EF02                                dc.b    $EF,$02
(1)  467/   10483 : [467]                        endif
(1)  468/   10483 : (MACRO)              	smpsFMAlterVol      $04
(1)  468/   10483 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  468/   10483 :                                     dc.b    $E5,$04,
(1)  468/   10483 : =>TRUE                       else
(1)  468/   10483 : E604                                dc.b    $E6,$04
(1)  468/   10485 : [468]                        endif
(1)  469/   10485 : (MACRO)              	smpsPan             panCenter, $00
(1)  469/   10485 : =$0                  panNone set $00
(1)  469/   10485 : =$40                 panRight set $40
(1)  469/   10485 : =$80                 panLeft set $80
(1)  469/   10485 : =$C0                 panCentre set $C0
(1)  469/   10485 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  469/   10485 : E0C0                        dc.b $E0,panCenter+$00
(1)  470/   10487 : (MACRO)              	smpsChangeTransposition $F4
(1)  470/   10487 : =>TRUE                       if SonicDriverVer>=3
(1)  470/   10487 : FBF4                                dc.b    $FB,$F4
(1)  470/   10489 : =>FALSE                      else
(1)  470/   10489 :                                     dc.b    $E9,$F4
(1)  470/   10489 : [470]                        endif
(1)  471/   10489 : (MACRO)              	smpsCall            Electoria_Call09
(1)  471/   10489 : F8                          dc.b    $F8
(1)  471/   1048A : =>TRUE                       if SonicDriverVer<>1
(1)  471/   1048A : 5C82                                dc.w    z80_ptr(Electoria_Call09)
(1)  471/   1048C : =>FALSE                      else
(1)  471/   1048C :                                     dc.w    Electoria_Call09-*-1
(1)  471/   1048C : [471]                        endif
(1)  472/   1048C : (MACRO)              	smpsChangeTransposition $0C
(1)  472/   1048C : =>TRUE                       if SonicDriverVer>=3
(1)  472/   1048C : FB0C                                dc.b    $FB,$0C
(1)  472/   1048E : =>FALSE                      else
(1)  472/   1048E :                                     dc.b    $E9,$0C
(1)  472/   1048E : [472]                        endif
(1)  473/   1048E : A412 AC4E 8060      	dc.b	nB2, $12, nG3, $4E, nRst, $60
(1)  474/   10494 : (MACRO)              	smpsChangeTransposition $F4
(1)  474/   10494 : =>TRUE                       if SonicDriverVer>=3
(1)  474/   10494 : FBF4                                dc.b    $FB,$F4
(1)  474/   10496 : =>FALSE                      else
(1)  474/   10496 :                                     dc.b    $E9,$F4
(1)  474/   10496 : [474]                        endif
(1)  475/   10496 : (MACRO)              	smpsCall            Electoria_Call0A
(1)  475/   10496 : F8                          dc.b    $F8
(1)  475/   10497 : =>TRUE                       if SonicDriverVer<>1
(1)  475/   10497 : CB82                                dc.w    z80_ptr(Electoria_Call0A)
(1)  475/   10499 : =>FALSE                      else
(1)  475/   10499 :                                     dc.w    Electoria_Call0A-*-1
(1)  475/   10499 : [475]                        endif
(1)  476/   10499 : (MACRO)              	smpsChangeTransposition $0C
(1)  476/   10499 : =>TRUE                       if SonicDriverVer>=3
(1)  476/   10499 : FB0C                                dc.b    $FB,$0C
(1)  476/   1049B : =>FALSE                      else
(1)  476/   1049B :                                     dc.b    $E9,$0C
(1)  476/   1049B : [476]                        endif
(1)  477/   1049B : B012 B34E B118      	dc.b	nB3, $12, nD4, $4E, nC4, $18, nB3, $06
            104A1 : B006             
(1)  478/   104A3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  478/   104A3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  478/   104A3 :                                     dc.b    $E5,$0A,
(1)  478/   104A3 : =>TRUE                       else
(1)  478/   104A3 : E60A                                dc.b    $E6,$0A
(1)  478/   104A5 : [478]                        endif
(1)  479/   104A5 : (MACRO)              	smpsPan             panRight, $00
(1)  479/   104A5 : =$0                  panNone set $00
(1)  479/   104A5 : =$40                 panRight set $40
(1)  479/   104A5 : =$80                 panLeft set $80
(1)  479/   104A5 : =$C0                 panCentre set $C0
(1)  479/   104A5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  479/   104A5 : E040                        dc.b $E0,panRight+$00
(1)  480/   104A7 : B0                  	dc.b	nB3
(1)  481/   104A8 : (MACRO)              	smpsFMAlterVol      $F6
(1)  481/   104A8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  481/   104A8 :                                     dc.b    $E5,$F6,
(1)  481/   104A8 : =>TRUE                       else
(1)  481/   104A8 : E6F6                                dc.b    $E6,$F6
(1)  481/   104AA : [481]                        endif
(1)  482/   104AA : (MACRO)              	smpsPan             panCenter, $00
(1)  482/   104AA : =$0                  panNone set $00
(1)  482/   104AA : =$40                 panRight set $40
(1)  482/   104AA : =$80                 panLeft set $80
(1)  482/   104AA : =$C0                 panCentre set $C0
(1)  482/   104AA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  482/   104AA : E0C0                        dc.b $E0,panCenter+$00
(1)  483/   104AC : AE12                	dc.b	nA3, $12
(1)  484/   104AE : (MACRO)              	smpsFMAlterVol      $0A
(1)  484/   104AE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  484/   104AE :                                     dc.b    $E5,$0A,
(1)  484/   104AE : =>TRUE                       else
(1)  484/   104AE : E60A                                dc.b    $E6,$0A
(1)  484/   104B0 : [484]                        endif
(1)  485/   104B0 : (MACRO)              	smpsPan             panRight, $00
(1)  485/   104B0 : =$0                  panNone set $00
(1)  485/   104B0 : =$40                 panRight set $40
(1)  485/   104B0 : =$80                 panLeft set $80
(1)  485/   104B0 : =$C0                 panCentre set $C0
(1)  485/   104B0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  485/   104B0 : E040                        dc.b $E0,panRight+$00
(1)  486/   104B2 : 06                  	dc.b	$06
(1)  487/   104B3 : (MACRO)              	smpsFMAlterVol      $F6
(1)  487/   104B3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  487/   104B3 :                                     dc.b    $E5,$F6,
(1)  487/   104B3 : =>TRUE                       else
(1)  487/   104B3 : E6F6                                dc.b    $E6,$F6
(1)  487/   104B5 : [487]                        endif
(1)  488/   104B5 : (MACRO)              	smpsPan             panCenter, $00
(1)  488/   104B5 : =$0                  panNone set $00
(1)  488/   104B5 : =$40                 panRight set $40
(1)  488/   104B5 : =$80                 panLeft set $80
(1)  488/   104B5 : =$C0                 panCentre set $C0
(1)  488/   104B5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  488/   104B5 : E0C0                        dc.b $E0,panCenter+$00
(1)  489/   104B7 : B012                	dc.b	nB3, $12
(1)  490/   104B9 : (MACRO)              	smpsFMAlterVol      $0A
(1)  490/   104B9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  490/   104B9 :                                     dc.b    $E5,$0A,
(1)  490/   104B9 : =>TRUE                       else
(1)  490/   104B9 : E60A                                dc.b    $E6,$0A
(1)  490/   104BB : [490]                        endif
(1)  491/   104BB : (MACRO)              	smpsPan             panRight, $00
(1)  491/   104BB : =$0                  panNone set $00
(1)  491/   104BB : =$40                 panRight set $40
(1)  491/   104BB : =$80                 panLeft set $80
(1)  491/   104BB : =$C0                 panCentre set $C0
(1)  491/   104BB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  491/   104BB : E040                        dc.b $E0,panRight+$00
(1)  492/   104BD : 06                  	dc.b	$06
(1)  493/   104BE : (MACRO)              	smpsFMAlterVol      $F6
(1)  493/   104BE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  493/   104BE :                                     dc.b    $E5,$F6,
(1)  493/   104BE : =>TRUE                       else
(1)  493/   104BE : E6F6                                dc.b    $E6,$F6
(1)  493/   104C0 : [493]                        endif
(1)  494/   104C0 : (MACRO)              	smpsPan             panCenter, $00
(1)  494/   104C0 : =$0                  panNone set $00
(1)  494/   104C0 : =$40                 panRight set $40
(1)  494/   104C0 : =$80                 panLeft set $80
(1)  494/   104C0 : =$C0                 panCentre set $C0
(1)  494/   104C0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  494/   104C0 : E0C0                        dc.b $E0,panCenter+$00
(1)  495/   104C2 : B30C E760           	dc.b	nD4, $0C, smpsNoAttack, $60
(1)  496/   104C6 : (MACRO)              	smpsSetvoice        $03
(1)  496/   104C6 :  (MACRO-2)                   smpsFMvoice $03
(1)  496/   104C6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  496/   104C6 :                                     dc.b    $EF,$03|$80,+$81
(1)  496/   104C6 : =>TRUE                       else
(1)  496/   104C6 : EF03                                dc.b    $EF,$03
(1)  496/   104C8 : [496]                        endif
(1)  497/   104C8 : (MACRO)              	smpsChangeTransposition $03
(1)  497/   104C8 : =>TRUE                       if SonicDriverVer>=3
(1)  497/   104C8 : FB03                                dc.b    $FB,$03
(1)  497/   104CA : =>FALSE                      else
(1)  497/   104CA :                                     dc.b    $E9,$03
(1)  497/   104CA : [497]                        endif
(1)  498/   104CA :                     
(1)  499/   104CA :                     Electoria_Loop12:
(1)  500/   104CA : (MACRO)              	smpsCall            Electoria_Call04
(1)  500/   104CA : F8                          dc.b    $F8
(1)  500/   104CB : =>TRUE                       if SonicDriverVer<>1
(1)  500/   104CB : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  500/   104CD : =>FALSE                      else
(1)  500/   104CD :                                     dc.w    Electoria_Call04-*-1
(1)  500/   104CD : [500]                        endif
(1)  501/   104CD : (MACRO)              	smpsLoop            $00, $02, Electoria_Loop12
(1)  501/   104CD : F7                          dc.b    $F7
(1)  501/   104CE : 0002                        dc.b    $00,$02
(1)  501/   104D0 : =>TRUE                       if SonicDriverVer<>1
(1)  501/   104D0 : CA84                                dc.w    z80_ptr(Electoria_Loop12)
(1)  501/   104D2 : =>FALSE                      else
(1)  501/   104D2 :                                     dc.w    Electoria_Loop12-*-1
(1)  501/   104D2 : [501]                        endif
(1)  502/   104D2 : (MACRO)              	smpsChangeTransposition $FF
(1)  502/   104D2 : =>TRUE                       if SonicDriverVer>=3
(1)  502/   104D2 : FBFF                                dc.b    $FB,$FF
(1)  502/   104D4 : =>FALSE                      else
(1)  502/   104D4 :                                     dc.b    $E9,$FF
(1)  502/   104D4 : [502]                        endif
(1)  503/   104D4 : (MACRO)              	smpsCall            Electoria_Call05
(1)  503/   104D4 : F8                          dc.b    $F8
(1)  503/   104D5 : =>TRUE                       if SonicDriverVer<>1
(1)  503/   104D5 : 5D85                                dc.w    z80_ptr(Electoria_Call05)
(1)  503/   104D7 : =>FALSE                      else
(1)  503/   104D7 :                                     dc.w    Electoria_Call05-*-1
(1)  503/   104D7 : [503]                        endif
(1)  504/   104D7 : (MACRO)              	smpsChangeTransposition $01
(1)  504/   104D7 : =>TRUE                       if SonicDriverVer>=3
(1)  504/   104D7 : FB01                                dc.b    $FB,$01
(1)  504/   104D9 : =>FALSE                      else
(1)  504/   104D9 :                                     dc.b    $E9,$01
(1)  504/   104D9 : [504]                        endif
(1)  505/   104D9 :                     
(1)  506/   104D9 :                     Electoria_Loop13:
(1)  507/   104D9 : (MACRO)              	smpsCall            Electoria_Call04
(1)  507/   104D9 : F8                          dc.b    $F8
(1)  507/   104DA : =>TRUE                       if SonicDriverVer<>1
(1)  507/   104DA : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  507/   104DC : =>FALSE                      else
(1)  507/   104DC :                                     dc.w    Electoria_Call04-*-1
(1)  507/   104DC : [507]                        endif
(1)  508/   104DC : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop13
(1)  508/   104DC : F7                          dc.b    $F7
(1)  508/   104DD : 0004                        dc.b    $00,$04
(1)  508/   104DF : =>TRUE                       if SonicDriverVer<>1
(1)  508/   104DF : D984                                dc.w    z80_ptr(Electoria_Loop13)
(1)  508/   104E1 : =>FALSE                      else
(1)  508/   104E1 :                                     dc.w    Electoria_Loop13-*-1
(1)  508/   104E1 : [508]                        endif
(1)  509/   104E1 : (MACRO)              	smpsChangeTransposition $09
(1)  509/   104E1 : =>TRUE                       if SonicDriverVer>=3
(1)  509/   104E1 : FB09                                dc.b    $FB,$09
(1)  509/   104E3 : =>FALSE                      else
(1)  509/   104E3 :                                     dc.b    $E9,$09
(1)  509/   104E3 : [509]                        endif
(1)  510/   104E3 : (MACRO)              	smpsFMAlterVol      $FF
(1)  510/   104E3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  510/   104E3 :                                     dc.b    $E5,$FF,
(1)  510/   104E3 : =>TRUE                       else
(1)  510/   104E3 : E6FF                                dc.b    $E6,$FF
(1)  510/   104E5 : [510]                        endif
(1)  511/   104E5 : (MACRO)              	smpsJump            Electoria_Jump00
(1)  511/   104E5 : F6                          dc.b    $F6
(1)  511/   104E6 : =>TRUE                       if SonicDriverVer<>1
(1)  511/   104E6 : EF83                                dc.w    z80_ptr(Electoria_Jump00)
(1)  511/   104E8 : =>FALSE                      else
(1)  511/   104E8 :                                     dc.w    Electoria_Jump00-*-1
(1)  511/   104E8 : [511]                        endif
(1)  512/   104E8 :                     
(1)  513/   104E8 :                     ; FM4 Data
(1)  514/   104E8 :                     Electoria_FM4:
(1)  515/   104E8 : (MACRO)              	smpsSetvoice        $03
(1)  515/   104E8 :  (MACRO-2)                   smpsFMvoice $03
(1)  515/   104E8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  515/   104E8 :                                     dc.b    $EF,$03|$80,+$81
(1)  515/   104E8 : =>TRUE                       else
(1)  515/   104E8 : EF03                                dc.b    $EF,$03
(1)  515/   104EA : [515]                        endif
(1)  516/   104EA : 8060                	dc.b	nRst, $60
(1)  517/   104EC : (MACRO)              	smpsChangeTransposition $F7
(1)  517/   104EC : =>TRUE                       if SonicDriverVer>=3
(1)  517/   104EC : FBF7                                dc.b    $FB,$F7
(1)  517/   104EE : =>FALSE                      else
(1)  517/   104EE :                                     dc.b    $E9,$F7
(1)  517/   104EE : [517]                        endif
(1)  518/   104EE :                     
(1)  519/   104EE :                     Electoria_Loop0B:
(1)  520/   104EE : (MACRO)              	smpsCall            Electoria_Call04
(1)  520/   104EE : F8                          dc.b    $F8
(1)  520/   104EF : =>TRUE                       if SonicDriverVer<>1
(1)  520/   104EF : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  520/   104F1 : =>FALSE                      else
(1)  520/   104F1 :                                     dc.w    Electoria_Call04-*-1
(1)  520/   104F1 : [520]                        endif
(1)  521/   104F1 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop0B
(1)  521/   104F1 : F7                          dc.b    $F7
(1)  521/   104F2 : 0008                        dc.b    $00,$08
(1)  521/   104F4 : =>TRUE                       if SonicDriverVer<>1
(1)  521/   104F4 : EE84                                dc.w    z80_ptr(Electoria_Loop0B)
(1)  521/   104F6 : =>FALSE                      else
(1)  521/   104F6 :                                     dc.w    Electoria_Loop0B-*-1
(1)  521/   104F6 : [521]                        endif
(1)  522/   104F6 : (MACRO)              	smpsChangeTransposition $09
(1)  522/   104F6 : =>TRUE                       if SonicDriverVer>=3
(1)  522/   104F6 : FB09                                dc.b    $FB,$09
(1)  522/   104F8 : =>FALSE                      else
(1)  522/   104F8 :                                     dc.b    $E9,$09
(1)  522/   104F8 : [522]                        endif
(1)  523/   104F8 :                     
(1)  524/   104F8 :                     Electoria_Loop0C:
(1)  525/   104F8 : (MACRO)              	smpsCall            Electoria_Call04
(1)  525/   104F8 : F8                          dc.b    $F8
(1)  525/   104F9 : =>TRUE                       if SonicDriverVer<>1
(1)  525/   104F9 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  525/   104FB : =>FALSE                      else
(1)  525/   104FB :                                     dc.w    Electoria_Call04-*-1
(1)  525/   104FB : [525]                        endif
(1)  526/   104FB : (MACRO)              	smpsChangeTransposition $01
(1)  526/   104FB : =>TRUE                       if SonicDriverVer>=3
(1)  526/   104FB : FB01                                dc.b    $FB,$01
(1)  526/   104FD : =>FALSE                      else
(1)  526/   104FD :                                     dc.b    $E9,$01
(1)  526/   104FD : [526]                        endif
(1)  527/   104FD : (MACRO)              	smpsCall            Electoria_Call04
(1)  527/   104FD : F8                          dc.b    $F8
(1)  527/   104FE : =>TRUE                       if SonicDriverVer<>1
(1)  527/   104FE : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  527/   10500 : =>FALSE                      else
(1)  527/   10500 :                                     dc.w    Electoria_Call04-*-1
(1)  527/   10500 : [527]                        endif
(1)  528/   10500 : (MACRO)              	smpsChangeTransposition $FF
(1)  528/   10500 : =>TRUE                       if SonicDriverVer>=3
(1)  528/   10500 : FBFF                                dc.b    $FB,$FF
(1)  528/   10502 : =>FALSE                      else
(1)  528/   10502 :                                     dc.b    $E9,$FF
(1)  528/   10502 : [528]                        endif
(1)  529/   10502 : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop0C
(1)  529/   10502 : F7                          dc.b    $F7
(1)  529/   10503 : 0004                        dc.b    $00,$04
(1)  529/   10505 : =>TRUE                       if SonicDriverVer<>1
(1)  529/   10505 : F884                                dc.w    z80_ptr(Electoria_Loop0C)
(1)  529/   10507 : =>FALSE                      else
(1)  529/   10507 :                                     dc.w    Electoria_Loop0C-*-1
(1)  529/   10507 : [529]                        endif
(1)  530/   10507 :                     
(1)  531/   10507 :                     Electoria_Loop0D:
(1)  532/   10507 : (MACRO)              	smpsChangeTransposition $FF
(1)  532/   10507 : =>TRUE                       if SonicDriverVer>=3
(1)  532/   10507 : FBFF                                dc.b    $FB,$FF
(1)  532/   10509 : =>FALSE                      else
(1)  532/   10509 :                                     dc.b    $E9,$FF
(1)  532/   10509 : [532]                        endif
(1)  533/   10509 : (MACRO)              	smpsCall            Electoria_Call04
(1)  533/   10509 : F8                          dc.b    $F8
(1)  533/   1050A : =>TRUE                       if SonicDriverVer<>1
(1)  533/   1050A : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  533/   1050C : =>FALSE                      else
(1)  533/   1050C :                                     dc.w    Electoria_Call04-*-1
(1)  533/   1050C : [533]                        endif
(1)  534/   1050C : (MACRO)              	smpsChangeTransposition $02
(1)  534/   1050C : =>TRUE                       if SonicDriverVer>=3
(1)  534/   1050C : FB02                                dc.b    $FB,$02
(1)  534/   1050E : =>FALSE                      else
(1)  534/   1050E :                                     dc.b    $E9,$02
(1)  534/   1050E : [534]                        endif
(1)  535/   1050E : (MACRO)              	smpsCall            Electoria_Call04
(1)  535/   1050E : F8                          dc.b    $F8
(1)  535/   1050F : =>TRUE                       if SonicDriverVer<>1
(1)  535/   1050F : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  535/   10511 : =>FALSE                      else
(1)  535/   10511 :                                     dc.w    Electoria_Call04-*-1
(1)  535/   10511 : [535]                        endif
(1)  536/   10511 : (MACRO)              	smpsChangeTransposition $FF
(1)  536/   10511 : =>TRUE                       if SonicDriverVer>=3
(1)  536/   10511 : FBFF                                dc.b    $FB,$FF
(1)  536/   10513 : =>FALSE                      else
(1)  536/   10513 :                                     dc.b    $E9,$FF
(1)  536/   10513 : [536]                        endif
(1)  537/   10513 : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop0D
(1)  537/   10513 : F7                          dc.b    $F7
(1)  537/   10514 : 0003                        dc.b    $00,$03
(1)  537/   10516 : =>TRUE                       if SonicDriverVer<>1
(1)  537/   10516 : 0785                                dc.w    z80_ptr(Electoria_Loop0D)
(1)  537/   10518 : =>FALSE                      else
(1)  537/   10518 :                                     dc.w    Electoria_Loop0D-*-1
(1)  537/   10518 : [537]                        endif
(1)  538/   10518 : (MACRO)              	smpsChangeTransposition $FF
(1)  538/   10518 : =>TRUE                       if SonicDriverVer>=3
(1)  538/   10518 : FBFF                                dc.b    $FB,$FF
(1)  538/   1051A : =>FALSE                      else
(1)  538/   1051A :                                     dc.b    $E9,$FF
(1)  538/   1051A : [538]                        endif
(1)  539/   1051A : (MACRO)              	smpsCall            Electoria_Call04
(1)  539/   1051A : F8                          dc.b    $F8
(1)  539/   1051B : =>TRUE                       if SonicDriverVer<>1
(1)  539/   1051B : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  539/   1051D : =>FALSE                      else
(1)  539/   1051D :                                     dc.w    Electoria_Call04-*-1
(1)  539/   1051D : [539]                        endif
(1)  540/   1051D : (MACRO)              	smpsChangeTransposition $01
(1)  540/   1051D : =>TRUE                       if SonicDriverVer>=3
(1)  540/   1051D : FB01                                dc.b    $FB,$01
(1)  540/   1051F : =>FALSE                      else
(1)  540/   1051F :                                     dc.b    $E9,$01
(1)  540/   1051F : [540]                        endif
(1)  541/   1051F : (MACRO)              	smpsCall            Electoria_Call05
(1)  541/   1051F : F8                          dc.b    $F8
(1)  541/   10520 : =>TRUE                       if SonicDriverVer<>1
(1)  541/   10520 : 5D85                                dc.w    z80_ptr(Electoria_Call05)
(1)  541/   10522 : =>FALSE                      else
(1)  541/   10522 :                                     dc.w    Electoria_Call05-*-1
(1)  541/   10522 : [541]                        endif
(1)  542/   10522 :                     
(1)  543/   10522 :                     Electoria_Loop0E:
(1)  544/   10522 : (MACRO)              	smpsCall            Electoria_Call04
(1)  544/   10522 : F8                          dc.b    $F8
(1)  544/   10523 : =>TRUE                       if SonicDriverVer<>1
(1)  544/   10523 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  544/   10525 : =>FALSE                      else
(1)  544/   10525 :                                     dc.w    Electoria_Call04-*-1
(1)  544/   10525 : [544]                        endif
(1)  545/   10525 : (MACRO)              	smpsChangeTransposition $01
(1)  545/   10525 : =>TRUE                       if SonicDriverVer>=3
(1)  545/   10525 : FB01                                dc.b    $FB,$01
(1)  545/   10527 : =>FALSE                      else
(1)  545/   10527 :                                     dc.b    $E9,$01
(1)  545/   10527 : [545]                        endif
(1)  546/   10527 : (MACRO)              	smpsCall            Electoria_Call04
(1)  546/   10527 : F8                          dc.b    $F8
(1)  546/   10528 : =>TRUE                       if SonicDriverVer<>1
(1)  546/   10528 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  546/   1052A : =>FALSE                      else
(1)  546/   1052A :                                     dc.w    Electoria_Call04-*-1
(1)  546/   1052A : [546]                        endif
(1)  547/   1052A : (MACRO)              	smpsChangeTransposition $FF
(1)  547/   1052A : =>TRUE                       if SonicDriverVer>=3
(1)  547/   1052A : FBFF                                dc.b    $FB,$FF
(1)  547/   1052C : =>FALSE                      else
(1)  547/   1052C :                                     dc.b    $E9,$FF
(1)  547/   1052C : [547]                        endif
(1)  548/   1052C : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop0E
(1)  548/   1052C : F7                          dc.b    $F7
(1)  548/   1052D : 0003                        dc.b    $00,$03
(1)  548/   1052F : =>TRUE                       if SonicDriverVer<>1
(1)  548/   1052F : 2285                                dc.w    z80_ptr(Electoria_Loop0E)
(1)  548/   10531 : =>FALSE                      else
(1)  548/   10531 :                                     dc.w    Electoria_Loop0E-*-1
(1)  548/   10531 : [548]                        endif
(1)  549/   10531 : (MACRO)              	smpsCall            Electoria_Call04
(1)  549/   10531 : F8                          dc.b    $F8
(1)  549/   10532 : =>TRUE                       if SonicDriverVer<>1
(1)  549/   10532 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  549/   10534 : =>FALSE                      else
(1)  549/   10534 :                                     dc.w    Electoria_Call04-*-1
(1)  549/   10534 : [549]                        endif
(1)  550/   10534 : 8060                	dc.b	nRst, $60
(1)  551/   10536 :                     
(1)  552/   10536 :                     Electoria_Loop0F:
(1)  553/   10536 : (MACRO)              	smpsCall            Electoria_Call04
(1)  553/   10536 : F8                          dc.b    $F8
(1)  553/   10537 : =>TRUE                       if SonicDriverVer<>1
(1)  553/   10537 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  553/   10539 : =>FALSE                      else
(1)  553/   10539 :                                     dc.w    Electoria_Call04-*-1
(1)  553/   10539 : [553]                        endif
(1)  554/   10539 : (MACRO)              	smpsChangeTransposition $01
(1)  554/   10539 : =>TRUE                       if SonicDriverVer>=3
(1)  554/   10539 : FB01                                dc.b    $FB,$01
(1)  554/   1053B : =>FALSE                      else
(1)  554/   1053B :                                     dc.b    $E9,$01
(1)  554/   1053B : [554]                        endif
(1)  555/   1053B : (MACRO)              	smpsCall            Electoria_Call04
(1)  555/   1053B : F8                          dc.b    $F8
(1)  555/   1053C : =>TRUE                       if SonicDriverVer<>1
(1)  555/   1053C : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  555/   1053E : =>FALSE                      else
(1)  555/   1053E :                                     dc.w    Electoria_Call04-*-1
(1)  555/   1053E : [555]                        endif
(1)  556/   1053E : (MACRO)              	smpsChangeTransposition $FF
(1)  556/   1053E : =>TRUE                       if SonicDriverVer>=3
(1)  556/   1053E : FBFF                                dc.b    $FB,$FF
(1)  556/   10540 : =>FALSE                      else
(1)  556/   10540 :                                     dc.b    $E9,$FF
(1)  556/   10540 : [556]                        endif
(1)  557/   10540 : (MACRO)              	smpsLoop            $00, $05, Electoria_Loop0F
(1)  557/   10540 : F7                          dc.b    $F7
(1)  557/   10541 : 0005                        dc.b    $00,$05
(1)  557/   10543 : =>TRUE                       if SonicDriverVer<>1
(1)  557/   10543 : 3685                                dc.w    z80_ptr(Electoria_Loop0F)
(1)  557/   10545 : =>FALSE                      else
(1)  557/   10545 :                                     dc.w    Electoria_Loop0F-*-1
(1)  557/   10545 : [557]                        endif
(1)  558/   10545 : (MACRO)              	smpsCall            Electoria_Call04
(1)  558/   10545 : F8                          dc.b    $F8
(1)  558/   10546 : =>TRUE                       if SonicDriverVer<>1
(1)  558/   10546 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  558/   10548 : =>FALSE                      else
(1)  558/   10548 :                                     dc.w    Electoria_Call04-*-1
(1)  558/   10548 : [558]                        endif
(1)  559/   10548 : (MACRO)              	smpsCall            Electoria_Call05
(1)  559/   10548 : F8                          dc.b    $F8
(1)  559/   10549 : =>TRUE                       if SonicDriverVer<>1
(1)  559/   10549 : 5D85                                dc.w    z80_ptr(Electoria_Call05)
(1)  559/   1054B : =>FALSE                      else
(1)  559/   1054B :                                     dc.w    Electoria_Call05-*-1
(1)  559/   1054B : [559]                        endif
(1)  560/   1054B :                     
(1)  561/   1054B :                     Electoria_Loop10:
(1)  562/   1054B : (MACRO)              	smpsCall            Electoria_Call04
(1)  562/   1054B : F8                          dc.b    $F8
(1)  562/   1054C : =>TRUE                       if SonicDriverVer<>1
(1)  562/   1054C : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  562/   1054E : =>FALSE                      else
(1)  562/   1054E :                                     dc.w    Electoria_Call04-*-1
(1)  562/   1054E : [562]                        endif
(1)  563/   1054E : (MACRO)              	smpsChangeTransposition $01
(1)  563/   1054E : =>TRUE                       if SonicDriverVer>=3
(1)  563/   1054E : FB01                                dc.b    $FB,$01
(1)  563/   10550 : =>FALSE                      else
(1)  563/   10550 :                                     dc.b    $E9,$01
(1)  563/   10550 : [563]                        endif
(1)  564/   10550 : (MACRO)              	smpsCall            Electoria_Call04
(1)  564/   10550 : F8                          dc.b    $F8
(1)  564/   10551 : =>TRUE                       if SonicDriverVer<>1
(1)  564/   10551 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  564/   10553 : =>FALSE                      else
(1)  564/   10553 :                                     dc.w    Electoria_Call04-*-1
(1)  564/   10553 : [564]                        endif
(1)  565/   10553 : (MACRO)              	smpsChangeTransposition $FF
(1)  565/   10553 : =>TRUE                       if SonicDriverVer>=3
(1)  565/   10553 : FBFF                                dc.b    $FB,$FF
(1)  565/   10555 : =>FALSE                      else
(1)  565/   10555 :                                     dc.b    $E9,$FF
(1)  565/   10555 : [565]                        endif
(1)  566/   10555 : (MACRO)              	smpsLoop            $00, $02, Electoria_Loop10
(1)  566/   10555 : F7                          dc.b    $F7
(1)  566/   10556 : 0002                        dc.b    $00,$02
(1)  566/   10558 : =>TRUE                       if SonicDriverVer<>1
(1)  566/   10558 : 4B85                                dc.w    z80_ptr(Electoria_Loop10)
(1)  566/   1055A : =>FALSE                      else
(1)  566/   1055A :                                     dc.w    Electoria_Loop10-*-1
(1)  566/   1055A : [566]                        endif
(1)  567/   1055A : (MACRO)              	smpsJump            Electoria_Loop0C
(1)  567/   1055A : F6                          dc.b    $F6
(1)  567/   1055B : =>TRUE                       if SonicDriverVer<>1
(1)  567/   1055B : F884                                dc.w    z80_ptr(Electoria_Loop0C)
(1)  567/   1055D : =>FALSE                      else
(1)  567/   1055D :                                     dc.w    Electoria_Loop0C-*-1
(1)  567/   1055D : [567]                        endif
(1)  568/   1055D :                     
(1)  569/   1055D :                     Electoria_Call05:
(1)  570/   1055D : 800C B10C           	dc.b	nRst, $0C, nC4, $0C
(1)  571/   10561 : (MACRO)              	smpsFMAlterVol      $0A
(1)  571/   10561 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  571/   10561 :                                     dc.b    $E5,$0A,
(1)  571/   10561 : =>TRUE                       else
(1)  571/   10561 : E60A                                dc.b    $E6,$0A
(1)  571/   10563 : [571]                        endif
(1)  572/   10563 : (MACRO)              	smpsPan             panLeft, $00
(1)  572/   10563 : =$0                  panNone set $00
(1)  572/   10563 : =$40                 panRight set $40
(1)  572/   10563 : =$80                 panLeft set $80
(1)  572/   10563 : =$C0                 panCentre set $C0
(1)  572/   10563 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  572/   10563 : E080                        dc.b $E0,panLeft+$00
(1)  573/   10565 : 06                  	dc.b	$06
(1)  574/   10566 : (MACRO)              	smpsFMAlterVol      $F6
(1)  574/   10566 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  574/   10566 :                                     dc.b    $E5,$F6,
(1)  574/   10566 : =>TRUE                       else
(1)  574/   10566 : E6F6                                dc.b    $E6,$F6
(1)  574/   10568 : [574]                        endif
(1)  575/   10568 : (MACRO)              	smpsPan             panCenter, $00
(1)  575/   10568 : =$0                  panNone set $00
(1)  575/   10568 : =$40                 panRight set $40
(1)  575/   10568 : =$80                 panLeft set $80
(1)  575/   10568 : =$C0                 panCentre set $C0
(1)  575/   10568 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  575/   10568 : E0C0                        dc.b $E0,panCenter+$00
(1)  576/   1056A : 0C06 8030           	dc.b	$0C, $06, nRst, $30
(1)  577/   1056E : (MACRO)              	smpsReturn
(1)  577/   1056E : =>TRUE                       if SonicDriverVer>=3
(1)  577/   1056E : F9                                  dc.b    $F9
(1)  577/   1056F : =>FALSE                      else
(1)  577/   1056F :                                     dc.b    $E3
(1)  577/   1056F : [577]                        endif
(1)  578/   1056F :                     
(1)  579/   1056F :                     ; FM5 Data
(1)  580/   1056F :                     Electoria_FM5:
(1)  581/   1056F : (MACRO)              	smpsSetvoice        $03
(1)  581/   1056F :  (MACRO-2)                   smpsFMvoice $03
(1)  581/   1056F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  581/   1056F :                                     dc.b    $EF,$03|$80,+$81
(1)  581/   1056F : =>TRUE                       else
(1)  581/   1056F : EF03                                dc.b    $EF,$03
(1)  581/   10571 : [581]                        endif
(1)  582/   10571 : 8060                	dc.b	nRst, $60
(1)  583/   10573 :                     
(1)  584/   10573 :                     Electoria_Loop05:
(1)  585/   10573 : A060                	dc.b	nG2, $60
(1)  586/   10575 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop05
(1)  586/   10575 : F7                          dc.b    $F7
(1)  586/   10576 : 0008                        dc.b    $00,$08
(1)  586/   10578 : =>TRUE                       if SonicDriverVer<>1
(1)  586/   10578 : 7385                                dc.w    z80_ptr(Electoria_Loop05)
(1)  586/   1057A : =>FALSE                      else
(1)  586/   1057A :                                     dc.w    Electoria_Loop05-*-1
(1)  586/   1057A : [586]                        endif
(1)  587/   1057A : (MACRO)              	smpsChangeTransposition $FA
(1)  587/   1057A : =>TRUE                       if SonicDriverVer>=3
(1)  587/   1057A : FBFA                                dc.b    $FB,$FA
(1)  587/   1057C : =>FALSE                      else
(1)  587/   1057C :                                     dc.b    $E9,$FA
(1)  587/   1057C : [587]                        endif
(1)  588/   1057C :                     
(1)  589/   1057C :                     Electoria_Loop06:
(1)  590/   1057C : (MACRO)              	smpsCall            Electoria_Call04
(1)  590/   1057C : F8                          dc.b    $F8
(1)  590/   1057D : =>TRUE                       if SonicDriverVer<>1
(1)  590/   1057D : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  590/   1057F : =>FALSE                      else
(1)  590/   1057F :                                     dc.w    Electoria_Call04-*-1
(1)  590/   1057F : [590]                        endif
(1)  591/   1057F : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop06
(1)  591/   1057F : F7                          dc.b    $F7
(1)  591/   10580 : 0008                        dc.b    $00,$08
(1)  591/   10582 : =>TRUE                       if SonicDriverVer<>1
(1)  591/   10582 : 7C85                                dc.w    z80_ptr(Electoria_Loop06)
(1)  591/   10584 : =>FALSE                      else
(1)  591/   10584 :                                     dc.w    Electoria_Loop06-*-1
(1)  591/   10584 : [591]                        endif
(1)  592/   10584 : (MACRO)              	smpsChangeTransposition $06
(1)  592/   10584 : =>TRUE                       if SonicDriverVer>=3
(1)  592/   10584 : FB06                                dc.b    $FB,$06
(1)  592/   10586 : =>FALSE                      else
(1)  592/   10586 :                                     dc.b    $E9,$06
(1)  592/   10586 : [592]                        endif
(1)  593/   10586 :                     
(1)  594/   10586 :                     Electoria_Loop07:
(1)  595/   10586 : (MACRO)              	smpsChangeTransposition $FC
(1)  595/   10586 : =>TRUE                       if SonicDriverVer>=3
(1)  595/   10586 : FBFC                                dc.b    $FB,$FC
(1)  595/   10588 : =>FALSE                      else
(1)  595/   10588 :                                     dc.b    $E9,$FC
(1)  595/   10588 : [595]                        endif
(1)  596/   10588 : (MACRO)              	smpsCall            Electoria_Call04
(1)  596/   10588 : F8                          dc.b    $F8
(1)  596/   10589 : =>TRUE                       if SonicDriverVer<>1
(1)  596/   10589 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  596/   1058B : =>FALSE                      else
(1)  596/   1058B :                                     dc.w    Electoria_Call04-*-1
(1)  596/   1058B : [596]                        endif
(1)  597/   1058B : (MACRO)              	smpsChangeTransposition $02
(1)  597/   1058B : =>TRUE                       if SonicDriverVer>=3
(1)  597/   1058B : FB02                                dc.b    $FB,$02
(1)  597/   1058D : =>FALSE                      else
(1)  597/   1058D :                                     dc.b    $E9,$02
(1)  597/   1058D : [597]                        endif
(1)  598/   1058D : (MACRO)              	smpsCall            Electoria_Call04
(1)  598/   1058D : F8                          dc.b    $F8
(1)  598/   1058E : =>TRUE                       if SonicDriverVer<>1
(1)  598/   1058E : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  598/   10590 : =>FALSE                      else
(1)  598/   10590 :                                     dc.w    Electoria_Call04-*-1
(1)  598/   10590 : [598]                        endif
(1)  599/   10590 : (MACRO)              	smpsChangeTransposition $02
(1)  599/   10590 : =>TRUE                       if SonicDriverVer>=3
(1)  599/   10590 : FB02                                dc.b    $FB,$02
(1)  599/   10592 : =>FALSE                      else
(1)  599/   10592 :                                     dc.b    $E9,$02
(1)  599/   10592 : [599]                        endif
(1)  600/   10592 : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop07
(1)  600/   10592 : F7                          dc.b    $F7
(1)  600/   10593 : 0003                        dc.b    $00,$03
(1)  600/   10595 : =>TRUE                       if SonicDriverVer<>1
(1)  600/   10595 : 8685                                dc.w    z80_ptr(Electoria_Loop07)
(1)  600/   10597 : =>FALSE                      else
(1)  600/   10597 :                                     dc.w    Electoria_Loop07-*-1
(1)  600/   10597 : [600]                        endif
(1)  601/   10597 : (MACRO)              	smpsChangeTransposition $FC
(1)  601/   10597 : =>TRUE                       if SonicDriverVer>=3
(1)  601/   10597 : FBFC                                dc.b    $FB,$FC
(1)  601/   10599 : =>FALSE                      else
(1)  601/   10599 :                                     dc.b    $E9,$FC
(1)  601/   10599 : [601]                        endif
(1)  602/   10599 : (MACRO)              	smpsCall            Electoria_Call04
(1)  602/   10599 : F8                          dc.b    $F8
(1)  602/   1059A : =>TRUE                       if SonicDriverVer<>1
(1)  602/   1059A : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  602/   1059C : =>FALSE                      else
(1)  602/   1059C :                                     dc.w    Electoria_Call04-*-1
(1)  602/   1059C : [602]                        endif
(1)  603/   1059C : (MACRO)              	smpsChangeTransposition $01
(1)  603/   1059C : =>TRUE                       if SonicDriverVer>=3
(1)  603/   1059C : FB01                                dc.b    $FB,$01
(1)  603/   1059E : =>FALSE                      else
(1)  603/   1059E :                                     dc.b    $E9,$01
(1)  603/   1059E : [603]                        endif
(1)  604/   1059E : (MACRO)              	smpsCall            Electoria_Call05
(1)  604/   1059E : F8                          dc.b    $F8
(1)  604/   1059F : =>TRUE                       if SonicDriverVer<>1
(1)  604/   1059F : 5D85                                dc.w    z80_ptr(Electoria_Call05)
(1)  604/   105A1 : =>FALSE                      else
(1)  604/   105A1 :                                     dc.w    Electoria_Call05-*-1
(1)  604/   105A1 : [604]                        endif
(1)  605/   105A1 : (MACRO)              	smpsChangeTransposition $03
(1)  605/   105A1 : =>TRUE                       if SonicDriverVer>=3
(1)  605/   105A1 : FB03                                dc.b    $FB,$03
(1)  605/   105A3 : =>FALSE                      else
(1)  605/   105A3 :                                     dc.b    $E9,$03
(1)  605/   105A3 : [605]                        endif
(1)  606/   105A3 : (MACRO)              	smpsChangeTransposition $FA
(1)  606/   105A3 : =>TRUE                       if SonicDriverVer>=3
(1)  606/   105A3 : FBFA                                dc.b    $FB,$FA
(1)  606/   105A5 : =>FALSE                      else
(1)  606/   105A5 :                                     dc.b    $E9,$FA
(1)  606/   105A5 : [606]                        endif
(1)  607/   105A5 :                     
(1)  608/   105A5 :                     Electoria_Loop08:
(1)  609/   105A5 : (MACRO)              	smpsCall            Electoria_Call04
(1)  609/   105A5 : F8                          dc.b    $F8
(1)  609/   105A6 : =>TRUE                       if SonicDriverVer<>1
(1)  609/   105A6 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  609/   105A8 : =>FALSE                      else
(1)  609/   105A8 :                                     dc.w    Electoria_Call04-*-1
(1)  609/   105A8 : [609]                        endif
(1)  610/   105A8 : (MACRO)              	smpsLoop            $00, $07, Electoria_Loop08
(1)  610/   105A8 : F7                          dc.b    $F7
(1)  610/   105A9 : 0007                        dc.b    $00,$07
(1)  610/   105AB : =>TRUE                       if SonicDriverVer<>1
(1)  610/   105AB : A585                                dc.w    z80_ptr(Electoria_Loop08)
(1)  610/   105AD : =>FALSE                      else
(1)  610/   105AD :                                     dc.w    Electoria_Loop08-*-1
(1)  610/   105AD : [610]                        endif
(1)  611/   105AD : 8060                	dc.b	nRst, $60
(1)  612/   105AF :                     
(1)  613/   105AF :                     Electoria_Loop09:
(1)  614/   105AF : (MACRO)              	smpsCall            Electoria_Call04
(1)  614/   105AF : F8                          dc.b    $F8
(1)  614/   105B0 : =>TRUE                       if SonicDriverVer<>1
(1)  614/   105B0 : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  614/   105B2 : =>FALSE                      else
(1)  614/   105B2 :                                     dc.w    Electoria_Call04-*-1
(1)  614/   105B2 : [614]                        endif
(1)  615/   105B2 : (MACRO)              	smpsLoop            $00, $0B, Electoria_Loop09
(1)  615/   105B2 : F7                          dc.b    $F7
(1)  615/   105B3 : 000B                        dc.b    $00,$0B
(1)  615/   105B5 : =>TRUE                       if SonicDriverVer<>1
(1)  615/   105B5 : AF85                                dc.w    z80_ptr(Electoria_Loop09)
(1)  615/   105B7 : =>FALSE                      else
(1)  615/   105B7 :                                     dc.w    Electoria_Loop09-*-1
(1)  615/   105B7 : [615]                        endif
(1)  616/   105B7 : (MACRO)              	smpsChangeTransposition $FF
(1)  616/   105B7 : =>TRUE                       if SonicDriverVer>=3
(1)  616/   105B7 : FBFF                                dc.b    $FB,$FF
(1)  616/   105B9 : =>FALSE                      else
(1)  616/   105B9 :                                     dc.b    $E9,$FF
(1)  616/   105B9 : [616]                        endif
(1)  617/   105B9 : (MACRO)              	smpsCall            Electoria_Call05
(1)  617/   105B9 : F8                          dc.b    $F8
(1)  617/   105BA : =>TRUE                       if SonicDriverVer<>1
(1)  617/   105BA : 5D85                                dc.w    z80_ptr(Electoria_Call05)
(1)  617/   105BC : =>FALSE                      else
(1)  617/   105BC :                                     dc.w    Electoria_Call05-*-1
(1)  617/   105BC : [617]                        endif
(1)  618/   105BC : (MACRO)              	smpsChangeTransposition $01
(1)  618/   105BC : =>TRUE                       if SonicDriverVer>=3
(1)  618/   105BC : FB01                                dc.b    $FB,$01
(1)  618/   105BE : =>FALSE                      else
(1)  618/   105BE :                                     dc.b    $E9,$01
(1)  618/   105BE : [618]                        endif
(1)  619/   105BE :                     
(1)  620/   105BE :                     Electoria_Loop0A:
(1)  621/   105BE : (MACRO)              	smpsCall            Electoria_Call04
(1)  621/   105BE : F8                          dc.b    $F8
(1)  621/   105BF : =>TRUE                       if SonicDriverVer<>1
(1)  621/   105BF : 8181                                dc.w    z80_ptr(Electoria_Call04)
(1)  621/   105C1 : =>FALSE                      else
(1)  621/   105C1 :                                     dc.w    Electoria_Call04-*-1
(1)  621/   105C1 : [621]                        endif
(1)  622/   105C1 : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop0A
(1)  622/   105C1 : F7                          dc.b    $F7
(1)  622/   105C2 : 0004                        dc.b    $00,$04
(1)  622/   105C4 : =>TRUE                       if SonicDriverVer<>1
(1)  622/   105C4 : BE85                                dc.w    z80_ptr(Electoria_Loop0A)
(1)  622/   105C6 : =>FALSE                      else
(1)  622/   105C6 :                                     dc.w    Electoria_Loop0A-*-1
(1)  622/   105C6 : [622]                        endif
(1)  623/   105C6 : (MACRO)              	smpsJump            Electoria_Loop06
(1)  623/   105C6 : F6                          dc.b    $F6
(1)  623/   105C7 : =>TRUE                       if SonicDriverVer<>1
(1)  623/   105C7 : 7C85                                dc.w    z80_ptr(Electoria_Loop06)
(1)  623/   105C9 : =>FALSE                      else
(1)  623/   105C9 :                                     dc.w    Electoria_Loop06-*-1
(1)  623/   105C9 : [623]                        endif
(1)  624/   105C9 :                     
(1)  625/   105C9 :                     ; PSG1 Data
(1)  626/   105C9 :                     Electoria_PSG1:
(1)  627/   105C9 : (MACRO)              	smpsPSGvoice        sTone_0C
(1)  627/   105C9 : F50C                        dc.b    $F5,sTone_0C
(1)  628/   105CB : 8060                	dc.b	nRst, $60
(1)  629/   105CD :                     
(1)  630/   105CD :                     Electoria_Loop26:
(1)  631/   105CD : (MACRO)              	smpsCall            Electoria_Call12
(1)  631/   105CD : F8                          dc.b    $F8
(1)  631/   105CE : =>TRUE                       if SonicDriverVer<>1
(1)  631/   105CE : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  631/   105D0 : =>FALSE                      else
(1)  631/   105D0 :                                     dc.w    Electoria_Call12-*-1
(1)  631/   105D0 : [631]                        endif
(1)  632/   105D0 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop26
(1)  632/   105D0 : F7                          dc.b    $F7
(1)  632/   105D1 : 0008                        dc.b    $00,$08
(1)  632/   105D3 : =>TRUE                       if SonicDriverVer<>1
(1)  632/   105D3 : CD85                                dc.w    z80_ptr(Electoria_Loop26)
(1)  632/   105D5 : =>FALSE                      else
(1)  632/   105D5 :                                     dc.w    Electoria_Loop26-*-1
(1)  632/   105D5 : [632]                        endif
(1)  633/   105D5 :                     
(1)  634/   105D5 :                     Electoria_Loop27:
(1)  635/   105D5 : (MACRO)              	smpsCall            Electoria_Call12
(1)  635/   105D5 : F8                          dc.b    $F8
(1)  635/   105D6 : =>TRUE                       if SonicDriverVer<>1
(1)  635/   105D6 : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  635/   105D8 : =>FALSE                      else
(1)  635/   105D8 :                                     dc.w    Electoria_Call12-*-1
(1)  635/   105D8 : [635]                        endif
(1)  636/   105D8 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop27
(1)  636/   105D8 : F7                          dc.b    $F7
(1)  636/   105D9 : 0008                        dc.b    $00,$08
(1)  636/   105DB : =>TRUE                       if SonicDriverVer<>1
(1)  636/   105DB : D585                                dc.w    z80_ptr(Electoria_Loop27)
(1)  636/   105DD : =>FALSE                      else
(1)  636/   105DD :                                     dc.w    Electoria_Loop27-*-1
(1)  636/   105DD : [636]                        endif
(1)  637/   105DD :                     
(1)  638/   105DD :                     Electoria_Loop28:
(1)  639/   105DD : (MACRO)              	smpsChangeTransposition $FC
(1)  639/   105DD : =>TRUE                       if SonicDriverVer>=3
(1)  639/   105DD : FBFC                                dc.b    $FB,$FC
(1)  639/   105DF : =>FALSE                      else
(1)  639/   105DF :                                     dc.b    $E9,$FC
(1)  639/   105DF : [639]                        endif
(1)  640/   105DF : (MACRO)              	smpsCall            Electoria_Call12
(1)  640/   105DF : F8                          dc.b    $F8
(1)  640/   105E0 : =>TRUE                       if SonicDriverVer<>1
(1)  640/   105E0 : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  640/   105E2 : =>FALSE                      else
(1)  640/   105E2 :                                     dc.w    Electoria_Call12-*-1
(1)  640/   105E2 : [640]                        endif
(1)  641/   105E2 : (MACRO)              	smpsChangeTransposition $04
(1)  641/   105E2 : =>TRUE                       if SonicDriverVer>=3
(1)  641/   105E2 : FB04                                dc.b    $FB,$04
(1)  641/   105E4 : =>FALSE                      else
(1)  641/   105E4 :                                     dc.b    $E9,$04
(1)  641/   105E4 : [641]                        endif
(1)  642/   105E4 : 9C06 9CA8 A29C      	dc.b	nEb2, $06, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2
            105EA : A8A2 9CA8 A29C    
(1)  643/   105F0 : A8A2 9CA8 A2        	dc.b	nEb3, nA2, nEb2, nEb3, nA2
(1)  644/   105F5 : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop28
(1)  644/   105F5 : F7                          dc.b    $F7
(1)  644/   105F6 : 0003                        dc.b    $00,$03
(1)  644/   105F8 : =>TRUE                       if SonicDriverVer<>1
(1)  644/   105F8 : DD85                                dc.w    z80_ptr(Electoria_Loop28)
(1)  644/   105FA : =>FALSE                      else
(1)  644/   105FA :                                     dc.w    Electoria_Loop28-*-1
(1)  644/   105FA : [644]                        endif
(1)  645/   105FA : (MACRO)              	smpsChangeTransposition $FC
(1)  645/   105FA : =>TRUE                       if SonicDriverVer>=3
(1)  645/   105FA : FBFC                                dc.b    $FB,$FC
(1)  645/   105FC : =>FALSE                      else
(1)  645/   105FC :                                     dc.b    $E9,$FC
(1)  645/   105FC : [645]                        endif
(1)  646/   105FC : (MACRO)              	smpsCall            Electoria_Call12
(1)  646/   105FC : F8                          dc.b    $F8
(1)  646/   105FD : =>TRUE                       if SonicDriverVer<>1
(1)  646/   105FD : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  646/   105FF : =>FALSE                      else
(1)  646/   105FF :                                     dc.w    Electoria_Call12-*-1
(1)  646/   105FF : [646]                        endif
(1)  647/   105FF : (MACRO)              	smpsChangeTransposition $04
(1)  647/   105FF : =>TRUE                       if SonicDriverVer>=3
(1)  647/   105FF : FB04                                dc.b    $FB,$04
(1)  647/   10601 : =>FALSE                      else
(1)  647/   10601 :                                     dc.b    $E9,$04
(1)  647/   10601 : [647]                        endif
(1)  648/   10601 : 9C06 9CA8 A29C      	dc.b	nEb2, $06, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2, nRst, $30
            10607 : A8A2 9C80 30       
(1)  649/   1060C :                     
(1)  650/   1060C :                     Electoria_Loop29:
(1)  651/   1060C : (MACRO)              	smpsCall            Electoria_Call12
(1)  651/   1060C : F8                          dc.b    $F8
(1)  651/   1060D : =>TRUE                       if SonicDriverVer<>1
(1)  651/   1060D : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  651/   1060F : =>FALSE                      else
(1)  651/   1060F :                                     dc.w    Electoria_Call12-*-1
(1)  651/   1060F : [651]                        endif
(1)  652/   1060F : (MACRO)              	smpsLoop            $00, $07, Electoria_Loop29
(1)  652/   1060F : F7                          dc.b    $F7
(1)  652/   10610 : 0007                        dc.b    $00,$07
(1)  652/   10612 : =>TRUE                       if SonicDriverVer<>1
(1)  652/   10612 : 0C86                                dc.w    z80_ptr(Electoria_Loop29)
(1)  652/   10614 : =>FALSE                      else
(1)  652/   10614 :                                     dc.w    Electoria_Loop29-*-1
(1)  652/   10614 : [652]                        endif
(1)  653/   10614 : 8060                	dc.b	nRst, $60
(1)  654/   10616 :                     
(1)  655/   10616 :                     Electoria_Loop2A:
(1)  656/   10616 : (MACRO)              	smpsCall            Electoria_Call12
(1)  656/   10616 : F8                          dc.b    $F8
(1)  656/   10617 : =>TRUE                       if SonicDriverVer<>1
(1)  656/   10617 : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  656/   10619 : =>FALSE                      else
(1)  656/   10619 :                                     dc.w    Electoria_Call12-*-1
(1)  656/   10619 : [656]                        endif
(1)  657/   10619 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop2A
(1)  657/   10619 : F7                          dc.b    $F7
(1)  657/   1061A : 0008                        dc.b    $00,$08
(1)  657/   1061C : =>TRUE                       if SonicDriverVer<>1
(1)  657/   1061C : 1686                                dc.w    z80_ptr(Electoria_Loop2A)
(1)  657/   1061E : =>FALSE                      else
(1)  657/   1061E :                                     dc.w    Electoria_Loop2A-*-1
(1)  657/   1061E : [657]                        endif
(1)  658/   1061E :                     
(1)  659/   1061E :                     Electoria_Loop2B:
(1)  660/   1061E : (MACRO)              	smpsCall            Electoria_Call12
(1)  660/   1061E : F8                          dc.b    $F8
(1)  660/   1061F : =>TRUE                       if SonicDriverVer<>1
(1)  660/   1061F : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  660/   10621 : =>FALSE                      else
(1)  660/   10621 :                                     dc.w    Electoria_Call12-*-1
(1)  660/   10621 : [660]                        endif
(1)  661/   10621 : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop2B
(1)  661/   10621 : F7                          dc.b    $F7
(1)  661/   10622 : 0003                        dc.b    $00,$03
(1)  661/   10624 : =>TRUE                       if SonicDriverVer<>1
(1)  661/   10624 : 1E86                                dc.w    z80_ptr(Electoria_Loop2B)
(1)  661/   10626 : =>FALSE                      else
(1)  661/   10626 :                                     dc.w    Electoria_Loop2B-*-1
(1)  661/   10626 : [661]                        endif
(1)  662/   10626 : A006 A0AC A7A0      	dc.b	nG2, $06, nG2, nG3, nD3, nG2, nG3, nD3, nG2, nRst, $30
            1062C : ACA7 A080 30       
(1)  663/   10631 :                     
(1)  664/   10631 :                     Electoria_Loop2C:
(1)  665/   10631 : (MACRO)              	smpsCall            Electoria_Call12
(1)  665/   10631 : F8                          dc.b    $F8
(1)  665/   10632 : =>TRUE                       if SonicDriverVer<>1
(1)  665/   10632 : 3C86                                dc.w    z80_ptr(Electoria_Call12)
(1)  665/   10634 : =>FALSE                      else
(1)  665/   10634 :                                     dc.w    Electoria_Call12-*-1
(1)  665/   10634 : [665]                        endif
(1)  666/   10634 : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop2C
(1)  666/   10634 : F7                          dc.b    $F7
(1)  666/   10635 : 0004                        dc.b    $00,$04
(1)  666/   10637 : =>TRUE                       if SonicDriverVer<>1
(1)  666/   10637 : 3186                                dc.w    z80_ptr(Electoria_Loop2C)
(1)  666/   10639 : =>FALSE                      else
(1)  666/   10639 :                                     dc.w    Electoria_Loop2C-*-1
(1)  666/   10639 : [666]                        endif
(1)  667/   10639 : (MACRO)              	smpsJump            Electoria_Loop27
(1)  667/   10639 : F6                          dc.b    $F6
(1)  667/   1063A : =>TRUE                       if SonicDriverVer<>1
(1)  667/   1063A : D585                                dc.w    z80_ptr(Electoria_Loop27)
(1)  667/   1063C : =>FALSE                      else
(1)  667/   1063C :                                     dc.w    Electoria_Loop27-*-1
(1)  667/   1063C : [667]                        endif
(1)  668/   1063C :                     
(1)  669/   1063C :                     Electoria_Call12:
(1)  670/   1063C : A006 A0AC A7A0      	dc.b	nG2, $06, nG2, nG3, nD3, nG2, nG3, nD3, nG2, nG3, nD3, nG2
            10642 : ACA7 A0AC A7A0    
(1)  671/   10648 : ACA7 A0AC A7        	dc.b	nG3, nD3, nG2, nG3, nD3
(1)  672/   1064D : (MACRO)              	smpsReturn
(1)  672/   1064D : =>TRUE                       if SonicDriverVer>=3
(1)  672/   1064D : F9                                  dc.b    $F9
(1)  672/   1064E : =>FALSE                      else
(1)  672/   1064E :                                     dc.b    $E3
(1)  672/   1064E : [672]                        endif
(1)  673/   1064E :                     
(1)  674/   1064E :                     ; PSG2 Data
(1)  675/   1064E :                     Electoria_PSG2:
(1)  676/   1064E : (MACRO)              	smpsPSGvoice        sTone_0C
(1)  676/   1064E : F50C                        dc.b    $F5,sTone_0C
(1)  677/   10650 : 8060                	dc.b	nRst, $60
(1)  678/   10652 : (MACRO)              	smpsChangeTransposition $0C
(1)  678/   10652 : =>TRUE                       if SonicDriverVer>=3
(1)  678/   10652 : FB0C                                dc.b    $FB,$0C
(1)  678/   10654 : =>FALSE                      else
(1)  678/   10654 :                                     dc.b    $E9,$0C
(1)  678/   10654 : [678]                        endif
(1)  679/   10654 :                     
(1)  680/   10654 :                     Electoria_Loop20:
(1)  681/   10654 : (MACRO)              	smpsCall            Electoria_Call0E
(1)  681/   10654 : F8                          dc.b    $F8
(1)  681/   10655 : =>TRUE                       if SonicDriverVer<>1
(1)  681/   10655 : BA86                                dc.w    z80_ptr(Electoria_Call0E)
(1)  681/   10657 : =>FALSE                      else
(1)  681/   10657 :                                     dc.w    Electoria_Call0E-*-1
(1)  681/   10657 : [681]                        endif
(1)  682/   10657 : (MACRO)              	smpsCall            Electoria_Call0F
(1)  682/   10657 : F8                          dc.b    $F8
(1)  682/   10658 : =>TRUE                       if SonicDriverVer<>1
(1)  682/   10658 : CC86                                dc.w    z80_ptr(Electoria_Call0F)
(1)  682/   1065A : =>FALSE                      else
(1)  682/   1065A :                                     dc.w    Electoria_Call0F-*-1
(1)  682/   1065A : [682]                        endif
(1)  683/   1065A : (MACRO)              	smpsLoop            $00, $04, Electoria_Loop20
(1)  683/   1065A : F7                          dc.b    $F7
(1)  683/   1065B : 0004                        dc.b    $00,$04
(1)  683/   1065D : =>TRUE                       if SonicDriverVer<>1
(1)  683/   1065D : 5486                                dc.w    z80_ptr(Electoria_Loop20)
(1)  683/   1065F : =>FALSE                      else
(1)  683/   1065F :                                     dc.w    Electoria_Loop20-*-1
(1)  683/   1065F : [683]                        endif
(1)  684/   1065F : (MACRO)              	smpsChangeTransposition $F4
(1)  684/   1065F : =>TRUE                       if SonicDriverVer>=3
(1)  684/   1065F : FBF4                                dc.b    $FB,$F4
(1)  684/   10661 : =>FALSE                      else
(1)  684/   10661 :                                     dc.b    $E9,$F4
(1)  684/   10661 : [684]                        endif
(1)  685/   10661 : (MACRO)              	smpsPSGAlterVol     $FF
(1)  685/   10661 : ECFF                        dc.b    $EC,$FF
(1)  686/   10663 :                     
(1)  687/   10663 :                     Electoria_Loop21:
(1)  688/   10663 : (MACRO)              	smpsPSGvoice        sTone_03
(1)  688/   10663 : F503                        dc.b    $F5,sTone_03
(1)  689/   10665 : (MACRO)              	smpsCall            Electoria_Call10
(1)  689/   10665 : F8                          dc.b    $F8
(1)  689/   10666 : =>TRUE                       if SonicDriverVer<>1
(1)  689/   10666 : DE86                                dc.w    z80_ptr(Electoria_Call10)
(1)  689/   10668 : =>FALSE                      else
(1)  689/   10668 :                                     dc.w    Electoria_Call10-*-1
(1)  689/   10668 : [689]                        endif
(1)  690/   10668 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop21
(1)  690/   10668 : F7                          dc.b    $F7
(1)  690/   10669 : 0008                        dc.b    $00,$08
(1)  690/   1066B : =>TRUE                       if SonicDriverVer<>1
(1)  690/   1066B : 6386                                dc.w    z80_ptr(Electoria_Loop21)
(1)  690/   1066D : =>FALSE                      else
(1)  690/   1066D :                                     dc.w    Electoria_Loop21-*-1
(1)  690/   1066D : [690]                        endif
(1)  691/   1066D : (MACRO)              	smpsChangeTransposition $03
(1)  691/   1066D : =>TRUE                       if SonicDriverVer>=3
(1)  691/   1066D : FB03                                dc.b    $FB,$03
(1)  691/   1066F : =>FALSE                      else
(1)  691/   1066F :                                     dc.b    $E9,$03
(1)  691/   1066F : [691]                        endif
(1)  692/   1066F :                     
(1)  693/   1066F :                     Electoria_Loop22:
(1)  694/   1066F : (MACRO)              	smpsCall            Electoria_Call10
(1)  694/   1066F : F8                          dc.b    $F8
(1)  694/   10670 : =>TRUE                       if SonicDriverVer<>1
(1)  694/   10670 : DE86                                dc.w    z80_ptr(Electoria_Call10)
(1)  694/   10672 : =>FALSE                      else
(1)  694/   10672 :                                     dc.w    Electoria_Call10-*-1
(1)  694/   10672 : [694]                        endif
(1)  695/   10672 : (MACRO)              	smpsLoop            $00, $07, Electoria_Loop22
(1)  695/   10672 : F7                          dc.b    $F7
(1)  695/   10673 : 0007                        dc.b    $00,$07
(1)  695/   10675 : =>TRUE                       if SonicDriverVer<>1
(1)  695/   10675 : 6F86                                dc.w    z80_ptr(Electoria_Loop22)
(1)  695/   10677 : =>FALSE                      else
(1)  695/   10677 :                                     dc.w    Electoria_Loop22-*-1
(1)  695/   10677 : [695]                        endif
(1)  696/   10677 : (MACRO)              	smpsChangeTransposition $FD
(1)  696/   10677 : =>TRUE                       if SonicDriverVer>=3
(1)  696/   10677 : FBFD                                dc.b    $FB,$FD
(1)  696/   10679 : =>FALSE                      else
(1)  696/   10679 :                                     dc.b    $E9,$FD
(1)  696/   10679 : [696]                        endif
(1)  697/   10679 : (MACRO)              	smpsCall            Electoria_Call11
(1)  697/   10679 : F8                          dc.b    $F8
(1)  697/   1067A : =>TRUE                       if SonicDriverVer<>1
(1)  697/   1067A : F286                                dc.w    z80_ptr(Electoria_Call11)
(1)  697/   1067C : =>FALSE                      else
(1)  697/   1067C :                                     dc.w    Electoria_Call11-*-1
(1)  697/   1067C : [697]                        endif
(1)  698/   1067C :                     
(1)  699/   1067C :                     Electoria_Loop23:
(1)  700/   1067C : (MACRO)              	smpsCall            Electoria_Call10
(1)  700/   1067C : F8                          dc.b    $F8
(1)  700/   1067D : =>TRUE                       if SonicDriverVer<>1
(1)  700/   1067D : DE86                                dc.w    z80_ptr(Electoria_Call10)
(1)  700/   1067F : =>FALSE                      else
(1)  700/   1067F :                                     dc.w    Electoria_Call10-*-1
(1)  700/   1067F : [700]                        endif
(1)  701/   1067F : (MACRO)              	smpsLoop            $00, $07, Electoria_Loop23
(1)  701/   1067F : F7                          dc.b    $F7
(1)  701/   10680 : 0007                        dc.b    $00,$07
(1)  701/   10682 : =>TRUE                       if SonicDriverVer<>1
(1)  701/   10682 : 7C86                                dc.w    z80_ptr(Electoria_Loop23)
(1)  701/   10684 : =>FALSE                      else
(1)  701/   10684 :                                     dc.w    Electoria_Loop23-*-1
(1)  701/   10684 : [701]                        endif
(1)  702/   10684 : 8060                	dc.b	nRst, $60
(1)  703/   10686 :                     
(1)  704/   10686 :                     Electoria_Loop24:
(1)  705/   10686 : (MACRO)              	smpsCall            Electoria_Call10
(1)  705/   10686 : F8                          dc.b    $F8
(1)  705/   10687 : =>TRUE                       if SonicDriverVer<>1
(1)  705/   10687 : DE86                                dc.w    z80_ptr(Electoria_Call10)
(1)  705/   10689 : =>FALSE                      else
(1)  705/   10689 :                                     dc.w    Electoria_Call10-*-1
(1)  705/   10689 : [705]                        endif
(1)  706/   10689 : (MACRO)              	smpsLoop            $00, $08, Electoria_Loop24
(1)  706/   10689 : F7                          dc.b    $F7
(1)  706/   1068A : 0008                        dc.b    $00,$08
(1)  706/   1068C : =>TRUE                       if SonicDriverVer<>1
(1)  706/   1068C : 8686                                dc.w    z80_ptr(Electoria_Loop24)
(1)  706/   1068E : =>FALSE                      else
(1)  706/   1068E :                                     dc.w    Electoria_Loop24-*-1
(1)  706/   1068E : [706]                        endif
(1)  707/   1068E : (MACRO)              	smpsPSGvoice        sTone_0C
(1)  707/   1068E : F50C                        dc.b    $F5,sTone_0C
(1)  708/   10690 : (MACRO)              	smpsChangeTransposition $0C
(1)  708/   10690 : =>TRUE                       if SonicDriverVer>=3
(1)  708/   10690 : FB0C                                dc.b    $FB,$0C
(1)  708/   10692 : =>FALSE                      else
(1)  708/   10692 :                                     dc.b    $E9,$0C
(1)  708/   10692 : [708]                        endif
(1)  709/   10692 : (MACRO)              	smpsPSGAlterVol     $01
(1)  709/   10692 : EC01                        dc.b    $EC,$01
(1)  710/   10694 : (MACRO)              	smpsCall            Electoria_Call0E
(1)  710/   10694 : F8                          dc.b    $F8
(1)  710/   10695 : =>TRUE                       if SonicDriverVer<>1
(1)  710/   10695 : BA86                                dc.w    z80_ptr(Electoria_Call0E)
(1)  710/   10697 : =>FALSE                      else
(1)  710/   10697 :                                     dc.w    Electoria_Call0E-*-1
(1)  710/   10697 : [710]                        endif
(1)  711/   10697 : (MACRO)              	smpsCall            Electoria_Call0F
(1)  711/   10697 : F8                          dc.b    $F8
(1)  711/   10698 : =>TRUE                       if SonicDriverVer<>1
(1)  711/   10698 : CC86                                dc.w    z80_ptr(Electoria_Call0F)
(1)  711/   1069A : =>FALSE                      else
(1)  711/   1069A :                                     dc.w    Electoria_Call0F-*-1
(1)  711/   1069A : [711]                        endif
(1)  712/   1069A : (MACRO)              	smpsCall            Electoria_Call0E
(1)  712/   1069A : F8                          dc.b    $F8
(1)  712/   1069B : =>TRUE                       if SonicDriverVer<>1
(1)  712/   1069B : BA86                                dc.w    z80_ptr(Electoria_Call0E)
(1)  712/   1069D : =>FALSE                      else
(1)  712/   1069D :                                     dc.w    Electoria_Call0E-*-1
(1)  712/   1069D : [712]                        endif
(1)  713/   1069D : AA06 AC80 B180      	dc.b	nF3, $06, nG3, nRst, nC4, nRst, nRst, nF3, nG3, nRst, $30
            106A3 : 80AA AC80 30       
(1)  714/   106A8 :                     
(1)  715/   106A8 :                     Electoria_Loop25:
(1)  716/   106A8 : (MACRO)              	smpsCall            Electoria_Call0E
(1)  716/   106A8 : F8                          dc.b    $F8
(1)  716/   106A9 : =>TRUE                       if SonicDriverVer<>1
(1)  716/   106A9 : BA86                                dc.w    z80_ptr(Electoria_Call0E)
(1)  716/   106AB : =>FALSE                      else
(1)  716/   106AB :                                     dc.w    Electoria_Call0E-*-1
(1)  716/   106AB : [716]                        endif
(1)  717/   106AB : (MACRO)              	smpsCall            Electoria_Call0F
(1)  717/   106AB : F8                          dc.b    $F8
(1)  717/   106AC : =>TRUE                       if SonicDriverVer<>1
(1)  717/   106AC : CC86                                dc.w    z80_ptr(Electoria_Call0F)
(1)  717/   106AE : =>FALSE                      else
(1)  717/   106AE :                                     dc.w    Electoria_Call0F-*-1
(1)  717/   106AE : [717]                        endif
(1)  718/   106AE : (MACRO)              	smpsLoop            $00, $02, Electoria_Loop25
(1)  718/   106AE : F7                          dc.b    $F7
(1)  718/   106AF : 0002                        dc.b    $00,$02
(1)  718/   106B1 : =>TRUE                       if SonicDriverVer<>1
(1)  718/   106B1 : A886                                dc.w    z80_ptr(Electoria_Loop25)
(1)  718/   106B3 : =>FALSE                      else
(1)  718/   106B3 :                                     dc.w    Electoria_Loop25-*-1
(1)  718/   106B3 : [718]                        endif
(1)  719/   106B3 : (MACRO)              	smpsChangeTransposition $F4
(1)  719/   106B3 : =>TRUE                       if SonicDriverVer>=3
(1)  719/   106B3 : FBF4                                dc.b    $FB,$F4
(1)  719/   106B5 : =>FALSE                      else
(1)  719/   106B5 :                                     dc.b    $E9,$F4
(1)  719/   106B5 : [719]                        endif
(1)  720/   106B5 : (MACRO)              	smpsPSGAlterVol     $FF
(1)  720/   106B5 : ECFF                        dc.b    $EC,$FF
(1)  721/   106B7 : (MACRO)              	smpsJump            Electoria_Loop21
(1)  721/   106B7 : F6                          dc.b    $F6
(1)  721/   106B8 : =>TRUE                       if SonicDriverVer<>1
(1)  721/   106B8 : 6386                                dc.w    z80_ptr(Electoria_Loop21)
(1)  721/   106BA : =>FALSE                      else
(1)  721/   106BA :                                     dc.w    Electoria_Loop21-*-1
(1)  721/   106BA : [721]                        endif
(1)  722/   106BA :                     
(1)  723/   106BA :                     Electoria_Call0E:
(1)  724/   106BA : AA06 AC80 B080      	dc.b	nF3, $06, nG3, nRst, nB3, nRst, nRst, nF3, nG3, nRst, nB3, nRst
            106C0 : 80AA AC80 B080    
(1)  725/   106C6 : AAAC 80B0 80        	dc.b	nF3, nG3, nRst, nB3, nRst
(1)  726/   106CB : (MACRO)              	smpsReturn
(1)  726/   106CB : =>TRUE                       if SonicDriverVer>=3
(1)  726/   106CB : F9                                  dc.b    $F9
(1)  726/   106CC : =>FALSE                      else
(1)  726/   106CC :                                     dc.b    $E3
(1)  726/   106CC : [726]                        endif
(1)  727/   106CC :                     
(1)  728/   106CC :                     Electoria_Call0F:
(1)  729/   106CC : AA06 AC80 B180      	dc.b	nF3, $06, nG3, nRst, nC4, nRst, nRst, nF3, nG3, nRst, nC4, nRst
            106D2 : 80AA AC80 B180    
(1)  730/   106D8 : AAAC 80B1 80        	dc.b	nF3, nG3, nRst, nC4, nRst
(1)  731/   106DD : (MACRO)              	smpsReturn
(1)  731/   106DD : =>TRUE                       if SonicDriverVer>=3
(1)  731/   106DD : F9                                  dc.b    $F9
(1)  731/   106DE : =>FALSE                      else
(1)  731/   106DE :                                     dc.b    $E3
(1)  731/   106DE : [731]                        endif
(1)  732/   106DE :                     
(1)  733/   106DE :                     Electoria_Call10:
(1)  734/   106DE : 800C A780 06A7      	dc.b	nRst, $0C, nD3, nRst, $06, nD3, $0C, nRst, $06, nD3, $0C, nRst
            106E4 : 0C80 06A7 0C80    
(1)  735/   106EA : 06A7 0C80 06A7 0C   	dc.b	$06, nD3, $0C, nRst, $06, nD3, $0C
(1)  736/   106F1 : (MACRO)              	smpsReturn
(1)  736/   106F1 : =>TRUE                       if SonicDriverVer>=3
(1)  736/   106F1 : F9                                  dc.b    $F9
(1)  736/   106F2 : =>FALSE                      else
(1)  736/   106F2 :                                     dc.b    $E3
(1)  736/   106F2 : [736]                        endif
(1)  737/   106F2 :                     
(1)  738/   106F2 :                     Electoria_Call11:
(1)  739/   106F2 : 800C AA80 06AA      	dc.b	nRst, $0C, nF3, nRst, $06, nF3, $0C, $06, nRst, $30
            106F8 : 0C06 8030          
(1)  740/   106FC : (MACRO)              	smpsReturn
(1)  740/   106FC : =>TRUE                       if SonicDriverVer>=3
(1)  740/   106FC : F9                                  dc.b    $F9
(1)  740/   106FD : =>FALSE                      else
(1)  740/   106FD :                                     dc.b    $E3
(1)  740/   106FD : [740]                        endif
(1)  741/   106FD :                     
(1)  742/   106FD :                     ; PSG3 Data
(1)  743/   106FD :                     Electoria_PSG3:
(1)  744/   106FD : (MACRO)              	smpsPSGform         $E7
(1)  744/   106FD : F3E7                        dc.b    $F3,$E7
(1)  745/   106FF :                     
(1)  746/   106FF :                     Electoria_Loop1C:
(1)  747/   106FF : (MACRO)              	smpsCall            Electoria_Call0C
(1)  747/   106FF : F8                          dc.b    $F8
(1)  747/   10700 : =>TRUE                       if SonicDriverVer<>1
(1)  747/   10700 : 2887                                dc.w    z80_ptr(Electoria_Call0C)
(1)  747/   10702 : =>FALSE                      else
(1)  747/   10702 :                                     dc.w    Electoria_Call0C-*-1
(1)  747/   10702 : [747]                        endif
(1)  748/   10702 : (MACRO)              	smpsLoop            $01, $09, Electoria_Loop1C
(1)  748/   10702 : F7                          dc.b    $F7
(1)  748/   10703 : 0109                        dc.b    $01,$09
(1)  748/   10705 : =>TRUE                       if SonicDriverVer<>1
(1)  748/   10705 : FF86                                dc.w    z80_ptr(Electoria_Loop1C)
(1)  748/   10707 : =>FALSE                      else
(1)  748/   10707 :                                     dc.w    Electoria_Loop1C-*-1
(1)  748/   10707 : [748]                        endif
(1)  749/   10707 :                     
(1)  750/   10707 :                     Electoria_Loop1D:
(1)  751/   10707 : (MACRO)              	smpsCall            Electoria_Call0C
(1)  751/   10707 : F8                          dc.b    $F8
(1)  751/   10708 : =>TRUE                       if SonicDriverVer<>1
(1)  751/   10708 : 2887                                dc.w    z80_ptr(Electoria_Call0C)
(1)  751/   1070A : =>FALSE                      else
(1)  751/   1070A :                                     dc.w    Electoria_Call0C-*-1
(1)  751/   1070A : [751]                        endif
(1)  752/   1070A : (MACRO)              	smpsLoop            $01, $0F, Electoria_Loop1D
(1)  752/   1070A : F7                          dc.b    $F7
(1)  752/   1070B : 010F                        dc.b    $01,$0F
(1)  752/   1070D : =>TRUE                       if SonicDriverVer<>1
(1)  752/   1070D : 0787                                dc.w    z80_ptr(Electoria_Loop1D)
(1)  752/   1070F : =>FALSE                      else
(1)  752/   1070F :                                     dc.w    Electoria_Loop1D-*-1
(1)  752/   1070F : [752]                        endif
(1)  753/   1070F : (MACRO)              	smpsCall            Electoria_Call0D
(1)  753/   1070F : F8                          dc.b    $F8
(1)  753/   10710 : =>TRUE                       if SonicDriverVer<>1
(1)  753/   10710 : 3587                                dc.w    z80_ptr(Electoria_Call0D)
(1)  753/   10712 : =>FALSE                      else
(1)  753/   10712 :                                     dc.w    Electoria_Call0D-*-1
(1)  753/   10712 : [753]                        endif
(1)  754/   10712 :                     
(1)  755/   10712 :                     Electoria_Loop1E:
(1)  756/   10712 : (MACRO)              	smpsCall            Electoria_Call0C
(1)  756/   10712 : F8                          dc.b    $F8
(1)  756/   10713 : =>TRUE                       if SonicDriverVer<>1
(1)  756/   10713 : 2887                                dc.w    z80_ptr(Electoria_Call0C)
(1)  756/   10715 : =>FALSE                      else
(1)  756/   10715 :                                     dc.w    Electoria_Call0C-*-1
(1)  756/   10715 : [756]                        endif
(1)  757/   10715 : (MACRO)              	smpsLoop            $01, $13, Electoria_Loop1E
(1)  757/   10715 : F7                          dc.b    $F7
(1)  757/   10716 : 0113                        dc.b    $01,$13
(1)  757/   10718 : =>TRUE                       if SonicDriverVer<>1
(1)  757/   10718 : 1287                                dc.w    z80_ptr(Electoria_Loop1E)
(1)  757/   1071A : =>FALSE                      else
(1)  757/   1071A :                                     dc.w    Electoria_Loop1E-*-1
(1)  757/   1071A : [757]                        endif
(1)  758/   1071A : (MACRO)              	smpsCall            Electoria_Call0D
(1)  758/   1071A : F8                          dc.b    $F8
(1)  758/   1071B : =>TRUE                       if SonicDriverVer<>1
(1)  758/   1071B : 3587                                dc.w    z80_ptr(Electoria_Call0D)
(1)  758/   1071D : =>FALSE                      else
(1)  758/   1071D :                                     dc.w    Electoria_Call0D-*-1
(1)  758/   1071D : [758]                        endif
(1)  759/   1071D :                     
(1)  760/   1071D :                     Electoria_Loop1F:
(1)  761/   1071D : (MACRO)              	smpsCall            Electoria_Call0C
(1)  761/   1071D : F8                          dc.b    $F8
(1)  761/   1071E : =>TRUE                       if SonicDriverVer<>1
(1)  761/   1071E : 2887                                dc.w    z80_ptr(Electoria_Call0C)
(1)  761/   10720 : =>FALSE                      else
(1)  761/   10720 :                                     dc.w    Electoria_Call0C-*-1
(1)  761/   10720 : [761]                        endif
(1)  762/   10720 : (MACRO)              	smpsLoop            $01, $04, Electoria_Loop1F
(1)  762/   10720 : F7                          dc.b    $F7
(1)  762/   10721 : 0104                        dc.b    $01,$04
(1)  762/   10723 : =>TRUE                       if SonicDriverVer<>1
(1)  762/   10723 : 1D87                                dc.w    z80_ptr(Electoria_Loop1F)
(1)  762/   10725 : =>FALSE                      else
(1)  762/   10725 :                                     dc.w    Electoria_Loop1F-*-1
(1)  762/   10725 : [762]                        endif
(1)  763/   10725 : (MACRO)              	smpsJump            Electoria_Loop1D
(1)  763/   10725 : F6                          dc.b    $F6
(1)  763/   10726 : =>TRUE                       if SonicDriverVer<>1
(1)  763/   10726 : 0787                                dc.w    z80_ptr(Electoria_Loop1D)
(1)  763/   10728 : =>FALSE                      else
(1)  763/   10728 :                                     dc.w    Electoria_Loop1D-*-1
(1)  763/   10728 : [763]                        endif
(1)  764/   10728 :                     
(1)  765/   10728 :                     Electoria_Call0C:
(1)  766/   10728 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  766/   10728 : F502                        dc.b    $F5,sTone_02
(1)  767/   1072A : B10C                	dc.b	(nMaxPSG2-$23)&$FF, $0C
(1)  768/   1072C : (MACRO)              	smpsPSGvoice        sTone_05
(1)  768/   1072C : F505                        dc.b    $F5,sTone_05
(1)  769/   1072E : B1                  	dc.b	(nMaxPSG2-$23)&$FF
(1)  770/   1072F : (MACRO)              	smpsLoop            $00, $04, Electoria_Call0C
(1)  770/   1072F : F7                          dc.b    $F7
(1)  770/   10730 : 0004                        dc.b    $00,$04
(1)  770/   10732 : =>TRUE                       if SonicDriverVer<>1
(1)  770/   10732 : 2887                                dc.w    z80_ptr(Electoria_Call0C)
(1)  770/   10734 : =>FALSE                      else
(1)  770/   10734 :                                     dc.w    Electoria_Call0C-*-1
(1)  770/   10734 : [770]                        endif
(1)  771/   10734 : (MACRO)              	smpsReturn
(1)  771/   10734 : =>TRUE                       if SonicDriverVer>=3
(1)  771/   10734 : F9                                  dc.b    $F9
(1)  771/   10735 : =>FALSE                      else
(1)  771/   10735 :                                     dc.b    $E3
(1)  771/   10735 : [771]                        endif
(1)  772/   10735 :                     
(1)  773/   10735 :                     Electoria_Call0D:
(1)  774/   10735 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  774/   10735 : F502                        dc.b    $F5,sTone_02
(1)  775/   10737 : B10C                	dc.b	(nMaxPSG2-$23)&$FF, $0C
(1)  776/   10739 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  776/   10739 : F505                        dc.b    $F5,sTone_05
(1)  777/   1073B : 0C                  	dc.b	$0C
(1)  778/   1073C : (MACRO)              	smpsPSGvoice        sTone_02
(1)  778/   1073C : F502                        dc.b    $F5,sTone_02
(1)  779/   1073E : 0C                  	dc.b	$0C
(1)  780/   1073F : (MACRO)              	smpsPSGvoice        sTone_05
(1)  780/   1073F : F505                        dc.b    $F5,sTone_05
(1)  781/   10741 : 06                  	dc.b	$06
(1)  782/   10742 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  782/   10742 : F502                        dc.b    $F5,sTone_02
(1)  783/   10744 : 0680 30             	dc.b	$06, nRst, $30
(1)  784/   10747 : (MACRO)              	smpsReturn
(1)  784/   10747 : =>TRUE                       if SonicDriverVer>=3
(1)  784/   10747 : F9                                  dc.b    $F9
(1)  784/   10748 : =>FALSE                      else
(1)  784/   10748 :                                     dc.b    $E3
(1)  784/   10748 : [784]                        endif
(1)  785/   10748 :                     
(1)  786/   10748 :                     ; DAC Data
(1)  787/   10748 :                     Electoria_DAC:
(1)  788/   10748 : 8206 8082 8280      	dc.b	dSnare, $06, nRst, dSnare, dSnare, nRst, dSnare, dSnare, dKick, dSnare, dHighTom, dMidTom
            1074E : 8282 8182 8384    
(1)  789/   10754 : 8282 8485 82        	dc.b	dSnare, dSnare, dMidTom, dLowTom, dSnare
(1)  790/   10759 :                     
(1)  791/   10759 :                     Electoria_Loop00:
(1)  792/   10759 : (MACRO)              	smpsCall            Electoria_Call00
(1)  792/   10759 : F8                          dc.b    $F8
(1)  792/   1075A : =>TRUE                       if SonicDriverVer<>1
(1)  792/   1075A : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  792/   1075C : =>FALSE                      else
(1)  792/   1075C :                                     dc.w    Electoria_Call00-*-1
(1)  792/   1075C : [792]                        endif
(1)  793/   1075C : (MACRO)              	smpsCall            Electoria_Call01
(1)  793/   1075C : F8                          dc.b    $F8
(1)  793/   1075D : =>TRUE                       if SonicDriverVer<>1
(1)  793/   1075D : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  793/   1075F : =>FALSE                      else
(1)  793/   1075F :                                     dc.w    Electoria_Call01-*-1
(1)  793/   1075F : [793]                        endif
(1)  794/   1075F : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop00
(1)  794/   1075F : F7                          dc.b    $F7
(1)  794/   10760 : 0003                        dc.b    $00,$03
(1)  794/   10762 : =>TRUE                       if SonicDriverVer<>1
(1)  794/   10762 : 5987                                dc.w    z80_ptr(Electoria_Loop00)
(1)  794/   10764 : =>FALSE                      else
(1)  794/   10764 :                                     dc.w    Electoria_Loop00-*-1
(1)  794/   10764 : [794]                        endif
(1)  795/   10764 : (MACRO)              	smpsCall            Electoria_Call00
(1)  795/   10764 : F8                          dc.b    $F8
(1)  795/   10765 : =>TRUE                       if SonicDriverVer<>1
(1)  795/   10765 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  795/   10767 : =>FALSE                      else
(1)  795/   10767 :                                     dc.w    Electoria_Call00-*-1
(1)  795/   10767 : [795]                        endif
(1)  796/   10767 : (MACRO)              	smpsCall            Electoria_Call02
(1)  796/   10767 : F8                          dc.b    $F8
(1)  796/   10768 : =>TRUE                       if SonicDriverVer<>1
(1)  796/   10768 : F587                                dc.w    z80_ptr(Electoria_Call02)
(1)  796/   1076A : =>FALSE                      else
(1)  796/   1076A :                                     dc.w    Electoria_Call02-*-1
(1)  796/   1076A : [796]                        endif
(1)  797/   1076A :                     
(1)  798/   1076A :                     Electoria_Loop01:
(1)  799/   1076A : (MACRO)              	smpsCall            Electoria_Call00
(1)  799/   1076A : F8                          dc.b    $F8
(1)  799/   1076B : =>TRUE                       if SonicDriverVer<>1
(1)  799/   1076B : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  799/   1076D : =>FALSE                      else
(1)  799/   1076D :                                     dc.w    Electoria_Call00-*-1
(1)  799/   1076D : [799]                        endif
(1)  800/   1076D : (MACRO)              	smpsCall            Electoria_Call01
(1)  800/   1076D : F8                          dc.b    $F8
(1)  800/   1076E : =>TRUE                       if SonicDriverVer<>1
(1)  800/   1076E : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  800/   10770 : =>FALSE                      else
(1)  800/   10770 :                                     dc.w    Electoria_Call01-*-1
(1)  800/   10770 : [800]                        endif
(1)  801/   10770 : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop01
(1)  801/   10770 : F7                          dc.b    $F7
(1)  801/   10771 : 0003                        dc.b    $00,$03
(1)  801/   10773 : =>TRUE                       if SonicDriverVer<>1
(1)  801/   10773 : 6A87                                dc.w    z80_ptr(Electoria_Loop01)
(1)  801/   10775 : =>FALSE                      else
(1)  801/   10775 :                                     dc.w    Electoria_Loop01-*-1
(1)  801/   10775 : [801]                        endif
(1)  802/   10775 : (MACRO)              	smpsCall            Electoria_Call00
(1)  802/   10775 : F8                          dc.b    $F8
(1)  802/   10776 : =>TRUE                       if SonicDriverVer<>1
(1)  802/   10776 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  802/   10778 : =>FALSE                      else
(1)  802/   10778 :                                     dc.w    Electoria_Call00-*-1
(1)  802/   10778 : [802]                        endif
(1)  803/   10778 : (MACRO)              	smpsCall            Electoria_Call03
(1)  803/   10778 : F8                          dc.b    $F8
(1)  803/   10779 : =>TRUE                       if SonicDriverVer<>1
(1)  803/   10779 : 0288                                dc.w    z80_ptr(Electoria_Call03)
(1)  803/   1077B : =>FALSE                      else
(1)  803/   1077B :                                     dc.w    Electoria_Call03-*-1
(1)  803/   1077B : [803]                        endif
(1)  804/   1077B :                     
(1)  805/   1077B :                     Electoria_Loop02:
(1)  806/   1077B : (MACRO)              	smpsCall            Electoria_Call00
(1)  806/   1077B : F8                          dc.b    $F8
(1)  806/   1077C : =>TRUE                       if SonicDriverVer<>1
(1)  806/   1077C : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  806/   1077E : =>FALSE                      else
(1)  806/   1077E :                                     dc.w    Electoria_Call00-*-1
(1)  806/   1077E : [806]                        endif
(1)  807/   1077E : (MACRO)              	smpsCall            Electoria_Call01
(1)  807/   1077E : F8                          dc.b    $F8
(1)  807/   1077F : =>TRUE                       if SonicDriverVer<>1
(1)  807/   1077F : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  807/   10781 : =>FALSE                      else
(1)  807/   10781 :                                     dc.w    Electoria_Call01-*-1
(1)  807/   10781 : [807]                        endif
(1)  808/   10781 : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop02
(1)  808/   10781 : F7                          dc.b    $F7
(1)  808/   10782 : 0003                        dc.b    $00,$03
(1)  808/   10784 : =>TRUE                       if SonicDriverVer<>1
(1)  808/   10784 : 7B87                                dc.w    z80_ptr(Electoria_Loop02)
(1)  808/   10786 : =>FALSE                      else
(1)  808/   10786 :                                     dc.w    Electoria_Loop02-*-1
(1)  808/   10786 : [808]                        endif
(1)  809/   10786 : (MACRO)              	smpsCall            Electoria_Call00
(1)  809/   10786 : F8                          dc.b    $F8
(1)  809/   10787 : =>TRUE                       if SonicDriverVer<>1
(1)  809/   10787 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  809/   10789 : =>FALSE                      else
(1)  809/   10789 :                                     dc.w    Electoria_Call00-*-1
(1)  809/   10789 : [809]                        endif
(1)  810/   10789 : 8204 8282 8206      	dc.b	dSnare, $04, dSnare, dSnare, dSnare, $06, dSnare, dSnare, dSnare, dSnare, dSnare, nRst
            1078F : 8282 8282 8280    
(1)  811/   10795 : 30                  	dc.b	$30
(1)  812/   10796 :                     
(1)  813/   10796 :                     Electoria_Loop03:
(1)  814/   10796 : (MACRO)              	smpsCall            Electoria_Call00
(1)  814/   10796 : F8                          dc.b    $F8
(1)  814/   10797 : =>TRUE                       if SonicDriverVer<>1
(1)  814/   10797 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  814/   10799 : =>FALSE                      else
(1)  814/   10799 :                                     dc.w    Electoria_Call00-*-1
(1)  814/   10799 : [814]                        endif
(1)  815/   10799 : (MACRO)              	smpsCall            Electoria_Call01
(1)  815/   10799 : F8                          dc.b    $F8
(1)  815/   1079A : =>TRUE                       if SonicDriverVer<>1
(1)  815/   1079A : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  815/   1079C : =>FALSE                      else
(1)  815/   1079C :                                     dc.w    Electoria_Call01-*-1
(1)  815/   1079C : [815]                        endif
(1)  816/   1079C : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop03
(1)  816/   1079C : F7                          dc.b    $F7
(1)  816/   1079D : 0003                        dc.b    $00,$03
(1)  816/   1079F : =>TRUE                       if SonicDriverVer<>1
(1)  816/   1079F : 9687                                dc.w    z80_ptr(Electoria_Loop03)
(1)  816/   107A1 : =>FALSE                      else
(1)  816/   107A1 :                                     dc.w    Electoria_Loop03-*-1
(1)  816/   107A1 : [816]                        endif
(1)  817/   107A1 : (MACRO)              	smpsCall            Electoria_Call00
(1)  817/   107A1 : F8                          dc.b    $F8
(1)  817/   107A2 : =>TRUE                       if SonicDriverVer<>1
(1)  817/   107A2 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  817/   107A4 : =>FALSE                      else
(1)  817/   107A4 :                                     dc.w    Electoria_Call00-*-1
(1)  817/   107A4 : [817]                        endif
(1)  818/   107A4 : (MACRO)              	smpsCall            Electoria_Call02
(1)  818/   107A4 : F8                          dc.b    $F8
(1)  818/   107A5 : =>TRUE                       if SonicDriverVer<>1
(1)  818/   107A5 : F587                                dc.w    z80_ptr(Electoria_Call02)
(1)  818/   107A7 : =>FALSE                      else
(1)  818/   107A7 :                                     dc.w    Electoria_Call02-*-1
(1)  818/   107A7 : [818]                        endif
(1)  819/   107A7 :                     
(1)  820/   107A7 :                     Electoria_Loop04:
(1)  821/   107A7 : (MACRO)              	smpsCall            Electoria_Call00
(1)  821/   107A7 : F8                          dc.b    $F8
(1)  821/   107A8 : =>TRUE                       if SonicDriverVer<>1
(1)  821/   107A8 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  821/   107AA : =>FALSE                      else
(1)  821/   107AA :                                     dc.w    Electoria_Call00-*-1
(1)  821/   107AA : [821]                        endif
(1)  822/   107AA : (MACRO)              	smpsCall            Electoria_Call01
(1)  822/   107AA : F8                          dc.b    $F8
(1)  822/   107AB : =>TRUE                       if SonicDriverVer<>1
(1)  822/   107AB : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  822/   107AD : =>FALSE                      else
(1)  822/   107AD :                                     dc.w    Electoria_Call01-*-1
(1)  822/   107AD : [822]                        endif
(1)  823/   107AD : (MACRO)              	smpsLoop            $00, $03, Electoria_Loop04
(1)  823/   107AD : F7                          dc.b    $F7
(1)  823/   107AE : 0003                        dc.b    $00,$03
(1)  823/   107B0 : =>TRUE                       if SonicDriverVer<>1
(1)  823/   107B0 : A787                                dc.w    z80_ptr(Electoria_Loop04)
(1)  823/   107B2 : =>FALSE                      else
(1)  823/   107B2 :                                     dc.w    Electoria_Loop04-*-1
(1)  823/   107B2 : [823]                        endif
(1)  824/   107B2 : (MACRO)              	smpsCall            Electoria_Call00
(1)  824/   107B2 : F8                          dc.b    $F8
(1)  824/   107B3 : =>TRUE                       if SonicDriverVer<>1
(1)  824/   107B3 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  824/   107B5 : =>FALSE                      else
(1)  824/   107B5 :                                     dc.w    Electoria_Call00-*-1
(1)  824/   107B5 : [824]                        endif
(1)  825/   107B5 : (MACRO)              	smpsCall            Electoria_Call03
(1)  825/   107B5 : F8                          dc.b    $F8
(1)  825/   107B6 : =>TRUE                       if SonicDriverVer<>1
(1)  825/   107B6 : 0288                                dc.w    z80_ptr(Electoria_Call03)
(1)  825/   107B8 : =>FALSE                      else
(1)  825/   107B8 :                                     dc.w    Electoria_Call03-*-1
(1)  825/   107B8 : [825]                        endif
(1)  826/   107B8 : (MACRO)              	smpsCall            Electoria_Call00
(1)  826/   107B8 : F8                          dc.b    $F8
(1)  826/   107B9 : =>TRUE                       if SonicDriverVer<>1
(1)  826/   107B9 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  826/   107BB : =>FALSE                      else
(1)  826/   107BB :                                     dc.w    Electoria_Call00-*-1
(1)  826/   107BB : [826]                        endif
(1)  827/   107BB : (MACRO)              	smpsCall            Electoria_Call01
(1)  827/   107BB : F8                          dc.b    $F8
(1)  827/   107BC : =>TRUE                       if SonicDriverVer<>1
(1)  827/   107BC : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  827/   107BE : =>FALSE                      else
(1)  827/   107BE :                                     dc.w    Electoria_Call01-*-1
(1)  827/   107BE : [827]                        endif
(1)  828/   107BE : (MACRO)              	smpsCall            Electoria_Call00
(1)  828/   107BE : F8                          dc.b    $F8
(1)  828/   107BF : =>TRUE                       if SonicDriverVer<>1
(1)  828/   107BF : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  828/   107C1 : =>FALSE                      else
(1)  828/   107C1 :                                     dc.w    Electoria_Call00-*-1
(1)  828/   107C1 : [828]                        endif
(1)  829/   107C1 : 8106 8212 8281      	dc.b	dKick, $06, dSnare, $12, dSnare, dKick, $06, nRst, $30
            107C7 : 0680 30          
(1)  830/   107CA : (MACRO)              	smpsCall            Electoria_Call00
(1)  830/   107CA : F8                          dc.b    $F8
(1)  830/   107CB : =>TRUE                       if SonicDriverVer<>1
(1)  830/   107CB : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  830/   107CD : =>FALSE                      else
(1)  830/   107CD :                                     dc.w    Electoria_Call00-*-1
(1)  830/   107CD : [830]                        endif
(1)  831/   107CD : (MACRO)              	smpsCall            Electoria_Call01
(1)  831/   107CD : F8                          dc.b    $F8
(1)  831/   107CE : =>TRUE                       if SonicDriverVer<>1
(1)  831/   107CE : E787                                dc.w    z80_ptr(Electoria_Call01)
(1)  831/   107D0 : =>FALSE                      else
(1)  831/   107D0 :                                     dc.w    Electoria_Call01-*-1
(1)  831/   107D0 : [831]                        endif
(1)  832/   107D0 : (MACRO)              	smpsCall            Electoria_Call00
(1)  832/   107D0 : F8                          dc.b    $F8
(1)  832/   107D1 : =>TRUE                       if SonicDriverVer<>1
(1)  832/   107D1 : D987                                dc.w    z80_ptr(Electoria_Call00)
(1)  832/   107D3 : =>FALSE                      else
(1)  832/   107D3 :                                     dc.w    Electoria_Call00-*-1
(1)  832/   107D3 : [832]                        endif
(1)  833/   107D3 : (MACRO)              	smpsCall            Electoria_Call02
(1)  833/   107D3 : F8                          dc.b    $F8
(1)  833/   107D4 : =>TRUE                       if SonicDriverVer<>1
(1)  833/   107D4 : F587                                dc.w    z80_ptr(Electoria_Call02)
(1)  833/   107D6 : =>FALSE                      else
(1)  833/   107D6 :                                     dc.w    Electoria_Call02-*-1
(1)  833/   107D6 : [833]                        endif
(1)  834/   107D6 : (MACRO)              	smpsJump            Electoria_Loop01
(1)  834/   107D6 : F6                          dc.b    $F6
(1)  834/   107D7 : =>TRUE                       if SonicDriverVer<>1
(1)  834/   107D7 : 6A87                                dc.w    z80_ptr(Electoria_Loop01)
(1)  834/   107D9 : =>FALSE                      else
(1)  834/   107D9 :                                     dc.w    Electoria_Loop01-*-1
(1)  834/   107D9 : [834]                        endif
(1)  835/   107D9 :                     
(1)  836/   107D9 :                     Electoria_Call00:
(1)  837/   107D9 : 810C 8182 8006      	dc.b	dKick, $0C, dKick, dSnare, nRst, $06, dSnare, nRst, dSnare, dKick, nRst, dSnare
            107DF : 8280 8281 8082    
(1)  838/   107E5 : 18                  	dc.b	$18
(1)  839/   107E6 : (MACRO)              	smpsReturn
(1)  839/   107E6 : =>TRUE                       if SonicDriverVer>=3
(1)  839/   107E6 : F9                                  dc.b    $F9
(1)  839/   107E7 : =>FALSE                      else
(1)  839/   107E7 :                                     dc.b    $E3
(1)  839/   107E7 : [839]                        endif
(1)  840/   107E7 :                     
(1)  841/   107E7 :                     Electoria_Call01:
(1)  842/   107E7 : 8106 8212 8281      	dc.b	dKick, $06, dSnare, $12, dSnare, dKick, $06, nRst, dSnare, dKick, nRst, dSnare
            107ED : 0680 8281 8082    
(1)  843/   107F3 : 18                  	dc.b	$18
(1)  844/   107F4 : (MACRO)              	smpsReturn
(1)  844/   107F4 : =>TRUE                       if SonicDriverVer>=3
(1)  844/   107F4 : F9                                  dc.b    $F9
(1)  844/   107F5 : =>FALSE                      else
(1)  844/   107F5 :                                     dc.b    $E3
(1)  844/   107F5 : [844]                        endif
(1)  845/   107F5 :                     
(1)  846/   107F5 :                     Electoria_Call02:
(1)  847/   107F5 : 840C 0C0C 0606      	dc.b	dMidTom, $0C, $0C, $0C, $06, $06, nRst, dMidTom, dMidTom, $0C, dMidTom, dMidTom
            107FB : 8084 840C 8484    
(1)  848/   10801 : (MACRO)              	smpsReturn
(1)  848/   10801 : =>TRUE                       if SonicDriverVer>=3
(1)  848/   10801 : F9                                  dc.b    $F9
(1)  848/   10802 : =>FALSE                      else
(1)  848/   10802 :                                     dc.b    $E3
(1)  848/   10802 : [848]                        endif
(1)  849/   10802 :                     
(1)  850/   10802 :                     Electoria_Call03:
(1)  851/   10802 : 8006 8212 8218      	dc.b	nRst, $06, dSnare, $12, dSnare, $18, nRst, $06, dSnare, $12, dSnare, $18
            10808 : 8006 8212 8218    
(1)  852/   1080E : (MACRO)              	smpsReturn
(1)  852/   1080E : =>TRUE                       if SonicDriverVer>=3
(1)  852/   1080E : F9                                  dc.b    $F9
(1)  852/   1080F : =>FALSE                      else
(1)  852/   1080F :                                     dc.b    $E3
(1)  852/   1080F : [852]                        endif
(1)  853/   1080F :                     
(1)  854/   1080F :                     Electoria_Voices:
(1)  855/   1080F :                     ;	Voice $00
(1)  856/   1080F :                     ;	$3B
(1)  857/   1080F :                     ;	$12, $11, $13, $01, 	$1F, $1F, $1F, $1E, 	$02, $0C, $13, $07
(1)  858/   1080F :                     ;	$12, $0A, $05, $07, 	$0F, $3F, $5F, $3F, 	$16, $10, $15, $80
(1)  859/   1080F : (MACRO)              	smpsVcAlgorithm     $03
(1)  859/   1080F : =$3                  vcAlgorithm set $03
(1)  860/   1080F : (MACRO)              	smpsVcFeedback      $07
(1)  860/   1080F : =$7                  vcFeedback set $07
(1)  861/   1080F : (MACRO)              	smpsVcUnusedBits    $00
(1)  861/   1080F : =$0                  vcUnusedBits set $00
(1)  861/   1080F : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  861/   1080F :                                     set vcD1R1Unk,<<5
(1)  861/   1080F :                                     set vcD1R2Unk,<<5
(1)  861/   1080F :                                     set vcD1R3Unk,<<5
(1)  861/   1080F :                                     set vcD1R4Unk,<<5
(1)  861/   1080F : =>TRUE                       else
(1)  861/   1080F : =$0                                  set vcD1R1Unk,0
(1)  861/   1080F : =$0                                  set vcD1R2Unk,0
(1)  861/   1080F : =$0                                  set vcD1R3Unk,0
(1)  861/   1080F : =$0                                  set vcD1R4Unk,0
(1)  861/   1080F : [861]                        endif
(1)  862/   1080F : (MACRO)              	smpsVcDetune        $00, $01, $01, $01
(1)  862/   1080F : =$0                          set vcDT1,$00
(1)  862/   1080F : =$1                          set vcDT2,$01
(1)  862/   1080F : =$1                          set vcDT3,$01
(1)  862/   1080F : =$1                          set vcDT4,$01
(1)  863/   1080F : (MACRO)              	smpsVcCoarseFreq    $01, $03, $01, $02
(1)  863/   1080F : =$1                          set vcCF1,$01
(1)  863/   1080F : =$3                          set vcCF2,$03
(1)  863/   1080F : =$1                          set vcCF3,$01
(1)  863/   1080F : =$2                          set vcCF4,$02
(1)  864/   1080F : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  864/   1080F : =$0                          set vcRS1,$00
(1)  864/   1080F : =$0                          set vcRS2,$00
(1)  864/   1080F : =$0                          set vcRS3,$00
(1)  864/   1080F : =$0                          set vcRS4,$00
(1)  865/   1080F : (MACRO)              	smpsVcAttackRate    $1E, $1F, $1F, $1F
(1)  865/   1080F : =$1E                         set vcAR1,$1E
(1)  865/   1080F : =$1F                         set vcAR2,$1F
(1)  865/   1080F : =$1F                         set vcAR3,$1F
(1)  865/   1080F : =$1F                         set vcAR4,$1F
(1)  866/   1080F : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  866/   1080F : =>FALSE                      if SourceSMPS2ASM==0
(1)  866/   1080F :                                     set vcAM1,$00<<5
(1)  866/   1080F :                                     set vcAM2,$00<<5
(1)  866/   1080F :                                     set vcAM3,$00<<5
(1)  866/   1080F :                                     set vcAM4,$00<<5
(1)  866/   1080F : =>TRUE                       else
(1)  866/   1080F : =$0                                  set vcAM1,$00<<7
(1)  866/   1080F : =$0                                  set vcAM2,$00<<7
(1)  866/   1080F : =$0                                  set vcAM3,$00<<7
(1)  866/   1080F : =$0                                  set vcAM4,$00<<7
(1)  866/   1080F : [866]                        endif
(1)  867/   1080F : (MACRO)              	smpsVcDecayRate1    $07, $13, $0C, $02
(1)  867/   1080F : =$7                          set vcD1R1,$07
(1)  867/   1080F : =$13                         set vcD1R2,$13
(1)  867/   1080F : =$C                          set vcD1R3,$0C
(1)  867/   1080F : =$2                          set vcD1R4,$02
(1)  868/   1080F : (MACRO)              	smpsVcDecayRate2    $07, $05, $0A, $12
(1)  868/   1080F : =$7                          set vcD2R1,$07
(1)  868/   1080F : =$5                          set vcD2R2,$05
(1)  868/   1080F : =$A                          set vcD2R3,$0A
(1)  868/   1080F : =$12                         set vcD2R4,$12
(1)  869/   1080F : (MACRO)              	smpsVcDecayLevel    $03, $05, $03, $00
(1)  869/   1080F : =$3                          set vcDL1,$03
(1)  869/   1080F : =$5                          set vcDL2,$05
(1)  869/   1080F : =$3                          set vcDL3,$03
(1)  869/   1080F : =$0                          set vcDL4,$00
(1)  870/   1080F : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  870/   1080F : =$F                          set vcRR1,$0F
(1)  870/   1080F : =$F                          set vcRR2,$0F
(1)  870/   1080F : =$F                          set vcRR3,$0F
(1)  870/   1080F : =$F                          set vcRR4,$0F
(1)  871/   1080F : (MACRO)              	smpsVcTotalLevel    $80, $15, $10, $16
(1)  871/   1080F : =$80                         set vcTL1,$80
(1)  871/   1080F : =$15                         set vcTL2,$15
(1)  871/   1080F : =$10                         set vcTL3,$10
(1)  871/   1080F : =$16                         set vcTL4,$16
(1)  871/   1080F : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  871/   10810 :                     ;   0     1     2     3     4     5     6     7
(1)  871/   10810 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  871/   10810 : =>FALSE                      if SourceSMPS2ASM==0
(1)  871/   10810 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  871/   10810 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  871/   10810 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  871/   10810 :                                     set vcTLMask1,$80
(1)  871/   10810 : =>TRUE                       else
(1)  871/   10810 : =$0                                  set vcTLMask4,0
(1)  871/   10810 : =$0                                  set vcTLMask3,0
(1)  871/   10810 : =$0                                  set vcTLMask2,0
(1)  871/   10810 : =$0                                  set vcTLMask1,0
(1)  871/   10810 : [871]                        endif
(1)  871/   10810 :                     
(1)  871/   10810 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  871/   10810 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  871/   10810 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  871/   10810 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  871/   10810 :                                     set vcTLMask1,$80
(1)  871/   10810 :                                     set vcTL1,vcTL1&$7F
(1)  871/   10810 :                                     set vcTL2,vcTL2&$7F
(1)  871/   10810 :                                     set vcTL3,vcTL3&$7F
(1)  871/   10810 :                                     set vcTL4,vcTL4&$7F
(1)  871/   10810 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  871/   10810 :                                     if MOMPASS>1
(1)  871/   10810 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  871/   10810 : [871]                                endif
(1)  871/   10810 : [871]                        endif
(1)  871/   10810 :                     
(1)  871/   10810 : =>FALSE                      if SonicDriverVer==2
(1)  871/   10810 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  871/   10810 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  871/   10810 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  871/   10810 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  871/   10810 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  871/   10810 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  871/   10810 : =>TRUE                       else
(1)  871/   10810 : 1211 1301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  871/   10814 : 1F1F 1F1E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  871/   10818 : 020C 1307                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  871/   1081C : 120A 0507                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  871/   10820 : 0F3F 5F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  871/   10824 : 1610 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  871/   10828 : [871]                        endif
(1)  872/   10828 :                     
(1)  873/   10828 :                     ;	Voice $01
(1)  874/   10828 :                     ;	$3C
(1)  875/   10828 :                     ;	$01, $02, $0F, $04, 	$8D, $52, $9F, $1F, 	$09, $00, $00, $0D
(1)  876/   10828 :                     ;	$00, $00, $00, $00, 	$2F, $0F, $0F, $FF, 	$17, $86, $1F, $86
(1)  877/   10828 : (MACRO)              	smpsVcAlgorithm     $04
(1)  877/   10828 : =$4                  vcAlgorithm set $04
(1)  878/   10828 : (MACRO)              	smpsVcFeedback      $07
(1)  878/   10828 : =$7                  vcFeedback set $07
(1)  879/   10828 : (MACRO)              	smpsVcUnusedBits    $00
(1)  879/   10828 : =$0                  vcUnusedBits set $00
(1)  879/   10828 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  879/   10828 :                                     set vcD1R1Unk,<<5
(1)  879/   10828 :                                     set vcD1R2Unk,<<5
(1)  879/   10828 :                                     set vcD1R3Unk,<<5
(1)  879/   10828 :                                     set vcD1R4Unk,<<5
(1)  879/   10828 : =>TRUE                       else
(1)  879/   10828 : =$0                                  set vcD1R1Unk,0
(1)  879/   10828 : =$0                                  set vcD1R2Unk,0
(1)  879/   10828 : =$0                                  set vcD1R3Unk,0
(1)  879/   10828 : =$0                                  set vcD1R4Unk,0
(1)  879/   10828 : [879]                        endif
(1)  880/   10828 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  880/   10828 : =$0                          set vcDT1,$00
(1)  880/   10828 : =$0                          set vcDT2,$00
(1)  880/   10828 : =$0                          set vcDT3,$00
(1)  880/   10828 : =$0                          set vcDT4,$00
(1)  881/   10828 : (MACRO)              	smpsVcCoarseFreq    $04, $0F, $02, $01
(1)  881/   10828 : =$4                          set vcCF1,$04
(1)  881/   10828 : =$F                          set vcCF2,$0F
(1)  881/   10828 : =$2                          set vcCF3,$02
(1)  881/   10828 : =$1                          set vcCF4,$01
(1)  882/   10828 : (MACRO)              	smpsVcRateScale     $00, $02, $01, $02
(1)  882/   10828 : =$0                          set vcRS1,$00
(1)  882/   10828 : =$2                          set vcRS2,$02
(1)  882/   10828 : =$1                          set vcRS3,$01
(1)  882/   10828 : =$2                          set vcRS4,$02
(1)  883/   10828 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $12, $0D
(1)  883/   10828 : =$1F                         set vcAR1,$1F
(1)  883/   10828 : =$1F                         set vcAR2,$1F
(1)  883/   10828 : =$12                         set vcAR3,$12
(1)  883/   10828 : =$D                          set vcAR4,$0D
(1)  884/   10828 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  884/   10828 : =>FALSE                      if SourceSMPS2ASM==0
(1)  884/   10828 :                                     set vcAM1,$00<<5
(1)  884/   10828 :                                     set vcAM2,$00<<5
(1)  884/   10828 :                                     set vcAM3,$00<<5
(1)  884/   10828 :                                     set vcAM4,$00<<5
(1)  884/   10828 : =>TRUE                       else
(1)  884/   10828 : =$0                                  set vcAM1,$00<<7
(1)  884/   10828 : =$0                                  set vcAM2,$00<<7
(1)  884/   10828 : =$0                                  set vcAM3,$00<<7
(1)  884/   10828 : =$0                                  set vcAM4,$00<<7
(1)  884/   10828 : [884]                        endif
(1)  885/   10828 : (MACRO)              	smpsVcDecayRate1    $0D, $00, $00, $09
(1)  885/   10828 : =$D                          set vcD1R1,$0D
(1)  885/   10828 : =$0                          set vcD1R2,$00
(1)  885/   10828 : =$0                          set vcD1R3,$00
(1)  885/   10828 : =$9                          set vcD1R4,$09
(1)  886/   10828 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)  886/   10828 : =$0                          set vcD2R1,$00
(1)  886/   10828 : =$0                          set vcD2R2,$00
(1)  886/   10828 : =$0                          set vcD2R3,$00
(1)  886/   10828 : =$0                          set vcD2R4,$00
(1)  887/   10828 : (MACRO)              	smpsVcDecayLevel    $0F, $00, $00, $02
(1)  887/   10828 : =$F                          set vcDL1,$0F
(1)  887/   10828 : =$0                          set vcDL2,$00
(1)  887/   10828 : =$0                          set vcDL3,$00
(1)  887/   10828 : =$2                          set vcDL4,$02
(1)  888/   10828 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  888/   10828 : =$F                          set vcRR1,$0F
(1)  888/   10828 : =$F                          set vcRR2,$0F
(1)  888/   10828 : =$F                          set vcRR3,$0F
(1)  888/   10828 : =$F                          set vcRR4,$0F
(1)  889/   10828 : (MACRO)              	smpsVcTotalLevel    $86, $1F, $86, $17
(1)  889/   10828 : =$86                         set vcTL1,$86
(1)  889/   10828 : =$1F                         set vcTL2,$1F
(1)  889/   10828 : =$86                         set vcTL3,$86
(1)  889/   10828 : =$17                         set vcTL4,$17
(1)  889/   10828 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  889/   10829 :                     ;   0     1     2     3     4     5     6     7
(1)  889/   10829 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  889/   10829 : =>FALSE                      if SourceSMPS2ASM==0
(1)  889/   10829 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  889/   10829 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  889/   10829 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  889/   10829 :                                     set vcTLMask1,$80
(1)  889/   10829 : =>TRUE                       else
(1)  889/   10829 : =$0                                  set vcTLMask4,0
(1)  889/   10829 : =$0                                  set vcTLMask3,0
(1)  889/   10829 : =$0                                  set vcTLMask2,0
(1)  889/   10829 : =$0                                  set vcTLMask1,0
(1)  889/   10829 : [889]                        endif
(1)  889/   10829 :                     
(1)  889/   10829 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  889/   10829 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  889/   10829 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  889/   10829 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  889/   10829 :                                     set vcTLMask1,$80
(1)  889/   10829 :                                     set vcTL1,vcTL1&$7F
(1)  889/   10829 :                                     set vcTL2,vcTL2&$7F
(1)  889/   10829 :                                     set vcTL3,vcTL3&$7F
(1)  889/   10829 :                                     set vcTL4,vcTL4&$7F
(1)  889/   10829 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  889/   10829 :                                     if MOMPASS>1
(1)  889/   10829 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  889/   10829 : [889]                                endif
(1)  889/   10829 : [889]                        endif
(1)  889/   10829 :                     
(1)  889/   10829 : =>FALSE                      if SonicDriverVer==2
(1)  889/   10829 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  889/   10829 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  889/   10829 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  889/   10829 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  889/   10829 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  889/   10829 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  889/   10829 : =>TRUE                       else
(1)  889/   10829 : 0102 0F04                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  889/   1082D : 8D52 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  889/   10831 : 0900 000D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  889/   10835 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  889/   10839 : 2F0F 0FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  889/   1083D : 1786 1F86                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  889/   10841 : [889]                        endif
(1)  890/   10841 :                     
(1)  891/   10841 :                     ;	Voice $02
(1)  892/   10841 :                     ;	$2C
(1)  893/   10841 :                     ;	$22, $04, $02, $14, 	$51, $52, $50, $52, 	$0D, $00, $06, $04
(1)  894/   10841 :                     ;	$03, $05, $02, $00, 	$16, $18, $26, $18, 	$0F, $80, $12, $80
(1)  895/   10841 : (MACRO)              	smpsVcAlgorithm     $04
(1)  895/   10841 : =$4                  vcAlgorithm set $04
(1)  896/   10841 : (MACRO)              	smpsVcFeedback      $05
(1)  896/   10841 : =$5                  vcFeedback set $05
(1)  897/   10841 : (MACRO)              	smpsVcUnusedBits    $00
(1)  897/   10841 : =$0                  vcUnusedBits set $00
(1)  897/   10841 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  897/   10841 :                                     set vcD1R1Unk,<<5
(1)  897/   10841 :                                     set vcD1R2Unk,<<5
(1)  897/   10841 :                                     set vcD1R3Unk,<<5
(1)  897/   10841 :                                     set vcD1R4Unk,<<5
(1)  897/   10841 : =>TRUE                       else
(1)  897/   10841 : =$0                                  set vcD1R1Unk,0
(1)  897/   10841 : =$0                                  set vcD1R2Unk,0
(1)  897/   10841 : =$0                                  set vcD1R3Unk,0
(1)  897/   10841 : =$0                                  set vcD1R4Unk,0
(1)  897/   10841 : [897]                        endif
(1)  898/   10841 : (MACRO)              	smpsVcDetune        $01, $00, $00, $02
(1)  898/   10841 : =$1                          set vcDT1,$01
(1)  898/   10841 : =$0                          set vcDT2,$00
(1)  898/   10841 : =$0                          set vcDT3,$00
(1)  898/   10841 : =$2                          set vcDT4,$02
(1)  899/   10841 : (MACRO)              	smpsVcCoarseFreq    $04, $02, $04, $02
(1)  899/   10841 : =$4                          set vcCF1,$04
(1)  899/   10841 : =$2                          set vcCF2,$02
(1)  899/   10841 : =$4                          set vcCF3,$04
(1)  899/   10841 : =$2                          set vcCF4,$02
(1)  900/   10841 : (MACRO)              	smpsVcRateScale     $01, $01, $01, $01
(1)  900/   10841 : =$1                          set vcRS1,$01
(1)  900/   10841 : =$1                          set vcRS2,$01
(1)  900/   10841 : =$1                          set vcRS3,$01
(1)  900/   10841 : =$1                          set vcRS4,$01
(1)  901/   10841 : (MACRO)              	smpsVcAttackRate    $12, $10, $12, $11
(1)  901/   10841 : =$12                         set vcAR1,$12
(1)  901/   10841 : =$10                         set vcAR2,$10
(1)  901/   10841 : =$12                         set vcAR3,$12
(1)  901/   10841 : =$11                         set vcAR4,$11
(1)  902/   10841 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  902/   10841 : =>FALSE                      if SourceSMPS2ASM==0
(1)  902/   10841 :                                     set vcAM1,$00<<5
(1)  902/   10841 :                                     set vcAM2,$00<<5
(1)  902/   10841 :                                     set vcAM3,$00<<5
(1)  902/   10841 :                                     set vcAM4,$00<<5
(1)  902/   10841 : =>TRUE                       else
(1)  902/   10841 : =$0                                  set vcAM1,$00<<7
(1)  902/   10841 : =$0                                  set vcAM2,$00<<7
(1)  902/   10841 : =$0                                  set vcAM3,$00<<7
(1)  902/   10841 : =$0                                  set vcAM4,$00<<7
(1)  902/   10841 : [902]                        endif
(1)  903/   10841 : (MACRO)              	smpsVcDecayRate1    $04, $06, $00, $0D
(1)  903/   10841 : =$4                          set vcD1R1,$04
(1)  903/   10841 : =$6                          set vcD1R2,$06
(1)  903/   10841 : =$0                          set vcD1R3,$00
(1)  903/   10841 : =$D                          set vcD1R4,$0D
(1)  904/   10841 : (MACRO)              	smpsVcDecayRate2    $00, $02, $05, $03
(1)  904/   10841 : =$0                          set vcD2R1,$00
(1)  904/   10841 : =$2                          set vcD2R2,$02
(1)  904/   10841 : =$5                          set vcD2R3,$05
(1)  904/   10841 : =$3                          set vcD2R4,$03
(1)  905/   10841 : (MACRO)              	smpsVcDecayLevel    $01, $02, $01, $01
(1)  905/   10841 : =$1                          set vcDL1,$01
(1)  905/   10841 : =$2                          set vcDL2,$02
(1)  905/   10841 : =$1                          set vcDL3,$01
(1)  905/   10841 : =$1                          set vcDL4,$01
(1)  906/   10841 : (MACRO)              	smpsVcReleaseRate   $08, $06, $08, $06
(1)  906/   10841 : =$8                          set vcRR1,$08
(1)  906/   10841 : =$6                          set vcRR2,$06
(1)  906/   10841 : =$8                          set vcRR3,$08
(1)  906/   10841 : =$6                          set vcRR4,$06
(1)  907/   10841 : (MACRO)              	smpsVcTotalLevel    $80, $12, $80, $0F
(1)  907/   10841 : =$80                         set vcTL1,$80
(1)  907/   10841 : =$12                         set vcTL2,$12
(1)  907/   10841 : =$80                         set vcTL3,$80
(1)  907/   10841 : =$F                          set vcTL4,$0F
(1)  907/   10841 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  907/   10842 :                     ;   0     1     2     3     4     5     6     7
(1)  907/   10842 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  907/   10842 : =>FALSE                      if SourceSMPS2ASM==0
(1)  907/   10842 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  907/   10842 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  907/   10842 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  907/   10842 :                                     set vcTLMask1,$80
(1)  907/   10842 : =>TRUE                       else
(1)  907/   10842 : =$0                                  set vcTLMask4,0
(1)  907/   10842 : =$0                                  set vcTLMask3,0
(1)  907/   10842 : =$0                                  set vcTLMask2,0
(1)  907/   10842 : =$0                                  set vcTLMask1,0
(1)  907/   10842 : [907]                        endif
(1)  907/   10842 :                     
(1)  907/   10842 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  907/   10842 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  907/   10842 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  907/   10842 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  907/   10842 :                                     set vcTLMask1,$80
(1)  907/   10842 :                                     set vcTL1,vcTL1&$7F
(1)  907/   10842 :                                     set vcTL2,vcTL2&$7F
(1)  907/   10842 :                                     set vcTL3,vcTL3&$7F
(1)  907/   10842 :                                     set vcTL4,vcTL4&$7F
(1)  907/   10842 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  907/   10842 :                                     if MOMPASS>1
(1)  907/   10842 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  907/   10842 : [907]                                endif
(1)  907/   10842 : [907]                        endif
(1)  907/   10842 :                     
(1)  907/   10842 : =>FALSE                      if SonicDriverVer==2
(1)  907/   10842 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  907/   10842 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  907/   10842 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  907/   10842 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  907/   10842 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  907/   10842 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  907/   10842 : =>TRUE                       else
(1)  907/   10842 : 2204 0214                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  907/   10846 : 5152 5052                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  907/   1084A : 0D00 0604                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  907/   1084E : 0305 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  907/   10852 : 1618 2618                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  907/   10856 : 0F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  907/   1085A : [907]                        endif
(1)  908/   1085A :                     
(1)  909/   1085A :                     ;	Voice $03
(1)  910/   1085A :                     ;	$41
(1)  911/   1085A :                     ;	$18, $12, $02, $12, 	$5F, $5F, $5F, $5F, 	$0C, $0B, $0B, $0B
(1)  912/   1085A :                     ;	$09, $08, $10, $0A, 	$AF, $FF, $FF, $FF, 	$1D, $23, $1B, $80
(1)  913/   1085A : (MACRO)              	smpsVcAlgorithm     $01
(1)  913/   1085A : =$1                  vcAlgorithm set $01
(1)  914/   1085A : (MACRO)              	smpsVcFeedback      $00
(1)  914/   1085A : =$0                  vcFeedback set $00
(1)  915/   1085A : (MACRO)              	smpsVcUnusedBits    $01
(1)  915/   1085A : =$1                  vcUnusedBits set $01
(1)  915/   1085A : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  915/   1085A :                                     set vcD1R1Unk,<<5
(1)  915/   1085A :                                     set vcD1R2Unk,<<5
(1)  915/   1085A :                                     set vcD1R3Unk,<<5
(1)  915/   1085A :                                     set vcD1R4Unk,<<5
(1)  915/   1085A : =>TRUE                       else
(1)  915/   1085A : =$0                                  set vcD1R1Unk,0
(1)  915/   1085A : =$0                                  set vcD1R2Unk,0
(1)  915/   1085A : =$0                                  set vcD1R3Unk,0
(1)  915/   1085A : =$0                                  set vcD1R4Unk,0
(1)  915/   1085A : [915]                        endif
(1)  916/   1085A : (MACRO)              	smpsVcDetune        $01, $00, $01, $01
(1)  916/   1085A : =$1                          set vcDT1,$01
(1)  916/   1085A : =$0                          set vcDT2,$00
(1)  916/   1085A : =$1                          set vcDT3,$01
(1)  916/   1085A : =$1                          set vcDT4,$01
(1)  917/   1085A : (MACRO)              	smpsVcCoarseFreq    $02, $02, $02, $08
(1)  917/   1085A : =$2                          set vcCF1,$02
(1)  917/   1085A : =$2                          set vcCF2,$02
(1)  917/   1085A : =$2                          set vcCF3,$02
(1)  917/   1085A : =$8                          set vcCF4,$08
(1)  918/   1085A : (MACRO)              	smpsVcRateScale     $01, $01, $01, $01
(1)  918/   1085A : =$1                          set vcRS1,$01
(1)  918/   1085A : =$1                          set vcRS2,$01
(1)  918/   1085A : =$1                          set vcRS3,$01
(1)  918/   1085A : =$1                          set vcRS4,$01
(1)  919/   1085A : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  919/   1085A : =$1F                         set vcAR1,$1F
(1)  919/   1085A : =$1F                         set vcAR2,$1F
(1)  919/   1085A : =$1F                         set vcAR3,$1F
(1)  919/   1085A : =$1F                         set vcAR4,$1F
(1)  920/   1085A : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  920/   1085A : =>FALSE                      if SourceSMPS2ASM==0
(1)  920/   1085A :                                     set vcAM1,$00<<5
(1)  920/   1085A :                                     set vcAM2,$00<<5
(1)  920/   1085A :                                     set vcAM3,$00<<5
(1)  920/   1085A :                                     set vcAM4,$00<<5
(1)  920/   1085A : =>TRUE                       else
(1)  920/   1085A : =$0                                  set vcAM1,$00<<7
(1)  920/   1085A : =$0                                  set vcAM2,$00<<7
(1)  920/   1085A : =$0                                  set vcAM3,$00<<7
(1)  920/   1085A : =$0                                  set vcAM4,$00<<7
(1)  920/   1085A : [920]                        endif
(1)  921/   1085A : (MACRO)              	smpsVcDecayRate1    $0B, $0B, $0B, $0C
(1)  921/   1085A : =$B                          set vcD1R1,$0B
(1)  921/   1085A : =$B                          set vcD1R2,$0B
(1)  921/   1085A : =$B                          set vcD1R3,$0B
(1)  921/   1085A : =$C                          set vcD1R4,$0C
(1)  922/   1085A : (MACRO)              	smpsVcDecayRate2    $0A, $10, $08, $09
(1)  922/   1085A : =$A                          set vcD2R1,$0A
(1)  922/   1085A : =$10                         set vcD2R2,$10
(1)  922/   1085A : =$8                          set vcD2R3,$08
(1)  922/   1085A : =$9                          set vcD2R4,$09
(1)  923/   1085A : (MACRO)              	smpsVcDecayLevel    $0F, $0F, $0F, $0A
(1)  923/   1085A : =$F                          set vcDL1,$0F
(1)  923/   1085A : =$F                          set vcDL2,$0F
(1)  923/   1085A : =$F                          set vcDL3,$0F
(1)  923/   1085A : =$A                          set vcDL4,$0A
(1)  924/   1085A : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  924/   1085A : =$F                          set vcRR1,$0F
(1)  924/   1085A : =$F                          set vcRR2,$0F
(1)  924/   1085A : =$F                          set vcRR3,$0F
(1)  924/   1085A : =$F                          set vcRR4,$0F
(1)  925/   1085A : (MACRO)              	smpsVcTotalLevel    $80, $1B, $23, $1D
(1)  925/   1085A : =$80                         set vcTL1,$80
(1)  925/   1085A : =$1B                         set vcTL2,$1B
(1)  925/   1085A : =$23                         set vcTL3,$23
(1)  925/   1085A : =$1D                         set vcTL4,$1D
(1)  925/   1085A : 41                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  925/   1085B :                     ;   0     1     2     3     4     5     6     7
(1)  925/   1085B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  925/   1085B : =>FALSE                      if SourceSMPS2ASM==0
(1)  925/   1085B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  925/   1085B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  925/   1085B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  925/   1085B :                                     set vcTLMask1,$80
(1)  925/   1085B : =>TRUE                       else
(1)  925/   1085B : =$0                                  set vcTLMask4,0
(1)  925/   1085B : =$0                                  set vcTLMask3,0
(1)  925/   1085B : =$0                                  set vcTLMask2,0
(1)  925/   1085B : =$0                                  set vcTLMask1,0
(1)  925/   1085B : [925]                        endif
(1)  925/   1085B :                     
(1)  925/   1085B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  925/   1085B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  925/   1085B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  925/   1085B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  925/   1085B :                                     set vcTLMask1,$80
(1)  925/   1085B :                                     set vcTL1,vcTL1&$7F
(1)  925/   1085B :                                     set vcTL2,vcTL2&$7F
(1)  925/   1085B :                                     set vcTL3,vcTL3&$7F
(1)  925/   1085B :                                     set vcTL4,vcTL4&$7F
(1)  925/   1085B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  925/   1085B :                                     if MOMPASS>1
(1)  925/   1085B :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  925/   1085B : [925]                                endif
(1)  925/   1085B : [925]                        endif
(1)  925/   1085B :                     
(1)  925/   1085B : =>FALSE                      if SonicDriverVer==2
(1)  925/   1085B :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  925/   1085B :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  925/   1085B :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  925/   1085B :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  925/   1085B :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  925/   1085B :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  925/   1085B : =>TRUE                       else
(1)  925/   1085B : 1812 0212                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  925/   1085F : 5F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  925/   10863 : 0C0B 0B0B                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  925/   10867 : 0908 100A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  925/   1086B : AFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  925/   1086F : 1D23 1B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  925/   10873 : [925]                        endif
(1)  926/   10873 :                     
(1)  927/   10873 :                     ;	Voice $04 (unused)
(1)  928/   10873 :                     ;	$3C
(1)  929/   10873 :                     ;	$07, $01, $08, $04, 	$5F, $9F, $9F, $5F, 	$16, $1F, $16, $1F
(1)  930/   10873 :                     ;	$09, $0F, $16, $11, 	$6F, $0F, $AF, $0F, 	$16, $80, $11, $80
(1)  931/   10873 : (MACRO)              	smpsVcAlgorithm     $04
(1)  931/   10873 : =$4                  vcAlgorithm set $04
(1)  932/   10873 : (MACRO)              	smpsVcFeedback      $07
(1)  932/   10873 : =$7                  vcFeedback set $07
(1)  933/   10873 : (MACRO)              	smpsVcUnusedBits    $00
(1)  933/   10873 : =$0                  vcUnusedBits set $00
(1)  933/   10873 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  933/   10873 :                                     set vcD1R1Unk,<<5
(1)  933/   10873 :                                     set vcD1R2Unk,<<5
(1)  933/   10873 :                                     set vcD1R3Unk,<<5
(1)  933/   10873 :                                     set vcD1R4Unk,<<5
(1)  933/   10873 : =>TRUE                       else
(1)  933/   10873 : =$0                                  set vcD1R1Unk,0
(1)  933/   10873 : =$0                                  set vcD1R2Unk,0
(1)  933/   10873 : =$0                                  set vcD1R3Unk,0
(1)  933/   10873 : =$0                                  set vcD1R4Unk,0
(1)  933/   10873 : [933]                        endif
(1)  934/   10873 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  934/   10873 : =$0                          set vcDT1,$00
(1)  934/   10873 : =$0                          set vcDT2,$00
(1)  934/   10873 : =$0                          set vcDT3,$00
(1)  934/   10873 : =$0                          set vcDT4,$00
(1)  935/   10873 : (MACRO)              	smpsVcCoarseFreq    $04, $08, $01, $07
(1)  935/   10873 : =$4                          set vcCF1,$04
(1)  935/   10873 : =$8                          set vcCF2,$08
(1)  935/   10873 : =$1                          set vcCF3,$01
(1)  935/   10873 : =$7                          set vcCF4,$07
(1)  936/   10873 : (MACRO)              	smpsVcRateScale     $01, $02, $02, $01
(1)  936/   10873 : =$1                          set vcRS1,$01
(1)  936/   10873 : =$2                          set vcRS2,$02
(1)  936/   10873 : =$2                          set vcRS3,$02
(1)  936/   10873 : =$1                          set vcRS4,$01
(1)  937/   10873 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  937/   10873 : =$1F                         set vcAR1,$1F
(1)  937/   10873 : =$1F                         set vcAR2,$1F
(1)  937/   10873 : =$1F                         set vcAR3,$1F
(1)  937/   10873 : =$1F                         set vcAR4,$1F
(1)  938/   10873 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  938/   10873 : =>FALSE                      if SourceSMPS2ASM==0
(1)  938/   10873 :                                     set vcAM1,$00<<5
(1)  938/   10873 :                                     set vcAM2,$00<<5
(1)  938/   10873 :                                     set vcAM3,$00<<5
(1)  938/   10873 :                                     set vcAM4,$00<<5
(1)  938/   10873 : =>TRUE                       else
(1)  938/   10873 : =$0                                  set vcAM1,$00<<7
(1)  938/   10873 : =$0                                  set vcAM2,$00<<7
(1)  938/   10873 : =$0                                  set vcAM3,$00<<7
(1)  938/   10873 : =$0                                  set vcAM4,$00<<7
(1)  938/   10873 : [938]                        endif
(1)  939/   10873 : (MACRO)              	smpsVcDecayRate1    $1F, $16, $1F, $16
(1)  939/   10873 : =$1F                         set vcD1R1,$1F
(1)  939/   10873 : =$16                         set vcD1R2,$16
(1)  939/   10873 : =$1F                         set vcD1R3,$1F
(1)  939/   10873 : =$16                         set vcD1R4,$16
(1)  940/   10873 : (MACRO)              	smpsVcDecayRate2    $11, $16, $0F, $09
(1)  940/   10873 : =$11                         set vcD2R1,$11
(1)  940/   10873 : =$16                         set vcD2R2,$16
(1)  940/   10873 : =$F                          set vcD2R3,$0F
(1)  940/   10873 : =$9                          set vcD2R4,$09
(1)  941/   10873 : (MACRO)              	smpsVcDecayLevel    $00, $0A, $00, $06
(1)  941/   10873 : =$0                          set vcDL1,$00
(1)  941/   10873 : =$A                          set vcDL2,$0A
(1)  941/   10873 : =$0                          set vcDL3,$00
(1)  941/   10873 : =$6                          set vcDL4,$06
(1)  942/   10873 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  942/   10873 : =$F                          set vcRR1,$0F
(1)  942/   10873 : =$F                          set vcRR2,$0F
(1)  942/   10873 : =$F                          set vcRR3,$0F
(1)  942/   10873 : =$F                          set vcRR4,$0F
(1)  943/   10873 : (MACRO)              	smpsVcTotalLevel    $80, $11, $80, $16
(1)  943/   10873 : =$80                         set vcTL1,$80
(1)  943/   10873 : =$11                         set vcTL2,$11
(1)  943/   10873 : =$80                         set vcTL3,$80
(1)  943/   10873 : =$16                         set vcTL4,$16
(1)  943/   10873 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  943/   10874 :                     ;   0     1     2     3     4     5     6     7
(1)  943/   10874 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  943/   10874 : =>FALSE                      if SourceSMPS2ASM==0
(1)  943/   10874 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  943/   10874 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  943/   10874 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  943/   10874 :                                     set vcTLMask1,$80
(1)  943/   10874 : =>TRUE                       else
(1)  943/   10874 : =$0                                  set vcTLMask4,0
(1)  943/   10874 : =$0                                  set vcTLMask3,0
(1)  943/   10874 : =$0                                  set vcTLMask2,0
(1)  943/   10874 : =$0                                  set vcTLMask1,0
(1)  943/   10874 : [943]                        endif
(1)  943/   10874 :                     
(1)  943/   10874 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  943/   10874 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  943/   10874 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  943/   10874 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  943/   10874 :                                     set vcTLMask1,$80
(1)  943/   10874 :                                     set vcTL1,vcTL1&$7F
(1)  943/   10874 :                                     set vcTL2,vcTL2&$7F
(1)  943/   10874 :                                     set vcTL3,vcTL3&$7F
(1)  943/   10874 :                                     set vcTL4,vcTL4&$7F
(1)  943/   10874 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  943/   10874 :                                     if MOMPASS>1
(1)  943/   10874 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  943/   10874 : [943]                                endif
(1)  943/   10874 : [943]                        endif
(1)  943/   10874 :                     
(1)  943/   10874 : =>FALSE                      if SonicDriverVer==2
(1)  943/   10874 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  943/   10874 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  943/   10874 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  943/   10874 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  943/   10874 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  943/   10874 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  943/   10874 : =>TRUE                       else
(1)  943/   10874 : 0701 0804                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  943/   10878 : 5F9F 9F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  943/   1087C : 161F 161F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  943/   10880 : 090F 1611                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  943/   10884 : 6F0F AF0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  943/   10888 : 1680 1180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  943/   1088C : [943]                        endif
(1)  944/   1088C :                     
   18780/   1088C :                     Music82:	include	"Sound/Music/Mus82 - Walkin'.asm"
(1)    1/   1088C :                     Walkin_Header:
(1)    2/   1088C : (MACRO)              	smpsHeaderStartSong 3
(1)    2/   1088C :                     
(1)    2/   1088C : =$3                  SourceDriver set 3
(1)    2/   1088C :                     
(1)    2/   1088C : =>FALSE                      if (""<>"")
(1)    2/   1088C :                                     set SourceSMPS2ASM,
(1)    2/   1088C : =>TRUE                       else
(1)    2/   1088C : =$0                                  set SourceSMPS2ASM,0
(1)    2/   1088C : [2]                          endif
(1)    2/   1088C :                     
(1)    2/   1088C : =$1088C              songStart set *
(1)    2/   1088C :                     
(1)    2/   1088C : =>TRUE                       if MOMPASS>1
(1)    2/   1088C : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   1088C :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   1088C : [2]                                  endif
(1)    2/   1088C : [2]                          endif
(1)    2/   1088C :                     
(1)    3/   1088C : (MACRO)              	smpsHeaderVoice     Walkin_Voices
(1)    3/   1088C : =>FALSE                      if songStart<>*
(1)    3/   1088C :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   1088C : [3]                          endif
(1)    3/   1088C : =>TRUE                       if SonicDriverVer<>1
(1)    3/   1088C : 768B                                dc.w    z80_ptr(Walkin_Voices)
(1)    3/   1088E : =>FALSE                      else
(1)    3/   1088E :                                     if MOMPASS>1
(1)    3/   1088E :                                             if Walkin_Voices<songStart
(1)    3/   1088E :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/   1088E : [3]                                          endif
(1)    3/   1088E : [3]                                  endif
(1)    3/   1088E :                                     dc.w    Walkin_Voices-songStart
(1)    3/   1088E : [3]                          endif
(1)    4/   1088E : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/   1088E : 0603                        dc.b    $06,$03
(1)    5/   10890 : (MACRO)              	smpsHeaderTempo     $01, $35
(1)    5/   10890 : 01                          dc.b    $01
(1)    5/   10891 :  (MACRO-2)                   convertMainTempoMod $35
(1)    5/   10891 : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/   10891 : 35                                  dc.b    $35
(1)    5/   10892 : =>FALSE                      elseif SourceDriver==1
(1)    5/   10892 :                                     if $35==1
(1)    5/   10892 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/   10892 : [5]                                  endif
(1)    5/   10892 :                                     if SonicDriverVer==2
(1)    5/   10892 :                                             dc.b    s1TempotoS2($35)
(1)    5/   10892 :                                     else;if SonicDriverVer>=3
(1)    5/   10892 :                                             dc.b    s1TempotoS3($35)
(1)    5/   10892 : [5]                                  endif
(1)    5/   10892 : =>FALSE                      elseif SourceDriver==2
(1)    5/   10892 :                                     if $35==0
(1)    5/   10892 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/   10892 : [5]                                  endif
(1)    5/   10892 :                                     if SonicDriverVer==1
(1)    5/   10892 :                                             dc.b    s2TempotoS1($35)
(1)    5/   10892 :                                     else;if SonicDriverVer>=3
(1)    5/   10892 :                                             dc.b    s2TempotoS3($35)
(1)    5/   10892 : [5]                                  endif
(1)    5/   10892 : =>FALSE                      else;if SourceDriver>=3
(1)    5/   10892 :                                     if $35==0
(1)    5/   10892 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/   10892 : [5]                                  endif
(1)    5/   10892 :                                     if SonicDriverVer==1
(1)    5/   10892 :                                             dc.b    s3TempotoS1($35)
(1)    5/   10892 :                                     else;if SonicDriverVer==2
(1)    5/   10892 :                                             dc.b    s3TempotoS2($35)
(1)    5/   10892 : [5]                                  endif
(1)    5/   10892 : [5]                          endif
(1)    6/   10892 :                     
(1)    7/   10892 : (MACRO)              	smpsHeaderDAC       Walkin_DAC
(1)    7/   10892 :  (MACRO-2)                   CheckedChannelPointer Walkin_DAC
(1)    7/   10892 : =>TRUE                       if SonicDriverVer<>1
(1)    7/   10892 : 498B                                dc.w    z80_ptr(Walkin_DAC)
(1)    7/   10894 : =>FALSE                      else
(1)    7/   10894 :                                     if MOMPASS>1
(1)    7/   10894 :                                             if Walkin_DAC<songStart
(1)    7/   10894 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/   10894 : [7]                                          endif
(1)    7/   10894 : [7]                                  endif
(1)    7/   10894 :                                     dc.w    Walkin_DAC-songStart
(1)    7/   10894 : [7]                          endif
(1)    7/   10894 : =>FALSE                      if (""<>"")
(1)    7/   10894 :                                     dc.b    
(1)    7/   10894 :                                     if (""<>"")
(1)    7/   10894 :                                             dc.b    
(1)    7/   10894 :                                     else
(1)    7/   10894 :                                             dc.b    $00
(1)    7/   10894 : [7]                                  endif
(1)    7/   10894 : =>TRUE                       else
(1)    7/   10894 : 0000                                dc.w    $00
(1)    7/   10896 : [7]                          endif
(1)    8/   10896 : (MACRO)              	smpsHeaderFM        Walkin_FM1,	$00, $10
(1)    8/   10896 :  (MACRO-2)                   CheckedChannelPointer Walkin_FM1
(1)    8/   10896 : =>TRUE                       if SonicDriverVer<>1
(1)    8/   10896 : BC88                                dc.w    z80_ptr(Walkin_FM1)
(1)    8/   10898 : =>FALSE                      else
(1)    8/   10898 :                                     if MOMPASS>1
(1)    8/   10898 :                                             if Walkin_FM1<songStart
(1)    8/   10898 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   10898 : [8]                                          endif
(1)    8/   10898 : [8]                                  endif
(1)    8/   10898 :                                     dc.w    Walkin_FM1-songStart
(1)    8/   10898 : [8]                          endif
(1)    8/   10898 : 0010                        dc.b    $00,$10
(1)    9/   1089A : (MACRO)              	smpsHeaderFM        Walkin_FM2,	$00, $10
(1)    9/   1089A :  (MACRO-2)                   CheckedChannelPointer Walkin_FM2
(1)    9/   1089A : =>TRUE                       if SonicDriverVer<>1
(1)    9/   1089A : FE88                                dc.w    z80_ptr(Walkin_FM2)
(1)    9/   1089C : =>FALSE                      else
(1)    9/   1089C :                                     if MOMPASS>1
(1)    9/   1089C :                                             if Walkin_FM2<songStart
(1)    9/   1089C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   1089C : [9]                                          endif
(1)    9/   1089C : [9]                                  endif
(1)    9/   1089C :                                     dc.w    Walkin_FM2-songStart
(1)    9/   1089C : [9]                          endif
(1)    9/   1089C : 0010                        dc.b    $00,$10
(1)   10/   1089E : (MACRO)              	smpsHeaderFM        Walkin_FM3,	$0C, $15
(1)   10/   1089E :  (MACRO-2)                   CheckedChannelPointer Walkin_FM3
(1)   10/   1089E : =>TRUE                       if SonicDriverVer<>1
(1)   10/   1089E : 9589                                dc.w    z80_ptr(Walkin_FM3)
(1)   10/   108A0 : =>FALSE                      else
(1)   10/   108A0 :                                     if MOMPASS>1
(1)   10/   108A0 :                                             if Walkin_FM3<songStart
(1)   10/   108A0 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/   108A0 : [10]                                         endif
(1)   10/   108A0 : [10]                                 endif
(1)   10/   108A0 :                                     dc.w    Walkin_FM3-songStart
(1)   10/   108A0 : [10]                         endif
(1)   10/   108A0 : 0C15                        dc.b    $0C,$15
(1)   11/   108A2 : (MACRO)              	smpsHeaderFM        Walkin_FM4,	$0C, $15
(1)   11/   108A2 :  (MACRO-2)                   CheckedChannelPointer Walkin_FM4
(1)   11/   108A2 : =>TRUE                       if SonicDriverVer<>1
(1)   11/   108A2 : 328A                                dc.w    z80_ptr(Walkin_FM4)
(1)   11/   108A4 : =>FALSE                      else
(1)   11/   108A4 :                                     if MOMPASS>1
(1)   11/   108A4 :                                             if Walkin_FM4<songStart
(1)   11/   108A4 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/   108A4 : [11]                                         endif
(1)   11/   108A4 : [11]                                 endif
(1)   11/   108A4 :                                     dc.w    Walkin_FM4-songStart
(1)   11/   108A4 : [11]                         endif
(1)   11/   108A4 : 0C15                        dc.b    $0C,$15
(1)   12/   108A6 : (MACRO)              	smpsHeaderFM        Walkin_FM5,	$00, $12
(1)   12/   108A6 :  (MACRO-2)                   CheckedChannelPointer Walkin_FM5
(1)   12/   108A6 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   108A6 : B08A                                dc.w    z80_ptr(Walkin_FM5)
(1)   12/   108A8 : =>FALSE                      else
(1)   12/   108A8 :                                     if MOMPASS>1
(1)   12/   108A8 :                                             if Walkin_FM5<songStart
(1)   12/   108A8 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   108A8 : [12]                                         endif
(1)   12/   108A8 : [12]                                 endif
(1)   12/   108A8 :                                     dc.w    Walkin_FM5-songStart
(1)   12/   108A8 : [12]                         endif
(1)   12/   108A8 : 0012                        dc.b    $00,$12
(1)   13/   108AA : (MACRO)              	smpsHeaderPSG       Walkin_PSG1,	$F4, $04, $00, $00
(1)   13/   108AA :  (MACRO-2)                   CheckedChannelPointer Walkin_PSG1
(1)   13/   108AA : =>TRUE                       if SonicDriverVer<>1
(1)   13/   108AA : E98A                                dc.w    z80_ptr(Walkin_PSG1)
(1)   13/   108AC : =>FALSE                      else
(1)   13/   108AC :                                     if MOMPASS>1
(1)   13/   108AC :                                             if Walkin_PSG1<songStart
(1)   13/   108AC :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   108AC : [13]                                         endif
(1)   13/   108AC : [13]                                 endif
(1)   13/   108AC :                                     dc.w    Walkin_PSG1-songStart
(1)   13/   108AC : [13]                         endif
(1)   13/   108AC :  (MACRO-2)                   PSGPitchConvert $F4
(1)   13/   108AC : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/   108AC :                                     dc.b    ($F4+psgdelta)&$FF
(1)   13/   108AC : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/   108AC :                                     dc.b    ($F4-psgdelta)&$FF
(1)   13/   108AC : =>TRUE                       else
(1)   13/   108AC : F4                                  dc.b    $F4
(1)   13/   108AD : [13]                         endif
(1)   13/   108AD : 04                          dc.b    $04
(1)   13/   108AE :                             ; Frequency envelope
(1)   13/   108AE : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/   108AE :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/   108AE :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/   108AE :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/   108AE :                                     dc.b    0
(1)   13/   108AE : =>TRUE                       else
(1)   13/   108AE : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/   108AE :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/   108AE : [13]                                 endif
(1)   13/   108AE : 00                                  dc.b    $00
(1)   13/   108AF : [13]                         endif
(1)   13/   108AF :                             ; Volume envelope
(1)   13/   108AF : 00                          dc.b    $00
(1)   14/   108B0 : (MACRO)              	smpsHeaderPSG       Walkin_PSG2,	$E8, $04, $00, $00
(1)   14/   108B0 :  (MACRO-2)                   CheckedChannelPointer Walkin_PSG2
(1)   14/   108B0 : =>TRUE                       if SonicDriverVer<>1
(1)   14/   108B0 : FC8A                                dc.w    z80_ptr(Walkin_PSG2)
(1)   14/   108B2 : =>FALSE                      else
(1)   14/   108B2 :                                     if MOMPASS>1
(1)   14/   108B2 :                                             if Walkin_PSG2<songStart
(1)   14/   108B2 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   108B2 : [14]                                         endif
(1)   14/   108B2 : [14]                                 endif
(1)   14/   108B2 :                                     dc.w    Walkin_PSG2-songStart
(1)   14/   108B2 : [14]                         endif
(1)   14/   108B2 :  (MACRO-2)                   PSGPitchConvert $E8
(1)   14/   108B2 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   108B2 :                                     dc.b    ($E8+psgdelta)&$FF
(1)   14/   108B2 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   108B2 :                                     dc.b    ($E8-psgdelta)&$FF
(1)   14/   108B2 : =>TRUE                       else
(1)   14/   108B2 : E8                                  dc.b    $E8
(1)   14/   108B3 : [14]                         endif
(1)   14/   108B3 : 04                          dc.b    $04
(1)   14/   108B4 :                             ; Frequency envelope
(1)   14/   108B4 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/   108B4 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/   108B4 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/   108B4 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/   108B4 :                                     dc.b    0
(1)   14/   108B4 : =>TRUE                       else
(1)   14/   108B4 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/   108B4 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/   108B4 : [14]                                 endif
(1)   14/   108B4 : 00                                  dc.b    $00
(1)   14/   108B5 : [14]                         endif
(1)   14/   108B5 :                             ; Volume envelope
(1)   14/   108B5 : 00                          dc.b    $00
(1)   15/   108B6 : (MACRO)              	smpsHeaderPSG       Walkin_PSG3,	$23, $01, $00, $00
(1)   15/   108B6 :  (MACRO-2)                   CheckedChannelPointer Walkin_PSG3
(1)   15/   108B6 : =>TRUE                       if SonicDriverVer<>1
(1)   15/   108B6 : 258B                                dc.w    z80_ptr(Walkin_PSG3)
(1)   15/   108B8 : =>FALSE                      else
(1)   15/   108B8 :                                     if MOMPASS>1
(1)   15/   108B8 :                                             if Walkin_PSG3<songStart
(1)   15/   108B8 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/   108B8 : [15]                                         endif
(1)   15/   108B8 : [15]                                 endif
(1)   15/   108B8 :                                     dc.w    Walkin_PSG3-songStart
(1)   15/   108B8 : [15]                         endif
(1)   15/   108B8 :  (MACRO-2)                   PSGPitchConvert $23
(1)   15/   108B8 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/   108B8 :                                     dc.b    ($23+psgdelta)&$FF
(1)   15/   108B8 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/   108B8 :                                     dc.b    ($23-psgdelta)&$FF
(1)   15/   108B8 : =>TRUE                       else
(1)   15/   108B8 : 23                                  dc.b    $23
(1)   15/   108B9 : [15]                         endif
(1)   15/   108B9 : 01                          dc.b    $01
(1)   15/   108BA :                             ; Frequency envelope
(1)   15/   108BA : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/   108BA :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/   108BA :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/   108BA :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/   108BA :                                     dc.b    0
(1)   15/   108BA : =>TRUE                       else
(1)   15/   108BA : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/   108BA :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/   108BA : [15]                                 endif
(1)   15/   108BA : 00                                  dc.b    $00
(1)   15/   108BB : [15]                         endif
(1)   15/   108BB :                             ; Volume envelope
(1)   15/   108BB : 00                          dc.b    $00
(1)   16/   108BC :                     
(1)   17/   108BC :                     ; FM1 Data
(1)   18/   108BC :                     Walkin_FM1:
(1)   19/   108BC : (MACRO)              	smpsSetvoice        $00
(1)   19/   108BC :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   108BC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   108BC :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   108BC : =>TRUE                       else
(1)   19/   108BC : EF00                                dc.b    $EF,$00
(1)   19/   108BE : [19]                         endif
(1)   20/   108BE : 8018                	dc.b	nRst, $18
(1)   21/   108C0 : (MACRO)              	smpsModSet          $03, $01, $F6, $00
(1)   21/   108C0 : F0                          dc.b    $F0
(1)   21/   108C1 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   21/   108C1 :                                     dc.b    $03+1,$01,$F6,(($00+1) * $01) & $FF
(1)   21/   108C1 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   21/   108C1 :                                     dc.b    $03-1,$01,$F6,conv0To256($00)/conv0To256($01)-1
(1)   21/   108C1 : =>TRUE                       else
(1)   21/   108C1 : 0301 F600                           dc.b    $03,$01,$F6,$00
(1)   21/   108C5 : [21]                         endif
(1)   21/   108C5 :                             ;dc.b   $01,$F6,$00
(1)   22/   108C5 : 94                  	dc.b	nG1
(1)   23/   108C6 : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)   23/   108C6 : F0                          dc.b    $F0
(1)   23/   108C7 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   23/   108C7 :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)   23/   108C7 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   23/   108C7 :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)   23/   108C7 : =>TRUE                       else
(1)   23/   108C7 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)   23/   108CB : [23]                         endif
(1)   23/   108CB :                             ;dc.b   $00,$00,$00
(1)   24/   108CB :                     
(1)   25/   108CB :                     Walkin_Jump02:
(1)   26/   108CB : (MACRO)              	smpsCall            Walkin_Call05
(1)   26/   108CB : F8                          dc.b    $F8
(1)   26/   108CC : =>TRUE                       if SonicDriverVer<>1
(1)   26/   108CC : DE88                                dc.w    z80_ptr(Walkin_Call05)
(1)   26/   108CE : =>FALSE                      else
(1)   26/   108CE :                                     dc.w    Walkin_Call05-*-1
(1)   26/   108CE : [26]                         endif
(1)   27/   108CE : (MACRO)              	smpsCall            Walkin_Call05
(1)   27/   108CE : F8                          dc.b    $F8
(1)   27/   108CF : =>TRUE                       if SonicDriverVer<>1
(1)   27/   108CF : DE88                                dc.w    z80_ptr(Walkin_Call05)
(1)   27/   108D1 : =>FALSE                      else
(1)   27/   108D1 :                                     dc.w    Walkin_Call05-*-1
(1)   27/   108D1 : [27]                         endif
(1)   28/   108D1 : (MACRO)              	smpsAlterPitch      $FE
(1)   28/   108D1 :  (MACRO-2)                   smpsChangeTransposition $FE
(1)   28/   108D1 : =>TRUE                       if SonicDriverVer>=3
(1)   28/   108D1 : FBFE                                dc.b    $FB,$FE
(1)   28/   108D3 : =>FALSE                      else
(1)   28/   108D3 :                                     dc.b    $E9,$FE
(1)   28/   108D3 : [28]                         endif
(1)   29/   108D3 : (MACRO)              	smpsCall            Walkin_Call05
(1)   29/   108D3 : F8                          dc.b    $F8
(1)   29/   108D4 : =>TRUE                       if SonicDriverVer<>1
(1)   29/   108D4 : DE88                                dc.w    z80_ptr(Walkin_Call05)
(1)   29/   108D6 : =>FALSE                      else
(1)   29/   108D6 :                                     dc.w    Walkin_Call05-*-1
(1)   29/   108D6 : [29]                         endif
(1)   30/   108D6 : (MACRO)              	smpsAlterPitch      $02
(1)   30/   108D6 :  (MACRO-2)                   smpsChangeTransposition $02
(1)   30/   108D6 : =>TRUE                       if SonicDriverVer>=3
(1)   30/   108D6 : FB02                                dc.b    $FB,$02
(1)   30/   108D8 : =>FALSE                      else
(1)   30/   108D8 :                                     dc.b    $E9,$02
(1)   30/   108D8 : [30]                         endif
(1)   31/   108D8 : (MACRO)              	smpsCall            Walkin_Call05
(1)   31/   108D8 : F8                          dc.b    $F8
(1)   31/   108D9 : =>TRUE                       if SonicDriverVer<>1
(1)   31/   108D9 : DE88                                dc.w    z80_ptr(Walkin_Call05)
(1)   31/   108DB : =>FALSE                      else
(1)   31/   108DB :                                     dc.w    Walkin_Call05-*-1
(1)   31/   108DB : [31]                         endif
(1)   32/   108DB : (MACRO)              	smpsJump            Walkin_Jump02
(1)   32/   108DB : F6                          dc.b    $F6
(1)   32/   108DC : =>TRUE                       if SonicDriverVer<>1
(1)   32/   108DC : CB88                                dc.w    z80_ptr(Walkin_Jump02)
(1)   32/   108DE : =>FALSE                      else
(1)   32/   108DE :                                     dc.w    Walkin_Jump02-*-1
(1)   32/   108DE : [32]                         endif
(1)   33/   108DE :                     
(1)   34/   108DE :                     Walkin_Call05:
(1)   35/   108DE : 940C 8094 8008      	dc.b	nG1, $0C, nRst, nG1, nRst, $08, nG1, $0C, nF1, $04, nG1, $0C
            108E4 : 940C 9204 940C    
(1)   36/   108EA : 9792 940C A006      	dc.b	nBb1, nF1, nG1, $0C, nG2, $06, nRst, nG1, $0C, nRst, $08, nG1
            108F0 : 8094 0C80 0894    
(1)   37/   108F6 : 0C92 0494 0C97 92   	dc.b	$0C, nF1, $04, nG1, $0C, nBb1, nF1
(1)   38/   108FD : (MACRO)              	smpsReturn
(1)   38/   108FD : =>TRUE                       if SonicDriverVer>=3
(1)   38/   108FD : F9                                  dc.b    $F9
(1)   38/   108FE : =>FALSE                      else
(1)   38/   108FE :                                     dc.b    $E3
(1)   38/   108FE : [38]                         endif
(1)   39/   108FE :                     
(1)   40/   108FE :                     ; FM2 Data
(1)   41/   108FE :                     Walkin_FM2:
(1)   42/   108FE : (MACRO)              	smpsSetvoice        $01
(1)   42/   108FE :  (MACRO-2)                   smpsFMvoice $01
(1)   42/   108FE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   42/   108FE :                                     dc.b    $EF,$01|$80,+$81
(1)   42/   108FE : =>TRUE                       else
(1)   42/   108FE : EF01                                dc.b    $EF,$01
(1)   42/   10900 : [42]                         endif
(1)   43/   10900 : 8030                	dc.b	nRst, $30
(1)   44/   10902 :                     
(1)   45/   10902 :                     Walkin_Jump01:
(1)   46/   10902 : (MACRO)              	smpsCall            Walkin_Call04
(1)   46/   10902 : F8                          dc.b    $F8
(1)   46/   10903 : =>TRUE                       if SonicDriverVer<>1
(1)   46/   10903 : 1989                                dc.w    z80_ptr(Walkin_Call04)
(1)   46/   10905 : =>FALSE                      else
(1)   46/   10905 :                                     dc.w    Walkin_Call04-*-1
(1)   46/   10905 : [46]                         endif
(1)   47/   10905 : 800C                	dc.b	nRst, $0C
(1)   48/   10907 : (MACRO)              	smpsJump            Walkin_Jump01
(1)   48/   10907 : F6                          dc.b    $F6
(1)   48/   10908 : =>TRUE                       if SonicDriverVer<>1
(1)   48/   10908 : 0289                                dc.w    z80_ptr(Walkin_Jump01)
(1)   48/   1090A : =>FALSE                      else
(1)   48/   1090A :                                     dc.w    Walkin_Jump01-*-1
(1)   48/   1090A : [48]                         endif
(1)   49/   1090A :                     
(1)   50/   1090A :                     Walkin_Call07:
(1)   51/   1090A : AA0C 80AC 80AF      	dc.b	nF3, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $11, nG3, $04
            10910 : 03E7 B011 AC04    
(1)   52/   10916 : 800C                	dc.b	nRst, $0C
(1)   53/   10918 : (MACRO)              	smpsReturn
(1)   53/   10918 : =>TRUE                       if SonicDriverVer>=3
(1)   53/   10918 : F9                                  dc.b    $F9
(1)   53/   10919 : =>FALSE                      else
(1)   53/   10919 :                                     dc.b    $E3
(1)   53/   10919 : [53]                         endif
(1)   54/   10919 :                     
(1)   55/   10919 :                     Walkin_Call04:
(1)   56/   10919 : (MACRO)              	smpsCall            Walkin_Call07
(1)   56/   10919 : F8                          dc.b    $F8
(1)   56/   1091A : =>TRUE                       if SonicDriverVer<>1
(1)   56/   1091A : 0A89                                dc.w    z80_ptr(Walkin_Call07)
(1)   56/   1091C : =>FALSE                      else
(1)   56/   1091C :                                     dc.w    Walkin_Call07-*-1
(1)   56/   1091C : [56]                         endif
(1)   57/   1091C : B10C E708 8004      	dc.b	nC4, $0C, smpsNoAttack, $08, nRst, $04, nC4, $08, nRst, $04, nC4, $08
            10922 : B108 8004 B108    
(1)   58/   10928 : 8004 B308 8004      	dc.b	nRst, $04, nD4, $08, nRst, $04, nC4, $08, nB3, $04, nRst, $08
            1092E : B108 B004 8008    
(1)   59/   10934 : AC18 8004           	dc.b	nG3, $18, nRst, $04
(1)   60/   10938 : (MACRO)              	smpsCall            Walkin_Call07
(1)   60/   10938 : F8                          dc.b    $F8
(1)   60/   10939 : =>TRUE                       if SonicDriverVer<>1
(1)   60/   10939 : 0A89                                dc.w    z80_ptr(Walkin_Call07)
(1)   60/   1093B : =>FALSE                      else
(1)   60/   1093B :                                     dc.w    Walkin_Call07-*-1
(1)   60/   1093B : [60]                         endif
(1)   61/   1093B : B60C E708 8004      	dc.b	nF4, $0C, smpsNoAttack, $08, nRst, $04, nG4, $08, nRst, $04, nF4, $08
            10941 : B808 8004 B608    
(1)   62/   10947 : B504 8008 B334      	dc.b	nE4, $04, nRst, $08, nD4, $34, nRst, $0C, nBb3, $03, smpsNoAttack, nC4
            1094D : 800C AF03 E7B1    
(1)   63/   10953 : 15AE 0880 04AF      	dc.b	$15, nA3, $08, nRst, $04, nBb3, $03, smpsNoAttack, nC4, $11, nD4, $04
            10959 : 03E7 B111 B304    
(1)   64/   1095F : 800C B40C E708      	dc.b	nRst, $0C, nEb4, $0C, smpsNoAttack, $08, nRst, $04, nD4, $08, nRst, $04
            10965 : 8004 B308 8004    
(1)   65/   1096B : B408 B304 8008      	dc.b	nEb4, $08, nD4, $04, nRst, $08, nC4, $0C, nRst, $04, nA3, $08
            10971 : B10C 8004 AE08    
(1)   66/   10977 : 8004 AF0C B008      	dc.b	nRst, $04, nBb3, $0C, nB3, $08, nRst, $04, nC4, $0C, nRst, nG3
            1097D : 8004 B10C 80AC    
(1)   67/   10983 : 80AE 03E7 AF11      	dc.b	nRst, nA3, $03, smpsNoAttack, nBb3, $11, nG3, $04, nRst, $0C, nF3, smpsNoAttack
            10989 : AC04 800C AAE7    
(1)   68/   1098F : 0880 04AC 48        	dc.b	$08, nRst, $04, nG3, $48
(1)   69/   10994 : (MACRO)              	smpsReturn
(1)   69/   10994 : =>TRUE                       if SonicDriverVer>=3
(1)   69/   10994 : F9                                  dc.b    $F9
(1)   69/   10995 : =>FALSE                      else
(1)   69/   10995 :                                     dc.b    $E3
(1)   69/   10995 : [69]                         endif
(1)   70/   10995 :                     
(1)   71/   10995 :                     ; FM3 Data
(1)   72/   10995 :                     Walkin_FM3:
(1)   73/   10995 : (MACRO)              	smpsSetvoice        $02
(1)   73/   10995 :  (MACRO-2)                   smpsFMvoice $02
(1)   73/   10995 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   73/   10995 :                                     dc.b    $EF,$02|$80,+$81
(1)   73/   10995 : =>TRUE                       else
(1)   73/   10995 : EF02                                dc.b    $EF,$02
(1)   73/   10997 : [73]                         endif
(1)   74/   10997 : (MACRO)              	smpsPan             panLeft, $00
(1)   74/   10997 : =$0                  panNone set $00
(1)   74/   10997 : =$40                 panRight set $40
(1)   74/   10997 : =$80                 panLeft set $80
(1)   74/   10997 : =$C0                 panCentre set $C0
(1)   74/   10997 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   74/   10997 : E080                        dc.b $E0,panLeft+$00
(1)   75/   10999 : 8030                	dc.b	nRst, $30
(1)   76/   1099B :                     
(1)   77/   1099B :                     Walkin_Jump00:
(1)   78/   1099B : (MACRO)              	smpsCall            Walkin_Call03
(1)   78/   1099B : F8                          dc.b    $F8
(1)   78/   1099C : =>TRUE                       if SonicDriverVer<>1
(1)   78/   1099C : 0B8A                                dc.w    z80_ptr(Walkin_Call03)
(1)   78/   1099E : =>FALSE                      else
(1)   78/   1099E :                                     dc.w    Walkin_Call03-*-1
(1)   78/   1099E : [78]                         endif
(1)   79/   1099E : 8018                	dc.b	nRst, $18
(1)   80/   109A0 : (MACRO)              	smpsCall            Walkin_Call03
(1)   80/   109A0 : F8                          dc.b    $F8
(1)   80/   109A1 : =>TRUE                       if SonicDriverVer<>1
(1)   80/   109A1 : 0B8A                                dc.w    z80_ptr(Walkin_Call03)
(1)   80/   109A3 : =>FALSE                      else
(1)   80/   109A3 :                                     dc.w    Walkin_Call03-*-1
(1)   80/   109A3 : [80]                         endif
(1)   81/   109A3 : 8008 AA04 AB08      	dc.b	nRst, $08, nF3, $04, nFs3, $08, nG3, $04, nRst, $18, nEb3, $08
            109A9 : AC04 8018 A808    
(1)   82/   109AF : AA04 8008 A504      	dc.b	nF3, $04, nRst, $08, nC3, $04, nRst, $2C, nF3, $04, smpsNoAttack, $08
            109B5 : 802C AA04 E708    
(1)   83/   109BB : A804 AA08 8004      	dc.b	nEb3, $04, nF3, $08, nRst, $04, nF3, $08, nRst, $04, nEb3, $08
            109C1 : AA08 8004 A808    
(1)   84/   109C7 : 8004 A708 A804      	dc.b	nRst, $04, nD3, $08, nEb3, $04, nRst, $08, nC3, $04, nRst, $08
            109CD : 8008 A504 8008    
(1)   85/   109D3 : AA04 AB08 AC04      	dc.b	nF3, $04, nFs3, $08, nG3, $04, nRst, $18, nBb3, $08, nC4, $04
            109D9 : 8018 AF08 B104    
(1)   86/   109DF : 8008 AC04 800C      	dc.b	nRst, $08, nG3, $04, nRst, $0C, nD4, $08, nRst, $0C, nD4, $04
            109E5 : B308 800C B304    
(1)   87/   109EB : 800C 8008 AB04      	dc.b	nRst, $0C, nRst, $08, nFs3, $04, nG3, $08, nRst, $04, nF3, $08
            109F1 : AC08 8004 AA08    
(1)   88/   109F7 : 8004 A708 8004      	dc.b	nRst, $04, nD3, $08, nRst, $04, nC3, $08, nRst, $0C, nG2, nF3
            109FD : A508 800C A0AA    
(1)   89/   10A03 : 04AB 08AC 04        	dc.b	$04, nFs3, $08, nG3, $04
(1)   90/   10A08 : (MACRO)              	smpsJump            Walkin_Jump00
(1)   90/   10A08 : F6                          dc.b    $F6
(1)   90/   10A09 : =>TRUE                       if SonicDriverVer<>1
(1)   90/   10A09 : 9B89                                dc.w    z80_ptr(Walkin_Jump00)
(1)   90/   10A0B : =>FALSE                      else
(1)   90/   10A0B :                                     dc.w    Walkin_Jump00-*-1
(1)   90/   10A0B : [90]                         endif
(1)   91/   10A0B :                     
(1)   92/   10A0B :                     Walkin_Call03:
(1)   93/   10A0B : 8018 AF08 B104      	dc.b	nRst, $18, nBb3, $08, nC4, $04, nRst, $08, nG3, $04, nRst, $2C
            10A11 : 8008 AC04 802C    
(1)   94/   10A17 : AA04 E708 8004      	dc.b	nF3, $04, smpsNoAttack, $08, nRst, $04, nF3, $08, nRst, $04, nG3, $08
            10A1D : AA08 8004 AC08    
(1)   95/   10A23 : 8004 A708 8004      	dc.b	nRst, $04, nD3, $08, nRst, $04, nG3, $08, nFs3, $04, nF3, $08
            10A29 : AC08 AB04 AA08    
(1)   96/   10A2F : AC04                	dc.b	nG3, $04
(1)   97/   10A31 : (MACRO)              	smpsReturn
(1)   97/   10A31 : =>TRUE                       if SonicDriverVer>=3
(1)   97/   10A31 : F9                                  dc.b    $F9
(1)   97/   10A32 : =>FALSE                      else
(1)   97/   10A32 :                                     dc.b    $E3
(1)   97/   10A32 : [97]                         endif
(1)   98/   10A32 :                     
(1)   99/   10A32 :                     ; FM4 Data
(1)  100/   10A32 :                     Walkin_FM4:
(1)  101/   10A32 : (MACRO)              	smpsSetvoice        $02
(1)  101/   10A32 :  (MACRO-2)                   smpsFMvoice $02
(1)  101/   10A32 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  101/   10A32 :                                     dc.b    $EF,$02|$80,+$81
(1)  101/   10A32 : =>TRUE                       else
(1)  101/   10A32 : EF02                                dc.b    $EF,$02
(1)  101/   10A34 : [101]                        endif
(1)  102/   10A34 : (MACRO)              	smpsPan             panRight, $00
(1)  102/   10A34 : =$0                  panNone set $00
(1)  102/   10A34 : =$40                 panRight set $40
(1)  102/   10A34 : =$80                 panLeft set $80
(1)  102/   10A34 : =$C0                 panCentre set $C0
(1)  102/   10A34 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  102/   10A34 : E040                        dc.b $E0,panRight+$00
(1)  103/   10A36 : 8030                	dc.b	nRst, $30
(1)  104/   10A38 :                     
(1)  105/   10A38 :                     Walkin_Loop02:
(1)  106/   10A38 : 8018 AA08 800C      	dc.b	nRst, $18, nF3, $08, nRst, $0C, nF3, $04, nRst, $2C, nD3, $04
            10A3E : AA04 802C A704    
(1)  107/   10A44 : E708 A704 0880      	dc.b	smpsNoAttack, $08, nD3, $04, $08, nRst, $04, nBb2, $08, nRst, $04, nBb2
            10A4A : 04A3 0880 04A3    
(1)  108/   10A50 : 0880 04A7 0880      	dc.b	$08, nRst, $04, nD3, $08, nRst, $0C, nD3, $04, nRst, $18
            10A56 : 0CA7 0480 18       
(1)  109/   10A5B : (MACRO)              	smpsLoop            $00, $02, Walkin_Loop02
(1)  109/   10A5B : F7                          dc.b    $F7
(1)  109/   10A5C : 0002                        dc.b    $00,$02
(1)  109/   10A5E : =>TRUE                       if SonicDriverVer<>1
(1)  109/   10A5E : 388A                                dc.w    z80_ptr(Walkin_Loop02)
(1)  109/   10A60 : =>FALSE                      else
(1)  109/   10A60 :                                     dc.w    Walkin_Loop02-*-1
(1)  109/   10A60 : [109]                        endif
(1)  110/   10A60 : 8018 A208 800C      	dc.b	nRst, $18, nA2, $08, nRst, $0C, nA2, $04, nRst, $2C, nA2, $04
            10A66 : A204 802C A204    
(1)  111/   10A6C : E708 A204 800C      	dc.b	smpsNoAttack, $08, nA2, $04, nRst, $0C, nA2, $08, nRst, $04, nA2, $08
            10A72 : A208 8004 A208    
(1)  112/   10A78 : 8004 A208 0480      	dc.b	nRst, $04, nA2, $08, $04, nRst, $08, nA2, $04, nRst, $18, nRst
            10A7E : 08A2 0480 1880    
(1)  113/   10A84 : 18AA 0880 0CAA      	dc.b	$18, nF3, $08, nRst, $0C, nF3, $04, nRst, $0C, nF3, $08, nRst
            10A8A : 0480 0CAA 0880    
(1)  114/   10A90 : 0CAA 0480 0C80      	dc.b	$0C, nF3, $04, nRst, $0C, nRst, $08, nD3, $0C, nRst, $04, nBb2
            10A96 : 08A7 0C80 04A3    
(1)  115/   10A9C : 0880 04A3 0880      	dc.b	$08, nRst, $04, nBb2, $08, nRst, $04, nF2, $08, $04, nRst, $08
            10AA2 : 049E 0804 8008    
(1)  116/   10AA8 : 9B0C 8010           	dc.b	nD2, $0C, nRst, $10
(1)  117/   10AAC : (MACRO)              	smpsJump            Walkin_Loop02
(1)  117/   10AAC : F6                          dc.b    $F6
(1)  117/   10AAD : =>TRUE                       if SonicDriverVer<>1
(1)  117/   10AAD : 388A                                dc.w    z80_ptr(Walkin_Loop02)
(1)  117/   10AAF : =>FALSE                      else
(1)  117/   10AAF :                                     dc.w    Walkin_Loop02-*-1
(1)  117/   10AAF : [117]                        endif
(1)  118/   10AAF :                     	
(1)  119/   10AAF :                     ; Unreachable
(1)  120/   10AAF : (MACRO)              	smpsStop
(1)  120/   10AAF : F2                          dc.b    $F2
(1)  121/   10AB0 :                     
(1)  122/   10AB0 :                     ; FM5 Data
(1)  123/   10AB0 :                     Walkin_FM5:
(1)  124/   10AB0 : (MACRO)              	smpsSetvoice        $03
(1)  124/   10AB0 :  (MACRO-2)                   smpsFMvoice $03
(1)  124/   10AB0 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  124/   10AB0 :                                     dc.b    $EF,$03|$80,+$81
(1)  124/   10AB0 : =>TRUE                       else
(1)  124/   10AB0 : EF03                                dc.b    $EF,$03
(1)  124/   10AB2 : [124]                        endif
(1)  125/   10AB2 : 8030                	dc.b	nRst, $30
(1)  126/   10AB4 :                     
(1)  127/   10AB4 :                     Walkin_Loop01:
(1)  128/   10AB4 : (MACRO)              	smpsCall            Walkin_Call01
(1)  128/   10AB4 : F8                          dc.b    $F8
(1)  128/   10AB5 : =>TRUE                       if SonicDriverVer<>1
(1)  128/   10AB5 : CB8A                                dc.w    z80_ptr(Walkin_Call01)
(1)  128/   10AB7 : =>FALSE                      else
(1)  128/   10AB7 :                                     dc.w    Walkin_Call01-*-1
(1)  128/   10AB7 : [128]                        endif
(1)  129/   10AB7 : (MACRO)              	smpsLoop            $00, $04, Walkin_Loop01
(1)  129/   10AB7 : F7                          dc.b    $F7
(1)  129/   10AB8 : 0004                        dc.b    $00,$04
(1)  129/   10ABA : =>TRUE                       if SonicDriverVer<>1
(1)  129/   10ABA : B48A                                dc.w    z80_ptr(Walkin_Loop01)
(1)  129/   10ABC : =>FALSE                      else
(1)  129/   10ABC :                                     dc.w    Walkin_Loop01-*-1
(1)  129/   10ABC : [129]                        endif
(1)  130/   10ABC : (MACRO)              	smpsCall            Walkin_Call02
(1)  130/   10ABC : F8                          dc.b    $F8
(1)  130/   10ABD : =>TRUE                       if SonicDriverVer<>1
(1)  130/   10ABD : DA8A                                dc.w    z80_ptr(Walkin_Call02)
(1)  130/   10ABF : =>FALSE                      else
(1)  130/   10ABF :                                     dc.w    Walkin_Call02-*-1
(1)  130/   10ABF : [130]                        endif
(1)  131/   10ABF : (MACRO)              	smpsCall            Walkin_Call02
(1)  131/   10ABF : F8                          dc.b    $F8
(1)  131/   10AC0 : =>TRUE                       if SonicDriverVer<>1
(1)  131/   10AC0 : DA8A                                dc.w    z80_ptr(Walkin_Call02)
(1)  131/   10AC2 : =>FALSE                      else
(1)  131/   10AC2 :                                     dc.w    Walkin_Call02-*-1
(1)  131/   10AC2 : [131]                        endif
(1)  132/   10AC2 : (MACRO)              	smpsCall            Walkin_Call01
(1)  132/   10AC2 : F8                          dc.b    $F8
(1)  132/   10AC3 : =>TRUE                       if SonicDriverVer<>1
(1)  132/   10AC3 : CB8A                                dc.w    z80_ptr(Walkin_Call01)
(1)  132/   10AC5 : =>FALSE                      else
(1)  132/   10AC5 :                                     dc.w    Walkin_Call01-*-1
(1)  132/   10AC5 : [132]                        endif
(1)  133/   10AC5 : (MACRO)              	smpsCall            Walkin_Call01
(1)  133/   10AC5 : F8                          dc.b    $F8
(1)  133/   10AC6 : =>TRUE                       if SonicDriverVer<>1
(1)  133/   10AC6 : CB8A                                dc.w    z80_ptr(Walkin_Call01)
(1)  133/   10AC8 : =>FALSE                      else
(1)  133/   10AC8 :                                     dc.w    Walkin_Call01-*-1
(1)  133/   10AC8 : [133]                        endif
(1)  134/   10AC8 : (MACRO)              	smpsJump            Walkin_Loop01
(1)  134/   10AC8 : F6                          dc.b    $F6
(1)  134/   10AC9 : =>TRUE                       if SonicDriverVer<>1
(1)  134/   10AC9 : B48A                                dc.w    z80_ptr(Walkin_Loop01)
(1)  134/   10ACB : =>FALSE                      else
(1)  134/   10ACB :                                     dc.w    Walkin_Loop01-*-1
(1)  134/   10ACB : [134]                        endif
(1)  135/   10ACB :                     
(1)  136/   10ACB :                     Walkin_Call01:
(1)  137/   10ACB : 800C AAAC AFAA      	dc.b	nRst, $0C, nF3, nG3, nBb3, nF3, $08, nG3, $0C, nBb3, nF3, $04
            10AD1 : 08AC 0CAF AA04    
(1)  138/   10AD7 : AC0C                	dc.b	nG3, $0C
(1)  139/   10AD9 : (MACRO)              	smpsReturn
(1)  139/   10AD9 : =>TRUE                       if SonicDriverVer>=3
(1)  139/   10AD9 : F9                                  dc.b    $F9
(1)  139/   10ADA : =>FALSE                      else
(1)  139/   10ADA :                                     dc.b    $E3
(1)  139/   10ADA : [139]                        endif
(1)  140/   10ADA :                     
(1)  141/   10ADA :                     Walkin_Call02:
(1)  142/   10ADA : 800C A8AA AEA8      	dc.b	nRst, $0C, nEb3, nF3, nA3, nEb3, $08, nF3, $0C, nA3, nEb3, $04
            10AE0 : 08AA 0CAE A804    
(1)  143/   10AE6 : AA0C                	dc.b	nF3, $0C
(1)  144/   10AE8 : (MACRO)              	smpsReturn
(1)  144/   10AE8 : =>TRUE                       if SonicDriverVer>=3
(1)  144/   10AE8 : F9                                  dc.b    $F9
(1)  144/   10AE9 : =>FALSE                      else
(1)  144/   10AE9 :                                     dc.b    $E3
(1)  144/   10AE9 : [144]                        endif
(1)  145/   10AE9 :                     
(1)  146/   10AE9 :                     ; PSG1 Data
(1)  147/   10AE9 :                     Walkin_PSG1:
(1)  148/   10AE9 : (MACRO)              	smpsPSGvoice        sTone_03
(1)  148/   10AE9 : F503                        dc.b    $F5,sTone_03
(1)  149/   10AEB : (MACRO)              	smpsModSet          $01, $01, $01, $03
(1)  149/   10AEB : F0                          dc.b    $F0
(1)  149/   10AEC : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  149/   10AEC :                                     dc.b    $01+1,$01,$01,(($03+1) * $01) & $FF
(1)  149/   10AEC : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  149/   10AEC :                                     dc.b    $01-1,$01,$01,conv0To256($03)/conv0To256($01)-1
(1)  149/   10AEC : =>TRUE                       else
(1)  149/   10AEC : 0101 0103                           dc.b    $01,$01,$01,$03
(1)  149/   10AF0 : [149]                        endif
(1)  149/   10AF0 :                             ;dc.b   $01,$01,$03
(1)  150/   10AF0 : 8030                	dc.b	nRst, $30
(1)  151/   10AF2 :                     
(1)  152/   10AF2 :                     Walkin_Jump03:
(1)  153/   10AF2 : 8003                	dc.b	nRst, $03
(1)  154/   10AF4 : (MACRO)              	smpsCall            Walkin_Call04
(1)  154/   10AF4 : F8                          dc.b    $F8
(1)  154/   10AF5 : =>TRUE                       if SonicDriverVer<>1
(1)  154/   10AF5 : 1989                                dc.w    z80_ptr(Walkin_Call04)
(1)  154/   10AF7 : =>FALSE                      else
(1)  154/   10AF7 :                                     dc.w    Walkin_Call04-*-1
(1)  154/   10AF7 : [154]                        endif
(1)  155/   10AF7 : 8009                	dc.b	nRst, $09
(1)  156/   10AF9 : (MACRO)              	smpsJump            Walkin_Jump03
(1)  156/   10AF9 : F6                          dc.b    $F6
(1)  156/   10AFA : =>TRUE                       if SonicDriverVer<>1
(1)  156/   10AFA : F28A                                dc.w    z80_ptr(Walkin_Jump03)
(1)  156/   10AFC : =>FALSE                      else
(1)  156/   10AFC :                                     dc.w    Walkin_Jump03-*-1
(1)  156/   10AFC : [156]                        endif
(1)  157/   10AFC :                     
(1)  158/   10AFC :                     ; PSG2 Data
(1)  159/   10AFC :                     Walkin_PSG2:
(1)  160/   10AFC : (MACRO)              	smpsPSGvoice        sTone_0C
(1)  160/   10AFC : F50C                        dc.b    $F5,sTone_0C
(1)  161/   10AFE : 8030                	dc.b	nRst, $30
(1)  162/   10B00 :                     
(1)  163/   10B00 :                     Walkin_Loop04:
(1)  164/   10B00 : (MACRO)              	smpsCall            Walkin_Call06
(1)  164/   10B00 : F8                          dc.b    $F8
(1)  164/   10B01 : =>TRUE                       if SonicDriverVer<>1
(1)  164/   10B01 : 1B8B                                dc.w    z80_ptr(Walkin_Call06)
(1)  164/   10B03 : =>FALSE                      else
(1)  164/   10B03 :                                     dc.w    Walkin_Call06-*-1
(1)  164/   10B03 : [164]                        endif
(1)  165/   10B03 : (MACRO)              	smpsLoop            $01, $04, Walkin_Loop04
(1)  165/   10B03 : F7                          dc.b    $F7
(1)  165/   10B04 : 0104                        dc.b    $01,$04
(1)  165/   10B06 : =>TRUE                       if SonicDriverVer<>1
(1)  165/   10B06 : 008B                                dc.w    z80_ptr(Walkin_Loop04)
(1)  165/   10B08 : =>FALSE                      else
(1)  165/   10B08 :                                     dc.w    Walkin_Loop04-*-1
(1)  165/   10B08 : [165]                        endif
(1)  166/   10B08 : (MACRO)              	smpsAlterPitch      $FE
(1)  166/   10B08 :  (MACRO-2)                   smpsChangeTransposition $FE
(1)  166/   10B08 : =>TRUE                       if SonicDriverVer>=3
(1)  166/   10B08 : FBFE                                dc.b    $FB,$FE
(1)  166/   10B0A : =>FALSE                      else
(1)  166/   10B0A :                                     dc.b    $E9,$FE
(1)  166/   10B0A : [166]                        endif
(1)  167/   10B0A : (MACRO)              	smpsCall            Walkin_Call06
(1)  167/   10B0A : F8                          dc.b    $F8
(1)  167/   10B0B : =>TRUE                       if SonicDriverVer<>1
(1)  167/   10B0B : 1B8B                                dc.w    z80_ptr(Walkin_Call06)
(1)  167/   10B0D : =>FALSE                      else
(1)  167/   10B0D :                                     dc.w    Walkin_Call06-*-1
(1)  167/   10B0D : [167]                        endif
(1)  168/   10B0D : (MACRO)              	smpsCall            Walkin_Call06
(1)  168/   10B0D : F8                          dc.b    $F8
(1)  168/   10B0E : =>TRUE                       if SonicDriverVer<>1
(1)  168/   10B0E : 1B8B                                dc.w    z80_ptr(Walkin_Call06)
(1)  168/   10B10 : =>FALSE                      else
(1)  168/   10B10 :                                     dc.w    Walkin_Call06-*-1
(1)  168/   10B10 : [168]                        endif
(1)  169/   10B10 : (MACRO)              	smpsAlterPitch      $02
(1)  169/   10B10 :  (MACRO-2)                   smpsChangeTransposition $02
(1)  169/   10B10 : =>TRUE                       if SonicDriverVer>=3
(1)  169/   10B10 : FB02                                dc.b    $FB,$02
(1)  169/   10B12 : =>FALSE                      else
(1)  169/   10B12 :                                     dc.b    $E9,$02
(1)  169/   10B12 : [169]                        endif
(1)  170/   10B12 : (MACRO)              	smpsCall            Walkin_Call06
(1)  170/   10B12 : F8                          dc.b    $F8
(1)  170/   10B13 : =>TRUE                       if SonicDriverVer<>1
(1)  170/   10B13 : 1B8B                                dc.w    z80_ptr(Walkin_Call06)
(1)  170/   10B15 : =>FALSE                      else
(1)  170/   10B15 :                                     dc.w    Walkin_Call06-*-1
(1)  170/   10B15 : [170]                        endif
(1)  171/   10B15 : (MACRO)              	smpsCall            Walkin_Call06
(1)  171/   10B15 : F8                          dc.b    $F8
(1)  171/   10B16 : =>TRUE                       if SonicDriverVer<>1
(1)  171/   10B16 : 1B8B                                dc.w    z80_ptr(Walkin_Call06)
(1)  171/   10B18 : =>FALSE                      else
(1)  171/   10B18 :                                     dc.w    Walkin_Call06-*-1
(1)  171/   10B18 : [171]                        endif
(1)  172/   10B18 : (MACRO)              	smpsJump            Walkin_Loop04
(1)  172/   10B18 : F6                          dc.b    $F6
(1)  172/   10B19 : =>TRUE                       if SonicDriverVer<>1
(1)  172/   10B19 : 008B                                dc.w    z80_ptr(Walkin_Loop04)
(1)  172/   10B1B : =>FALSE                      else
(1)  172/   10B1B :                                     dc.w    Walkin_Loop04-*-1
(1)  172/   10B1B : [172]                        endif
(1)  173/   10B1B :                     
(1)  174/   10B1B :                     Walkin_Call06:
(1)  175/   10B1B : AC04 80B3           	dc.b	nG3, $04, nRst, nD4
(1)  176/   10B1F : (MACRO)              	smpsLoop            $00, $08, Walkin_Call06
(1)  176/   10B1F : F7                          dc.b    $F7
(1)  176/   10B20 : 0008                        dc.b    $00,$08
(1)  176/   10B22 : =>TRUE                       if SonicDriverVer<>1
(1)  176/   10B22 : 1B8B                                dc.w    z80_ptr(Walkin_Call06)
(1)  176/   10B24 : =>FALSE                      else
(1)  176/   10B24 :                                     dc.w    Walkin_Call06-*-1
(1)  176/   10B24 : [176]                        endif
(1)  177/   10B24 : (MACRO)              	smpsReturn
(1)  177/   10B24 : =>TRUE                       if SonicDriverVer>=3
(1)  177/   10B24 : F9                                  dc.b    $F9
(1)  177/   10B25 : =>FALSE                      else
(1)  177/   10B25 :                                     dc.b    $E3
(1)  177/   10B25 : [177]                        endif
(1)  178/   10B25 :                     
(1)  179/   10B25 :                     ; PSG3 Data
(1)  180/   10B25 :                     Walkin_PSG3:
(1)  181/   10B25 : (MACRO)              	smpsPSGform         $E7
(1)  181/   10B25 : F3E7                        dc.b    $F3,$E7
(1)  182/   10B27 : 8030                	dc.b	nRst, $30
(1)  183/   10B29 :                     
(1)  184/   10B29 :                     Walkin_Loop03:
(1)  185/   10B29 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  185/   10B29 : F502                        dc.b    $F5,sTone_02
(1)  186/   10B2B : B10C 0C0C 0C0C      	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $08, $04, (nMaxPSG2-$23)&$FF, $0C
            10B31 : 0C0C 0804 B10C    
(1)  187/   10B37 : 0C0C 0C0C 0C08 04   	dc.b	$0C, $0C, $0C, $0C, $0C, $08, $04
(1)  188/   10B3E : (MACRO)              	smpsPSGvoice        sTone_05
(1)  188/   10B3E : F505                        dc.b    $F5,sTone_05
(1)  189/   10B40 : 0C                  	dc.b	$0C
(1)  190/   10B41 : (MACRO)              	smpsLoop            $00, $04, Walkin_Loop03
(1)  190/   10B41 : F7                          dc.b    $F7
(1)  190/   10B42 : 0004                        dc.b    $00,$04
(1)  190/   10B44 : =>TRUE                       if SonicDriverVer<>1
(1)  190/   10B44 : 298B                                dc.w    z80_ptr(Walkin_Loop03)
(1)  190/   10B46 : =>FALSE                      else
(1)  190/   10B46 :                                     dc.w    Walkin_Loop03-*-1
(1)  190/   10B46 : [190]                        endif
(1)  191/   10B46 : (MACRO)              	smpsJump            Walkin_Loop03
(1)  191/   10B46 : F6                          dc.b    $F6
(1)  191/   10B47 : =>TRUE                       if SonicDriverVer<>1
(1)  191/   10B47 : 298B                                dc.w    z80_ptr(Walkin_Loop03)
(1)  191/   10B49 : =>FALSE                      else
(1)  191/   10B49 :                                     dc.w    Walkin_Loop03-*-1
(1)  191/   10B49 : [191]                        endif
(1)  192/   10B49 :                     
(1)  193/   10B49 :                     ; DAC Data
(1)  194/   10B49 :                     Walkin_DAC:
(1)  195/   10B49 : 810C 8282 8208 04   	dc.b	dKick, $0C, dSnare, dSnare, dSnare, $08, $04
(1)  196/   10B50 :                     
(1)  197/   10B50 :                     Walkin_Loop00:
(1)  198/   10B50 : (MACRO)              	smpsCall            Walkin_Call00
(1)  198/   10B50 : F8                          dc.b    $F8
(1)  198/   10B51 : =>TRUE                       if SonicDriverVer<>1
(1)  198/   10B51 : 6E8B                                dc.w    z80_ptr(Walkin_Call00)
(1)  198/   10B53 : =>FALSE                      else
(1)  198/   10B53 :                                     dc.w    Walkin_Call00-*-1
(1)  198/   10B53 : [198]                        endif
(1)  199/   10B53 : 8118 8281 8214 04   	dc.b	dKick, $18, dSnare, dKick, dSnare, $14, $04
(1)  200/   10B5A : (MACRO)              	smpsCall            Walkin_Call00
(1)  200/   10B5A : F8                          dc.b    $F8
(1)  200/   10B5B : =>TRUE                       if SonicDriverVer<>1
(1)  200/   10B5B : 6E8B                                dc.w    z80_ptr(Walkin_Call00)
(1)  200/   10B5D : =>FALSE                      else
(1)  200/   10B5D :                                     dc.w    Walkin_Call00-*-1
(1)  200/   10B5D : [200]                        endif
(1)  201/   10B5D : 8118 8281 8208      	dc.b	dKick, $18, dSnare, dKick, dSnare, $08, $04, $08, $04
            10B63 : 0408 04          
(1)  202/   10B66 : (MACRO)              	smpsLoop            $00, $02, Walkin_Loop00
(1)  202/   10B66 : F7                          dc.b    $F7
(1)  202/   10B67 : 0002                        dc.b    $00,$02
(1)  202/   10B69 : =>TRUE                       if SonicDriverVer<>1
(1)  202/   10B69 : 508B                                dc.w    z80_ptr(Walkin_Loop00)
(1)  202/   10B6B : =>FALSE                      else
(1)  202/   10B6B :                                     dc.w    Walkin_Loop00-*-1
(1)  202/   10B6B : [202]                        endif
(1)  203/   10B6B : (MACRO)              	smpsJump            Walkin_Loop00
(1)  203/   10B6B : F6                          dc.b    $F6
(1)  203/   10B6C : =>TRUE                       if SonicDriverVer<>1
(1)  203/   10B6C : 508B                                dc.w    z80_ptr(Walkin_Loop00)
(1)  203/   10B6E : =>FALSE                      else
(1)  203/   10B6E :                                     dc.w    Walkin_Loop00-*-1
(1)  203/   10B6E : [203]                        endif
(1)  204/   10B6E :                     
(1)  205/   10B6E :                     Walkin_Call00:
(1)  206/   10B6E : 8118 8281 8214 04   	dc.b	dKick, $18, dSnare, dKick, dSnare, $14, $04
(1)  207/   10B75 : (MACRO)              	smpsReturn
(1)  207/   10B75 : =>TRUE                       if SonicDriverVer>=3
(1)  207/   10B75 : F9                                  dc.b    $F9
(1)  207/   10B76 : =>FALSE                      else
(1)  207/   10B76 :                                     dc.b    $E3
(1)  207/   10B76 : [207]                        endif
(1)  208/   10B76 :                     
(1)  209/   10B76 :                     Walkin_Voices:
(1)  210/   10B76 :                     ;	Voice $00
(1)  211/   10B76 :                     ;	$4B
(1)  212/   10B76 :                     ;	$12, $11, $04, $03, 	$3F, $9F, $9F, $9F, 	$02, $0C, $13, $07
(1)  213/   10B76 :                     ;	$12, $0A, $0B, $0A, 	$0F, $3F, $8F, $8F, 	$1B, $0F, $15, $80
(1)  214/   10B76 : (MACRO)              	smpsVcAlgorithm     $03
(1)  214/   10B76 : =$3                  vcAlgorithm set $03
(1)  215/   10B76 : (MACRO)              	smpsVcFeedback      $01
(1)  215/   10B76 : =$1                  vcFeedback set $01
(1)  216/   10B76 : (MACRO)              	smpsVcUnusedBits    $01
(1)  216/   10B76 : =$1                  vcUnusedBits set $01
(1)  216/   10B76 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  216/   10B76 :                                     set vcD1R1Unk,<<5
(1)  216/   10B76 :                                     set vcD1R2Unk,<<5
(1)  216/   10B76 :                                     set vcD1R3Unk,<<5
(1)  216/   10B76 :                                     set vcD1R4Unk,<<5
(1)  216/   10B76 : =>TRUE                       else
(1)  216/   10B76 : =$0                                  set vcD1R1Unk,0
(1)  216/   10B76 : =$0                                  set vcD1R2Unk,0
(1)  216/   10B76 : =$0                                  set vcD1R3Unk,0
(1)  216/   10B76 : =$0                                  set vcD1R4Unk,0
(1)  216/   10B76 : [216]                        endif
(1)  217/   10B76 : (MACRO)              	smpsVcDetune        $00, $00, $01, $01
(1)  217/   10B76 : =$0                          set vcDT1,$00
(1)  217/   10B76 : =$0                          set vcDT2,$00
(1)  217/   10B76 : =$1                          set vcDT3,$01
(1)  217/   10B76 : =$1                          set vcDT4,$01
(1)  218/   10B76 : (MACRO)              	smpsVcCoarseFreq    $03, $04, $01, $02
(1)  218/   10B76 : =$3                          set vcCF1,$03
(1)  218/   10B76 : =$4                          set vcCF2,$04
(1)  218/   10B76 : =$1                          set vcCF3,$01
(1)  218/   10B76 : =$2                          set vcCF4,$02
(1)  219/   10B76 : (MACRO)              	smpsVcRateScale     $02, $02, $02, $00
(1)  219/   10B76 : =$2                          set vcRS1,$02
(1)  219/   10B76 : =$2                          set vcRS2,$02
(1)  219/   10B76 : =$2                          set vcRS3,$02
(1)  219/   10B76 : =$0                          set vcRS4,$00
(1)  220/   10B76 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $3F
(1)  220/   10B76 : =$1F                         set vcAR1,$1F
(1)  220/   10B76 : =$1F                         set vcAR2,$1F
(1)  220/   10B76 : =$1F                         set vcAR3,$1F
(1)  220/   10B76 : =$3F                         set vcAR4,$3F
(1)  221/   10B76 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  221/   10B76 : =>TRUE                       if SourceSMPS2ASM==0
(1)  221/   10B76 : =$0                                  set vcAM1,$00<<5
(1)  221/   10B76 : =$0                                  set vcAM2,$00<<5
(1)  221/   10B76 : =$0                                  set vcAM3,$00<<5
(1)  221/   10B76 : =$0                                  set vcAM4,$00<<5
(1)  221/   10B76 : =>FALSE                      else
(1)  221/   10B76 :                                     set vcAM1,$00<<7
(1)  221/   10B76 :                                     set vcAM2,$00<<7
(1)  221/   10B76 :                                     set vcAM3,$00<<7
(1)  221/   10B76 :                                     set vcAM4,$00<<7
(1)  221/   10B76 : [221]                        endif
(1)  222/   10B76 : (MACRO)              	smpsVcDecayRate1    $07, $13, $0C, $02
(1)  222/   10B76 : =$7                          set vcD1R1,$07
(1)  222/   10B76 : =$13                         set vcD1R2,$13
(1)  222/   10B76 : =$C                          set vcD1R3,$0C
(1)  222/   10B76 : =$2                          set vcD1R4,$02
(1)  223/   10B76 : (MACRO)              	smpsVcDecayRate2    $0A, $0B, $0A, $12
(1)  223/   10B76 : =$A                          set vcD2R1,$0A
(1)  223/   10B76 : =$B                          set vcD2R2,$0B
(1)  223/   10B76 : =$A                          set vcD2R3,$0A
(1)  223/   10B76 : =$12                         set vcD2R4,$12
(1)  224/   10B76 : (MACRO)              	smpsVcDecayLevel    $08, $08, $03, $00
(1)  224/   10B76 : =$8                          set vcDL1,$08
(1)  224/   10B76 : =$8                          set vcDL2,$08
(1)  224/   10B76 : =$3                          set vcDL3,$03
(1)  224/   10B76 : =$0                          set vcDL4,$00
(1)  225/   10B76 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  225/   10B76 : =$F                          set vcRR1,$0F
(1)  225/   10B76 : =$F                          set vcRR2,$0F
(1)  225/   10B76 : =$F                          set vcRR3,$0F
(1)  225/   10B76 : =$F                          set vcRR4,$0F
(1)  226/   10B76 : (MACRO)              	smpsVcTotalLevel    $00, $15, $0F, $1B
(1)  226/   10B76 : =$0                          set vcTL1,$00
(1)  226/   10B76 : =$15                         set vcTL2,$15
(1)  226/   10B76 : =$F                          set vcTL3,$0F
(1)  226/   10B76 : =$1B                         set vcTL4,$1B
(1)  226/   10B76 : 4B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  226/   10B77 :                     ;   0     1     2     3     4     5     6     7
(1)  226/   10B77 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  226/   10B77 : =>TRUE                       if SourceSMPS2ASM==0
(1)  226/   10B77 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  226/   10B77 : =$0                                  set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  226/   10B77 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  226/   10B77 : =$80                                 set vcTLMask1,$80
(1)  226/   10B77 : =>FALSE                      else
(1)  226/   10B77 :                                     set vcTLMask4,0
(1)  226/   10B77 :                                     set vcTLMask3,0
(1)  226/   10B77 :                                     set vcTLMask2,0
(1)  226/   10B77 :                                     set vcTLMask1,0
(1)  226/   10B77 : [226]                        endif
(1)  226/   10B77 :                     
(1)  226/   10B77 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  226/   10B77 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  226/   10B77 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  226/   10B77 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  226/   10B77 :                                     set vcTLMask1,$80
(1)  226/   10B77 :                                     set vcTL1,vcTL1&$7F
(1)  226/   10B77 :                                     set vcTL2,vcTL2&$7F
(1)  226/   10B77 :                                     set vcTL3,vcTL3&$7F
(1)  226/   10B77 :                                     set vcTL4,vcTL4&$7F
(1)  226/   10B77 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  226/   10B77 :                                     if MOMPASS>1
(1)  226/   10B77 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  226/   10B77 : [226]                                endif
(1)  226/   10B77 : [226]                        endif
(1)  226/   10B77 :                     
(1)  226/   10B77 : =>FALSE                      if SonicDriverVer==2
(1)  226/   10B77 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  226/   10B77 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  226/   10B77 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  226/   10B77 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  226/   10B77 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  226/   10B77 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  226/   10B77 : =>TRUE                       else
(1)  226/   10B77 : 1211 0403                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  226/   10B7B : 3F9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  226/   10B7F : 020C 1307                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  226/   10B83 : 120A 0B0A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  226/   10B87 : 0F3F 8F8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  226/   10B8B : 1B0F 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  226/   10B8F : [226]                        endif
(1)  227/   10B8F :                     
(1)  228/   10B8F :                     ;	Voice $01
(1)  229/   10B8F :                     ;	$38
(1)  230/   10B8F :                     ;	$58, $54, $31, $31, 	$1A, $1A, $14, $13, 	$00, $00, $00, $00
(1)  231/   10B8F :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1C, $26, $20, $80
(1)  232/   10B8F : (MACRO)              	smpsVcAlgorithm     $00
(1)  232/   10B8F : =$0                  vcAlgorithm set $00
(1)  233/   10B8F : (MACRO)              	smpsVcFeedback      $07
(1)  233/   10B8F : =$7                  vcFeedback set $07
(1)  234/   10B8F : (MACRO)              	smpsVcUnusedBits    $00
(1)  234/   10B8F : =$0                  vcUnusedBits set $00
(1)  234/   10B8F : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  234/   10B8F :                                     set vcD1R1Unk,<<5
(1)  234/   10B8F :                                     set vcD1R2Unk,<<5
(1)  234/   10B8F :                                     set vcD1R3Unk,<<5
(1)  234/   10B8F :                                     set vcD1R4Unk,<<5
(1)  234/   10B8F : =>TRUE                       else
(1)  234/   10B8F : =$0                                  set vcD1R1Unk,0
(1)  234/   10B8F : =$0                                  set vcD1R2Unk,0
(1)  234/   10B8F : =$0                                  set vcD1R3Unk,0
(1)  234/   10B8F : =$0                                  set vcD1R4Unk,0
(1)  234/   10B8F : [234]                        endif
(1)  235/   10B8F : (MACRO)              	smpsVcDetune        $03, $03, $05, $05
(1)  235/   10B8F : =$3                          set vcDT1,$03
(1)  235/   10B8F : =$3                          set vcDT2,$03
(1)  235/   10B8F : =$5                          set vcDT3,$05
(1)  235/   10B8F : =$5                          set vcDT4,$05
(1)  236/   10B8F : (MACRO)              	smpsVcCoarseFreq    $01, $01, $04, $08
(1)  236/   10B8F : =$1                          set vcCF1,$01
(1)  236/   10B8F : =$1                          set vcCF2,$01
(1)  236/   10B8F : =$4                          set vcCF3,$04
(1)  236/   10B8F : =$8                          set vcCF4,$08
(1)  237/   10B8F : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  237/   10B8F : =$0                          set vcRS1,$00
(1)  237/   10B8F : =$0                          set vcRS2,$00
(1)  237/   10B8F : =$0                          set vcRS3,$00
(1)  237/   10B8F : =$0                          set vcRS4,$00
(1)  238/   10B8F : (MACRO)              	smpsVcAttackRate    $13, $14, $1A, $1A
(1)  238/   10B8F : =$13                         set vcAR1,$13
(1)  238/   10B8F : =$14                         set vcAR2,$14
(1)  238/   10B8F : =$1A                         set vcAR3,$1A
(1)  238/   10B8F : =$1A                         set vcAR4,$1A
(1)  239/   10B8F : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  239/   10B8F : =>TRUE                       if SourceSMPS2ASM==0
(1)  239/   10B8F : =$0                                  set vcAM1,$00<<5
(1)  239/   10B8F : =$0                                  set vcAM2,$00<<5
(1)  239/   10B8F : =$0                                  set vcAM3,$00<<5
(1)  239/   10B8F : =$0                                  set vcAM4,$00<<5
(1)  239/   10B8F : =>FALSE                      else
(1)  239/   10B8F :                                     set vcAM1,$00<<7
(1)  239/   10B8F :                                     set vcAM2,$00<<7
(1)  239/   10B8F :                                     set vcAM3,$00<<7
(1)  239/   10B8F :                                     set vcAM4,$00<<7
(1)  239/   10B8F : [239]                        endif
(1)  240/   10B8F : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)  240/   10B8F : =$0                          set vcD1R1,$00
(1)  240/   10B8F : =$0                          set vcD1R2,$00
(1)  240/   10B8F : =$0                          set vcD1R3,$00
(1)  240/   10B8F : =$0                          set vcD1R4,$00
(1)  241/   10B8F : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)  241/   10B8F : =$0                          set vcD2R1,$00
(1)  241/   10B8F : =$0                          set vcD2R2,$00
(1)  241/   10B8F : =$0                          set vcD2R3,$00
(1)  241/   10B8F : =$0                          set vcD2R4,$00
(1)  242/   10B8F : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)  242/   10B8F : =$0                          set vcDL1,$00
(1)  242/   10B8F : =$0                          set vcDL2,$00
(1)  242/   10B8F : =$0                          set vcDL3,$00
(1)  242/   10B8F : =$0                          set vcDL4,$00
(1)  243/   10B8F : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  243/   10B8F : =$F                          set vcRR1,$0F
(1)  243/   10B8F : =$F                          set vcRR2,$0F
(1)  243/   10B8F : =$F                          set vcRR3,$0F
(1)  243/   10B8F : =$F                          set vcRR4,$0F
(1)  244/   10B8F : (MACRO)              	smpsVcTotalLevel    $00, $20, $26, $1C
(1)  244/   10B8F : =$0                          set vcTL1,$00
(1)  244/   10B8F : =$20                         set vcTL2,$20
(1)  244/   10B8F : =$26                         set vcTL3,$26
(1)  244/   10B8F : =$1C                         set vcTL4,$1C
(1)  244/   10B8F : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  244/   10B90 :                     ;   0     1     2     3     4     5     6     7
(1)  244/   10B90 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  244/   10B90 : =>TRUE                       if SourceSMPS2ASM==0
(1)  244/   10B90 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  244/   10B90 : =$0                                  set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  244/   10B90 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  244/   10B90 : =$80                                 set vcTLMask1,$80
(1)  244/   10B90 : =>FALSE                      else
(1)  244/   10B90 :                                     set vcTLMask4,0
(1)  244/   10B90 :                                     set vcTLMask3,0
(1)  244/   10B90 :                                     set vcTLMask2,0
(1)  244/   10B90 :                                     set vcTLMask1,0
(1)  244/   10B90 : [244]                        endif
(1)  244/   10B90 :                     
(1)  244/   10B90 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  244/   10B90 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  244/   10B90 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  244/   10B90 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  244/   10B90 :                                     set vcTLMask1,$80
(1)  244/   10B90 :                                     set vcTL1,vcTL1&$7F
(1)  244/   10B90 :                                     set vcTL2,vcTL2&$7F
(1)  244/   10B90 :                                     set vcTL3,vcTL3&$7F
(1)  244/   10B90 :                                     set vcTL4,vcTL4&$7F
(1)  244/   10B90 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  244/   10B90 :                                     if MOMPASS>1
(1)  244/   10B90 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  244/   10B90 : [244]                                endif
(1)  244/   10B90 : [244]                        endif
(1)  244/   10B90 :                     
(1)  244/   10B90 : =>FALSE                      if SonicDriverVer==2
(1)  244/   10B90 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  244/   10B90 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  244/   10B90 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  244/   10B90 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  244/   10B90 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  244/   10B90 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  244/   10B90 : =>TRUE                       else
(1)  244/   10B90 : 5854 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  244/   10B94 : 1A1A 1413                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  244/   10B98 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  244/   10B9C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  244/   10BA0 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  244/   10BA4 : 1C26 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  244/   10BA8 : [244]                        endif
(1)  245/   10BA8 :                     
(1)  246/   10BA8 :                     ;	Voice $02
(1)  247/   10BA8 :                     ;	$97
(1)  248/   10BA8 :                     ;	$66, $31, $50, $22, 	$1C, $98, $1F, $1F, 	$12, $0F, $06, $0C
(1)  249/   10BA8 :                     ;	$00, $1A, $10, $04, 	$0F, $FF, $FF, $FF, 	$80, $80, $80, $80
(1)  250/   10BA8 : (MACRO)              	smpsVcAlgorithm     $07
(1)  250/   10BA8 : =$7                  vcAlgorithm set $07
(1)  251/   10BA8 : (MACRO)              	smpsVcFeedback      $02
(1)  251/   10BA8 : =$2                  vcFeedback set $02
(1)  252/   10BA8 : (MACRO)              	smpsVcUnusedBits    $02
(1)  252/   10BA8 : =$2                  vcUnusedBits set $02
(1)  252/   10BA8 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  252/   10BA8 :                                     set vcD1R1Unk,<<5
(1)  252/   10BA8 :                                     set vcD1R2Unk,<<5
(1)  252/   10BA8 :                                     set vcD1R3Unk,<<5
(1)  252/   10BA8 :                                     set vcD1R4Unk,<<5
(1)  252/   10BA8 : =>TRUE                       else
(1)  252/   10BA8 : =$0                                  set vcD1R1Unk,0
(1)  252/   10BA8 : =$0                                  set vcD1R2Unk,0
(1)  252/   10BA8 : =$0                                  set vcD1R3Unk,0
(1)  252/   10BA8 : =$0                                  set vcD1R4Unk,0
(1)  252/   10BA8 : [252]                        endif
(1)  253/   10BA8 : (MACRO)              	smpsVcDetune        $02, $05, $03, $06
(1)  253/   10BA8 : =$2                          set vcDT1,$02
(1)  253/   10BA8 : =$5                          set vcDT2,$05
(1)  253/   10BA8 : =$3                          set vcDT3,$03
(1)  253/   10BA8 : =$6                          set vcDT4,$06
(1)  254/   10BA8 : (MACRO)              	smpsVcCoarseFreq    $02, $00, $01, $06
(1)  254/   10BA8 : =$2                          set vcCF1,$02
(1)  254/   10BA8 : =$0                          set vcCF2,$00
(1)  254/   10BA8 : =$1                          set vcCF3,$01
(1)  254/   10BA8 : =$6                          set vcCF4,$06
(1)  255/   10BA8 : (MACRO)              	smpsVcRateScale     $00, $00, $02, $00
(1)  255/   10BA8 : =$0                          set vcRS1,$00
(1)  255/   10BA8 : =$0                          set vcRS2,$00
(1)  255/   10BA8 : =$2                          set vcRS3,$02
(1)  255/   10BA8 : =$0                          set vcRS4,$00
(1)  256/   10BA8 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $18, $1C
(1)  256/   10BA8 : =$1F                         set vcAR1,$1F
(1)  256/   10BA8 : =$1F                         set vcAR2,$1F
(1)  256/   10BA8 : =$18                         set vcAR3,$18
(1)  256/   10BA8 : =$1C                         set vcAR4,$1C
(1)  257/   10BA8 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  257/   10BA8 : =>TRUE                       if SourceSMPS2ASM==0
(1)  257/   10BA8 : =$0                                  set vcAM1,$00<<5
(1)  257/   10BA8 : =$0                                  set vcAM2,$00<<5
(1)  257/   10BA8 : =$0                                  set vcAM3,$00<<5
(1)  257/   10BA8 : =$0                                  set vcAM4,$00<<5
(1)  257/   10BA8 : =>FALSE                      else
(1)  257/   10BA8 :                                     set vcAM1,$00<<7
(1)  257/   10BA8 :                                     set vcAM2,$00<<7
(1)  257/   10BA8 :                                     set vcAM3,$00<<7
(1)  257/   10BA8 :                                     set vcAM4,$00<<7
(1)  257/   10BA8 : [257]                        endif
(1)  258/   10BA8 : (MACRO)              	smpsVcDecayRate1    $0C, $06, $0F, $12
(1)  258/   10BA8 : =$C                          set vcD1R1,$0C
(1)  258/   10BA8 : =$6                          set vcD1R2,$06
(1)  258/   10BA8 : =$F                          set vcD1R3,$0F
(1)  258/   10BA8 : =$12                         set vcD1R4,$12
(1)  259/   10BA8 : (MACRO)              	smpsVcDecayRate2    $04, $10, $1A, $00
(1)  259/   10BA8 : =$4                          set vcD2R1,$04
(1)  259/   10BA8 : =$10                         set vcD2R2,$10
(1)  259/   10BA8 : =$1A                         set vcD2R3,$1A
(1)  259/   10BA8 : =$0                          set vcD2R4,$00
(1)  260/   10BA8 : (MACRO)              	smpsVcDecayLevel    $0F, $0F, $0F, $00
(1)  260/   10BA8 : =$F                          set vcDL1,$0F
(1)  260/   10BA8 : =$F                          set vcDL2,$0F
(1)  260/   10BA8 : =$F                          set vcDL3,$0F
(1)  260/   10BA8 : =$0                          set vcDL4,$00
(1)  261/   10BA8 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  261/   10BA8 : =$F                          set vcRR1,$0F
(1)  261/   10BA8 : =$F                          set vcRR2,$0F
(1)  261/   10BA8 : =$F                          set vcRR3,$0F
(1)  261/   10BA8 : =$F                          set vcRR4,$0F
(1)  262/   10BA8 : (MACRO)              	smpsVcTotalLevel    $00, $00, $00, $00
(1)  262/   10BA8 : =$0                          set vcTL1,$00
(1)  262/   10BA8 : =$0                          set vcTL2,$00
(1)  262/   10BA8 : =$0                          set vcTL3,$00
(1)  262/   10BA8 : =$0                          set vcTL4,$00
(1)  262/   10BA8 : 97                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  262/   10BA9 :                     ;   0     1     2     3     4     5     6     7
(1)  262/   10BA9 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  262/   10BA9 : =>TRUE                       if SourceSMPS2ASM==0
(1)  262/   10BA9 : =$80                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  262/   10BA9 : =$80                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  262/   10BA9 : =$80                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  262/   10BA9 : =$80                                 set vcTLMask1,$80
(1)  262/   10BA9 : =>FALSE                      else
(1)  262/   10BA9 :                                     set vcTLMask4,0
(1)  262/   10BA9 :                                     set vcTLMask3,0
(1)  262/   10BA9 :                                     set vcTLMask2,0
(1)  262/   10BA9 :                                     set vcTLMask1,0
(1)  262/   10BA9 : [262]                        endif
(1)  262/   10BA9 :                     
(1)  262/   10BA9 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  262/   10BA9 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  262/   10BA9 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  262/   10BA9 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  262/   10BA9 :                                     set vcTLMask1,$80
(1)  262/   10BA9 :                                     set vcTL1,vcTL1&$7F
(1)  262/   10BA9 :                                     set vcTL2,vcTL2&$7F
(1)  262/   10BA9 :                                     set vcTL3,vcTL3&$7F
(1)  262/   10BA9 :                                     set vcTL4,vcTL4&$7F
(1)  262/   10BA9 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  262/   10BA9 :                                     if MOMPASS>1
(1)  262/   10BA9 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  262/   10BA9 : [262]                                endif
(1)  262/   10BA9 : [262]                        endif
(1)  262/   10BA9 :                     
(1)  262/   10BA9 : =>FALSE                      if SonicDriverVer==2
(1)  262/   10BA9 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  262/   10BA9 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  262/   10BA9 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  262/   10BA9 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  262/   10BA9 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  262/   10BA9 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  262/   10BA9 : =>TRUE                       else
(1)  262/   10BA9 : 6631 5022                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  262/   10BAD : 1C98 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  262/   10BB1 : 120F 060C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  262/   10BB5 : 001A 1004                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  262/   10BB9 : 0FFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  262/   10BBD : 8080 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  262/   10BC1 : [262]                        endif
(1)  263/   10BC1 :                     
(1)  264/   10BC1 :                     ;	Voice $03
(1)  265/   10BC1 :                     ;	$3B
(1)  266/   10BC1 :                     ;	$32, $36, $31, $04, 	$DF, $1F, $1F, $DF, 	$0D, $0D, $02, $09
(1)  267/   10BC1 :                     ;	$0E, $0A, $14, $F0, 	$FF, $0F, $4F, $FF, 	$28, $18, $0F, $80
(1)  268/   10BC1 : (MACRO)              	smpsVcAlgorithm     $03
(1)  268/   10BC1 : =$3                  vcAlgorithm set $03
(1)  269/   10BC1 : (MACRO)              	smpsVcFeedback      $07
(1)  269/   10BC1 : =$7                  vcFeedback set $07
(1)  270/   10BC1 : (MACRO)              	smpsVcUnusedBits    $00
(1)  270/   10BC1 : =$0                  vcUnusedBits set $00
(1)  270/   10BC1 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  270/   10BC1 :                                     set vcD1R1Unk,<<5
(1)  270/   10BC1 :                                     set vcD1R2Unk,<<5
(1)  270/   10BC1 :                                     set vcD1R3Unk,<<5
(1)  270/   10BC1 :                                     set vcD1R4Unk,<<5
(1)  270/   10BC1 : =>TRUE                       else
(1)  270/   10BC1 : =$0                                  set vcD1R1Unk,0
(1)  270/   10BC1 : =$0                                  set vcD1R2Unk,0
(1)  270/   10BC1 : =$0                                  set vcD1R3Unk,0
(1)  270/   10BC1 : =$0                                  set vcD1R4Unk,0
(1)  270/   10BC1 : [270]                        endif
(1)  271/   10BC1 : (MACRO)              	smpsVcDetune        $00, $03, $03, $03
(1)  271/   10BC1 : =$0                          set vcDT1,$00
(1)  271/   10BC1 : =$3                          set vcDT2,$03
(1)  271/   10BC1 : =$3                          set vcDT3,$03
(1)  271/   10BC1 : =$3                          set vcDT4,$03
(1)  272/   10BC1 : (MACRO)              	smpsVcCoarseFreq    $04, $01, $06, $02
(1)  272/   10BC1 : =$4                          set vcCF1,$04
(1)  272/   10BC1 : =$1                          set vcCF2,$01
(1)  272/   10BC1 : =$6                          set vcCF3,$06
(1)  272/   10BC1 : =$2                          set vcCF4,$02
(1)  273/   10BC1 : (MACRO)              	smpsVcRateScale     $03, $00, $00, $03
(1)  273/   10BC1 : =$3                          set vcRS1,$03
(1)  273/   10BC1 : =$0                          set vcRS2,$00
(1)  273/   10BC1 : =$0                          set vcRS3,$00
(1)  273/   10BC1 : =$3                          set vcRS4,$03
(1)  274/   10BC1 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  274/   10BC1 : =$1F                         set vcAR1,$1F
(1)  274/   10BC1 : =$1F                         set vcAR2,$1F
(1)  274/   10BC1 : =$1F                         set vcAR3,$1F
(1)  274/   10BC1 : =$1F                         set vcAR4,$1F
(1)  275/   10BC1 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  275/   10BC1 : =>TRUE                       if SourceSMPS2ASM==0
(1)  275/   10BC1 : =$0                                  set vcAM1,$00<<5
(1)  275/   10BC1 : =$0                                  set vcAM2,$00<<5
(1)  275/   10BC1 : =$0                                  set vcAM3,$00<<5
(1)  275/   10BC1 : =$0                                  set vcAM4,$00<<5
(1)  275/   10BC1 : =>FALSE                      else
(1)  275/   10BC1 :                                     set vcAM1,$00<<7
(1)  275/   10BC1 :                                     set vcAM2,$00<<7
(1)  275/   10BC1 :                                     set vcAM3,$00<<7
(1)  275/   10BC1 :                                     set vcAM4,$00<<7
(1)  275/   10BC1 : [275]                        endif
(1)  276/   10BC1 : (MACRO)              	smpsVcDecayRate1    $09, $02, $0D, $0D
(1)  276/   10BC1 : =$9                          set vcD1R1,$09
(1)  276/   10BC1 : =$2                          set vcD1R2,$02
(1)  276/   10BC1 : =$D                          set vcD1R3,$0D
(1)  276/   10BC1 : =$D                          set vcD1R4,$0D
(1)  277/   10BC1 : (MACRO)              	smpsVcDecayRate2    $F0, $14, $0A, $0E
(1)  277/   10BC1 : =$F0                         set vcD2R1,$F0
(1)  277/   10BC1 : =$14                         set vcD2R2,$14
(1)  277/   10BC1 : =$A                          set vcD2R3,$0A
(1)  277/   10BC1 : =$E                          set vcD2R4,$0E
(1)  278/   10BC1 : (MACRO)              	smpsVcDecayLevel    $0F, $04, $00, $0F
(1)  278/   10BC1 : =$F                          set vcDL1,$0F
(1)  278/   10BC1 : =$4                          set vcDL2,$04
(1)  278/   10BC1 : =$0                          set vcDL3,$00
(1)  278/   10BC1 : =$F                          set vcDL4,$0F
(1)  279/   10BC1 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  279/   10BC1 : =$F                          set vcRR1,$0F
(1)  279/   10BC1 : =$F                          set vcRR2,$0F
(1)  279/   10BC1 : =$F                          set vcRR3,$0F
(1)  279/   10BC1 : =$F                          set vcRR4,$0F
(1)  280/   10BC1 : (MACRO)              	smpsVcTotalLevel    $00, $0F, $18, $28
(1)  280/   10BC1 : =$0                          set vcTL1,$00
(1)  280/   10BC1 : =$F                          set vcTL2,$0F
(1)  280/   10BC1 : =$18                         set vcTL3,$18
(1)  280/   10BC1 : =$28                         set vcTL4,$28
(1)  280/   10BC1 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  280/   10BC2 :                     ;   0     1     2     3     4     5     6     7
(1)  280/   10BC2 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  280/   10BC2 : =>TRUE                       if SourceSMPS2ASM==0
(1)  280/   10BC2 : =$0                                  set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  280/   10BC2 : =$0                                  set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  280/   10BC2 : =$0                                  set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  280/   10BC2 : =$80                                 set vcTLMask1,$80
(1)  280/   10BC2 : =>FALSE                      else
(1)  280/   10BC2 :                                     set vcTLMask4,0
(1)  280/   10BC2 :                                     set vcTLMask3,0
(1)  280/   10BC2 :                                     set vcTLMask2,0
(1)  280/   10BC2 :                                     set vcTLMask1,0
(1)  280/   10BC2 : [280]                        endif
(1)  280/   10BC2 :                     
(1)  280/   10BC2 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  280/   10BC2 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  280/   10BC2 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  280/   10BC2 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  280/   10BC2 :                                     set vcTLMask1,$80
(1)  280/   10BC2 :                                     set vcTL1,vcTL1&$7F
(1)  280/   10BC2 :                                     set vcTL2,vcTL2&$7F
(1)  280/   10BC2 :                                     set vcTL3,vcTL3&$7F
(1)  280/   10BC2 :                                     set vcTL4,vcTL4&$7F
(1)  280/   10BC2 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  280/   10BC2 :                                     if MOMPASS>1
(1)  280/   10BC2 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  280/   10BC2 : [280]                                endif
(1)  280/   10BC2 : [280]                        endif
(1)  280/   10BC2 :                     
(1)  280/   10BC2 : =>FALSE                      if SonicDriverVer==2
(1)  280/   10BC2 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  280/   10BC2 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  280/   10BC2 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  280/   10BC2 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  280/   10BC2 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  280/   10BC2 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  280/   10BC2 : =>TRUE                       else
(1)  280/   10BC2 : 3236 3104                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  280/   10BC6 : DF1F 1FDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  280/   10BCA : 0D0D 0209                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  280/   10BCE : 0E0A 14F0                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  280/   10BD2 : FF0F 4FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  280/   10BD6 : 2818 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  280/   10BDA : [280]                        endif
(1)  281/   10BDA :                     
(1)  282/   10BDA :                     
   18781/   10BDA :                     Music83:	include	"Sound/Music/Mus83 - Hyper-Hyper.asm"
(1)    1/   10BDA :                     Hyper_Hyper_Header:
(1)    2/   10BDA : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   10BDA :                     
(1)    2/   10BDA : =$3                  SourceDriver set 3
(1)    2/   10BDA :                     
(1)    2/   10BDA : =>TRUE                       if ("1"<>"")
(1)    2/   10BDA : =$1                                  set SourceSMPS2ASM,1
(1)    2/   10BDA : =>FALSE                      else
(1)    2/   10BDA :                                     set SourceSMPS2ASM,0
(1)    2/   10BDA : [2]                          endif
(1)    2/   10BDA :                     
(1)    2/   10BDA : =$10BDA              songStart set *
(1)    2/   10BDA :                     
(1)    2/   10BDA : =>TRUE                       if MOMPASS>1
(1)    2/   10BDA : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   10BDA :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   10BDA : [2]                                  endif
(1)    2/   10BDA : [2]                          endif
(1)    2/   10BDA :                     
(1)    3/   10BDA : (MACRO)              	smpsHeaderVoice     Hyper_Hyper_Voices
(1)    3/   10BDA : =>FALSE                      if songStart<>*
(1)    3/   10BDA :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   10BDA : [3]                          endif
(1)    3/   10BDA : =>TRUE                       if SonicDriverVer<>1
(1)    3/   10BDA : AC91                                dc.w    z80_ptr(Hyper_Hyper_Voices)
(1)    3/   10BDC : =>FALSE                      else
(1)    3/   10BDC :                                     if MOMPASS>1
(1)    3/   10BDC :                                             if Hyper_Hyper_Voices<songStart
(1)    3/   10BDC :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/   10BDC : [3]                                          endif
(1)    3/   10BDC : [3]                                  endif
(1)    3/   10BDC :                                     dc.w    Hyper_Hyper_Voices-songStart
(1)    3/   10BDC : [3]                          endif
(1)    4/   10BDC : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/   10BDC : 0603                        dc.b    $06,$03
(1)    5/   10BDE : (MACRO)              	smpsHeaderTempo     $01, $26
(1)    5/   10BDE : 01                          dc.b    $01
(1)    5/   10BDF :  (MACRO-2)                   convertMainTempoMod $26
(1)    5/   10BDF : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/   10BDF : 26                                  dc.b    $26
(1)    5/   10BE0 : =>FALSE                      elseif SourceDriver==1
(1)    5/   10BE0 :                                     if $26==1
(1)    5/   10BE0 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/   10BE0 : [5]                                  endif
(1)    5/   10BE0 :                                     if SonicDriverVer==2
(1)    5/   10BE0 :                                             dc.b    s1TempotoS2($26)
(1)    5/   10BE0 :                                     else;if SonicDriverVer>=3
(1)    5/   10BE0 :                                             dc.b    s1TempotoS3($26)
(1)    5/   10BE0 : [5]                                  endif
(1)    5/   10BE0 : =>FALSE                      elseif SourceDriver==2
(1)    5/   10BE0 :                                     if $26==0
(1)    5/   10BE0 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/   10BE0 : [5]                                  endif
(1)    5/   10BE0 :                                     if SonicDriverVer==1
(1)    5/   10BE0 :                                             dc.b    s2TempotoS1($26)
(1)    5/   10BE0 :                                     else;if SonicDriverVer>=3
(1)    5/   10BE0 :                                             dc.b    s2TempotoS3($26)
(1)    5/   10BE0 : [5]                                  endif
(1)    5/   10BE0 : =>FALSE                      else;if SourceDriver>=3
(1)    5/   10BE0 :                                     if $26==0
(1)    5/   10BE0 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/   10BE0 : [5]                                  endif
(1)    5/   10BE0 :                                     if SonicDriverVer==1
(1)    5/   10BE0 :                                             dc.b    s3TempotoS1($26)
(1)    5/   10BE0 :                                     else;if SonicDriverVer==2
(1)    5/   10BE0 :                                             dc.b    s3TempotoS2($26)
(1)    5/   10BE0 : [5]                                  endif
(1)    5/   10BE0 : [5]                          endif
(1)    6/   10BE0 :                     
(1)    7/   10BE0 : (MACRO)              	smpsHeaderDAC       Hyper_Hyper_DAC
(1)    7/   10BE0 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_DAC
(1)    7/   10BE0 : =>TRUE                       if SonicDriverVer<>1
(1)    7/   10BE0 : 3291                                dc.w    z80_ptr(Hyper_Hyper_DAC)
(1)    7/   10BE2 : =>FALSE                      else
(1)    7/   10BE2 :                                     if MOMPASS>1
(1)    7/   10BE2 :                                             if Hyper_Hyper_DAC<songStart
(1)    7/   10BE2 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/   10BE2 : [7]                                          endif
(1)    7/   10BE2 : [7]                                  endif
(1)    7/   10BE2 :                                     dc.w    Hyper_Hyper_DAC-songStart
(1)    7/   10BE2 : [7]                          endif
(1)    7/   10BE2 : =>FALSE                      if (""<>"")
(1)    7/   10BE2 :                                     dc.b    
(1)    7/   10BE2 :                                     if (""<>"")
(1)    7/   10BE2 :                                             dc.b    
(1)    7/   10BE2 :                                     else
(1)    7/   10BE2 :                                             dc.b    $00
(1)    7/   10BE2 : [7]                                  endif
(1)    7/   10BE2 : =>TRUE                       else
(1)    7/   10BE2 : 0000                                dc.w    $00
(1)    7/   10BE4 : [7]                          endif
(1)    8/   10BE4 : (MACRO)              	smpsHeaderFM        Hyper_Hyper_FM1,	$00, $10
(1)    8/   10BE4 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_FM1
(1)    8/   10BE4 : =>TRUE                       if SonicDriverVer<>1
(1)    8/   10BE4 : 0A8C                                dc.w    z80_ptr(Hyper_Hyper_FM1)
(1)    8/   10BE6 : =>FALSE                      else
(1)    8/   10BE6 :                                     if MOMPASS>1
(1)    8/   10BE6 :                                             if Hyper_Hyper_FM1<songStart
(1)    8/   10BE6 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   10BE6 : [8]                                          endif
(1)    8/   10BE6 : [8]                                  endif
(1)    8/   10BE6 :                                     dc.w    Hyper_Hyper_FM1-songStart
(1)    8/   10BE6 : [8]                          endif
(1)    8/   10BE6 : 0010                        dc.b    $00,$10
(1)    9/   10BE8 : (MACRO)              	smpsHeaderFM        Hyper_Hyper_FM2,	$00, $16
(1)    9/   10BE8 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_FM2
(1)    9/   10BE8 : =>TRUE                       if SonicDriverVer<>1
(1)    9/   10BE8 : 708C                                dc.w    z80_ptr(Hyper_Hyper_FM2)
(1)    9/   10BEA : =>FALSE                      else
(1)    9/   10BEA :                                     if MOMPASS>1
(1)    9/   10BEA :                                             if Hyper_Hyper_FM2<songStart
(1)    9/   10BEA :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   10BEA : [9]                                          endif
(1)    9/   10BEA : [9]                                  endif
(1)    9/   10BEA :                                     dc.w    Hyper_Hyper_FM2-songStart
(1)    9/   10BEA : [9]                          endif
(1)    9/   10BEA : 0016                        dc.b    $00,$16
(1)   10/   10BEC : (MACRO)              	smpsHeaderFM        Hyper_Hyper_FM3,	$00, $16
(1)   10/   10BEC :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_FM3
(1)   10/   10BEC : =>TRUE                       if SonicDriverVer<>1
(1)   10/   10BEC : 348D                                dc.w    z80_ptr(Hyper_Hyper_FM3)
(1)   10/   10BEE : =>FALSE                      else
(1)   10/   10BEE :                                     if MOMPASS>1
(1)   10/   10BEE :                                             if Hyper_Hyper_FM3<songStart
(1)   10/   10BEE :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/   10BEE : [10]                                         endif
(1)   10/   10BEE : [10]                                 endif
(1)   10/   10BEE :                                     dc.w    Hyper_Hyper_FM3-songStart
(1)   10/   10BEE : [10]                         endif
(1)   10/   10BEE : 0016                        dc.b    $00,$16
(1)   11/   10BF0 : (MACRO)              	smpsHeaderFM        Hyper_Hyper_FM4,	$00, $16
(1)   11/   10BF0 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_FM4
(1)   11/   10BF0 : =>TRUE                       if SonicDriverVer<>1
(1)   11/   10BF0 : 358E                                dc.w    z80_ptr(Hyper_Hyper_FM4)
(1)   11/   10BF2 : =>FALSE                      else
(1)   11/   10BF2 :                                     if MOMPASS>1
(1)   11/   10BF2 :                                             if Hyper_Hyper_FM4<songStart
(1)   11/   10BF2 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/   10BF2 : [11]                                         endif
(1)   11/   10BF2 : [11]                                 endif
(1)   11/   10BF2 :                                     dc.w    Hyper_Hyper_FM4-songStart
(1)   11/   10BF2 : [11]                         endif
(1)   11/   10BF2 : 0016                        dc.b    $00,$16
(1)   12/   10BF4 : (MACRO)              	smpsHeaderFM        Hyper_Hyper_FM5,	$00, $10
(1)   12/   10BF4 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_FM5
(1)   12/   10BF4 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   10BF4 : 328F                                dc.w    z80_ptr(Hyper_Hyper_FM5)
(1)   12/   10BF6 : =>FALSE                      else
(1)   12/   10BF6 :                                     if MOMPASS>1
(1)   12/   10BF6 :                                             if Hyper_Hyper_FM5<songStart
(1)   12/   10BF6 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   10BF6 : [12]                                         endif
(1)   12/   10BF6 : [12]                                 endif
(1)   12/   10BF6 :                                     dc.w    Hyper_Hyper_FM5-songStart
(1)   12/   10BF6 : [12]                         endif
(1)   12/   10BF6 : 0010                        dc.b    $00,$10
(1)   13/   10BF8 : (MACRO)              	smpsHeaderPSG       Hyper_Hyper_PSG1,	$00, $00, $00, $00
(1)   13/   10BF8 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_PSG1
(1)   13/   10BF8 : =>TRUE                       if SonicDriverVer<>1
(1)   13/   10BF8 : 898F                                dc.w    z80_ptr(Hyper_Hyper_PSG1)
(1)   13/   10BFA : =>FALSE                      else
(1)   13/   10BFA :                                     if MOMPASS>1
(1)   13/   10BFA :                                             if Hyper_Hyper_PSG1<songStart
(1)   13/   10BFA :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   10BFA : [13]                                         endif
(1)   13/   10BFA : [13]                                 endif
(1)   13/   10BFA :                                     dc.w    Hyper_Hyper_PSG1-songStart
(1)   13/   10BFA : [13]                         endif
(1)   13/   10BFA :  (MACRO-2)                   PSGPitchConvert $00
(1)   13/   10BFA : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/   10BFA :                                     dc.b    ($00+psgdelta)&$FF
(1)   13/   10BFA : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/   10BFA :                                     dc.b    ($00-psgdelta)&$FF
(1)   13/   10BFA : =>TRUE                       else
(1)   13/   10BFA : 00                                  dc.b    $00
(1)   13/   10BFB : [13]                         endif
(1)   13/   10BFB : 00                          dc.b    $00
(1)   13/   10BFC :                             ; Frequency envelope
(1)   13/   10BFC : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/   10BFC :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/   10BFC :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/   10BFC :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/   10BFC :                                     dc.b    0
(1)   13/   10BFC : =>TRUE                       else
(1)   13/   10BFC : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/   10BFC :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/   10BFC : [13]                                 endif
(1)   13/   10BFC : 00                                  dc.b    $00
(1)   13/   10BFD : [13]                         endif
(1)   13/   10BFD :                             ; Volume envelope
(1)   13/   10BFD : 00                          dc.b    $00
(1)   14/   10BFE : (MACRO)              	smpsHeaderPSG       Hyper_Hyper_PSG2,	$00, $04, $00, $00
(1)   14/   10BFE :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_PSG2
(1)   14/   10BFE : =>TRUE                       if SonicDriverVer<>1
(1)   14/   10BFE : 3B90                                dc.w    z80_ptr(Hyper_Hyper_PSG2)
(1)   14/   10C00 : =>FALSE                      else
(1)   14/   10C00 :                                     if MOMPASS>1
(1)   14/   10C00 :                                             if Hyper_Hyper_PSG2<songStart
(1)   14/   10C00 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   10C00 : [14]                                         endif
(1)   14/   10C00 : [14]                                 endif
(1)   14/   10C00 :                                     dc.w    Hyper_Hyper_PSG2-songStart
(1)   14/   10C00 : [14]                         endif
(1)   14/   10C00 :  (MACRO-2)                   PSGPitchConvert $00
(1)   14/   10C00 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   10C00 :                                     dc.b    ($00+psgdelta)&$FF
(1)   14/   10C00 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   10C00 :                                     dc.b    ($00-psgdelta)&$FF
(1)   14/   10C00 : =>TRUE                       else
(1)   14/   10C00 : 00                                  dc.b    $00
(1)   14/   10C01 : [14]                         endif
(1)   14/   10C01 : 04                          dc.b    $04
(1)   14/   10C02 :                             ; Frequency envelope
(1)   14/   10C02 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/   10C02 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/   10C02 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/   10C02 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/   10C02 :                                     dc.b    0
(1)   14/   10C02 : =>TRUE                       else
(1)   14/   10C02 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/   10C02 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/   10C02 : [14]                                 endif
(1)   14/   10C02 : 00                                  dc.b    $00
(1)   14/   10C03 : [14]                         endif
(1)   14/   10C03 :                             ; Volume envelope
(1)   14/   10C03 : 00                          dc.b    $00
(1)   15/   10C04 : (MACRO)              	smpsHeaderPSG       Hyper_Hyper_PSG3,	$23, $00, $00, $00
(1)   15/   10C04 :  (MACRO-2)                   CheckedChannelPointer Hyper_Hyper_PSG3
(1)   15/   10C04 : =>TRUE                       if SonicDriverVer<>1
(1)   15/   10C04 : C290                                dc.w    z80_ptr(Hyper_Hyper_PSG3)
(1)   15/   10C06 : =>FALSE                      else
(1)   15/   10C06 :                                     if MOMPASS>1
(1)   15/   10C06 :                                             if Hyper_Hyper_PSG3<songStart
(1)   15/   10C06 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/   10C06 : [15]                                         endif
(1)   15/   10C06 : [15]                                 endif
(1)   15/   10C06 :                                     dc.w    Hyper_Hyper_PSG3-songStart
(1)   15/   10C06 : [15]                         endif
(1)   15/   10C06 :  (MACRO-2)                   PSGPitchConvert $23
(1)   15/   10C06 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/   10C06 :                                     dc.b    ($23+psgdelta)&$FF
(1)   15/   10C06 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/   10C06 :                                     dc.b    ($23-psgdelta)&$FF
(1)   15/   10C06 : =>TRUE                       else
(1)   15/   10C06 : 23                                  dc.b    $23
(1)   15/   10C07 : [15]                         endif
(1)   15/   10C07 : 00                          dc.b    $00
(1)   15/   10C08 :                             ; Frequency envelope
(1)   15/   10C08 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/   10C08 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/   10C08 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/   10C08 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/   10C08 :                                     dc.b    0
(1)   15/   10C08 : =>TRUE                       else
(1)   15/   10C08 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/   10C08 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/   10C08 : [15]                                 endif
(1)   15/   10C08 : 00                                  dc.b    $00
(1)   15/   10C09 : [15]                         endif
(1)   15/   10C09 :                             ; Volume envelope
(1)   15/   10C09 : 00                          dc.b    $00
(1)   16/   10C0A :                     
(1)   17/   10C0A :                     ; FM1 Data
(1)   18/   10C0A :                     Hyper_Hyper_FM1:
(1)   19/   10C0A : (MACRO)              	smpsSetvoice        $00
(1)   19/   10C0A :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   10C0A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   10C0A :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   10C0A : =>TRUE                       else
(1)   19/   10C0A : EF00                                dc.b    $EF,$00
(1)   19/   10C0C : [19]                         endif
(1)   20/   10C0C : 8060 8080 8006      	dc.b	nRst, $60, nRst, nRst, nRst, $06, nG2, nRst, nG2, nRst, $18, nRst
            10C12 : A080 A080 1880    
(1)   21/   10C18 : 06A0 9E9B 8094      	dc.b	$06, nG2, nF2, nD2, nRst, nG1, nRst, nG1
            10C1E : 8094             
(1)   22/   10C20 : (MACRO)              	smpsCall            Hyper_Hyper_Call0B
(1)   22/   10C20 : F8                          dc.b    $F8
(1)   22/   10C21 : =>TRUE                       if SonicDriverVer<>1
(1)   22/   10C21 : 5E8C                                dc.w    z80_ptr(Hyper_Hyper_Call0B)
(1)   22/   10C23 : =>FALSE                      else
(1)   22/   10C23 :                                     dc.w    Hyper_Hyper_Call0B-*-1
(1)   22/   10C23 : [22]                         endif
(1)   23/   10C23 :                     
(1)   24/   10C23 :                     Hyper_Hyper_Loop06:
(1)   25/   10C23 : (MACRO)              	smpsCall            Hyper_Hyper_Call0C
(1)   25/   10C23 : F8                          dc.b    $F8
(1)   25/   10C24 : =>TRUE                       if SonicDriverVer<>1
(1)   25/   10C24 : 538C                                dc.w    z80_ptr(Hyper_Hyper_Call0C)
(1)   25/   10C26 : =>FALSE                      else
(1)   25/   10C26 :                                     dc.w    Hyper_Hyper_Call0C-*-1
(1)   25/   10C26 : [25]                         endif
(1)   26/   10C26 : 8030                	dc.b	nRst, $30
(1)   27/   10C28 : (MACRO)              	smpsCall            Hyper_Hyper_Call0C
(1)   27/   10C28 : F8                          dc.b    $F8
(1)   27/   10C29 : =>TRUE                       if SonicDriverVer<>1
(1)   27/   10C29 : 538C                                dc.w    z80_ptr(Hyper_Hyper_Call0C)
(1)   27/   10C2B : =>FALSE                      else
(1)   27/   10C2B :                                     dc.w    Hyper_Hyper_Call0C-*-1
(1)   27/   10C2B : [27]                         endif
(1)   28/   10C2B : 800C 9080 0692 12   	dc.b	nRst, $0C, nEb1, nRst, $06, nF1, $12
(1)   29/   10C32 : (MACRO)              	smpsCall            Hyper_Hyper_Call0B
(1)   29/   10C32 : F8                          dc.b    $F8
(1)   29/   10C33 : =>TRUE                       if SonicDriverVer<>1
(1)   29/   10C33 : 5E8C                                dc.w    z80_ptr(Hyper_Hyper_Call0B)
(1)   29/   10C35 : =>FALSE                      else
(1)   29/   10C35 :                                     dc.w    Hyper_Hyper_Call0B-*-1
(1)   29/   10C35 : [29]                         endif
(1)   30/   10C35 : (MACRO)              	smpsChangeTransposition $FE
(1)   30/   10C35 : =>TRUE                       if SonicDriverVer>=3
(1)   30/   10C35 : FBFE                                dc.b    $FB,$FE
(1)   30/   10C37 : =>FALSE                      else
(1)   30/   10C37 :                                     dc.b    $E9,$FE
(1)   30/   10C37 : [30]                         endif
(1)   31/   10C37 : (MACRO)              	smpsCall            Hyper_Hyper_Call0C
(1)   31/   10C37 : F8                          dc.b    $F8
(1)   31/   10C38 : =>TRUE                       if SonicDriverVer<>1
(1)   31/   10C38 : 538C                                dc.w    z80_ptr(Hyper_Hyper_Call0C)
(1)   31/   10C3A : =>FALSE                      else
(1)   31/   10C3A :                                     dc.w    Hyper_Hyper_Call0C-*-1
(1)   31/   10C3A : [31]                         endif
(1)   32/   10C3A : 8030                	dc.b	nRst, $30
(1)   33/   10C3C : (MACRO)              	smpsCall            Hyper_Hyper_Call0C
(1)   33/   10C3C : F8                          dc.b    $F8
(1)   33/   10C3D : =>TRUE                       if SonicDriverVer<>1
(1)   33/   10C3D : 538C                                dc.w    z80_ptr(Hyper_Hyper_Call0C)
(1)   33/   10C3F : =>FALSE                      else
(1)   33/   10C3F :                                     dc.w    Hyper_Hyper_Call0C-*-1
(1)   33/   10C3F : [33]                         endif
(1)   34/   10C3F : (MACRO)              	smpsChangeTransposition $02
(1)   34/   10C3F : =>TRUE                       if SonicDriverVer>=3
(1)   34/   10C3F : FB02                                dc.b    $FB,$02
(1)   34/   10C41 : =>FALSE                      else
(1)   34/   10C41 :                                     dc.b    $E9,$02
(1)   34/   10C41 : [34]                         endif
(1)   35/   10C41 : 800C 9580 0697 12   	dc.b	nRst, $0C, nAb1, nRst, $06, nBb1, $12
(1)   36/   10C48 : (MACRO)              	smpsCall            Hyper_Hyper_Call0B
(1)   36/   10C48 : F8                          dc.b    $F8
(1)   36/   10C49 : =>TRUE                       if SonicDriverVer<>1
(1)   36/   10C49 : 5E8C                                dc.w    z80_ptr(Hyper_Hyper_Call0B)
(1)   36/   10C4B : =>FALSE                      else
(1)   36/   10C4B :                                     dc.w    Hyper_Hyper_Call0B-*-1
(1)   36/   10C4B : [36]                         endif
(1)   37/   10C4B : (MACRO)              	smpsLoop            $00, $02, Hyper_Hyper_Loop06
(1)   37/   10C4B : F7                          dc.b    $F7
(1)   37/   10C4C : 0002                        dc.b    $00,$02
(1)   37/   10C4E : =>TRUE                       if SonicDriverVer<>1
(1)   37/   10C4E : 238C                                dc.w    z80_ptr(Hyper_Hyper_Loop06)
(1)   37/   10C50 : =>FALSE                      else
(1)   37/   10C50 :                                     dc.w    Hyper_Hyper_Loop06-*-1
(1)   37/   10C50 : [37]                         endif
(1)   38/   10C50 : (MACRO)              	smpsJump            Hyper_Hyper_Loop06
(1)   38/   10C50 : F6                          dc.b    $F6
(1)   38/   10C51 : =>TRUE                       if SonicDriverVer<>1
(1)   38/   10C51 : 238C                                dc.w    z80_ptr(Hyper_Hyper_Loop06)
(1)   38/   10C53 : =>FALSE                      else
(1)   38/   10C53 :                                     dc.w    Hyper_Hyper_Loop06-*-1
(1)   38/   10C53 : [38]                         endif
(1)   39/   10C53 :                     
(1)   40/   10C53 :                     Hyper_Hyper_Call0C:
(1)   41/   10C53 : 940C 8006 920C      	dc.b	nG1, $0C, nRst, $06, nF1, $0C, nRst, $06, nG1, $0C
            10C59 : 8006 940C          
(1)   42/   10C5D : (MACRO)              	smpsReturn
(1)   42/   10C5D : =>TRUE                       if SonicDriverVer>=3
(1)   42/   10C5D : F9                                  dc.b    $F9
(1)   42/   10C5E : =>FALSE                      else
(1)   42/   10C5E :                                     dc.b    $E3
(1)   42/   10C5E : [42]                         endif
(1)   43/   10C5E :                     
(1)   44/   10C5E :                     Hyper_Hyper_Call0B:
(1)   45/   10C5E : (MACRO)              	smpsCall            Hyper_Hyper_Call0C
(1)   45/   10C5E : F8                          dc.b    $F8
(1)   45/   10C5F : =>TRUE                       if SonicDriverVer<>1
(1)   45/   10C5F : 538C                                dc.w    z80_ptr(Hyper_Hyper_Call0C)
(1)   45/   10C61 : =>FALSE                      else
(1)   45/   10C61 :                                     dc.w    Hyper_Hyper_Call0C-*-1
(1)   45/   10C61 : [45]                         endif
(1)   46/   10C61 : 8030                	dc.b	nRst, $30
(1)   47/   10C63 : (MACRO)              	smpsCall            Hyper_Hyper_Call0C
(1)   47/   10C63 : F8                          dc.b    $F8
(1)   47/   10C64 : =>TRUE                       if SonicDriverVer<>1
(1)   47/   10C64 : 538C                                dc.w    z80_ptr(Hyper_Hyper_Call0C)
(1)   47/   10C66 : =>FALSE                      else
(1)   47/   10C66 :                                     dc.w    Hyper_Hyper_Call0C-*-1
(1)   47/   10C66 : [47]                         endif
(1)   48/   10C66 : 8006 A9A5 A09E      	dc.b	nRst, $06, nE3, nC3, nG2, nF2, nE2, nC2, nG1
            10C6C : 9D99 94          
(1)   49/   10C6F : (MACRO)              	smpsReturn
(1)   49/   10C6F : =>TRUE                       if SonicDriverVer>=3
(1)   49/   10C6F : F9                                  dc.b    $F9
(1)   49/   10C70 : =>FALSE                      else
(1)   49/   10C70 :                                     dc.b    $E3
(1)   49/   10C70 : [49]                         endif
(1)   50/   10C70 :                     
(1)   51/   10C70 :                     ; FM2 Data
(1)   52/   10C70 :                     Hyper_Hyper_FM2:
(1)   53/   10C70 : (MACRO)              	smpsSetvoice        $01
(1)   53/   10C70 :  (MACRO-2)                   smpsFMvoice $01
(1)   53/   10C70 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   53/   10C70 :                                     dc.b    $EF,$01|$80,+$81
(1)   53/   10C70 : =>TRUE                       else
(1)   53/   10C70 : EF01                                dc.b    $EF,$01
(1)   53/   10C72 : [53]                         endif
(1)   54/   10C72 : 8060 8080 8080      	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst, $30
            10C78 : 8030             
(1)   55/   10C7A : (MACRO)              	smpsCall            Hyper_Hyper_Call08
(1)   55/   10C7A : F8                          dc.b    $F8
(1)   55/   10C7B : =>TRUE                       if SonicDriverVer<>1
(1)   55/   10C7B : 068D                                dc.w    z80_ptr(Hyper_Hyper_Call08)
(1)   55/   10C7D : =>FALSE                      else
(1)   55/   10C7D :                                     dc.w    Hyper_Hyper_Call08-*-1
(1)   55/   10C7D : [55]                         endif
(1)   56/   10C7D :                     
(1)   57/   10C7D :                     Hyper_Hyper_Jump02:
(1)   58/   10C7D : (MACRO)              	smpsCall            Hyper_Hyper_Call09
(1)   58/   10C7D : F8                          dc.b    $F8
(1)   58/   10C7E : =>TRUE                       if SonicDriverVer<>1
(1)   58/   10C7E : 148D                                dc.w    z80_ptr(Hyper_Hyper_Call09)
(1)   58/   10C80 : =>FALSE                      else
(1)   58/   10C80 :                                     dc.w    Hyper_Hyper_Call09-*-1
(1)   58/   10C80 : [58]                         endif
(1)   59/   10C80 : B312 B1B3 0C        	dc.b	nD4, $12, nC4, nD4, $0C
(1)   60/   10C85 : (MACRO)              	smpsFMAlterVol      $0A
(1)   60/   10C85 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   60/   10C85 :                                     dc.b    $E5,$0A,
(1)   60/   10C85 : =>TRUE                       else
(1)   60/   10C85 : E60A                                dc.b    $E6,$0A
(1)   60/   10C87 : [60]                         endif
(1)   61/   10C87 : (MACRO)              	smpsPan             panLeft, $00
(1)   61/   10C87 : =$0                  panNone set $00
(1)   61/   10C87 : =$40                 panRight set $40
(1)   61/   10C87 : =$80                 panLeft set $80
(1)   61/   10C87 : =$C0                 panCentre set $C0
(1)   61/   10C87 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   61/   10C87 : E080                        dc.b $E0,panLeft+$00
(1)   62/   10C89 : B3                  	dc.b	nD4
(1)   63/   10C8A : (MACRO)              	smpsFMAlterVol      $F6
(1)   63/   10C8A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   63/   10C8A :                                     dc.b    $E5,$F6,
(1)   63/   10C8A : =>TRUE                       else
(1)   63/   10C8A : E6F6                                dc.b    $E6,$F6
(1)   63/   10C8C : [63]                         endif
(1)   64/   10C8C : (MACRO)              	smpsPan             panCenter, $00
(1)   64/   10C8C : =$0                  panNone set $00
(1)   64/   10C8C : =$40                 panRight set $40
(1)   64/   10C8C : =$80                 panLeft set $80
(1)   64/   10C8C : =$C0                 panCentre set $C0
(1)   64/   10C8C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   64/   10C8C : E0C0                        dc.b $E0,panCenter+$00
(1)   65/   10C8E : AF                  	dc.b	nBb3
(1)   66/   10C8F : (MACRO)              	smpsFMAlterVol      $0A
(1)   66/   10C8F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   66/   10C8F :                                     dc.b    $E5,$0A,
(1)   66/   10C8F : =>TRUE                       else
(1)   66/   10C8F : E60A                                dc.b    $E6,$0A
(1)   66/   10C91 : [66]                         endif
(1)   67/   10C91 : (MACRO)              	smpsPan             panLeft, $00
(1)   67/   10C91 : =$0                  panNone set $00
(1)   67/   10C91 : =$40                 panRight set $40
(1)   67/   10C91 : =$80                 panLeft set $80
(1)   67/   10C91 : =$C0                 panCentre set $C0
(1)   67/   10C91 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   67/   10C91 : E080                        dc.b $E0,panLeft+$00
(1)   68/   10C93 : AF06                	dc.b	nBb3, $06
(1)   69/   10C95 : (MACRO)              	smpsFMAlterVol      $F6
(1)   69/   10C95 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   69/   10C95 :                                     dc.b    $E5,$F6,
(1)   69/   10C95 : =>TRUE                       else
(1)   69/   10C95 : E6F6                                dc.b    $E6,$F6
(1)   69/   10C97 : [69]                         endif
(1)   70/   10C97 : (MACRO)              	smpsPan             panCenter, $00
(1)   70/   10C97 : =$0                  panNone set $00
(1)   70/   10C97 : =$40                 panRight set $40
(1)   70/   10C97 : =$80                 panLeft set $80
(1)   70/   10C97 : =$C0                 panCentre set $C0
(1)   70/   10C97 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   70/   10C97 : E0C0                        dc.b $E0,panCenter+$00
(1)   71/   10C99 : B112                	dc.b	nC4, $12
(1)   72/   10C9B : (MACRO)              	smpsCall            Hyper_Hyper_Call0A
(1)   72/   10C9B : F8                          dc.b    $F8
(1)   72/   10C9C : =>TRUE                       if SonicDriverVer<>1
(1)   72/   10C9C : 1F8D                                dc.w    z80_ptr(Hyper_Hyper_Call0A)
(1)   72/   10C9E : =>FALSE                      else
(1)   72/   10C9E :                                     dc.w    Hyper_Hyper_Call0A-*-1
(1)   72/   10C9E : [72]                         endif
(1)   73/   10C9E : (MACRO)              	smpsChangeTransposition $FE
(1)   73/   10C9E : =>TRUE                       if SonicDriverVer>=3
(1)   73/   10C9E : FBFE                                dc.b    $FB,$FE
(1)   73/   10CA0 : =>FALSE                      else
(1)   73/   10CA0 :                                     dc.b    $E9,$FE
(1)   73/   10CA0 : [73]                         endif
(1)   74/   10CA0 : (MACRO)              	smpsCall            Hyper_Hyper_Call09
(1)   74/   10CA0 : F8                          dc.b    $F8
(1)   74/   10CA1 : =>TRUE                       if SonicDriverVer<>1
(1)   74/   10CA1 : 148D                                dc.w    z80_ptr(Hyper_Hyper_Call09)
(1)   74/   10CA3 : =>FALSE                      else
(1)   74/   10CA3 :                                     dc.w    Hyper_Hyper_Call09-*-1
(1)   74/   10CA3 : [74]                         endif
(1)   75/   10CA3 : (MACRO)              	smpsChangeTransposition $02
(1)   75/   10CA3 : =>TRUE                       if SonicDriverVer>=3
(1)   75/   10CA3 : FB02                                dc.b    $FB,$02
(1)   75/   10CA5 : =>FALSE                      else
(1)   75/   10CA5 :                                     dc.b    $E9,$02
(1)   75/   10CA5 : [75]                         endif
(1)   76/   10CA5 : B112 AFB1 0C        	dc.b	nC4, $12, nBb3, nC4, $0C
(1)   77/   10CAA : (MACRO)              	smpsFMAlterVol      $0A
(1)   77/   10CAA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   77/   10CAA :                                     dc.b    $E5,$0A,
(1)   77/   10CAA : =>TRUE                       else
(1)   77/   10CAA : E60A                                dc.b    $E6,$0A
(1)   77/   10CAC : [77]                         endif
(1)   78/   10CAC : (MACRO)              	smpsPan             panLeft, $00
(1)   78/   10CAC : =$0                  panNone set $00
(1)   78/   10CAC : =$40                 panRight set $40
(1)   78/   10CAC : =$80                 panLeft set $80
(1)   78/   10CAC : =$C0                 panCentre set $C0
(1)   78/   10CAC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   78/   10CAC : E080                        dc.b $E0,panLeft+$00
(1)   79/   10CAE : 0C                  	dc.b	$0C
(1)   80/   10CAF : (MACRO)              	smpsFMAlterVol      $F6
(1)   80/   10CAF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   80/   10CAF :                                     dc.b    $E5,$F6,
(1)   80/   10CAF : =>TRUE                       else
(1)   80/   10CAF : E6F6                                dc.b    $E6,$F6
(1)   80/   10CB1 : [80]                         endif
(1)   81/   10CB1 : (MACRO)              	smpsPan             panCenter, $00
(1)   81/   10CB1 : =$0                  panNone set $00
(1)   81/   10CB1 : =$40                 panRight set $40
(1)   81/   10CB1 : =$80                 panLeft set $80
(1)   81/   10CB1 : =$C0                 panCentre set $C0
(1)   81/   10CB1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   81/   10CB1 : E0C0                        dc.b $E0,panCenter+$00
(1)   82/   10CB3 : B4                  	dc.b	nEb4
(1)   83/   10CB4 : (MACRO)              	smpsFMAlterVol      $0A
(1)   83/   10CB4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   83/   10CB4 :                                     dc.b    $E5,$0A,
(1)   83/   10CB4 : =>TRUE                       else
(1)   83/   10CB4 : E60A                                dc.b    $E6,$0A
(1)   83/   10CB6 : [83]                         endif
(1)   84/   10CB6 : (MACRO)              	smpsPan             panLeft, $00
(1)   84/   10CB6 : =$0                  panNone set $00
(1)   84/   10CB6 : =$40                 panRight set $40
(1)   84/   10CB6 : =$80                 panLeft set $80
(1)   84/   10CB6 : =$C0                 panCentre set $C0
(1)   84/   10CB6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   84/   10CB6 : E080                        dc.b $E0,panLeft+$00
(1)   85/   10CB8 : B406                	dc.b	nEb4, $06
(1)   86/   10CBA : (MACRO)              	smpsFMAlterVol      $F6
(1)   86/   10CBA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   86/   10CBA :                                     dc.b    $E5,$F6,
(1)   86/   10CBA : =>TRUE                       else
(1)   86/   10CBA : E6F6                                dc.b    $E6,$F6
(1)   86/   10CBC : [86]                         endif
(1)   87/   10CBC : (MACRO)              	smpsPan             panCenter, $00
(1)   87/   10CBC : =$0                  panNone set $00
(1)   87/   10CBC : =$40                 panRight set $40
(1)   87/   10CBC : =$80                 panLeft set $80
(1)   87/   10CBC : =$C0                 panCentre set $C0
(1)   87/   10CBC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   87/   10CBC : E0C0                        dc.b $E0,panCenter+$00
(1)   88/   10CBE : B612                	dc.b	nF4, $12
(1)   89/   10CC0 : (MACRO)              	smpsCall            Hyper_Hyper_Call0A
(1)   89/   10CC0 : F8                          dc.b    $F8
(1)   89/   10CC1 : =>TRUE                       if SonicDriverVer<>1
(1)   89/   10CC1 : 1F8D                                dc.w    z80_ptr(Hyper_Hyper_Call0A)
(1)   89/   10CC3 : =>FALSE                      else
(1)   89/   10CC3 :                                     dc.w    Hyper_Hyper_Call0A-*-1
(1)   89/   10CC3 : [89]                         endif
(1)   90/   10CC3 : (MACRO)              	smpsCall            Hyper_Hyper_Call09
(1)   90/   10CC3 : F8                          dc.b    $F8
(1)   90/   10CC4 : =>TRUE                       if SonicDriverVer<>1
(1)   90/   10CC4 : 148D                                dc.w    z80_ptr(Hyper_Hyper_Call09)
(1)   90/   10CC6 : =>FALSE                      else
(1)   90/   10CC6 :                                     dc.w    Hyper_Hyper_Call09-*-1
(1)   90/   10CC6 : [90]                         endif
(1)   91/   10CC6 : B312 B1B3 0C        	dc.b	nD4, $12, nC4, nD4, $0C
(1)   92/   10CCB : (MACRO)              	smpsFMAlterVol      $0A
(1)   92/   10CCB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   92/   10CCB :                                     dc.b    $E5,$0A,
(1)   92/   10CCB : =>TRUE                       else
(1)   92/   10CCB : E60A                                dc.b    $E6,$0A
(1)   92/   10CCD : [92]                         endif
(1)   93/   10CCD : (MACRO)              	smpsPan             panLeft, $00
(1)   93/   10CCD : =$0                  panNone set $00
(1)   93/   10CCD : =$40                 panRight set $40
(1)   93/   10CCD : =$80                 panLeft set $80
(1)   93/   10CCD : =$C0                 panCentre set $C0
(1)   93/   10CCD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   93/   10CCD : E080                        dc.b $E0,panLeft+$00
(1)   94/   10CCF : B3                  	dc.b	nD4
(1)   95/   10CD0 : (MACRO)              	smpsFMAlterVol      $F6
(1)   95/   10CD0 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   95/   10CD0 :                                     dc.b    $E5,$F6,
(1)   95/   10CD0 : =>TRUE                       else
(1)   95/   10CD0 : E6F6                                dc.b    $E6,$F6
(1)   95/   10CD2 : [95]                         endif
(1)   96/   10CD2 : (MACRO)              	smpsPan             panCenter, $00
(1)   96/   10CD2 : =$0                  panNone set $00
(1)   96/   10CD2 : =$40                 panRight set $40
(1)   96/   10CD2 : =$80                 panLeft set $80
(1)   96/   10CD2 : =$C0                 panCentre set $C0
(1)   96/   10CD2 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   96/   10CD2 : E0C0                        dc.b $E0,panCenter+$00
(1)   97/   10CD4 : AF                  	dc.b	nBb3
(1)   98/   10CD5 : (MACRO)              	smpsFMAlterVol      $0A
(1)   98/   10CD5 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   98/   10CD5 :                                     dc.b    $E5,$0A,
(1)   98/   10CD5 : =>TRUE                       else
(1)   98/   10CD5 : E60A                                dc.b    $E6,$0A
(1)   98/   10CD7 : [98]                         endif
(1)   99/   10CD7 : (MACRO)              	smpsPan             panLeft, $00
(1)   99/   10CD7 : =$0                  panNone set $00
(1)   99/   10CD7 : =$40                 panRight set $40
(1)   99/   10CD7 : =$80                 panLeft set $80
(1)   99/   10CD7 : =$C0                 panCentre set $C0
(1)   99/   10CD7 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   99/   10CD7 : E080                        dc.b $E0,panLeft+$00
(1)  100/   10CD9 : AF06                	dc.b	nBb3, $06
(1)  101/   10CDB : (MACRO)              	smpsFMAlterVol      $F6
(1)  101/   10CDB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  101/   10CDB :                                     dc.b    $E5,$F6,
(1)  101/   10CDB : =>TRUE                       else
(1)  101/   10CDB : E6F6                                dc.b    $E6,$F6
(1)  101/   10CDD : [101]                        endif
(1)  102/   10CDD : (MACRO)              	smpsPan             panCenter, $00
(1)  102/   10CDD : =$0                  panNone set $00
(1)  102/   10CDD : =$40                 panRight set $40
(1)  102/   10CDD : =$80                 panLeft set $80
(1)  102/   10CDD : =$C0                 panCentre set $C0
(1)  102/   10CDD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  102/   10CDD : E0C0                        dc.b $E0,panCenter+$00
(1)  103/   10CDF : B112                	dc.b	nC4, $12
(1)  104/   10CE1 : (MACRO)              	smpsCall            Hyper_Hyper_Call0A
(1)  104/   10CE1 : F8                          dc.b    $F8
(1)  104/   10CE2 : =>TRUE                       if SonicDriverVer<>1
(1)  104/   10CE2 : 1F8D                                dc.w    z80_ptr(Hyper_Hyper_Call0A)
(1)  104/   10CE4 : =>FALSE                      else
(1)  104/   10CE4 :                                     dc.w    Hyper_Hyper_Call0A-*-1
(1)  104/   10CE4 : [104]                        endif
(1)  105/   10CE4 : (MACRO)              	smpsChangeTransposition $FE
(1)  105/   10CE4 : =>TRUE                       if SonicDriverVer>=3
(1)  105/   10CE4 : FBFE                                dc.b    $FB,$FE
(1)  105/   10CE6 : =>FALSE                      else
(1)  105/   10CE6 :                                     dc.b    $E9,$FE
(1)  105/   10CE6 : [105]                        endif
(1)  106/   10CE6 : (MACRO)              	smpsCall            Hyper_Hyper_Call09
(1)  106/   10CE6 : F8                          dc.b    $F8
(1)  106/   10CE7 : =>TRUE                       if SonicDriverVer<>1
(1)  106/   10CE7 : 148D                                dc.w    z80_ptr(Hyper_Hyper_Call09)
(1)  106/   10CE9 : =>FALSE                      else
(1)  106/   10CE9 :                                     dc.w    Hyper_Hyper_Call09-*-1
(1)  106/   10CE9 : [106]                        endif
(1)  107/   10CE9 : (MACRO)              	smpsChangeTransposition $02
(1)  107/   10CE9 : =>TRUE                       if SonicDriverVer>=3
(1)  107/   10CE9 : FB02                                dc.b    $FB,$02
(1)  107/   10CEB : =>FALSE                      else
(1)  107/   10CEB :                                     dc.b    $E9,$02
(1)  107/   10CEB : [107]                        endif
(1)  108/   10CEB : B112 AFB1 0680      	dc.b	nC4, $12, nBb3, nC4, $06, nRst, $12, nEb4, $0C
            10CF1 : 12B4 0C          
(1)  109/   10CF4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  109/   10CF4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  109/   10CF4 :                                     dc.b    $E5,$0A,
(1)  109/   10CF4 : =>TRUE                       else
(1)  109/   10CF4 : E60A                                dc.b    $E6,$0A
(1)  109/   10CF6 : [109]                        endif
(1)  110/   10CF6 : (MACRO)              	smpsPan             panLeft, $00
(1)  110/   10CF6 : =$0                  panNone set $00
(1)  110/   10CF6 : =$40                 panRight set $40
(1)  110/   10CF6 : =$80                 panLeft set $80
(1)  110/   10CF6 : =$C0                 panCentre set $C0
(1)  110/   10CF6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  110/   10CF6 : E080                        dc.b $E0,panLeft+$00
(1)  111/   10CF8 : B406                	dc.b	nEb4, $06
(1)  112/   10CFA : (MACRO)              	smpsFMAlterVol      $F6
(1)  112/   10CFA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  112/   10CFA :                                     dc.b    $E5,$F6,
(1)  112/   10CFA : =>TRUE                       else
(1)  112/   10CFA : E6F6                                dc.b    $E6,$F6
(1)  112/   10CFC : [112]                        endif
(1)  113/   10CFC : (MACRO)              	smpsPan             panCenter, $00
(1)  113/   10CFC : =$0                  panNone set $00
(1)  113/   10CFC : =$40                 panRight set $40
(1)  113/   10CFC : =$80                 panLeft set $80
(1)  113/   10CFC : =$C0                 panCentre set $C0
(1)  113/   10CFC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  113/   10CFC : E0C0                        dc.b $E0,panCenter+$00
(1)  114/   10CFE : B612                	dc.b	nF4, $12
(1)  115/   10D00 : (MACRO)              	smpsCall            Hyper_Hyper_Call0A
(1)  115/   10D00 : F8                          dc.b    $F8
(1)  115/   10D01 : =>TRUE                       if SonicDriverVer<>1
(1)  115/   10D01 : 1F8D                                dc.w    z80_ptr(Hyper_Hyper_Call0A)
(1)  115/   10D03 : =>FALSE                      else
(1)  115/   10D03 :                                     dc.w    Hyper_Hyper_Call0A-*-1
(1)  115/   10D03 : [115]                        endif
(1)  116/   10D03 : (MACRO)              	smpsJump            Hyper_Hyper_Jump02
(1)  116/   10D03 : F6                          dc.b    $F6
(1)  116/   10D04 : =>TRUE                       if SonicDriverVer<>1
(1)  116/   10D04 : 7D8C                                dc.w    z80_ptr(Hyper_Hyper_Jump02)
(1)  116/   10D06 : =>FALSE                      else
(1)  116/   10D06 :                                     dc.w    Hyper_Hyper_Jump02-*-1
(1)  116/   10D06 : [116]                        endif
(1)  117/   10D06 :                     
(1)  118/   10D06 :                     Hyper_Hyper_Call08:
(1)  119/   10D06 : (MACRO)              	smpsSetvoice        $03
(1)  119/   10D06 :  (MACRO-2)                   smpsFMvoice $03
(1)  119/   10D06 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  119/   10D06 :                                     dc.b    $EF,$03|$80,+$81
(1)  119/   10D06 : =>TRUE                       else
(1)  119/   10D06 : EF03                                dc.b    $EF,$03
(1)  119/   10D08 : [119]                        endif
(1)  120/   10D08 : CE06 CDC9 C4C2      	dc.b	nF6, $06, nE6, nC6, nG5, nF5, nE5, nC5, nG4
            10D0E : C1BD B8          
(1)  121/   10D11 : (MACRO)              	smpsSetvoice        $01
(1)  121/   10D11 :  (MACRO-2)                   smpsFMvoice $01
(1)  121/   10D11 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  121/   10D11 :                                     dc.b    $EF,$01|$80,+$81
(1)  121/   10D11 : =>TRUE                       else
(1)  121/   10D11 : EF01                                dc.b    $EF,$01
(1)  121/   10D13 : [121]                        endif
(1)  122/   10D13 : (MACRO)              	smpsReturn
(1)  122/   10D13 : =>TRUE                       if SonicDriverVer>=3
(1)  122/   10D13 : F9                                  dc.b    $F9
(1)  122/   10D14 : =>FALSE                      else
(1)  122/   10D14 :                                     dc.b    $E3
(1)  122/   10D14 : [122]                        endif
(1)  123/   10D14 :                     
(1)  124/   10D14 :                     Hyper_Hyper_Call09:
(1)  125/   10D14 : B312 B1B3 0CB6      	dc.b	nD4, $12, nC4, nD4, $0C, nF4, $12, nE4, nC4, $0C
            10D1A : 12B5 B10C          
(1)  126/   10D1E : (MACRO)              	smpsReturn
(1)  126/   10D1E : =>TRUE                       if SonicDriverVer>=3
(1)  126/   10D1E : F9                                  dc.b    $F9
(1)  126/   10D1F : =>FALSE                      else
(1)  126/   10D1F :                                     dc.b    $E3
(1)  126/   10D1F : [126]                        endif
(1)  127/   10D1F :                     
(1)  128/   10D1F :                     Hyper_Hyper_Call0A:
(1)  129/   10D1F : (MACRO)              	smpsCall            Hyper_Hyper_Call09
(1)  129/   10D1F : F8                          dc.b    $F8
(1)  129/   10D20 : =>TRUE                       if SonicDriverVer<>1
(1)  129/   10D20 : 148D                                dc.w    z80_ptr(Hyper_Hyper_Call09)
(1)  129/   10D22 : =>FALSE                      else
(1)  129/   10D22 :                                     dc.w    Hyper_Hyper_Call09-*-1
(1)  129/   10D22 : [129]                        endif
(1)  130/   10D22 : (MACRO)              	smpsFMAlterVol      $0A
(1)  130/   10D22 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  130/   10D22 :                                     dc.b    $E5,$0A,
(1)  130/   10D22 : =>TRUE                       else
(1)  130/   10D22 : E60A                                dc.b    $E6,$0A
(1)  130/   10D24 : [130]                        endif
(1)  131/   10D24 : (MACRO)              	smpsPan             panLeft, $00
(1)  131/   10D24 : =$0                  panNone set $00
(1)  131/   10D24 : =$40                 panRight set $40
(1)  131/   10D24 : =$80                 panLeft set $80
(1)  131/   10D24 : =$C0                 panCentre set $C0
(1)  131/   10D24 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  131/   10D24 : E080                        dc.b $E0,panLeft+$00
(1)  132/   10D26 : B106                	dc.b	nC4, $06
(1)  133/   10D28 : (MACRO)              	smpsFMAlterVol      $F6
(1)  133/   10D28 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  133/   10D28 :                                     dc.b    $E5,$F6,
(1)  133/   10D28 : =>TRUE                       else
(1)  133/   10D28 : E6F6                                dc.b    $E6,$F6
(1)  133/   10D2A : [133]                        endif
(1)  134/   10D2A : (MACRO)              	smpsPan             panCenter, $00
(1)  134/   10D2A : =$0                  panNone set $00
(1)  134/   10D2A : =$40                 panRight set $40
(1)  134/   10D2A : =$80                 panLeft set $80
(1)  134/   10D2A : =$C0                 panCentre set $C0
(1)  134/   10D2A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  134/   10D2A : E0C0                        dc.b $E0,panCenter+$00
(1)  135/   10D2C : B112 B318           	dc.b	nC4, $12, nD4, $18
(1)  136/   10D30 : (MACRO)              	smpsCall            Hyper_Hyper_Call08
(1)  136/   10D30 : F8                          dc.b    $F8
(1)  136/   10D31 : =>TRUE                       if SonicDriverVer<>1
(1)  136/   10D31 : 068D                                dc.w    z80_ptr(Hyper_Hyper_Call08)
(1)  136/   10D33 : =>FALSE                      else
(1)  136/   10D33 :                                     dc.w    Hyper_Hyper_Call08-*-1
(1)  136/   10D33 : [136]                        endif
(1)  137/   10D33 : (MACRO)              	smpsReturn
(1)  137/   10D33 : =>TRUE                       if SonicDriverVer>=3
(1)  137/   10D33 : F9                                  dc.b    $F9
(1)  137/   10D34 : =>FALSE                      else
(1)  137/   10D34 :                                     dc.b    $E3
(1)  137/   10D34 : [137]                        endif
(1)  138/   10D34 :                     
(1)  139/   10D34 :                     ; FM3 Data
(1)  140/   10D34 :                     Hyper_Hyper_FM3:
(1)  141/   10D34 : (MACRO)              	smpsSetvoice        $01
(1)  141/   10D34 :  (MACRO-2)                   smpsFMvoice $01
(1)  141/   10D34 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  141/   10D34 :                                     dc.b    $EF,$01|$80,+$81
(1)  141/   10D34 : =>TRUE                       else
(1)  141/   10D34 : EF01                                dc.b    $EF,$01
(1)  141/   10D36 : [141]                        endif
(1)  142/   10D36 : 8060 8080 8080      	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst, $30
            10D3C : 8030             
(1)  143/   10D3E : (MACRO)              	smpsCall            Hyper_Hyper_Call06
(1)  143/   10D3E : F8                          dc.b    $F8
(1)  143/   10D3F : =>TRUE                       if SonicDriverVer<>1
(1)  143/   10D3F : 0F8E                                dc.w    z80_ptr(Hyper_Hyper_Call06)
(1)  143/   10D41 : =>FALSE                      else
(1)  143/   10D41 :                                     dc.w    Hyper_Hyper_Call06-*-1
(1)  143/   10D41 : [143]                        endif
(1)  144/   10D41 :                     
(1)  145/   10D41 :                     Hyper_Hyper_Jump01:
(1)  146/   10D41 : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  146/   10D41 : F8                          dc.b    $F8
(1)  146/   10D42 : =>TRUE                       if SonicDriverVer<>1
(1)  146/   10D42 : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  146/   10D44 : =>FALSE                      else
(1)  146/   10D44 :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  146/   10D44 : [146]                        endif
(1)  147/   10D44 : AE12 ACAE 0C        	dc.b	nA3, $12, nG3, nA3, $0C
(1)  148/   10D49 : (MACRO)              	smpsFMAlterVol      $0A
(1)  148/   10D49 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  148/   10D49 :                                     dc.b    $E5,$0A,
(1)  148/   10D49 : =>TRUE                       else
(1)  148/   10D49 : E60A                                dc.b    $E6,$0A
(1)  148/   10D4B : [148]                        endif
(1)  149/   10D4B : (MACRO)              	smpsPan             panRight, $00
(1)  149/   10D4B : =$0                  panNone set $00
(1)  149/   10D4B : =$40                 panRight set $40
(1)  149/   10D4B : =$80                 panLeft set $80
(1)  149/   10D4B : =$C0                 panCentre set $C0
(1)  149/   10D4B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  149/   10D4B : E040                        dc.b $E0,panRight+$00
(1)  150/   10D4D : AE                  	dc.b	nA3
(1)  151/   10D4E : (MACRO)              	smpsFMAlterVol      $F6
(1)  151/   10D4E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  151/   10D4E :                                     dc.b    $E5,$F6,
(1)  151/   10D4E : =>TRUE                       else
(1)  151/   10D4E : E6F6                                dc.b    $E6,$F6
(1)  151/   10D50 : [151]                        endif
(1)  152/   10D50 : (MACRO)              	smpsPan             panCenter, $00
(1)  152/   10D50 : =$0                  panNone set $00
(1)  152/   10D50 : =$40                 panRight set $40
(1)  152/   10D50 : =$80                 panLeft set $80
(1)  152/   10D50 : =$C0                 panCentre set $C0
(1)  152/   10D50 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  152/   10D50 : E0C0                        dc.b $E0,panCenter+$00
(1)  153/   10D52 : AC                  	dc.b	nG3
(1)  154/   10D53 : (MACRO)              	smpsFMAlterVol      $0A
(1)  154/   10D53 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  154/   10D53 :                                     dc.b    $E5,$0A,
(1)  154/   10D53 : =>TRUE                       else
(1)  154/   10D53 : E60A                                dc.b    $E6,$0A
(1)  154/   10D55 : [154]                        endif
(1)  155/   10D55 : (MACRO)              	smpsPan             panRight, $00
(1)  155/   10D55 : =$0                  panNone set $00
(1)  155/   10D55 : =$40                 panRight set $40
(1)  155/   10D55 : =$80                 panLeft set $80
(1)  155/   10D55 : =$C0                 panCentre set $C0
(1)  155/   10D55 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  155/   10D55 : E040                        dc.b $E0,panRight+$00
(1)  156/   10D57 : AC06                	dc.b	nG3, $06
(1)  157/   10D59 : (MACRO)              	smpsFMAlterVol      $F6
(1)  157/   10D59 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  157/   10D59 :                                     dc.b    $E5,$F6,
(1)  157/   10D59 : =>TRUE                       else
(1)  157/   10D59 : E6F6                                dc.b    $E6,$F6
(1)  157/   10D5B : [157]                        endif
(1)  158/   10D5B : (MACRO)              	smpsPan             panCenter, $00
(1)  158/   10D5B : =$0                  panNone set $00
(1)  158/   10D5B : =$40                 panRight set $40
(1)  158/   10D5B : =$80                 panLeft set $80
(1)  158/   10D5B : =$C0                 panCentre set $C0
(1)  158/   10D5B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  158/   10D5B : E0C0                        dc.b $E0,panCenter+$00
(1)  159/   10D5D : AE12                	dc.b	nA3, $12
(1)  160/   10D5F : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  160/   10D5F : F8                          dc.b    $F8
(1)  160/   10D60 : =>TRUE                       if SonicDriverVer<>1
(1)  160/   10D60 : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  160/   10D62 : =>FALSE                      else
(1)  160/   10D62 :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  160/   10D62 : [160]                        endif
(1)  161/   10D62 : (MACRO)              	smpsFMAlterVol      $0A
(1)  161/   10D62 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  161/   10D62 :                                     dc.b    $E5,$0A,
(1)  161/   10D62 : =>TRUE                       else
(1)  161/   10D62 : E60A                                dc.b    $E6,$0A
(1)  161/   10D64 : [161]                        endif
(1)  162/   10D64 : (MACRO)              	smpsPan             panRight, $00
(1)  162/   10D64 : =$0                  panNone set $00
(1)  162/   10D64 : =$40                 panRight set $40
(1)  162/   10D64 : =$80                 panLeft set $80
(1)  162/   10D64 : =$C0                 panCentre set $C0
(1)  162/   10D64 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  162/   10D64 : E040                        dc.b $E0,panRight+$00
(1)  163/   10D66 : AC06                	dc.b	nG3, $06
(1)  164/   10D68 : (MACRO)              	smpsFMAlterVol      $F6
(1)  164/   10D68 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  164/   10D68 :                                     dc.b    $E5,$F6,
(1)  164/   10D68 : =>TRUE                       else
(1)  164/   10D68 : E6F6                                dc.b    $E6,$F6
(1)  164/   10D6A : [164]                        endif
(1)  165/   10D6A : (MACRO)              	smpsPan             panCenter, $00
(1)  165/   10D6A : =$0                  panNone set $00
(1)  165/   10D6A : =$40                 panRight set $40
(1)  165/   10D6A : =$80                 panLeft set $80
(1)  165/   10D6A : =$C0                 panCentre set $C0
(1)  165/   10D6A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  165/   10D6A : E0C0                        dc.b $E0,panCenter+$00
(1)  166/   10D6C : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  167/   10D70 : (MACRO)              	smpsCall            Hyper_Hyper_Call06
(1)  167/   10D70 : F8                          dc.b    $F8
(1)  167/   10D71 : =>TRUE                       if SonicDriverVer<>1
(1)  167/   10D71 : 0F8E                                dc.w    z80_ptr(Hyper_Hyper_Call06)
(1)  167/   10D73 : =>FALSE                      else
(1)  167/   10D73 :                                     dc.w    Hyper_Hyper_Call06-*-1
(1)  167/   10D73 : [167]                        endif
(1)  168/   10D73 : (MACRO)              	smpsChangeTransposition $FE
(1)  168/   10D73 : =>TRUE                       if SonicDriverVer>=3
(1)  168/   10D73 : FBFE                                dc.b    $FB,$FE
(1)  168/   10D75 : =>FALSE                      else
(1)  168/   10D75 :                                     dc.b    $E9,$FE
(1)  168/   10D75 : [168]                        endif
(1)  169/   10D75 : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  169/   10D75 : F8                          dc.b    $F8
(1)  169/   10D76 : =>TRUE                       if SonicDriverVer<>1
(1)  169/   10D76 : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  169/   10D78 : =>FALSE                      else
(1)  169/   10D78 :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  169/   10D78 : [169]                        endif
(1)  170/   10D78 : (MACRO)              	smpsChangeTransposition $02
(1)  170/   10D78 : =>TRUE                       if SonicDriverVer>=3
(1)  170/   10D78 : FB02                                dc.b    $FB,$02
(1)  170/   10D7A : =>FALSE                      else
(1)  170/   10D7A :                                     dc.b    $E9,$02
(1)  170/   10D7A : [170]                        endif
(1)  171/   10D7A : AC12 AAAC 0C        	dc.b	nG3, $12, nF3, nG3, $0C
(1)  172/   10D7F : (MACRO)              	smpsFMAlterVol      $0A
(1)  172/   10D7F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  172/   10D7F :                                     dc.b    $E5,$0A,
(1)  172/   10D7F : =>TRUE                       else
(1)  172/   10D7F : E60A                                dc.b    $E6,$0A
(1)  172/   10D81 : [172]                        endif
(1)  173/   10D81 : (MACRO)              	smpsPan             panRight, $00
(1)  173/   10D81 : =$0                  panNone set $00
(1)  173/   10D81 : =$40                 panRight set $40
(1)  173/   10D81 : =$80                 panLeft set $80
(1)  173/   10D81 : =$C0                 panCentre set $C0
(1)  173/   10D81 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  173/   10D81 : E040                        dc.b $E0,panRight+$00
(1)  174/   10D83 : AC0C                	dc.b	nG3, $0C
(1)  175/   10D85 : (MACRO)              	smpsFMAlterVol      $F6
(1)  175/   10D85 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  175/   10D85 :                                     dc.b    $E5,$F6,
(1)  175/   10D85 : =>TRUE                       else
(1)  175/   10D85 : E6F6                                dc.b    $E6,$F6
(1)  175/   10D87 : [175]                        endif
(1)  176/   10D87 : (MACRO)              	smpsPan             panCenter, $00
(1)  176/   10D87 : =$0                  panNone set $00
(1)  176/   10D87 : =$40                 panRight set $40
(1)  176/   10D87 : =$80                 panLeft set $80
(1)  176/   10D87 : =$C0                 panCentre set $C0
(1)  176/   10D87 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  176/   10D87 : E0C0                        dc.b $E0,panCenter+$00
(1)  177/   10D89 : B1                  	dc.b	nC4
(1)  178/   10D8A : (MACRO)              	smpsFMAlterVol      $0A
(1)  178/   10D8A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  178/   10D8A :                                     dc.b    $E5,$0A,
(1)  178/   10D8A : =>TRUE                       else
(1)  178/   10D8A : E60A                                dc.b    $E6,$0A
(1)  178/   10D8C : [178]                        endif
(1)  179/   10D8C : (MACRO)              	smpsPan             panRight, $00
(1)  179/   10D8C : =$0                  panNone set $00
(1)  179/   10D8C : =$40                 panRight set $40
(1)  179/   10D8C : =$80                 panLeft set $80
(1)  179/   10D8C : =$C0                 panCentre set $C0
(1)  179/   10D8C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  179/   10D8C : E040                        dc.b $E0,panRight+$00
(1)  180/   10D8E : B106                	dc.b	nC4, $06
(1)  181/   10D90 : (MACRO)              	smpsFMAlterVol      $F6
(1)  181/   10D90 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  181/   10D90 :                                     dc.b    $E5,$F6,
(1)  181/   10D90 : =>TRUE                       else
(1)  181/   10D90 : E6F6                                dc.b    $E6,$F6
(1)  181/   10D92 : [181]                        endif
(1)  182/   10D92 : (MACRO)              	smpsPan             panCenter, $00
(1)  182/   10D92 : =$0                  panNone set $00
(1)  182/   10D92 : =$40                 panRight set $40
(1)  182/   10D92 : =$80                 panLeft set $80
(1)  182/   10D92 : =$C0                 panCentre set $C0
(1)  182/   10D92 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  182/   10D92 : E0C0                        dc.b $E0,panCenter+$00
(1)  183/   10D94 : B312                	dc.b	nD4, $12
(1)  184/   10D96 : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  184/   10D96 : F8                          dc.b    $F8
(1)  184/   10D97 : =>TRUE                       if SonicDriverVer<>1
(1)  184/   10D97 : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  184/   10D99 : =>FALSE                      else
(1)  184/   10D99 :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  184/   10D99 : [184]                        endif
(1)  185/   10D99 : (MACRO)              	smpsFMAlterVol      $0A
(1)  185/   10D99 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  185/   10D99 :                                     dc.b    $E5,$0A,
(1)  185/   10D99 : =>TRUE                       else
(1)  185/   10D99 : E60A                                dc.b    $E6,$0A
(1)  185/   10D9B : [185]                        endif
(1)  186/   10D9B : (MACRO)              	smpsPan             panRight, $00
(1)  186/   10D9B : =$0                  panNone set $00
(1)  186/   10D9B : =$40                 panRight set $40
(1)  186/   10D9B : =$80                 panLeft set $80
(1)  186/   10D9B : =$C0                 panCentre set $C0
(1)  186/   10D9B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  186/   10D9B : E040                        dc.b $E0,panRight+$00
(1)  187/   10D9D : AC06                	dc.b	nG3, $06
(1)  188/   10D9F : (MACRO)              	smpsFMAlterVol      $F6
(1)  188/   10D9F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  188/   10D9F :                                     dc.b    $E5,$F6,
(1)  188/   10D9F : =>TRUE                       else
(1)  188/   10D9F : E6F6                                dc.b    $E6,$F6
(1)  188/   10DA1 : [188]                        endif
(1)  189/   10DA1 : (MACRO)              	smpsPan             panCenter, $00
(1)  189/   10DA1 : =$0                  panNone set $00
(1)  189/   10DA1 : =$40                 panRight set $40
(1)  189/   10DA1 : =$80                 panLeft set $80
(1)  189/   10DA1 : =$C0                 panCentre set $C0
(1)  189/   10DA1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  189/   10DA1 : E0C0                        dc.b $E0,panCenter+$00
(1)  190/   10DA3 : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  191/   10DA7 : (MACRO)              	smpsCall            Hyper_Hyper_Call06
(1)  191/   10DA7 : F8                          dc.b    $F8
(1)  191/   10DA8 : =>TRUE                       if SonicDriverVer<>1
(1)  191/   10DA8 : 0F8E                                dc.w    z80_ptr(Hyper_Hyper_Call06)
(1)  191/   10DAA : =>FALSE                      else
(1)  191/   10DAA :                                     dc.w    Hyper_Hyper_Call06-*-1
(1)  191/   10DAA : [191]                        endif
(1)  192/   10DAA : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  192/   10DAA : F8                          dc.b    $F8
(1)  192/   10DAB : =>TRUE                       if SonicDriverVer<>1
(1)  192/   10DAB : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  192/   10DAD : =>FALSE                      else
(1)  192/   10DAD :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  192/   10DAD : [192]                        endif
(1)  193/   10DAD : AE12 ACAE 0C        	dc.b	nA3, $12, nG3, nA3, $0C
(1)  194/   10DB2 : (MACRO)              	smpsFMAlterVol      $0A
(1)  194/   10DB2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  194/   10DB2 :                                     dc.b    $E5,$0A,
(1)  194/   10DB2 : =>TRUE                       else
(1)  194/   10DB2 : E60A                                dc.b    $E6,$0A
(1)  194/   10DB4 : [194]                        endif
(1)  195/   10DB4 : (MACRO)              	smpsPan             panRight, $00
(1)  195/   10DB4 : =$0                  panNone set $00
(1)  195/   10DB4 : =$40                 panRight set $40
(1)  195/   10DB4 : =$80                 panLeft set $80
(1)  195/   10DB4 : =$C0                 panCentre set $C0
(1)  195/   10DB4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  195/   10DB4 : E040                        dc.b $E0,panRight+$00
(1)  196/   10DB6 : AE                  	dc.b	nA3
(1)  197/   10DB7 : (MACRO)              	smpsFMAlterVol      $F6
(1)  197/   10DB7 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  197/   10DB7 :                                     dc.b    $E5,$F6,
(1)  197/   10DB7 : =>TRUE                       else
(1)  197/   10DB7 : E6F6                                dc.b    $E6,$F6
(1)  197/   10DB9 : [197]                        endif
(1)  198/   10DB9 : (MACRO)              	smpsPan             panCenter, $00
(1)  198/   10DB9 : =$0                  panNone set $00
(1)  198/   10DB9 : =$40                 panRight set $40
(1)  198/   10DB9 : =$80                 panLeft set $80
(1)  198/   10DB9 : =$C0                 panCentre set $C0
(1)  198/   10DB9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  198/   10DB9 : E0C0                        dc.b $E0,panCenter+$00
(1)  199/   10DBB : AC                  	dc.b	nG3
(1)  200/   10DBC : (MACRO)              	smpsFMAlterVol      $0A
(1)  200/   10DBC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  200/   10DBC :                                     dc.b    $E5,$0A,
(1)  200/   10DBC : =>TRUE                       else
(1)  200/   10DBC : E60A                                dc.b    $E6,$0A
(1)  200/   10DBE : [200]                        endif
(1)  201/   10DBE : (MACRO)              	smpsPan             panRight, $00
(1)  201/   10DBE : =$0                  panNone set $00
(1)  201/   10DBE : =$40                 panRight set $40
(1)  201/   10DBE : =$80                 panLeft set $80
(1)  201/   10DBE : =$C0                 panCentre set $C0
(1)  201/   10DBE : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  201/   10DBE : E040                        dc.b $E0,panRight+$00
(1)  202/   10DC0 : AC06                	dc.b	nG3, $06
(1)  203/   10DC2 : (MACRO)              	smpsFMAlterVol      $F6
(1)  203/   10DC2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  203/   10DC2 :                                     dc.b    $E5,$F6,
(1)  203/   10DC2 : =>TRUE                       else
(1)  203/   10DC2 : E6F6                                dc.b    $E6,$F6
(1)  203/   10DC4 : [203]                        endif
(1)  204/   10DC4 : (MACRO)              	smpsPan             panCenter, $00
(1)  204/   10DC4 : =$0                  panNone set $00
(1)  204/   10DC4 : =$40                 panRight set $40
(1)  204/   10DC4 : =$80                 panLeft set $80
(1)  204/   10DC4 : =$C0                 panCentre set $C0
(1)  204/   10DC4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  204/   10DC4 : E0C0                        dc.b $E0,panCenter+$00
(1)  205/   10DC6 : AE12                	dc.b	nA3, $12
(1)  206/   10DC8 : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  206/   10DC8 : F8                          dc.b    $F8
(1)  206/   10DC9 : =>TRUE                       if SonicDriverVer<>1
(1)  206/   10DC9 : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  206/   10DCB : =>FALSE                      else
(1)  206/   10DCB :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  206/   10DCB : [206]                        endif
(1)  207/   10DCB : (MACRO)              	smpsFMAlterVol      $0A
(1)  207/   10DCB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  207/   10DCB :                                     dc.b    $E5,$0A,
(1)  207/   10DCB : =>TRUE                       else
(1)  207/   10DCB : E60A                                dc.b    $E6,$0A
(1)  207/   10DCD : [207]                        endif
(1)  208/   10DCD : (MACRO)              	smpsPan             panRight, $00
(1)  208/   10DCD : =$0                  panNone set $00
(1)  208/   10DCD : =$40                 panRight set $40
(1)  208/   10DCD : =$80                 panLeft set $80
(1)  208/   10DCD : =$C0                 panCentre set $C0
(1)  208/   10DCD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  208/   10DCD : E040                        dc.b $E0,panRight+$00
(1)  209/   10DCF : AC06                	dc.b	nG3, $06
(1)  210/   10DD1 : (MACRO)              	smpsFMAlterVol      $F6
(1)  210/   10DD1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  210/   10DD1 :                                     dc.b    $E5,$F6,
(1)  210/   10DD1 : =>TRUE                       else
(1)  210/   10DD1 : E6F6                                dc.b    $E6,$F6
(1)  210/   10DD3 : [210]                        endif
(1)  211/   10DD3 : (MACRO)              	smpsPan             panCenter, $00
(1)  211/   10DD3 : =$0                  panNone set $00
(1)  211/   10DD3 : =$40                 panRight set $40
(1)  211/   10DD3 : =$80                 panLeft set $80
(1)  211/   10DD3 : =$C0                 panCentre set $C0
(1)  211/   10DD3 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  211/   10DD3 : E0C0                        dc.b $E0,panCenter+$00
(1)  212/   10DD5 : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  213/   10DD9 : (MACRO)              	smpsCall            Hyper_Hyper_Call06
(1)  213/   10DD9 : F8                          dc.b    $F8
(1)  213/   10DDA : =>TRUE                       if SonicDriverVer<>1
(1)  213/   10DDA : 0F8E                                dc.w    z80_ptr(Hyper_Hyper_Call06)
(1)  213/   10DDC : =>FALSE                      else
(1)  213/   10DDC :                                     dc.w    Hyper_Hyper_Call06-*-1
(1)  213/   10DDC : [213]                        endif
(1)  214/   10DDC : (MACRO)              	smpsChangeTransposition $FE
(1)  214/   10DDC : =>TRUE                       if SonicDriverVer>=3
(1)  214/   10DDC : FBFE                                dc.b    $FB,$FE
(1)  214/   10DDE : =>FALSE                      else
(1)  214/   10DDE :                                     dc.b    $E9,$FE
(1)  214/   10DDE : [214]                        endif
(1)  215/   10DDE : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  215/   10DDE : F8                          dc.b    $F8
(1)  215/   10DDF : =>TRUE                       if SonicDriverVer<>1
(1)  215/   10DDF : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  215/   10DE1 : =>FALSE                      else
(1)  215/   10DE1 :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  215/   10DE1 : [215]                        endif
(1)  216/   10DE1 : (MACRO)              	smpsChangeTransposition $02
(1)  216/   10DE1 : =>TRUE                       if SonicDriverVer>=3
(1)  216/   10DE1 : FB02                                dc.b    $FB,$02
(1)  216/   10DE3 : =>FALSE                      else
(1)  216/   10DE3 :                                     dc.b    $E9,$02
(1)  216/   10DE3 : [216]                        endif
(1)  217/   10DE3 : AC12 AAAC 0680      	dc.b	nG3, $12, nF3, nG3, $06, nRst, $12, nC4, $0C
            10DE9 : 12B1 0C          
(1)  218/   10DEC : (MACRO)              	smpsFMAlterVol      $0A
(1)  218/   10DEC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  218/   10DEC :                                     dc.b    $E5,$0A,
(1)  218/   10DEC : =>TRUE                       else
(1)  218/   10DEC : E60A                                dc.b    $E6,$0A
(1)  218/   10DEE : [218]                        endif
(1)  219/   10DEE : (MACRO)              	smpsPan             panRight, $00
(1)  219/   10DEE : =$0                  panNone set $00
(1)  219/   10DEE : =$40                 panRight set $40
(1)  219/   10DEE : =$80                 panLeft set $80
(1)  219/   10DEE : =$C0                 panCentre set $C0
(1)  219/   10DEE : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  219/   10DEE : E040                        dc.b $E0,panRight+$00
(1)  220/   10DF0 : B106                	dc.b	nC4, $06
(1)  221/   10DF2 : (MACRO)              	smpsFMAlterVol      $F6
(1)  221/   10DF2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  221/   10DF2 :                                     dc.b    $E5,$F6,
(1)  221/   10DF2 : =>TRUE                       else
(1)  221/   10DF2 : E6F6                                dc.b    $E6,$F6
(1)  221/   10DF4 : [221]                        endif
(1)  222/   10DF4 : (MACRO)              	smpsPan             panCenter, $00
(1)  222/   10DF4 : =$0                  panNone set $00
(1)  222/   10DF4 : =$40                 panRight set $40
(1)  222/   10DF4 : =$80                 panLeft set $80
(1)  222/   10DF4 : =$C0                 panCentre set $C0
(1)  222/   10DF4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  222/   10DF4 : E0C0                        dc.b $E0,panCenter+$00
(1)  223/   10DF6 : B312                	dc.b	nD4, $12
(1)  224/   10DF8 : (MACRO)              	smpsCall            Hyper_Hyper_Call07
(1)  224/   10DF8 : F8                          dc.b    $F8
(1)  224/   10DF9 : =>TRUE                       if SonicDriverVer<>1
(1)  224/   10DF9 : 2A8E                                dc.w    z80_ptr(Hyper_Hyper_Call07)
(1)  224/   10DFB : =>FALSE                      else
(1)  224/   10DFB :                                     dc.w    Hyper_Hyper_Call07-*-1
(1)  224/   10DFB : [224]                        endif
(1)  225/   10DFB : (MACRO)              	smpsFMAlterVol      $0A
(1)  225/   10DFB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  225/   10DFB :                                     dc.b    $E5,$0A,
(1)  225/   10DFB : =>TRUE                       else
(1)  225/   10DFB : E60A                                dc.b    $E6,$0A
(1)  225/   10DFD : [225]                        endif
(1)  226/   10DFD : (MACRO)              	smpsPan             panRight, $00
(1)  226/   10DFD : =$0                  panNone set $00
(1)  226/   10DFD : =$40                 panRight set $40
(1)  226/   10DFD : =$80                 panLeft set $80
(1)  226/   10DFD : =$C0                 panCentre set $C0
(1)  226/   10DFD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  226/   10DFD : E040                        dc.b $E0,panRight+$00
(1)  227/   10DFF : AC06                	dc.b	nG3, $06
(1)  228/   10E01 : (MACRO)              	smpsFMAlterVol      $F6
(1)  228/   10E01 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  228/   10E01 :                                     dc.b    $E5,$F6,
(1)  228/   10E01 : =>TRUE                       else
(1)  228/   10E01 : E6F6                                dc.b    $E6,$F6
(1)  228/   10E03 : [228]                        endif
(1)  229/   10E03 : (MACRO)              	smpsPan             panCenter, $00
(1)  229/   10E03 : =$0                  panNone set $00
(1)  229/   10E03 : =$40                 panRight set $40
(1)  229/   10E03 : =$80                 panLeft set $80
(1)  229/   10E03 : =$C0                 panCentre set $C0
(1)  229/   10E03 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  229/   10E03 : E0C0                        dc.b $E0,panCenter+$00
(1)  230/   10E05 : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  231/   10E09 : (MACRO)              	smpsCall            Hyper_Hyper_Call06
(1)  231/   10E09 : F8                          dc.b    $F8
(1)  231/   10E0A : =>TRUE                       if SonicDriverVer<>1
(1)  231/   10E0A : 0F8E                                dc.w    z80_ptr(Hyper_Hyper_Call06)
(1)  231/   10E0C : =>FALSE                      else
(1)  231/   10E0C :                                     dc.w    Hyper_Hyper_Call06-*-1
(1)  231/   10E0C : [231]                        endif
(1)  232/   10E0C : (MACRO)              	smpsJump            Hyper_Hyper_Jump01
(1)  232/   10E0C : F6                          dc.b    $F6
(1)  232/   10E0D : =>TRUE                       if SonicDriverVer<>1
(1)  232/   10E0D : 418D                                dc.w    z80_ptr(Hyper_Hyper_Jump01)
(1)  232/   10E0F : =>FALSE                      else
(1)  232/   10E0F :                                     dc.w    Hyper_Hyper_Jump01-*-1
(1)  232/   10E0F : [232]                        endif
(1)  233/   10E0F :                     
(1)  234/   10E0F :                     Hyper_Hyper_Call06:
(1)  235/   10E0F : (MACRO)              	smpsSetvoice        $03
(1)  235/   10E0F :  (MACRO-2)                   smpsFMvoice $03
(1)  235/   10E0F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  235/   10E0F :                                     dc.b    $EF,$03|$80,+$81
(1)  235/   10E0F : =>TRUE                       else
(1)  235/   10E0F : EF03                                dc.b    $EF,$03
(1)  235/   10E11 : [235]                        endif
(1)  236/   10E11 : (MACRO)              	smpsFMAlterVol      $05
(1)  236/   10E11 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  236/   10E11 :                                     dc.b    $E5,$05,
(1)  236/   10E11 : =>TRUE                       else
(1)  236/   10E11 : E605                                dc.b    $E6,$05
(1)  236/   10E13 : [236]                        endif
(1)  237/   10E13 : (MACRO)              	smpsPan             panLeft, $00
(1)  237/   10E13 : =$0                  panNone set $00
(1)  237/   10E13 : =$40                 panRight set $40
(1)  237/   10E13 : =$80                 panLeft set $80
(1)  237/   10E13 : =$C0                 panCentre set $C0
(1)  237/   10E13 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  237/   10E13 : E080                        dc.b $E0,panLeft+$00
(1)  238/   10E15 : 8005 CE06 CDC9 C4   	dc.b	nRst, $05, nF6, $06, nE6, nC6, nG5
(1)  239/   10E1C : (MACRO)              	smpsPan             panRight, $00
(1)  239/   10E1C : =$0                  panNone set $00
(1)  239/   10E1C : =$40                 panRight set $40
(1)  239/   10E1C : =$80                 panLeft set $80
(1)  239/   10E1C : =$C0                 panCentre set $C0
(1)  239/   10E1C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  239/   10E1C : E040                        dc.b $E0,panRight+$00
(1)  240/   10E1E : C2C1 BDB8 01        	dc.b	nF5, nE5, nC5, nG4, $01
(1)  241/   10E23 : (MACRO)              	smpsSetvoice        $01
(1)  241/   10E23 :  (MACRO-2)                   smpsFMvoice $01
(1)  241/   10E23 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  241/   10E23 :                                     dc.b    $EF,$01|$80,+$81
(1)  241/   10E23 : =>TRUE                       else
(1)  241/   10E23 : EF01                                dc.b    $EF,$01
(1)  241/   10E25 : [241]                        endif
(1)  242/   10E25 : (MACRO)              	smpsFMAlterVol      $FB
(1)  242/   10E25 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  242/   10E25 :                                     dc.b    $E5,$FB,
(1)  242/   10E25 : =>TRUE                       else
(1)  242/   10E25 : E6FB                                dc.b    $E6,$FB
(1)  242/   10E27 : [242]                        endif
(1)  243/   10E27 : (MACRO)              	smpsPan             panCenter, $00
(1)  243/   10E27 : =$0                  panNone set $00
(1)  243/   10E27 : =$40                 panRight set $40
(1)  243/   10E27 : =$80                 panLeft set $80
(1)  243/   10E27 : =$C0                 panCentre set $C0
(1)  243/   10E27 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  243/   10E27 : E0C0                        dc.b $E0,panCenter+$00
(1)  244/   10E29 : (MACRO)              	smpsReturn
(1)  244/   10E29 : =>TRUE                       if SonicDriverVer>=3
(1)  244/   10E29 : F9                                  dc.b    $F9
(1)  244/   10E2A : =>FALSE                      else
(1)  244/   10E2A :                                     dc.b    $E3
(1)  244/   10E2A : [244]                        endif
(1)  245/   10E2A :                     
(1)  246/   10E2A :                     Hyper_Hyper_Call07:
(1)  247/   10E2A : AC12 ACAE 0CB1      	dc.b	nG3, $12, nG3, nA3, $0C, nC4, $12, nC4, nG3, $0C
            10E30 : 12B1 AC0C          
(1)  248/   10E34 : (MACRO)              	smpsReturn
(1)  248/   10E34 : =>TRUE                       if SonicDriverVer>=3
(1)  248/   10E34 : F9                                  dc.b    $F9
(1)  248/   10E35 : =>FALSE                      else
(1)  248/   10E35 :                                     dc.b    $E3
(1)  248/   10E35 : [248]                        endif
(1)  249/   10E35 :                     
(1)  250/   10E35 :                     ; FM4 Data
(1)  251/   10E35 :                     Hyper_Hyper_FM4:
(1)  252/   10E35 : (MACRO)              	smpsSetvoice        $02
(1)  252/   10E35 :  (MACRO-2)                   smpsFMvoice $02
(1)  252/   10E35 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  252/   10E35 :                                     dc.b    $EF,$02|$80,+$81
(1)  252/   10E35 : =>TRUE                       else
(1)  252/   10E35 : EF02                                dc.b    $EF,$02
(1)  252/   10E37 : [252]                        endif
(1)  253/   10E37 : 8004                	dc.b	nRst, $04
(1)  254/   10E39 : (MACRO)              	smpsFMAlterVol      $01
(1)  254/   10E39 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  254/   10E39 :                                     dc.b    $E5,$01,
(1)  254/   10E39 : =>TRUE                       else
(1)  254/   10E39 : E601                                dc.b    $E6,$01
(1)  254/   10E3B : [254]                        endif
(1)  255/   10E3B :                     
(1)  256/   10E3B :                     Hyper_Hyper_Loop05:
(1)  257/   10E3B : (MACRO)              	smpsPan             panLeft, $00
(1)  257/   10E3B : =$0                  panNone set $00
(1)  257/   10E3B : =$40                 panRight set $40
(1)  257/   10E3B : =$80                 panLeft set $80
(1)  257/   10E3B : =$C0                 panCentre set $C0
(1)  257/   10E3B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  257/   10E3B : E080                        dc.b $E0,panLeft+$00
(1)  258/   10E3D : (MACRO)              	smpsCall            Hyper_Hyper_Call04
(1)  258/   10E3D : F8                          dc.b    $F8
(1)  258/   10E3E : =>TRUE                       if SonicDriverVer<>1
(1)  258/   10E3E : 2C8F                                dc.w    z80_ptr(Hyper_Hyper_Call04)
(1)  258/   10E40 : =>FALSE                      else
(1)  258/   10E40 :                                     dc.w    Hyper_Hyper_Call04-*-1
(1)  258/   10E40 : [258]                        endif
(1)  259/   10E40 : (MACRO)              	smpsPan             panRight, $00
(1)  259/   10E40 : =$0                  panNone set $00
(1)  259/   10E40 : =$40                 panRight set $40
(1)  259/   10E40 : =$80                 panLeft set $80
(1)  259/   10E40 : =$C0                 panCentre set $C0
(1)  259/   10E40 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  259/   10E40 : E040                        dc.b $E0,panRight+$00
(1)  260/   10E42 : (MACRO)              	smpsCall            Hyper_Hyper_Call04
(1)  260/   10E42 : F8                          dc.b    $F8
(1)  260/   10E43 : =>TRUE                       if SonicDriverVer<>1
(1)  260/   10E43 : 2C8F                                dc.w    z80_ptr(Hyper_Hyper_Call04)
(1)  260/   10E45 : =>FALSE                      else
(1)  260/   10E45 :                                     dc.w    Hyper_Hyper_Call04-*-1
(1)  260/   10E45 : [260]                        endif
(1)  261/   10E45 : (MACRO)              	smpsLoop            $01, $0B, Hyper_Hyper_Loop05
(1)  261/   10E45 : F7                          dc.b    $F7
(1)  261/   10E46 : 010B                        dc.b    $01,$0B
(1)  261/   10E48 : =>TRUE                       if SonicDriverVer<>1
(1)  261/   10E48 : 3B8E                                dc.w    z80_ptr(Hyper_Hyper_Loop05)
(1)  261/   10E4A : =>FALSE                      else
(1)  261/   10E4A :                                     dc.w    Hyper_Hyper_Loop05-*-1
(1)  261/   10E4A : [261]                        endif
(1)  262/   10E4A : (MACRO)              	smpsPan             panLeft, $00
(1)  262/   10E4A : =$0                  panNone set $00
(1)  262/   10E4A : =$40                 panRight set $40
(1)  262/   10E4A : =$80                 panLeft set $80
(1)  262/   10E4A : =$C0                 panCentre set $C0
(1)  262/   10E4A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  262/   10E4A : E080                        dc.b $E0,panLeft+$00
(1)  263/   10E4C : (MACRO)              	smpsCall            Hyper_Hyper_Call04
(1)  263/   10E4C : F8                          dc.b    $F8
(1)  263/   10E4D : =>TRUE                       if SonicDriverVer<>1
(1)  263/   10E4D : 2C8F                                dc.w    z80_ptr(Hyper_Hyper_Call04)
(1)  263/   10E4F : =>FALSE                      else
(1)  263/   10E4F :                                     dc.w    Hyper_Hyper_Call04-*-1
(1)  263/   10E4F : [263]                        endif
(1)  264/   10E4F : (MACRO)              	smpsPan             panRight, $00
(1)  264/   10E4F : =$0                  panNone set $00
(1)  264/   10E4F : =$40                 panRight set $40
(1)  264/   10E4F : =$80                 panLeft set $80
(1)  264/   10E4F : =$C0                 panCentre set $C0
(1)  264/   10E4F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  264/   10E4F : E040                        dc.b $E0,panRight+$00
(1)  265/   10E51 : A506 AAA7 AC02      	dc.b	nC3, $06, nF3, nD3, nG3, $02
(1)  266/   10E57 : (MACRO)              	smpsPan             panCenter, $00
(1)  266/   10E57 : =$0                  panNone set $00
(1)  266/   10E57 : =$40                 panRight set $40
(1)  266/   10E57 : =$80                 panLeft set $80
(1)  266/   10E57 : =$C0                 panCentre set $C0
(1)  266/   10E57 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  266/   10E57 : E0C0                        dc.b $E0,panCenter+$00
(1)  267/   10E59 : (MACRO)              	smpsFMAlterVol      $FF
(1)  267/   10E59 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  267/   10E59 :                                     dc.b    $E5,$FF,
(1)  267/   10E59 : =>TRUE                       else
(1)  267/   10E59 : E6FF                                dc.b    $E6,$FF
(1)  267/   10E5B : [267]                        endif
(1)  268/   10E5B : (MACRO)              	smpsSetvoice        $01
(1)  268/   10E5B :  (MACRO-2)                   smpsFMvoice $01
(1)  268/   10E5B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  268/   10E5B :                                     dc.b    $EF,$01|$80,+$81
(1)  268/   10E5B : =>TRUE                       else
(1)  268/   10E5B : EF01                                dc.b    $EF,$01
(1)  268/   10E5D : [268]                        endif
(1)  269/   10E5D :                     
(1)  270/   10E5D :                     Hyper_Hyper_Jump00:
(1)  271/   10E5D : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  271/   10E5D : F8                          dc.b    $F8
(1)  271/   10E5E : =>TRUE                       if SonicDriverVer<>1
(1)  271/   10E5E : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  271/   10E60 : =>FALSE                      else
(1)  271/   10E60 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  271/   10E60 : [271]                        endif
(1)  272/   10E60 : AC12 AAAC 0C        	dc.b	nG3, $12, nF3, nG3, $0C
(1)  273/   10E65 : (MACRO)              	smpsFMAlterVol      $0A
(1)  273/   10E65 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  273/   10E65 :                                     dc.b    $E5,$0A,
(1)  273/   10E65 : =>TRUE                       else
(1)  273/   10E65 : E60A                                dc.b    $E6,$0A
(1)  273/   10E67 : [273]                        endif
(1)  274/   10E67 : (MACRO)              	smpsPan             panLeft, $00
(1)  274/   10E67 : =$0                  panNone set $00
(1)  274/   10E67 : =$40                 panRight set $40
(1)  274/   10E67 : =$80                 panLeft set $80
(1)  274/   10E67 : =$C0                 panCentre set $C0
(1)  274/   10E67 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  274/   10E67 : E080                        dc.b $E0,panLeft+$00
(1)  275/   10E69 : AC0C                	dc.b	nG3, $0C
(1)  276/   10E6B : (MACRO)              	smpsFMAlterVol      $F6
(1)  276/   10E6B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  276/   10E6B :                                     dc.b    $E5,$F6,
(1)  276/   10E6B : =>TRUE                       else
(1)  276/   10E6B : E6F6                                dc.b    $E6,$F6
(1)  276/   10E6D : [276]                        endif
(1)  277/   10E6D : (MACRO)              	smpsPan             panCenter, $00
(1)  277/   10E6D : =$0                  panNone set $00
(1)  277/   10E6D : =$40                 panRight set $40
(1)  277/   10E6D : =$80                 panLeft set $80
(1)  277/   10E6D : =$C0                 panCentre set $C0
(1)  277/   10E6D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  277/   10E6D : E0C0                        dc.b $E0,panCenter+$00
(1)  278/   10E6F : A8                  	dc.b	nEb3
(1)  279/   10E70 : (MACRO)              	smpsFMAlterVol      $0A
(1)  279/   10E70 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  279/   10E70 :                                     dc.b    $E5,$0A,
(1)  279/   10E70 : =>TRUE                       else
(1)  279/   10E70 : E60A                                dc.b    $E6,$0A
(1)  279/   10E72 : [279]                        endif
(1)  280/   10E72 : (MACRO)              	smpsPan             panLeft, $00
(1)  280/   10E72 : =$0                  panNone set $00
(1)  280/   10E72 : =$40                 panRight set $40
(1)  280/   10E72 : =$80                 panLeft set $80
(1)  280/   10E72 : =$C0                 panCentre set $C0
(1)  280/   10E72 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  280/   10E72 : E080                        dc.b $E0,panLeft+$00
(1)  281/   10E74 : A806                	dc.b	nEb3, $06
(1)  282/   10E76 : (MACRO)              	smpsFMAlterVol      $F6
(1)  282/   10E76 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  282/   10E76 :                                     dc.b    $E5,$F6,
(1)  282/   10E76 : =>TRUE                       else
(1)  282/   10E76 : E6F6                                dc.b    $E6,$F6
(1)  282/   10E78 : [282]                        endif
(1)  283/   10E78 : (MACRO)              	smpsPan             panCenter, $00
(1)  283/   10E78 : =$0                  panNone set $00
(1)  283/   10E78 : =$40                 panRight set $40
(1)  283/   10E78 : =$80                 panLeft set $80
(1)  283/   10E78 : =$C0                 panCentre set $C0
(1)  283/   10E78 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  283/   10E78 : E0C0                        dc.b $E0,panCenter+$00
(1)  284/   10E7A : AA12                	dc.b	nF3, $12
(1)  285/   10E7C : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  285/   10E7C : F8                          dc.b    $F8
(1)  285/   10E7D : =>TRUE                       if SonicDriverVer<>1
(1)  285/   10E7D : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  285/   10E7F : =>FALSE                      else
(1)  285/   10E7F :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  285/   10E7F : [285]                        endif
(1)  286/   10E7F : (MACRO)              	smpsFMAlterVol      $0A
(1)  286/   10E7F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  286/   10E7F :                                     dc.b    $E5,$0A,
(1)  286/   10E7F : =>TRUE                       else
(1)  286/   10E7F : E60A                                dc.b    $E6,$0A
(1)  286/   10E81 : [286]                        endif
(1)  287/   10E81 : (MACRO)              	smpsPan             panLeft, $00
(1)  287/   10E81 : =$0                  panNone set $00
(1)  287/   10E81 : =$40                 panRight set $40
(1)  287/   10E81 : =$80                 panLeft set $80
(1)  287/   10E81 : =$C0                 panCentre set $C0
(1)  287/   10E81 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  287/   10E81 : E080                        dc.b $E0,panLeft+$00
(1)  288/   10E83 : AA06                	dc.b	nF3, $06
(1)  289/   10E85 : (MACRO)              	smpsFMAlterVol      $F6
(1)  289/   10E85 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  289/   10E85 :                                     dc.b    $E5,$F6,
(1)  289/   10E85 : =>TRUE                       else
(1)  289/   10E85 : E6F6                                dc.b    $E6,$F6
(1)  289/   10E87 : [289]                        endif
(1)  290/   10E87 : (MACRO)              	smpsPan             panCenter, $00
(1)  290/   10E87 : =$0                  panNone set $00
(1)  290/   10E87 : =$40                 panRight set $40
(1)  290/   10E87 : =$80                 panLeft set $80
(1)  290/   10E87 : =$C0                 panCentre set $C0
(1)  290/   10E87 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  290/   10E87 : E0C0                        dc.b $E0,panCenter+$00
(1)  291/   10E89 : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  292/   10E8D : (MACRO)              	smpsChangeTransposition $FE
(1)  292/   10E8D : =>TRUE                       if SonicDriverVer>=3
(1)  292/   10E8D : FBFE                                dc.b    $FB,$FE
(1)  292/   10E8F : =>FALSE                      else
(1)  292/   10E8F :                                     dc.b    $E9,$FE
(1)  292/   10E8F : [292]                        endif
(1)  293/   10E8F : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  293/   10E8F : F8                          dc.b    $F8
(1)  293/   10E90 : =>TRUE                       if SonicDriverVer<>1
(1)  293/   10E90 : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  293/   10E92 : =>FALSE                      else
(1)  293/   10E92 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  293/   10E92 : [293]                        endif
(1)  294/   10E92 : (MACRO)              	smpsChangeTransposition $02
(1)  294/   10E92 : =>TRUE                       if SonicDriverVer>=3
(1)  294/   10E92 : FB02                                dc.b    $FB,$02
(1)  294/   10E94 : =>FALSE                      else
(1)  294/   10E94 :                                     dc.b    $E9,$02
(1)  294/   10E94 : [294]                        endif
(1)  295/   10E94 : AA12 A8AA 0C        	dc.b	nF3, $12, nEb3, nF3, $0C
(1)  296/   10E99 : (MACRO)              	smpsFMAlterVol      $0A
(1)  296/   10E99 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  296/   10E99 :                                     dc.b    $E5,$0A,
(1)  296/   10E99 : =>TRUE                       else
(1)  296/   10E99 : E60A                                dc.b    $E6,$0A
(1)  296/   10E9B : [296]                        endif
(1)  297/   10E9B : (MACRO)              	smpsPan             panLeft, $00
(1)  297/   10E9B : =$0                  panNone set $00
(1)  297/   10E9B : =$40                 panRight set $40
(1)  297/   10E9B : =$80                 panLeft set $80
(1)  297/   10E9B : =$C0                 panCentre set $C0
(1)  297/   10E9B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  297/   10E9B : E080                        dc.b $E0,panLeft+$00
(1)  298/   10E9D : AA0C                	dc.b	nF3, $0C
(1)  299/   10E9F : (MACRO)              	smpsFMAlterVol      $F6
(1)  299/   10E9F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  299/   10E9F :                                     dc.b    $E5,$F6,
(1)  299/   10E9F : =>TRUE                       else
(1)  299/   10E9F : E6F6                                dc.b    $E6,$F6
(1)  299/   10EA1 : [299]                        endif
(1)  300/   10EA1 : (MACRO)              	smpsPan             panCenter, $00
(1)  300/   10EA1 : =$0                  panNone set $00
(1)  300/   10EA1 : =$40                 panRight set $40
(1)  300/   10EA1 : =$80                 panLeft set $80
(1)  300/   10EA1 : =$C0                 panCentre set $C0
(1)  300/   10EA1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  300/   10EA1 : E0C0                        dc.b $E0,panCenter+$00
(1)  301/   10EA3 : AD                  	dc.b	nAb3
(1)  302/   10EA4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  302/   10EA4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  302/   10EA4 :                                     dc.b    $E5,$0A,
(1)  302/   10EA4 : =>TRUE                       else
(1)  302/   10EA4 : E60A                                dc.b    $E6,$0A
(1)  302/   10EA6 : [302]                        endif
(1)  303/   10EA6 : (MACRO)              	smpsPan             panLeft, $00
(1)  303/   10EA6 : =$0                  panNone set $00
(1)  303/   10EA6 : =$40                 panRight set $40
(1)  303/   10EA6 : =$80                 panLeft set $80
(1)  303/   10EA6 : =$C0                 panCentre set $C0
(1)  303/   10EA6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  303/   10EA6 : E080                        dc.b $E0,panLeft+$00
(1)  304/   10EA8 : AD06                	dc.b	nAb3, $06
(1)  305/   10EAA : (MACRO)              	smpsFMAlterVol      $F6
(1)  305/   10EAA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  305/   10EAA :                                     dc.b    $E5,$F6,
(1)  305/   10EAA : =>TRUE                       else
(1)  305/   10EAA : E6F6                                dc.b    $E6,$F6
(1)  305/   10EAC : [305]                        endif
(1)  306/   10EAC : (MACRO)              	smpsPan             panCenter, $00
(1)  306/   10EAC : =$0                  panNone set $00
(1)  306/   10EAC : =$40                 panRight set $40
(1)  306/   10EAC : =$80                 panLeft set $80
(1)  306/   10EAC : =$C0                 panCentre set $C0
(1)  306/   10EAC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  306/   10EAC : E0C0                        dc.b $E0,panCenter+$00
(1)  307/   10EAE : AF12                	dc.b	nBb3, $12
(1)  308/   10EB0 : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  308/   10EB0 : F8                          dc.b    $F8
(1)  308/   10EB1 : =>TRUE                       if SonicDriverVer<>1
(1)  308/   10EB1 : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  308/   10EB3 : =>FALSE                      else
(1)  308/   10EB3 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  308/   10EB3 : [308]                        endif
(1)  309/   10EB3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  309/   10EB3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  309/   10EB3 :                                     dc.b    $E5,$0A,
(1)  309/   10EB3 : =>TRUE                       else
(1)  309/   10EB3 : E60A                                dc.b    $E6,$0A
(1)  309/   10EB5 : [309]                        endif
(1)  310/   10EB5 : (MACRO)              	smpsPan             panLeft, $00
(1)  310/   10EB5 : =$0                  panNone set $00
(1)  310/   10EB5 : =$40                 panRight set $40
(1)  310/   10EB5 : =$80                 panLeft set $80
(1)  310/   10EB5 : =$C0                 panCentre set $C0
(1)  310/   10EB5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  310/   10EB5 : E080                        dc.b $E0,panLeft+$00
(1)  311/   10EB7 : AA06                	dc.b	nF3, $06
(1)  312/   10EB9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  312/   10EB9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  312/   10EB9 :                                     dc.b    $E5,$F6,
(1)  312/   10EB9 : =>TRUE                       else
(1)  312/   10EB9 : E6F6                                dc.b    $E6,$F6
(1)  312/   10EBB : [312]                        endif
(1)  313/   10EBB : (MACRO)              	smpsPan             panCenter, $00
(1)  313/   10EBB : =$0                  panNone set $00
(1)  313/   10EBB : =$40                 panRight set $40
(1)  313/   10EBB : =$80                 panLeft set $80
(1)  313/   10EBB : =$C0                 panCentre set $C0
(1)  313/   10EBB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  313/   10EBB : E0C0                        dc.b $E0,panCenter+$00
(1)  314/   10EBD : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  315/   10EC1 : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  315/   10EC1 : F8                          dc.b    $F8
(1)  315/   10EC2 : =>TRUE                       if SonicDriverVer<>1
(1)  315/   10EC2 : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  315/   10EC4 : =>FALSE                      else
(1)  315/   10EC4 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  315/   10EC4 : [315]                        endif
(1)  316/   10EC4 : AC12 AAAC 0C        	dc.b	nG3, $12, nF3, nG3, $0C
(1)  317/   10EC9 : (MACRO)              	smpsFMAlterVol      $0A
(1)  317/   10EC9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  317/   10EC9 :                                     dc.b    $E5,$0A,
(1)  317/   10EC9 : =>TRUE                       else
(1)  317/   10EC9 : E60A                                dc.b    $E6,$0A
(1)  317/   10ECB : [317]                        endif
(1)  318/   10ECB : (MACRO)              	smpsPan             panLeft, $00
(1)  318/   10ECB : =$0                  panNone set $00
(1)  318/   10ECB : =$40                 panRight set $40
(1)  318/   10ECB : =$80                 panLeft set $80
(1)  318/   10ECB : =$C0                 panCentre set $C0
(1)  318/   10ECB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  318/   10ECB : E080                        dc.b $E0,panLeft+$00
(1)  319/   10ECD : AC0C                	dc.b	nG3, $0C
(1)  320/   10ECF : (MACRO)              	smpsFMAlterVol      $F6
(1)  320/   10ECF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  320/   10ECF :                                     dc.b    $E5,$F6,
(1)  320/   10ECF : =>TRUE                       else
(1)  320/   10ECF : E6F6                                dc.b    $E6,$F6
(1)  320/   10ED1 : [320]                        endif
(1)  321/   10ED1 : (MACRO)              	smpsPan             panCenter, $00
(1)  321/   10ED1 : =$0                  panNone set $00
(1)  321/   10ED1 : =$40                 panRight set $40
(1)  321/   10ED1 : =$80                 panLeft set $80
(1)  321/   10ED1 : =$C0                 panCentre set $C0
(1)  321/   10ED1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  321/   10ED1 : E0C0                        dc.b $E0,panCenter+$00
(1)  322/   10ED3 : A8                  	dc.b	nEb3
(1)  323/   10ED4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  323/   10ED4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  323/   10ED4 :                                     dc.b    $E5,$0A,
(1)  323/   10ED4 : =>TRUE                       else
(1)  323/   10ED4 : E60A                                dc.b    $E6,$0A
(1)  323/   10ED6 : [323]                        endif
(1)  324/   10ED6 : (MACRO)              	smpsPan             panLeft, $00
(1)  324/   10ED6 : =$0                  panNone set $00
(1)  324/   10ED6 : =$40                 panRight set $40
(1)  324/   10ED6 : =$80                 panLeft set $80
(1)  324/   10ED6 : =$C0                 panCentre set $C0
(1)  324/   10ED6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  324/   10ED6 : E080                        dc.b $E0,panLeft+$00
(1)  325/   10ED8 : A806                	dc.b	nEb3, $06
(1)  326/   10EDA : (MACRO)              	smpsFMAlterVol      $F6
(1)  326/   10EDA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  326/   10EDA :                                     dc.b    $E5,$F6,
(1)  326/   10EDA : =>TRUE                       else
(1)  326/   10EDA : E6F6                                dc.b    $E6,$F6
(1)  326/   10EDC : [326]                        endif
(1)  327/   10EDC : (MACRO)              	smpsPan             panCenter, $00
(1)  327/   10EDC : =$0                  panNone set $00
(1)  327/   10EDC : =$40                 panRight set $40
(1)  327/   10EDC : =$80                 panLeft set $80
(1)  327/   10EDC : =$C0                 panCentre set $C0
(1)  327/   10EDC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  327/   10EDC : E0C0                        dc.b $E0,panCenter+$00
(1)  328/   10EDE : AA12                	dc.b	nF3, $12
(1)  329/   10EE0 : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  329/   10EE0 : F8                          dc.b    $F8
(1)  329/   10EE1 : =>TRUE                       if SonicDriverVer<>1
(1)  329/   10EE1 : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  329/   10EE3 : =>FALSE                      else
(1)  329/   10EE3 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  329/   10EE3 : [329]                        endif
(1)  330/   10EE3 : (MACRO)              	smpsFMAlterVol      $0A
(1)  330/   10EE3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  330/   10EE3 :                                     dc.b    $E5,$0A,
(1)  330/   10EE3 : =>TRUE                       else
(1)  330/   10EE3 : E60A                                dc.b    $E6,$0A
(1)  330/   10EE5 : [330]                        endif
(1)  331/   10EE5 : (MACRO)              	smpsPan             panLeft, $00
(1)  331/   10EE5 : =$0                  panNone set $00
(1)  331/   10EE5 : =$40                 panRight set $40
(1)  331/   10EE5 : =$80                 panLeft set $80
(1)  331/   10EE5 : =$C0                 panCentre set $C0
(1)  331/   10EE5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  331/   10EE5 : E080                        dc.b $E0,panLeft+$00
(1)  332/   10EE7 : AA06                	dc.b	nF3, $06
(1)  333/   10EE9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  333/   10EE9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  333/   10EE9 :                                     dc.b    $E5,$F6,
(1)  333/   10EE9 : =>TRUE                       else
(1)  333/   10EE9 : E6F6                                dc.b    $E6,$F6
(1)  333/   10EEB : [333]                        endif
(1)  334/   10EEB : (MACRO)              	smpsPan             panCenter, $00
(1)  334/   10EEB : =$0                  panNone set $00
(1)  334/   10EEB : =$40                 panRight set $40
(1)  334/   10EEB : =$80                 panLeft set $80
(1)  334/   10EEB : =$C0                 panCentre set $C0
(1)  334/   10EEB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  334/   10EEB : E0C0                        dc.b $E0,panCenter+$00
(1)  335/   10EED : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  336/   10EF1 : (MACRO)              	smpsChangeTransposition $FE
(1)  336/   10EF1 : =>TRUE                       if SonicDriverVer>=3
(1)  336/   10EF1 : FBFE                                dc.b    $FB,$FE
(1)  336/   10EF3 : =>FALSE                      else
(1)  336/   10EF3 :                                     dc.b    $E9,$FE
(1)  336/   10EF3 : [336]                        endif
(1)  337/   10EF3 : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  337/   10EF3 : F8                          dc.b    $F8
(1)  337/   10EF4 : =>TRUE                       if SonicDriverVer<>1
(1)  337/   10EF4 : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  337/   10EF6 : =>FALSE                      else
(1)  337/   10EF6 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  337/   10EF6 : [337]                        endif
(1)  338/   10EF6 : (MACRO)              	smpsChangeTransposition $02
(1)  338/   10EF6 : =>TRUE                       if SonicDriverVer>=3
(1)  338/   10EF6 : FB02                                dc.b    $FB,$02
(1)  338/   10EF8 : =>FALSE                      else
(1)  338/   10EF8 :                                     dc.b    $E9,$02
(1)  338/   10EF8 : [338]                        endif
(1)  339/   10EF8 : AA12 A8AA 0680      	dc.b	nF3, $12, nEb3, nF3, $06, nRst, $12, nAb3, $0C
            10EFE : 12AD 0C          
(1)  340/   10F01 : (MACRO)              	smpsFMAlterVol      $0A
(1)  340/   10F01 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  340/   10F01 :                                     dc.b    $E5,$0A,
(1)  340/   10F01 : =>TRUE                       else
(1)  340/   10F01 : E60A                                dc.b    $E6,$0A
(1)  340/   10F03 : [340]                        endif
(1)  341/   10F03 : (MACRO)              	smpsPan             panLeft, $00
(1)  341/   10F03 : =$0                  panNone set $00
(1)  341/   10F03 : =$40                 panRight set $40
(1)  341/   10F03 : =$80                 panLeft set $80
(1)  341/   10F03 : =$C0                 panCentre set $C0
(1)  341/   10F03 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  341/   10F03 : E080                        dc.b $E0,panLeft+$00
(1)  342/   10F05 : AD06                	dc.b	nAb3, $06
(1)  343/   10F07 : (MACRO)              	smpsFMAlterVol      $F6
(1)  343/   10F07 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  343/   10F07 :                                     dc.b    $E5,$F6,
(1)  343/   10F07 : =>TRUE                       else
(1)  343/   10F07 : E6F6                                dc.b    $E6,$F6
(1)  343/   10F09 : [343]                        endif
(1)  344/   10F09 : (MACRO)              	smpsPan             panCenter, $00
(1)  344/   10F09 : =$0                  panNone set $00
(1)  344/   10F09 : =$40                 panRight set $40
(1)  344/   10F09 : =$80                 panLeft set $80
(1)  344/   10F09 : =$C0                 panCentre set $C0
(1)  344/   10F09 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  344/   10F09 : E0C0                        dc.b $E0,panCenter+$00
(1)  345/   10F0B : AF12                	dc.b	nBb3, $12
(1)  346/   10F0D : (MACRO)              	smpsCall            Hyper_Hyper_Call05
(1)  346/   10F0D : F8                          dc.b    $F8
(1)  346/   10F0E : =>TRUE                       if SonicDriverVer<>1
(1)  346/   10F0E : 218F                                dc.w    z80_ptr(Hyper_Hyper_Call05)
(1)  346/   10F10 : =>FALSE                      else
(1)  346/   10F10 :                                     dc.w    Hyper_Hyper_Call05-*-1
(1)  346/   10F10 : [346]                        endif
(1)  347/   10F10 : (MACRO)              	smpsFMAlterVol      $0A
(1)  347/   10F10 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  347/   10F10 :                                     dc.b    $E5,$0A,
(1)  347/   10F10 : =>TRUE                       else
(1)  347/   10F10 : E60A                                dc.b    $E6,$0A
(1)  347/   10F12 : [347]                        endif
(1)  348/   10F12 : (MACRO)              	smpsPan             panLeft, $00
(1)  348/   10F12 : =$0                  panNone set $00
(1)  348/   10F12 : =$40                 panRight set $40
(1)  348/   10F12 : =$80                 panLeft set $80
(1)  348/   10F12 : =$C0                 panCentre set $C0
(1)  348/   10F12 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  348/   10F12 : E080                        dc.b $E0,panLeft+$00
(1)  349/   10F14 : AA06                	dc.b	nF3, $06
(1)  350/   10F16 : (MACRO)              	smpsFMAlterVol      $F6
(1)  350/   10F16 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  350/   10F16 :                                     dc.b    $E5,$F6,
(1)  350/   10F16 : =>TRUE                       else
(1)  350/   10F16 : E6F6                                dc.b    $E6,$F6
(1)  350/   10F18 : [350]                        endif
(1)  351/   10F18 : (MACRO)              	smpsPan             panCenter, $00
(1)  351/   10F18 : =$0                  panNone set $00
(1)  351/   10F18 : =$40                 panRight set $40
(1)  351/   10F18 : =$80                 panLeft set $80
(1)  351/   10F18 : =$C0                 panCentre set $C0
(1)  351/   10F18 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  351/   10F18 : E0C0                        dc.b $E0,panCenter+$00
(1)  352/   10F1A : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  353/   10F1E : (MACRO)              	smpsJump            Hyper_Hyper_Jump00
(1)  353/   10F1E : F6                          dc.b    $F6
(1)  353/   10F1F : =>TRUE                       if SonicDriverVer<>1
(1)  353/   10F1F : 5D8E                                dc.w    z80_ptr(Hyper_Hyper_Jump00)
(1)  353/   10F21 : =>FALSE                      else
(1)  353/   10F21 :                                     dc.w    Hyper_Hyper_Jump00-*-1
(1)  353/   10F21 : [353]                        endif
(1)  354/   10F21 :                     
(1)  355/   10F21 :                     Hyper_Hyper_Call05:
(1)  356/   10F21 : AA12 AAAA 0CAC      	dc.b	nF3, $12, nF3, nF3, $0C, nG3, $12, nG3, nF3, $0C
            10F27 : 12AC AA0C          
(1)  357/   10F2B : (MACRO)              	smpsReturn
(1)  357/   10F2B : =>TRUE                       if SonicDriverVer>=3
(1)  357/   10F2B : F9                                  dc.b    $F9
(1)  357/   10F2C : =>FALSE                      else
(1)  357/   10F2C :                                     dc.b    $E3
(1)  357/   10F2C : [357]                        endif
(1)  358/   10F2C :                     
(1)  359/   10F2C :                     Hyper_Hyper_Call04:
(1)  360/   10F2C : A506 AAA7 AC        	dc.b	nC3, $06, nF3, nD3, nG3
(1)  361/   10F31 : (MACRO)              	smpsReturn
(1)  361/   10F31 : =>TRUE                       if SonicDriverVer>=3
(1)  361/   10F31 : F9                                  dc.b    $F9
(1)  361/   10F32 : =>FALSE                      else
(1)  361/   10F32 :                                     dc.b    $E3
(1)  361/   10F32 : [361]                        endif
(1)  362/   10F32 :                     
(1)  363/   10F32 :                     ; FM5 Data
(1)  364/   10F32 :                     Hyper_Hyper_FM5:
(1)  365/   10F32 : (MACRO)              	smpsSetvoice        $02
(1)  365/   10F32 :  (MACRO-2)                   smpsFMvoice $02
(1)  365/   10F32 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  365/   10F32 :                                     dc.b    $EF,$02|$80,+$81
(1)  365/   10F32 : =>TRUE                       else
(1)  365/   10F32 : EF02                                dc.b    $EF,$02
(1)  365/   10F34 : [365]                        endif
(1)  366/   10F34 :                     
(1)  367/   10F34 :                     Hyper_Hyper_Loop02:
(1)  368/   10F34 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  368/   10F34 : F8                          dc.b    $F8
(1)  368/   10F35 : =>TRUE                       if SonicDriverVer<>1
(1)  368/   10F35 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  368/   10F37 : =>FALSE                      else
(1)  368/   10F37 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  368/   10F37 : [368]                        endif
(1)  369/   10F37 : (MACRO)              	smpsLoop            $01, $06, Hyper_Hyper_Loop02
(1)  369/   10F37 : F7                          dc.b    $F7
(1)  369/   10F38 : 0106                        dc.b    $01,$06
(1)  369/   10F3A : =>TRUE                       if SonicDriverVer<>1
(1)  369/   10F3A : 348F                                dc.w    z80_ptr(Hyper_Hyper_Loop02)
(1)  369/   10F3C : =>FALSE                      else
(1)  369/   10F3C :                                     dc.w    Hyper_Hyper_Loop02-*-1
(1)  369/   10F3C : [369]                        endif
(1)  370/   10F3C :                     
(1)  371/   10F3C :                     Hyper_Hyper_Loop03:
(1)  372/   10F3C : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  372/   10F3C : F8                          dc.b    $F8
(1)  372/   10F3D : =>TRUE                       if SonicDriverVer<>1
(1)  372/   10F3D : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  372/   10F3F : =>FALSE                      else
(1)  372/   10F3F :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  372/   10F3F : [372]                        endif
(1)  373/   10F3F : (MACRO)              	smpsLoop            $01, $04, Hyper_Hyper_Loop03
(1)  373/   10F3F : F7                          dc.b    $F7
(1)  373/   10F40 : 0104                        dc.b    $01,$04
(1)  373/   10F42 : =>TRUE                       if SonicDriverVer<>1
(1)  373/   10F42 : 3C8F                                dc.w    z80_ptr(Hyper_Hyper_Loop03)
(1)  373/   10F44 : =>FALSE                      else
(1)  373/   10F44 :                                     dc.w    Hyper_Hyper_Loop03-*-1
(1)  373/   10F44 : [373]                        endif
(1)  374/   10F44 : (MACRO)              	smpsChangeTransposition $FE
(1)  374/   10F44 : =>TRUE                       if SonicDriverVer>=3
(1)  374/   10F44 : FBFE                                dc.b    $FB,$FE
(1)  374/   10F46 : =>FALSE                      else
(1)  374/   10F46 :                                     dc.b    $E9,$FE
(1)  374/   10F46 : [374]                        endif
(1)  375/   10F46 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  375/   10F46 : F8                          dc.b    $F8
(1)  375/   10F47 : =>TRUE                       if SonicDriverVer<>1
(1)  375/   10F47 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  375/   10F49 : =>FALSE                      else
(1)  375/   10F49 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  375/   10F49 : [375]                        endif
(1)  376/   10F49 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  376/   10F49 : F8                          dc.b    $F8
(1)  376/   10F4A : =>TRUE                       if SonicDriverVer<>1
(1)  376/   10F4A : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  376/   10F4C : =>FALSE                      else
(1)  376/   10F4C :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  376/   10F4C : [376]                        endif
(1)  377/   10F4C : (MACRO)              	smpsChangeTransposition $02
(1)  377/   10F4C : =>TRUE                       if SonicDriverVer>=3
(1)  377/   10F4C : FB02                                dc.b    $FB,$02
(1)  377/   10F4E : =>FALSE                      else
(1)  377/   10F4E :                                     dc.b    $E9,$02
(1)  377/   10F4E : [377]                        endif
(1)  378/   10F4E : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  378/   10F4E : F8                          dc.b    $F8
(1)  378/   10F4F : =>TRUE                       if SonicDriverVer<>1
(1)  378/   10F4F : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  378/   10F51 : =>FALSE                      else
(1)  378/   10F51 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  378/   10F51 : [378]                        endif
(1)  379/   10F51 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  379/   10F51 : F8                          dc.b    $F8
(1)  379/   10F52 : =>TRUE                       if SonicDriverVer<>1
(1)  379/   10F52 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  379/   10F54 : =>FALSE                      else
(1)  379/   10F54 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  379/   10F54 : [379]                        endif
(1)  380/   10F54 :                     
(1)  381/   10F54 :                     Hyper_Hyper_Loop04:
(1)  382/   10F54 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  382/   10F54 : F8                          dc.b    $F8
(1)  382/   10F55 : =>TRUE                       if SonicDriverVer<>1
(1)  382/   10F55 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  382/   10F57 : =>FALSE                      else
(1)  382/   10F57 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  382/   10F57 : [382]                        endif
(1)  383/   10F57 : (MACRO)              	smpsLoop            $01, $04, Hyper_Hyper_Loop04
(1)  383/   10F57 : F7                          dc.b    $F7
(1)  383/   10F58 : 0104                        dc.b    $01,$04
(1)  383/   10F5A : =>TRUE                       if SonicDriverVer<>1
(1)  383/   10F5A : 548F                                dc.w    z80_ptr(Hyper_Hyper_Loop04)
(1)  383/   10F5C : =>FALSE                      else
(1)  383/   10F5C :                                     dc.w    Hyper_Hyper_Loop04-*-1
(1)  383/   10F5C : [383]                        endif
(1)  384/   10F5C : (MACRO)              	smpsChangeTransposition $FE
(1)  384/   10F5C : =>TRUE                       if SonicDriverVer>=3
(1)  384/   10F5C : FBFE                                dc.b    $FB,$FE
(1)  384/   10F5E : =>FALSE                      else
(1)  384/   10F5E :                                     dc.b    $E9,$FE
(1)  384/   10F5E : [384]                        endif
(1)  385/   10F5E : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  385/   10F5E : F8                          dc.b    $F8
(1)  385/   10F5F : =>TRUE                       if SonicDriverVer<>1
(1)  385/   10F5F : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  385/   10F61 : =>FALSE                      else
(1)  385/   10F61 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  385/   10F61 : [385]                        endif
(1)  386/   10F61 : (MACRO)              	smpsChangeTransposition $02
(1)  386/   10F61 : =>TRUE                       if SonicDriverVer>=3
(1)  386/   10F61 : FB02                                dc.b    $FB,$02
(1)  386/   10F63 : =>FALSE                      else
(1)  386/   10F63 :                                     dc.b    $E9,$02
(1)  386/   10F63 : [386]                        endif
(1)  387/   10F63 : A306 A8A5 AAA3      	dc.b	nBb2, $06, nEb3, nC3, nF3, nBb2, nEb3, nC3, nRst, nRst, nRst, nC3
            10F69 : A8A5 8080 80A5    
(1)  388/   10F6F : AAA3 A8A5 AA        	dc.b	nF3, nBb2, nEb3, nC3, nF3
(1)  389/   10F74 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  389/   10F74 : F8                          dc.b    $F8
(1)  389/   10F75 : =>TRUE                       if SonicDriverVer<>1
(1)  389/   10F75 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  389/   10F77 : =>FALSE                      else
(1)  389/   10F77 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  389/   10F77 : [389]                        endif
(1)  390/   10F77 : (MACRO)              	smpsCall            Hyper_Hyper_Call03
(1)  390/   10F77 : F8                          dc.b    $F8
(1)  390/   10F78 : =>TRUE                       if SonicDriverVer<>1
(1)  390/   10F78 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  390/   10F7A : =>FALSE                      else
(1)  390/   10F7A :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  390/   10F7A : [390]                        endif
(1)  391/   10F7A : (MACRO)              	smpsJump            Hyper_Hyper_Loop03
(1)  391/   10F7A : F6                          dc.b    $F6
(1)  391/   10F7B : =>TRUE                       if SonicDriverVer<>1
(1)  391/   10F7B : 3C8F                                dc.w    z80_ptr(Hyper_Hyper_Loop03)
(1)  391/   10F7D : =>FALSE                      else
(1)  391/   10F7D :                                     dc.w    Hyper_Hyper_Loop03-*-1
(1)  391/   10F7D : [391]                        endif
(1)  392/   10F7D :                     
(1)  393/   10F7D :                     Hyper_Hyper_Call03:
(1)  394/   10F7D : A506 AAA7 AC        	dc.b	nC3, $06, nF3, nD3, nG3
(1)  395/   10F82 : (MACRO)              	smpsLoop            $00, $04, Hyper_Hyper_Call03
(1)  395/   10F82 : F7                          dc.b    $F7
(1)  395/   10F83 : 0004                        dc.b    $00,$04
(1)  395/   10F85 : =>TRUE                       if SonicDriverVer<>1
(1)  395/   10F85 : 7D8F                                dc.w    z80_ptr(Hyper_Hyper_Call03)
(1)  395/   10F87 : =>FALSE                      else
(1)  395/   10F87 :                                     dc.w    Hyper_Hyper_Call03-*-1
(1)  395/   10F87 : [395]                        endif
(1)  396/   10F87 : (MACRO)              	smpsReturn
(1)  396/   10F87 : =>TRUE                       if SonicDriverVer>=3
(1)  396/   10F87 : F9                                  dc.b    $F9
(1)  396/   10F88 : =>FALSE                      else
(1)  396/   10F88 :                                     dc.b    $E3
(1)  396/   10F88 : [396]                        endif
(1)  397/   10F88 :                     
(1)  398/   10F88 :                     ; Unreachable
(1)  399/   10F88 : (MACRO)              	smpsStop
(1)  399/   10F88 : F2                          dc.b    $F2
(1)  400/   10F89 :                     
(1)  401/   10F89 :                     ; PSG1 Data
(1)  402/   10F89 :                     Hyper_Hyper_PSG1:
(1)  403/   10F89 : (MACRO)              	smpsPSGvoice        sTone_03
(1)  403/   10F89 : F503                        dc.b    $F5,sTone_03
(1)  404/   10F8B : 8060 8080 8080      	dc.b	nRst, $60, nRst, nRst, nRst, nRst
(1)  405/   10F91 : (MACRO)              	smpsModSet          $01, $06, $01, $01
(1)  405/   10F91 : F0                          dc.b    $F0
(1)  405/   10F92 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  405/   10F92 :                                     dc.b    $01+1,$06,$01,(($01+1) * $06) & $FF
(1)  405/   10F92 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  405/   10F92 :                                     dc.b    $01-1,$06,$01,conv0To256($01)/conv0To256($06)-1
(1)  405/   10F92 : =>TRUE                       else
(1)  405/   10F92 : 0106 0101                           dc.b    $01,$06,$01,$01
(1)  405/   10F96 : [405]                        endif
(1)  405/   10F96 :                             ;dc.b   $06,$01,$01
(1)  406/   10F96 : (MACRO)              	smpsPSGAlterVol     $02
(1)  406/   10F96 : EC02                        dc.b    $EC,$02
(1)  407/   10F98 : C160                	dc.b	nE5, $60
(1)  408/   10F9A : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)  408/   10F9A : F0                          dc.b    $F0
(1)  408/   10F9B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  408/   10F9B :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)  408/   10F9B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  408/   10F9B :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)  408/   10F9B : =>TRUE                       else
(1)  408/   10F9B : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  408/   10F9F : [408]                        endif
(1)  408/   10F9F :                             ;dc.b   $00,$00,$00
(1)  409/   10F9F : (MACRO)              	smpsPSGAlterVol     $FE
(1)  409/   10F9F : ECFE                        dc.b    $EC,$FE
(1)  410/   10FA1 :                     
(1)  411/   10FA1 :                     Hyper_Hyper_Jump04:
(1)  412/   10FA1 : (MACRO)              	smpsCall            Hyper_Hyper_Call0F
(1)  412/   10FA1 : F8                          dc.b    $F8
(1)  412/   10FA2 : =>TRUE                       if SonicDriverVer<>1
(1)  412/   10FA2 : 1890                                dc.w    z80_ptr(Hyper_Hyper_Call0F)
(1)  412/   10FA4 : =>FALSE                      else
(1)  412/   10FA4 :                                     dc.w    Hyper_Hyper_Call0F-*-1
(1)  412/   10FA4 : [412]                        endif
(1)  413/   10FA4 : 800C B118 AE06      	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
            10FAA : 80B1 12B3 0680    
(1)  414/   10FB0 : 0CB4 E70C B306      	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nC4, $12
            10FB6 : 80B4 B380 B112    
(1)  415/   10FBC : ADAF B10C 80AC      	dc.b	nAb3, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $0F
            10FC2 : 80AF 03E7 B00F    
(1)  416/   10FC8 : AC06 800C AAE7      	dc.b	nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3, $54
            10FCE : 0680 AC54          
(1)  417/   10FD2 : (MACRO)              	smpsCall            Hyper_Hyper_Call0F
(1)  417/   10FD2 : F8                          dc.b    $F8
(1)  417/   10FD3 : =>TRUE                       if SonicDriverVer<>1
(1)  417/   10FD3 : 1890                                dc.w    z80_ptr(Hyper_Hyper_Call0F)
(1)  417/   10FD5 : =>FALSE                      else
(1)  417/   10FD5 :                                     dc.w    Hyper_Hyper_Call0F-*-1
(1)  417/   10FD5 : [417]                        endif
(1)  418/   10FD5 : 800C B118 AE06      	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
            10FDB : 80B1 12B3 0680    
(1)  419/   10FE1 : 0CB4 E70C B306      	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nC4, $06
            10FE7 : 80B4 B380 B106    
(1)  420/   10FED : 800C AD12 AFB1      	dc.b	nRst, $0C, nAb3, $12, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03
            10FF3 : 0C80 AC80 AF03    
(1)  421/   10FF9 : E7B0 0FAC 0680      	dc.b	smpsNoAttack, nB3, $0F, nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3
            10FFF : 0CAA E706 80AC    
(1)  422/   11005 : 54                  	dc.b	$54
(1)  423/   11006 : (MACRO)              	smpsJump            Hyper_Hyper_Jump04
(1)  423/   11006 : F6                          dc.b    $F6
(1)  423/   11007 : =>TRUE                       if SonicDriverVer<>1
(1)  423/   11007 : A18F                                dc.w    z80_ptr(Hyper_Hyper_Jump04)
(1)  423/   11009 : =>FALSE                      else
(1)  423/   11009 :                                     dc.w    Hyper_Hyper_Jump04-*-1
(1)  423/   11009 : [423]                        endif
(1)  424/   11009 :                     
(1)  425/   11009 :                     Hyper_Hyper_Call10:
(1)  426/   11009 : AA0C 80AC 80AF      	dc.b	nF3, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $0F, nG3, $06
            1100F : 03E7 B00F AC06    
(1)  427/   11015 : 800C                	dc.b	nRst, $0C
(1)  428/   11017 : (MACRO)              	smpsReturn
(1)  428/   11017 : =>TRUE                       if SonicDriverVer>=3
(1)  428/   11017 : F9                                  dc.b    $F9
(1)  428/   11018 : =>FALSE                      else
(1)  428/   11018 :                                     dc.b    $E3
(1)  428/   11018 : [428]                        endif
(1)  429/   11018 :                     
(1)  430/   11018 :                     Hyper_Hyper_Call0F:
(1)  431/   11018 : (MACRO)              	smpsCall            Hyper_Hyper_Call10
(1)  431/   11018 : F8                          dc.b    $F8
(1)  431/   11019 : =>TRUE                       if SonicDriverVer<>1
(1)  431/   11019 : 0990                                dc.w    z80_ptr(Hyper_Hyper_Call10)
(1)  431/   1101B : =>FALSE                      else
(1)  431/   1101B :                                     dc.w    Hyper_Hyper_Call10-*-1
(1)  431/   1101B : [431]                        endif
(1)  432/   1101B : B10C E70C B006      	dc.b	nC4, $0C, smpsNoAttack, $0C, nB3, $06, nRst, nC4, nD4, nRst, nG3, $30
            11021 : 80B1 B380 AC30    
(1)  433/   11027 : 8006                	dc.b	nRst, $06
(1)  434/   11029 : (MACRO)              	smpsCall            Hyper_Hyper_Call10
(1)  434/   11029 : F8                          dc.b    $F8
(1)  434/   1102A : =>TRUE                       if SonicDriverVer<>1
(1)  434/   1102A : 0990                                dc.w    z80_ptr(Hyper_Hyper_Call10)
(1)  434/   1102C : =>FALSE                      else
(1)  434/   1102C :                                     dc.w    Hyper_Hyper_Call10-*-1
(1)  434/   1102C : [434]                        endif
(1)  435/   1102C : B60C E706 80B8      	dc.b	nF4, $0C, smpsNoAttack, $06, nRst, nG4, nRst, nF4, nE4, nRst, nD4, $30
            11032 : 80B6 B580 B330    
(1)  436/   11038 : 8006                	dc.b	nRst, $06
(1)  437/   1103A : (MACRO)              	smpsReturn
(1)  437/   1103A : =>TRUE                       if SonicDriverVer>=3
(1)  437/   1103A : F9                                  dc.b    $F9
(1)  437/   1103B : =>FALSE                      else
(1)  437/   1103B :                                     dc.b    $E3
(1)  437/   1103B : [437]                        endif
(1)  438/   1103B :                     
(1)  439/   1103B :                     ; PSG2 Data
(1)  440/   1103B :                     Hyper_Hyper_PSG2:
(1)  441/   1103B : 8060 8080 8080      	dc.b	nRst, $60, nRst, nRst, nRst, nRst
(1)  442/   11041 : (MACRO)              	smpsModSet          $01, $06, $01, $01
(1)  442/   11041 : F0                          dc.b    $F0
(1)  442/   11042 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  442/   11042 :                                     dc.b    $01+1,$06,$01,(($01+1) * $06) & $FF
(1)  442/   11042 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  442/   11042 :                                     dc.b    $01-1,$06,$01,conv0To256($01)/conv0To256($06)-1
(1)  442/   11042 : =>TRUE                       else
(1)  442/   11042 : 0106 0101                           dc.b    $01,$06,$01,$01
(1)  442/   11046 : [442]                        endif
(1)  442/   11046 :                             ;dc.b   $06,$01,$01
(1)  443/   11046 : (MACRO)              	smpsPSGAlterVol     $02
(1)  443/   11046 : EC02                        dc.b    $EC,$02
(1)  444/   11048 : 8004 C15C           	dc.b	nRst, $04, nE5, $5C
(1)  445/   1104C : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)  445/   1104C : F0                          dc.b    $F0
(1)  445/   1104D : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  445/   1104D :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)  445/   1104D : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  445/   1104D :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)  445/   1104D : =>TRUE                       else
(1)  445/   1104D : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  445/   11051 : [445]                        endif
(1)  445/   11051 :                             ;dc.b   $00,$00,$00
(1)  446/   11051 : (MACRO)              	smpsPSGAlterVol     $FE
(1)  446/   11051 : ECFE                        dc.b    $EC,$FE
(1)  447/   11053 : (MACRO)              	smpsModSet          $01, $01, $01, $03
(1)  447/   11053 : F0                          dc.b    $F0
(1)  447/   11054 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  447/   11054 :                                     dc.b    $01+1,$01,$01,(($03+1) * $01) & $FF
(1)  447/   11054 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  447/   11054 :                                     dc.b    $01-1,$01,$01,conv0To256($03)/conv0To256($01)-1
(1)  447/   11054 : =>TRUE                       else
(1)  447/   11054 : 0101 0103                           dc.b    $01,$01,$01,$03
(1)  447/   11058 : [447]                        endif
(1)  447/   11058 :                             ;dc.b   $01,$01,$03
(1)  448/   11058 :                     
(1)  449/   11058 :                     Hyper_Hyper_Jump03:
(1)  450/   11058 : 8006                	dc.b	nRst, $06
(1)  451/   1105A : (MACRO)              	smpsCall            Hyper_Hyper_Call0F
(1)  451/   1105A : F8                          dc.b    $F8
(1)  451/   1105B : =>TRUE                       if SonicDriverVer<>1
(1)  451/   1105B : 1890                                dc.w    z80_ptr(Hyper_Hyper_Call0F)
(1)  451/   1105D : =>FALSE                      else
(1)  451/   1105D :                                     dc.w    Hyper_Hyper_Call0F-*-1
(1)  451/   1105D : [451]                        endif
(1)  452/   1105D : 800C B118 AE06      	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
            11063 : 80B1 12B3 0680    
(1)  453/   11069 : 0CB4 E70C B306      	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nC4, $12
            1106F : 80B4 B380 B112    
(1)  454/   11075 : ADAF B10C 80AC      	dc.b	nAb3, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $0F
            1107B : 80AF 03E7 B00F    
(1)  455/   11081 : AC06 800C AAE7      	dc.b	nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3, $54
            11087 : 0680 AC54          
(1)  456/   1108B : (MACRO)              	smpsCall            Hyper_Hyper_Call0F
(1)  456/   1108B : F8                          dc.b    $F8
(1)  456/   1108C : =>TRUE                       if SonicDriverVer<>1
(1)  456/   1108C : 1890                                dc.w    z80_ptr(Hyper_Hyper_Call0F)
(1)  456/   1108E : =>FALSE                      else
(1)  456/   1108E :                                     dc.w    Hyper_Hyper_Call0F-*-1
(1)  456/   1108E : [456]                        endif
(1)  457/   1108E : 800C B118 AE06      	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
            11094 : 80B1 12B3 0680    
(1)  458/   1109A : 0CB4 E70C B306      	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nRst, $06
            110A0 : 80B4 B380 8006    
(1)  459/   110A6 : 800C AD12 AFB1      	dc.b	nRst, $0C, nAb3, $12, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03
            110AC : 0C80 AC80 AF03    
(1)  460/   110B2 : E7B0 0FAC 0680      	dc.b	smpsNoAttack, nB3, $0F, nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3
            110B8 : 0CAA E706 80AC    
(1)  461/   110BE : 4E                  	dc.b	$4E
(1)  462/   110BF : (MACRO)              	smpsJump            Hyper_Hyper_Jump03
(1)  462/   110BF : F6                          dc.b    $F6
(1)  462/   110C0 : =>TRUE                       if SonicDriverVer<>1
(1)  462/   110C0 : 5890                                dc.w    z80_ptr(Hyper_Hyper_Jump03)
(1)  462/   110C2 : =>FALSE                      else
(1)  462/   110C2 :                                     dc.w    Hyper_Hyper_Jump03-*-1
(1)  462/   110C2 : [462]                        endif
(1)  463/   110C2 :                     
(1)  464/   110C2 :                     ; PSG3 Data
(1)  465/   110C2 :                     Hyper_Hyper_PSG3:
(1)  466/   110C2 : (MACRO)              	smpsPSGform         $E7
(1)  466/   110C2 : F3E7                        dc.b    $F3,$E7
(1)  467/   110C4 :                     
(1)  468/   110C4 :                     Hyper_Hyper_Loop07:
(1)  469/   110C4 : (MACRO)              	smpsCall            Hyper_Hyper_Call0D
(1)  469/   110C4 : F8                          dc.b    $F8
(1)  469/   110C5 : =>TRUE                       if SonicDriverVer<>1
(1)  469/   110C5 : 1091                                dc.w    z80_ptr(Hyper_Hyper_Call0D)
(1)  469/   110C7 : =>FALSE                      else
(1)  469/   110C7 :                                     dc.w    Hyper_Hyper_Call0D-*-1
(1)  469/   110C7 : [469]                        endif
(1)  470/   110C7 : (MACRO)              	smpsLoop            $01, $05, Hyper_Hyper_Loop07
(1)  470/   110C7 : F7                          dc.b    $F7
(1)  470/   110C8 : 0105                        dc.b    $01,$05
(1)  470/   110CA : =>TRUE                       if SonicDriverVer<>1
(1)  470/   110CA : C490                                dc.w    z80_ptr(Hyper_Hyper_Loop07)
(1)  470/   110CC : =>FALSE                      else
(1)  470/   110CC :                                     dc.w    Hyper_Hyper_Loop07-*-1
(1)  470/   110CC : [470]                        endif
(1)  471/   110CC : (MACRO)              	smpsCall            Hyper_Hyper_Call0E
(1)  471/   110CC : F8                          dc.b    $F8
(1)  471/   110CD : =>TRUE                       if SonicDriverVer<>1
(1)  471/   110CD : 1E91                                dc.w    z80_ptr(Hyper_Hyper_Call0E)
(1)  471/   110CF : =>FALSE                      else
(1)  471/   110CF :                                     dc.w    Hyper_Hyper_Call0E-*-1
(1)  471/   110CF : [471]                        endif
(1)  472/   110CF :                     
(1)  473/   110CF :                     Hyper_Hyper_Loop08:
(1)  474/   110CF : (MACRO)              	smpsCall            Hyper_Hyper_Call0D
(1)  474/   110CF : F8                          dc.b    $F8
(1)  474/   110D0 : =>TRUE                       if SonicDriverVer<>1
(1)  474/   110D0 : 1091                                dc.w    z80_ptr(Hyper_Hyper_Call0D)
(1)  474/   110D2 : =>FALSE                      else
(1)  474/   110D2 :                                     dc.w    Hyper_Hyper_Call0D-*-1
(1)  474/   110D2 : [474]                        endif
(1)  475/   110D2 : (MACRO)              	smpsLoop            $01, $03, Hyper_Hyper_Loop08
(1)  475/   110D2 : F7                          dc.b    $F7
(1)  475/   110D3 : 0103                        dc.b    $01,$03
(1)  475/   110D5 : =>TRUE                       if SonicDriverVer<>1
(1)  475/   110D5 : CF90                                dc.w    z80_ptr(Hyper_Hyper_Loop08)
(1)  475/   110D7 : =>FALSE                      else
(1)  475/   110D7 :                                     dc.w    Hyper_Hyper_Loop08-*-1
(1)  475/   110D7 : [475]                        endif
(1)  476/   110D7 : (MACRO)              	smpsCall            Hyper_Hyper_Call0E
(1)  476/   110D7 : F8                          dc.b    $F8
(1)  476/   110D8 : =>TRUE                       if SonicDriverVer<>1
(1)  476/   110D8 : 1E91                                dc.w    z80_ptr(Hyper_Hyper_Call0E)
(1)  476/   110DA : =>FALSE                      else
(1)  476/   110DA :                                     dc.w    Hyper_Hyper_Call0E-*-1
(1)  476/   110DA : [476]                        endif
(1)  477/   110DA : (MACRO)              	smpsLoop            $02, $02, Hyper_Hyper_Loop08
(1)  477/   110DA : F7                          dc.b    $F7
(1)  477/   110DB : 0202                        dc.b    $02,$02
(1)  477/   110DD : =>TRUE                       if SonicDriverVer<>1
(1)  477/   110DD : CF90                                dc.w    z80_ptr(Hyper_Hyper_Loop08)
(1)  477/   110DF : =>FALSE                      else
(1)  477/   110DF :                                     dc.w    Hyper_Hyper_Loop08-*-1
(1)  477/   110DF : [477]                        endif
(1)  478/   110DF :                     
(1)  479/   110DF :                     Hyper_Hyper_Loop09:
(1)  480/   110DF : (MACRO)              	smpsCall            Hyper_Hyper_Call0D
(1)  480/   110DF : F8                          dc.b    $F8
(1)  480/   110E0 : =>TRUE                       if SonicDriverVer<>1
(1)  480/   110E0 : 1091                                dc.w    z80_ptr(Hyper_Hyper_Call0D)
(1)  480/   110E2 : =>FALSE                      else
(1)  480/   110E2 :                                     dc.w    Hyper_Hyper_Call0D-*-1
(1)  480/   110E2 : [480]                        endif
(1)  481/   110E2 : (MACRO)              	smpsLoop            $01, $03, Hyper_Hyper_Loop09
(1)  481/   110E2 : F7                          dc.b    $F7
(1)  481/   110E3 : 0103                        dc.b    $01,$03
(1)  481/   110E5 : =>TRUE                       if SonicDriverVer<>1
(1)  481/   110E5 : DF90                                dc.w    z80_ptr(Hyper_Hyper_Loop09)
(1)  481/   110E7 : =>FALSE                      else
(1)  481/   110E7 :                                     dc.w    Hyper_Hyper_Loop09-*-1
(1)  481/   110E7 : [481]                        endif
(1)  482/   110E7 : (MACRO)              	smpsCall            Hyper_Hyper_Call0E
(1)  482/   110E7 : F8                          dc.b    $F8
(1)  482/   110E8 : =>TRUE                       if SonicDriverVer<>1
(1)  482/   110E8 : 1E91                                dc.w    z80_ptr(Hyper_Hyper_Call0E)
(1)  482/   110EA : =>FALSE                      else
(1)  482/   110EA :                                     dc.w    Hyper_Hyper_Call0E-*-1
(1)  482/   110EA : [482]                        endif
(1)  483/   110EA : (MACRO)              	smpsCall            Hyper_Hyper_Call0D
(1)  483/   110EA : F8                          dc.b    $F8
(1)  483/   110EB : =>TRUE                       if SonicDriverVer<>1
(1)  483/   110EB : 1091                                dc.w    z80_ptr(Hyper_Hyper_Call0D)
(1)  483/   110ED : =>FALSE                      else
(1)  483/   110ED :                                     dc.w    Hyper_Hyper_Call0D-*-1
(1)  483/   110ED : [483]                        endif
(1)  484/   110ED : (MACRO)              	smpsPSGvoice        sTone_02
(1)  484/   110ED : F502                        dc.b    $F5,sTone_02
(1)  485/   110EF : B106 06             	dc.b	(nMaxPSG2-$23)&$FF, $06, $06
(1)  486/   110F2 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  486/   110F2 : F505                        dc.b    $F5,sTone_05
(1)  487/   110F4 : 0C                  	dc.b	$0C
(1)  488/   110F5 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  488/   110F5 : F502                        dc.b    $F5,sTone_02
(1)  489/   110F7 : 0606 0680 800C      	dc.b	$06, $06, $06, nRst, nRst, $0C
(1)  490/   110FD : (MACRO)              	smpsPSGvoice        sTone_05
(1)  490/   110FD : F505                        dc.b    $F5,sTone_05
(1)  491/   110FF : 0C                  	dc.b	$0C
(1)  492/   11100 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  492/   11100 : F502                        dc.b    $F5,sTone_02
(1)  493/   11102 : 0606                	dc.b	$06, $06
(1)  494/   11104 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  494/   11104 : F505                        dc.b    $F5,sTone_05
(1)  495/   11106 : 0C                  	dc.b	$0C
(1)  496/   11107 : (MACRO)              	smpsCall            Hyper_Hyper_Call0D
(1)  496/   11107 : F8                          dc.b    $F8
(1)  496/   11108 : =>TRUE                       if SonicDriverVer<>1
(1)  496/   11108 : 1091                                dc.w    z80_ptr(Hyper_Hyper_Call0D)
(1)  496/   1110A : =>FALSE                      else
(1)  496/   1110A :                                     dc.w    Hyper_Hyper_Call0D-*-1
(1)  496/   1110A : [496]                        endif
(1)  497/   1110A : (MACRO)              	smpsCall            Hyper_Hyper_Call0E
(1)  497/   1110A : F8                          dc.b    $F8
(1)  497/   1110B : =>TRUE                       if SonicDriverVer<>1
(1)  497/   1110B : 1E91                                dc.w    z80_ptr(Hyper_Hyper_Call0E)
(1)  497/   1110D : =>FALSE                      else
(1)  497/   1110D :                                     dc.w    Hyper_Hyper_Call0E-*-1
(1)  497/   1110D : [497]                        endif
(1)  498/   1110D : (MACRO)              	smpsJump            Hyper_Hyper_Loop08
(1)  498/   1110D : F6                          dc.b    $F6
(1)  498/   1110E : =>TRUE                       if SonicDriverVer<>1
(1)  498/   1110E : CF90                                dc.w    z80_ptr(Hyper_Hyper_Loop08)
(1)  498/   11110 : =>FALSE                      else
(1)  498/   11110 :                                     dc.w    Hyper_Hyper_Loop08-*-1
(1)  498/   11110 : [498]                        endif
(1)  499/   11110 :                     
(1)  500/   11110 :                     Hyper_Hyper_Call0D:
(1)  501/   11110 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  501/   11110 : F502                        dc.b    $F5,sTone_02
(1)  502/   11112 : B106 06             	dc.b	(nMaxPSG2-$23)&$FF, $06, $06
(1)  503/   11115 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  503/   11115 : F505                        dc.b    $F5,sTone_05
(1)  504/   11117 : 0C                  	dc.b	$0C
(1)  505/   11118 : (MACRO)              	smpsLoop            $00, $04, Hyper_Hyper_Call0D
(1)  505/   11118 : F7                          dc.b    $F7
(1)  505/   11119 : 0004                        dc.b    $00,$04
(1)  505/   1111B : =>TRUE                       if SonicDriverVer<>1
(1)  505/   1111B : 1091                                dc.w    z80_ptr(Hyper_Hyper_Call0D)
(1)  505/   1111D : =>FALSE                      else
(1)  505/   1111D :                                     dc.w    Hyper_Hyper_Call0D-*-1
(1)  505/   1111D : [505]                        endif
(1)  506/   1111D : (MACRO)              	smpsReturn
(1)  506/   1111D : =>TRUE                       if SonicDriverVer>=3
(1)  506/   1111D : F9                                  dc.b    $F9
(1)  506/   1111E : =>FALSE                      else
(1)  506/   1111E :                                     dc.b    $E3
(1)  506/   1111E : [506]                        endif
(1)  507/   1111E :                     
(1)  508/   1111E :                     Hyper_Hyper_Call0E:
(1)  509/   1111E : (MACRO)              	smpsPSGvoice        sTone_02
(1)  509/   1111E : F502                        dc.b    $F5,sTone_02
(1)  510/   11120 : B104 0404 0606      	dc.b	(nMaxPSG2-$23)&$FF, $04, $04, $04, $06, $06, $06, $06, $06, $06, $06, $06
            11126 : 0606 0606 0606    
(1)  511/   1112C : (MACRO)              	smpsPSGvoice        sTone_05
(1)  511/   1112C : F505                        dc.b    $F5,sTone_05
(1)  512/   1112E : 0C0C 0C             	dc.b	$0C, $0C, $0C
(1)  513/   11131 : (MACRO)              	smpsReturn
(1)  513/   11131 : =>TRUE                       if SonicDriverVer>=3
(1)  513/   11131 : F9                                  dc.b    $F9
(1)  513/   11132 : =>FALSE                      else
(1)  513/   11132 :                                     dc.b    $E3
(1)  513/   11132 : [513]                        endif
(1)  514/   11132 :                     
(1)  515/   11132 :                     ; DAC Data
(1)  516/   11132 :                     Hyper_Hyper_DAC:
(1)  517/   11132 : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  517/   11132 : F8                          dc.b    $F8
(1)  517/   11133 : =>TRUE                       if SonicDriverVer<>1
(1)  517/   11133 : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  517/   11135 : =>FALSE                      else
(1)  517/   11135 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  517/   11135 : [517]                        endif
(1)  518/   11135 : (MACRO)              	smpsCall            Hyper_Hyper_Call01
(1)  518/   11135 : F8                          dc.b    $F8
(1)  518/   11136 : =>TRUE                       if SonicDriverVer<>1
(1)  518/   11136 : 8791                                dc.w    z80_ptr(Hyper_Hyper_Call01)
(1)  518/   11138 : =>FALSE                      else
(1)  518/   11138 :                                     dc.w    Hyper_Hyper_Call01-*-1
(1)  518/   11138 : [518]                        endif
(1)  519/   11138 : (MACRO)              	smpsLoop            $00, $02, Hyper_Hyper_DAC
(1)  519/   11138 : F7                          dc.b    $F7
(1)  519/   11139 : 0002                        dc.b    $00,$02
(1)  519/   1113B : =>TRUE                       if SonicDriverVer<>1
(1)  519/   1113B : 3291                                dc.w    z80_ptr(Hyper_Hyper_DAC)
(1)  519/   1113D : =>FALSE                      else
(1)  519/   1113D :                                     dc.w    Hyper_Hyper_DAC-*-1
(1)  519/   1113D : [519]                        endif
(1)  520/   1113D : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  520/   1113D : F8                          dc.b    $F8
(1)  520/   1113E : =>TRUE                       if SonicDriverVer<>1
(1)  520/   1113E : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  520/   11140 : =>FALSE                      else
(1)  520/   11140 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  520/   11140 : [520]                        endif
(1)  521/   11140 : (MACRO)              	smpsCall            Hyper_Hyper_Call02
(1)  521/   11140 : F8                          dc.b    $F8
(1)  521/   11141 : =>TRUE                       if SonicDriverVer<>1
(1)  521/   11141 : 9791                                dc.w    z80_ptr(Hyper_Hyper_Call02)
(1)  521/   11143 : =>FALSE                      else
(1)  521/   11143 :                                     dc.w    Hyper_Hyper_Call02-*-1
(1)  521/   11143 : [521]                        endif
(1)  522/   11143 :                     
(1)  523/   11143 :                     Hyper_Hyper_Loop00:
(1)  524/   11143 : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  524/   11143 : F8                          dc.b    $F8
(1)  524/   11144 : =>TRUE                       if SonicDriverVer<>1
(1)  524/   11144 : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  524/   11146 : =>FALSE                      else
(1)  524/   11146 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  524/   11146 : [524]                        endif
(1)  525/   11146 : (MACRO)              	smpsCall            Hyper_Hyper_Call01
(1)  525/   11146 : F8                          dc.b    $F8
(1)  525/   11147 : =>TRUE                       if SonicDriverVer<>1
(1)  525/   11147 : 8791                                dc.w    z80_ptr(Hyper_Hyper_Call01)
(1)  525/   11149 : =>FALSE                      else
(1)  525/   11149 :                                     dc.w    Hyper_Hyper_Call01-*-1
(1)  525/   11149 : [525]                        endif
(1)  526/   11149 : (MACRO)              	smpsLoop            $00, $03, Hyper_Hyper_Loop00
(1)  526/   11149 : F7                          dc.b    $F7
(1)  526/   1114A : 0003                        dc.b    $00,$03
(1)  526/   1114C : =>TRUE                       if SonicDriverVer<>1
(1)  526/   1114C : 4391                                dc.w    z80_ptr(Hyper_Hyper_Loop00)
(1)  526/   1114E : =>FALSE                      else
(1)  526/   1114E :                                     dc.w    Hyper_Hyper_Loop00-*-1
(1)  526/   1114E : [526]                        endif
(1)  527/   1114E : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  527/   1114E : F8                          dc.b    $F8
(1)  527/   1114F : =>TRUE                       if SonicDriverVer<>1
(1)  527/   1114F : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  527/   11151 : =>FALSE                      else
(1)  527/   11151 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  527/   11151 : [527]                        endif
(1)  528/   11151 : (MACRO)              	smpsCall            Hyper_Hyper_Call02
(1)  528/   11151 : F8                          dc.b    $F8
(1)  528/   11152 : =>TRUE                       if SonicDriverVer<>1
(1)  528/   11152 : 9791                                dc.w    z80_ptr(Hyper_Hyper_Call02)
(1)  528/   11154 : =>FALSE                      else
(1)  528/   11154 :                                     dc.w    Hyper_Hyper_Call02-*-1
(1)  528/   11154 : [528]                        endif
(1)  529/   11154 :                     
(1)  530/   11154 :                     Hyper_Hyper_Loop01:
(1)  531/   11154 : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  531/   11154 : F8                          dc.b    $F8
(1)  531/   11155 : =>TRUE                       if SonicDriverVer<>1
(1)  531/   11155 : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  531/   11157 : =>FALSE                      else
(1)  531/   11157 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  531/   11157 : [531]                        endif
(1)  532/   11157 : (MACRO)              	smpsCall            Hyper_Hyper_Call01
(1)  532/   11157 : F8                          dc.b    $F8
(1)  532/   11158 : =>TRUE                       if SonicDriverVer<>1
(1)  532/   11158 : 8791                                dc.w    z80_ptr(Hyper_Hyper_Call01)
(1)  532/   1115A : =>FALSE                      else
(1)  532/   1115A :                                     dc.w    Hyper_Hyper_Call01-*-1
(1)  532/   1115A : [532]                        endif
(1)  533/   1115A : (MACRO)              	smpsLoop            $00, $02, Hyper_Hyper_Loop01
(1)  533/   1115A : F7                          dc.b    $F7
(1)  533/   1115B : 0002                        dc.b    $00,$02
(1)  533/   1115D : =>TRUE                       if SonicDriverVer<>1
(1)  533/   1115D : 5491                                dc.w    z80_ptr(Hyper_Hyper_Loop01)
(1)  533/   1115F : =>FALSE                      else
(1)  533/   1115F :                                     dc.w    Hyper_Hyper_Loop01-*-1
(1)  533/   1115F : [533]                        endif
(1)  534/   1115F : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  534/   1115F : F8                          dc.b    $F8
(1)  534/   11160 : =>TRUE                       if SonicDriverVer<>1
(1)  534/   11160 : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  534/   11162 : =>FALSE                      else
(1)  534/   11162 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  534/   11162 : [534]                        endif
(1)  535/   11162 : 8112 0682 0C81      	dc.b	dKick, $12, $06, dSnare, $0C, dKick, nRst, dSnare, $06, dKick, dSnare, dSnare
            11168 : 8082 0681 8282    
(1)  536/   1116E : 0C82 06             	dc.b	$0C, dSnare, $06
(1)  537/   11171 : (MACRO)              	smpsCall            Hyper_Hyper_Call00
(1)  537/   11171 : F8                          dc.b    $F8
(1)  537/   11172 : =>TRUE                       if SonicDriverVer<>1
(1)  537/   11172 : 7A91                                dc.w    z80_ptr(Hyper_Hyper_Call00)
(1)  537/   11174 : =>FALSE                      else
(1)  537/   11174 :                                     dc.w    Hyper_Hyper_Call00-*-1
(1)  537/   11174 : [537]                        endif
(1)  538/   11174 : (MACRO)              	smpsCall            Hyper_Hyper_Call02
(1)  538/   11174 : F8                          dc.b    $F8
(1)  538/   11175 : =>TRUE                       if SonicDriverVer<>1
(1)  538/   11175 : 9791                                dc.w    z80_ptr(Hyper_Hyper_Call02)
(1)  538/   11177 : =>FALSE                      else
(1)  538/   11177 :                                     dc.w    Hyper_Hyper_Call02-*-1
(1)  538/   11177 : [538]                        endif
(1)  539/   11177 : (MACRO)              	smpsJump            Hyper_Hyper_Loop00
(1)  539/   11177 : F6                          dc.b    $F6
(1)  539/   11178 : =>TRUE                       if SonicDriverVer<>1
(1)  539/   11178 : 4391                                dc.w    z80_ptr(Hyper_Hyper_Loop00)
(1)  539/   1117A : =>FALSE                      else
(1)  539/   1117A :                                     dc.w    Hyper_Hyper_Loop00-*-1
(1)  539/   1117A : [539]                        endif
(1)  540/   1117A :                     
(1)  541/   1117A :                     Hyper_Hyper_Call00:
(1)  542/   1117A : 8112 0682 0C81      	dc.b	dKick, $12, $06, dSnare, $0C, dKick, nRst, dKick, dSnare, $06, dKick, $12
            11180 : 8081 8206 8112    
(1)  543/   11186 : (MACRO)              	smpsReturn
(1)  543/   11186 : =>TRUE                       if SonicDriverVer>=3
(1)  543/   11186 : F9                                  dc.b    $F9
(1)  543/   11187 : =>FALSE                      else
(1)  543/   11187 :                                     dc.b    $E3
(1)  543/   11187 : [543]                        endif
(1)  544/   11187 :                     
(1)  545/   11187 :                     Hyper_Hyper_Call01:
(1)  546/   11187 : 8112 0682 0C81      	dc.b	dKick, $12, $06, dSnare, $0C, dKick, nRst, dKick, $06, dKick, dSnare, dKick
            1118D : 8081 0681 8281    
(1)  547/   11193 : 0C82 06             	dc.b	$0C, dSnare, $06
(1)  548/   11196 : (MACRO)              	smpsReturn
(1)  548/   11196 : =>TRUE                       if SonicDriverVer>=3
(1)  548/   11196 : F9                                  dc.b    $F9
(1)  548/   11197 : =>FALSE                      else
(1)  548/   11197 :                                     dc.b    $E3
(1)  548/   11197 : [548]                        endif
(1)  549/   11197 :                     
(1)  550/   11197 :                     Hyper_Hyper_Call02:
(1)  551/   11197 : 810C 8206 8182      	dc.b	dKick, $0C, dSnare, $06, dKick, dSnare, $0C, dSnare, $04, dSnare, dSnare, dSnare
            1119D : 0C82 0482 8282    
(1)  552/   111A3 : 0682 8282 8383      	dc.b	$06, dSnare, dSnare, dSnare, dHighTom, dHighTom, dMidTom, dLowTom
            111A9 : 8485             
(1)  553/   111AB : (MACRO)              	smpsReturn
(1)  553/   111AB : =>TRUE                       if SonicDriverVer>=3
(1)  553/   111AB : F9                                  dc.b    $F9
(1)  553/   111AC : =>FALSE                      else
(1)  553/   111AC :                                     dc.b    $E3
(1)  553/   111AC : [553]                        endif
(1)  554/   111AC :                     
(1)  555/   111AC :                     Hyper_Hyper_Voices:
(1)  556/   111AC :                     ;	Voice $00
(1)  557/   111AC :                     ;	$3B
(1)  558/   111AC :                     ;	$58, $31, $04, $02, 	$DF, $9F, $9F, $9F, 	$14, $08, $0E, $07
(1)  559/   111AC :                     ;	$10, $0E, $0F, $07, 	$6F, $7F, $3F, $8F, 	$05, $14, $18, $80
(1)  560/   111AC : (MACRO)              	smpsVcAlgorithm     $03
(1)  560/   111AC : =$3                  vcAlgorithm set $03
(1)  561/   111AC : (MACRO)              	smpsVcFeedback      $07
(1)  561/   111AC : =$7                  vcFeedback set $07
(1)  562/   111AC : (MACRO)              	smpsVcUnusedBits    $00
(1)  562/   111AC : =$0                  vcUnusedBits set $00
(1)  562/   111AC : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  562/   111AC :                                     set vcD1R1Unk,<<5
(1)  562/   111AC :                                     set vcD1R2Unk,<<5
(1)  562/   111AC :                                     set vcD1R3Unk,<<5
(1)  562/   111AC :                                     set vcD1R4Unk,<<5
(1)  562/   111AC : =>TRUE                       else
(1)  562/   111AC : =$0                                  set vcD1R1Unk,0
(1)  562/   111AC : =$0                                  set vcD1R2Unk,0
(1)  562/   111AC : =$0                                  set vcD1R3Unk,0
(1)  562/   111AC : =$0                                  set vcD1R4Unk,0
(1)  562/   111AC : [562]                        endif
(1)  563/   111AC : (MACRO)              	smpsVcDetune        $00, $00, $03, $05
(1)  563/   111AC : =$0                          set vcDT1,$00
(1)  563/   111AC : =$0                          set vcDT2,$00
(1)  563/   111AC : =$3                          set vcDT3,$03
(1)  563/   111AC : =$5                          set vcDT4,$05
(1)  564/   111AC : (MACRO)              	smpsVcCoarseFreq    $02, $04, $01, $08
(1)  564/   111AC : =$2                          set vcCF1,$02
(1)  564/   111AC : =$4                          set vcCF2,$04
(1)  564/   111AC : =$1                          set vcCF3,$01
(1)  564/   111AC : =$8                          set vcCF4,$08
(1)  565/   111AC : (MACRO)              	smpsVcRateScale     $02, $02, $02, $03
(1)  565/   111AC : =$2                          set vcRS1,$02
(1)  565/   111AC : =$2                          set vcRS2,$02
(1)  565/   111AC : =$2                          set vcRS3,$02
(1)  565/   111AC : =$3                          set vcRS4,$03
(1)  566/   111AC : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  566/   111AC : =$1F                         set vcAR1,$1F
(1)  566/   111AC : =$1F                         set vcAR2,$1F
(1)  566/   111AC : =$1F                         set vcAR3,$1F
(1)  566/   111AC : =$1F                         set vcAR4,$1F
(1)  567/   111AC : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  567/   111AC : =>FALSE                      if SourceSMPS2ASM==0
(1)  567/   111AC :                                     set vcAM1,$00<<5
(1)  567/   111AC :                                     set vcAM2,$00<<5
(1)  567/   111AC :                                     set vcAM3,$00<<5
(1)  567/   111AC :                                     set vcAM4,$00<<5
(1)  567/   111AC : =>TRUE                       else
(1)  567/   111AC : =$0                                  set vcAM1,$00<<7
(1)  567/   111AC : =$0                                  set vcAM2,$00<<7
(1)  567/   111AC : =$0                                  set vcAM3,$00<<7
(1)  567/   111AC : =$0                                  set vcAM4,$00<<7
(1)  567/   111AC : [567]                        endif
(1)  568/   111AC : (MACRO)              	smpsVcDecayRate1    $07, $0E, $08, $14
(1)  568/   111AC : =$7                          set vcD1R1,$07
(1)  568/   111AC : =$E                          set vcD1R2,$0E
(1)  568/   111AC : =$8                          set vcD1R3,$08
(1)  568/   111AC : =$14                         set vcD1R4,$14
(1)  569/   111AC : (MACRO)              	smpsVcDecayRate2    $07, $0F, $0E, $10
(1)  569/   111AC : =$7                          set vcD2R1,$07
(1)  569/   111AC : =$F                          set vcD2R2,$0F
(1)  569/   111AC : =$E                          set vcD2R3,$0E
(1)  569/   111AC : =$10                         set vcD2R4,$10
(1)  570/   111AC : (MACRO)              	smpsVcDecayLevel    $08, $03, $07, $06
(1)  570/   111AC : =$8                          set vcDL1,$08
(1)  570/   111AC : =$3                          set vcDL2,$03
(1)  570/   111AC : =$7                          set vcDL3,$07
(1)  570/   111AC : =$6                          set vcDL4,$06
(1)  571/   111AC : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  571/   111AC : =$F                          set vcRR1,$0F
(1)  571/   111AC : =$F                          set vcRR2,$0F
(1)  571/   111AC : =$F                          set vcRR3,$0F
(1)  571/   111AC : =$F                          set vcRR4,$0F
(1)  572/   111AC : (MACRO)              	smpsVcTotalLevel    $80, $18, $14, $05
(1)  572/   111AC : =$80                         set vcTL1,$80
(1)  572/   111AC : =$18                         set vcTL2,$18
(1)  572/   111AC : =$14                         set vcTL3,$14
(1)  572/   111AC : =$5                          set vcTL4,$05
(1)  572/   111AC : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  572/   111AD :                     ;   0     1     2     3     4     5     6     7
(1)  572/   111AD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  572/   111AD : =>FALSE                      if SourceSMPS2ASM==0
(1)  572/   111AD :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  572/   111AD :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  572/   111AD :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  572/   111AD :                                     set vcTLMask1,$80
(1)  572/   111AD : =>TRUE                       else
(1)  572/   111AD : =$0                                  set vcTLMask4,0
(1)  572/   111AD : =$0                                  set vcTLMask3,0
(1)  572/   111AD : =$0                                  set vcTLMask2,0
(1)  572/   111AD : =$0                                  set vcTLMask1,0
(1)  572/   111AD : [572]                        endif
(1)  572/   111AD :                     
(1)  572/   111AD : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  572/   111AD :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  572/   111AD :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  572/   111AD :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  572/   111AD :                                     set vcTLMask1,$80
(1)  572/   111AD :                                     set vcTL1,vcTL1&$7F
(1)  572/   111AD :                                     set vcTL2,vcTL2&$7F
(1)  572/   111AD :                                     set vcTL3,vcTL3&$7F
(1)  572/   111AD :                                     set vcTL4,vcTL4&$7F
(1)  572/   111AD : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  572/   111AD :                                     if MOMPASS>1
(1)  572/   111AD :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  572/   111AD : [572]                                endif
(1)  572/   111AD : [572]                        endif
(1)  572/   111AD :                     
(1)  572/   111AD : =>FALSE                      if SonicDriverVer==2
(1)  572/   111AD :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  572/   111AD :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  572/   111AD :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  572/   111AD :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  572/   111AD :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  572/   111AD :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  572/   111AD : =>TRUE                       else
(1)  572/   111AD : 5831 0402                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  572/   111B1 : DF9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  572/   111B5 : 1408 0E07                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  572/   111B9 : 100E 0F07                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  572/   111BD : 6F7F 3F8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  572/   111C1 : 0514 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  572/   111C5 : [572]                        endif
(1)  573/   111C5 :                     
(1)  574/   111C5 :                     ;	Voice $01
(1)  575/   111C5 :                     ;	$2C
(1)  576/   111C5 :                     ;	$34, $75, $34, $36, 	$1F, $5D, $9F, $5C, 	$03, $0C, $03, $0C
(1)  577/   111C5 :                     ;	$02, $06, $02, $06, 	$AF, $8F, $AF, $8F, 	$1A, $80, $27, $80
(1)  578/   111C5 : (MACRO)              	smpsVcAlgorithm     $04
(1)  578/   111C5 : =$4                  vcAlgorithm set $04
(1)  579/   111C5 : (MACRO)              	smpsVcFeedback      $05
(1)  579/   111C5 : =$5                  vcFeedback set $05
(1)  580/   111C5 : (MACRO)              	smpsVcUnusedBits    $00
(1)  580/   111C5 : =$0                  vcUnusedBits set $00
(1)  580/   111C5 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  580/   111C5 :                                     set vcD1R1Unk,<<5
(1)  580/   111C5 :                                     set vcD1R2Unk,<<5
(1)  580/   111C5 :                                     set vcD1R3Unk,<<5
(1)  580/   111C5 :                                     set vcD1R4Unk,<<5
(1)  580/   111C5 : =>TRUE                       else
(1)  580/   111C5 : =$0                                  set vcD1R1Unk,0
(1)  580/   111C5 : =$0                                  set vcD1R2Unk,0
(1)  580/   111C5 : =$0                                  set vcD1R3Unk,0
(1)  580/   111C5 : =$0                                  set vcD1R4Unk,0
(1)  580/   111C5 : [580]                        endif
(1)  581/   111C5 : (MACRO)              	smpsVcDetune        $03, $03, $07, $03
(1)  581/   111C5 : =$3                          set vcDT1,$03
(1)  581/   111C5 : =$3                          set vcDT2,$03
(1)  581/   111C5 : =$7                          set vcDT3,$07
(1)  581/   111C5 : =$3                          set vcDT4,$03
(1)  582/   111C5 : (MACRO)              	smpsVcCoarseFreq    $06, $04, $05, $04
(1)  582/   111C5 : =$6                          set vcCF1,$06
(1)  582/   111C5 : =$4                          set vcCF2,$04
(1)  582/   111C5 : =$5                          set vcCF3,$05
(1)  582/   111C5 : =$4                          set vcCF4,$04
(1)  583/   111C5 : (MACRO)              	smpsVcRateScale     $01, $02, $01, $00
(1)  583/   111C5 : =$1                          set vcRS1,$01
(1)  583/   111C5 : =$2                          set vcRS2,$02
(1)  583/   111C5 : =$1                          set vcRS3,$01
(1)  583/   111C5 : =$0                          set vcRS4,$00
(1)  584/   111C5 : (MACRO)              	smpsVcAttackRate    $1C, $1F, $1D, $1F
(1)  584/   111C5 : =$1C                         set vcAR1,$1C
(1)  584/   111C5 : =$1F                         set vcAR2,$1F
(1)  584/   111C5 : =$1D                         set vcAR3,$1D
(1)  584/   111C5 : =$1F                         set vcAR4,$1F
(1)  585/   111C5 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  585/   111C5 : =>FALSE                      if SourceSMPS2ASM==0
(1)  585/   111C5 :                                     set vcAM1,$00<<5
(1)  585/   111C5 :                                     set vcAM2,$00<<5
(1)  585/   111C5 :                                     set vcAM3,$00<<5
(1)  585/   111C5 :                                     set vcAM4,$00<<5
(1)  585/   111C5 : =>TRUE                       else
(1)  585/   111C5 : =$0                                  set vcAM1,$00<<7
(1)  585/   111C5 : =$0                                  set vcAM2,$00<<7
(1)  585/   111C5 : =$0                                  set vcAM3,$00<<7
(1)  585/   111C5 : =$0                                  set vcAM4,$00<<7
(1)  585/   111C5 : [585]                        endif
(1)  586/   111C5 : (MACRO)              	smpsVcDecayRate1    $0C, $03, $0C, $03
(1)  586/   111C5 : =$C                          set vcD1R1,$0C
(1)  586/   111C5 : =$3                          set vcD1R2,$03
(1)  586/   111C5 : =$C                          set vcD1R3,$0C
(1)  586/   111C5 : =$3                          set vcD1R4,$03
(1)  587/   111C5 : (MACRO)              	smpsVcDecayRate2    $06, $02, $06, $02
(1)  587/   111C5 : =$6                          set vcD2R1,$06
(1)  587/   111C5 : =$2                          set vcD2R2,$02
(1)  587/   111C5 : =$6                          set vcD2R3,$06
(1)  587/   111C5 : =$2                          set vcD2R4,$02
(1)  588/   111C5 : (MACRO)              	smpsVcDecayLevel    $08, $0A, $08, $0A
(1)  588/   111C5 : =$8                          set vcDL1,$08
(1)  588/   111C5 : =$A                          set vcDL2,$0A
(1)  588/   111C5 : =$8                          set vcDL3,$08
(1)  588/   111C5 : =$A                          set vcDL4,$0A
(1)  589/   111C5 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  589/   111C5 : =$F                          set vcRR1,$0F
(1)  589/   111C5 : =$F                          set vcRR2,$0F
(1)  589/   111C5 : =$F                          set vcRR3,$0F
(1)  589/   111C5 : =$F                          set vcRR4,$0F
(1)  590/   111C5 : (MACRO)              	smpsVcTotalLevel    $80, $27, $80, $1A
(1)  590/   111C5 : =$80                         set vcTL1,$80
(1)  590/   111C5 : =$27                         set vcTL2,$27
(1)  590/   111C5 : =$80                         set vcTL3,$80
(1)  590/   111C5 : =$1A                         set vcTL4,$1A
(1)  590/   111C5 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  590/   111C6 :                     ;   0     1     2     3     4     5     6     7
(1)  590/   111C6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  590/   111C6 : =>FALSE                      if SourceSMPS2ASM==0
(1)  590/   111C6 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  590/   111C6 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  590/   111C6 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  590/   111C6 :                                     set vcTLMask1,$80
(1)  590/   111C6 : =>TRUE                       else
(1)  590/   111C6 : =$0                                  set vcTLMask4,0
(1)  590/   111C6 : =$0                                  set vcTLMask3,0
(1)  590/   111C6 : =$0                                  set vcTLMask2,0
(1)  590/   111C6 : =$0                                  set vcTLMask1,0
(1)  590/   111C6 : [590]                        endif
(1)  590/   111C6 :                     
(1)  590/   111C6 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  590/   111C6 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  590/   111C6 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  590/   111C6 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  590/   111C6 :                                     set vcTLMask1,$80
(1)  590/   111C6 :                                     set vcTL1,vcTL1&$7F
(1)  590/   111C6 :                                     set vcTL2,vcTL2&$7F
(1)  590/   111C6 :                                     set vcTL3,vcTL3&$7F
(1)  590/   111C6 :                                     set vcTL4,vcTL4&$7F
(1)  590/   111C6 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  590/   111C6 :                                     if MOMPASS>1
(1)  590/   111C6 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  590/   111C6 : [590]                                endif
(1)  590/   111C6 : [590]                        endif
(1)  590/   111C6 :                     
(1)  590/   111C6 : =>FALSE                      if SonicDriverVer==2
(1)  590/   111C6 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  590/   111C6 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  590/   111C6 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  590/   111C6 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  590/   111C6 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  590/   111C6 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  590/   111C6 : =>TRUE                       else
(1)  590/   111C6 : 3475 3436                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  590/   111CA : 1F5D 9F5C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  590/   111CE : 030C 030C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  590/   111D2 : 0206 0206                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  590/   111D6 : AF8F AF8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  590/   111DA : 1A80 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  590/   111DE : [590]                        endif
(1)  591/   111DE :                     
(1)  592/   111DE :                     ;	Voice $02
(1)  593/   111DE :                     ;	$3A
(1)  594/   111DE :                     ;	$07, $06, $02, $01, 	$5F, $5F, $5F, $9F, 	$09, $02, $0A, $AC
(1)  595/   111DE :                     ;	$02, $16, $54, $09, 	$5F, $7F, $AF, $6F, 	$18, $17, $1B, $80
(1)  596/   111DE : (MACRO)              	smpsVcAlgorithm     $02
(1)  596/   111DE : =$2                  vcAlgorithm set $02
(1)  597/   111DE : (MACRO)              	smpsVcFeedback      $07
(1)  597/   111DE : =$7                  vcFeedback set $07
(1)  598/   111DE : (MACRO)              	smpsVcUnusedBits    $00, $01, $00, $00, $00
(1)  598/   111DE : =$0                  vcUnusedBits set $00
(1)  598/   111DE : =>TRUE                       if ("$01"<>"")&&("$00"<>"")&&("$00"<>"")&&("$00"<>"")
(1)  598/   111DE : =$20                                 set vcD1R1Unk,$01<<5
(1)  598/   111DE : =$0                                  set vcD1R2Unk,$00<<5
(1)  598/   111DE : =$0                                  set vcD1R3Unk,$00<<5
(1)  598/   111DE : =$0                                  set vcD1R4Unk,$00<<5
(1)  598/   111DE : =>FALSE                      else
(1)  598/   111DE :                                     set vcD1R1Unk,0
(1)  598/   111DE :                                     set vcD1R2Unk,0
(1)  598/   111DE :                                     set vcD1R3Unk,0
(1)  598/   111DE :                                     set vcD1R4Unk,0
(1)  598/   111DE : [598]                        endif
(1)  599/   111DE : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  599/   111DE : =$0                          set vcDT1,$00
(1)  599/   111DE : =$0                          set vcDT2,$00
(1)  599/   111DE : =$0                          set vcDT3,$00
(1)  599/   111DE : =$0                          set vcDT4,$00
(1)  600/   111DE : (MACRO)              	smpsVcCoarseFreq    $01, $02, $06, $07
(1)  600/   111DE : =$1                          set vcCF1,$01
(1)  600/   111DE : =$2                          set vcCF2,$02
(1)  600/   111DE : =$6                          set vcCF3,$06
(1)  600/   111DE : =$7                          set vcCF4,$07
(1)  601/   111DE : (MACRO)              	smpsVcRateScale     $02, $01, $01, $01
(1)  601/   111DE : =$2                          set vcRS1,$02
(1)  601/   111DE : =$1                          set vcRS2,$01
(1)  601/   111DE : =$1                          set vcRS3,$01
(1)  601/   111DE : =$1                          set vcRS4,$01
(1)  602/   111DE : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  602/   111DE : =$1F                         set vcAR1,$1F
(1)  602/   111DE : =$1F                         set vcAR2,$1F
(1)  602/   111DE : =$1F                         set vcAR3,$1F
(1)  602/   111DE : =$1F                         set vcAR4,$1F
(1)  603/   111DE : (MACRO)              	smpsVcAmpMod        $01, $00, $00, $00
(1)  603/   111DE : =>FALSE                      if SourceSMPS2ASM==0
(1)  603/   111DE :                                     set vcAM1,$01<<5
(1)  603/   111DE :                                     set vcAM2,$00<<5
(1)  603/   111DE :                                     set vcAM3,$00<<5
(1)  603/   111DE :                                     set vcAM4,$00<<5
(1)  603/   111DE : =>TRUE                       else
(1)  603/   111DE : =$80                                 set vcAM1,$01<<7
(1)  603/   111DE : =$0                                  set vcAM2,$00<<7
(1)  603/   111DE : =$0                                  set vcAM3,$00<<7
(1)  603/   111DE : =$0                                  set vcAM4,$00<<7
(1)  603/   111DE : [603]                        endif
(1)  604/   111DE : (MACRO)              	smpsVcDecayRate1    $0C, $0A, $02, $09
(1)  604/   111DE : =$C                          set vcD1R1,$0C
(1)  604/   111DE : =$A                          set vcD1R2,$0A
(1)  604/   111DE : =$2                          set vcD1R3,$02
(1)  604/   111DE : =$9                          set vcD1R4,$09
(1)  605/   111DE : (MACRO)              	smpsVcDecayRate2    $09, $54, $16, $02
(1)  605/   111DE : =$9                          set vcD2R1,$09
(1)  605/   111DE : =$54                         set vcD2R2,$54
(1)  605/   111DE : =$16                         set vcD2R3,$16
(1)  605/   111DE : =$2                          set vcD2R4,$02
(1)  606/   111DE : (MACRO)              	smpsVcDecayLevel    $06, $0A, $07, $05
(1)  606/   111DE : =$6                          set vcDL1,$06
(1)  606/   111DE : =$A                          set vcDL2,$0A
(1)  606/   111DE : =$7                          set vcDL3,$07
(1)  606/   111DE : =$5                          set vcDL4,$05
(1)  607/   111DE : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  607/   111DE : =$F                          set vcRR1,$0F
(1)  607/   111DE : =$F                          set vcRR2,$0F
(1)  607/   111DE : =$F                          set vcRR3,$0F
(1)  607/   111DE : =$F                          set vcRR4,$0F
(1)  608/   111DE : (MACRO)              	smpsVcTotalLevel    $80, $1B, $17, $18
(1)  608/   111DE : =$80                         set vcTL1,$80
(1)  608/   111DE : =$1B                         set vcTL2,$1B
(1)  608/   111DE : =$17                         set vcTL3,$17
(1)  608/   111DE : =$18                         set vcTL4,$18
(1)  608/   111DE : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  608/   111DF :                     ;   0     1     2     3     4     5     6     7
(1)  608/   111DF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  608/   111DF : =>FALSE                      if SourceSMPS2ASM==0
(1)  608/   111DF :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  608/   111DF :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  608/   111DF :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  608/   111DF :                                     set vcTLMask1,$80
(1)  608/   111DF : =>TRUE                       else
(1)  608/   111DF : =$0                                  set vcTLMask4,0
(1)  608/   111DF : =$0                                  set vcTLMask3,0
(1)  608/   111DF : =$0                                  set vcTLMask2,0
(1)  608/   111DF : =$0                                  set vcTLMask1,0
(1)  608/   111DF : [608]                        endif
(1)  608/   111DF :                     
(1)  608/   111DF : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  608/   111DF :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  608/   111DF :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  608/   111DF :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  608/   111DF :                                     set vcTLMask1,$80
(1)  608/   111DF :                                     set vcTL1,vcTL1&$7F
(1)  608/   111DF :                                     set vcTL2,vcTL2&$7F
(1)  608/   111DF :                                     set vcTL3,vcTL3&$7F
(1)  608/   111DF :                                     set vcTL4,vcTL4&$7F
(1)  608/   111DF : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  608/   111DF :                                     if MOMPASS>1
(1)  608/   111DF :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  608/   111DF : [608]                                endif
(1)  608/   111DF : [608]                        endif
(1)  608/   111DF :                     
(1)  608/   111DF : =>FALSE                      if SonicDriverVer==2
(1)  608/   111DF :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  608/   111DF :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  608/   111DF :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  608/   111DF :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  608/   111DF :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  608/   111DF :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  608/   111DF : =>TRUE                       else
(1)  608/   111DF : 0706 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  608/   111E3 : 5F5F 5F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  608/   111E7 : 0902 0AAC                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  608/   111EB : 0216 5409                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  608/   111EF : 5F7F AF6F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  608/   111F3 : 1817 1B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  608/   111F7 : [608]                        endif
(1)  609/   111F7 :                     
(1)  610/   111F7 :                     ;	Voice $03
(1)  611/   111F7 :                     ;	$2D
(1)  612/   111F7 :                     ;	$77, $65, $05, $15, 	$1F, $5F, $5F, $5F, 	$00, $03, $03, $05
(1)  613/   111F7 :                     ;	$00, $01, $02, $01, 	$0F, $1C, $1C, $1C, 	$22, $83, $80, $80
(1)  614/   111F7 : (MACRO)              	smpsVcAlgorithm     $05
(1)  614/   111F7 : =$5                  vcAlgorithm set $05
(1)  615/   111F7 : (MACRO)              	smpsVcFeedback      $05
(1)  615/   111F7 : =$5                  vcFeedback set $05
(1)  616/   111F7 : (MACRO)              	smpsVcUnusedBits    $00
(1)  616/   111F7 : =$0                  vcUnusedBits set $00
(1)  616/   111F7 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  616/   111F7 :                                     set vcD1R1Unk,<<5
(1)  616/   111F7 :                                     set vcD1R2Unk,<<5
(1)  616/   111F7 :                                     set vcD1R3Unk,<<5
(1)  616/   111F7 :                                     set vcD1R4Unk,<<5
(1)  616/   111F7 : =>TRUE                       else
(1)  616/   111F7 : =$0                                  set vcD1R1Unk,0
(1)  616/   111F7 : =$0                                  set vcD1R2Unk,0
(1)  616/   111F7 : =$0                                  set vcD1R3Unk,0
(1)  616/   111F7 : =$0                                  set vcD1R4Unk,0
(1)  616/   111F7 : [616]                        endif
(1)  617/   111F7 : (MACRO)              	smpsVcDetune        $01, $00, $06, $07
(1)  617/   111F7 : =$1                          set vcDT1,$01
(1)  617/   111F7 : =$0                          set vcDT2,$00
(1)  617/   111F7 : =$6                          set vcDT3,$06
(1)  617/   111F7 : =$7                          set vcDT4,$07
(1)  618/   111F7 : (MACRO)              	smpsVcCoarseFreq    $05, $05, $05, $07
(1)  618/   111F7 : =$5                          set vcCF1,$05
(1)  618/   111F7 : =$5                          set vcCF2,$05
(1)  618/   111F7 : =$5                          set vcCF3,$05
(1)  618/   111F7 : =$7                          set vcCF4,$07
(1)  619/   111F7 : (MACRO)              	smpsVcRateScale     $01, $01, $01, $00
(1)  619/   111F7 : =$1                          set vcRS1,$01
(1)  619/   111F7 : =$1                          set vcRS2,$01
(1)  619/   111F7 : =$1                          set vcRS3,$01
(1)  619/   111F7 : =$0                          set vcRS4,$00
(1)  620/   111F7 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  620/   111F7 : =$1F                         set vcAR1,$1F
(1)  620/   111F7 : =$1F                         set vcAR2,$1F
(1)  620/   111F7 : =$1F                         set vcAR3,$1F
(1)  620/   111F7 : =$1F                         set vcAR4,$1F
(1)  621/   111F7 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  621/   111F7 : =>FALSE                      if SourceSMPS2ASM==0
(1)  621/   111F7 :                                     set vcAM1,$00<<5
(1)  621/   111F7 :                                     set vcAM2,$00<<5
(1)  621/   111F7 :                                     set vcAM3,$00<<5
(1)  621/   111F7 :                                     set vcAM4,$00<<5
(1)  621/   111F7 : =>TRUE                       else
(1)  621/   111F7 : =$0                                  set vcAM1,$00<<7
(1)  621/   111F7 : =$0                                  set vcAM2,$00<<7
(1)  621/   111F7 : =$0                                  set vcAM3,$00<<7
(1)  621/   111F7 : =$0                                  set vcAM4,$00<<7
(1)  621/   111F7 : [621]                        endif
(1)  622/   111F7 : (MACRO)              	smpsVcDecayRate1    $05, $03, $03, $00
(1)  622/   111F7 : =$5                          set vcD1R1,$05
(1)  622/   111F7 : =$3                          set vcD1R2,$03
(1)  622/   111F7 : =$3                          set vcD1R3,$03
(1)  622/   111F7 : =$0                          set vcD1R4,$00
(1)  623/   111F7 : (MACRO)              	smpsVcDecayRate2    $01, $02, $01, $00
(1)  623/   111F7 : =$1                          set vcD2R1,$01
(1)  623/   111F7 : =$2                          set vcD2R2,$02
(1)  623/   111F7 : =$1                          set vcD2R3,$01
(1)  623/   111F7 : =$0                          set vcD2R4,$00
(1)  624/   111F7 : (MACRO)              	smpsVcDecayLevel    $01, $01, $01, $00
(1)  624/   111F7 : =$1                          set vcDL1,$01
(1)  624/   111F7 : =$1                          set vcDL2,$01
(1)  624/   111F7 : =$1                          set vcDL3,$01
(1)  624/   111F7 : =$0                          set vcDL4,$00
(1)  625/   111F7 : (MACRO)              	smpsVcReleaseRate   $0C, $0C, $0C, $0F
(1)  625/   111F7 : =$C                          set vcRR1,$0C
(1)  625/   111F7 : =$C                          set vcRR2,$0C
(1)  625/   111F7 : =$C                          set vcRR3,$0C
(1)  625/   111F7 : =$F                          set vcRR4,$0F
(1)  626/   111F7 : (MACRO)              	smpsVcTotalLevel    $80, $80, $83, $22
(1)  626/   111F7 : =$80                         set vcTL1,$80
(1)  626/   111F7 : =$80                         set vcTL2,$80
(1)  626/   111F7 : =$83                         set vcTL3,$83
(1)  626/   111F7 : =$22                         set vcTL4,$22
(1)  626/   111F7 : 2D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  626/   111F8 :                     ;   0     1     2     3     4     5     6     7
(1)  626/   111F8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  626/   111F8 : =>FALSE                      if SourceSMPS2ASM==0
(1)  626/   111F8 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  626/   111F8 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  626/   111F8 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  626/   111F8 :                                     set vcTLMask1,$80
(1)  626/   111F8 : =>TRUE                       else
(1)  626/   111F8 : =$0                                  set vcTLMask4,0
(1)  626/   111F8 : =$0                                  set vcTLMask3,0
(1)  626/   111F8 : =$0                                  set vcTLMask2,0
(1)  626/   111F8 : =$0                                  set vcTLMask1,0
(1)  626/   111F8 : [626]                        endif
(1)  626/   111F8 :                     
(1)  626/   111F8 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  626/   111F8 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  626/   111F8 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  626/   111F8 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  626/   111F8 :                                     set vcTLMask1,$80
(1)  626/   111F8 :                                     set vcTL1,vcTL1&$7F
(1)  626/   111F8 :                                     set vcTL2,vcTL2&$7F
(1)  626/   111F8 :                                     set vcTL3,vcTL3&$7F
(1)  626/   111F8 :                                     set vcTL4,vcTL4&$7F
(1)  626/   111F8 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  626/   111F8 :                                     if MOMPASS>1
(1)  626/   111F8 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  626/   111F8 : [626]                                endif
(1)  626/   111F8 : [626]                        endif
(1)  626/   111F8 :                     
(1)  626/   111F8 : =>FALSE                      if SonicDriverVer==2
(1)  626/   111F8 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  626/   111F8 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  626/   111F8 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  626/   111F8 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  626/   111F8 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  626/   111F8 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  626/   111F8 : =>TRUE                       else
(1)  626/   111F8 : 7765 0515                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  626/   111FC : 1F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  626/   11200 : 0003 0305                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  626/   11204 : 0001 0201                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  626/   11208 : 0F1C 1C1C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  626/   1120C : 2283 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  626/   11210 : [626]                        endif
(1)  627/   11210 :                     
(1)  628/   11210 :                     
   18782/   11210 :                     Music84:	include	"Sound/Music/Mus84 - Evening Star.asm"
(1)    1/   11210 :                     Evening_Star_Header:
(1)    2/   11210 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   11210 :                     
(1)    2/   11210 : =$3                  SourceDriver set 3
(1)    2/   11210 :                     
(1)    2/   11210 : =>TRUE                       if ("1"<>"")
(1)    2/   11210 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   11210 : =>FALSE                      else
(1)    2/   11210 :                                     set SourceSMPS2ASM,0
(1)    2/   11210 : [2]                          endif
(1)    2/   11210 :                     
(1)    2/   11210 : =$11210              songStart set *
(1)    2/   11210 :                     
(1)    2/   11210 : =>TRUE                       if MOMPASS>1
(1)    2/   11210 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   11210 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   11210 : [2]                                  endif
(1)    2/   11210 : [2]                          endif
(1)    2/   11210 :                     
(1)    3/   11210 : (MACRO)              	smpsHeaderVoice     Evening_Star_Voices
(1)    3/   11210 : =>FALSE                      if songStart<>*
(1)    3/   11210 :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   11210 : [3]                          endif
(1)    3/   11210 : =>TRUE                       if SonicDriverVer<>1
(1)    3/   11210 : C796                                dc.w    z80_ptr(Evening_Star_Voices)
(1)    3/   11212 : =>FALSE                      else
(1)    3/   11212 :                                     if MOMPASS>1
(1)    3/   11212 :                                             if Evening_Star_Voices<songStart
(1)    3/   11212 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/   11212 : [3]                                          endif
(1)    3/   11212 : [3]                                  endif
(1)    3/   11212 :                                     dc.w    Evening_Star_Voices-songStart
(1)    3/   11212 : [3]                          endif
(1)    4/   11212 : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/   11212 : 0603                        dc.b    $06,$03
(1)    5/   11214 : (MACRO)              	smpsHeaderTempo     $01, $4A
(1)    5/   11214 : 01                          dc.b    $01
(1)    5/   11215 :  (MACRO-2)                   convertMainTempoMod $4A
(1)    5/   11215 : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/   11215 : 4A                                  dc.b    $4A
(1)    5/   11216 : =>FALSE                      elseif SourceDriver==1
(1)    5/   11216 :                                     if $4A==1
(1)    5/   11216 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/   11216 : [5]                                  endif
(1)    5/   11216 :                                     if SonicDriverVer==2
(1)    5/   11216 :                                             dc.b    s1TempotoS2($4A)
(1)    5/   11216 :                                     else;if SonicDriverVer>=3
(1)    5/   11216 :                                             dc.b    s1TempotoS3($4A)
(1)    5/   11216 : [5]                                  endif
(1)    5/   11216 : =>FALSE                      elseif SourceDriver==2
(1)    5/   11216 :                                     if $4A==0
(1)    5/   11216 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/   11216 : [5]                                  endif
(1)    5/   11216 :                                     if SonicDriverVer==1
(1)    5/   11216 :                                             dc.b    s2TempotoS1($4A)
(1)    5/   11216 :                                     else;if SonicDriverVer>=3
(1)    5/   11216 :                                             dc.b    s2TempotoS3($4A)
(1)    5/   11216 : [5]                                  endif
(1)    5/   11216 : =>FALSE                      else;if SourceDriver>=3
(1)    5/   11216 :                                     if $4A==0
(1)    5/   11216 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/   11216 : [5]                                  endif
(1)    5/   11216 :                                     if SonicDriverVer==1
(1)    5/   11216 :                                             dc.b    s3TempotoS1($4A)
(1)    5/   11216 :                                     else;if SonicDriverVer==2
(1)    5/   11216 :                                             dc.b    s3TempotoS2($4A)
(1)    5/   11216 : [5]                                  endif
(1)    5/   11216 : [5]                          endif
(1)    6/   11216 :                     
(1)    7/   11216 : (MACRO)              	smpsHeaderDAC       Evening_Star_DAC
(1)    7/   11216 :  (MACRO-2)                   CheckedChannelPointer Evening_Star_DAC
(1)    7/   11216 : =>TRUE                       if SonicDriverVer<>1
(1)    7/   11216 : 7A96                                dc.w    z80_ptr(Evening_Star_DAC)
(1)    7/   11218 : =>FALSE                      else
(1)    7/   11218 :                                     if MOMPASS>1
(1)    7/   11218 :                                             if Evening_Star_DAC<songStart
(1)    7/   11218 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/   11218 : [7]                                          endif
(1)    7/   11218 : [7]                                  endif
(1)    7/   11218 :                                     dc.w    Evening_Star_DAC-songStart
(1)    7/   11218 : [7]                          endif
(1)    7/   11218 : =>FALSE                      if (""<>"")
(1)    7/   11218 :                                     dc.b    
(1)    7/   11218 :                                     if (""<>"")
(1)    7/   11218 :                                             dc.b    
(1)    7/   11218 :                                     else
(1)    7/   11218 :                                             dc.b    $00
(1)    7/   11218 : [7]                                  endif
(1)    7/   11218 : =>TRUE                       else
(1)    7/   11218 : 0000                                dc.w    $00
(1)    7/   1121A : [7]                          endif
(1)    8/   1121A : (MACRO)              	smpsHeaderFM        Evening_Star_FM1,	$00, $10
(1)    8/   1121A :  (MACRO-2)                   CheckedChannelPointer Evening_Star_FM1
(1)    8/   1121A : =>TRUE                       if SonicDriverVer<>1
(1)    8/   1121A : 4092                                dc.w    z80_ptr(Evening_Star_FM1)
(1)    8/   1121C : =>FALSE                      else
(1)    8/   1121C :                                     if MOMPASS>1
(1)    8/   1121C :                                             if Evening_Star_FM1<songStart
(1)    8/   1121C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   1121C : [8]                                          endif
(1)    8/   1121C : [8]                                  endif
(1)    8/   1121C :                                     dc.w    Evening_Star_FM1-songStart
(1)    8/   1121C : [8]                          endif
(1)    8/   1121C : 0010                        dc.b    $00,$10
(1)    9/   1121E : (MACRO)              	smpsHeaderFM        Evening_Star_FM2,	$00, $12
(1)    9/   1121E :  (MACRO-2)                   CheckedChannelPointer Evening_Star_FM2
(1)    9/   1121E : =>TRUE                       if SonicDriverVer<>1
(1)    9/   1121E : CC92                                dc.w    z80_ptr(Evening_Star_FM2)
(1)    9/   11220 : =>FALSE                      else
(1)    9/   11220 :                                     if MOMPASS>1
(1)    9/   11220 :                                             if Evening_Star_FM2<songStart
(1)    9/   11220 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   11220 : [9]                                          endif
(1)    9/   11220 : [9]                                  endif
(1)    9/   11220 :                                     dc.w    Evening_Star_FM2-songStart
(1)    9/   11220 : [9]                          endif
(1)    9/   11220 : 0012                        dc.b    $00,$12
(1)   10/   11222 : (MACRO)              	smpsHeaderFM        Evening_Star_FM3,	$00, $12
(1)   10/   11222 :  (MACRO-2)                   CheckedChannelPointer Evening_Star_FM3
(1)   10/   11222 : =>TRUE                       if SonicDriverVer<>1
(1)   10/   11222 : 6793                                dc.w    z80_ptr(Evening_Star_FM3)
(1)   10/   11224 : =>FALSE                      else
(1)   10/   11224 :                                     if MOMPASS>1
(1)   10/   11224 :                                             if Evening_Star_FM3<songStart
(1)   10/   11224 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/   11224 : [10]                                         endif
(1)   10/   11224 : [10]                                 endif
(1)   10/   11224 :                                     dc.w    Evening_Star_FM3-songStart
(1)   10/   11224 : [10]                         endif
(1)   10/   11224 : 0012                        dc.b    $00,$12
(1)   11/   11226 : (MACRO)              	smpsHeaderFM        Evening_Star_FM4,	$00, $12
(1)   11/   11226 :  (MACRO-2)                   CheckedChannelPointer Evening_Star_FM4
(1)   11/   11226 : =>TRUE                       if SonicDriverVer<>1
(1)   11/   11226 : 3E94                                dc.w    z80_ptr(Evening_Star_FM4)
(1)   11/   11228 : =>FALSE                      else
(1)   11/   11228 :                                     if MOMPASS>1
(1)   11/   11228 :                                             if Evening_Star_FM4<songStart
(1)   11/   11228 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/   11228 : [11]                                         endif
(1)   11/   11228 : [11]                                 endif
(1)   11/   11228 :                                     dc.w    Evening_Star_FM4-songStart
(1)   11/   11228 : [11]                         endif
(1)   11/   11228 : 0012                        dc.b    $00,$12
(1)   12/   1122A : (MACRO)              	smpsHeaderFM        Evening_Star_FM5,	$00, $1C
(1)   12/   1122A :  (MACRO-2)                   CheckedChannelPointer Evening_Star_FM5
(1)   12/   1122A : =>TRUE                       if SonicDriverVer<>1
(1)   12/   1122A : 3195                                dc.w    z80_ptr(Evening_Star_FM5)
(1)   12/   1122C : =>FALSE                      else
(1)   12/   1122C :                                     if MOMPASS>1
(1)   12/   1122C :                                             if Evening_Star_FM5<songStart
(1)   12/   1122C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   1122C : [12]                                         endif
(1)   12/   1122C : [12]                                 endif
(1)   12/   1122C :                                     dc.w    Evening_Star_FM5-songStart
(1)   12/   1122C : [12]                         endif
(1)   12/   1122C : 001C                        dc.b    $00,$1C
(1)   13/   1122E : (MACRO)              	smpsHeaderPSG       Evening_Star_PSG1,	$F4, $03, $00, $00
(1)   13/   1122E :  (MACRO-2)                   CheckedChannelPointer Evening_Star_PSG1
(1)   13/   1122E : =>TRUE                       if SonicDriverVer<>1
(1)   13/   1122E : 4F95                                dc.w    z80_ptr(Evening_Star_PSG1)
(1)   13/   11230 : =>FALSE                      else
(1)   13/   11230 :                                     if MOMPASS>1
(1)   13/   11230 :                                             if Evening_Star_PSG1<songStart
(1)   13/   11230 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   11230 : [13]                                         endif
(1)   13/   11230 : [13]                                 endif
(1)   13/   11230 :                                     dc.w    Evening_Star_PSG1-songStart
(1)   13/   11230 : [13]                         endif
(1)   13/   11230 :  (MACRO-2)                   PSGPitchConvert $F4
(1)   13/   11230 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/   11230 :                                     dc.b    ($F4+psgdelta)&$FF
(1)   13/   11230 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/   11230 :                                     dc.b    ($F4-psgdelta)&$FF
(1)   13/   11230 : =>TRUE                       else
(1)   13/   11230 : F4                                  dc.b    $F4
(1)   13/   11231 : [13]                         endif
(1)   13/   11231 : 03                          dc.b    $03
(1)   13/   11232 :                             ; Frequency envelope
(1)   13/   11232 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/   11232 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/   11232 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/   11232 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/   11232 :                                     dc.b    0
(1)   13/   11232 : =>TRUE                       else
(1)   13/   11232 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/   11232 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/   11232 : [13]                                 endif
(1)   13/   11232 : 00                                  dc.b    $00
(1)   13/   11233 : [13]                         endif
(1)   13/   11233 :                             ; Volume envelope
(1)   13/   11233 : 00                          dc.b    $00
(1)   14/   11234 : (MACRO)              	smpsHeaderPSG       Evening_Star_PSG2,	$F4, $04, $00, $00
(1)   14/   11234 :  (MACRO-2)                   CheckedChannelPointer Evening_Star_PSG2
(1)   14/   11234 : =>TRUE                       if SonicDriverVer<>1
(1)   14/   11234 : A195                                dc.w    z80_ptr(Evening_Star_PSG2)
(1)   14/   11236 : =>FALSE                      else
(1)   14/   11236 :                                     if MOMPASS>1
(1)   14/   11236 :                                             if Evening_Star_PSG2<songStart
(1)   14/   11236 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   11236 : [14]                                         endif
(1)   14/   11236 : [14]                                 endif
(1)   14/   11236 :                                     dc.w    Evening_Star_PSG2-songStart
(1)   14/   11236 : [14]                         endif
(1)   14/   11236 :  (MACRO-2)                   PSGPitchConvert $F4
(1)   14/   11236 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   11236 :                                     dc.b    ($F4+psgdelta)&$FF
(1)   14/   11236 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   11236 :                                     dc.b    ($F4-psgdelta)&$FF
(1)   14/   11236 : =>TRUE                       else
(1)   14/   11236 : F4                                  dc.b    $F4
(1)   14/   11237 : [14]                         endif
(1)   14/   11237 : 04                          dc.b    $04
(1)   14/   11238 :                             ; Frequency envelope
(1)   14/   11238 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/   11238 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/   11238 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/   11238 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/   11238 :                                     dc.b    0
(1)   14/   11238 : =>TRUE                       else
(1)   14/   11238 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/   11238 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/   11238 : [14]                                 endif
(1)   14/   11238 : 00                                  dc.b    $00
(1)   14/   11239 : [14]                         endif
(1)   14/   11239 :                             ; Volume envelope
(1)   14/   11239 : 00                          dc.b    $00
(1)   15/   1123A : (MACRO)              	smpsHeaderPSG       Evening_Star_PSG3,	$23, $01, $00, $00
(1)   15/   1123A :  (MACRO-2)                   CheckedChannelPointer Evening_Star_PSG3
(1)   15/   1123A : =>TRUE                       if SonicDriverVer<>1
(1)   15/   1123A : 1496                                dc.w    z80_ptr(Evening_Star_PSG3)
(1)   15/   1123C : =>FALSE                      else
(1)   15/   1123C :                                     if MOMPASS>1
(1)   15/   1123C :                                             if Evening_Star_PSG3<songStart
(1)   15/   1123C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/   1123C : [15]                                         endif
(1)   15/   1123C : [15]                                 endif
(1)   15/   1123C :                                     dc.w    Evening_Star_PSG3-songStart
(1)   15/   1123C : [15]                         endif
(1)   15/   1123C :  (MACRO-2)                   PSGPitchConvert $23
(1)   15/   1123C : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/   1123C :                                     dc.b    ($23+psgdelta)&$FF
(1)   15/   1123C : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/   1123C :                                     dc.b    ($23-psgdelta)&$FF
(1)   15/   1123C : =>TRUE                       else
(1)   15/   1123C : 23                                  dc.b    $23
(1)   15/   1123D : [15]                         endif
(1)   15/   1123D : 01                          dc.b    $01
(1)   15/   1123E :                             ; Frequency envelope
(1)   15/   1123E : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/   1123E :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/   1123E :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/   1123E :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/   1123E :                                     dc.b    0
(1)   15/   1123E : =>TRUE                       else
(1)   15/   1123E : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/   1123E :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/   1123E : [15]                                 endif
(1)   15/   1123E : 00                                  dc.b    $00
(1)   15/   1123F : [15]                         endif
(1)   15/   1123F :                             ; Volume envelope
(1)   15/   1123F : 00                          dc.b    $00
(1)   16/   11240 :                     
(1)   17/   11240 :                     ; FM1 Data
(1)   18/   11240 :                     Evening_Star_FM1:
(1)   19/   11240 : (MACRO)              	smpsSetvoice        $00
(1)   19/   11240 :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   11240 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   11240 :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   11240 : =>TRUE                       else
(1)   19/   11240 : EF00                                dc.b    $EF,$00
(1)   19/   11242 : [19]                         endif
(1)   20/   11242 : 9C60 9B60 9460      	dc.b	nEb2, $60, nD2, $60, nG1, $60, smpsNoAttack, $30, nG1, $08, nG2, $0C
            11248 : E730 9408 A00C    
(1)   21/   1124E : 9404 9708 9604      	dc.b	nG1, $04, nBb1, $08, nA1, $04, nG1, $08, nF1, $04
            11254 : 9408 9204          
(1)   22/   11258 :                     
(1)   23/   11258 :                     Evening_Star_Jump01:
(1)   24/   11258 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   24/   11258 : F8                          dc.b    $F8
(1)   24/   11259 : =>TRUE                       if SonicDriverVer<>1
(1)   24/   11259 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   24/   1125B : =>FALSE                      else
(1)   24/   1125B :                                     dc.w    Evening_Star_Call0A-*-1
(1)   24/   1125B : [24]                         endif
(1)   25/   1125B : (MACRO)              	smpsChangeTransposition $FF
(1)   25/   1125B : =>TRUE                       if SonicDriverVer>=3
(1)   25/   1125B : FBFF                                dc.b    $FB,$FF
(1)   25/   1125D : =>FALSE                      else
(1)   25/   1125D :                                     dc.b    $E9,$FF
(1)   25/   1125D : [25]                         endif
(1)   26/   1125D : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   26/   1125D : F8                          dc.b    $F8
(1)   26/   1125E : =>TRUE                       if SonicDriverVer<>1
(1)   26/   1125E : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   26/   11260 : =>FALSE                      else
(1)   26/   11260 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   26/   11260 : [26]                         endif
(1)   27/   11260 : (MACRO)              	smpsChangeTransposition $F9
(1)   27/   11260 : =>TRUE                       if SonicDriverVer>=3
(1)   27/   11260 : FBF9                                dc.b    $FB,$F9
(1)   27/   11262 : =>FALSE                      else
(1)   27/   11262 :                                     dc.b    $E9,$F9
(1)   27/   11262 : [27]                         endif
(1)   28/   11262 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   28/   11262 : F8                          dc.b    $F8
(1)   28/   11263 : =>TRUE                       if SonicDriverVer<>1
(1)   28/   11263 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   28/   11265 : =>FALSE                      else
(1)   28/   11265 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   28/   11265 : [28]                         endif
(1)   29/   11265 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   29/   11265 : F8                          dc.b    $F8
(1)   29/   11266 : =>TRUE                       if SonicDriverVer<>1
(1)   29/   11266 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   29/   11268 : =>FALSE                      else
(1)   29/   11268 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   29/   11268 : [29]                         endif
(1)   30/   11268 : (MACRO)              	smpsChangeTransposition $08
(1)   30/   11268 : =>TRUE                       if SonicDriverVer>=3
(1)   30/   11268 : FB08                                dc.b    $FB,$08
(1)   30/   1126A : =>FALSE                      else
(1)   30/   1126A :                                     dc.b    $E9,$08
(1)   30/   1126A : [30]                         endif
(1)   31/   1126A : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   31/   1126A : F8                          dc.b    $F8
(1)   31/   1126B : =>TRUE                       if SonicDriverVer<>1
(1)   31/   1126B : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   31/   1126D : =>FALSE                      else
(1)   31/   1126D :                                     dc.w    Evening_Star_Call0A-*-1
(1)   31/   1126D : [31]                         endif
(1)   32/   1126D : (MACRO)              	smpsChangeTransposition $FF
(1)   32/   1126D : =>TRUE                       if SonicDriverVer>=3
(1)   32/   1126D : FBFF                                dc.b    $FB,$FF
(1)   32/   1126F : =>FALSE                      else
(1)   32/   1126F :                                     dc.b    $E9,$FF
(1)   32/   1126F : [32]                         endif
(1)   33/   1126F : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   33/   1126F : F8                          dc.b    $F8
(1)   33/   11270 : =>TRUE                       if SonicDriverVer<>1
(1)   33/   11270 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   33/   11272 : =>FALSE                      else
(1)   33/   11272 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   33/   11272 : [33]                         endif
(1)   34/   11272 : (MACRO)              	smpsChangeTransposition $F9
(1)   34/   11272 : =>TRUE                       if SonicDriverVer>=3
(1)   34/   11272 : FBF9                                dc.b    $FB,$F9
(1)   34/   11274 : =>FALSE                      else
(1)   34/   11274 :                                     dc.b    $E9,$F9
(1)   34/   11274 : [34]                         endif
(1)   35/   11274 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   35/   11274 : F8                          dc.b    $F8
(1)   35/   11275 : =>TRUE                       if SonicDriverVer<>1
(1)   35/   11275 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   35/   11277 : =>FALSE                      else
(1)   35/   11277 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   35/   11277 : [35]                         endif
(1)   36/   11277 : (MACRO)              	smpsChangeTransposition $08
(1)   36/   11277 : =>TRUE                       if SonicDriverVer>=3
(1)   36/   11277 : FB08                                dc.b    $FB,$08
(1)   36/   11279 : =>FALSE                      else
(1)   36/   11279 :                                     dc.b    $E9,$08
(1)   36/   11279 : [36]                         endif
(1)   37/   11279 : (MACRO)              	smpsCall            Evening_Star_Call0B
(1)   37/   11279 : F8                          dc.b    $F8
(1)   37/   1127A : =>TRUE                       if SonicDriverVer<>1
(1)   37/   1127A : B792                                dc.w    z80_ptr(Evening_Star_Call0B)
(1)   37/   1127C : =>FALSE                      else
(1)   37/   1127C :                                     dc.w    Evening_Star_Call0B-*-1
(1)   37/   1127C : [37]                         endif
(1)   38/   1127C : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   38/   1127C : F8                          dc.b    $F8
(1)   38/   1127D : =>TRUE                       if SonicDriverVer<>1
(1)   38/   1127D : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   38/   1127F : =>FALSE                      else
(1)   38/   1127F :                                     dc.w    Evening_Star_Call0A-*-1
(1)   38/   1127F : [38]                         endif
(1)   39/   1127F : (MACRO)              	smpsChangeTransposition $FF
(1)   39/   1127F : =>TRUE                       if SonicDriverVer>=3
(1)   39/   1127F : FBFF                                dc.b    $FB,$FF
(1)   39/   11281 : =>FALSE                      else
(1)   39/   11281 :                                     dc.b    $E9,$FF
(1)   39/   11281 : [39]                         endif
(1)   40/   11281 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   40/   11281 : F8                          dc.b    $F8
(1)   40/   11282 : =>TRUE                       if SonicDriverVer<>1
(1)   40/   11282 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   40/   11284 : =>FALSE                      else
(1)   40/   11284 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   40/   11284 : [40]                         endif
(1)   41/   11284 : (MACRO)              	smpsChangeTransposition $F9
(1)   41/   11284 : =>TRUE                       if SonicDriverVer>=3
(1)   41/   11284 : FBF9                                dc.b    $FB,$F9
(1)   41/   11286 : =>FALSE                      else
(1)   41/   11286 :                                     dc.b    $E9,$F9
(1)   41/   11286 : [41]                         endif
(1)   42/   11286 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   42/   11286 : F8                          dc.b    $F8
(1)   42/   11287 : =>TRUE                       if SonicDriverVer<>1
(1)   42/   11287 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   42/   11289 : =>FALSE                      else
(1)   42/   11289 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   42/   11289 : [42]                         endif
(1)   43/   11289 : (MACRO)              	smpsChangeTransposition $08
(1)   43/   11289 : =>TRUE                       if SonicDriverVer>=3
(1)   43/   11289 : FB08                                dc.b    $FB,$08
(1)   43/   1128B : =>FALSE                      else
(1)   43/   1128B :                                     dc.b    $E9,$08
(1)   43/   1128B : [43]                         endif
(1)   44/   1128B : 940C 9480 38A0      	dc.b	nG1, $0C, nG1, nRst, $38, nG2, $04, nG1, $08, nF1, $04
            11291 : 0494 0892 04       
(1)   45/   11296 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   45/   11296 : F8                          dc.b    $F8
(1)   45/   11297 : =>TRUE                       if SonicDriverVer<>1
(1)   45/   11297 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   45/   11299 : =>FALSE                      else
(1)   45/   11299 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   45/   11299 : [45]                         endif
(1)   46/   11299 : (MACRO)              	smpsChangeTransposition $FF
(1)   46/   11299 : =>TRUE                       if SonicDriverVer>=3
(1)   46/   11299 : FBFF                                dc.b    $FB,$FF
(1)   46/   1129B : =>FALSE                      else
(1)   46/   1129B :                                     dc.b    $E9,$FF
(1)   46/   1129B : [46]                         endif
(1)   47/   1129B : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   47/   1129B : F8                          dc.b    $F8
(1)   47/   1129C : =>TRUE                       if SonicDriverVer<>1
(1)   47/   1129C : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   47/   1129E : =>FALSE                      else
(1)   47/   1129E :                                     dc.w    Evening_Star_Call0A-*-1
(1)   47/   1129E : [47]                         endif
(1)   48/   1129E : (MACRO)              	smpsChangeTransposition $F9
(1)   48/   1129E : =>TRUE                       if SonicDriverVer>=3
(1)   48/   1129E : FBF9                                dc.b    $FB,$F9
(1)   48/   112A0 : =>FALSE                      else
(1)   48/   112A0 :                                     dc.b    $E9,$F9
(1)   48/   112A0 : [48]                         endif
(1)   49/   112A0 : (MACRO)              	smpsCall            Evening_Star_Call0A
(1)   49/   112A0 : F8                          dc.b    $F8
(1)   49/   112A1 : =>TRUE                       if SonicDriverVer<>1
(1)   49/   112A1 : AB92                                dc.w    z80_ptr(Evening_Star_Call0A)
(1)   49/   112A3 : =>FALSE                      else
(1)   49/   112A3 :                                     dc.w    Evening_Star_Call0A-*-1
(1)   49/   112A3 : [49]                         endif
(1)   50/   112A3 : (MACRO)              	smpsChangeTransposition $08
(1)   50/   112A3 : =>TRUE                       if SonicDriverVer>=3
(1)   50/   112A3 : FB08                                dc.b    $FB,$08
(1)   50/   112A5 : =>FALSE                      else
(1)   50/   112A5 :                                     dc.b    $E9,$08
(1)   50/   112A5 : [50]                         endif
(1)   51/   112A5 : (MACRO)              	smpsCall            Evening_Star_Call0B
(1)   51/   112A5 : F8                          dc.b    $F8
(1)   51/   112A6 : =>TRUE                       if SonicDriverVer<>1
(1)   51/   112A6 : B792                                dc.w    z80_ptr(Evening_Star_Call0B)
(1)   51/   112A8 : =>FALSE                      else
(1)   51/   112A8 :                                     dc.w    Evening_Star_Call0B-*-1
(1)   51/   112A8 : [51]                         endif
(1)   52/   112A8 : (MACRO)              	smpsJump            Evening_Star_Jump01
(1)   52/   112A8 : F6                          dc.b    $F6
(1)   52/   112A9 : =>TRUE                       if SonicDriverVer<>1
(1)   52/   112A9 : 5892                                dc.w    z80_ptr(Evening_Star_Jump01)
(1)   52/   112AB : =>FALSE                      else
(1)   52/   112AB :                                     dc.w    Evening_Star_Jump01-*-1
(1)   52/   112AB : [52]                         endif
(1)   53/   112AB :                     
(1)   54/   112AB :                     Evening_Star_Call0A:
(1)   55/   112AB : 9C0C 9C80 249C      	dc.b	nEb2, $0C, nEb2, nRst, $24, nEb2, $0C, nRst, $08, nEb2, $10
            112B1 : 0C80 089C 10       
(1)   56/   112B6 : (MACRO)              	smpsReturn
(1)   56/   112B6 : =>TRUE                       if SonicDriverVer>=3
(1)   56/   112B6 : F9                                  dc.b    $F9
(1)   56/   112B7 : =>FALSE                      else
(1)   56/   112B7 :                                     dc.b    $E3
(1)   56/   112B7 : [56]                         endif
(1)   57/   112B7 :                     
(1)   58/   112B7 :                     Evening_Star_Call0B:
(1)   59/   112B7 : 9408 A00C 0496      	dc.b	nG1, $08, nG2, $0C, $04, nA1, $08, nA2, $0C, $04, nBb1, $08
            112BD : 08A2 0C04 9708    
(1)   60/   112C3 : A30C 0499 08A5      	dc.b	nBb2, $0C, $04, nC2, $08, nC3, $0C, $04
            112C9 : 0C04             
(1)   61/   112CB : (MACRO)              	smpsReturn
(1)   61/   112CB : =>TRUE                       if SonicDriverVer>=3
(1)   61/   112CB : F9                                  dc.b    $F9
(1)   61/   112CC : =>FALSE                      else
(1)   61/   112CC :                                     dc.b    $E3
(1)   61/   112CC : [61]                         endif
(1)   62/   112CC :                     
(1)   63/   112CC :                     ; FM2 Data
(1)   64/   112CC :                     Evening_Star_FM2:
(1)   65/   112CC : (MACRO)              	smpsSetvoice        $01
(1)   65/   112CC :  (MACRO-2)                   smpsFMvoice $01
(1)   65/   112CC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   65/   112CC :                                     dc.b    $EF,$01|$80,+$81
(1)   65/   112CC : =>TRUE                       else
(1)   65/   112CC : EF01                                dc.b    $EF,$01
(1)   65/   112CE : [65]                         endif
(1)   66/   112CE : (MACRO)              	smpsChangeTransposition $F9
(1)   66/   112CE : =>TRUE                       if SonicDriverVer>=3
(1)   66/   112CE : FBF9                                dc.b    $FB,$F9
(1)   66/   112D0 : =>FALSE                      else
(1)   66/   112D0 :                                     dc.b    $E9,$F9
(1)   66/   112D0 : [66]                         endif
(1)   67/   112D0 : (MACRO)              	smpsCall            Evening_Star_Call06
(1)   67/   112D0 : F8                          dc.b    $F8
(1)   67/   112D1 : =>TRUE                       if SonicDriverVer<>1
(1)   67/   112D1 : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)   67/   112D3 : =>FALSE                      else
(1)   67/   112D3 :                                     dc.w    Evening_Star_Call06-*-1
(1)   67/   112D3 : [67]                         endif
(1)   68/   112D3 : (MACRO)              	smpsChangeTransposition $04
(1)   68/   112D3 : =>TRUE                       if SonicDriverVer>=3
(1)   68/   112D3 : FB04                                dc.b    $FB,$04
(1)   68/   112D5 : =>FALSE                      else
(1)   68/   112D5 :                                     dc.b    $E9,$04
(1)   68/   112D5 : [68]                         endif
(1)   69/   112D5 : (MACRO)              	smpsCall            Evening_Star_Call07
(1)   69/   112D5 : F8                          dc.b    $F8
(1)   69/   112D6 : =>TRUE                       if SonicDriverVer<>1
(1)   69/   112D6 : E993                                dc.w    z80_ptr(Evening_Star_Call07)
(1)   69/   112D8 : =>FALSE                      else
(1)   69/   112D8 :                                     dc.w    Evening_Star_Call07-*-1
(1)   69/   112D8 : [69]                         endif
(1)   70/   112D8 : (MACRO)              	smpsChangeTransposition $FF
(1)   70/   112D8 : =>TRUE                       if SonicDriverVer>=3
(1)   70/   112D8 : FBFF                                dc.b    $FB,$FF
(1)   70/   112DA : =>FALSE                      else
(1)   70/   112DA :                                     dc.b    $E9,$FF
(1)   70/   112DA : [70]                         endif
(1)   71/   112DA : (MACRO)              	smpsCall            Evening_Star_Call06
(1)   71/   112DA : F8                          dc.b    $F8
(1)   71/   112DB : =>TRUE                       if SonicDriverVer<>1
(1)   71/   112DB : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)   71/   112DD : =>FALSE                      else
(1)   71/   112DD :                                     dc.w    Evening_Star_Call06-*-1
(1)   71/   112DD : [71]                         endif
(1)   72/   112DD : (MACRO)              	smpsCall            Evening_Star_Call08
(1)   72/   112DD : F8                          dc.b    $F8
(1)   72/   112DE : =>TRUE                       if SonicDriverVer<>1
(1)   72/   112DE : 2D94                                dc.w    z80_ptr(Evening_Star_Call08)
(1)   72/   112E0 : =>FALSE                      else
(1)   72/   112E0 :                                     dc.w    Evening_Star_Call08-*-1
(1)   72/   112E0 : [72]                         endif
(1)   73/   112E0 : (MACRO)              	smpsChangeTransposition $04
(1)   73/   112E0 : =>TRUE                       if SonicDriverVer>=3
(1)   73/   112E0 : FB04                                dc.b    $FB,$04
(1)   73/   112E2 : =>FALSE                      else
(1)   73/   112E2 :                                     dc.b    $E9,$04
(1)   73/   112E2 : [73]                         endif
(1)   74/   112E2 : (MACRO)              	smpsSetvoice        $02
(1)   74/   112E2 :  (MACRO-2)                   smpsFMvoice $02
(1)   74/   112E2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   74/   112E2 :                                     dc.b    $EF,$02|$80,+$81
(1)   74/   112E2 : =>TRUE                       else
(1)   74/   112E2 : EF02                                dc.b    $EF,$02
(1)   74/   112E4 : [74]                         endif
(1)   75/   112E4 : (MACRO)              	smpsFMAlterVol      $02
(1)   75/   112E4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   75/   112E4 :                                     dc.b    $E5,$02,
(1)   75/   112E4 : =>TRUE                       else
(1)   75/   112E4 : E602                                dc.b    $E6,$02
(1)   75/   112E6 : [75]                         endif
(1)   76/   112E6 :                     
(1)   77/   112E6 :                     Evening_Star_Loop05:
(1)   78/   112E6 : (MACRO)              	smpsCall            Evening_Star_Call01
(1)   78/   112E6 : F8                          dc.b    $F8
(1)   78/   112E7 : =>TRUE                       if SonicDriverVer<>1
(1)   78/   112E7 : F392                                dc.w    z80_ptr(Evening_Star_Call01)
(1)   78/   112E9 : =>FALSE                      else
(1)   78/   112E9 :                                     dc.w    Evening_Star_Call01-*-1
(1)   78/   112E9 : [78]                         endif
(1)   79/   112E9 : 8060                	dc.b	nRst, $60
(1)   80/   112EB : (MACRO)              	smpsLoop            $00, $02, Evening_Star_Loop05
(1)   80/   112EB : F7                          dc.b    $F7
(1)   80/   112EC : 0002                        dc.b    $00,$02
(1)   80/   112EE : =>TRUE                       if SonicDriverVer<>1
(1)   80/   112EE : E692                                dc.w    z80_ptr(Evening_Star_Loop05)
(1)   80/   112F0 : =>FALSE                      else
(1)   80/   112F0 :                                     dc.w    Evening_Star_Loop05-*-1
(1)   80/   112F0 : [80]                         endif
(1)   81/   112F0 : (MACRO)              	smpsJump            Evening_Star_Loop05
(1)   81/   112F0 : F6                          dc.b    $F6
(1)   81/   112F1 : =>TRUE                       if SonicDriverVer<>1
(1)   81/   112F1 : E692                                dc.w    z80_ptr(Evening_Star_Loop05)
(1)   81/   112F3 : =>FALSE                      else
(1)   81/   112F3 :                                     dc.w    Evening_Star_Loop05-*-1
(1)   81/   112F3 : [81]                         endif
(1)   82/   112F3 :                     
(1)   83/   112F3 :                     Evening_Star_Call01:
(1)   84/   112F3 : B60C 80B8 80BA      	dc.b	nF4, $0C, nRst, nG4, nRst, nA4, $03, smpsNoAttack, nBb4, $11, nG4, $04
            112F9 : 03E7 BB11 B804    
(1)   85/   112FF : 800C BDE7 0880      	dc.b	nRst, $0C, nC5, smpsNoAttack, $08, nRst, $04, nC5, $08, nRst, $04, nC5
            11305 : 04BD 0880 04BD    
(1)   86/   1130B : 0880 04BF 0880      	dc.b	$08, nRst, $04, nD5, $08, nRst, $04, nBb4, $03, smpsNoAttack, nC5, $05
            11311 : 04BB 03E7 BD05    
(1)   87/   11317 : BB04 8008 B81C      	dc.b	nBb4, $04, nRst, $08, nG4, $1C, nF4, $0C, nRst, nG4, nRst, nBb4
            1131D : B60C 80B8 80BB    
(1)   88/   11323 : 14B8 0480 0CC2      	dc.b	$14, nG4, $04, nRst, $0C, nF5, smpsNoAttack, $08, nRst, $04, nG5, $08
            11329 : E708 8004 C408    
(1)   89/   1132F : 8004 C208 C104      	dc.b	nRst, $04, nF5, $08, nE5, $04, nRst, $08, nD5, $34, nRst, $0C
            11335 : 8008 BF34 800C    
(1)   90/   1133B : BB14 8004 B808      	dc.b	nBb4, $14, nRst, $04, nG4, $08, nRst, $04, nBb4, $14, nC5, $04
            11341 : 8004 BB14 BD04    
(1)   91/   11347 : 800C C2E7 0CC0      	dc.b	nRst, $0C, nF5, smpsNoAttack, $0C, nEb5, nD5, $08, nEb5, $04, nRst, $08
            1134D : BF08 C004 8008    
(1)   92/   11353 : BD03 E7BF 0980      	dc.b	nC5, $03, smpsNoAttack, nD5, $09, nRst, $04, nC5, $0C, nBb4, $08, nC5
            11359 : 04BD 0CBB 08BD    
(1)   93/   1135F : 0CB8 04E7 14BF 4C   	dc.b	$0C, nG4, $04, smpsNoAttack, $14, nD5, $4C
(1)   94/   11366 : (MACRO)              	smpsReturn
(1)   94/   11366 : =>TRUE                       if SonicDriverVer>=3
(1)   94/   11366 : F9                                  dc.b    $F9
(1)   94/   11367 : =>FALSE                      else
(1)   94/   11367 :                                     dc.b    $E3
(1)   94/   11367 : [94]                         endif
(1)   95/   11367 :                     
(1)   96/   11367 :                     ; FM3 Data
(1)   97/   11367 :                     Evening_Star_FM3:
(1)   98/   11367 : (MACRO)              	smpsSetvoice        $01
(1)   98/   11367 :  (MACRO-2)                   smpsFMvoice $01
(1)   98/   11367 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   98/   11367 :                                     dc.b    $EF,$01|$80,+$81
(1)   98/   11367 : =>TRUE                       else
(1)   98/   11367 : EF01                                dc.b    $EF,$01
(1)   98/   11369 : [98]                         endif
(1)   99/   11369 : (MACRO)              	smpsCall            Evening_Star_Call06
(1)   99/   11369 : F8                          dc.b    $F8
(1)   99/   1136A : =>TRUE                       if SonicDriverVer<>1
(1)   99/   1136A : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)   99/   1136C : =>FALSE                      else
(1)   99/   1136C :                                     dc.w    Evening_Star_Call06-*-1
(1)   99/   1136C : [99]                         endif
(1)  100/   1136C : (MACRO)              	smpsCall            Evening_Star_Call07
(1)  100/   1136C : F8                          dc.b    $F8
(1)  100/   1136D : =>TRUE                       if SonicDriverVer<>1
(1)  100/   1136D : E993                                dc.w    z80_ptr(Evening_Star_Call07)
(1)  100/   1136F : =>FALSE                      else
(1)  100/   1136F :                                     dc.w    Evening_Star_Call07-*-1
(1)  100/   1136F : [100]                        endif
(1)  101/   1136F : (MACRO)              	smpsCall            Evening_Star_Call06
(1)  101/   1136F : F8                          dc.b    $F8
(1)  101/   11370 : =>TRUE                       if SonicDriverVer<>1
(1)  101/   11370 : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)  101/   11372 : =>FALSE                      else
(1)  101/   11372 :                                     dc.w    Evening_Star_Call06-*-1
(1)  101/   11372 : [101]                        endif
(1)  102/   11372 : (MACRO)              	smpsCall            Evening_Star_Call08
(1)  102/   11372 : F8                          dc.b    $F8
(1)  102/   11373 : =>TRUE                       if SonicDriverVer<>1
(1)  102/   11373 : 2D94                                dc.w    z80_ptr(Evening_Star_Call08)
(1)  102/   11375 : =>FALSE                      else
(1)  102/   11375 :                                     dc.w    Evening_Star_Call08-*-1
(1)  102/   11375 : [102]                        endif
(1)  103/   11375 : (MACRO)              	smpsFMAlterVol      $FB
(1)  103/   11375 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  103/   11375 :                                     dc.b    $E5,$FB,
(1)  103/   11375 : =>TRUE                       else
(1)  103/   11375 : E6FB                                dc.b    $E6,$FB
(1)  103/   11377 : [103]                        endif
(1)  104/   11377 :                     
(1)  105/   11377 :                     Evening_Star_Loop04:
(1)  106/   11377 : (MACRO)              	smpsCall            Evening_Star_Call06
(1)  106/   11377 : F8                          dc.b    $F8
(1)  106/   11378 : =>TRUE                       if SonicDriverVer<>1
(1)  106/   11378 : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)  106/   1137A : =>FALSE                      else
(1)  106/   1137A :                                     dc.w    Evening_Star_Call06-*-1
(1)  106/   1137A : [106]                        endif
(1)  107/   1137A : (MACRO)              	smpsCall            Evening_Star_Call07
(1)  107/   1137A : F8                          dc.b    $F8
(1)  107/   1137B : =>TRUE                       if SonicDriverVer<>1
(1)  107/   1137B : E993                                dc.w    z80_ptr(Evening_Star_Call07)
(1)  107/   1137D : =>FALSE                      else
(1)  107/   1137D :                                     dc.w    Evening_Star_Call07-*-1
(1)  107/   1137D : [107]                        endif
(1)  108/   1137D : (MACRO)              	smpsCall            Evening_Star_Call06
(1)  108/   1137D : F8                          dc.b    $F8
(1)  108/   1137E : =>TRUE                       if SonicDriverVer<>1
(1)  108/   1137E : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)  108/   11380 : =>FALSE                      else
(1)  108/   11380 :                                     dc.w    Evening_Star_Call06-*-1
(1)  108/   11380 : [108]                        endif
(1)  109/   11380 : (MACRO)              	smpsFMAlterVol      $0A
(1)  109/   11380 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  109/   11380 :                                     dc.b    $E5,$0A,
(1)  109/   11380 : =>TRUE                       else
(1)  109/   11380 : E60A                                dc.b    $E6,$0A
(1)  109/   11382 : [109]                        endif
(1)  110/   11382 : (MACRO)              	smpsPan             panLeft, $00
(1)  110/   11382 : =$0                  panNone set $00
(1)  110/   11382 : =$40                 panRight set $40
(1)  110/   11382 : =$80                 panLeft set $80
(1)  110/   11382 : =$C0                 panCentre set $C0
(1)  110/   11382 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  110/   11382 : E080                        dc.b $E0,panLeft+$00
(1)  111/   11384 : B30C                	dc.b	nD4, $0C
(1)  112/   11386 : (MACRO)              	smpsFMAlterVol      $F6
(1)  112/   11386 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  112/   11386 :                                     dc.b    $E5,$F6,
(1)  112/   11386 : =>TRUE                       else
(1)  112/   11386 : E6F6                                dc.b    $E6,$F6
(1)  112/   11388 : [112]                        endif
(1)  113/   11388 : (MACRO)              	smpsPan             panCenter, $00
(1)  113/   11388 : =$0                  panNone set $00
(1)  113/   11388 : =$40                 panRight set $40
(1)  113/   11388 : =$80                 panLeft set $80
(1)  113/   11388 : =$C0                 panCentre set $C0
(1)  113/   11388 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  113/   11388 : E0C0                        dc.b $E0,panCenter+$00
(1)  114/   1138A : 0804                	dc.b	$08, $04
(1)  115/   1138C : (MACRO)              	smpsFMAlterVol      $0A
(1)  115/   1138C : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  115/   1138C :                                     dc.b    $E5,$0A,
(1)  115/   1138C : =>TRUE                       else
(1)  115/   1138C : E60A                                dc.b    $E6,$0A
(1)  115/   1138E : [115]                        endif
(1)  116/   1138E : (MACRO)              	smpsPan             panLeft, $00
(1)  116/   1138E : =$0                  panNone set $00
(1)  116/   1138E : =$40                 panRight set $40
(1)  116/   1138E : =$80                 panLeft set $80
(1)  116/   1138E : =$C0                 panCentre set $C0
(1)  116/   1138E : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  116/   1138E : E080                        dc.b $E0,panLeft+$00
(1)  117/   11390 : 08                  	dc.b	$08
(1)  118/   11391 : (MACRO)              	smpsFMAlterVol      $F6
(1)  118/   11391 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  118/   11391 :                                     dc.b    $E5,$F6,
(1)  118/   11391 : =>TRUE                       else
(1)  118/   11391 : E6F6                                dc.b    $E6,$F6
(1)  118/   11393 : [118]                        endif
(1)  119/   11393 : (MACRO)              	smpsPan             panCenter, $00
(1)  119/   11393 : =$0                  panNone set $00
(1)  119/   11393 : =$40                 panRight set $40
(1)  119/   11393 : =$80                 panLeft set $80
(1)  119/   11393 : =$C0                 panCentre set $C0
(1)  119/   11393 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  119/   11393 : E0C0                        dc.b $E0,panCenter+$00
(1)  120/   11395 : 04                  	dc.b	$04
(1)  121/   11396 : (MACRO)              	smpsFMAlterVol      $0A
(1)  121/   11396 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  121/   11396 :                                     dc.b    $E5,$0A,
(1)  121/   11396 : =>TRUE                       else
(1)  121/   11396 : E60A                                dc.b    $E6,$0A
(1)  121/   11398 : [121]                        endif
(1)  122/   11398 : (MACRO)              	smpsPan             panLeft, $00
(1)  122/   11398 : =$0                  panNone set $00
(1)  122/   11398 : =$40                 panRight set $40
(1)  122/   11398 : =$80                 panLeft set $80
(1)  122/   11398 : =$C0                 panCentre set $C0
(1)  122/   11398 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  122/   11398 : E080                        dc.b $E0,panLeft+$00
(1)  123/   1139A : 08                  	dc.b	$08
(1)  124/   1139B : (MACRO)              	smpsFMAlterVol      $F6
(1)  124/   1139B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  124/   1139B :                                     dc.b    $E5,$F6,
(1)  124/   1139B : =>TRUE                       else
(1)  124/   1139B : E6F6                                dc.b    $E6,$F6
(1)  124/   1139D : [124]                        endif
(1)  125/   1139D : (MACRO)              	smpsPan             panCenter, $00
(1)  125/   1139D : =$0                  panNone set $00
(1)  125/   1139D : =$40                 panRight set $40
(1)  125/   1139D : =$80                 panLeft set $80
(1)  125/   1139D : =$C0                 panCentre set $C0
(1)  125/   1139D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  125/   1139D : E0C0                        dc.b $E0,panCenter+$00
(1)  126/   1139F : 04                  	dc.b	$04
(1)  127/   113A0 : (MACRO)              	smpsCall            Evening_Star_Call09
(1)  127/   113A0 : F8                          dc.b    $F8
(1)  127/   113A1 : =>TRUE                       if SonicDriverVer<>1
(1)  127/   113A1 : 1A94                                dc.w    z80_ptr(Evening_Star_Call09)
(1)  127/   113A3 : =>FALSE                      else
(1)  127/   113A3 :                                     dc.w    Evening_Star_Call09-*-1
(1)  127/   113A3 : [127]                        endif
(1)  128/   113A3 : (MACRO)              	smpsCall            Evening_Star_Call06
(1)  128/   113A3 : F8                          dc.b    $F8
(1)  128/   113A4 : =>TRUE                       if SonicDriverVer<>1
(1)  128/   113A4 : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)  128/   113A6 : =>FALSE                      else
(1)  128/   113A6 :                                     dc.w    Evening_Star_Call06-*-1
(1)  128/   113A6 : [128]                        endif
(1)  129/   113A6 : (MACRO)              	smpsCall            Evening_Star_Call07
(1)  129/   113A6 : F8                          dc.b    $F8
(1)  129/   113A7 : =>TRUE                       if SonicDriverVer<>1
(1)  129/   113A7 : E993                                dc.w    z80_ptr(Evening_Star_Call07)
(1)  129/   113A9 : =>FALSE                      else
(1)  129/   113A9 :                                     dc.w    Evening_Star_Call07-*-1
(1)  129/   113A9 : [129]                        endif
(1)  130/   113A9 : (MACRO)              	smpsCall            Evening_Star_Call06
(1)  130/   113A9 : F8                          dc.b    $F8
(1)  130/   113AA : =>TRUE                       if SonicDriverVer<>1
(1)  130/   113AA : B793                                dc.w    z80_ptr(Evening_Star_Call06)
(1)  130/   113AC : =>FALSE                      else
(1)  130/   113AC :                                     dc.w    Evening_Star_Call06-*-1
(1)  130/   113AC : [130]                        endif
(1)  131/   113AC : (MACRO)              	smpsCall            Evening_Star_Call08
(1)  131/   113AC : F8                          dc.b    $F8
(1)  131/   113AD : =>TRUE                       if SonicDriverVer<>1
(1)  131/   113AD : 2D94                                dc.w    z80_ptr(Evening_Star_Call08)
(1)  131/   113AF : =>FALSE                      else
(1)  131/   113AF :                                     dc.w    Evening_Star_Call08-*-1
(1)  131/   113AF : [131]                        endif
(1)  132/   113AF : (MACRO)              	smpsLoop            $01, $02, Evening_Star_Loop04
(1)  132/   113AF : F7                          dc.b    $F7
(1)  132/   113B0 : 0102                        dc.b    $01,$02
(1)  132/   113B2 : =>TRUE                       if SonicDriverVer<>1
(1)  132/   113B2 : 7793                                dc.w    z80_ptr(Evening_Star_Loop04)
(1)  132/   113B4 : =>FALSE                      else
(1)  132/   113B4 :                                     dc.w    Evening_Star_Loop04-*-1
(1)  132/   113B4 : [132]                        endif
(1)  133/   113B4 : (MACRO)              	smpsJump            Evening_Star_Loop04
(1)  133/   113B4 : F6                          dc.b    $F6
(1)  133/   113B5 : =>TRUE                       if SonicDriverVer<>1
(1)  133/   113B5 : 7793                                dc.w    z80_ptr(Evening_Star_Loop04)
(1)  133/   113B7 : =>FALSE                      else
(1)  133/   113B7 :                                     dc.w    Evening_Star_Loop04-*-1
(1)  133/   113B7 : [133]                        endif
(1)  134/   113B7 :                     
(1)  135/   113B7 :                     Evening_Star_Call06:
(1)  136/   113B7 : B308                	dc.b	nD4, $08
(1)  137/   113B9 : (MACRO)              	smpsFMAlterVol      $0A
(1)  137/   113B9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  137/   113B9 :                                     dc.b    $E5,$0A,
(1)  137/   113B9 : =>TRUE                       else
(1)  137/   113B9 : E60A                                dc.b    $E6,$0A
(1)  137/   113BB : [137]                        endif
(1)  138/   113BB : (MACRO)              	smpsPan             panLeft, $00
(1)  138/   113BB : =$0                  panNone set $00
(1)  138/   113BB : =$40                 panRight set $40
(1)  138/   113BB : =$80                 panLeft set $80
(1)  138/   113BB : =$C0                 panCentre set $C0
(1)  138/   113BB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  138/   113BB : E080                        dc.b $E0,panLeft+$00
(1)  139/   113BD : 04                  	dc.b	$04
(1)  140/   113BE : (MACRO)              	smpsFMAlterVol      $F6
(1)  140/   113BE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  140/   113BE :                                     dc.b    $E5,$F6,
(1)  140/   113BE : =>TRUE                       else
(1)  140/   113BE : E6F6                                dc.b    $E6,$F6
(1)  140/   113C0 : [140]                        endif
(1)  141/   113C0 : (MACRO)              	smpsPan             panCenter, $00
(1)  141/   113C0 : =$0                  panNone set $00
(1)  141/   113C0 : =$40                 panRight set $40
(1)  141/   113C0 : =$80                 panLeft set $80
(1)  141/   113C0 : =$C0                 panCentre set $C0
(1)  141/   113C0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  141/   113C0 : E0C0                        dc.b $E0,panCenter+$00
(1)  142/   113C2 : 0804 0804           	dc.b	$08, $04, $08, $04
(1)  143/   113C6 : (MACRO)              	smpsFMAlterVol      $0A
(1)  143/   113C6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  143/   113C6 :                                     dc.b    $E5,$0A,
(1)  143/   113C6 : =>TRUE                       else
(1)  143/   113C6 : E60A                                dc.b    $E6,$0A
(1)  143/   113C8 : [143]                        endif
(1)  144/   113C8 : (MACRO)              	smpsPan             panLeft, $00
(1)  144/   113C8 : =$0                  panNone set $00
(1)  144/   113C8 : =$40                 panRight set $40
(1)  144/   113C8 : =$80                 panLeft set $80
(1)  144/   113C8 : =$C0                 panCentre set $C0
(1)  144/   113C8 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  144/   113C8 : E080                        dc.b $E0,panLeft+$00
(1)  145/   113CA : 0C                  	dc.b	$0C
(1)  146/   113CB : (MACRO)              	smpsFMAlterVol      $F6
(1)  146/   113CB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  146/   113CB :                                     dc.b    $E5,$F6,
(1)  146/   113CB : =>TRUE                       else
(1)  146/   113CB : E6F6                                dc.b    $E6,$F6
(1)  146/   113CD : [146]                        endif
(1)  147/   113CD : (MACRO)              	smpsPan             panCenter, $00
(1)  147/   113CD : =$0                  panNone set $00
(1)  147/   113CD : =$40                 panRight set $40
(1)  147/   113CD : =$80                 panLeft set $80
(1)  147/   113CD : =$C0                 panCentre set $C0
(1)  147/   113CD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  147/   113CD : E0C0                        dc.b $E0,panCenter+$00
(1)  148/   113CF : 800C B308 04        	dc.b	nRst, $0C, nD4, $08, $04
(1)  149/   113D4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  149/   113D4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  149/   113D4 :                                     dc.b    $E5,$0A,
(1)  149/   113D4 : =>TRUE                       else
(1)  149/   113D4 : E60A                                dc.b    $E6,$0A
(1)  149/   113D6 : [149]                        endif
(1)  150/   113D6 : (MACRO)              	smpsPan             panLeft, $00
(1)  150/   113D6 : =$0                  panNone set $00
(1)  150/   113D6 : =$40                 panRight set $40
(1)  150/   113D6 : =$80                 panLeft set $80
(1)  150/   113D6 : =$C0                 panCentre set $C0
(1)  150/   113D6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  150/   113D6 : E080                        dc.b $E0,panLeft+$00
(1)  151/   113D8 : 08                  	dc.b	$08
(1)  152/   113D9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  152/   113D9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  152/   113D9 :                                     dc.b    $E5,$F6,
(1)  152/   113D9 : =>TRUE                       else
(1)  152/   113D9 : E6F6                                dc.b    $E6,$F6
(1)  152/   113DB : [152]                        endif
(1)  153/   113DB : (MACRO)              	smpsPan             panCenter, $00
(1)  153/   113DB : =$0                  panNone set $00
(1)  153/   113DB : =$40                 panRight set $40
(1)  153/   113DB : =$80                 panLeft set $80
(1)  153/   113DB : =$C0                 panCentre set $C0
(1)  153/   113DB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  153/   113DB : E0C0                        dc.b $E0,panCenter+$00
(1)  154/   113DD : 04                  	dc.b	$04
(1)  155/   113DE : (MACRO)              	smpsFMAlterVol      $0A
(1)  155/   113DE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  155/   113DE :                                     dc.b    $E5,$0A,
(1)  155/   113DE : =>TRUE                       else
(1)  155/   113DE : E60A                                dc.b    $E6,$0A
(1)  155/   113E0 : [155]                        endif
(1)  156/   113E0 : (MACRO)              	smpsPan             panLeft, $00
(1)  156/   113E0 : =$0                  panNone set $00
(1)  156/   113E0 : =$40                 panRight set $40
(1)  156/   113E0 : =$80                 panLeft set $80
(1)  156/   113E0 : =$C0                 panCentre set $C0
(1)  156/   113E0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  156/   113E0 : E080                        dc.b $E0,panLeft+$00
(1)  157/   113E2 : 08                  	dc.b	$08
(1)  158/   113E3 : (MACRO)              	smpsFMAlterVol      $F6
(1)  158/   113E3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  158/   113E3 :                                     dc.b    $E5,$F6,
(1)  158/   113E3 : =>TRUE                       else
(1)  158/   113E3 : E6F6                                dc.b    $E6,$F6
(1)  158/   113E5 : [158]                        endif
(1)  159/   113E5 : (MACRO)              	smpsPan             panCenter, $00
(1)  159/   113E5 : =$0                  panNone set $00
(1)  159/   113E5 : =$40                 panRight set $40
(1)  159/   113E5 : =$80                 panLeft set $80
(1)  159/   113E5 : =$C0                 panCentre set $C0
(1)  159/   113E5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  159/   113E5 : E0C0                        dc.b $E0,panCenter+$00
(1)  160/   113E7 : 04                  	dc.b	$04
(1)  161/   113E8 : (MACRO)              	smpsReturn
(1)  161/   113E8 : =>TRUE                       if SonicDriverVer>=3
(1)  161/   113E8 : F9                                  dc.b    $F9
(1)  161/   113E9 : =>FALSE                      else
(1)  161/   113E9 :                                     dc.b    $E3
(1)  161/   113E9 : [161]                        endif
(1)  162/   113E9 :                     
(1)  163/   113E9 :                     Evening_Star_Call07:
(1)  164/   113E9 : 800C B108 04        	dc.b	nRst, $0C, nC4, $08, $04
(1)  165/   113EE : (MACRO)              	smpsFMAlterVol      $0A
(1)  165/   113EE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  165/   113EE :                                     dc.b    $E5,$0A,
(1)  165/   113EE : =>TRUE                       else
(1)  165/   113EE : E60A                                dc.b    $E6,$0A
(1)  165/   113F0 : [165]                        endif
(1)  166/   113F0 : (MACRO)              	smpsPan             panLeft, $00
(1)  166/   113F0 : =$0                  panNone set $00
(1)  166/   113F0 : =$40                 panRight set $40
(1)  166/   113F0 : =$80                 panLeft set $80
(1)  166/   113F0 : =$C0                 panCentre set $C0
(1)  166/   113F0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  166/   113F0 : E080                        dc.b $E0,panLeft+$00
(1)  167/   113F2 : 08                  	dc.b	$08
(1)  168/   113F3 : (MACRO)              	smpsFMAlterVol      $F6
(1)  168/   113F3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  168/   113F3 :                                     dc.b    $E5,$F6,
(1)  168/   113F3 : =>TRUE                       else
(1)  168/   113F3 : E6F6                                dc.b    $E6,$F6
(1)  168/   113F5 : [168]                        endif
(1)  169/   113F5 : (MACRO)              	smpsPan             panCenter, $00
(1)  169/   113F5 : =$0                  panNone set $00
(1)  169/   113F5 : =$40                 panRight set $40
(1)  169/   113F5 : =$80                 panLeft set $80
(1)  169/   113F5 : =$C0                 panCentre set $C0
(1)  169/   113F5 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  169/   113F5 : E0C0                        dc.b $E0,panCenter+$00
(1)  170/   113F7 : 04                  	dc.b	$04
(1)  171/   113F8 : (MACRO)              	smpsFMAlterVol      $0A
(1)  171/   113F8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  171/   113F8 :                                     dc.b    $E5,$0A,
(1)  171/   113F8 : =>TRUE                       else
(1)  171/   113F8 : E60A                                dc.b    $E6,$0A
(1)  171/   113FA : [171]                        endif
(1)  172/   113FA : (MACRO)              	smpsPan             panLeft, $00
(1)  172/   113FA : =$0                  panNone set $00
(1)  172/   113FA : =$40                 panRight set $40
(1)  172/   113FA : =$80                 panLeft set $80
(1)  172/   113FA : =$C0                 panCentre set $C0
(1)  172/   113FA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  172/   113FA : E080                        dc.b $E0,panLeft+$00
(1)  173/   113FC : 08                  	dc.b	$08
(1)  174/   113FD : (MACRO)              	smpsFMAlterVol      $F6
(1)  174/   113FD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  174/   113FD :                                     dc.b    $E5,$F6,
(1)  174/   113FD : =>TRUE                       else
(1)  174/   113FD : E6F6                                dc.b    $E6,$F6
(1)  174/   113FF : [174]                        endif
(1)  175/   113FF : (MACRO)              	smpsPan             panCenter, $00
(1)  175/   113FF : =$0                  panNone set $00
(1)  175/   113FF : =$40                 panRight set $40
(1)  175/   113FF : =$80                 panLeft set $80
(1)  175/   113FF : =$C0                 panCentre set $C0
(1)  175/   113FF : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  175/   113FF : E0C0                        dc.b $E0,panCenter+$00
(1)  176/   11401 : 0408 04             	dc.b	$04, $08, $04
(1)  177/   11404 : (MACRO)              	smpsFMAlterVol      $0A
(1)  177/   11404 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  177/   11404 :                                     dc.b    $E5,$0A,
(1)  177/   11404 : =>TRUE                       else
(1)  177/   11404 : E60A                                dc.b    $E6,$0A
(1)  177/   11406 : [177]                        endif
(1)  178/   11406 : (MACRO)              	smpsPan             panLeft, $00
(1)  178/   11406 : =$0                  panNone set $00
(1)  178/   11406 : =$40                 panRight set $40
(1)  178/   11406 : =$80                 panLeft set $80
(1)  178/   11406 : =$C0                 panCentre set $C0
(1)  178/   11406 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  178/   11406 : E080                        dc.b $E0,panLeft+$00
(1)  179/   11408 : 08                  	dc.b	$08
(1)  180/   11409 : (MACRO)              	smpsFMAlterVol      $F6
(1)  180/   11409 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  180/   11409 :                                     dc.b    $E5,$F6,
(1)  180/   11409 : =>TRUE                       else
(1)  180/   11409 : E6F6                                dc.b    $E6,$F6
(1)  180/   1140B : [180]                        endif
(1)  181/   1140B : (MACRO)              	smpsPan             panCenter, $00
(1)  181/   1140B : =$0                  panNone set $00
(1)  181/   1140B : =$40                 panRight set $40
(1)  181/   1140B : =$80                 panLeft set $80
(1)  181/   1140B : =$C0                 panCentre set $C0
(1)  181/   1140B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  181/   1140B : E0C0                        dc.b $E0,panCenter+$00
(1)  182/   1140D : 04                  	dc.b	$04
(1)  183/   1140E : (MACRO)              	smpsFMAlterVol      $0A
(1)  183/   1140E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  183/   1140E :                                     dc.b    $E5,$0A,
(1)  183/   1140E : =>TRUE                       else
(1)  183/   1140E : E60A                                dc.b    $E6,$0A
(1)  183/   11410 : [183]                        endif
(1)  184/   11410 : (MACRO)              	smpsPan             panLeft, $00
(1)  184/   11410 : =$0                  panNone set $00
(1)  184/   11410 : =$40                 panRight set $40
(1)  184/   11410 : =$80                 panLeft set $80
(1)  184/   11410 : =$C0                 panCentre set $C0
(1)  184/   11410 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  184/   11410 : E080                        dc.b $E0,panLeft+$00
(1)  185/   11412 : 0C                  	dc.b	$0C
(1)  186/   11413 : (MACRO)              	smpsFMAlterVol      $F6
(1)  186/   11413 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  186/   11413 :                                     dc.b    $E5,$F6,
(1)  186/   11413 : =>TRUE                       else
(1)  186/   11413 : E6F6                                dc.b    $E6,$F6
(1)  186/   11415 : [186]                        endif
(1)  187/   11415 : (MACRO)              	smpsPan             panCenter, $00
(1)  187/   11415 : =$0                  panNone set $00
(1)  187/   11415 : =$40                 panRight set $40
(1)  187/   11415 : =$80                 panLeft set $80
(1)  187/   11415 : =$C0                 panCentre set $C0
(1)  187/   11415 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  187/   11415 : E0C0                        dc.b $E0,panCenter+$00
(1)  188/   11417 : 0804                	dc.b	$08, $04
(1)  189/   11419 : (MACRO)              	smpsReturn
(1)  189/   11419 : =>TRUE                       if SonicDriverVer>=3
(1)  189/   11419 : F9                                  dc.b    $F9
(1)  189/   1141A : =>FALSE                      else
(1)  189/   1141A :                                     dc.b    $E3
(1)  189/   1141A : [189]                        endif
(1)  190/   1141A :                     
(1)  191/   1141A :                     Evening_Star_Call09:
(1)  192/   1141A : (MACRO)              	smpsFMAlterVol      $FE
(1)  192/   1141A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  192/   1141A :                                     dc.b    $E5,$FE,
(1)  192/   1141A : =>TRUE                       else
(1)  192/   1141A : E6FE                                dc.b    $E6,$FE
(1)  192/   1141C : [192]                        endif
(1)  193/   1141C : 8008 AA04 AC08      	dc.b	nRst, $08, nF3, $04, nG3, $08, nBb3, $0C, nG3, $04, nBb3, $08
            11422 : AF0C AC04 AF08    
(1)  194/   11428 : B104                	dc.b	nC4, $04
(1)  195/   1142A : (MACRO)              	smpsFMAlterVol      $02
(1)  195/   1142A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  195/   1142A :                                     dc.b    $E5,$02,
(1)  195/   1142A : =>TRUE                       else
(1)  195/   1142A : E602                                dc.b    $E6,$02
(1)  195/   1142C : [195]                        endif
(1)  196/   1142C : (MACRO)              	smpsReturn
(1)  196/   1142C : =>TRUE                       if SonicDriverVer>=3
(1)  196/   1142C : F9                                  dc.b    $F9
(1)  196/   1142D : =>FALSE                      else
(1)  196/   1142D :                                     dc.b    $E3
(1)  196/   1142D : [196]                        endif
(1)  197/   1142D :                     
(1)  198/   1142D :                     Evening_Star_Call08:
(1)  199/   1142D : (MACRO)              	smpsFMAlterVol      $0A
(1)  199/   1142D : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  199/   1142D :                                     dc.b    $E5,$0A,
(1)  199/   1142D : =>TRUE                       else
(1)  199/   1142D : E60A                                dc.b    $E6,$0A
(1)  199/   1142F : [199]                        endif
(1)  200/   1142F : (MACRO)              	smpsPan             panLeft, $00
(1)  200/   1142F : =$0                  panNone set $00
(1)  200/   1142F : =$40                 panRight set $40
(1)  200/   1142F : =$80                 panLeft set $80
(1)  200/   1142F : =$C0                 panCentre set $C0
(1)  200/   1142F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  200/   1142F : E080                        dc.b $E0,panLeft+$00
(1)  201/   11431 : B308                	dc.b	nD4, $08
(1)  202/   11433 : (MACRO)              	smpsFMAlterVol      $F6
(1)  202/   11433 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  202/   11433 :                                     dc.b    $E5,$F6,
(1)  202/   11433 : =>TRUE                       else
(1)  202/   11433 : E6F6                                dc.b    $E6,$F6
(1)  202/   11435 : [202]                        endif
(1)  203/   11435 : (MACRO)              	smpsPan             panCenter, $00
(1)  203/   11435 : =$0                  panNone set $00
(1)  203/   11435 : =$40                 panRight set $40
(1)  203/   11435 : =$80                 panLeft set $80
(1)  203/   11435 : =$C0                 panCentre set $C0
(1)  203/   11435 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  203/   11435 : E0C0                        dc.b $E0,panCenter+$00
(1)  204/   11437 : 04                  	dc.b	$04
(1)  205/   11438 : (MACRO)              	smpsLoop            $00, $08, Evening_Star_Call08
(1)  205/   11438 : F7                          dc.b    $F7
(1)  205/   11439 : 0008                        dc.b    $00,$08
(1)  205/   1143B : =>TRUE                       if SonicDriverVer<>1
(1)  205/   1143B : 2D94                                dc.w    z80_ptr(Evening_Star_Call08)
(1)  205/   1143D : =>FALSE                      else
(1)  205/   1143D :                                     dc.w    Evening_Star_Call08-*-1
(1)  205/   1143D : [205]                        endif
(1)  206/   1143D : (MACRO)              	smpsReturn
(1)  206/   1143D : =>TRUE                       if SonicDriverVer>=3
(1)  206/   1143D : F9                                  dc.b    $F9
(1)  206/   1143E : =>FALSE                      else
(1)  206/   1143E :                                     dc.b    $E3
(1)  206/   1143E : [206]                        endif
(1)  207/   1143E :                     
(1)  208/   1143E :                     ; FM4 Data
(1)  209/   1143E :                     Evening_Star_FM4:
(1)  210/   1143E : (MACRO)              	smpsSetvoice        $01
(1)  210/   1143E :  (MACRO-2)                   smpsFMvoice $01
(1)  210/   1143E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  210/   1143E :                                     dc.b    $EF,$01|$80,+$81
(1)  210/   1143E : =>TRUE                       else
(1)  210/   1143E : EF01                                dc.b    $EF,$01
(1)  210/   11440 : [210]                        endif
(1)  211/   11440 : (MACRO)              	smpsChangeTransposition $FC
(1)  211/   11440 : =>TRUE                       if SonicDriverVer>=3
(1)  211/   11440 : FBFC                                dc.b    $FB,$FC
(1)  211/   11442 : =>FALSE                      else
(1)  211/   11442 :                                     dc.b    $E9,$FC
(1)  211/   11442 : [211]                        endif
(1)  212/   11442 : (MACRO)              	smpsCall            Evening_Star_Call02
(1)  212/   11442 : F8                          dc.b    $F8
(1)  212/   11443 : =>TRUE                       if SonicDriverVer<>1
(1)  212/   11443 : BD94                                dc.w    z80_ptr(Evening_Star_Call02)
(1)  212/   11445 : =>FALSE                      else
(1)  212/   11445 :                                     dc.w    Evening_Star_Call02-*-1
(1)  212/   11445 : [212]                        endif
(1)  213/   11445 : (MACRO)              	smpsChangeTransposition $FE
(1)  213/   11445 : =>TRUE                       if SonicDriverVer>=3
(1)  213/   11445 : FBFE                                dc.b    $FB,$FE
(1)  213/   11447 : =>FALSE                      else
(1)  213/   11447 :                                     dc.b    $E9,$FE
(1)  213/   11447 : [213]                        endif
(1)  214/   11447 : (MACRO)              	smpsCall            Evening_Star_Call03
(1)  214/   11447 : F8                          dc.b    $F8
(1)  214/   11448 : =>TRUE                       if SonicDriverVer<>1
(1)  214/   11448 : EF94                                dc.w    z80_ptr(Evening_Star_Call03)
(1)  214/   1144A : =>FALSE                      else
(1)  214/   1144A :                                     dc.w    Evening_Star_Call03-*-1
(1)  214/   1144A : [214]                        endif
(1)  215/   1144A : (MACRO)              	smpsChangeTransposition $FD
(1)  215/   1144A : =>TRUE                       if SonicDriverVer>=3
(1)  215/   1144A : FBFD                                dc.b    $FB,$FD
(1)  215/   1144C : =>FALSE                      else
(1)  215/   1144C :                                     dc.b    $E9,$FD
(1)  215/   1144C : [215]                        endif
(1)  216/   1144C : (MACRO)              	smpsCall            Evening_Star_Call02
(1)  216/   1144C : F8                          dc.b    $F8
(1)  216/   1144D : =>TRUE                       if SonicDriverVer<>1
(1)  216/   1144D : BD94                                dc.w    z80_ptr(Evening_Star_Call02)
(1)  216/   1144F : =>FALSE                      else
(1)  216/   1144F :                                     dc.w    Evening_Star_Call02-*-1
(1)  216/   1144F : [216]                        endif
(1)  217/   1144F : (MACRO)              	smpsCall            Evening_Star_Call04
(1)  217/   1144F : F8                          dc.b    $F8
(1)  217/   11450 : =>TRUE                       if SonicDriverVer<>1
(1)  217/   11450 : 2095                                dc.w    z80_ptr(Evening_Star_Call04)
(1)  217/   11452 : =>FALSE                      else
(1)  217/   11452 :                                     dc.w    Evening_Star_Call04-*-1
(1)  217/   11452 : [217]                        endif
(1)  218/   11452 : (MACRO)              	smpsChangeTransposition $09
(1)  218/   11452 : =>TRUE                       if SonicDriverVer>=3
(1)  218/   11452 : FB09                                dc.b    $FB,$09
(1)  218/   11454 : =>FALSE                      else
(1)  218/   11454 :                                     dc.b    $E9,$09
(1)  218/   11454 : [218]                        endif
(1)  219/   11454 : (MACRO)              	smpsFMAlterVol      $FB
(1)  219/   11454 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  219/   11454 :                                     dc.b    $E5,$FB,
(1)  219/   11454 : =>TRUE                       else
(1)  219/   11454 : E6FB                                dc.b    $E6,$FB
(1)  219/   11456 : [219]                        endif
(1)  220/   11456 :                     
(1)  221/   11456 :                     Evening_Star_Loop03:
(1)  222/   11456 : (MACRO)              	smpsChangeTransposition $FC
(1)  222/   11456 : =>TRUE                       if SonicDriverVer>=3
(1)  222/   11456 : FBFC                                dc.b    $FB,$FC
(1)  222/   11458 : =>FALSE                      else
(1)  222/   11458 :                                     dc.b    $E9,$FC
(1)  222/   11458 : [222]                        endif
(1)  223/   11458 : (MACRO)              	smpsCall            Evening_Star_Call02
(1)  223/   11458 : F8                          dc.b    $F8
(1)  223/   11459 : =>TRUE                       if SonicDriverVer<>1
(1)  223/   11459 : BD94                                dc.w    z80_ptr(Evening_Star_Call02)
(1)  223/   1145B : =>FALSE                      else
(1)  223/   1145B :                                     dc.w    Evening_Star_Call02-*-1
(1)  223/   1145B : [223]                        endif
(1)  224/   1145B : (MACRO)              	smpsChangeTransposition $FE
(1)  224/   1145B : =>TRUE                       if SonicDriverVer>=3
(1)  224/   1145B : FBFE                                dc.b    $FB,$FE
(1)  224/   1145D : =>FALSE                      else
(1)  224/   1145D :                                     dc.b    $E9,$FE
(1)  224/   1145D : [224]                        endif
(1)  225/   1145D : (MACRO)              	smpsCall            Evening_Star_Call03
(1)  225/   1145D : F8                          dc.b    $F8
(1)  225/   1145E : =>TRUE                       if SonicDriverVer<>1
(1)  225/   1145E : EF94                                dc.w    z80_ptr(Evening_Star_Call03)
(1)  225/   11460 : =>FALSE                      else
(1)  225/   11460 :                                     dc.w    Evening_Star_Call03-*-1
(1)  225/   11460 : [225]                        endif
(1)  226/   11460 : (MACRO)              	smpsChangeTransposition $FD
(1)  226/   11460 : =>TRUE                       if SonicDriverVer>=3
(1)  226/   11460 : FBFD                                dc.b    $FB,$FD
(1)  226/   11462 : =>FALSE                      else
(1)  226/   11462 :                                     dc.b    $E9,$FD
(1)  226/   11462 : [226]                        endif
(1)  227/   11462 : (MACRO)              	smpsCall            Evening_Star_Call02
(1)  227/   11462 : F8                          dc.b    $F8
(1)  227/   11463 : =>TRUE                       if SonicDriverVer<>1
(1)  227/   11463 : BD94                                dc.w    z80_ptr(Evening_Star_Call02)
(1)  227/   11465 : =>FALSE                      else
(1)  227/   11465 :                                     dc.w    Evening_Star_Call02-*-1
(1)  227/   11465 : [227]                        endif
(1)  228/   11465 : (MACRO)              	smpsChangeTransposition $09
(1)  228/   11465 : =>TRUE                       if SonicDriverVer>=3
(1)  228/   11465 : FB09                                dc.b    $FB,$09
(1)  228/   11467 : =>FALSE                      else
(1)  228/   11467 :                                     dc.b    $E9,$09
(1)  228/   11467 : [228]                        endif
(1)  229/   11467 : (MACRO)              	smpsFMAlterVol      $0A
(1)  229/   11467 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  229/   11467 :                                     dc.b    $E5,$0A,
(1)  229/   11467 : =>TRUE                       else
(1)  229/   11467 : E60A                                dc.b    $E6,$0A
(1)  229/   11469 : [229]                        endif
(1)  230/   11469 : (MACRO)              	smpsPan             panRight, $00
(1)  230/   11469 : =$0                  panNone set $00
(1)  230/   11469 : =$40                 panRight set $40
(1)  230/   11469 : =$80                 panLeft set $80
(1)  230/   11469 : =$C0                 panCentre set $C0
(1)  230/   11469 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  230/   11469 : E040                        dc.b $E0,panRight+$00
(1)  231/   1146B : AA0C                	dc.b	nF3, $0C
(1)  232/   1146D : (MACRO)              	smpsFMAlterVol      $F6
(1)  232/   1146D : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  232/   1146D :                                     dc.b    $E5,$F6,
(1)  232/   1146D : =>TRUE                       else
(1)  232/   1146D : E6F6                                dc.b    $E6,$F6
(1)  232/   1146F : [232]                        endif
(1)  233/   1146F : (MACRO)              	smpsPan             panCenter, $00
(1)  233/   1146F : =$0                  panNone set $00
(1)  233/   1146F : =$40                 panRight set $40
(1)  233/   1146F : =$80                 panLeft set $80
(1)  233/   1146F : =$C0                 panCentre set $C0
(1)  233/   1146F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  233/   1146F : E0C0                        dc.b $E0,panCenter+$00
(1)  234/   11471 : 0804                	dc.b	$08, $04
(1)  235/   11473 : (MACRO)              	smpsFMAlterVol      $0A
(1)  235/   11473 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  235/   11473 :                                     dc.b    $E5,$0A,
(1)  235/   11473 : =>TRUE                       else
(1)  235/   11473 : E60A                                dc.b    $E6,$0A
(1)  235/   11475 : [235]                        endif
(1)  236/   11475 : (MACRO)              	smpsPan             panRight, $00
(1)  236/   11475 : =$0                  panNone set $00
(1)  236/   11475 : =$40                 panRight set $40
(1)  236/   11475 : =$80                 panLeft set $80
(1)  236/   11475 : =$C0                 panCentre set $C0
(1)  236/   11475 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  236/   11475 : E040                        dc.b $E0,panRight+$00
(1)  237/   11477 : 08                  	dc.b	$08
(1)  238/   11478 : (MACRO)              	smpsFMAlterVol      $F6
(1)  238/   11478 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  238/   11478 :                                     dc.b    $E5,$F6,
(1)  238/   11478 : =>TRUE                       else
(1)  238/   11478 : E6F6                                dc.b    $E6,$F6
(1)  238/   1147A : [238]                        endif
(1)  239/   1147A : (MACRO)              	smpsPan             panCenter, $00
(1)  239/   1147A : =$0                  panNone set $00
(1)  239/   1147A : =$40                 panRight set $40
(1)  239/   1147A : =$80                 panLeft set $80
(1)  239/   1147A : =$C0                 panCentre set $C0
(1)  239/   1147A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  239/   1147A : E0C0                        dc.b $E0,panCenter+$00
(1)  240/   1147C : 04                  	dc.b	$04
(1)  241/   1147D : (MACRO)              	smpsFMAlterVol      $0A
(1)  241/   1147D : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  241/   1147D :                                     dc.b    $E5,$0A,
(1)  241/   1147D : =>TRUE                       else
(1)  241/   1147D : E60A                                dc.b    $E6,$0A
(1)  241/   1147F : [241]                        endif
(1)  242/   1147F : (MACRO)              	smpsPan             panRight, $00
(1)  242/   1147F : =$0                  panNone set $00
(1)  242/   1147F : =$40                 panRight set $40
(1)  242/   1147F : =$80                 panLeft set $80
(1)  242/   1147F : =$C0                 panCentre set $C0
(1)  242/   1147F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  242/   1147F : E040                        dc.b $E0,panRight+$00
(1)  243/   11481 : 08                  	dc.b	$08
(1)  244/   11482 : (MACRO)              	smpsFMAlterVol      $F6
(1)  244/   11482 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  244/   11482 :                                     dc.b    $E5,$F6,
(1)  244/   11482 : =>TRUE                       else
(1)  244/   11482 : E6F6                                dc.b    $E6,$F6
(1)  244/   11484 : [244]                        endif
(1)  245/   11484 : (MACRO)              	smpsPan             panCenter, $00
(1)  245/   11484 : =$0                  panNone set $00
(1)  245/   11484 : =$40                 panRight set $40
(1)  245/   11484 : =$80                 panLeft set $80
(1)  245/   11484 : =$C0                 panCentre set $C0
(1)  245/   11484 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  245/   11484 : E0C0                        dc.b $E0,panCenter+$00
(1)  246/   11486 : 04                  	dc.b	$04
(1)  247/   11487 : (MACRO)              	smpsCall            Evening_Star_Call05
(1)  247/   11487 : F8                          dc.b    $F8
(1)  247/   11488 : =>TRUE                       if SonicDriverVer<>1
(1)  247/   11488 : A694                                dc.w    z80_ptr(Evening_Star_Call05)
(1)  247/   1148A : =>FALSE                      else
(1)  247/   1148A :                                     dc.w    Evening_Star_Call05-*-1
(1)  247/   1148A : [247]                        endif
(1)  248/   1148A : (MACRO)              	smpsChangeTransposition $FC
(1)  248/   1148A : =>TRUE                       if SonicDriverVer>=3
(1)  248/   1148A : FBFC                                dc.b    $FB,$FC
(1)  248/   1148C : =>FALSE                      else
(1)  248/   1148C :                                     dc.b    $E9,$FC
(1)  248/   1148C : [248]                        endif
(1)  249/   1148C : (MACRO)              	smpsCall            Evening_Star_Call02
(1)  249/   1148C : F8                          dc.b    $F8
(1)  249/   1148D : =>TRUE                       if SonicDriverVer<>1
(1)  249/   1148D : BD94                                dc.w    z80_ptr(Evening_Star_Call02)
(1)  249/   1148F : =>FALSE                      else
(1)  249/   1148F :                                     dc.w    Evening_Star_Call02-*-1
(1)  249/   1148F : [249]                        endif
(1)  250/   1148F : (MACRO)              	smpsChangeTransposition $FE
(1)  250/   1148F : =>TRUE                       if SonicDriverVer>=3
(1)  250/   1148F : FBFE                                dc.b    $FB,$FE
(1)  250/   11491 : =>FALSE                      else
(1)  250/   11491 :                                     dc.b    $E9,$FE
(1)  250/   11491 : [250]                        endif
(1)  251/   11491 : (MACRO)              	smpsCall            Evening_Star_Call03
(1)  251/   11491 : F8                          dc.b    $F8
(1)  251/   11492 : =>TRUE                       if SonicDriverVer<>1
(1)  251/   11492 : EF94                                dc.w    z80_ptr(Evening_Star_Call03)
(1)  251/   11494 : =>FALSE                      else
(1)  251/   11494 :                                     dc.w    Evening_Star_Call03-*-1
(1)  251/   11494 : [251]                        endif
(1)  252/   11494 : (MACRO)              	smpsChangeTransposition $FD
(1)  252/   11494 : =>TRUE                       if SonicDriverVer>=3
(1)  252/   11494 : FBFD                                dc.b    $FB,$FD
(1)  252/   11496 : =>FALSE                      else
(1)  252/   11496 :                                     dc.b    $E9,$FD
(1)  252/   11496 : [252]                        endif
(1)  253/   11496 : (MACRO)              	smpsCall            Evening_Star_Call02
(1)  253/   11496 : F8                          dc.b    $F8
(1)  253/   11497 : =>TRUE                       if SonicDriverVer<>1
(1)  253/   11497 : BD94                                dc.w    z80_ptr(Evening_Star_Call02)
(1)  253/   11499 : =>FALSE                      else
(1)  253/   11499 :                                     dc.w    Evening_Star_Call02-*-1
(1)  253/   11499 : [253]                        endif
(1)  254/   11499 : (MACRO)              	smpsCall            Evening_Star_Call04
(1)  254/   11499 : F8                          dc.b    $F8
(1)  254/   1149A : =>TRUE                       if SonicDriverVer<>1
(1)  254/   1149A : 2095                                dc.w    z80_ptr(Evening_Star_Call04)
(1)  254/   1149C : =>FALSE                      else
(1)  254/   1149C :                                     dc.w    Evening_Star_Call04-*-1
(1)  254/   1149C : [254]                        endif
(1)  255/   1149C : (MACRO)              	smpsChangeTransposition $09
(1)  255/   1149C : =>TRUE                       if SonicDriverVer>=3
(1)  255/   1149C : FB09                                dc.b    $FB,$09
(1)  255/   1149E : =>FALSE                      else
(1)  255/   1149E :                                     dc.b    $E9,$09
(1)  255/   1149E : [255]                        endif
(1)  256/   1149E : (MACRO)              	smpsLoop            $01, $02, Evening_Star_Loop03
(1)  256/   1149E : F7                          dc.b    $F7
(1)  256/   1149F : 0102                        dc.b    $01,$02
(1)  256/   114A1 : =>TRUE                       if SonicDriverVer<>1
(1)  256/   114A1 : 5694                                dc.w    z80_ptr(Evening_Star_Loop03)
(1)  256/   114A3 : =>FALSE                      else
(1)  256/   114A3 :                                     dc.w    Evening_Star_Loop03-*-1
(1)  256/   114A3 : [256]                        endif
(1)  257/   114A3 : (MACRO)              	smpsJump            Evening_Star_Loop03
(1)  257/   114A3 : F6                          dc.b    $F6
(1)  257/   114A4 : =>TRUE                       if SonicDriverVer<>1
(1)  257/   114A4 : 5694                                dc.w    z80_ptr(Evening_Star_Loop03)
(1)  257/   114A6 : =>FALSE                      else
(1)  257/   114A6 :                                     dc.w    Evening_Star_Loop03-*-1
(1)  257/   114A6 : [257]                        endif
(1)  258/   114A6 :                     
(1)  259/   114A6 :                     Evening_Star_Call05:
(1)  260/   114A6 : (MACRO)              	smpsPan             panRight, $00
(1)  260/   114A6 : =$0                  panNone set $00
(1)  260/   114A6 : =$40                 panRight set $40
(1)  260/   114A6 : =$80                 panLeft set $80
(1)  260/   114A6 : =$C0                 panCentre set $C0
(1)  260/   114A6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  260/   114A6 : E040                        dc.b $E0,panRight+$00
(1)  261/   114A8 : (MACRO)              	smpsFMAlterVol      $08
(1)  261/   114A8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  261/   114A8 :                                     dc.b    $E5,$08,
(1)  261/   114A8 : =>TRUE                       else
(1)  261/   114A8 : E608                                dc.b    $E6,$08
(1)  261/   114AA : [261]                        endif
(1)  262/   114AA : 800B AA04 AC08      	dc.b	nRst, $0B, nF3, $04, nG3, $08, nBb3, $0C, nG3, $04, nBb3, $08
            114B0 : AF0C AC04 AF08    
(1)  263/   114B6 : B101                	dc.b	nC4, $01
(1)  264/   114B8 : (MACRO)              	smpsPan             panCenter, $00
(1)  264/   114B8 : =$0                  panNone set $00
(1)  264/   114B8 : =$40                 panRight set $40
(1)  264/   114B8 : =$80                 panLeft set $80
(1)  264/   114B8 : =$C0                 panCentre set $C0
(1)  264/   114B8 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  264/   114B8 : E0C0                        dc.b $E0,panCenter+$00
(1)  265/   114BA : (MACRO)              	smpsFMAlterVol      $F8
(1)  265/   114BA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  265/   114BA :                                     dc.b    $E5,$F8,
(1)  265/   114BA : =>TRUE                       else
(1)  265/   114BA : E6F8                                dc.b    $E6,$F8
(1)  265/   114BC : [265]                        endif
(1)  266/   114BC : (MACRO)              	smpsReturn
(1)  266/   114BC : =>TRUE                       if SonicDriverVer>=3
(1)  266/   114BC : F9                                  dc.b    $F9
(1)  266/   114BD : =>FALSE                      else
(1)  266/   114BD :                                     dc.b    $E3
(1)  266/   114BD : [266]                        endif
(1)  267/   114BD :                     
(1)  268/   114BD :                     Evening_Star_Call02:
(1)  269/   114BD : B308                	dc.b	nD4, $08
(1)  270/   114BF : (MACRO)              	smpsFMAlterVol      $0A
(1)  270/   114BF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  270/   114BF :                                     dc.b    $E5,$0A,
(1)  270/   114BF : =>TRUE                       else
(1)  270/   114BF : E60A                                dc.b    $E6,$0A
(1)  270/   114C1 : [270]                        endif
(1)  271/   114C1 : (MACRO)              	smpsPan             panRight, $00
(1)  271/   114C1 : =$0                  panNone set $00
(1)  271/   114C1 : =$40                 panRight set $40
(1)  271/   114C1 : =$80                 panLeft set $80
(1)  271/   114C1 : =$C0                 panCentre set $C0
(1)  271/   114C1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  271/   114C1 : E040                        dc.b $E0,panRight+$00
(1)  272/   114C3 : 04                  	dc.b	$04
(1)  273/   114C4 : (MACRO)              	smpsFMAlterVol      $F6
(1)  273/   114C4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  273/   114C4 :                                     dc.b    $E5,$F6,
(1)  273/   114C4 : =>TRUE                       else
(1)  273/   114C4 : E6F6                                dc.b    $E6,$F6
(1)  273/   114C6 : [273]                        endif
(1)  274/   114C6 : (MACRO)              	smpsPan             panCenter, $00
(1)  274/   114C6 : =$0                  panNone set $00
(1)  274/   114C6 : =$40                 panRight set $40
(1)  274/   114C6 : =$80                 panLeft set $80
(1)  274/   114C6 : =$C0                 panCentre set $C0
(1)  274/   114C6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  274/   114C6 : E0C0                        dc.b $E0,panCenter+$00
(1)  275/   114C8 : 0804 0804           	dc.b	$08, $04, $08, $04
(1)  276/   114CC : (MACRO)              	smpsFMAlterVol      $0A
(1)  276/   114CC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  276/   114CC :                                     dc.b    $E5,$0A,
(1)  276/   114CC : =>TRUE                       else
(1)  276/   114CC : E60A                                dc.b    $E6,$0A
(1)  276/   114CE : [276]                        endif
(1)  277/   114CE : (MACRO)              	smpsPan             panRight, $00
(1)  277/   114CE : =$0                  panNone set $00
(1)  277/   114CE : =$40                 panRight set $40
(1)  277/   114CE : =$80                 panLeft set $80
(1)  277/   114CE : =$C0                 panCentre set $C0
(1)  277/   114CE : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  277/   114CE : E040                        dc.b $E0,panRight+$00
(1)  278/   114D0 : 0C                  	dc.b	$0C
(1)  279/   114D1 : (MACRO)              	smpsFMAlterVol      $F6
(1)  279/   114D1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  279/   114D1 :                                     dc.b    $E5,$F6,
(1)  279/   114D1 : =>TRUE                       else
(1)  279/   114D1 : E6F6                                dc.b    $E6,$F6
(1)  279/   114D3 : [279]                        endif
(1)  280/   114D3 : (MACRO)              	smpsPan             panCenter, $00
(1)  280/   114D3 : =$0                  panNone set $00
(1)  280/   114D3 : =$40                 panRight set $40
(1)  280/   114D3 : =$80                 panLeft set $80
(1)  280/   114D3 : =$C0                 panCentre set $C0
(1)  280/   114D3 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  280/   114D3 : E0C0                        dc.b $E0,panCenter+$00
(1)  281/   114D5 : 800C B308 04        	dc.b	nRst, $0C, nD4, $08, $04
(1)  282/   114DA : (MACRO)              	smpsFMAlterVol      $0A
(1)  282/   114DA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  282/   114DA :                                     dc.b    $E5,$0A,
(1)  282/   114DA : =>TRUE                       else
(1)  282/   114DA : E60A                                dc.b    $E6,$0A
(1)  282/   114DC : [282]                        endif
(1)  283/   114DC : (MACRO)              	smpsPan             panRight, $00
(1)  283/   114DC : =$0                  panNone set $00
(1)  283/   114DC : =$40                 panRight set $40
(1)  283/   114DC : =$80                 panLeft set $80
(1)  283/   114DC : =$C0                 panCentre set $C0
(1)  283/   114DC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  283/   114DC : E040                        dc.b $E0,panRight+$00
(1)  284/   114DE : 08                  	dc.b	$08
(1)  285/   114DF : (MACRO)              	smpsFMAlterVol      $F6
(1)  285/   114DF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  285/   114DF :                                     dc.b    $E5,$F6,
(1)  285/   114DF : =>TRUE                       else
(1)  285/   114DF : E6F6                                dc.b    $E6,$F6
(1)  285/   114E1 : [285]                        endif
(1)  286/   114E1 : (MACRO)              	smpsPan             panCenter, $00
(1)  286/   114E1 : =$0                  panNone set $00
(1)  286/   114E1 : =$40                 panRight set $40
(1)  286/   114E1 : =$80                 panLeft set $80
(1)  286/   114E1 : =$C0                 panCentre set $C0
(1)  286/   114E1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  286/   114E1 : E0C0                        dc.b $E0,panCenter+$00
(1)  287/   114E3 : 04                  	dc.b	$04
(1)  288/   114E4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  288/   114E4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  288/   114E4 :                                     dc.b    $E5,$0A,
(1)  288/   114E4 : =>TRUE                       else
(1)  288/   114E4 : E60A                                dc.b    $E6,$0A
(1)  288/   114E6 : [288]                        endif
(1)  289/   114E6 : (MACRO)              	smpsPan             panRight, $00
(1)  289/   114E6 : =$0                  panNone set $00
(1)  289/   114E6 : =$40                 panRight set $40
(1)  289/   114E6 : =$80                 panLeft set $80
(1)  289/   114E6 : =$C0                 panCentre set $C0
(1)  289/   114E6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  289/   114E6 : E040                        dc.b $E0,panRight+$00
(1)  290/   114E8 : 08                  	dc.b	$08
(1)  291/   114E9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  291/   114E9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  291/   114E9 :                                     dc.b    $E5,$F6,
(1)  291/   114E9 : =>TRUE                       else
(1)  291/   114E9 : E6F6                                dc.b    $E6,$F6
(1)  291/   114EB : [291]                        endif
(1)  292/   114EB : (MACRO)              	smpsPan             panCenter, $00
(1)  292/   114EB : =$0                  panNone set $00
(1)  292/   114EB : =$40                 panRight set $40
(1)  292/   114EB : =$80                 panLeft set $80
(1)  292/   114EB : =$C0                 panCentre set $C0
(1)  292/   114EB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  292/   114EB : E0C0                        dc.b $E0,panCenter+$00
(1)  293/   114ED : 04                  	dc.b	$04
(1)  294/   114EE : (MACRO)              	smpsReturn
(1)  294/   114EE : =>TRUE                       if SonicDriverVer>=3
(1)  294/   114EE : F9                                  dc.b    $F9
(1)  294/   114EF : =>FALSE                      else
(1)  294/   114EF :                                     dc.b    $E3
(1)  294/   114EF : [294]                        endif
(1)  295/   114EF :                     
(1)  296/   114EF :                     Evening_Star_Call03:
(1)  297/   114EF : 800C B108 04        	dc.b	nRst, $0C, nC4, $08, $04
(1)  298/   114F4 : (MACRO)              	smpsFMAlterVol      $0A
(1)  298/   114F4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  298/   114F4 :                                     dc.b    $E5,$0A,
(1)  298/   114F4 : =>TRUE                       else
(1)  298/   114F4 : E60A                                dc.b    $E6,$0A
(1)  298/   114F6 : [298]                        endif
(1)  299/   114F6 : (MACRO)              	smpsPan             panRight, $00
(1)  299/   114F6 : =$0                  panNone set $00
(1)  299/   114F6 : =$40                 panRight set $40
(1)  299/   114F6 : =$80                 panLeft set $80
(1)  299/   114F6 : =$C0                 panCentre set $C0
(1)  299/   114F6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  299/   114F6 : E040                        dc.b $E0,panRight+$00
(1)  300/   114F8 : 08                  	dc.b	$08
(1)  301/   114F9 : (MACRO)              	smpsFMAlterVol      $F6
(1)  301/   114F9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  301/   114F9 :                                     dc.b    $E5,$F6,
(1)  301/   114F9 : =>TRUE                       else
(1)  301/   114F9 : E6F6                                dc.b    $E6,$F6
(1)  301/   114FB : [301]                        endif
(1)  302/   114FB : (MACRO)              	smpsPan             panCenter, $00
(1)  302/   114FB : =$0                  panNone set $00
(1)  302/   114FB : =$40                 panRight set $40
(1)  302/   114FB : =$80                 panLeft set $80
(1)  302/   114FB : =$C0                 panCentre set $C0
(1)  302/   114FB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  302/   114FB : E0C0                        dc.b $E0,panCenter+$00
(1)  303/   114FD : 04                  	dc.b	$04
(1)  304/   114FE : (MACRO)              	smpsFMAlterVol      $0A
(1)  304/   114FE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  304/   114FE :                                     dc.b    $E5,$0A,
(1)  304/   114FE : =>TRUE                       else
(1)  304/   114FE : E60A                                dc.b    $E6,$0A
(1)  304/   11500 : [304]                        endif
(1)  305/   11500 : (MACRO)              	smpsPan             panRight, $00
(1)  305/   11500 : =$0                  panNone set $00
(1)  305/   11500 : =$40                 panRight set $40
(1)  305/   11500 : =$80                 panLeft set $80
(1)  305/   11500 : =$C0                 panCentre set $C0
(1)  305/   11500 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  305/   11500 : E040                        dc.b $E0,panRight+$00
(1)  306/   11502 : 08                  	dc.b	$08
(1)  307/   11503 : (MACRO)              	smpsFMAlterVol      $F6
(1)  307/   11503 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  307/   11503 :                                     dc.b    $E5,$F6,
(1)  307/   11503 : =>TRUE                       else
(1)  307/   11503 : E6F6                                dc.b    $E6,$F6
(1)  307/   11505 : [307]                        endif
(1)  308/   11505 : (MACRO)              	smpsPan             panCenter, $00
(1)  308/   11505 : =$0                  panNone set $00
(1)  308/   11505 : =$40                 panRight set $40
(1)  308/   11505 : =$80                 panLeft set $80
(1)  308/   11505 : =$C0                 panCentre set $C0
(1)  308/   11505 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  308/   11505 : E0C0                        dc.b $E0,panCenter+$00
(1)  309/   11507 : 0408 04             	dc.b	$04, $08, $04
(1)  310/   1150A : (MACRO)              	smpsFMAlterVol      $0A
(1)  310/   1150A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  310/   1150A :                                     dc.b    $E5,$0A,
(1)  310/   1150A : =>TRUE                       else
(1)  310/   1150A : E60A                                dc.b    $E6,$0A
(1)  310/   1150C : [310]                        endif
(1)  311/   1150C : (MACRO)              	smpsPan             panRight, $00
(1)  311/   1150C : =$0                  panNone set $00
(1)  311/   1150C : =$40                 panRight set $40
(1)  311/   1150C : =$80                 panLeft set $80
(1)  311/   1150C : =$C0                 panCentre set $C0
(1)  311/   1150C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  311/   1150C : E040                        dc.b $E0,panRight+$00
(1)  312/   1150E : 08                  	dc.b	$08
(1)  313/   1150F : (MACRO)              	smpsFMAlterVol      $F6
(1)  313/   1150F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  313/   1150F :                                     dc.b    $E5,$F6,
(1)  313/   1150F : =>TRUE                       else
(1)  313/   1150F : E6F6                                dc.b    $E6,$F6
(1)  313/   11511 : [313]                        endif
(1)  314/   11511 : (MACRO)              	smpsPan             panCenter, $00
(1)  314/   11511 : =$0                  panNone set $00
(1)  314/   11511 : =$40                 panRight set $40
(1)  314/   11511 : =$80                 panLeft set $80
(1)  314/   11511 : =$C0                 panCentre set $C0
(1)  314/   11511 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  314/   11511 : E0C0                        dc.b $E0,panCenter+$00
(1)  315/   11513 : 04                  	dc.b	$04
(1)  316/   11514 : (MACRO)              	smpsFMAlterVol      $0A
(1)  316/   11514 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  316/   11514 :                                     dc.b    $E5,$0A,
(1)  316/   11514 : =>TRUE                       else
(1)  316/   11514 : E60A                                dc.b    $E6,$0A
(1)  316/   11516 : [316]                        endif
(1)  317/   11516 : (MACRO)              	smpsPan             panRight, $00
(1)  317/   11516 : =$0                  panNone set $00
(1)  317/   11516 : =$40                 panRight set $40
(1)  317/   11516 : =$80                 panLeft set $80
(1)  317/   11516 : =$C0                 panCentre set $C0
(1)  317/   11516 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  317/   11516 : E040                        dc.b $E0,panRight+$00
(1)  318/   11518 : 0C                  	dc.b	$0C
(1)  319/   11519 : (MACRO)              	smpsFMAlterVol      $F6
(1)  319/   11519 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  319/   11519 :                                     dc.b    $E5,$F6,
(1)  319/   11519 : =>TRUE                       else
(1)  319/   11519 : E6F6                                dc.b    $E6,$F6
(1)  319/   1151B : [319]                        endif
(1)  320/   1151B : (MACRO)              	smpsPan             panCenter, $00
(1)  320/   1151B : =$0                  panNone set $00
(1)  320/   1151B : =$40                 panRight set $40
(1)  320/   1151B : =$80                 panLeft set $80
(1)  320/   1151B : =$C0                 panCentre set $C0
(1)  320/   1151B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  320/   1151B : E0C0                        dc.b $E0,panCenter+$00
(1)  321/   1151D : 0804                	dc.b	$08, $04
(1)  322/   1151F : (MACRO)              	smpsReturn
(1)  322/   1151F : =>TRUE                       if SonicDriverVer>=3
(1)  322/   1151F : F9                                  dc.b    $F9
(1)  322/   11520 : =>FALSE                      else
(1)  322/   11520 :                                     dc.b    $E3
(1)  322/   11520 : [322]                        endif
(1)  323/   11520 :                     
(1)  324/   11520 :                     Evening_Star_Call04:
(1)  325/   11520 : (MACRO)              	smpsFMAlterVol      $0A
(1)  325/   11520 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  325/   11520 :                                     dc.b    $E5,$0A,
(1)  325/   11520 : =>TRUE                       else
(1)  325/   11520 : E60A                                dc.b    $E6,$0A
(1)  325/   11522 : [325]                        endif
(1)  326/   11522 : (MACRO)              	smpsPan             panRight, $00
(1)  326/   11522 : =$0                  panNone set $00
(1)  326/   11522 : =$40                 panRight set $40
(1)  326/   11522 : =$80                 panLeft set $80
(1)  326/   11522 : =$C0                 panCentre set $C0
(1)  326/   11522 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  326/   11522 : E040                        dc.b $E0,panRight+$00
(1)  327/   11524 : B308                	dc.b	nD4, $08
(1)  328/   11526 : (MACRO)              	smpsFMAlterVol      $F6
(1)  328/   11526 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  328/   11526 :                                     dc.b    $E5,$F6,
(1)  328/   11526 : =>TRUE                       else
(1)  328/   11526 : E6F6                                dc.b    $E6,$F6
(1)  328/   11528 : [328]                        endif
(1)  329/   11528 : (MACRO)              	smpsPan             panCenter, $00
(1)  329/   11528 : =$0                  panNone set $00
(1)  329/   11528 : =$40                 panRight set $40
(1)  329/   11528 : =$80                 panLeft set $80
(1)  329/   11528 : =$C0                 panCentre set $C0
(1)  329/   11528 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  329/   11528 : E0C0                        dc.b $E0,panCenter+$00
(1)  330/   1152A : 04                  	dc.b	$04
(1)  331/   1152B : (MACRO)              	smpsLoop            $00, $08, Evening_Star_Call04
(1)  331/   1152B : F7                          dc.b    $F7
(1)  331/   1152C : 0008                        dc.b    $00,$08
(1)  331/   1152E : =>TRUE                       if SonicDriverVer<>1
(1)  331/   1152E : 2095                                dc.w    z80_ptr(Evening_Star_Call04)
(1)  331/   11530 : =>FALSE                      else
(1)  331/   11530 :                                     dc.w    Evening_Star_Call04-*-1
(1)  331/   11530 : [331]                        endif
(1)  332/   11530 : (MACRO)              	smpsReturn
(1)  332/   11530 : =>TRUE                       if SonicDriverVer>=3
(1)  332/   11530 : F9                                  dc.b    $F9
(1)  332/   11531 : =>FALSE                      else
(1)  332/   11531 :                                     dc.b    $E3
(1)  332/   11531 : [332]                        endif
(1)  333/   11531 :                     
(1)  334/   11531 :                     ; FM5 Data
(1)  335/   11531 :                     Evening_Star_FM5:
(1)  336/   11531 : (MACRO)              	smpsSetvoice        $02
(1)  336/   11531 :  (MACRO-2)                   smpsFMvoice $02
(1)  336/   11531 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  336/   11531 :                                     dc.b    $EF,$02|$80,+$81
(1)  336/   11531 : =>TRUE                       else
(1)  336/   11531 : EF02                                dc.b    $EF,$02
(1)  336/   11533 : [336]                        endif
(1)  337/   11533 : 8060 8080 80        	dc.b	nRst, $60, nRst, nRst, nRst
(1)  338/   11538 : (MACRO)              	smpsPan             panRight, $00
(1)  338/   11538 : =$0                  panNone set $00
(1)  338/   11538 : =$40                 panRight set $40
(1)  338/   11538 : =$80                 panLeft set $80
(1)  338/   11538 : =$C0                 panCentre set $C0
(1)  338/   11538 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  338/   11538 : E040                        dc.b $E0,panRight+$00
(1)  339/   1153A : (MACRO)              	smpsModSet          $05, $01, $03, $02
(1)  339/   1153A : F0                          dc.b    $F0
(1)  339/   1153B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  339/   1153B :                                     dc.b    $05+1,$01,$03,(($02+1) * $01) & $FF
(1)  339/   1153B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  339/   1153B :                                     dc.b    $05-1,$01,$03,conv0To256($02)/conv0To256($01)-1
(1)  339/   1153B : =>TRUE                       else
(1)  339/   1153B : 0501 0302                           dc.b    $05,$01,$03,$02
(1)  339/   1153F : [339]                        endif
(1)  339/   1153F :                             ;dc.b   $01,$03,$02
(1)  340/   1153F :                     
(1)  341/   1153F :                     Evening_Star_Jump00:
(1)  342/   1153F : 8004                	dc.b	nRst, $04
(1)  343/   11541 : (MACRO)              	smpsCall            Evening_Star_Call01
(1)  343/   11541 : F8                          dc.b    $F8
(1)  343/   11542 : =>TRUE                       if SonicDriverVer<>1
(1)  343/   11542 : F392                                dc.w    z80_ptr(Evening_Star_Call01)
(1)  343/   11544 : =>FALSE                      else
(1)  343/   11544 :                                     dc.w    Evening_Star_Call01-*-1
(1)  343/   11544 : [343]                        endif
(1)  344/   11544 : 8060                	dc.b	nRst, $60
(1)  345/   11546 : (MACRO)              	smpsCall            Evening_Star_Call01
(1)  345/   11546 : F8                          dc.b    $F8
(1)  345/   11547 : =>TRUE                       if SonicDriverVer<>1
(1)  345/   11547 : F392                                dc.w    z80_ptr(Evening_Star_Call01)
(1)  345/   11549 : =>FALSE                      else
(1)  345/   11549 :                                     dc.w    Evening_Star_Call01-*-1
(1)  345/   11549 : [345]                        endif
(1)  346/   11549 : 805C                	dc.b	nRst, $5C
(1)  347/   1154B : (MACRO)              	smpsJump            Evening_Star_Jump00
(1)  347/   1154B : F6                          dc.b    $F6
(1)  347/   1154C : =>TRUE                       if SonicDriverVer<>1
(1)  347/   1154C : 3F95                                dc.w    z80_ptr(Evening_Star_Jump00)
(1)  347/   1154E : =>FALSE                      else
(1)  347/   1154E :                                     dc.w    Evening_Star_Jump00-*-1
(1)  347/   1154E : [347]                        endif
(1)  348/   1154E :                     
(1)  349/   1154E :                     ; Unreachable
(1)  350/   1154E : (MACRO)              	smpsStop
(1)  350/   1154E : F2                          dc.b    $F2
(1)  351/   1154F :                     
(1)  352/   1154F :                     ; PSG1 Data
(1)  353/   1154F :                     Evening_Star_PSG1:
(1)  354/   1154F : (MACRO)              	smpsPSGvoice        sTone_04
(1)  354/   1154F : F504                        dc.b    $F5,sTone_04
(1)  355/   11551 : 8060 8080 8030      	dc.b	nRst, $60, nRst, nRst, nRst, $30, nG3, $0C, nA3, nBb3, $08, nC4
            11557 : AC0C AEAF 08B1    
(1)  356/   1155D : 04B3 08B4 04        	dc.b	$04, nD4, $08, nEb4, $04
(1)  357/   11562 :                     
(1)  358/   11562 :                     Evening_Star_Jump03:
(1)  359/   11562 : B660 E718 B4B3      	dc.b	nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack, $18, nC4
            11568 : B4B3 60E7 18B1    
(1)  360/   1156E : AFB1 AC60 AB30      	dc.b	nBb3, nC4, nG3, $60, nFs3, $30, nD3, nG3, $60, nG3, $18, nA3
            11574 : A7AC 60AC 18AE    
(1)  361/   1157A : AFB1 B660 E718      	dc.b	nBb3, nC4, nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack
            11580 : B4B3 B4B3 60E7    
(1)  362/   11586 : 3080 20AF 04B1      	dc.b	$30, nRst, $20, nBb3, $04, nC4, $08, nD4, $04, nG3, $60, nFs3
            1158C : 08B3 04AC 60AB    
(1)  363/   11592 : 30A7 AC60 AC18      	dc.b	$30, nD3, nG3, $60, nG3, $18, nA3, nBb3, $0C, nC4, nD4, nEb4
            11598 : AEAF 0CB1 B3B4    
(1)  364/   1159E : (MACRO)              	smpsJump            Evening_Star_Jump03
(1)  364/   1159E : F6                          dc.b    $F6
(1)  364/   1159F : =>TRUE                       if SonicDriverVer<>1
(1)  364/   1159F : 6295                                dc.w    z80_ptr(Evening_Star_Jump03)
(1)  364/   115A1 : =>FALSE                      else
(1)  364/   115A1 :                                     dc.w    Evening_Star_Jump03-*-1
(1)  364/   115A1 : [364]                        endif
(1)  365/   115A1 :                     
(1)  366/   115A1 :                     ; PSG2 Data
(1)  367/   115A1 :                     Evening_Star_PSG2:
(1)  368/   115A1 : (MACRO)              	smpsPSGvoice        sTone_04
(1)  368/   115A1 : F504                        dc.b    $F5,sTone_04
(1)  369/   115A3 : (MACRO)              	smpsModSet          $04, $01, $01, $03
(1)  369/   115A3 : F0                          dc.b    $F0
(1)  369/   115A4 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  369/   115A4 :                                     dc.b    $04+1,$01,$01,(($03+1) * $01) & $FF
(1)  369/   115A4 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  369/   115A4 :                                     dc.b    $04-1,$01,$01,conv0To256($03)/conv0To256($01)-1
(1)  369/   115A4 : =>TRUE                       else
(1)  369/   115A4 : 0401 0103                           dc.b    $04,$01,$01,$03
(1)  369/   115A8 : [369]                        endif
(1)  369/   115A8 :                             ;dc.b   $01,$01,$03
(1)  370/   115A8 : 8004 8060 8080      	dc.b	nRst, $04, nRst, $60, nRst, nRst, nRst, $30, nG3, $0C, nA3, nBb3
            115AE : 8030 AC0C AEAF    
(1)  371/   115B4 : 08B1 04B3 08B4 04   	dc.b	$08, nC4, $04, nD4, $08, nEb4, $04
(1)  372/   115BB :                     
(1)  373/   115BB :                     Evening_Star_Jump02:
(1)  374/   115BB : B660 E718 B4B3      	dc.b	nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack, $18, nC4
            115C1 : B4B3 60E7 18B1    
(1)  375/   115C7 : AFB1 AC60 AB30      	dc.b	nBb3, nC4, nG3, $60, nFs3, $30, nD3, nG3, $60, nG3, $18, nA3
            115CD : A7AC 60AC 18AE    
(1)  376/   115D3 : AFB1 B660 E718      	dc.b	nBb3, nC4, nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack
            115D9 : B4B3 B4B3 60E7    
(1)  377/   115DF : 3080 20AF 04B1      	dc.b	$30, nRst, $20, nBb3, $04, nC4, $08, nD4, $04, nG3, $60, nFs3
            115E5 : 08B3 04AC 60AB    
(1)  378/   115EB : 30A7 AC60 AC18      	dc.b	$30, nD3, nG3, $60, nG3, $18, nA3, nBb3, $0C, nC4, nD4, nEb4
            115F1 : AEAF 0CB1 B3B4    
(1)  379/   115F7 : (MACRO)              	smpsJump            Evening_Star_Jump02
(1)  379/   115F7 : F6                          dc.b    $F6
(1)  379/   115F8 : =>TRUE                       if SonicDriverVer<>1
(1)  379/   115F8 : BB95                                dc.w    z80_ptr(Evening_Star_Jump02)
(1)  379/   115FA : =>FALSE                      else
(1)  379/   115FA :                                     dc.w    Evening_Star_Jump02-*-1
(1)  379/   115FA : [379]                        endif
(1)  380/   115FA :                     	
(1)  381/   115FA :                     ; Unused
(1)  382/   115FA :                     UnusedPSG2Loop00:
(1)  383/   115FA : A008 04A7 08A0 04   	dc.b	nG2, $08, $04, nD3, $08, nG2, $04
(1)  384/   11601 : (MACRO)              	smpsLoop            $00, $04, UnusedPSG2Loop00
(1)  384/   11601 : F7                          dc.b    $F7
(1)  384/   11602 : 0004                        dc.b    $00,$04
(1)  384/   11604 : =>TRUE                       if SonicDriverVer<>1
(1)  384/   11604 : FA95                                dc.w    z80_ptr(UnusedPSG2Loop00)
(1)  384/   11606 : =>FALSE                      else
(1)  384/   11606 :                                     dc.w    UnusedPSG2Loop00-*-1
(1)  384/   11606 : [384]                        endif
(1)  385/   11606 : (MACRO)              	smpsReturn
(1)  385/   11606 : =>TRUE                       if SonicDriverVer>=3
(1)  385/   11606 : F9                                  dc.b    $F9
(1)  385/   11607 : =>FALSE                      else
(1)  385/   11607 :                                     dc.b    $E3
(1)  385/   11607 : [385]                        endif
(1)  386/   11607 :                     
(1)  387/   11607 :                     ; Unused
(1)  388/   11607 :                     UnusedPSG2Loop01:
(1)  389/   11607 : 9F08 04A5 089F 04   	dc.b	nFs2, $08, $04, nC3, $08, nFs2, $04
(1)  390/   1160E : (MACRO)              	smpsLoop            $00, $04, UnusedPSG2Loop01
(1)  390/   1160E : F7                          dc.b    $F7
(1)  390/   1160F : 0004                        dc.b    $00,$04
(1)  390/   11611 : =>TRUE                       if SonicDriverVer<>1
(1)  390/   11611 : 0796                                dc.w    z80_ptr(UnusedPSG2Loop01)
(1)  390/   11613 : =>FALSE                      else
(1)  390/   11613 :                                     dc.w    UnusedPSG2Loop01-*-1
(1)  390/   11613 : [390]                        endif
(1)  391/   11613 : (MACRO)              	smpsReturn
(1)  391/   11613 : =>TRUE                       if SonicDriverVer>=3
(1)  391/   11613 : F9                                  dc.b    $F9
(1)  391/   11614 : =>FALSE                      else
(1)  391/   11614 :                                     dc.b    $E3
(1)  391/   11614 : [391]                        endif
(1)  392/   11614 :                     
(1)  393/   11614 :                     ; PSG3 Data
(1)  394/   11614 :                     Evening_Star_PSG3:
(1)  395/   11614 : (MACRO)              	smpsPSGform         $E7
(1)  395/   11614 : F3E7                        dc.b    $F3,$E7
(1)  396/   11616 :                     
(1)  397/   11616 :                     Evening_Star_Loop06:
(1)  398/   11616 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  398/   11616 : F502                        dc.b    $F5,sTone_02
(1)  399/   11618 : B108 04             	dc.b	(nMaxPSG2-$23)&$FF, $08, $04
(1)  400/   1161B : (MACRO)              	smpsLoop            $00, $1F, Evening_Star_Loop06
(1)  400/   1161B : F7                          dc.b    $F7
(1)  400/   1161C : 001F                        dc.b    $00,$1F
(1)  400/   1161E : =>TRUE                       if SonicDriverVer<>1
(1)  400/   1161E : 1696                                dc.w    z80_ptr(Evening_Star_Loop06)
(1)  400/   11620 : =>FALSE                      else
(1)  400/   11620 :                                     dc.w    Evening_Star_Loop06-*-1
(1)  400/   11620 : [400]                        endif
(1)  401/   11620 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  401/   11620 : F505                        dc.b    $F5,sTone_05
(1)  402/   11622 : 0C                  	dc.b	$0C
(1)  403/   11623 :                     
(1)  404/   11623 :                     Evening_Star_Loop07:
(1)  405/   11623 : (MACRO)              	smpsCall            Evening_Star_Call0C
(1)  405/   11623 : F8                          dc.b    $F8
(1)  405/   11624 : =>TRUE                       if SonicDriverVer<>1
(1)  405/   11624 : 6196                                dc.w    z80_ptr(Evening_Star_Call0C)
(1)  405/   11626 : =>FALSE                      else
(1)  405/   11626 :                                     dc.w    Evening_Star_Call0C-*-1
(1)  405/   11626 : [405]                        endif
(1)  406/   11626 : (MACRO)              	smpsCall            Evening_Star_Call0D
(1)  406/   11626 : F8                          dc.b    $F8
(1)  406/   11627 : =>TRUE                       if SonicDriverVer<>1
(1)  406/   11627 : 6C96                                dc.w    z80_ptr(Evening_Star_Call0D)
(1)  406/   11629 : =>FALSE                      else
(1)  406/   11629 :                                     dc.w    Evening_Star_Call0D-*-1
(1)  406/   11629 : [406]                        endif
(1)  407/   11629 : (MACRO)              	smpsLoop            $01, $04, Evening_Star_Loop07
(1)  407/   11629 : F7                          dc.b    $F7
(1)  407/   1162A : 0104                        dc.b    $01,$04
(1)  407/   1162C : =>TRUE                       if SonicDriverVer<>1
(1)  407/   1162C : 2396                                dc.w    z80_ptr(Evening_Star_Loop07)
(1)  407/   1162E : =>FALSE                      else
(1)  407/   1162E :                                     dc.w    Evening_Star_Loop07-*-1
(1)  407/   1162E : [407]                        endif
(1)  408/   1162E : (MACRO)              	smpsCall            Evening_Star_Call0C
(1)  408/   1162E : F8                          dc.b    $F8
(1)  408/   1162F : =>TRUE                       if SonicDriverVer<>1
(1)  408/   1162F : 6196                                dc.w    z80_ptr(Evening_Star_Call0C)
(1)  408/   11631 : =>FALSE                      else
(1)  408/   11631 :                                     dc.w    Evening_Star_Call0C-*-1
(1)  408/   11631 : [408]                        endif
(1)  409/   11631 : (MACRO)              	smpsCall            Evening_Star_Call0D
(1)  409/   11631 : F8                          dc.b    $F8
(1)  409/   11632 : =>TRUE                       if SonicDriverVer<>1
(1)  409/   11632 : 6C96                                dc.w    z80_ptr(Evening_Star_Call0D)
(1)  409/   11634 : =>FALSE                      else
(1)  409/   11634 :                                     dc.w    Evening_Star_Call0D-*-1
(1)  409/   11634 : [409]                        endif
(1)  410/   11634 : (MACRO)              	smpsCall            Evening_Star_Call0C
(1)  410/   11634 : F8                          dc.b    $F8
(1)  410/   11635 : =>TRUE                       if SonicDriverVer<>1
(1)  410/   11635 : 6196                                dc.w    z80_ptr(Evening_Star_Call0C)
(1)  410/   11637 : =>FALSE                      else
(1)  410/   11637 :                                     dc.w    Evening_Star_Call0C-*-1
(1)  410/   11637 : [410]                        endif
(1)  411/   11637 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  411/   11637 : F502                        dc.b    $F5,sTone_02
(1)  412/   11639 : B108 0408 0408 04   	dc.b	(nMaxPSG2-$23)&$FF, $08, $04, $08, $04, $08, $04
(1)  413/   11640 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  413/   11640 : F505                        dc.b    $F5,sTone_05
(1)  414/   11642 : 08                  	dc.b	$08
(1)  415/   11643 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  415/   11643 : F502                        dc.b    $F5,sTone_02
(1)  416/   11645 : 0480 1880 08B1 04   	dc.b	$04, nRst, $18, nRst, $08, (nMaxPSG2-$23)&$FF, $04
(1)  417/   1164C : (MACRO)              	smpsPSGvoice        sTone_05
(1)  417/   1164C : F505                        dc.b    $F5,sTone_05
(1)  418/   1164E : 08                  	dc.b	$08
(1)  419/   1164F : (MACRO)              	smpsPSGvoice        sTone_02
(1)  419/   1164F : F502                        dc.b    $F5,sTone_02
(1)  420/   11651 : 04                  	dc.b	$04
(1)  421/   11652 : (MACRO)              	smpsCall            Evening_Star_Call0C
(1)  421/   11652 : F8                          dc.b    $F8
(1)  421/   11653 : =>TRUE                       if SonicDriverVer<>1
(1)  421/   11653 : 6196                                dc.w    z80_ptr(Evening_Star_Call0C)
(1)  421/   11655 : =>FALSE                      else
(1)  421/   11655 :                                     dc.w    Evening_Star_Call0C-*-1
(1)  421/   11655 : [421]                        endif
(1)  422/   11655 : (MACRO)              	smpsCall            Evening_Star_Call0D
(1)  422/   11655 : F8                          dc.b    $F8
(1)  422/   11656 : =>TRUE                       if SonicDriverVer<>1
(1)  422/   11656 : 6C96                                dc.w    z80_ptr(Evening_Star_Call0D)
(1)  422/   11658 : =>FALSE                      else
(1)  422/   11658 :                                     dc.w    Evening_Star_Call0D-*-1
(1)  422/   11658 : [422]                        endif
(1)  423/   11658 : (MACRO)              	smpsCall            Evening_Star_Call0C
(1)  423/   11658 : F8                          dc.b    $F8
(1)  423/   11659 : =>TRUE                       if SonicDriverVer<>1
(1)  423/   11659 : 6196                                dc.w    z80_ptr(Evening_Star_Call0C)
(1)  423/   1165B : =>FALSE                      else
(1)  423/   1165B :                                     dc.w    Evening_Star_Call0C-*-1
(1)  423/   1165B : [423]                        endif
(1)  424/   1165B : (MACRO)              	smpsCall            Evening_Star_Call0D
(1)  424/   1165B : F8                          dc.b    $F8
(1)  424/   1165C : =>TRUE                       if SonicDriverVer<>1
(1)  424/   1165C : 6C96                                dc.w    z80_ptr(Evening_Star_Call0D)
(1)  424/   1165E : =>FALSE                      else
(1)  424/   1165E :                                     dc.w    Evening_Star_Call0D-*-1
(1)  424/   1165E : [424]                        endif
(1)  425/   1165E : (MACRO)              	smpsJump            Evening_Star_Loop07
(1)  425/   1165E : F6                          dc.b    $F6
(1)  425/   1165F : =>TRUE                       if SonicDriverVer<>1
(1)  425/   1165F : 2396                                dc.w    z80_ptr(Evening_Star_Loop07)
(1)  425/   11661 : =>FALSE                      else
(1)  425/   11661 :                                     dc.w    Evening_Star_Loop07-*-1
(1)  425/   11661 : [425]                        endif
(1)  426/   11661 :                     
(1)  427/   11661 :                     Evening_Star_Call0C:
(1)  428/   11661 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  428/   11661 : F502                        dc.b    $F5,sTone_02
(1)  429/   11663 : B108 04             	dc.b	(nMaxPSG2-$23)&$FF, $08, $04
(1)  430/   11666 : (MACRO)              	smpsLoop            $00, $08, Evening_Star_Call0C
(1)  430/   11666 : F7                          dc.b    $F7
(1)  430/   11667 : 0008                        dc.b    $00,$08
(1)  430/   11669 : =>TRUE                       if SonicDriverVer<>1
(1)  430/   11669 : 6196                                dc.w    z80_ptr(Evening_Star_Call0C)
(1)  430/   1166B : =>FALSE                      else
(1)  430/   1166B :                                     dc.w    Evening_Star_Call0C-*-1
(1)  430/   1166B : [430]                        endif
(1)  431/   1166B : (MACRO)              	smpsReturn
(1)  431/   1166B : =>TRUE                       if SonicDriverVer>=3
(1)  431/   1166B : F9                                  dc.b    $F9
(1)  431/   1166C : =>FALSE                      else
(1)  431/   1166C :                                     dc.b    $E3
(1)  431/   1166C : [431]                        endif
(1)  432/   1166C :                     
(1)  433/   1166C :                     Evening_Star_Call0D:
(1)  434/   1166C : (MACRO)              	smpsPSGvoice        sTone_02
(1)  434/   1166C : F502                        dc.b    $F5,sTone_02
(1)  435/   1166E : B108 04             	dc.b	(nMaxPSG2-$23)&$FF, $08, $04
(1)  436/   11671 : (MACRO)              	smpsLoop            $00, $07, Evening_Star_Call0D
(1)  436/   11671 : F7                          dc.b    $F7
(1)  436/   11672 : 0007                        dc.b    $00,$07
(1)  436/   11674 : =>TRUE                       if SonicDriverVer<>1
(1)  436/   11674 : 6C96                                dc.w    z80_ptr(Evening_Star_Call0D)
(1)  436/   11676 : =>FALSE                      else
(1)  436/   11676 :                                     dc.w    Evening_Star_Call0D-*-1
(1)  436/   11676 : [436]                        endif
(1)  437/   11676 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  437/   11676 : F505                        dc.b    $F5,sTone_05
(1)  438/   11678 : 0C                  	dc.b	$0C
(1)  439/   11679 : (MACRO)              	smpsReturn
(1)  439/   11679 : =>TRUE                       if SonicDriverVer>=3
(1)  439/   11679 : F9                                  dc.b    $F9
(1)  439/   1167A : =>FALSE                      else
(1)  439/   1167A :                                     dc.b    $E3
(1)  439/   1167A : [439]                        endif
(1)  440/   1167A :                     
(1)  441/   1167A :                     ; DAC Data
(1)  442/   1167A :                     Evening_Star_DAC:
(1)  443/   1167A : 8018 81             	dc.b	nRst, $18, dKick
(1)  444/   1167D : (MACRO)              	smpsLoop            $00, $07, Evening_Star_DAC
(1)  444/   1167D : F7                          dc.b    $F7
(1)  444/   1167E : 0007                        dc.b    $00,$07
(1)  444/   11680 : =>TRUE                       if SonicDriverVer<>1
(1)  444/   11680 : 7A96                                dc.w    z80_ptr(Evening_Star_DAC)
(1)  444/   11682 : =>FALSE                      else
(1)  444/   11682 :                                     dc.w    Evening_Star_DAC-*-1
(1)  444/   11682 : [444]                        endif
(1)  445/   11682 : 810C 8208 0483      	dc.b	dKick, $0C, dSnare, $08, $04, dHighTom, $08, dMidTom, $04, dLowTom, $08, $04
            11688 : 0884 0485 0804    
(1)  446/   1168E :                     
(1)  447/   1168E :                     Evening_Star_Loop00:
(1)  448/   1168E : (MACRO)              	smpsCall            Evening_Star_Call00
(1)  448/   1168E : F8                          dc.b    $F8
(1)  448/   1168F : =>TRUE                       if SonicDriverVer<>1
(1)  448/   1168F : B796                                dc.w    z80_ptr(Evening_Star_Call00)
(1)  448/   11691 : =>FALSE                      else
(1)  448/   11691 :                                     dc.w    Evening_Star_Call00-*-1
(1)  448/   11691 : [448]                        endif
(1)  449/   11691 : (MACRO)              	smpsLoop            $00, $08, Evening_Star_Loop00
(1)  449/   11691 : F7                          dc.b    $F7
(1)  449/   11692 : 0008                        dc.b    $00,$08
(1)  449/   11694 : =>TRUE                       if SonicDriverVer<>1
(1)  449/   11694 : 8E96                                dc.w    z80_ptr(Evening_Star_Loop00)
(1)  449/   11696 : =>FALSE                      else
(1)  449/   11696 :                                     dc.w    Evening_Star_Loop00-*-1
(1)  449/   11696 : [449]                        endif
(1)  450/   11696 :                     
(1)  451/   11696 :                     Evening_Star_Loop01:
(1)  452/   11696 : (MACRO)              	smpsCall            Evening_Star_Call00
(1)  452/   11696 : F8                          dc.b    $F8
(1)  452/   11697 : =>TRUE                       if SonicDriverVer<>1
(1)  452/   11697 : B796                                dc.w    z80_ptr(Evening_Star_Call00)
(1)  452/   11699 : =>FALSE                      else
(1)  452/   11699 :                                     dc.w    Evening_Star_Call00-*-1
(1)  452/   11699 : [452]                        endif
(1)  453/   11699 : (MACRO)              	smpsLoop            $00, $03, Evening_Star_Loop01
(1)  453/   11699 : F7                          dc.b    $F7
(1)  453/   1169A : 0003                        dc.b    $00,$03
(1)  453/   1169C : =>TRUE                       if SonicDriverVer<>1
(1)  453/   1169C : 9696                                dc.w    z80_ptr(Evening_Star_Loop01)
(1)  453/   1169E : =>FALSE                      else
(1)  453/   1169E :                                     dc.w    Evening_Star_Loop01-*-1
(1)  453/   1169E : [453]                        endif
(1)  454/   1169E : 810C 8182 1404      	dc.b	dKick, $0C, dKick, dSnare, $14, $04, nRst, $18, nRst, $08, dSnare, $04
            116A4 : 8018 8008 8204    
(1)  455/   116AA : 0804                	dc.b	$08, $04
(1)  456/   116AC :                     
(1)  457/   116AC :                     Evening_Star_Loop02:
(1)  458/   116AC : (MACRO)              	smpsCall            Evening_Star_Call00
(1)  458/   116AC : F8                          dc.b    $F8
(1)  458/   116AD : =>TRUE                       if SonicDriverVer<>1
(1)  458/   116AD : B796                                dc.w    z80_ptr(Evening_Star_Call00)
(1)  458/   116AF : =>FALSE                      else
(1)  458/   116AF :                                     dc.w    Evening_Star_Call00-*-1
(1)  458/   116AF : [458]                        endif
(1)  459/   116AF : (MACRO)              	smpsLoop            $00, $04, Evening_Star_Loop02
(1)  459/   116AF : F7                          dc.b    $F7
(1)  459/   116B0 : 0004                        dc.b    $00,$04
(1)  459/   116B2 : =>TRUE                       if SonicDriverVer<>1
(1)  459/   116B2 : AC96                                dc.w    z80_ptr(Evening_Star_Loop02)
(1)  459/   116B4 : =>FALSE                      else
(1)  459/   116B4 :                                     dc.w    Evening_Star_Loop02-*-1
(1)  459/   116B4 : [459]                        endif
(1)  460/   116B4 : (MACRO)              	smpsJump            Evening_Star_Loop00
(1)  460/   116B4 : F6                          dc.b    $F6
(1)  460/   116B5 : =>TRUE                       if SonicDriverVer<>1
(1)  460/   116B5 : 8E96                                dc.w    z80_ptr(Evening_Star_Loop00)
(1)  460/   116B7 : =>FALSE                      else
(1)  460/   116B7 :                                     dc.w    Evening_Star_Loop00-*-1
(1)  460/   116B7 : [460]                        endif
(1)  461/   116B7 :                     
(1)  462/   116B7 :                     Evening_Star_Call00:
(1)  463/   116B7 : 810C 8182 2481      	dc.b	dKick, $0C, dKick, dSnare, $24, dKick, $0C, dSnare, $08, dHighTom, $04, dMidTom
            116BD : 0C82 0883 0484    
(1)  464/   116C3 : 0885 04             	dc.b	$08, dLowTom, $04
(1)  465/   116C6 : (MACRO)              	smpsReturn
(1)  465/   116C6 : =>TRUE                       if SonicDriverVer>=3
(1)  465/   116C6 : F9                                  dc.b    $F9
(1)  465/   116C7 : =>FALSE                      else
(1)  465/   116C7 :                                     dc.b    $E3
(1)  465/   116C7 : [465]                        endif
(1)  466/   116C7 :                     
(1)  467/   116C7 :                     Evening_Star_Voices:
(1)  468/   116C7 :                     ;	Voice $00
(1)  469/   116C7 :                     ;	$29
(1)  470/   116C7 :                     ;	$59, $54, $01, $02, 	$DF, $DF, $9F, $9F, 	$10, $0C, $03, $05
(1)  471/   116C7 :                     ;	$12, $0F, $04, $07, 	$7F, $2F, $4F, $9F, 	$15, $1E, $1C, $80
(1)  472/   116C7 : (MACRO)              	smpsVcAlgorithm     $01
(1)  472/   116C7 : =$1                  vcAlgorithm set $01
(1)  473/   116C7 : (MACRO)              	smpsVcFeedback      $05
(1)  473/   116C7 : =$5                  vcFeedback set $05
(1)  474/   116C7 : (MACRO)              	smpsVcUnusedBits    $00
(1)  474/   116C7 : =$0                  vcUnusedBits set $00
(1)  474/   116C7 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  474/   116C7 :                                     set vcD1R1Unk,<<5
(1)  474/   116C7 :                                     set vcD1R2Unk,<<5
(1)  474/   116C7 :                                     set vcD1R3Unk,<<5
(1)  474/   116C7 :                                     set vcD1R4Unk,<<5
(1)  474/   116C7 : =>TRUE                       else
(1)  474/   116C7 : =$0                                  set vcD1R1Unk,0
(1)  474/   116C7 : =$0                                  set vcD1R2Unk,0
(1)  474/   116C7 : =$0                                  set vcD1R3Unk,0
(1)  474/   116C7 : =$0                                  set vcD1R4Unk,0
(1)  474/   116C7 : [474]                        endif
(1)  475/   116C7 : (MACRO)              	smpsVcDetune        $00, $00, $05, $05
(1)  475/   116C7 : =$0                          set vcDT1,$00
(1)  475/   116C7 : =$0                          set vcDT2,$00
(1)  475/   116C7 : =$5                          set vcDT3,$05
(1)  475/   116C7 : =$5                          set vcDT4,$05
(1)  476/   116C7 : (MACRO)              	smpsVcCoarseFreq    $02, $01, $04, $09
(1)  476/   116C7 : =$2                          set vcCF1,$02
(1)  476/   116C7 : =$1                          set vcCF2,$01
(1)  476/   116C7 : =$4                          set vcCF3,$04
(1)  476/   116C7 : =$9                          set vcCF4,$09
(1)  477/   116C7 : (MACRO)              	smpsVcRateScale     $02, $02, $03, $03
(1)  477/   116C7 : =$2                          set vcRS1,$02
(1)  477/   116C7 : =$2                          set vcRS2,$02
(1)  477/   116C7 : =$3                          set vcRS3,$03
(1)  477/   116C7 : =$3                          set vcRS4,$03
(1)  478/   116C7 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  478/   116C7 : =$1F                         set vcAR1,$1F
(1)  478/   116C7 : =$1F                         set vcAR2,$1F
(1)  478/   116C7 : =$1F                         set vcAR3,$1F
(1)  478/   116C7 : =$1F                         set vcAR4,$1F
(1)  479/   116C7 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  479/   116C7 : =>FALSE                      if SourceSMPS2ASM==0
(1)  479/   116C7 :                                     set vcAM1,$00<<5
(1)  479/   116C7 :                                     set vcAM2,$00<<5
(1)  479/   116C7 :                                     set vcAM3,$00<<5
(1)  479/   116C7 :                                     set vcAM4,$00<<5
(1)  479/   116C7 : =>TRUE                       else
(1)  479/   116C7 : =$0                                  set vcAM1,$00<<7
(1)  479/   116C7 : =$0                                  set vcAM2,$00<<7
(1)  479/   116C7 : =$0                                  set vcAM3,$00<<7
(1)  479/   116C7 : =$0                                  set vcAM4,$00<<7
(1)  479/   116C7 : [479]                        endif
(1)  480/   116C7 : (MACRO)              	smpsVcDecayRate1    $05, $03, $0C, $10
(1)  480/   116C7 : =$5                          set vcD1R1,$05
(1)  480/   116C7 : =$3                          set vcD1R2,$03
(1)  480/   116C7 : =$C                          set vcD1R3,$0C
(1)  480/   116C7 : =$10                         set vcD1R4,$10
(1)  481/   116C7 : (MACRO)              	smpsVcDecayRate2    $07, $04, $0F, $12
(1)  481/   116C7 : =$7                          set vcD2R1,$07
(1)  481/   116C7 : =$4                          set vcD2R2,$04
(1)  481/   116C7 : =$F                          set vcD2R3,$0F
(1)  481/   116C7 : =$12                         set vcD2R4,$12
(1)  482/   116C7 : (MACRO)              	smpsVcDecayLevel    $09, $04, $02, $07
(1)  482/   116C7 : =$9                          set vcDL1,$09
(1)  482/   116C7 : =$4                          set vcDL2,$04
(1)  482/   116C7 : =$2                          set vcDL3,$02
(1)  482/   116C7 : =$7                          set vcDL4,$07
(1)  483/   116C7 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  483/   116C7 : =$F                          set vcRR1,$0F
(1)  483/   116C7 : =$F                          set vcRR2,$0F
(1)  483/   116C7 : =$F                          set vcRR3,$0F
(1)  483/   116C7 : =$F                          set vcRR4,$0F
(1)  484/   116C7 : (MACRO)              	smpsVcTotalLevel    $80, $1C, $1E, $15
(1)  484/   116C7 : =$80                         set vcTL1,$80
(1)  484/   116C7 : =$1C                         set vcTL2,$1C
(1)  484/   116C7 : =$1E                         set vcTL3,$1E
(1)  484/   116C7 : =$15                         set vcTL4,$15
(1)  484/   116C7 : 29                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  484/   116C8 :                     ;   0     1     2     3     4     5     6     7
(1)  484/   116C8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  484/   116C8 : =>FALSE                      if SourceSMPS2ASM==0
(1)  484/   116C8 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  484/   116C8 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  484/   116C8 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  484/   116C8 :                                     set vcTLMask1,$80
(1)  484/   116C8 : =>TRUE                       else
(1)  484/   116C8 : =$0                                  set vcTLMask4,0
(1)  484/   116C8 : =$0                                  set vcTLMask3,0
(1)  484/   116C8 : =$0                                  set vcTLMask2,0
(1)  484/   116C8 : =$0                                  set vcTLMask1,0
(1)  484/   116C8 : [484]                        endif
(1)  484/   116C8 :                     
(1)  484/   116C8 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  484/   116C8 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  484/   116C8 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  484/   116C8 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  484/   116C8 :                                     set vcTLMask1,$80
(1)  484/   116C8 :                                     set vcTL1,vcTL1&$7F
(1)  484/   116C8 :                                     set vcTL2,vcTL2&$7F
(1)  484/   116C8 :                                     set vcTL3,vcTL3&$7F
(1)  484/   116C8 :                                     set vcTL4,vcTL4&$7F
(1)  484/   116C8 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  484/   116C8 :                                     if MOMPASS>1
(1)  484/   116C8 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  484/   116C8 : [484]                                endif
(1)  484/   116C8 : [484]                        endif
(1)  484/   116C8 :                     
(1)  484/   116C8 : =>FALSE                      if SonicDriverVer==2
(1)  484/   116C8 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  484/   116C8 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  484/   116C8 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  484/   116C8 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  484/   116C8 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  484/   116C8 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  484/   116C8 : =>TRUE                       else
(1)  484/   116C8 : 5954 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  484/   116CC : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  484/   116D0 : 100C 0305                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  484/   116D4 : 120F 0407                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  484/   116D8 : 7F2F 4F9F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  484/   116DC : 151E 1C80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  484/   116E0 : [484]                        endif
(1)  485/   116E0 :                     
(1)  486/   116E0 :                     ;	Voice $01
(1)  487/   116E0 :                     ;	$01
(1)  488/   116E0 :                     ;	$75, $75, $71, $31, 	$D5, $55, $96, $94, 	$02, $0B, $05, $0D
(1)  489/   116E0 :                     ;	$0A, $0A, $0F, $06, 	$FF, $2F, $3F, $6F, 	$25, $2B, $0F, $80
(1)  490/   116E0 : (MACRO)              	smpsVcAlgorithm     $01
(1)  490/   116E0 : =$1                  vcAlgorithm set $01
(1)  491/   116E0 : (MACRO)              	smpsVcFeedback      $00
(1)  491/   116E0 : =$0                  vcFeedback set $00
(1)  492/   116E0 : (MACRO)              	smpsVcUnusedBits    $00
(1)  492/   116E0 : =$0                  vcUnusedBits set $00
(1)  492/   116E0 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  492/   116E0 :                                     set vcD1R1Unk,<<5
(1)  492/   116E0 :                                     set vcD1R2Unk,<<5
(1)  492/   116E0 :                                     set vcD1R3Unk,<<5
(1)  492/   116E0 :                                     set vcD1R4Unk,<<5
(1)  492/   116E0 : =>TRUE                       else
(1)  492/   116E0 : =$0                                  set vcD1R1Unk,0
(1)  492/   116E0 : =$0                                  set vcD1R2Unk,0
(1)  492/   116E0 : =$0                                  set vcD1R3Unk,0
(1)  492/   116E0 : =$0                                  set vcD1R4Unk,0
(1)  492/   116E0 : [492]                        endif
(1)  493/   116E0 : (MACRO)              	smpsVcDetune        $03, $07, $07, $07
(1)  493/   116E0 : =$3                          set vcDT1,$03
(1)  493/   116E0 : =$7                          set vcDT2,$07
(1)  493/   116E0 : =$7                          set vcDT3,$07
(1)  493/   116E0 : =$7                          set vcDT4,$07
(1)  494/   116E0 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $05, $05
(1)  494/   116E0 : =$1                          set vcCF1,$01
(1)  494/   116E0 : =$1                          set vcCF2,$01
(1)  494/   116E0 : =$5                          set vcCF3,$05
(1)  494/   116E0 : =$5                          set vcCF4,$05
(1)  495/   116E0 : (MACRO)              	smpsVcRateScale     $02, $02, $01, $03
(1)  495/   116E0 : =$2                          set vcRS1,$02
(1)  495/   116E0 : =$2                          set vcRS2,$02
(1)  495/   116E0 : =$1                          set vcRS3,$01
(1)  495/   116E0 : =$3                          set vcRS4,$03
(1)  496/   116E0 : (MACRO)              	smpsVcAttackRate    $14, $16, $15, $15
(1)  496/   116E0 : =$14                         set vcAR1,$14
(1)  496/   116E0 : =$16                         set vcAR2,$16
(1)  496/   116E0 : =$15                         set vcAR3,$15
(1)  496/   116E0 : =$15                         set vcAR4,$15
(1)  497/   116E0 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  497/   116E0 : =>FALSE                      if SourceSMPS2ASM==0
(1)  497/   116E0 :                                     set vcAM1,$00<<5
(1)  497/   116E0 :                                     set vcAM2,$00<<5
(1)  497/   116E0 :                                     set vcAM3,$00<<5
(1)  497/   116E0 :                                     set vcAM4,$00<<5
(1)  497/   116E0 : =>TRUE                       else
(1)  497/   116E0 : =$0                                  set vcAM1,$00<<7
(1)  497/   116E0 : =$0                                  set vcAM2,$00<<7
(1)  497/   116E0 : =$0                                  set vcAM3,$00<<7
(1)  497/   116E0 : =$0                                  set vcAM4,$00<<7
(1)  497/   116E0 : [497]                        endif
(1)  498/   116E0 : (MACRO)              	smpsVcDecayRate1    $0D, $05, $0B, $02
(1)  498/   116E0 : =$D                          set vcD1R1,$0D
(1)  498/   116E0 : =$5                          set vcD1R2,$05
(1)  498/   116E0 : =$B                          set vcD1R3,$0B
(1)  498/   116E0 : =$2                          set vcD1R4,$02
(1)  499/   116E0 : (MACRO)              	smpsVcDecayRate2    $06, $0F, $0A, $0A
(1)  499/   116E0 : =$6                          set vcD2R1,$06
(1)  499/   116E0 : =$F                          set vcD2R2,$0F
(1)  499/   116E0 : =$A                          set vcD2R3,$0A
(1)  499/   116E0 : =$A                          set vcD2R4,$0A
(1)  500/   116E0 : (MACRO)              	smpsVcDecayLevel    $06, $03, $02, $0F
(1)  500/   116E0 : =$6                          set vcDL1,$06
(1)  500/   116E0 : =$3                          set vcDL2,$03
(1)  500/   116E0 : =$2                          set vcDL3,$02
(1)  500/   116E0 : =$F                          set vcDL4,$0F
(1)  501/   116E0 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  501/   116E0 : =$F                          set vcRR1,$0F
(1)  501/   116E0 : =$F                          set vcRR2,$0F
(1)  501/   116E0 : =$F                          set vcRR3,$0F
(1)  501/   116E0 : =$F                          set vcRR4,$0F
(1)  502/   116E0 : (MACRO)              	smpsVcTotalLevel    $80, $0F, $2B, $25
(1)  502/   116E0 : =$80                         set vcTL1,$80
(1)  502/   116E0 : =$F                          set vcTL2,$0F
(1)  502/   116E0 : =$2B                         set vcTL3,$2B
(1)  502/   116E0 : =$25                         set vcTL4,$25
(1)  502/   116E0 : 01                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  502/   116E1 :                     ;   0     1     2     3     4     5     6     7
(1)  502/   116E1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  502/   116E1 : =>FALSE                      if SourceSMPS2ASM==0
(1)  502/   116E1 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  502/   116E1 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  502/   116E1 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  502/   116E1 :                                     set vcTLMask1,$80
(1)  502/   116E1 : =>TRUE                       else
(1)  502/   116E1 : =$0                                  set vcTLMask4,0
(1)  502/   116E1 : =$0                                  set vcTLMask3,0
(1)  502/   116E1 : =$0                                  set vcTLMask2,0
(1)  502/   116E1 : =$0                                  set vcTLMask1,0
(1)  502/   116E1 : [502]                        endif
(1)  502/   116E1 :                     
(1)  502/   116E1 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  502/   116E1 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  502/   116E1 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  502/   116E1 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  502/   116E1 :                                     set vcTLMask1,$80
(1)  502/   116E1 :                                     set vcTL1,vcTL1&$7F
(1)  502/   116E1 :                                     set vcTL2,vcTL2&$7F
(1)  502/   116E1 :                                     set vcTL3,vcTL3&$7F
(1)  502/   116E1 :                                     set vcTL4,vcTL4&$7F
(1)  502/   116E1 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  502/   116E1 :                                     if MOMPASS>1
(1)  502/   116E1 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  502/   116E1 : [502]                                endif
(1)  502/   116E1 : [502]                        endif
(1)  502/   116E1 :                     
(1)  502/   116E1 : =>FALSE                      if SonicDriverVer==2
(1)  502/   116E1 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  502/   116E1 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  502/   116E1 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  502/   116E1 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  502/   116E1 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  502/   116E1 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  502/   116E1 : =>TRUE                       else
(1)  502/   116E1 : 7575 7131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  502/   116E5 : D555 9694                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  502/   116E9 : 020B 050D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  502/   116ED : 0A0A 0F06                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  502/   116F1 : FF2F 3F6F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  502/   116F5 : 252B 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  502/   116F9 : [502]                        endif
(1)  503/   116F9 :                     
(1)  504/   116F9 :                     ;	Voice $02
(1)  505/   116F9 :                     ;	$0D
(1)  506/   116F9 :                     ;	$77, $65, $05, $15, 	$1F, $5F, $5F, $5F, 	$00, $10, $08, $10
(1)  507/   116F9 :                     ;	$00, $03, $05, $04, 	$0F, $FC, $8C, $CC, 	$1F, $80, $80, $80
(1)  508/   116F9 : (MACRO)              	smpsVcAlgorithm     $05
(1)  508/   116F9 : =$5                  vcAlgorithm set $05
(1)  509/   116F9 : (MACRO)              	smpsVcFeedback      $01
(1)  509/   116F9 : =$1                  vcFeedback set $01
(1)  510/   116F9 : (MACRO)              	smpsVcUnusedBits    $00
(1)  510/   116F9 : =$0                  vcUnusedBits set $00
(1)  510/   116F9 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  510/   116F9 :                                     set vcD1R1Unk,<<5
(1)  510/   116F9 :                                     set vcD1R2Unk,<<5
(1)  510/   116F9 :                                     set vcD1R3Unk,<<5
(1)  510/   116F9 :                                     set vcD1R4Unk,<<5
(1)  510/   116F9 : =>TRUE                       else
(1)  510/   116F9 : =$0                                  set vcD1R1Unk,0
(1)  510/   116F9 : =$0                                  set vcD1R2Unk,0
(1)  510/   116F9 : =$0                                  set vcD1R3Unk,0
(1)  510/   116F9 : =$0                                  set vcD1R4Unk,0
(1)  510/   116F9 : [510]                        endif
(1)  511/   116F9 : (MACRO)              	smpsVcDetune        $01, $00, $06, $07
(1)  511/   116F9 : =$1                          set vcDT1,$01
(1)  511/   116F9 : =$0                          set vcDT2,$00
(1)  511/   116F9 : =$6                          set vcDT3,$06
(1)  511/   116F9 : =$7                          set vcDT4,$07
(1)  512/   116F9 : (MACRO)              	smpsVcCoarseFreq    $05, $05, $05, $07
(1)  512/   116F9 : =$5                          set vcCF1,$05
(1)  512/   116F9 : =$5                          set vcCF2,$05
(1)  512/   116F9 : =$5                          set vcCF3,$05
(1)  512/   116F9 : =$7                          set vcCF4,$07
(1)  513/   116F9 : (MACRO)              	smpsVcRateScale     $01, $01, $01, $00
(1)  513/   116F9 : =$1                          set vcRS1,$01
(1)  513/   116F9 : =$1                          set vcRS2,$01
(1)  513/   116F9 : =$1                          set vcRS3,$01
(1)  513/   116F9 : =$0                          set vcRS4,$00
(1)  514/   116F9 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  514/   116F9 : =$1F                         set vcAR1,$1F
(1)  514/   116F9 : =$1F                         set vcAR2,$1F
(1)  514/   116F9 : =$1F                         set vcAR3,$1F
(1)  514/   116F9 : =$1F                         set vcAR4,$1F
(1)  515/   116F9 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  515/   116F9 : =>FALSE                      if SourceSMPS2ASM==0
(1)  515/   116F9 :                                     set vcAM1,$00<<5
(1)  515/   116F9 :                                     set vcAM2,$00<<5
(1)  515/   116F9 :                                     set vcAM3,$00<<5
(1)  515/   116F9 :                                     set vcAM4,$00<<5
(1)  515/   116F9 : =>TRUE                       else
(1)  515/   116F9 : =$0                                  set vcAM1,$00<<7
(1)  515/   116F9 : =$0                                  set vcAM2,$00<<7
(1)  515/   116F9 : =$0                                  set vcAM3,$00<<7
(1)  515/   116F9 : =$0                                  set vcAM4,$00<<7
(1)  515/   116F9 : [515]                        endif
(1)  516/   116F9 : (MACRO)              	smpsVcDecayRate1    $10, $08, $10, $00
(1)  516/   116F9 : =$10                         set vcD1R1,$10
(1)  516/   116F9 : =$8                          set vcD1R2,$08
(1)  516/   116F9 : =$10                         set vcD1R3,$10
(1)  516/   116F9 : =$0                          set vcD1R4,$00
(1)  517/   116F9 : (MACRO)              	smpsVcDecayRate2    $04, $05, $03, $00
(1)  517/   116F9 : =$4                          set vcD2R1,$04
(1)  517/   116F9 : =$5                          set vcD2R2,$05
(1)  517/   116F9 : =$3                          set vcD2R3,$03
(1)  517/   116F9 : =$0                          set vcD2R4,$00
(1)  518/   116F9 : (MACRO)              	smpsVcDecayLevel    $0C, $08, $0F, $00
(1)  518/   116F9 : =$C                          set vcDL1,$0C
(1)  518/   116F9 : =$8                          set vcDL2,$08
(1)  518/   116F9 : =$F                          set vcDL3,$0F
(1)  518/   116F9 : =$0                          set vcDL4,$00
(1)  519/   116F9 : (MACRO)              	smpsVcReleaseRate   $0C, $0C, $0C, $0F
(1)  519/   116F9 : =$C                          set vcRR1,$0C
(1)  519/   116F9 : =$C                          set vcRR2,$0C
(1)  519/   116F9 : =$C                          set vcRR3,$0C
(1)  519/   116F9 : =$F                          set vcRR4,$0F
(1)  520/   116F9 : (MACRO)              	smpsVcTotalLevel    $80, $80, $80, $1F
(1)  520/   116F9 : =$80                         set vcTL1,$80
(1)  520/   116F9 : =$80                         set vcTL2,$80
(1)  520/   116F9 : =$80                         set vcTL3,$80
(1)  520/   116F9 : =$1F                         set vcTL4,$1F
(1)  520/   116F9 : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  520/   116FA :                     ;   0     1     2     3     4     5     6     7
(1)  520/   116FA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  520/   116FA : =>FALSE                      if SourceSMPS2ASM==0
(1)  520/   116FA :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  520/   116FA :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  520/   116FA :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  520/   116FA :                                     set vcTLMask1,$80
(1)  520/   116FA : =>TRUE                       else
(1)  520/   116FA : =$0                                  set vcTLMask4,0
(1)  520/   116FA : =$0                                  set vcTLMask3,0
(1)  520/   116FA : =$0                                  set vcTLMask2,0
(1)  520/   116FA : =$0                                  set vcTLMask1,0
(1)  520/   116FA : [520]                        endif
(1)  520/   116FA :                     
(1)  520/   116FA : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  520/   116FA :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  520/   116FA :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  520/   116FA :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  520/   116FA :                                     set vcTLMask1,$80
(1)  520/   116FA :                                     set vcTL1,vcTL1&$7F
(1)  520/   116FA :                                     set vcTL2,vcTL2&$7F
(1)  520/   116FA :                                     set vcTL3,vcTL3&$7F
(1)  520/   116FA :                                     set vcTL4,vcTL4&$7F
(1)  520/   116FA : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  520/   116FA :                                     if MOMPASS>1
(1)  520/   116FA :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  520/   116FA : [520]                                endif
(1)  520/   116FA : [520]                        endif
(1)  520/   116FA :                     
(1)  520/   116FA : =>FALSE                      if SonicDriverVer==2
(1)  520/   116FA :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  520/   116FA :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  520/   116FA :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  520/   116FA :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  520/   116FA :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  520/   116FA :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  520/   116FA : =>TRUE                       else
(1)  520/   116FA : 7765 0515                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  520/   116FE : 1F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  520/   11702 : 0010 0810                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  520/   11706 : 0003 0504                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  520/   1170A : 0FFC 8CCC                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  520/   1170E : 1F80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  520/   11712 : [520]                        endif
(1)  521/   11712 :                     	
(1)  522/   11712 :                     ;	Voice $03 (unused)
(1)  523/   11712 :                     ;	$3C
(1)  524/   11712 :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)  525/   11712 :                     ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$21, $80, $21, $80
(1)  526/   11712 : (MACRO)              	smpsVcAlgorithm     $04
(1)  526/   11712 : =$4                  vcAlgorithm set $04
(1)  527/   11712 : (MACRO)              	smpsVcFeedback      $07
(1)  527/   11712 : =$7                  vcFeedback set $07
(1)  528/   11712 : (MACRO)              	smpsVcUnusedBits    $00
(1)  528/   11712 : =$0                  vcUnusedBits set $00
(1)  528/   11712 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  528/   11712 :                                     set vcD1R1Unk,<<5
(1)  528/   11712 :                                     set vcD1R2Unk,<<5
(1)  528/   11712 :                                     set vcD1R3Unk,<<5
(1)  528/   11712 :                                     set vcD1R4Unk,<<5
(1)  528/   11712 : =>TRUE                       else
(1)  528/   11712 : =$0                                  set vcD1R1Unk,0
(1)  528/   11712 : =$0                                  set vcD1R2Unk,0
(1)  528/   11712 : =$0                                  set vcD1R3Unk,0
(1)  528/   11712 : =$0                                  set vcD1R4Unk,0
(1)  528/   11712 : [528]                        endif
(1)  529/   11712 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  529/   11712 : =$0                          set vcDT1,$00
(1)  529/   11712 : =$0                          set vcDT2,$00
(1)  529/   11712 : =$0                          set vcDT3,$00
(1)  529/   11712 : =$0                          set vcDT4,$00
(1)  530/   11712 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)  530/   11712 : =$1                          set vcCF1,$01
(1)  530/   11712 : =$1                          set vcCF2,$01
(1)  530/   11712 : =$1                          set vcCF3,$01
(1)  530/   11712 : =$1                          set vcCF4,$01
(1)  531/   11712 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  531/   11712 : =$0                          set vcRS1,$00
(1)  531/   11712 : =$0                          set vcRS2,$00
(1)  531/   11712 : =$0                          set vcRS3,$00
(1)  531/   11712 : =$0                          set vcRS4,$00
(1)  532/   11712 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  532/   11712 : =$1F                         set vcAR1,$1F
(1)  532/   11712 : =$1F                         set vcAR2,$1F
(1)  532/   11712 : =$1F                         set vcAR3,$1F
(1)  532/   11712 : =$1F                         set vcAR4,$1F
(1)  533/   11712 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  533/   11712 : =>FALSE                      if SourceSMPS2ASM==0
(1)  533/   11712 :                                     set vcAM1,$00<<5
(1)  533/   11712 :                                     set vcAM2,$00<<5
(1)  533/   11712 :                                     set vcAM3,$00<<5
(1)  533/   11712 :                                     set vcAM4,$00<<5
(1)  533/   11712 : =>TRUE                       else
(1)  533/   11712 : =$0                                  set vcAM1,$00<<7
(1)  533/   11712 : =$0                                  set vcAM2,$00<<7
(1)  533/   11712 : =$0                                  set vcAM3,$00<<7
(1)  533/   11712 : =$0                                  set vcAM4,$00<<7
(1)  533/   11712 : [533]                        endif
(1)  534/   11712 : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)  534/   11712 : =$0                          set vcD1R1,$00
(1)  534/   11712 : =$0                          set vcD1R2,$00
(1)  534/   11712 : =$0                          set vcD1R3,$00
(1)  534/   11712 : =$0                          set vcD1R4,$00
(1)  535/   11712 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)  535/   11712 : =$0                          set vcD2R1,$00
(1)  535/   11712 : =$0                          set vcD2R2,$00
(1)  535/   11712 : =$0                          set vcD2R3,$00
(1)  535/   11712 : =$0                          set vcD2R4,$00
(1)  536/   11712 : (MACRO)              	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)  536/   11712 : =$F                          set vcDL1,$0F
(1)  536/   11712 : =$F                          set vcDL2,$0F
(1)  536/   11712 : =$F                          set vcDL3,$0F
(1)  536/   11712 : =$F                          set vcDL4,$0F
(1)  537/   11712 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  537/   11712 : =$F                          set vcRR1,$0F
(1)  537/   11712 : =$F                          set vcRR2,$0F
(1)  537/   11712 : =$F                          set vcRR3,$0F
(1)  537/   11712 : =$F                          set vcRR4,$0F
(1)  538/   11712 : (MACRO)              	smpsVcTotalLevel    $80, $21, $80, $21
(1)  538/   11712 : =$80                         set vcTL1,$80
(1)  538/   11712 : =$21                         set vcTL2,$21
(1)  538/   11712 : =$80                         set vcTL3,$80
(1)  538/   11712 : =$21                         set vcTL4,$21
(1)  538/   11712 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  538/   11713 :                     ;   0     1     2     3     4     5     6     7
(1)  538/   11713 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  538/   11713 : =>FALSE                      if SourceSMPS2ASM==0
(1)  538/   11713 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  538/   11713 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  538/   11713 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  538/   11713 :                                     set vcTLMask1,$80
(1)  538/   11713 : =>TRUE                       else
(1)  538/   11713 : =$0                                  set vcTLMask4,0
(1)  538/   11713 : =$0                                  set vcTLMask3,0
(1)  538/   11713 : =$0                                  set vcTLMask2,0
(1)  538/   11713 : =$0                                  set vcTLMask1,0
(1)  538/   11713 : [538]                        endif
(1)  538/   11713 :                     
(1)  538/   11713 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  538/   11713 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  538/   11713 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  538/   11713 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  538/   11713 :                                     set vcTLMask1,$80
(1)  538/   11713 :                                     set vcTL1,vcTL1&$7F
(1)  538/   11713 :                                     set vcTL2,vcTL2&$7F
(1)  538/   11713 :                                     set vcTL3,vcTL3&$7F
(1)  538/   11713 :                                     set vcTL4,vcTL4&$7F
(1)  538/   11713 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  538/   11713 :                                     if MOMPASS>1
(1)  538/   11713 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  538/   11713 : [538]                                endif
(1)  538/   11713 : [538]                        endif
(1)  538/   11713 :                     
(1)  538/   11713 : =>FALSE                      if SonicDriverVer==2
(1)  538/   11713 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  538/   11713 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  538/   11713 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  538/   11713 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  538/   11713 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  538/   11713 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  538/   11713 : =>TRUE                       else
(1)  538/   11713 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  538/   11717 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  538/   1171B : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  538/   1171F : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  538/   11723 : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  538/   11727 : 2180 2180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  538/   1172B : [538]                        endif
(1)  539/   1172B :                     
   18783/   1172B :                     Music85:	include	"Sound/Music/Mus85 - Moonrise.asm"
(1)    1/   1172B :                     Moonrise_Header:
(1)    2/   1172B : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   1172B :                     
(1)    2/   1172B : =$3                  SourceDriver set 3
(1)    2/   1172B :                     
(1)    2/   1172B : =>TRUE                       if ("1"<>"")
(1)    2/   1172B : =$1                                  set SourceSMPS2ASM,1
(1)    2/   1172B : =>FALSE                      else
(1)    2/   1172B :                                     set SourceSMPS2ASM,0
(1)    2/   1172B : [2]                          endif
(1)    2/   1172B :                     
(1)    2/   1172B : =$1172B              songStart set *
(1)    2/   1172B :                     
(1)    2/   1172B : =>TRUE                       if MOMPASS>1
(1)    2/   1172B : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   1172B :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   1172B : [2]                                  endif
(1)    2/   1172B : [2]                          endif
(1)    2/   1172B :                     
(1)    3/   1172B : (MACRO)              	smpsHeaderVoice     Moonrise_Voices
(1)    3/   1172B : =>FALSE                      if songStart<>*
(1)    3/   1172B :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   1172B : [3]                          endif
(1)    3/   1172B : =>TRUE                       if SonicDriverVer<>1
(1)    3/   1172B : 939A                                dc.w    z80_ptr(Moonrise_Voices)
(1)    3/   1172D : =>FALSE                      else
(1)    3/   1172D :                                     if MOMPASS>1
(1)    3/   1172D :                                             if Moonrise_Voices<songStart
(1)    3/   1172D :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/   1172D : [3]                                          endif
(1)    3/   1172D : [3]                                  endif
(1)    3/   1172D :                                     dc.w    Moonrise_Voices-songStart
(1)    3/   1172D : [3]                          endif
(1)    4/   1172D : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/   1172D : 0603                        dc.b    $06,$03
(1)    5/   1172F : (MACRO)              	smpsHeaderTempo     $01, $25
(1)    5/   1172F : 01                          dc.b    $01
(1)    5/   11730 :  (MACRO-2)                   convertMainTempoMod $25
(1)    5/   11730 : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/   11730 : 25                                  dc.b    $25
(1)    5/   11731 : =>FALSE                      elseif SourceDriver==1
(1)    5/   11731 :                                     if $25==1
(1)    5/   11731 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/   11731 : [5]                                  endif
(1)    5/   11731 :                                     if SonicDriverVer==2
(1)    5/   11731 :                                             dc.b    s1TempotoS2($25)
(1)    5/   11731 :                                     else;if SonicDriverVer>=3
(1)    5/   11731 :                                             dc.b    s1TempotoS3($25)
(1)    5/   11731 : [5]                                  endif
(1)    5/   11731 : =>FALSE                      elseif SourceDriver==2
(1)    5/   11731 :                                     if $25==0
(1)    5/   11731 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/   11731 : [5]                                  endif
(1)    5/   11731 :                                     if SonicDriverVer==1
(1)    5/   11731 :                                             dc.b    s2TempotoS1($25)
(1)    5/   11731 :                                     else;if SonicDriverVer>=3
(1)    5/   11731 :                                             dc.b    s2TempotoS3($25)
(1)    5/   11731 : [5]                                  endif
(1)    5/   11731 : =>FALSE                      else;if SourceDriver>=3
(1)    5/   11731 :                                     if $25==0
(1)    5/   11731 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/   11731 : [5]                                  endif
(1)    5/   11731 :                                     if SonicDriverVer==1
(1)    5/   11731 :                                             dc.b    s3TempotoS1($25)
(1)    5/   11731 :                                     else;if SonicDriverVer==2
(1)    5/   11731 :                                             dc.b    s3TempotoS2($25)
(1)    5/   11731 : [5]                                  endif
(1)    5/   11731 : [5]                          endif
(1)    6/   11731 :                     
(1)    7/   11731 : (MACRO)              	smpsHeaderDAC       Moonrise_DAC
(1)    7/   11731 :  (MACRO-2)                   CheckedChannelPointer Moonrise_DAC
(1)    7/   11731 : =>TRUE                       if SonicDriverVer<>1
(1)    7/   11731 : 2D9A                                dc.w    z80_ptr(Moonrise_DAC)
(1)    7/   11733 : =>FALSE                      else
(1)    7/   11733 :                                     if MOMPASS>1
(1)    7/   11733 :                                             if Moonrise_DAC<songStart
(1)    7/   11733 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/   11733 : [7]                                          endif
(1)    7/   11733 : [7]                                  endif
(1)    7/   11733 :                                     dc.w    Moonrise_DAC-songStart
(1)    7/   11733 : [7]                          endif
(1)    7/   11733 : =>FALSE                      if (""<>"")
(1)    7/   11733 :                                     dc.b    
(1)    7/   11733 :                                     if (""<>"")
(1)    7/   11733 :                                             dc.b    
(1)    7/   11733 :                                     else
(1)    7/   11733 :                                             dc.b    $00
(1)    7/   11733 : [7]                                  endif
(1)    7/   11733 : =>TRUE                       else
(1)    7/   11733 : 0000                                dc.w    $00
(1)    7/   11735 : [7]                          endif
(1)    8/   11735 : (MACRO)              	smpsHeaderFM        Moonrise_FM1,	$00, $0D
(1)    8/   11735 :  (MACRO-2)                   CheckedChannelPointer Moonrise_FM1
(1)    8/   11735 : =>TRUE                       if SonicDriverVer<>1
(1)    8/   11735 : 5B97                                dc.w    z80_ptr(Moonrise_FM1)
(1)    8/   11737 : =>FALSE                      else
(1)    8/   11737 :                                     if MOMPASS>1
(1)    8/   11737 :                                             if Moonrise_FM1<songStart
(1)    8/   11737 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   11737 : [8]                                          endif
(1)    8/   11737 : [8]                                  endif
(1)    8/   11737 :                                     dc.w    Moonrise_FM1-songStart
(1)    8/   11737 : [8]                          endif
(1)    8/   11737 : 000D                        dc.b    $00,$0D
(1)    9/   11739 : (MACRO)              	smpsHeaderFM        Moonrise_FM2,	$00, $0A
(1)    9/   11739 :  (MACRO-2)                   CheckedChannelPointer Moonrise_FM2
(1)    9/   11739 : =>TRUE                       if SonicDriverVer<>1
(1)    9/   11739 : 8097                                dc.w    z80_ptr(Moonrise_FM2)
(1)    9/   1173B : =>FALSE                      else
(1)    9/   1173B :                                     if MOMPASS>1
(1)    9/   1173B :                                             if Moonrise_FM2<songStart
(1)    9/   1173B :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   1173B : [9]                                          endif
(1)    9/   1173B : [9]                                  endif
(1)    9/   1173B :                                     dc.w    Moonrise_FM2-songStart
(1)    9/   1173B : [9]                          endif
(1)    9/   1173B : 000A                        dc.b    $00,$0A
(1)   10/   1173D : (MACRO)              	smpsHeaderFM        Moonrise_FM3,	$00, $0A
(1)   10/   1173D :  (MACRO-2)                   CheckedChannelPointer Moonrise_FM3
(1)   10/   1173D : =>TRUE                       if SonicDriverVer<>1
(1)   10/   1173D : 4E98                                dc.w    z80_ptr(Moonrise_FM3)
(1)   10/   1173F : =>FALSE                      else
(1)   10/   1173F :                                     if MOMPASS>1
(1)   10/   1173F :                                             if Moonrise_FM3<songStart
(1)   10/   1173F :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/   1173F : [10]                                         endif
(1)   10/   1173F : [10]                                 endif
(1)   10/   1173F :                                     dc.w    Moonrise_FM3-songStart
(1)   10/   1173F : [10]                         endif
(1)   10/   1173F : 000A                        dc.b    $00,$0A
(1)   11/   11741 : (MACRO)              	smpsHeaderFM        Moonrise_FM4,	$00, $0A
(1)   11/   11741 :  (MACRO-2)                   CheckedChannelPointer Moonrise_FM4
(1)   11/   11741 : =>TRUE                       if SonicDriverVer<>1
(1)   11/   11741 : 8198                                dc.w    z80_ptr(Moonrise_FM4)
(1)   11/   11743 : =>FALSE                      else
(1)   11/   11743 :                                     if MOMPASS>1
(1)   11/   11743 :                                             if Moonrise_FM4<songStart
(1)   11/   11743 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/   11743 : [11]                                         endif
(1)   11/   11743 : [11]                                 endif
(1)   11/   11743 :                                     dc.w    Moonrise_FM4-songStart
(1)   11/   11743 : [11]                         endif
(1)   11/   11743 : 000A                        dc.b    $00,$0A
(1)   12/   11745 : (MACRO)              	smpsHeaderFM        Moonrise_FM5,	$00, $0A
(1)   12/   11745 :  (MACRO-2)                   CheckedChannelPointer Moonrise_FM5
(1)   12/   11745 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   11745 : B898                                dc.w    z80_ptr(Moonrise_FM5)
(1)   12/   11747 : =>FALSE                      else
(1)   12/   11747 :                                     if MOMPASS>1
(1)   12/   11747 :                                             if Moonrise_FM5<songStart
(1)   12/   11747 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   11747 : [12]                                         endif
(1)   12/   11747 : [12]                                 endif
(1)   12/   11747 :                                     dc.w    Moonrise_FM5-songStart
(1)   12/   11747 : [12]                         endif
(1)   12/   11747 : 000A                        dc.b    $00,$0A
(1)   13/   11749 : (MACRO)              	smpsHeaderPSG       Moonrise_PSG1,	$00, $00, $00, $00
(1)   13/   11749 :  (MACRO-2)                   CheckedChannelPointer Moonrise_PSG1
(1)   13/   11749 : =>TRUE                       if SonicDriverVer<>1
(1)   13/   11749 : 7199                                dc.w    z80_ptr(Moonrise_PSG1)
(1)   13/   1174B : =>FALSE                      else
(1)   13/   1174B :                                     if MOMPASS>1
(1)   13/   1174B :                                             if Moonrise_PSG1<songStart
(1)   13/   1174B :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   1174B : [13]                                         endif
(1)   13/   1174B : [13]                                 endif
(1)   13/   1174B :                                     dc.w    Moonrise_PSG1-songStart
(1)   13/   1174B : [13]                         endif
(1)   13/   1174B :  (MACRO-2)                   PSGPitchConvert $00
(1)   13/   1174B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/   1174B :                                     dc.b    ($00+psgdelta)&$FF
(1)   13/   1174B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/   1174B :                                     dc.b    ($00-psgdelta)&$FF
(1)   13/   1174B : =>TRUE                       else
(1)   13/   1174B : 00                                  dc.b    $00
(1)   13/   1174C : [13]                         endif
(1)   13/   1174C : 00                          dc.b    $00
(1)   13/   1174D :                             ; Frequency envelope
(1)   13/   1174D : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/   1174D :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/   1174D :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/   1174D :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/   1174D :                                     dc.b    0
(1)   13/   1174D : =>TRUE                       else
(1)   13/   1174D : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   13/   1174D :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/   1174D : [13]                                 endif
(1)   13/   1174D : 00                                  dc.b    $00
(1)   13/   1174E : [13]                         endif
(1)   13/   1174E :                             ; Volume envelope
(1)   13/   1174E : 00                          dc.b    $00
(1)   14/   1174F : (MACRO)              	smpsHeaderPSG       Moonrise_PSG2,	$00, $05, $00, $00
(1)   14/   1174F :  (MACRO-2)                   CheckedChannelPointer Moonrise_PSG2
(1)   14/   1174F : =>TRUE                       if SonicDriverVer<>1
(1)   14/   1174F : E999                                dc.w    z80_ptr(Moonrise_PSG2)
(1)   14/   11751 : =>FALSE                      else
(1)   14/   11751 :                                     if MOMPASS>1
(1)   14/   11751 :                                             if Moonrise_PSG2<songStart
(1)   14/   11751 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   11751 : [14]                                         endif
(1)   14/   11751 : [14]                                 endif
(1)   14/   11751 :                                     dc.w    Moonrise_PSG2-songStart
(1)   14/   11751 : [14]                         endif
(1)   14/   11751 :  (MACRO-2)                   PSGPitchConvert $00
(1)   14/   11751 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   11751 :                                     dc.b    ($00+psgdelta)&$FF
(1)   14/   11751 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   11751 :                                     dc.b    ($00-psgdelta)&$FF
(1)   14/   11751 : =>TRUE                       else
(1)   14/   11751 : 00                                  dc.b    $00
(1)   14/   11752 : [14]                         endif
(1)   14/   11752 : 05                          dc.b    $05
(1)   14/   11753 :                             ; Frequency envelope
(1)   14/   11753 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/   11753 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/   11753 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/   11753 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/   11753 :                                     dc.b    0
(1)   14/   11753 : =>TRUE                       else
(1)   14/   11753 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   14/   11753 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/   11753 : [14]                                 endif
(1)   14/   11753 : 00                                  dc.b    $00
(1)   14/   11754 : [14]                         endif
(1)   14/   11754 :                             ; Volume envelope
(1)   14/   11754 : 00                          dc.b    $00
(1)   15/   11755 : (MACRO)              	smpsHeaderPSG       Moonrise_PSG3,	$23, $01, $00, $00
(1)   15/   11755 :  (MACRO-2)                   CheckedChannelPointer Moonrise_PSG3
(1)   15/   11755 : =>TRUE                       if SonicDriverVer<>1
(1)   15/   11755 : 049A                                dc.w    z80_ptr(Moonrise_PSG3)
(1)   15/   11757 : =>FALSE                      else
(1)   15/   11757 :                                     if MOMPASS>1
(1)   15/   11757 :                                             if Moonrise_PSG3<songStart
(1)   15/   11757 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/   11757 : [15]                                         endif
(1)   15/   11757 : [15]                                 endif
(1)   15/   11757 :                                     dc.w    Moonrise_PSG3-songStart
(1)   15/   11757 : [15]                         endif
(1)   15/   11757 :  (MACRO-2)                   PSGPitchConvert $23
(1)   15/   11757 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/   11757 :                                     dc.b    ($23+psgdelta)&$FF
(1)   15/   11757 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/   11757 :                                     dc.b    ($23-psgdelta)&$FF
(1)   15/   11757 : =>TRUE                       else
(1)   15/   11757 : 23                                  dc.b    $23
(1)   15/   11758 : [15]                         endif
(1)   15/   11758 : 01                          dc.b    $01
(1)   15/   11759 :                             ; Frequency envelope
(1)   15/   11759 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/   11759 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/   11759 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/   11759 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/   11759 :                                     dc.b    0
(1)   15/   11759 : =>TRUE                       else
(1)   15/   11759 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/   11759 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/   11759 : [15]                                 endif
(1)   15/   11759 : 00                                  dc.b    $00
(1)   15/   1175A : [15]                         endif
(1)   15/   1175A :                             ; Volume envelope
(1)   15/   1175A : 00                          dc.b    $00
(1)   16/   1175B :                     
(1)   17/   1175B :                     ; FM1 Data
(1)   18/   1175B :                     Moonrise_FM1:
(1)   19/   1175B : (MACRO)              	smpsSetvoice        $00
(1)   19/   1175B :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   1175B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   1175B :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   1175B : =>TRUE                       else
(1)   19/   1175B : EF00                                dc.b    $EF,$00
(1)   19/   1175D : [19]                         endif
(1)   20/   1175D :                     
(1)   21/   1175D :                     Moonrise_Loop05:
(1)   22/   1175D : (MACRO)              	smpsCall            Moonrise_Call09
(1)   22/   1175D : F8                          dc.b    $F8
(1)   22/   1175E : =>TRUE                       if SonicDriverVer<>1
(1)   22/   1175E : 7097                                dc.w    z80_ptr(Moonrise_Call09)
(1)   22/   11760 : =>FALSE                      else
(1)   22/   11760 :                                     dc.w    Moonrise_Call09-*-1
(1)   22/   11760 : [22]                         endif
(1)   23/   11760 : (MACRO)              	smpsLoop            $01, $02, Moonrise_Loop05
(1)   23/   11760 : F7                          dc.b    $F7
(1)   23/   11761 : 0102                        dc.b    $01,$02
(1)   23/   11763 : =>TRUE                       if SonicDriverVer<>1
(1)   23/   11763 : 5D97                                dc.w    z80_ptr(Moonrise_Loop05)
(1)   23/   11765 : =>FALSE                      else
(1)   23/   11765 :                                     dc.w    Moonrise_Loop05-*-1
(1)   23/   11765 : [23]                         endif
(1)   24/   11765 :                     
(1)   25/   11765 :                     Moonrise_Loop06:
(1)   26/   11765 : (MACRO)              	smpsCall            Moonrise_Call09
(1)   26/   11765 : F8                          dc.b    $F8
(1)   26/   11766 : =>TRUE                       if SonicDriverVer<>1
(1)   26/   11766 : 7097                                dc.w    z80_ptr(Moonrise_Call09)
(1)   26/   11768 : =>FALSE                      else
(1)   26/   11768 :                                     dc.w    Moonrise_Call09-*-1
(1)   26/   11768 : [26]                         endif
(1)   27/   11768 : (MACRO)              	smpsLoop            $01, $04, Moonrise_Loop06
(1)   27/   11768 : F7                          dc.b    $F7
(1)   27/   11769 : 0104                        dc.b    $01,$04
(1)   27/   1176B : =>TRUE                       if SonicDriverVer<>1
(1)   27/   1176B : 6597                                dc.w    z80_ptr(Moonrise_Loop06)
(1)   27/   1176D : =>FALSE                      else
(1)   27/   1176D :                                     dc.w    Moonrise_Loop06-*-1
(1)   27/   1176D : [27]                         endif
(1)   28/   1176D : (MACRO)              	smpsJump            Moonrise_Loop06
(1)   28/   1176D : F6                          dc.b    $F6
(1)   28/   1176E : =>TRUE                       if SonicDriverVer<>1
(1)   28/   1176E : 6597                                dc.w    z80_ptr(Moonrise_Loop06)
(1)   28/   11770 : =>FALSE                      else
(1)   28/   11770 :                                     dc.w    Moonrise_Loop06-*-1
(1)   28/   11770 : [28]                         endif
(1)   29/   11770 :                     
(1)   30/   11770 :                     Moonrise_Call09:
(1)   31/   11770 : 9B12 9B99 0C        	dc.b	nD2, $12, nD2, nC2, $0C
(1)   32/   11775 : (MACRO)              	smpsLoop            $00, $03, Moonrise_Call09
(1)   32/   11775 : F7                          dc.b    $F7
(1)   32/   11776 : 0003                        dc.b    $00,$03
(1)   32/   11778 : =>TRUE                       if SonicDriverVer<>1
(1)   32/   11778 : 7097                                dc.w    z80_ptr(Moonrise_Call09)
(1)   32/   1177A : =>FALSE                      else
(1)   32/   1177A :                                     dc.w    Moonrise_Call09-*-1
(1)   32/   1177A : [32]                         endif
(1)   33/   1177A : A012 9E99 0C        	dc.b	nG2, $12, nF2, nC2, $0C
(1)   34/   1177F : (MACRO)              	smpsReturn
(1)   34/   1177F : =>TRUE                       if SonicDriverVer>=3
(1)   34/   1177F : F9                                  dc.b    $F9
(1)   34/   11780 : =>FALSE                      else
(1)   34/   11780 :                                     dc.b    $E3
(1)   34/   11780 : [34]                         endif
(1)   35/   11780 :                     
(1)   36/   11780 :                     ; FM2 Data
(1)   37/   11780 :                     Moonrise_FM2:
(1)   38/   11780 : (MACRO)              	smpsSetvoice        $01
(1)   38/   11780 :  (MACRO-2)                   smpsFMvoice $01
(1)   38/   11780 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   38/   11780 :                                     dc.b    $EF,$01|$80,+$81
(1)   38/   11780 : =>TRUE                       else
(1)   38/   11780 : EF01                                dc.b    $EF,$01
(1)   38/   11782 : [38]                         endif
(1)   39/   11782 : (MACRO)              	smpsPan             panLeft, $00
(1)   39/   11782 : =$0                  panNone set $00
(1)   39/   11782 : =$40                 panRight set $40
(1)   39/   11782 : =$80                 panLeft set $80
(1)   39/   11782 : =$C0                 panCentre set $C0
(1)   39/   11782 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   39/   11782 : E080                        dc.b $E0,panLeft+$00
(1)   40/   11784 : 8060 8054 A70C      	dc.b	nRst, $60, nRst, $54, nD3, $0C, smpsNoAttack, $60
            1178A : E760             
(1)   41/   1178C : (MACRO)              	smpsPan             panCenter, $00
(1)   41/   1178C : =$0                  panNone set $00
(1)   41/   1178C : =$40                 panRight set $40
(1)   41/   1178C : =$80                 panLeft set $80
(1)   41/   1178C : =$C0                 panCentre set $C0
(1)   41/   1178C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   41/   1178C : E0C0                        dc.b $E0,panCenter+$00
(1)   42/   1178E : (MACRO)              	smpsSetvoice        $02
(1)   42/   1178E :  (MACRO-2)                   smpsFMvoice $02
(1)   42/   1178E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   42/   1178E :                                     dc.b    $EF,$02|$80,+$81
(1)   42/   1178E : =>TRUE                       else
(1)   42/   1178E : EF02                                dc.b    $EF,$02
(1)   42/   11790 : [42]                         endif
(1)   43/   11790 : (MACRO)              	smpsFMAlterVol      $09
(1)   43/   11790 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   43/   11790 :                                     dc.b    $E5,$09,
(1)   43/   11790 : =>TRUE                       else
(1)   43/   11790 : E609                                dc.b    $E6,$09
(1)   43/   11792 : [43]                         endif
(1)   44/   11792 : B812                	dc.b	nG4, $12
(1)   45/   11794 : (MACRO)              	smpsFMAlterVol      $0A
(1)   45/   11794 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   45/   11794 :                                     dc.b    $E5,$0A,
(1)   45/   11794 : =>TRUE                       else
(1)   45/   11794 : E60A                                dc.b    $E6,$0A
(1)   45/   11796 : [45]                         endif
(1)   46/   11796 : (MACRO)              	smpsPan             panLeft, $00
(1)   46/   11796 : =$0                  panNone set $00
(1)   46/   11796 : =$40                 panRight set $40
(1)   46/   11796 : =$80                 panLeft set $80
(1)   46/   11796 : =$C0                 panCentre set $C0
(1)   46/   11796 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   46/   11796 : E080                        dc.b $E0,panLeft+$00
(1)   47/   11798 : 06                  	dc.b	$06
(1)   48/   11799 : (MACRO)              	smpsFMAlterVol      $F6
(1)   48/   11799 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   48/   11799 :                                     dc.b    $E5,$F6,
(1)   48/   11799 : =>TRUE                       else
(1)   48/   11799 : E6F6                                dc.b    $E6,$F6
(1)   48/   1179B : [48]                         endif
(1)   49/   1179B : (MACRO)              	smpsPan             panCenter, $00
(1)   49/   1179B : =$0                  panNone set $00
(1)   49/   1179B : =$40                 panRight set $40
(1)   49/   1179B : =$80                 panLeft set $80
(1)   49/   1179B : =$C0                 panCentre set $C0
(1)   49/   1179B : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   49/   1179B : E0C0                        dc.b $E0,panCenter+$00
(1)   50/   1179D : B712                	dc.b	nFs4, $12
(1)   51/   1179F : (MACRO)              	smpsFMAlterVol      $0A
(1)   51/   1179F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   51/   1179F :                                     dc.b    $E5,$0A,
(1)   51/   1179F : =>TRUE                       else
(1)   51/   1179F : E60A                                dc.b    $E6,$0A
(1)   51/   117A1 : [51]                         endif
(1)   52/   117A1 : (MACRO)              	smpsPan             panLeft, $00
(1)   52/   117A1 : =$0                  panNone set $00
(1)   52/   117A1 : =$40                 panRight set $40
(1)   52/   117A1 : =$80                 panLeft set $80
(1)   52/   117A1 : =$C0                 panCentre set $C0
(1)   52/   117A1 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   52/   117A1 : E080                        dc.b $E0,panLeft+$00
(1)   53/   117A3 : 06                  	dc.b	$06
(1)   54/   117A4 : (MACRO)              	smpsFMAlterVol      $F6
(1)   54/   117A4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   54/   117A4 :                                     dc.b    $E5,$F6,
(1)   54/   117A4 : =>TRUE                       else
(1)   54/   117A4 : E6F6                                dc.b    $E6,$F6
(1)   54/   117A6 : [54]                         endif
(1)   55/   117A6 : (MACRO)              	smpsPan             panCenter, $00
(1)   55/   117A6 : =$0                  panNone set $00
(1)   55/   117A6 : =$40                 panRight set $40
(1)   55/   117A6 : =$80                 panLeft set $80
(1)   55/   117A6 : =$C0                 panCentre set $C0
(1)   55/   117A6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   55/   117A6 : E0C0                        dc.b $E0,panCenter+$00
(1)   56/   117A8 : B606 B1B3           	dc.b	nF4, $06, nC4, nD4
(1)   57/   117AC : (MACRO)              	smpsFMAlterVol      $0A
(1)   57/   117AC : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   57/   117AC :                                     dc.b    $E5,$0A,
(1)   57/   117AC : =>TRUE                       else
(1)   57/   117AC : E60A                                dc.b    $E6,$0A
(1)   57/   117AE : [57]                         endif
(1)   58/   117AE : (MACRO)              	smpsPan             panLeft, $00
(1)   58/   117AE : =$0                  panNone set $00
(1)   58/   117AE : =$40                 panRight set $40
(1)   58/   117AE : =$80                 panLeft set $80
(1)   58/   117AE : =$C0                 panCentre set $C0
(1)   58/   117AE : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   58/   117AE : E080                        dc.b $E0,panLeft+$00
(1)   59/   117B0 : B3                  	dc.b	nD4
(1)   60/   117B1 : (MACRO)              	smpsFMAlterVol      $F6
(1)   60/   117B1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   60/   117B1 :                                     dc.b    $E5,$F6,
(1)   60/   117B1 : =>TRUE                       else
(1)   60/   117B1 : E6F6                                dc.b    $E6,$F6
(1)   60/   117B3 : [60]                         endif
(1)   61/   117B3 : (MACRO)              	smpsPan             panCenter, $00
(1)   61/   117B3 : =$0                  panNone set $00
(1)   61/   117B3 : =$40                 panRight set $40
(1)   61/   117B3 : =$80                 panLeft set $80
(1)   61/   117B3 : =$C0                 panCentre set $C0
(1)   61/   117B3 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   61/   117B3 : E0C0                        dc.b $E0,panCenter+$00
(1)   62/   117B5 : B60C B306           	dc.b	nF4, $0C, nD4, $06
(1)   63/   117B9 : (MACRO)              	smpsFMAlterVol      $0A
(1)   63/   117B9 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   63/   117B9 :                                     dc.b    $E5,$0A,
(1)   63/   117B9 : =>TRUE                       else
(1)   63/   117B9 : E60A                                dc.b    $E6,$0A
(1)   63/   117BB : [63]                         endif
(1)   64/   117BB : (MACRO)              	smpsPan             panLeft, $00
(1)   64/   117BB : =$0                  panNone set $00
(1)   64/   117BB : =$40                 panRight set $40
(1)   64/   117BB : =$80                 panLeft set $80
(1)   64/   117BB : =$C0                 panCentre set $C0
(1)   64/   117BB : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   64/   117BB : E080                        dc.b $E0,panLeft+$00
(1)   65/   117BD : B3                  	dc.b	nD4
(1)   66/   117BE : (MACRO)              	smpsFMAlterVol      $F6
(1)   66/   117BE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   66/   117BE :                                     dc.b    $E5,$F6,
(1)   66/   117BE : =>TRUE                       else
(1)   66/   117BE : E6F6                                dc.b    $E6,$F6
(1)   66/   117C0 : [66]                         endif
(1)   67/   117C0 : (MACRO)              	smpsPan             panCenter, $00
(1)   67/   117C0 : =$0                  panNone set $00
(1)   67/   117C0 : =$40                 panRight set $40
(1)   67/   117C0 : =$80                 panLeft set $80
(1)   67/   117C0 : =$C0                 panCentre set $C0
(1)   67/   117C0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   67/   117C0 : E0C0                        dc.b $E0,panCenter+$00
(1)   68/   117C2 :                     
(1)   69/   117C2 :                     Moonrise_Jump01:
(1)   70/   117C2 : B612 B30C           	dc.b	nF4, $12, nD4, $0C
(1)   71/   117C6 : (MACRO)              	smpsFMAlterVol      $0A
(1)   71/   117C6 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   71/   117C6 :                                     dc.b    $E5,$0A,
(1)   71/   117C6 : =>TRUE                       else
(1)   71/   117C6 : E60A                                dc.b    $E6,$0A
(1)   71/   117C8 : [71]                         endif
(1)   72/   117C8 : (MACRO)              	smpsPan             panLeft, $00
(1)   72/   117C8 : =$0                  panNone set $00
(1)   72/   117C8 : =$40                 panRight set $40
(1)   72/   117C8 : =$80                 panLeft set $80
(1)   72/   117C8 : =$C0                 panCentre set $C0
(1)   72/   117C8 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   72/   117C8 : E080                        dc.b $E0,panLeft+$00
(1)   73/   117CA : 0C                  	dc.b	$0C
(1)   74/   117CB : (MACRO)              	smpsFMAlterVol      $F6
(1)   74/   117CB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   74/   117CB :                                     dc.b    $E5,$F6,
(1)   74/   117CB : =>TRUE                       else
(1)   74/   117CB : E6F6                                dc.b    $E6,$F6
(1)   74/   117CD : [74]                         endif
(1)   75/   117CD : (MACRO)              	smpsPan             panCenter, $00
(1)   75/   117CD : =$0                  panNone set $00
(1)   75/   117CD : =$40                 panRight set $40
(1)   75/   117CD : =$80                 panLeft set $80
(1)   75/   117CD : =$C0                 panCentre set $C0
(1)   75/   117CD : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   75/   117CD : E0C0                        dc.b $E0,panCenter+$00
(1)   76/   117CF : 8006                	dc.b	nRst, $06
(1)   77/   117D1 : (MACRO)              	smpsSetvoice        $01
(1)   77/   117D1 :  (MACRO-2)                   smpsFMvoice $01
(1)   77/   117D1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   77/   117D1 :                                     dc.b    $EF,$01|$80,+$81
(1)   77/   117D1 : =>TRUE                       else
(1)   77/   117D1 : EF01                                dc.b    $EF,$01
(1)   77/   117D3 : [77]                         endif
(1)   78/   117D3 : (MACRO)              	smpsFMAlterVol      $F7
(1)   78/   117D3 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   78/   117D3 :                                     dc.b    $E5,$F7,
(1)   78/   117D3 : =>TRUE                       else
(1)   78/   117D3 : E6F7                                dc.b    $E6,$F7
(1)   78/   117D5 : [78]                         endif
(1)   79/   117D5 :                     
(1)   80/   117D5 :                     Moonrise_Loop03:
(1)   81/   117D5 : (MACRO)              	smpsCall            Moonrise_Call08
(1)   81/   117D5 : F8                          dc.b    $F8
(1)   81/   117D6 : =>TRUE                       if SonicDriverVer<>1
(1)   81/   117D6 : 4198                                dc.w    z80_ptr(Moonrise_Call08)
(1)   81/   117D8 : =>FALSE                      else
(1)   81/   117D8 :                                     dc.w    Moonrise_Call08-*-1
(1)   81/   117D8 : [81]                         endif
(1)   82/   117D8 : (MACRO)              	smpsLoop            $00, $06, Moonrise_Loop03
(1)   82/   117D8 : F7                          dc.b    $F7
(1)   82/   117D9 : 0006                        dc.b    $00,$06
(1)   82/   117DB : =>TRUE                       if SonicDriverVer<>1
(1)   82/   117DB : D597                                dc.w    z80_ptr(Moonrise_Loop03)
(1)   82/   117DD : =>FALSE                      else
(1)   82/   117DD :                                     dc.w    Moonrise_Loop03-*-1
(1)   82/   117DD : [82]                         endif
(1)   83/   117DD : (MACRO)              	smpsSetvoice        $02
(1)   83/   117DD :  (MACRO-2)                   smpsFMvoice $02
(1)   83/   117DD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   83/   117DD :                                     dc.b    $EF,$02|$80,+$81
(1)   83/   117DD : =>TRUE                       else
(1)   83/   117DD : EF02                                dc.b    $EF,$02
(1)   83/   117DF : [83]                         endif
(1)   84/   117DF : (MACRO)              	smpsFMAlterVol      $09
(1)   84/   117DF : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   84/   117DF :                                     dc.b    $E5,$09,
(1)   84/   117DF : =>TRUE                       else
(1)   84/   117DF : E609                                dc.b    $E6,$09
(1)   84/   117E1 : [84]                         endif
(1)   85/   117E1 : 8006 B1B3           	dc.b	nRst, $06, nC4, nD4
(1)   86/   117E5 : (MACRO)              	smpsFMAlterVol      $0A
(1)   86/   117E5 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   86/   117E5 :                                     dc.b    $E5,$0A,
(1)   86/   117E5 : =>TRUE                       else
(1)   86/   117E5 : E60A                                dc.b    $E6,$0A
(1)   86/   117E7 : [86]                         endif
(1)   87/   117E7 : (MACRO)              	smpsPan             panLeft, $00
(1)   87/   117E7 : =$0                  panNone set $00
(1)   87/   117E7 : =$40                 panRight set $40
(1)   87/   117E7 : =$80                 panLeft set $80
(1)   87/   117E7 : =$C0                 panCentre set $C0
(1)   87/   117E7 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   87/   117E7 : E080                        dc.b $E0,panLeft+$00
(1)   88/   117E9 : B3                  	dc.b	nD4
(1)   89/   117EA : (MACRO)              	smpsFMAlterVol      $F6
(1)   89/   117EA : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   89/   117EA :                                     dc.b    $E5,$F6,
(1)   89/   117EA : =>TRUE                       else
(1)   89/   117EA : E6F6                                dc.b    $E6,$F6
(1)   89/   117EC : [89]                         endif
(1)   90/   117EC : (MACRO)              	smpsPan             panCenter, $00
(1)   90/   117EC : =$0                  panNone set $00
(1)   90/   117EC : =$40                 panRight set $40
(1)   90/   117EC : =$80                 panLeft set $80
(1)   90/   117EC : =$C0                 panCentre set $C0
(1)   90/   117EC : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   90/   117EC : E0C0                        dc.b $E0,panCenter+$00
(1)   91/   117EE : B60C B306           	dc.b	nF4, $0C, nD4, $06
(1)   92/   117F2 : (MACRO)              	smpsFMAlterVol      $0A
(1)   92/   117F2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   92/   117F2 :                                     dc.b    $E5,$0A,
(1)   92/   117F2 : =>TRUE                       else
(1)   92/   117F2 : E60A                                dc.b    $E6,$0A
(1)   92/   117F4 : [92]                         endif
(1)   93/   117F4 : (MACRO)              	smpsPan             panLeft, $00
(1)   93/   117F4 : =$0                  panNone set $00
(1)   93/   117F4 : =$40                 panRight set $40
(1)   93/   117F4 : =$80                 panLeft set $80
(1)   93/   117F4 : =$C0                 panCentre set $C0
(1)   93/   117F4 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   93/   117F4 : E080                        dc.b $E0,panLeft+$00
(1)   94/   117F6 : B3                  	dc.b	nD4
(1)   95/   117F7 : (MACRO)              	smpsFMAlterVol      $F6
(1)   95/   117F7 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   95/   117F7 :                                     dc.b    $E5,$F6,
(1)   95/   117F7 : =>TRUE                       else
(1)   95/   117F7 : E6F6                                dc.b    $E6,$F6
(1)   95/   117F9 : [95]                         endif
(1)   96/   117F9 : (MACRO)              	smpsPan             panCenter, $00
(1)   96/   117F9 : =$0                  panNone set $00
(1)   96/   117F9 : =$40                 panRight set $40
(1)   96/   117F9 : =$80                 panLeft set $80
(1)   96/   117F9 : =$C0                 panCentre set $C0
(1)   96/   117F9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   96/   117F9 : E0C0                        dc.b $E0,panCenter+$00
(1)   97/   117FB : B612 B30C 8012      	dc.b	nF4, $12, nD4, $0C, nRst, $12
(1)   98/   11801 : (MACRO)              	smpsPan             panCenter, $00
(1)   98/   11801 : =$0                  panNone set $00
(1)   98/   11801 : =$40                 panRight set $40
(1)   98/   11801 : =$80                 panLeft set $80
(1)   98/   11801 : =$C0                 panCentre set $C0
(1)   98/   11801 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   98/   11801 : E0C0                        dc.b $E0,panCenter+$00
(1)   99/   11803 : (MACRO)              	smpsSetvoice        $01
(1)   99/   11803 :  (MACRO-2)                   smpsFMvoice $01
(1)   99/   11803 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   99/   11803 :                                     dc.b    $EF,$01|$80,+$81
(1)   99/   11803 : =>TRUE                       else
(1)   99/   11803 : EF01                                dc.b    $EF,$01
(1)   99/   11805 : [99]                         endif
(1)  100/   11805 : (MACRO)              	smpsFMAlterVol      $F7
(1)  100/   11805 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  100/   11805 :                                     dc.b    $E5,$F7,
(1)  100/   11805 : =>TRUE                       else
(1)  100/   11805 : E6F7                                dc.b    $E6,$F7
(1)  100/   11807 : [100]                        endif
(1)  101/   11807 : (MACRO)              	smpsCall            Moonrise_Call08
(1)  101/   11807 : F8                          dc.b    $F8
(1)  101/   11808 : =>TRUE                       if SonicDriverVer<>1
(1)  101/   11808 : 4198                                dc.w    z80_ptr(Moonrise_Call08)
(1)  101/   1180A : =>FALSE                      else
(1)  101/   1180A :                                     dc.w    Moonrise_Call08-*-1
(1)  101/   1180A : [101]                        endif
(1)  102/   1180A : (MACRO)              	smpsCall            Moonrise_Call08
(1)  102/   1180A : F8                          dc.b    $F8
(1)  102/   1180B : =>TRUE                       if SonicDriverVer<>1
(1)  102/   1180B : 4198                                dc.w    z80_ptr(Moonrise_Call08)
(1)  102/   1180D : =>FALSE                      else
(1)  102/   1180D :                                     dc.w    Moonrise_Call08-*-1
(1)  102/   1180D : [102]                        endif
(1)  103/   1180D : (MACRO)              	smpsCall            Moonrise_Call08
(1)  103/   1180D : F8                          dc.b    $F8
(1)  103/   1180E : =>TRUE                       if SonicDriverVer<>1
(1)  103/   1180E : 4198                                dc.w    z80_ptr(Moonrise_Call08)
(1)  103/   11810 : =>FALSE                      else
(1)  103/   11810 :                                     dc.w    Moonrise_Call08-*-1
(1)  103/   11810 : [103]                        endif
(1)  104/   11810 : (MACRO)              	smpsSetvoice        $02
(1)  104/   11810 :  (MACRO-2)                   smpsFMvoice $02
(1)  104/   11810 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  104/   11810 :                                     dc.b    $EF,$02|$80,+$81
(1)  104/   11810 : =>TRUE                       else
(1)  104/   11810 : EF02                                dc.b    $EF,$02
(1)  104/   11812 : [104]                        endif
(1)  105/   11812 : (MACRO)              	smpsFMAlterVol      $09
(1)  105/   11812 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  105/   11812 :                                     dc.b    $E5,$09,
(1)  105/   11812 : =>TRUE                       else
(1)  105/   11812 : E609                                dc.b    $E6,$09
(1)  105/   11814 : [105]                        endif
(1)  106/   11814 :                     
(1)  107/   11814 :                     Moonrise_Loop04:
(1)  108/   11814 : B612                	dc.b	nF4, $12
(1)  109/   11816 : (MACRO)              	smpsFMAlterVol      $0A
(1)  109/   11816 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  109/   11816 :                                     dc.b    $E5,$0A,
(1)  109/   11816 : =>TRUE                       else
(1)  109/   11816 : E60A                                dc.b    $E6,$0A
(1)  109/   11818 : [109]                        endif
(1)  110/   11818 : (MACRO)              	smpsPan             panLeft, $00
(1)  110/   11818 : =$0                  panNone set $00
(1)  110/   11818 : =$40                 panRight set $40
(1)  110/   11818 : =$80                 panLeft set $80
(1)  110/   11818 : =$C0                 panCentre set $C0
(1)  110/   11818 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  110/   11818 : E080                        dc.b $E0,panLeft+$00
(1)  111/   1181A : 06                  	dc.b	$06
(1)  112/   1181B : (MACRO)              	smpsFMAlterVol      $F6
(1)  112/   1181B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  112/   1181B :                                     dc.b    $E5,$F6,
(1)  112/   1181B : =>TRUE                       else
(1)  112/   1181B : E6F6                                dc.b    $E6,$F6
(1)  112/   1181D : [112]                        endif
(1)  113/   1181D : (MACRO)              	smpsPan             panCenter, $00
(1)  113/   1181D : =$0                  panNone set $00
(1)  113/   1181D : =$40                 panRight set $40
(1)  113/   1181D : =$80                 panLeft set $80
(1)  113/   1181D : =$C0                 panCentre set $C0
(1)  113/   1181D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  113/   1181D : E0C0                        dc.b $E0,panCenter+$00
(1)  114/   1181F : (MACRO)              	smpsLoop            $00, $06, Moonrise_Loop04
(1)  114/   1181F : F7                          dc.b    $F7
(1)  114/   11820 : 0006                        dc.b    $00,$06
(1)  114/   11822 : =>TRUE                       if SonicDriverVer<>1
(1)  114/   11822 : 1498                                dc.w    z80_ptr(Moonrise_Loop04)
(1)  114/   11824 : =>FALSE                      else
(1)  114/   11824 :                                     dc.w    Moonrise_Loop04-*-1
(1)  114/   11824 : [114]                        endif
(1)  115/   11824 : B606 B1B3           	dc.b	nF4, $06, nC4, nD4
(1)  116/   11828 : (MACRO)              	smpsFMAlterVol      $0A
(1)  116/   11828 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  116/   11828 :                                     dc.b    $E5,$0A,
(1)  116/   11828 : =>TRUE                       else
(1)  116/   11828 : E60A                                dc.b    $E6,$0A
(1)  116/   1182A : [116]                        endif
(1)  117/   1182A : (MACRO)              	smpsPan             panLeft, $00
(1)  117/   1182A : =$0                  panNone set $00
(1)  117/   1182A : =$40                 panRight set $40
(1)  117/   1182A : =$80                 panLeft set $80
(1)  117/   1182A : =$C0                 panCentre set $C0
(1)  117/   1182A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  117/   1182A : E080                        dc.b $E0,panLeft+$00
(1)  118/   1182C : B3                  	dc.b	nD4
(1)  119/   1182D : (MACRO)              	smpsFMAlterVol      $F6
(1)  119/   1182D : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  119/   1182D :                                     dc.b    $E5,$F6,
(1)  119/   1182D : =>TRUE                       else
(1)  119/   1182D : E6F6                                dc.b    $E6,$F6
(1)  119/   1182F : [119]                        endif
(1)  120/   1182F : (MACRO)              	smpsPan             panCenter, $00
(1)  120/   1182F : =$0                  panNone set $00
(1)  120/   1182F : =$40                 panRight set $40
(1)  120/   1182F : =$80                 panLeft set $80
(1)  120/   1182F : =$C0                 panCentre set $C0
(1)  120/   1182F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  120/   1182F : E0C0                        dc.b $E0,panCenter+$00
(1)  121/   11831 : B60C B306           	dc.b	nF4, $0C, nD4, $06
(1)  122/   11835 : (MACRO)              	smpsFMAlterVol      $0A
(1)  122/   11835 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  122/   11835 :                                     dc.b    $E5,$0A,
(1)  122/   11835 : =>TRUE                       else
(1)  122/   11835 : E60A                                dc.b    $E6,$0A
(1)  122/   11837 : [122]                        endif
(1)  123/   11837 : (MACRO)              	smpsPan             panLeft, $00
(1)  123/   11837 : =$0                  panNone set $00
(1)  123/   11837 : =$40                 panRight set $40
(1)  123/   11837 : =$80                 panLeft set $80
(1)  123/   11837 : =$C0                 panCentre set $C0
(1)  123/   11837 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  123/   11837 : E080                        dc.b $E0,panLeft+$00
(1)  124/   11839 : B3                  	dc.b	nD4
(1)  125/   1183A : (MACRO)              	smpsFMAlterVol      $F6
(1)  125/   1183A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  125/   1183A :                                     dc.b    $E5,$F6,
(1)  125/   1183A : =>TRUE                       else
(1)  125/   1183A : E6F6                                dc.b    $E6,$F6
(1)  125/   1183C : [125]                        endif
(1)  126/   1183C : (MACRO)              	smpsPan             panCenter, $00
(1)  126/   1183C : =$0                  panNone set $00
(1)  126/   1183C : =$40                 panRight set $40
(1)  126/   1183C : =$80                 panLeft set $80
(1)  126/   1183C : =$C0                 panCentre set $C0
(1)  126/   1183C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  126/   1183C : E0C0                        dc.b $E0,panCenter+$00
(1)  127/   1183E : (MACRO)              	smpsJump            Moonrise_Jump01
(1)  127/   1183E : F6                          dc.b    $F6
(1)  127/   1183F : =>TRUE                       if SonicDriverVer<>1
(1)  127/   1183F : C297                                dc.w    z80_ptr(Moonrise_Jump01)
(1)  127/   11841 : =>FALSE                      else
(1)  127/   11841 :                                     dc.w    Moonrise_Jump01-*-1
(1)  127/   11841 : [127]                        endif
(1)  128/   11841 :                     
(1)  129/   11841 :                     Moonrise_Call08:
(1)  130/   11841 : AA12 06             	dc.b	nF3, $12, $06
(1)  131/   11844 : (MACRO)              	smpsFMAlterVol      $0A
(1)  131/   11844 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  131/   11844 :                                     dc.b    $E5,$0A,
(1)  131/   11844 : =>TRUE                       else
(1)  131/   11844 : E60A                                dc.b    $E6,$0A
(1)  131/   11846 : [131]                        endif
(1)  132/   11846 : 800C AA06 80        	dc.b	nRst, $0C, nF3, $06, nRst
(1)  133/   1184B : (MACRO)              	smpsFMAlterVol      $F6
(1)  133/   1184B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  133/   1184B :                                     dc.b    $E5,$F6,
(1)  133/   1184B : =>TRUE                       else
(1)  133/   1184B : E6F6                                dc.b    $E6,$F6
(1)  133/   1184D : [133]                        endif
(1)  134/   1184D : (MACRO)              	smpsReturn
(1)  134/   1184D : =>TRUE                       if SonicDriverVer>=3
(1)  134/   1184D : F9                                  dc.b    $F9
(1)  134/   1184E : =>FALSE                      else
(1)  134/   1184E :                                     dc.b    $E3
(1)  134/   1184E : [134]                        endif
(1)  135/   1184E :                     
(1)  136/   1184E :                     ; FM3 Data
(1)  137/   1184E :                     Moonrise_FM3:
(1)  138/   1184E : (MACRO)              	smpsSetvoice        $01
(1)  138/   1184E :  (MACRO-2)                   smpsFMvoice $01
(1)  138/   1184E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  138/   1184E :                                     dc.b    $EF,$01|$80,+$81
(1)  138/   1184E : =>TRUE                       else
(1)  138/   1184E : EF01                                dc.b    $EF,$01
(1)  138/   11850 : [138]                        endif
(1)  139/   11850 : 8060 8058 AA08      	dc.b	nRst, $60, nRst, $58, nF3, $08, smpsNoAttack, $60, smpsNoAttack, $60
            11856 : E760 E760          
(1)  140/   1185A : (MACRO)              	smpsPan             panRight, $00
(1)  140/   1185A : =$0                  panNone set $00
(1)  140/   1185A : =$40                 panRight set $40
(1)  140/   1185A : =$80                 panLeft set $80
(1)  140/   1185A : =$C0                 panCentre set $C0
(1)  140/   1185A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  140/   1185A : E040                        dc.b $E0,panRight+$00
(1)  141/   1185C :                     
(1)  142/   1185C :                     Moonrise_Loop02:
(1)  143/   1185C : (MACRO)              	smpsCall            Moonrise_Call07
(1)  143/   1185C : F8                          dc.b    $F8
(1)  143/   1185D : =>TRUE                       if SonicDriverVer<>1
(1)  143/   1185D : 7498                                dc.w    z80_ptr(Moonrise_Call07)
(1)  143/   1185F : =>FALSE                      else
(1)  143/   1185F :                                     dc.w    Moonrise_Call07-*-1
(1)  143/   1185F : [143]                        endif
(1)  144/   1185F : (MACRO)              	smpsCall            Moonrise_Call07
(1)  144/   1185F : F8                          dc.b    $F8
(1)  144/   11860 : =>TRUE                       if SonicDriverVer<>1
(1)  144/   11860 : 7498                                dc.w    z80_ptr(Moonrise_Call07)
(1)  144/   11862 : =>FALSE                      else
(1)  144/   11862 :                                     dc.w    Moonrise_Call07-*-1
(1)  144/   11862 : [144]                        endif
(1)  145/   11862 : (MACRO)              	smpsCall            Moonrise_Call07
(1)  145/   11862 : F8                          dc.b    $F8
(1)  145/   11863 : =>TRUE                       if SonicDriverVer<>1
(1)  145/   11863 : 7498                                dc.w    z80_ptr(Moonrise_Call07)
(1)  145/   11865 : =>FALSE                      else
(1)  145/   11865 :                                     dc.w    Moonrise_Call07-*-1
(1)  145/   11865 : [145]                        endif
(1)  146/   11865 : (MACRO)              	smpsChangeTransposition $02
(1)  146/   11865 : =>TRUE                       if SonicDriverVer>=3
(1)  146/   11865 : FB02                                dc.b    $FB,$02
(1)  146/   11867 : =>FALSE                      else
(1)  146/   11867 :                                     dc.b    $E9,$02
(1)  146/   11867 : [146]                        endif
(1)  147/   11867 : (MACRO)              	smpsCall            Moonrise_Call07
(1)  147/   11867 : F8                          dc.b    $F8
(1)  147/   11868 : =>TRUE                       if SonicDriverVer<>1
(1)  147/   11868 : 7498                                dc.w    z80_ptr(Moonrise_Call07)
(1)  147/   1186A : =>FALSE                      else
(1)  147/   1186A :                                     dc.w    Moonrise_Call07-*-1
(1)  147/   1186A : [147]                        endif
(1)  148/   1186A : (MACRO)              	smpsChangeTransposition $FE
(1)  148/   1186A : =>TRUE                       if SonicDriverVer>=3
(1)  148/   1186A : FBFE                                dc.b    $FB,$FE
(1)  148/   1186C : =>FALSE                      else
(1)  148/   1186C :                                     dc.b    $E9,$FE
(1)  148/   1186C : [148]                        endif
(1)  149/   1186C : (MACRO)              	smpsLoop            $00, $04, Moonrise_Loop02
(1)  149/   1186C : F7                          dc.b    $F7
(1)  149/   1186D : 0004                        dc.b    $00,$04
(1)  149/   1186F : =>TRUE                       if SonicDriverVer<>1
(1)  149/   1186F : 5C98                                dc.w    z80_ptr(Moonrise_Loop02)
(1)  149/   11871 : =>FALSE                      else
(1)  149/   11871 :                                     dc.w    Moonrise_Loop02-*-1
(1)  149/   11871 : [149]                        endif
(1)  150/   11871 : (MACRO)              	smpsJump            Moonrise_Loop02
(1)  150/   11871 : F6                          dc.b    $F6
(1)  150/   11872 : =>TRUE                       if SonicDriverVer<>1
(1)  150/   11872 : 5C98                                dc.w    z80_ptr(Moonrise_Loop02)
(1)  150/   11874 : =>FALSE                      else
(1)  150/   11874 :                                     dc.w    Moonrise_Loop02-*-1
(1)  150/   11874 : [150]                        endif
(1)  151/   11874 :                     
(1)  152/   11874 :                     Moonrise_Call07:
(1)  153/   11874 : AE12 06             	dc.b	nA3, $12, $06
(1)  154/   11877 : (MACRO)              	smpsFMAlterVol      $0A
(1)  154/   11877 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  154/   11877 :                                     dc.b    $E5,$0A,
(1)  154/   11877 : =>TRUE                       else
(1)  154/   11877 : E60A                                dc.b    $E6,$0A
(1)  154/   11879 : [154]                        endif
(1)  155/   11879 : 800C AE06 80        	dc.b	nRst, $0C, nA3, $06, nRst
(1)  156/   1187E : (MACRO)              	smpsFMAlterVol      $F6
(1)  156/   1187E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  156/   1187E :                                     dc.b    $E5,$F6,
(1)  156/   1187E : =>TRUE                       else
(1)  156/   1187E : E6F6                                dc.b    $E6,$F6
(1)  156/   11880 : [156]                        endif
(1)  157/   11880 : (MACRO)              	smpsReturn
(1)  157/   11880 : =>TRUE                       if SonicDriverVer>=3
(1)  157/   11880 : F9                                  dc.b    $F9
(1)  157/   11881 : =>FALSE                      else
(1)  157/   11881 :                                     dc.b    $E3
(1)  157/   11881 : [157]                        endif
(1)  158/   11881 :                     
(1)  159/   11881 :                     ; FM4 Data
(1)  160/   11881 :                     Moonrise_FM4:
(1)  161/   11881 : (MACRO)              	smpsSetvoice        $01
(1)  161/   11881 :  (MACRO-2)                   smpsFMvoice $01
(1)  161/   11881 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  161/   11881 :                                     dc.b    $EF,$01|$80,+$81
(1)  161/   11881 : =>TRUE                       else
(1)  161/   11881 : EF01                                dc.b    $EF,$01
(1)  161/   11883 : [161]                        endif
(1)  162/   11883 : 8060 805C AE04      	dc.b	nRst, $60, nRst, $5C, nA3, $04, smpsNoAttack, $60, smpsNoAttack, $60
            11889 : E760 E760          
(1)  163/   1188D : (MACRO)              	smpsPan             panLeft, $00
(1)  163/   1188D : =$0                  panNone set $00
(1)  163/   1188D : =$40                 panRight set $40
(1)  163/   1188D : =$80                 panLeft set $80
(1)  163/   1188D : =$C0                 panCentre set $C0
(1)  163/   1188D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  163/   1188D : E080                        dc.b $E0,panLeft+$00
(1)  164/   1188F :                     
(1)  165/   1188F :                     Moonrise_Loop01:
(1)  166/   1188F : (MACRO)              	smpsCall            Moonrise_Call06
(1)  166/   1188F : F8                          dc.b    $F8
(1)  166/   11890 : =>TRUE                       if SonicDriverVer<>1
(1)  166/   11890 : AB98                                dc.w    z80_ptr(Moonrise_Call06)
(1)  166/   11892 : =>FALSE                      else
(1)  166/   11892 :                                     dc.w    Moonrise_Call06-*-1
(1)  166/   11892 : [166]                        endif
(1)  167/   11892 : (MACRO)              	smpsChangeTransposition $FF
(1)  167/   11892 : =>TRUE                       if SonicDriverVer>=3
(1)  167/   11892 : FBFF                                dc.b    $FB,$FF
(1)  167/   11894 : =>FALSE                      else
(1)  167/   11894 :                                     dc.b    $E9,$FF
(1)  167/   11894 : [167]                        endif
(1)  168/   11894 : (MACRO)              	smpsCall            Moonrise_Call06
(1)  168/   11894 : F8                          dc.b    $F8
(1)  168/   11895 : =>TRUE                       if SonicDriverVer<>1
(1)  168/   11895 : AB98                                dc.w    z80_ptr(Moonrise_Call06)
(1)  168/   11897 : =>FALSE                      else
(1)  168/   11897 :                                     dc.w    Moonrise_Call06-*-1
(1)  168/   11897 : [168]                        endif
(1)  169/   11897 : (MACRO)              	smpsChangeTransposition $01
(1)  169/   11897 : =>TRUE                       if SonicDriverVer>=3
(1)  169/   11897 : FB01                                dc.b    $FB,$01
(1)  169/   11899 : =>FALSE                      else
(1)  169/   11899 :                                     dc.b    $E9,$01
(1)  169/   11899 : [169]                        endif
(1)  170/   11899 : (MACRO)              	smpsCall            Moonrise_Call06
(1)  170/   11899 : F8                          dc.b    $F8
(1)  170/   1189A : =>TRUE                       if SonicDriverVer<>1
(1)  170/   1189A : AB98                                dc.w    z80_ptr(Moonrise_Call06)
(1)  170/   1189C : =>FALSE                      else
(1)  170/   1189C :                                     dc.w    Moonrise_Call06-*-1
(1)  170/   1189C : [170]                        endif
(1)  171/   1189C : (MACRO)              	smpsChangeTransposition $02
(1)  171/   1189C : =>TRUE                       if SonicDriverVer>=3
(1)  171/   1189C : FB02                                dc.b    $FB,$02
(1)  171/   1189E : =>FALSE                      else
(1)  171/   1189E :                                     dc.b    $E9,$02
(1)  171/   1189E : [171]                        endif
(1)  172/   1189E : (MACRO)              	smpsCall            Moonrise_Call06
(1)  172/   1189E : F8                          dc.b    $F8
(1)  172/   1189F : =>TRUE                       if SonicDriverVer<>1
(1)  172/   1189F : AB98                                dc.w    z80_ptr(Moonrise_Call06)
(1)  172/   118A1 : =>FALSE                      else
(1)  172/   118A1 :                                     dc.w    Moonrise_Call06-*-1
(1)  172/   118A1 : [172]                        endif
(1)  173/   118A1 : (MACRO)              	smpsChangeTransposition $FE
(1)  173/   118A1 : =>TRUE                       if SonicDriverVer>=3
(1)  173/   118A1 : FBFE                                dc.b    $FB,$FE
(1)  173/   118A3 : =>FALSE                      else
(1)  173/   118A3 :                                     dc.b    $E9,$FE
(1)  173/   118A3 : [173]                        endif
(1)  174/   118A3 : (MACRO)              	smpsLoop            $00, $04, Moonrise_Loop01
(1)  174/   118A3 : F7                          dc.b    $F7
(1)  174/   118A4 : 0004                        dc.b    $00,$04
(1)  174/   118A6 : =>TRUE                       if SonicDriverVer<>1
(1)  174/   118A6 : 8F98                                dc.w    z80_ptr(Moonrise_Loop01)
(1)  174/   118A8 : =>FALSE                      else
(1)  174/   118A8 :                                     dc.w    Moonrise_Loop01-*-1
(1)  174/   118A8 : [174]                        endif
(1)  175/   118A8 : (MACRO)              	smpsJump            Moonrise_Loop01
(1)  175/   118A8 : F6                          dc.b    $F6
(1)  175/   118A9 : =>TRUE                       if SonicDriverVer<>1
(1)  175/   118A9 : 8F98                                dc.w    z80_ptr(Moonrise_Loop01)
(1)  175/   118AB : =>FALSE                      else
(1)  175/   118AB :                                     dc.w    Moonrise_Loop01-*-1
(1)  175/   118AB : [175]                        endif
(1)  176/   118AB :                     
(1)  177/   118AB :                     Moonrise_Call06:
(1)  178/   118AB : A512 06             	dc.b	nC3, $12, $06
(1)  179/   118AE : (MACRO)              	smpsFMAlterVol      $0A
(1)  179/   118AE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  179/   118AE :                                     dc.b    $E5,$0A,
(1)  179/   118AE : =>TRUE                       else
(1)  179/   118AE : E60A                                dc.b    $E6,$0A
(1)  179/   118B0 : [179]                        endif
(1)  180/   118B0 : 800C A506 80        	dc.b	nRst, $0C, nC3, $06, nRst
(1)  181/   118B5 : (MACRO)              	smpsFMAlterVol      $F6
(1)  181/   118B5 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  181/   118B5 :                                     dc.b    $E5,$F6,
(1)  181/   118B5 : =>TRUE                       else
(1)  181/   118B5 : E6F6                                dc.b    $E6,$F6
(1)  181/   118B7 : [181]                        endif
(1)  182/   118B7 : (MACRO)              	smpsReturn
(1)  182/   118B7 : =>TRUE                       if SonicDriverVer>=3
(1)  182/   118B7 : F9                                  dc.b    $F9
(1)  182/   118B8 : =>FALSE                      else
(1)  182/   118B8 :                                     dc.b    $E3
(1)  182/   118B8 : [182]                        endif
(1)  183/   118B8 :                     
(1)  184/   118B8 :                     ; FM5 Data
(1)  185/   118B8 :                     Moonrise_FM5:
(1)  186/   118B8 : (MACRO)              	smpsSetvoice        $01
(1)  186/   118B8 :  (MACRO-2)                   smpsFMvoice $01
(1)  186/   118B8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  186/   118B8 :                                     dc.b    $EF,$01|$80,+$81
(1)  186/   118B8 : =>TRUE                       else
(1)  186/   118B8 : EF01                                dc.b    $EF,$01
(1)  186/   118BA : [186]                        endif
(1)  187/   118BA : (MACRO)              	smpsPan             panRight, $00
(1)  187/   118BA : =$0                  panNone set $00
(1)  187/   118BA : =$40                 panRight set $40
(1)  187/   118BA : =$80                 panLeft set $80
(1)  187/   118BA : =$C0                 panCentre set $C0
(1)  187/   118BA : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  187/   118BA : E040                        dc.b $E0,panRight+$00
(1)  188/   118BC : 8060 80B1 E730      	dc.b	nRst, $60, nRst, nC4, smpsNoAttack, $30
(1)  189/   118C2 : (MACRO)              	smpsFMAlterVol      $0A
(1)  189/   118C2 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  189/   118C2 :                                     dc.b    $E5,$0A,
(1)  189/   118C2 : =>TRUE                       else
(1)  189/   118C2 : E60A                                dc.b    $E6,$0A
(1)  189/   118C4 : [189]                        endif
(1)  190/   118C4 : (MACRO)              	smpsCall            Moonrise_Call02
(1)  190/   118C4 : F8                          dc.b    $F8
(1)  190/   118C5 : =>TRUE                       if SonicDriverVer<>1
(1)  190/   118C5 : E798                                dc.w    z80_ptr(Moonrise_Call02)
(1)  190/   118C7 : =>FALSE                      else
(1)  190/   118C7 :                                     dc.w    Moonrise_Call02-*-1
(1)  190/   118C7 : [190]                        endif
(1)  191/   118C7 :                     
(1)  192/   118C7 :                     Moonrise_Loop00:
(1)  193/   118C7 : (MACRO)              	smpsCall            Moonrise_Call03
(1)  193/   118C7 : F8                          dc.b    $F8
(1)  193/   118C8 : =>TRUE                       if SonicDriverVer<>1
(1)  193/   118C8 : FB98                                dc.w    z80_ptr(Moonrise_Call03)
(1)  193/   118CA : =>FALSE                      else
(1)  193/   118CA :                                     dc.w    Moonrise_Call03-*-1
(1)  193/   118CA : [193]                        endif
(1)  194/   118CA : (MACRO)              	smpsCall            Moonrise_Call04
(1)  194/   118CA : F8                          dc.b    $F8
(1)  194/   118CB : =>TRUE                       if SonicDriverVer<>1
(1)  194/   118CB : 2899                                dc.w    z80_ptr(Moonrise_Call04)
(1)  194/   118CD : =>FALSE                      else
(1)  194/   118CD :                                     dc.w    Moonrise_Call04-*-1
(1)  194/   118CD : [194]                        endif
(1)  195/   118CD : (MACRO)              	smpsCall            Moonrise_Call03
(1)  195/   118CD : F8                          dc.b    $F8
(1)  195/   118CE : =>TRUE                       if SonicDriverVer<>1
(1)  195/   118CE : FB98                                dc.w    z80_ptr(Moonrise_Call03)
(1)  195/   118D0 : =>FALSE                      else
(1)  195/   118D0 :                                     dc.w    Moonrise_Call03-*-1
(1)  195/   118D0 : [195]                        endif
(1)  196/   118D0 : (MACRO)              	smpsCall            Moonrise_Call05
(1)  196/   118D0 : F8                          dc.b    $F8
(1)  196/   118D1 : =>TRUE                       if SonicDriverVer<>1
(1)  196/   118D1 : 4C99                                dc.w    z80_ptr(Moonrise_Call05)
(1)  196/   118D3 : =>FALSE                      else
(1)  196/   118D3 :                                     dc.w    Moonrise_Call05-*-1
(1)  196/   118D3 : [196]                        endif
(1)  197/   118D3 : (MACRO)              	smpsCall            Moonrise_Call03
(1)  197/   118D3 : F8                          dc.b    $F8
(1)  197/   118D4 : =>TRUE                       if SonicDriverVer<>1
(1)  197/   118D4 : FB98                                dc.w    z80_ptr(Moonrise_Call03)
(1)  197/   118D6 : =>FALSE                      else
(1)  197/   118D6 :                                     dc.w    Moonrise_Call03-*-1
(1)  197/   118D6 : [197]                        endif
(1)  198/   118D6 : (MACRO)              	smpsCall            Moonrise_Call04
(1)  198/   118D6 : F8                          dc.b    $F8
(1)  198/   118D7 : =>TRUE                       if SonicDriverVer<>1
(1)  198/   118D7 : 2899                                dc.w    z80_ptr(Moonrise_Call04)
(1)  198/   118D9 : =>FALSE                      else
(1)  198/   118D9 :                                     dc.w    Moonrise_Call04-*-1
(1)  198/   118D9 : [198]                        endif
(1)  199/   118D9 : (MACRO)              	smpsCall            Moonrise_Call03
(1)  199/   118D9 : F8                          dc.b    $F8
(1)  199/   118DA : =>TRUE                       if SonicDriverVer<>1
(1)  199/   118DA : FB98                                dc.w    z80_ptr(Moonrise_Call03)
(1)  199/   118DC : =>FALSE                      else
(1)  199/   118DC :                                     dc.w    Moonrise_Call03-*-1
(1)  199/   118DC : [199]                        endif
(1)  200/   118DC : (MACRO)              	smpsCall            Moonrise_Call02
(1)  200/   118DC : F8                          dc.b    $F8
(1)  200/   118DD : =>TRUE                       if SonicDriverVer<>1
(1)  200/   118DD : E798                                dc.w    z80_ptr(Moonrise_Call02)
(1)  200/   118DF : =>FALSE                      else
(1)  200/   118DF :                                     dc.w    Moonrise_Call02-*-1
(1)  200/   118DF : [200]                        endif
(1)  201/   118DF : (MACRO)              	smpsLoop            $00, $02, Moonrise_Loop00
(1)  201/   118DF : F7                          dc.b    $F7
(1)  201/   118E0 : 0002                        dc.b    $00,$02
(1)  201/   118E2 : =>TRUE                       if SonicDriverVer<>1
(1)  201/   118E2 : C798                                dc.w    z80_ptr(Moonrise_Loop00)
(1)  201/   118E4 : =>FALSE                      else
(1)  201/   118E4 :                                     dc.w    Moonrise_Loop00-*-1
(1)  201/   118E4 : [201]                        endif
(1)  202/   118E4 : (MACRO)              	smpsJump            Moonrise_Loop00
(1)  202/   118E4 : F6                          dc.b    $F6
(1)  202/   118E5 : =>TRUE                       if SonicDriverVer<>1
(1)  202/   118E5 : C798                                dc.w    z80_ptr(Moonrise_Loop00)
(1)  202/   118E7 : =>FALSE                      else
(1)  202/   118E7 :                                     dc.w    Moonrise_Loop00-*-1
(1)  202/   118E7 : [202]                        endif
(1)  203/   118E7 :                     
(1)  204/   118E7 :                     Moonrise_Call02:
(1)  205/   118E7 : (MACRO)              	smpsSetvoice        $03
(1)  205/   118E7 :  (MACRO-2)                   smpsFMvoice $03
(1)  205/   118E7 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  205/   118E7 :                                     dc.b    $EF,$03|$80,+$81
(1)  205/   118E7 : =>TRUE                       else
(1)  205/   118E7 : EF03                                dc.b    $EF,$03
(1)  205/   118E9 : [205]                        endif
(1)  206/   118E9 : (MACRO)              	smpsPan             panLeft, $00
(1)  206/   118E9 : =$0                  panNone set $00
(1)  206/   118E9 : =$40                 panRight set $40
(1)  206/   118E9 : =$80                 panLeft set $80
(1)  206/   118E9 : =$C0                 panCentre set $C0
(1)  206/   118E9 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  206/   118E9 : E080                        dc.b $E0,panLeft+$00
(1)  207/   118EB : C406 C2BF B8        	dc.b	nG5, $06, nF5, nD5, nG4
(1)  208/   118F0 : (MACRO)              	smpsPan             panRight, $00
(1)  208/   118F0 : =$0                  panNone set $00
(1)  208/   118F0 : =$40                 panRight set $40
(1)  208/   118F0 : =$80                 panLeft set $80
(1)  208/   118F0 : =$C0                 panCentre set $C0
(1)  208/   118F0 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  208/   118F0 : E040                        dc.b $E0,panRight+$00
(1)  209/   118F2 : C4C2 BFB8           	dc.b	nG5, nF5, nD5, nG4
(1)  210/   118F6 : (MACRO)              	smpsPan             panCenter, $00
(1)  210/   118F6 : =$0                  panNone set $00
(1)  210/   118F6 : =$40                 panRight set $40
(1)  210/   118F6 : =$80                 panLeft set $80
(1)  210/   118F6 : =$C0                 panCentre set $C0
(1)  210/   118F6 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  210/   118F6 : E0C0                        dc.b $E0,panCenter+$00
(1)  211/   118F8 : (MACRO)              	smpsSetvoice        $04
(1)  211/   118F8 :  (MACRO-2)                   smpsFMvoice $04
(1)  211/   118F8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  211/   118F8 :                                     dc.b    $EF,$04|$80,+$81
(1)  211/   118F8 : =>TRUE                       else
(1)  211/   118F8 : EF04                                dc.b    $EF,$04
(1)  211/   118FA : [211]                        endif
(1)  212/   118FA : (MACRO)              	smpsReturn
(1)  212/   118FA : =>TRUE                       if SonicDriverVer>=3
(1)  212/   118FA : F9                                  dc.b    $F9
(1)  212/   118FB : =>FALSE                      else
(1)  212/   118FB :                                     dc.b    $E3
(1)  212/   118FB : [212]                        endif
(1)  213/   118FB :                     
(1)  214/   118FB :                     Moonrise_Call03:
(1)  215/   118FB : B806                	dc.b	nG4, $06
(1)  216/   118FD : (MACRO)              	smpsFMAlterVol      $0A
(1)  216/   118FD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  216/   118FD :                                     dc.b    $E5,$0A,
(1)  216/   118FD : =>TRUE                       else
(1)  216/   118FD : E60A                                dc.b    $E6,$0A
(1)  216/   118FF : [216]                        endif
(1)  217/   118FF : (MACRO)              	smpsPan             panRight, $00
(1)  217/   118FF : =$0                  panNone set $00
(1)  217/   118FF : =$40                 panRight set $40
(1)  217/   118FF : =$80                 panLeft set $80
(1)  217/   118FF : =$C0                 panCentre set $C0
(1)  217/   118FF : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  217/   118FF : E040                        dc.b $E0,panRight+$00
(1)  218/   11901 : B8                  	dc.b	nG4
(1)  219/   11902 : (MACRO)              	smpsFMAlterVol      $F6
(1)  219/   11902 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  219/   11902 :                                     dc.b    $E5,$F6,
(1)  219/   11902 : =>TRUE                       else
(1)  219/   11902 : E6F6                                dc.b    $E6,$F6
(1)  219/   11904 : [219]                        endif
(1)  220/   11904 : (MACRO)              	smpsPan             panCenter, $00
(1)  220/   11904 : =$0                  panNone set $00
(1)  220/   11904 : =$40                 panRight set $40
(1)  220/   11904 : =$80                 panLeft set $80
(1)  220/   11904 : =$C0                 panCentre set $C0
(1)  220/   11904 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  220/   11904 : E0C0                        dc.b $E0,panCenter+$00
(1)  221/   11906 : B606                	dc.b	nF4, $06
(1)  222/   11908 : (MACRO)              	smpsFMAlterVol      $0A
(1)  222/   11908 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  222/   11908 :                                     dc.b    $E5,$0A,
(1)  222/   11908 : =>TRUE                       else
(1)  222/   11908 : E60A                                dc.b    $E6,$0A
(1)  222/   1190A : [222]                        endif
(1)  223/   1190A : (MACRO)              	smpsPan             panRight, $00
(1)  223/   1190A : =$0                  panNone set $00
(1)  223/   1190A : =$40                 panRight set $40
(1)  223/   1190A : =$80                 panLeft set $80
(1)  223/   1190A : =$C0                 panCentre set $C0
(1)  223/   1190A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  223/   1190A : E040                        dc.b $E0,panRight+$00
(1)  224/   1190C : B6                  	dc.b	nF4
(1)  225/   1190D : (MACRO)              	smpsFMAlterVol      $F6
(1)  225/   1190D : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  225/   1190D :                                     dc.b    $E5,$F6,
(1)  225/   1190D : =>TRUE                       else
(1)  225/   1190D : E6F6                                dc.b    $E6,$F6
(1)  225/   1190F : [225]                        endif
(1)  226/   1190F : (MACRO)              	smpsPan             panCenter, $00
(1)  226/   1190F : =$0                  panNone set $00
(1)  226/   1190F : =$40                 panRight set $40
(1)  226/   1190F : =$80                 panLeft set $80
(1)  226/   1190F : =$C0                 panCentre set $C0
(1)  226/   1190F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  226/   1190F : E0C0                        dc.b $E0,panCenter+$00
(1)  227/   11911 : B306                	dc.b	nD4, $06
(1)  228/   11913 : (MACRO)              	smpsFMAlterVol      $0A
(1)  228/   11913 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  228/   11913 :                                     dc.b    $E5,$0A,
(1)  228/   11913 : =>TRUE                       else
(1)  228/   11913 : E60A                                dc.b    $E6,$0A
(1)  228/   11915 : [228]                        endif
(1)  229/   11915 : (MACRO)              	smpsPan             panRight, $00
(1)  229/   11915 : =$0                  panNone set $00
(1)  229/   11915 : =$40                 panRight set $40
(1)  229/   11915 : =$80                 panLeft set $80
(1)  229/   11915 : =$C0                 panCentre set $C0
(1)  229/   11915 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  229/   11915 : E040                        dc.b $E0,panRight+$00
(1)  230/   11917 : B3                  	dc.b	nD4
(1)  231/   11918 : (MACRO)              	smpsFMAlterVol      $F6
(1)  231/   11918 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  231/   11918 :                                     dc.b    $E5,$F6,
(1)  231/   11918 : =>TRUE                       else
(1)  231/   11918 : E6F6                                dc.b    $E6,$F6
(1)  231/   1191A : [231]                        endif
(1)  232/   1191A : (MACRO)              	smpsPan             panCenter, $00
(1)  232/   1191A : =$0                  panNone set $00
(1)  232/   1191A : =$40                 panRight set $40
(1)  232/   1191A : =$80                 panLeft set $80
(1)  232/   1191A : =$C0                 panCentre set $C0
(1)  232/   1191A : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  232/   1191A : E0C0                        dc.b $E0,panCenter+$00
(1)  233/   1191C : AE06                	dc.b	nA3, $06
(1)  234/   1191E : (MACRO)              	smpsFMAlterVol      $0A
(1)  234/   1191E : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  234/   1191E :                                     dc.b    $E5,$0A,
(1)  234/   1191E : =>TRUE                       else
(1)  234/   1191E : E60A                                dc.b    $E6,$0A
(1)  234/   11920 : [234]                        endif
(1)  235/   11920 : (MACRO)              	smpsPan             panRight, $00
(1)  235/   11920 : =$0                  panNone set $00
(1)  235/   11920 : =$40                 panRight set $40
(1)  235/   11920 : =$80                 panLeft set $80
(1)  235/   11920 : =$C0                 panCentre set $C0
(1)  235/   11920 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  235/   11920 : E040                        dc.b $E0,panRight+$00
(1)  236/   11922 : AE                  	dc.b	nA3
(1)  237/   11923 : (MACRO)              	smpsFMAlterVol      $F6
(1)  237/   11923 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  237/   11923 :                                     dc.b    $E5,$F6,
(1)  237/   11923 : =>TRUE                       else
(1)  237/   11923 : E6F6                                dc.b    $E6,$F6
(1)  237/   11925 : [237]                        endif
(1)  238/   11925 : (MACRO)              	smpsPan             panCenter, $00
(1)  238/   11925 : =$0                  panNone set $00
(1)  238/   11925 : =$40                 panRight set $40
(1)  238/   11925 : =$80                 panLeft set $80
(1)  238/   11925 : =$C0                 panCentre set $C0
(1)  238/   11925 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  238/   11925 : E0C0                        dc.b $E0,panCenter+$00
(1)  239/   11927 : (MACRO)              	smpsReturn
(1)  239/   11927 : =>TRUE                       if SonicDriverVer>=3
(1)  239/   11927 : F9                                  dc.b    $F9
(1)  239/   11928 : =>FALSE                      else
(1)  239/   11928 :                                     dc.b    $E3
(1)  239/   11928 : [239]                        endif
(1)  240/   11928 :                     
(1)  241/   11928 :                     Moonrise_Call04:
(1)  242/   11928 : B806 B6             	dc.b	nG4, $06, nF4
(1)  243/   1192B : (MACRO)              	smpsFMAlterVol      $0A
(1)  243/   1192B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  243/   1192B :                                     dc.b    $E5,$0A,
(1)  243/   1192B : =>TRUE                       else
(1)  243/   1192B : E60A                                dc.b    $E6,$0A
(1)  243/   1192D : [243]                        endif
(1)  244/   1192D : (MACRO)              	smpsPan             panRight, $00
(1)  244/   1192D : =$0                  panNone set $00
(1)  244/   1192D : =$40                 panRight set $40
(1)  244/   1192D : =$80                 panLeft set $80
(1)  244/   1192D : =$C0                 panCentre set $C0
(1)  244/   1192D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  244/   1192D : E040                        dc.b $E0,panRight+$00
(1)  245/   1192F : B6                  	dc.b	nF4
(1)  246/   11930 : (MACRO)              	smpsFMAlterVol      $F6
(1)  246/   11930 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  246/   11930 :                                     dc.b    $E5,$F6,
(1)  246/   11930 : =>TRUE                       else
(1)  246/   11930 : E6F6                                dc.b    $E6,$F6
(1)  246/   11932 : [246]                        endif
(1)  247/   11932 : (MACRO)              	smpsPan             panCenter, $00
(1)  247/   11932 : =$0                  panNone set $00
(1)  247/   11932 : =$40                 panRight set $40
(1)  247/   11932 : =$80                 panLeft set $80
(1)  247/   11932 : =$C0                 panCentre set $C0
(1)  247/   11932 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  247/   11932 : E0C0                        dc.b $E0,panCenter+$00
(1)  248/   11934 : B306                	dc.b	nD4, $06
(1)  249/   11936 : (MACRO)              	smpsFMAlterVol      $0A
(1)  249/   11936 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  249/   11936 :                                     dc.b    $E5,$0A,
(1)  249/   11936 : =>TRUE                       else
(1)  249/   11936 : E60A                                dc.b    $E6,$0A
(1)  249/   11938 : [249]                        endif
(1)  250/   11938 : (MACRO)              	smpsPan             panRight, $00
(1)  250/   11938 : =$0                  panNone set $00
(1)  250/   11938 : =$40                 panRight set $40
(1)  250/   11938 : =$80                 panLeft set $80
(1)  250/   11938 : =$C0                 panCentre set $C0
(1)  250/   11938 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  250/   11938 : E040                        dc.b $E0,panRight+$00
(1)  251/   1193A : B3                  	dc.b	nD4
(1)  252/   1193B : (MACRO)              	smpsFMAlterVol      $F6
(1)  252/   1193B : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  252/   1193B :                                     dc.b    $E5,$F6,
(1)  252/   1193B : =>TRUE                       else
(1)  252/   1193B : E6F6                                dc.b    $E6,$F6
(1)  252/   1193D : [252]                        endif
(1)  253/   1193D : (MACRO)              	smpsPan             panCenter, $00
(1)  253/   1193D : =$0                  panNone set $00
(1)  253/   1193D : =$40                 panRight set $40
(1)  253/   1193D : =$80                 panLeft set $80
(1)  253/   1193D : =$C0                 panCentre set $C0
(1)  253/   1193D : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  253/   1193D : E0C0                        dc.b $E0,panCenter+$00
(1)  254/   1193F : AE06                	dc.b	nA3, $06
(1)  255/   11941 : (MACRO)              	smpsFMAlterVol      $0A
(1)  255/   11941 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  255/   11941 :                                     dc.b    $E5,$0A,
(1)  255/   11941 : =>TRUE                       else
(1)  255/   11941 : E60A                                dc.b    $E6,$0A
(1)  255/   11943 : [255]                        endif
(1)  256/   11943 : (MACRO)              	smpsPan             panRight, $00
(1)  256/   11943 : =$0                  panNone set $00
(1)  256/   11943 : =$40                 panRight set $40
(1)  256/   11943 : =$80                 panLeft set $80
(1)  256/   11943 : =$C0                 panCentre set $C0
(1)  256/   11943 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  256/   11943 : E040                        dc.b $E0,panRight+$00
(1)  257/   11945 : AE                  	dc.b	nA3
(1)  258/   11946 : (MACRO)              	smpsFMAlterVol      $F6
(1)  258/   11946 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  258/   11946 :                                     dc.b    $E5,$F6,
(1)  258/   11946 : =>TRUE                       else
(1)  258/   11946 : E6F6                                dc.b    $E6,$F6
(1)  258/   11948 : [258]                        endif
(1)  259/   11948 : (MACRO)              	smpsPan             panCenter, $00
(1)  259/   11948 : =$0                  panNone set $00
(1)  259/   11948 : =$40                 panRight set $40
(1)  259/   11948 : =$80                 panLeft set $80
(1)  259/   11948 : =$C0                 panCentre set $C0
(1)  259/   11948 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  259/   11948 : E0C0                        dc.b $E0,panCenter+$00
(1)  260/   1194A : AE                  	dc.b	nA3
(1)  261/   1194B : (MACRO)              	smpsReturn
(1)  261/   1194B : =>TRUE                       if SonicDriverVer>=3
(1)  261/   1194B : F9                                  dc.b    $F9
(1)  261/   1194C : =>FALSE                      else
(1)  261/   1194C :                                     dc.b    $E3
(1)  261/   1194C : [261]                        endif
(1)  262/   1194C :                     
(1)  263/   1194C :                     Moonrise_Call05:
(1)  264/   1194C : B806 B6             	dc.b	nG4, $06, nF4
(1)  265/   1194F : (MACRO)              	smpsFMAlterVol      $0A
(1)  265/   1194F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  265/   1194F :                                     dc.b    $E5,$0A,
(1)  265/   1194F : =>TRUE                       else
(1)  265/   1194F : E60A                                dc.b    $E6,$0A
(1)  265/   11951 : [265]                        endif
(1)  266/   11951 : (MACRO)              	smpsPan             panRight, $00
(1)  266/   11951 : =$0                  panNone set $00
(1)  266/   11951 : =$40                 panRight set $40
(1)  266/   11951 : =$80                 panLeft set $80
(1)  266/   11951 : =$C0                 panCentre set $C0
(1)  266/   11951 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  266/   11951 : E040                        dc.b $E0,panRight+$00
(1)  267/   11953 : B6                  	dc.b	nF4
(1)  268/   11954 : (MACRO)              	smpsFMAlterVol      $F6
(1)  268/   11954 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  268/   11954 :                                     dc.b    $E5,$F6,
(1)  268/   11954 : =>TRUE                       else
(1)  268/   11954 : E6F6                                dc.b    $E6,$F6
(1)  268/   11956 : [268]                        endif
(1)  269/   11956 : (MACRO)              	smpsPan             panCenter, $00
(1)  269/   11956 : =$0                  panNone set $00
(1)  269/   11956 : =$40                 panRight set $40
(1)  269/   11956 : =$80                 panLeft set $80
(1)  269/   11956 : =$C0                 panCentre set $C0
(1)  269/   11956 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  269/   11956 : E0C0                        dc.b $E0,panCenter+$00
(1)  270/   11958 : B306                	dc.b	nD4, $06
(1)  271/   1195A : (MACRO)              	smpsFMAlterVol      $0A
(1)  271/   1195A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  271/   1195A :                                     dc.b    $E5,$0A,
(1)  271/   1195A : =>TRUE                       else
(1)  271/   1195A : E60A                                dc.b    $E6,$0A
(1)  271/   1195C : [271]                        endif
(1)  272/   1195C : (MACRO)              	smpsPan             panRight, $00
(1)  272/   1195C : =$0                  panNone set $00
(1)  272/   1195C : =$40                 panRight set $40
(1)  272/   1195C : =$80                 panLeft set $80
(1)  272/   1195C : =$C0                 panCentre set $C0
(1)  272/   1195C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  272/   1195C : E040                        dc.b $E0,panRight+$00
(1)  273/   1195E : B3                  	dc.b	nD4
(1)  274/   1195F : (MACRO)              	smpsFMAlterVol      $F6
(1)  274/   1195F : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  274/   1195F :                                     dc.b    $E5,$F6,
(1)  274/   1195F : =>TRUE                       else
(1)  274/   1195F : E6F6                                dc.b    $E6,$F6
(1)  274/   11961 : [274]                        endif
(1)  275/   11961 : (MACRO)              	smpsPan             panCenter, $00
(1)  275/   11961 : =$0                  panNone set $00
(1)  275/   11961 : =$40                 panRight set $40
(1)  275/   11961 : =$80                 panLeft set $80
(1)  275/   11961 : =$C0                 panCentre set $C0
(1)  275/   11961 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  275/   11961 : E0C0                        dc.b $E0,panCenter+$00
(1)  276/   11963 : AC06                	dc.b	nG3, $06
(1)  277/   11965 : (MACRO)              	smpsFMAlterVol      $0A
(1)  277/   11965 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  277/   11965 :                                     dc.b    $E5,$0A,
(1)  277/   11965 : =>TRUE                       else
(1)  277/   11965 : E60A                                dc.b    $E6,$0A
(1)  277/   11967 : [277]                        endif
(1)  278/   11967 : (MACRO)              	smpsPan             panRight, $00
(1)  278/   11967 : =$0                  panNone set $00
(1)  278/   11967 : =$40                 panRight set $40
(1)  278/   11967 : =$80                 panLeft set $80
(1)  278/   11967 : =$C0                 panCentre set $C0
(1)  278/   11967 : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  278/   11967 : E040                        dc.b $E0,panRight+$00
(1)  279/   11969 : AC                  	dc.b	nG3
(1)  280/   1196A : (MACRO)              	smpsFMAlterVol      $F6
(1)  280/   1196A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  280/   1196A :                                     dc.b    $E5,$F6,
(1)  280/   1196A : =>TRUE                       else
(1)  280/   1196A : E6F6                                dc.b    $E6,$F6
(1)  280/   1196C : [280]                        endif
(1)  281/   1196C : (MACRO)              	smpsPan             panCenter, $00
(1)  281/   1196C : =$0                  panNone set $00
(1)  281/   1196C : =$40                 panRight set $40
(1)  281/   1196C : =$80                 panLeft set $80
(1)  281/   1196C : =$C0                 panCentre set $C0
(1)  281/   1196C : =$C0                 panCenter set $C0 ; silly Americans :U
(1)  281/   1196C : E0C0                        dc.b $E0,panCenter+$00
(1)  282/   1196E : AC                  	dc.b	nG3
(1)  283/   1196F : (MACRO)              	smpsReturn
(1)  283/   1196F : =>TRUE                       if SonicDriverVer>=3
(1)  283/   1196F : F9                                  dc.b    $F9
(1)  283/   11970 : =>FALSE                      else
(1)  283/   11970 :                                     dc.b    $E3
(1)  283/   11970 : [283]                        endif
(1)  284/   11970 :                     
(1)  285/   11970 :                     ; Unreachable
(1)  286/   11970 : (MACRO)              	smpsStop
(1)  286/   11970 : F2                          dc.b    $F2
(1)  287/   11971 :                     
(1)  288/   11971 :                     ; PSG1 Data
(1)  289/   11971 :                     Moonrise_PSG1:
(1)  290/   11971 : (MACRO)              	smpsPSGvoice        sTone_03
(1)  290/   11971 : F503                        dc.b    $F5,sTone_03
(1)  291/   11973 : 8060 8080 8030      	dc.b	nRst, $60, nRst, nRst, nRst, $30, nG4, $06, nFs4, nF4, nD4, nC4
            11979 : B806 B7B6 B3B1    
(1)  292/   1197F : AEAC A7             	dc.b	nA3, nG3, nD3
(1)  293/   11982 :                     
(1)  294/   11982 :                     Moonrise_Jump03:
(1)  295/   11982 : (MACRO)              	smpsCall            Moonrise_Call0B
(1)  295/   11982 : F8                          dc.b    $F8
(1)  295/   11983 : =>TRUE                       if SonicDriverVer<>1
(1)  295/   11983 : 8899                                dc.w    z80_ptr(Moonrise_Call0B)
(1)  295/   11985 : =>FALSE                      else
(1)  295/   11985 :                                     dc.w    Moonrise_Call0B-*-1
(1)  295/   11985 : [295]                        endif
(1)  296/   11985 : (MACRO)              	smpsJump            Moonrise_Jump03
(1)  296/   11985 : F6                          dc.b    $F6
(1)  296/   11986 : =>TRUE                       if SonicDriverVer<>1
(1)  296/   11986 : 8299                                dc.w    z80_ptr(Moonrise_Jump03)
(1)  296/   11988 : =>FALSE                      else
(1)  296/   11988 :                                     dc.w    Moonrise_Jump03-*-1
(1)  296/   11988 : [296]                        endif
(1)  297/   11988 :                     
(1)  298/   11988 :                     Moonrise_Call0B:
(1)  299/   11988 : AA0C 80AC 80B0      	dc.b	nF3, $0C, nRst, nG3, nRst, nB3, $12, nG3, $06, nRst, $0C, nC4
            1198E : 12AC 0680 0CB1    
(1)  300/   11994 : E706 80B0 80B1      	dc.b	smpsNoAttack, $06, nRst, nB3, nRst, nC4, nD4, nRst, nC4, $0C, nRst, $06
            1199A : B380 B10C 8006    
(1)  301/   119A0 : B012 8006 AC0C      	dc.b	nB3, $12, nRst, $06, nG3, $0C, nF3, $0C, nRst, nG3, nRst, nB3
            119A6 : AA0C 80AC 80B0    
(1)  302/   119AC : 12AC 0680 0CB6      	dc.b	$12, nG3, $06, nRst, $0C, nF4, smpsNoAttack, $06, nRst, nG4, nRst, nF4
            119B2 : E706 80B8 80B6    
(1)  303/   119B8 : B580 B336 800C      	dc.b	nE4, nRst, nD4, $36, nRst, $0C, nC4, $18, nA3, $06, nRst, nD4
            119BE : B118 AE06 80B3    
(1)  304/   119C4 : 12AE 0680 1880      	dc.b	$12, nA3, $06, nRst, $18, nRst, $0C, nC4, $18, nA3, $06, nRst
            119CA : 0CB1 18AE 0680    
(1)  305/   119D0 : B112 B306 800C      	dc.b	nC4, $12, nD4, $06, nRst, $0C, nF4, $06, nFs4, nG4, $60, smpsNoAttack
            119D6 : B606 B7B8 60E7    
(1)  306/   119DC : 2480 0CB8 06B7      	dc.b	$24, nRst, $0C, nG4, $06, nFs4, nF4, nD4, nC4, nA3, nG3, nD3
            119E2 : B6B3 B1AE ACA7    
(1)  307/   119E8 : (MACRO)              	smpsReturn
(1)  307/   119E8 : =>TRUE                       if SonicDriverVer>=3
(1)  307/   119E8 : F9                                  dc.b    $F9
(1)  307/   119E9 : =>FALSE                      else
(1)  307/   119E9 :                                     dc.b    $E3
(1)  307/   119E9 : [307]                        endif
(1)  308/   119E9 :                     
(1)  309/   119E9 :                     ; PSG2 Data
(1)  310/   119E9 :                     Moonrise_PSG2:
(1)  311/   119E9 : (MACRO)              	smpsDetune          $01
(1)  311/   119E9 : E101                        dc.b    $E1,$01
(1)  312/   119EB : (MACRO)              	smpsSetvoice        sTone_03
(1)  312/   119EB :  (MACRO-2)                   smpsFMvoice sTone_03
(1)  312/   119EB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)  312/   119EB :                                     dc.b    $EF,sTone_03|$80,+$81
(1)  312/   119EB : =>TRUE                       else
(1)  312/   119EB : EF03                                dc.b    $EF,sTone_03
(1)  312/   119ED : [312]                        endif
(1)  313/   119ED : 8006 8060 8080      	dc.b	nRst, $06, nRst, $60, nRst, nRst, nRst, $30, nG4, $06, nFs4, nF4
            119F3 : 8030 B806 B7B6    
(1)  314/   119F9 : B3B1 AEAC A7        	dc.b	nD4, nC4, nA3, nG3, nD3
(1)  315/   119FE :                     
(1)  316/   119FE :                     Moonrise_Jump02:
(1)  317/   119FE : (MACRO)              	smpsCall            Moonrise_Call0B
(1)  317/   119FE : F8                          dc.b    $F8
(1)  317/   119FF : =>TRUE                       if SonicDriverVer<>1
(1)  317/   119FF : 8899                                dc.w    z80_ptr(Moonrise_Call0B)
(1)  317/   11A01 : =>FALSE                      else
(1)  317/   11A01 :                                     dc.w    Moonrise_Call0B-*-1
(1)  317/   11A01 : [317]                        endif
(1)  318/   11A01 : (MACRO)              	smpsJump            Moonrise_Jump02
(1)  318/   11A01 : F6                          dc.b    $F6
(1)  318/   11A02 : =>TRUE                       if SonicDriverVer<>1
(1)  318/   11A02 : FE99                                dc.w    z80_ptr(Moonrise_Jump02)
(1)  318/   11A04 : =>FALSE                      else
(1)  318/   11A04 :                                     dc.w    Moonrise_Jump02-*-1
(1)  318/   11A04 : [318]                        endif
(1)  319/   11A04 :                     
(1)  320/   11A04 :                     ; PSG3 Data
(1)  321/   11A04 :                     Moonrise_PSG3:
(1)  322/   11A04 : (MACRO)              	smpsPSGform         $E7
(1)  322/   11A04 : F3E7                        dc.b    $F3,$E7
(1)  323/   11A06 :                     
(1)  324/   11A06 :                     Moonrise_Loop07:
(1)  325/   11A06 : (MACRO)              	smpsCall            Moonrise_Call0A
(1)  325/   11A06 : F8                          dc.b    $F8
(1)  325/   11A07 : =>TRUE                       if SonicDriverVer<>1
(1)  325/   11A07 : 199A                                dc.w    z80_ptr(Moonrise_Call0A)
(1)  325/   11A09 : =>FALSE                      else
(1)  325/   11A09 :                                     dc.w    Moonrise_Call0A-*-1
(1)  325/   11A09 : [325]                        endif
(1)  326/   11A09 : (MACRO)              	smpsLoop            $01, $04, Moonrise_Loop07
(1)  326/   11A09 : F7                          dc.b    $F7
(1)  326/   11A0A : 0104                        dc.b    $01,$04
(1)  326/   11A0C : =>TRUE                       if SonicDriverVer<>1
(1)  326/   11A0C : 069A                                dc.w    z80_ptr(Moonrise_Loop07)
(1)  326/   11A0E : =>FALSE                      else
(1)  326/   11A0E :                                     dc.w    Moonrise_Loop07-*-1
(1)  326/   11A0E : [326]                        endif
(1)  327/   11A0E :                     
(1)  328/   11A0E :                     Moonrise_Loop08:
(1)  329/   11A0E : (MACRO)              	smpsCall            Moonrise_Call0A
(1)  329/   11A0E : F8                          dc.b    $F8
(1)  329/   11A0F : =>TRUE                       if SonicDriverVer<>1
(1)  329/   11A0F : 199A                                dc.w    z80_ptr(Moonrise_Call0A)
(1)  329/   11A11 : =>FALSE                      else
(1)  329/   11A11 :                                     dc.w    Moonrise_Call0A-*-1
(1)  329/   11A11 : [329]                        endif
(1)  330/   11A11 : (MACRO)              	smpsLoop            $01, $08, Moonrise_Loop08
(1)  330/   11A11 : F7                          dc.b    $F7
(1)  330/   11A12 : 0108                        dc.b    $01,$08
(1)  330/   11A14 : =>TRUE                       if SonicDriverVer<>1
(1)  330/   11A14 : 0E9A                                dc.w    z80_ptr(Moonrise_Loop08)
(1)  330/   11A16 : =>FALSE                      else
(1)  330/   11A16 :                                     dc.w    Moonrise_Loop08-*-1
(1)  330/   11A16 : [330]                        endif
(1)  331/   11A16 : (MACRO)              	smpsJump            Moonrise_Loop08
(1)  331/   11A16 : F6                          dc.b    $F6
(1)  331/   11A17 : =>TRUE                       if SonicDriverVer<>1
(1)  331/   11A17 : 0E9A                                dc.w    z80_ptr(Moonrise_Loop08)
(1)  331/   11A19 : =>FALSE                      else
(1)  331/   11A19 :                                     dc.w    Moonrise_Loop08-*-1
(1)  331/   11A19 : [331]                        endif
(1)  332/   11A19 :                     
(1)  333/   11A19 :                     Moonrise_Call0A:
(1)  334/   11A19 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  334/   11A19 : F502                        dc.b    $F5,sTone_02
(1)  335/   11A1B : B106                	dc.b	(nMaxPSG2-$23)&$FF, $06
(1)  336/   11A1D : (MACRO)              	smpsLoop            $00, $0A, Moonrise_Call0A
(1)  336/   11A1D : F7                          dc.b    $F7
(1)  336/   11A1E : 000A                        dc.b    $00,$0A
(1)  336/   11A20 : =>TRUE                       if SonicDriverVer<>1
(1)  336/   11A20 : 199A                                dc.w    z80_ptr(Moonrise_Call0A)
(1)  336/   11A22 : =>FALSE                      else
(1)  336/   11A22 :                                     dc.w    Moonrise_Call0A-*-1
(1)  336/   11A22 : [336]                        endif
(1)  337/   11A22 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  337/   11A22 : F505                        dc.b    $F5,sTone_05
(1)  338/   11A24 : 0C                  	dc.b	$0C
(1)  339/   11A25 : (MACRO)              	smpsPSGvoice        sTone_02
(1)  339/   11A25 : F502                        dc.b    $F5,sTone_02
(1)  340/   11A27 : 0606                	dc.b	$06, $06
(1)  341/   11A29 : (MACRO)              	smpsPSGvoice        sTone_05
(1)  341/   11A29 : F505                        dc.b    $F5,sTone_05
(1)  342/   11A2B : 0C                  	dc.b	$0C
(1)  343/   11A2C : (MACRO)              	smpsReturn
(1)  343/   11A2C : =>TRUE                       if SonicDriverVer>=3
(1)  343/   11A2C : F9                                  dc.b    $F9
(1)  343/   11A2D : =>FALSE                      else
(1)  343/   11A2D :                                     dc.b    $E3
(1)  343/   11A2D : [343]                        endif
(1)  344/   11A2D :                     
(1)  345/   11A2D :                     ; DAC Data
(1)  346/   11A2D :                     Moonrise_DAC:
(1)  347/   11A2D : 8130 8181 8106      	dc.b	dKick, $30, dKick, dKick, dKick, $06, dKick, dSnare, dKick, dHighTom, dHighTom, dMidTom
            11A33 : 8182 8183 8384    
(1)  348/   11A39 : 8581 3081 8181      	dc.b	dLowTom, dKick, $30, dKick, dKick, dKick, $06, dSnare, $04, dSnare, dSnare, dSnare
            11A3F : 0682 0482 8282    
(1)  349/   11A45 : 0682 8282 82        	dc.b	$06, dSnare, dSnare, dSnare, dSnare
(1)  350/   11A4A :                     
(1)  351/   11A4A :                     Moonrise_Jump00:
(1)  352/   11A4A : (MACRO)              	smpsCall            Moonrise_Call00
(1)  352/   11A4A : F8                          dc.b    $F8
(1)  352/   11A4B : =>TRUE                       if SonicDriverVer<>1
(1)  352/   11A4B : 7C9A                                dc.w    z80_ptr(Moonrise_Call00)
(1)  352/   11A4D : =>FALSE                      else
(1)  352/   11A4D :                                     dc.w    Moonrise_Call00-*-1
(1)  352/   11A4D : [352]                        endif
(1)  353/   11A4D : (MACRO)              	smpsCall            Moonrise_Call01
(1)  353/   11A4D : F8                          dc.b    $F8
(1)  353/   11A4E : =>TRUE                       if SonicDriverVer<>1
(1)  353/   11A4E : 879A                                dc.w    z80_ptr(Moonrise_Call01)
(1)  353/   11A50 : =>FALSE                      else
(1)  353/   11A50 :                                     dc.w    Moonrise_Call01-*-1
(1)  353/   11A50 : [353]                        endif
(1)  354/   11A50 : (MACRO)              	smpsCall            Moonrise_Call00
(1)  354/   11A50 : F8                          dc.b    $F8
(1)  354/   11A51 : =>TRUE                       if SonicDriverVer<>1
(1)  354/   11A51 : 7C9A                                dc.w    z80_ptr(Moonrise_Call00)
(1)  354/   11A53 : =>FALSE                      else
(1)  354/   11A53 :                                     dc.w    Moonrise_Call00-*-1
(1)  354/   11A53 : [354]                        endif
(1)  355/   11A53 : 8112 0682 1881      	dc.b	dKick, $12, $06, dSnare, $18, dKick, $06, $0C, $06, dSnare, $12, $06
            11A59 : 060C 0682 1206    
(1)  356/   11A5F : (MACRO)              	smpsCall            Moonrise_Call00
(1)  356/   11A5F : F8                          dc.b    $F8
(1)  356/   11A60 : =>TRUE                       if SonicDriverVer<>1
(1)  356/   11A60 : 7C9A                                dc.w    z80_ptr(Moonrise_Call00)
(1)  356/   11A62 : =>FALSE                      else
(1)  356/   11A62 :                                     dc.w    Moonrise_Call00-*-1
(1)  356/   11A62 : [356]                        endif
(1)  357/   11A62 : (MACRO)              	smpsCall            Moonrise_Call01
(1)  357/   11A62 : F8                          dc.b    $F8
(1)  357/   11A63 : =>TRUE                       if SonicDriverVer<>1
(1)  357/   11A63 : 879A                                dc.w    z80_ptr(Moonrise_Call01)
(1)  357/   11A65 : =>FALSE                      else
(1)  357/   11A65 :                                     dc.w    Moonrise_Call01-*-1
(1)  357/   11A65 : [357]                        endif
(1)  358/   11A65 : (MACRO)              	smpsCall            Moonrise_Call00
(1)  358/   11A65 : F8                          dc.b    $F8
(1)  358/   11A66 : =>TRUE                       if SonicDriverVer<>1
(1)  358/   11A66 : 7C9A                                dc.w    z80_ptr(Moonrise_Call00)
(1)  358/   11A68 : =>FALSE                      else
(1)  358/   11A68 :                                     dc.w    Moonrise_Call00-*-1
(1)  358/   11A68 : [358]                        endif
(1)  359/   11A68 : 8112 0682 1881      	dc.b	dKick, $12, $06, dSnare, $18, dKick, $06, dKick, dSnare, $04, dSnare, dSnare
            11A6E : 0681 8204 8282    
(1)  360/   11A74 : 8206 8282 82        	dc.b	dSnare, $06, dSnare, dSnare, dSnare
(1)  361/   11A79 : (MACRO)              	smpsJump            Moonrise_Jump00
(1)  361/   11A79 : F6                          dc.b    $F6
(1)  361/   11A7A : =>TRUE                       if SonicDriverVer<>1
(1)  361/   11A7A : 4A9A                                dc.w    z80_ptr(Moonrise_Jump00)
(1)  361/   11A7C : =>FALSE                      else
(1)  361/   11A7C :                                     dc.w    Moonrise_Jump00-*-1
(1)  361/   11A7C : [361]                        endif
(1)  362/   11A7C :                     
(1)  363/   11A7C :                     Moonrise_Call00:
(1)  364/   11A7C : 8112 0682 18        	dc.b	dKick, $12, $06, dSnare, $18
(1)  365/   11A81 : (MACRO)              	smpsLoop            $00, $02, Moonrise_Call00
(1)  365/   11A81 : F7                          dc.b    $F7
(1)  365/   11A82 : 0002                        dc.b    $00,$02
(1)  365/   11A84 : =>TRUE                       if SonicDriverVer<>1
(1)  365/   11A84 : 7C9A                                dc.w    z80_ptr(Moonrise_Call00)
(1)  365/   11A86 : =>FALSE                      else
(1)  365/   11A86 :                                     dc.w    Moonrise_Call00-*-1
(1)  365/   11A86 : [365]                        endif
(1)  366/   11A86 : (MACRO)              	smpsReturn
(1)  366/   11A86 : =>TRUE                       if SonicDriverVer>=3
(1)  366/   11A86 : F9                                  dc.b    $F9
(1)  366/   11A87 : =>FALSE                      else
(1)  366/   11A87 :                                     dc.b    $E3
(1)  366/   11A87 : [366]                        endif
(1)  367/   11A87 :                     
(1)  368/   11A87 :                     Moonrise_Call01:
(1)  369/   11A87 : 8112 0682 1881      	dc.b	dKick, $12, $06, dSnare, $18, dKick, $06, $0C, $06, dSnare, $18
            11A8D : 060C 0682 18       
(1)  370/   11A92 : (MACRO)              	smpsReturn
(1)  370/   11A92 : =>TRUE                       if SonicDriverVer>=3
(1)  370/   11A92 : F9                                  dc.b    $F9
(1)  370/   11A93 : =>FALSE                      else
(1)  370/   11A93 :                                     dc.b    $E3
(1)  370/   11A93 : [370]                        endif
(1)  371/   11A93 :                     
(1)  372/   11A93 :                     Moonrise_Voices:
(1)  373/   11A93 :                     ;	Voice $00
(1)  374/   11A93 :                     ;	$3C
(1)  375/   11A93 :                     ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $0D, $12, $05
(1)  376/   11A93 :                     ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $80, $07, $80
(1)  377/   11A93 : (MACRO)              	smpsVcAlgorithm     $04
(1)  377/   11A93 : =$4                  vcAlgorithm set $04
(1)  378/   11A93 : (MACRO)              	smpsVcFeedback      $07
(1)  378/   11A93 : =$7                  vcFeedback set $07
(1)  379/   11A93 : (MACRO)              	smpsVcUnusedBits    $00
(1)  379/   11A93 : =$0                  vcUnusedBits set $00
(1)  379/   11A93 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  379/   11A93 :                                     set vcD1R1Unk,<<5
(1)  379/   11A93 :                                     set vcD1R2Unk,<<5
(1)  379/   11A93 :                                     set vcD1R3Unk,<<5
(1)  379/   11A93 :                                     set vcD1R4Unk,<<5
(1)  379/   11A93 : =>TRUE                       else
(1)  379/   11A93 : =$0                                  set vcD1R1Unk,0
(1)  379/   11A93 : =$0                                  set vcD1R2Unk,0
(1)  379/   11A93 : =$0                                  set vcD1R3Unk,0
(1)  379/   11A93 : =$0                                  set vcD1R4Unk,0
(1)  379/   11A93 : [379]                        endif
(1)  380/   11A93 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  380/   11A93 : =$0                          set vcDT1,$00
(1)  380/   11A93 : =$0                          set vcDT2,$00
(1)  380/   11A93 : =$0                          set vcDT3,$00
(1)  380/   11A93 : =$0                          set vcDT4,$00
(1)  381/   11A93 : (MACRO)              	smpsVcCoarseFreq    $00, $00, $00, $01
(1)  381/   11A93 : =$0                          set vcCF1,$00
(1)  381/   11A93 : =$0                          set vcCF2,$00
(1)  381/   11A93 : =$0                          set vcCF3,$00
(1)  381/   11A93 : =$1                          set vcCF4,$01
(1)  382/   11A93 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)  382/   11A93 : =$0                          set vcRS1,$00
(1)  382/   11A93 : =$0                          set vcRS2,$00
(1)  382/   11A93 : =$0                          set vcRS3,$00
(1)  382/   11A93 : =$0                          set vcRS4,$00
(1)  383/   11A93 : (MACRO)              	smpsVcAttackRate    $1F, $15, $1F, $1F
(1)  383/   11A93 : =$1F                         set vcAR1,$1F
(1)  383/   11A93 : =$15                         set vcAR2,$15
(1)  383/   11A93 : =$1F                         set vcAR3,$1F
(1)  383/   11A93 : =$1F                         set vcAR4,$1F
(1)  384/   11A93 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  384/   11A93 : =>FALSE                      if SourceSMPS2ASM==0
(1)  384/   11A93 :                                     set vcAM1,$00<<5
(1)  384/   11A93 :                                     set vcAM2,$00<<5
(1)  384/   11A93 :                                     set vcAM3,$00<<5
(1)  384/   11A93 :                                     set vcAM4,$00<<5
(1)  384/   11A93 : =>TRUE                       else
(1)  384/   11A93 : =$0                                  set vcAM1,$00<<7
(1)  384/   11A93 : =$0                                  set vcAM2,$00<<7
(1)  384/   11A93 : =$0                                  set vcAM3,$00<<7
(1)  384/   11A93 : =$0                                  set vcAM4,$00<<7
(1)  384/   11A93 : [384]                        endif
(1)  385/   11A93 : (MACRO)              	smpsVcDecayRate1    $05, $12, $0D, $11
(1)  385/   11A93 : =$5                          set vcD1R1,$05
(1)  385/   11A93 : =$12                         set vcD1R2,$12
(1)  385/   11A93 : =$D                          set vcD1R3,$0D
(1)  385/   11A93 : =$11                         set vcD1R4,$11
(1)  386/   11A93 : (MACRO)              	smpsVcDecayRate2    $02, $09, $04, $07
(1)  386/   11A93 : =$2                          set vcD2R1,$02
(1)  386/   11A93 : =$9                          set vcD2R2,$09
(1)  386/   11A93 : =$4                          set vcD2R3,$04
(1)  386/   11A93 : =$7                          set vcD2R4,$07
(1)  387/   11A93 : (MACRO)              	smpsVcDecayLevel    $01, $02, $03, $05
(1)  387/   11A93 : =$1                          set vcDL1,$01
(1)  387/   11A93 : =$2                          set vcDL2,$02
(1)  387/   11A93 : =$3                          set vcDL3,$03
(1)  387/   11A93 : =$5                          set vcDL4,$05
(1)  388/   11A93 : (MACRO)              	smpsVcReleaseRate   $0A, $05, $0A, $05
(1)  388/   11A93 : =$A                          set vcRR1,$0A
(1)  388/   11A93 : =$5                          set vcRR2,$05
(1)  388/   11A93 : =$A                          set vcRR3,$0A
(1)  388/   11A93 : =$5                          set vcRR4,$05
(1)  389/   11A93 : (MACRO)              	smpsVcTotalLevel    $80, $07, $80, $1A
(1)  389/   11A93 : =$80                         set vcTL1,$80
(1)  389/   11A93 : =$7                          set vcTL2,$07
(1)  389/   11A93 : =$80                         set vcTL3,$80
(1)  389/   11A93 : =$1A                         set vcTL4,$1A
(1)  389/   11A93 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  389/   11A94 :                     ;   0     1     2     3     4     5     6     7
(1)  389/   11A94 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  389/   11A94 : =>FALSE                      if SourceSMPS2ASM==0
(1)  389/   11A94 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  389/   11A94 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  389/   11A94 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  389/   11A94 :                                     set vcTLMask1,$80
(1)  389/   11A94 : =>TRUE                       else
(1)  389/   11A94 : =$0                                  set vcTLMask4,0
(1)  389/   11A94 : =$0                                  set vcTLMask3,0
(1)  389/   11A94 : =$0                                  set vcTLMask2,0
(1)  389/   11A94 : =$0                                  set vcTLMask1,0
(1)  389/   11A94 : [389]                        endif
(1)  389/   11A94 :                     
(1)  389/   11A94 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  389/   11A94 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  389/   11A94 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  389/   11A94 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  389/   11A94 :                                     set vcTLMask1,$80
(1)  389/   11A94 :                                     set vcTL1,vcTL1&$7F
(1)  389/   11A94 :                                     set vcTL2,vcTL2&$7F
(1)  389/   11A94 :                                     set vcTL3,vcTL3&$7F
(1)  389/   11A94 :                                     set vcTL4,vcTL4&$7F
(1)  389/   11A94 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  389/   11A94 :                                     if MOMPASS>1
(1)  389/   11A94 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  389/   11A94 : [389]                                endif
(1)  389/   11A94 : [389]                        endif
(1)  389/   11A94 :                     
(1)  389/   11A94 : =>FALSE                      if SonicDriverVer==2
(1)  389/   11A94 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  389/   11A94 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  389/   11A94 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  389/   11A94 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  389/   11A94 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  389/   11A94 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  389/   11A94 : =>TRUE                       else
(1)  389/   11A94 : 0100 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  389/   11A98 : 1F1F 151F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  389/   11A9C : 110D 1205                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  389/   11AA0 : 0704 0902                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  389/   11AA4 : 553A 251A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  389/   11AA8 : 1A80 0780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  389/   11AAC : [389]                        endif
(1)  390/   11AAC :                     
(1)  391/   11AAC :                     ;	Voice $01
(1)  392/   11AAC :                     ;	$84
(1)  393/   11AAC :                     ;	$3F, $01, $01, $01, 	$1F, $1F, $5F, $5F, 	$0E, $12, $0F, $12
(1)  394/   11AAC :                     ;	$0F, $06, $05, $06, 	$2F, $1F, $1F, $1F, 	$3F, $80, $12, $80
(1)  395/   11AAC : (MACRO)              	smpsVcAlgorithm     $04
(1)  395/   11AAC : =$4                  vcAlgorithm set $04
(1)  396/   11AAC : (MACRO)              	smpsVcFeedback      $00
(1)  396/   11AAC : =$0                  vcFeedback set $00
(1)  397/   11AAC : (MACRO)              	smpsVcUnusedBits    $02
(1)  397/   11AAC : =$2                  vcUnusedBits set $02
(1)  397/   11AAC : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  397/   11AAC :                                     set vcD1R1Unk,<<5
(1)  397/   11AAC :                                     set vcD1R2Unk,<<5
(1)  397/   11AAC :                                     set vcD1R3Unk,<<5
(1)  397/   11AAC :                                     set vcD1R4Unk,<<5
(1)  397/   11AAC : =>TRUE                       else
(1)  397/   11AAC : =$0                                  set vcD1R1Unk,0
(1)  397/   11AAC : =$0                                  set vcD1R2Unk,0
(1)  397/   11AAC : =$0                                  set vcD1R3Unk,0
(1)  397/   11AAC : =$0                                  set vcD1R4Unk,0
(1)  397/   11AAC : [397]                        endif
(1)  398/   11AAC : (MACRO)              	smpsVcDetune        $00, $00, $00, $03
(1)  398/   11AAC : =$0                          set vcDT1,$00
(1)  398/   11AAC : =$0                          set vcDT2,$00
(1)  398/   11AAC : =$0                          set vcDT3,$00
(1)  398/   11AAC : =$3                          set vcDT4,$03
(1)  399/   11AAC : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $0F
(1)  399/   11AAC : =$1                          set vcCF1,$01
(1)  399/   11AAC : =$1                          set vcCF2,$01
(1)  399/   11AAC : =$1                          set vcCF3,$01
(1)  399/   11AAC : =$F                          set vcCF4,$0F
(1)  400/   11AAC : (MACRO)              	smpsVcRateScale     $01, $01, $00, $00
(1)  400/   11AAC : =$1                          set vcRS1,$01
(1)  400/   11AAC : =$1                          set vcRS2,$01
(1)  400/   11AAC : =$0                          set vcRS3,$00
(1)  400/   11AAC : =$0                          set vcRS4,$00
(1)  401/   11AAC : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  401/   11AAC : =$1F                         set vcAR1,$1F
(1)  401/   11AAC : =$1F                         set vcAR2,$1F
(1)  401/   11AAC : =$1F                         set vcAR3,$1F
(1)  401/   11AAC : =$1F                         set vcAR4,$1F
(1)  402/   11AAC : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  402/   11AAC : =>FALSE                      if SourceSMPS2ASM==0
(1)  402/   11AAC :                                     set vcAM1,$00<<5
(1)  402/   11AAC :                                     set vcAM2,$00<<5
(1)  402/   11AAC :                                     set vcAM3,$00<<5
(1)  402/   11AAC :                                     set vcAM4,$00<<5
(1)  402/   11AAC : =>TRUE                       else
(1)  402/   11AAC : =$0                                  set vcAM1,$00<<7
(1)  402/   11AAC : =$0                                  set vcAM2,$00<<7
(1)  402/   11AAC : =$0                                  set vcAM3,$00<<7
(1)  402/   11AAC : =$0                                  set vcAM4,$00<<7
(1)  402/   11AAC : [402]                        endif
(1)  403/   11AAC : (MACRO)              	smpsVcDecayRate1    $12, $0F, $12, $0E
(1)  403/   11AAC : =$12                         set vcD1R1,$12
(1)  403/   11AAC : =$F                          set vcD1R2,$0F
(1)  403/   11AAC : =$12                         set vcD1R3,$12
(1)  403/   11AAC : =$E                          set vcD1R4,$0E
(1)  404/   11AAC : (MACRO)              	smpsVcDecayRate2    $06, $05, $06, $0F
(1)  404/   11AAC : =$6                          set vcD2R1,$06
(1)  404/   11AAC : =$5                          set vcD2R2,$05
(1)  404/   11AAC : =$6                          set vcD2R3,$06
(1)  404/   11AAC : =$F                          set vcD2R4,$0F
(1)  405/   11AAC : (MACRO)              	smpsVcDecayLevel    $01, $01, $01, $02
(1)  405/   11AAC : =$1                          set vcDL1,$01
(1)  405/   11AAC : =$1                          set vcDL2,$01
(1)  405/   11AAC : =$1                          set vcDL3,$01
(1)  405/   11AAC : =$2                          set vcDL4,$02
(1)  406/   11AAC : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  406/   11AAC : =$F                          set vcRR1,$0F
(1)  406/   11AAC : =$F                          set vcRR2,$0F
(1)  406/   11AAC : =$F                          set vcRR3,$0F
(1)  406/   11AAC : =$F                          set vcRR4,$0F
(1)  407/   11AAC : (MACRO)              	smpsVcTotalLevel    $80, $12, $80, $3F
(1)  407/   11AAC : =$80                         set vcTL1,$80
(1)  407/   11AAC : =$12                         set vcTL2,$12
(1)  407/   11AAC : =$80                         set vcTL3,$80
(1)  407/   11AAC : =$3F                         set vcTL4,$3F
(1)  407/   11AAC : 84                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  407/   11AAD :                     ;   0     1     2     3     4     5     6     7
(1)  407/   11AAD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  407/   11AAD : =>FALSE                      if SourceSMPS2ASM==0
(1)  407/   11AAD :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  407/   11AAD :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  407/   11AAD :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  407/   11AAD :                                     set vcTLMask1,$80
(1)  407/   11AAD : =>TRUE                       else
(1)  407/   11AAD : =$0                                  set vcTLMask4,0
(1)  407/   11AAD : =$0                                  set vcTLMask3,0
(1)  407/   11AAD : =$0                                  set vcTLMask2,0
(1)  407/   11AAD : =$0                                  set vcTLMask1,0
(1)  407/   11AAD : [407]                        endif
(1)  407/   11AAD :                     
(1)  407/   11AAD : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  407/   11AAD :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  407/   11AAD :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  407/   11AAD :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  407/   11AAD :                                     set vcTLMask1,$80
(1)  407/   11AAD :                                     set vcTL1,vcTL1&$7F
(1)  407/   11AAD :                                     set vcTL2,vcTL2&$7F
(1)  407/   11AAD :                                     set vcTL3,vcTL3&$7F
(1)  407/   11AAD :                                     set vcTL4,vcTL4&$7F
(1)  407/   11AAD : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  407/   11AAD :                                     if MOMPASS>1
(1)  407/   11AAD :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  407/   11AAD : [407]                                endif
(1)  407/   11AAD : [407]                        endif
(1)  407/   11AAD :                     
(1)  407/   11AAD : =>FALSE                      if SonicDriverVer==2
(1)  407/   11AAD :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  407/   11AAD :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  407/   11AAD :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  407/   11AAD :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  407/   11AAD :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  407/   11AAD :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  407/   11AAD : =>TRUE                       else
(1)  407/   11AAD : 3F01 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  407/   11AB1 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  407/   11AB5 : 0E12 0F12                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  407/   11AB9 : 0F06 0506                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  407/   11ABD : 2F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  407/   11AC1 : 3F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  407/   11AC5 : [407]                        endif
(1)  408/   11AC5 :                     
(1)  409/   11AC5 :                     ;	Voice $02
(1)  410/   11AC5 :                     ;	$2C
(1)  411/   11AC5 :                     ;	$22, $04, $02, $14, 	$51, $52, $50, $52, 	$0D, $00, $06, $04
(1)  412/   11AC5 :                     ;	$03, $05, $02, $00, 	$16, $18, $26, $18, 	$0F, $80, $12, $80
(1)  413/   11AC5 : (MACRO)              	smpsVcAlgorithm     $04
(1)  413/   11AC5 : =$4                  vcAlgorithm set $04
(1)  414/   11AC5 : (MACRO)              	smpsVcFeedback      $05
(1)  414/   11AC5 : =$5                  vcFeedback set $05
(1)  415/   11AC5 : (MACRO)              	smpsVcUnusedBits    $00
(1)  415/   11AC5 : =$0                  vcUnusedBits set $00
(1)  415/   11AC5 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  415/   11AC5 :                                     set vcD1R1Unk,<<5
(1)  415/   11AC5 :                                     set vcD1R2Unk,<<5
(1)  415/   11AC5 :                                     set vcD1R3Unk,<<5
(1)  415/   11AC5 :                                     set vcD1R4Unk,<<5
(1)  415/   11AC5 : =>TRUE                       else
(1)  415/   11AC5 : =$0                                  set vcD1R1Unk,0
(1)  415/   11AC5 : =$0                                  set vcD1R2Unk,0
(1)  415/   11AC5 : =$0                                  set vcD1R3Unk,0
(1)  415/   11AC5 : =$0                                  set vcD1R4Unk,0
(1)  415/   11AC5 : [415]                        endif
(1)  416/   11AC5 : (MACRO)              	smpsVcDetune        $01, $00, $00, $02
(1)  416/   11AC5 : =$1                          set vcDT1,$01
(1)  416/   11AC5 : =$0                          set vcDT2,$00
(1)  416/   11AC5 : =$0                          set vcDT3,$00
(1)  416/   11AC5 : =$2                          set vcDT4,$02
(1)  417/   11AC5 : (MACRO)              	smpsVcCoarseFreq    $04, $02, $04, $02
(1)  417/   11AC5 : =$4                          set vcCF1,$04
(1)  417/   11AC5 : =$2                          set vcCF2,$02
(1)  417/   11AC5 : =$4                          set vcCF3,$04
(1)  417/   11AC5 : =$2                          set vcCF4,$02
(1)  418/   11AC5 : (MACRO)              	smpsVcRateScale     $01, $01, $01, $01
(1)  418/   11AC5 : =$1                          set vcRS1,$01
(1)  418/   11AC5 : =$1                          set vcRS2,$01
(1)  418/   11AC5 : =$1                          set vcRS3,$01
(1)  418/   11AC5 : =$1                          set vcRS4,$01
(1)  419/   11AC5 : (MACRO)              	smpsVcAttackRate    $12, $10, $12, $11
(1)  419/   11AC5 : =$12                         set vcAR1,$12
(1)  419/   11AC5 : =$10                         set vcAR2,$10
(1)  419/   11AC5 : =$12                         set vcAR3,$12
(1)  419/   11AC5 : =$11                         set vcAR4,$11
(1)  420/   11AC5 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  420/   11AC5 : =>FALSE                      if SourceSMPS2ASM==0
(1)  420/   11AC5 :                                     set vcAM1,$00<<5
(1)  420/   11AC5 :                                     set vcAM2,$00<<5
(1)  420/   11AC5 :                                     set vcAM3,$00<<5
(1)  420/   11AC5 :                                     set vcAM4,$00<<5
(1)  420/   11AC5 : =>TRUE                       else
(1)  420/   11AC5 : =$0                                  set vcAM1,$00<<7
(1)  420/   11AC5 : =$0                                  set vcAM2,$00<<7
(1)  420/   11AC5 : =$0                                  set vcAM3,$00<<7
(1)  420/   11AC5 : =$0                                  set vcAM4,$00<<7
(1)  420/   11AC5 : [420]                        endif
(1)  421/   11AC5 : (MACRO)              	smpsVcDecayRate1    $04, $06, $00, $0D
(1)  421/   11AC5 : =$4                          set vcD1R1,$04
(1)  421/   11AC5 : =$6                          set vcD1R2,$06
(1)  421/   11AC5 : =$0                          set vcD1R3,$00
(1)  421/   11AC5 : =$D                          set vcD1R4,$0D
(1)  422/   11AC5 : (MACRO)              	smpsVcDecayRate2    $00, $02, $05, $03
(1)  422/   11AC5 : =$0                          set vcD2R1,$00
(1)  422/   11AC5 : =$2                          set vcD2R2,$02
(1)  422/   11AC5 : =$5                          set vcD2R3,$05
(1)  422/   11AC5 : =$3                          set vcD2R4,$03
(1)  423/   11AC5 : (MACRO)              	smpsVcDecayLevel    $01, $02, $01, $01
(1)  423/   11AC5 : =$1                          set vcDL1,$01
(1)  423/   11AC5 : =$2                          set vcDL2,$02
(1)  423/   11AC5 : =$1                          set vcDL3,$01
(1)  423/   11AC5 : =$1                          set vcDL4,$01
(1)  424/   11AC5 : (MACRO)              	smpsVcReleaseRate   $08, $06, $08, $06
(1)  424/   11AC5 : =$8                          set vcRR1,$08
(1)  424/   11AC5 : =$6                          set vcRR2,$06
(1)  424/   11AC5 : =$8                          set vcRR3,$08
(1)  424/   11AC5 : =$6                          set vcRR4,$06
(1)  425/   11AC5 : (MACRO)              	smpsVcTotalLevel    $80, $12, $80, $0F
(1)  425/   11AC5 : =$80                         set vcTL1,$80
(1)  425/   11AC5 : =$12                         set vcTL2,$12
(1)  425/   11AC5 : =$80                         set vcTL3,$80
(1)  425/   11AC5 : =$F                          set vcTL4,$0F
(1)  425/   11AC5 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  425/   11AC6 :                     ;   0     1     2     3     4     5     6     7
(1)  425/   11AC6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  425/   11AC6 : =>FALSE                      if SourceSMPS2ASM==0
(1)  425/   11AC6 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  425/   11AC6 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  425/   11AC6 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  425/   11AC6 :                                     set vcTLMask1,$80
(1)  425/   11AC6 : =>TRUE                       else
(1)  425/   11AC6 : =$0                                  set vcTLMask4,0
(1)  425/   11AC6 : =$0                                  set vcTLMask3,0
(1)  425/   11AC6 : =$0                                  set vcTLMask2,0
(1)  425/   11AC6 : =$0                                  set vcTLMask1,0
(1)  425/   11AC6 : [425]                        endif
(1)  425/   11AC6 :                     
(1)  425/   11AC6 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  425/   11AC6 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  425/   11AC6 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  425/   11AC6 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  425/   11AC6 :                                     set vcTLMask1,$80
(1)  425/   11AC6 :                                     set vcTL1,vcTL1&$7F
(1)  425/   11AC6 :                                     set vcTL2,vcTL2&$7F
(1)  425/   11AC6 :                                     set vcTL3,vcTL3&$7F
(1)  425/   11AC6 :                                     set vcTL4,vcTL4&$7F
(1)  425/   11AC6 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  425/   11AC6 :                                     if MOMPASS>1
(1)  425/   11AC6 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  425/   11AC6 : [425]                                endif
(1)  425/   11AC6 : [425]                        endif
(1)  425/   11AC6 :                     
(1)  425/   11AC6 : =>FALSE                      if SonicDriverVer==2
(1)  425/   11AC6 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  425/   11AC6 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  425/   11AC6 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  425/   11AC6 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  425/   11AC6 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  425/   11AC6 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  425/   11AC6 : =>TRUE                       else
(1)  425/   11AC6 : 2204 0214                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  425/   11ACA : 5152 5052                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  425/   11ACE : 0D00 0604                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  425/   11AD2 : 0305 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  425/   11AD6 : 1618 2618                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  425/   11ADA : 0F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  425/   11ADE : [425]                        endif
(1)  426/   11ADE :                     
(1)  427/   11ADE :                     ;	Voice $03
(1)  428/   11ADE :                     ;	$2D
(1)  429/   11ADE :                     ;	$77, $65, $05, $15, 	$1F, $5F, $5F, $5F, 	$00, $03, $03, $05
(1)  430/   11ADE :                     ;	$00, $01, $02, $01, 	$0F, $1C, $1C, $1C, 	$22, $83, $80, $80
(1)  431/   11ADE : (MACRO)              	smpsVcAlgorithm     $05
(1)  431/   11ADE : =$5                  vcAlgorithm set $05
(1)  432/   11ADE : (MACRO)              	smpsVcFeedback      $05
(1)  432/   11ADE : =$5                  vcFeedback set $05
(1)  433/   11ADE : (MACRO)              	smpsVcUnusedBits    $00
(1)  433/   11ADE : =$0                  vcUnusedBits set $00
(1)  433/   11ADE : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  433/   11ADE :                                     set vcD1R1Unk,<<5
(1)  433/   11ADE :                                     set vcD1R2Unk,<<5
(1)  433/   11ADE :                                     set vcD1R3Unk,<<5
(1)  433/   11ADE :                                     set vcD1R4Unk,<<5
(1)  433/   11ADE : =>TRUE                       else
(1)  433/   11ADE : =$0                                  set vcD1R1Unk,0
(1)  433/   11ADE : =$0                                  set vcD1R2Unk,0
(1)  433/   11ADE : =$0                                  set vcD1R3Unk,0
(1)  433/   11ADE : =$0                                  set vcD1R4Unk,0
(1)  433/   11ADE : [433]                        endif
(1)  434/   11ADE : (MACRO)              	smpsVcDetune        $01, $00, $06, $07
(1)  434/   11ADE : =$1                          set vcDT1,$01
(1)  434/   11ADE : =$0                          set vcDT2,$00
(1)  434/   11ADE : =$6                          set vcDT3,$06
(1)  434/   11ADE : =$7                          set vcDT4,$07
(1)  435/   11ADE : (MACRO)              	smpsVcCoarseFreq    $05, $05, $05, $07
(1)  435/   11ADE : =$5                          set vcCF1,$05
(1)  435/   11ADE : =$5                          set vcCF2,$05
(1)  435/   11ADE : =$5                          set vcCF3,$05
(1)  435/   11ADE : =$7                          set vcCF4,$07
(1)  436/   11ADE : (MACRO)              	smpsVcRateScale     $01, $01, $01, $00
(1)  436/   11ADE : =$1                          set vcRS1,$01
(1)  436/   11ADE : =$1                          set vcRS2,$01
(1)  436/   11ADE : =$1                          set vcRS3,$01
(1)  436/   11ADE : =$0                          set vcRS4,$00
(1)  437/   11ADE : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  437/   11ADE : =$1F                         set vcAR1,$1F
(1)  437/   11ADE : =$1F                         set vcAR2,$1F
(1)  437/   11ADE : =$1F                         set vcAR3,$1F
(1)  437/   11ADE : =$1F                         set vcAR4,$1F
(1)  438/   11ADE : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  438/   11ADE : =>FALSE                      if SourceSMPS2ASM==0
(1)  438/   11ADE :                                     set vcAM1,$00<<5
(1)  438/   11ADE :                                     set vcAM2,$00<<5
(1)  438/   11ADE :                                     set vcAM3,$00<<5
(1)  438/   11ADE :                                     set vcAM4,$00<<5
(1)  438/   11ADE : =>TRUE                       else
(1)  438/   11ADE : =$0                                  set vcAM1,$00<<7
(1)  438/   11ADE : =$0                                  set vcAM2,$00<<7
(1)  438/   11ADE : =$0                                  set vcAM3,$00<<7
(1)  438/   11ADE : =$0                                  set vcAM4,$00<<7
(1)  438/   11ADE : [438]                        endif
(1)  439/   11ADE : (MACRO)              	smpsVcDecayRate1    $05, $03, $03, $00
(1)  439/   11ADE : =$5                          set vcD1R1,$05
(1)  439/   11ADE : =$3                          set vcD1R2,$03
(1)  439/   11ADE : =$3                          set vcD1R3,$03
(1)  439/   11ADE : =$0                          set vcD1R4,$00
(1)  440/   11ADE : (MACRO)              	smpsVcDecayRate2    $01, $02, $01, $00
(1)  440/   11ADE : =$1                          set vcD2R1,$01
(1)  440/   11ADE : =$2                          set vcD2R2,$02
(1)  440/   11ADE : =$1                          set vcD2R3,$01
(1)  440/   11ADE : =$0                          set vcD2R4,$00
(1)  441/   11ADE : (MACRO)              	smpsVcDecayLevel    $01, $01, $01, $00
(1)  441/   11ADE : =$1                          set vcDL1,$01
(1)  441/   11ADE : =$1                          set vcDL2,$01
(1)  441/   11ADE : =$1                          set vcDL3,$01
(1)  441/   11ADE : =$0                          set vcDL4,$00
(1)  442/   11ADE : (MACRO)              	smpsVcReleaseRate   $0C, $0C, $0C, $0F
(1)  442/   11ADE : =$C                          set vcRR1,$0C
(1)  442/   11ADE : =$C                          set vcRR2,$0C
(1)  442/   11ADE : =$C                          set vcRR3,$0C
(1)  442/   11ADE : =$F                          set vcRR4,$0F
(1)  443/   11ADE : (MACRO)              	smpsVcTotalLevel    $80, $80, $83, $22
(1)  443/   11ADE : =$80                         set vcTL1,$80
(1)  443/   11ADE : =$80                         set vcTL2,$80
(1)  443/   11ADE : =$83                         set vcTL3,$83
(1)  443/   11ADE : =$22                         set vcTL4,$22
(1)  443/   11ADE : 2D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  443/   11ADF :                     ;   0     1     2     3     4     5     6     7
(1)  443/   11ADF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  443/   11ADF : =>FALSE                      if SourceSMPS2ASM==0
(1)  443/   11ADF :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  443/   11ADF :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  443/   11ADF :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  443/   11ADF :                                     set vcTLMask1,$80
(1)  443/   11ADF : =>TRUE                       else
(1)  443/   11ADF : =$0                                  set vcTLMask4,0
(1)  443/   11ADF : =$0                                  set vcTLMask3,0
(1)  443/   11ADF : =$0                                  set vcTLMask2,0
(1)  443/   11ADF : =$0                                  set vcTLMask1,0
(1)  443/   11ADF : [443]                        endif
(1)  443/   11ADF :                     
(1)  443/   11ADF : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  443/   11ADF :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  443/   11ADF :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  443/   11ADF :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  443/   11ADF :                                     set vcTLMask1,$80
(1)  443/   11ADF :                                     set vcTL1,vcTL1&$7F
(1)  443/   11ADF :                                     set vcTL2,vcTL2&$7F
(1)  443/   11ADF :                                     set vcTL3,vcTL3&$7F
(1)  443/   11ADF :                                     set vcTL4,vcTL4&$7F
(1)  443/   11ADF : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  443/   11ADF :                                     if MOMPASS>1
(1)  443/   11ADF :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  443/   11ADF : [443]                                endif
(1)  443/   11ADF : [443]                        endif
(1)  443/   11ADF :                     
(1)  443/   11ADF : =>FALSE                      if SonicDriverVer==2
(1)  443/   11ADF :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  443/   11ADF :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  443/   11ADF :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  443/   11ADF :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  443/   11ADF :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  443/   11ADF :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  443/   11ADF : =>TRUE                       else
(1)  443/   11ADF : 7765 0515                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  443/   11AE3 : 1F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  443/   11AE7 : 0003 0305                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  443/   11AEB : 0001 0201                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  443/   11AEF : 0F1C 1C1C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  443/   11AF3 : 2283 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  443/   11AF7 : [443]                        endif
(1)  444/   11AF7 :                     
(1)  445/   11AF7 :                     ;	Voice $04
(1)  446/   11AF7 :                     ;	$76
(1)  447/   11AF7 :                     ;	$7A, $32, $51, $11, 	$1F, $7F, $9F, $9D, 	$0A, $0E, $0B, $0A
(1)  448/   11AF7 :                     ;	$01, $02, $05, $02, 	$AF, $8F, $9F, $8F, 	$14, $80, $80, $80
(1)  449/   11AF7 : (MACRO)              	smpsVcAlgorithm     $06
(1)  449/   11AF7 : =$6                  vcAlgorithm set $06
(1)  450/   11AF7 : (MACRO)              	smpsVcFeedback      $06
(1)  450/   11AF7 : =$6                  vcFeedback set $06
(1)  451/   11AF7 : (MACRO)              	smpsVcUnusedBits    $01
(1)  451/   11AF7 : =$1                  vcUnusedBits set $01
(1)  451/   11AF7 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  451/   11AF7 :                                     set vcD1R1Unk,<<5
(1)  451/   11AF7 :                                     set vcD1R2Unk,<<5
(1)  451/   11AF7 :                                     set vcD1R3Unk,<<5
(1)  451/   11AF7 :                                     set vcD1R4Unk,<<5
(1)  451/   11AF7 : =>TRUE                       else
(1)  451/   11AF7 : =$0                                  set vcD1R1Unk,0
(1)  451/   11AF7 : =$0                                  set vcD1R2Unk,0
(1)  451/   11AF7 : =$0                                  set vcD1R3Unk,0
(1)  451/   11AF7 : =$0                                  set vcD1R4Unk,0
(1)  451/   11AF7 : [451]                        endif
(1)  452/   11AF7 : (MACRO)              	smpsVcDetune        $01, $05, $03, $07
(1)  452/   11AF7 : =$1                          set vcDT1,$01
(1)  452/   11AF7 : =$5                          set vcDT2,$05
(1)  452/   11AF7 : =$3                          set vcDT3,$03
(1)  452/   11AF7 : =$7                          set vcDT4,$07
(1)  453/   11AF7 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $02, $0A
(1)  453/   11AF7 : =$1                          set vcCF1,$01
(1)  453/   11AF7 : =$1                          set vcCF2,$01
(1)  453/   11AF7 : =$2                          set vcCF3,$02
(1)  453/   11AF7 : =$A                          set vcCF4,$0A
(1)  454/   11AF7 : (MACRO)              	smpsVcRateScale     $02, $02, $01, $00
(1)  454/   11AF7 : =$2                          set vcRS1,$02
(1)  454/   11AF7 : =$2                          set vcRS2,$02
(1)  454/   11AF7 : =$1                          set vcRS3,$01
(1)  454/   11AF7 : =$0                          set vcRS4,$00
(1)  455/   11AF7 : (MACRO)              	smpsVcAttackRate    $1D, $1F, $3F, $1F
(1)  455/   11AF7 : =$1D                         set vcAR1,$1D
(1)  455/   11AF7 : =$1F                         set vcAR2,$1F
(1)  455/   11AF7 : =$3F                         set vcAR3,$3F
(1)  455/   11AF7 : =$1F                         set vcAR4,$1F
(1)  456/   11AF7 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  456/   11AF7 : =>FALSE                      if SourceSMPS2ASM==0
(1)  456/   11AF7 :                                     set vcAM1,$00<<5
(1)  456/   11AF7 :                                     set vcAM2,$00<<5
(1)  456/   11AF7 :                                     set vcAM3,$00<<5
(1)  456/   11AF7 :                                     set vcAM4,$00<<5
(1)  456/   11AF7 : =>TRUE                       else
(1)  456/   11AF7 : =$0                                  set vcAM1,$00<<7
(1)  456/   11AF7 : =$0                                  set vcAM2,$00<<7
(1)  456/   11AF7 : =$0                                  set vcAM3,$00<<7
(1)  456/   11AF7 : =$0                                  set vcAM4,$00<<7
(1)  456/   11AF7 : [456]                        endif
(1)  457/   11AF7 : (MACRO)              	smpsVcDecayRate1    $0A, $0B, $0E, $0A
(1)  457/   11AF7 : =$A                          set vcD1R1,$0A
(1)  457/   11AF7 : =$B                          set vcD1R2,$0B
(1)  457/   11AF7 : =$E                          set vcD1R3,$0E
(1)  457/   11AF7 : =$A                          set vcD1R4,$0A
(1)  458/   11AF7 : (MACRO)              	smpsVcDecayRate2    $02, $05, $02, $01
(1)  458/   11AF7 : =$2                          set vcD2R1,$02
(1)  458/   11AF7 : =$5                          set vcD2R2,$05
(1)  458/   11AF7 : =$2                          set vcD2R3,$02
(1)  458/   11AF7 : =$1                          set vcD2R4,$01
(1)  459/   11AF7 : (MACRO)              	smpsVcDecayLevel    $08, $09, $08, $0A
(1)  459/   11AF7 : =$8                          set vcDL1,$08
(1)  459/   11AF7 : =$9                          set vcDL2,$09
(1)  459/   11AF7 : =$8                          set vcDL3,$08
(1)  459/   11AF7 : =$A                          set vcDL4,$0A
(1)  460/   11AF7 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  460/   11AF7 : =$F                          set vcRR1,$0F
(1)  460/   11AF7 : =$F                          set vcRR2,$0F
(1)  460/   11AF7 : =$F                          set vcRR3,$0F
(1)  460/   11AF7 : =$F                          set vcRR4,$0F
(1)  461/   11AF7 : (MACRO)              	smpsVcTotalLevel    $80, $80, $80, $14
(1)  461/   11AF7 : =$80                         set vcTL1,$80
(1)  461/   11AF7 : =$80                         set vcTL2,$80
(1)  461/   11AF7 : =$80                         set vcTL3,$80
(1)  461/   11AF7 : =$14                         set vcTL4,$14
(1)  461/   11AF7 : 76                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  461/   11AF8 :                     ;   0     1     2     3     4     5     6     7
(1)  461/   11AF8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  461/   11AF8 : =>FALSE                      if SourceSMPS2ASM==0
(1)  461/   11AF8 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  461/   11AF8 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  461/   11AF8 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  461/   11AF8 :                                     set vcTLMask1,$80
(1)  461/   11AF8 : =>TRUE                       else
(1)  461/   11AF8 : =$0                                  set vcTLMask4,0
(1)  461/   11AF8 : =$0                                  set vcTLMask3,0
(1)  461/   11AF8 : =$0                                  set vcTLMask2,0
(1)  461/   11AF8 : =$0                                  set vcTLMask1,0
(1)  461/   11AF8 : [461]                        endif
(1)  461/   11AF8 :                     
(1)  461/   11AF8 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  461/   11AF8 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  461/   11AF8 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  461/   11AF8 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  461/   11AF8 :                                     set vcTLMask1,$80
(1)  461/   11AF8 :                                     set vcTL1,vcTL1&$7F
(1)  461/   11AF8 :                                     set vcTL2,vcTL2&$7F
(1)  461/   11AF8 :                                     set vcTL3,vcTL3&$7F
(1)  461/   11AF8 :                                     set vcTL4,vcTL4&$7F
(1)  461/   11AF8 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  461/   11AF8 :                                     if MOMPASS>1
(1)  461/   11AF8 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  461/   11AF8 : [461]                                endif
(1)  461/   11AF8 : [461]                        endif
(1)  461/   11AF8 :                     
(1)  461/   11AF8 : =>FALSE                      if SonicDriverVer==2
(1)  461/   11AF8 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  461/   11AF8 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  461/   11AF8 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  461/   11AF8 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  461/   11AF8 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  461/   11AF8 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  461/   11AF8 : =>TRUE                       else
(1)  461/   11AF8 : 7A32 5111                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  461/   11AFC : 1F7F 9F9D                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  461/   11B00 : 0A0E 0B0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  461/   11B04 : 0102 0502                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  461/   11B08 : AF8F 9F8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  461/   11B0C : 1480 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  461/   11B10 : [461]                        endif
(1)  462/   11B10 :                     
(1)  463/   11B10 :                     
   18784/   11B10 :                     Music86:	include	"Sound/Music/Mus86 - Game Over.asm"
(1)    1/   11B10 :                     Game_Over_Header:
(1)    2/   11B10 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   11B10 :                     
(1)    2/   11B10 : =$3                  SourceDriver set 3
(1)    2/   11B10 :                     
(1)    2/   11B10 : =>TRUE                       if ("1"<>"")
(1)    2/   11B10 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   11B10 : =>FALSE                      else
(1)    2/   11B10 :                                     set SourceSMPS2ASM,0
(1)    2/   11B10 : [2]                          endif
(1)    2/   11B10 :                     
(1)    2/   11B10 : =$11B10              songStart set *
(1)    2/   11B10 :                     
(1)    2/   11B10 : =>TRUE                       if MOMPASS>1
(1)    2/   11B10 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   11B10 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   11B10 : [2]                                  endif
(1)    2/   11B10 : [2]                          endif
(1)    2/   11B10 :                     
(1)    3/   11B10 : (MACRO)              	smpsHeaderVoice     Game_Over_Voices
(1)    3/   11B10 : =>FALSE                      if songStart<>*
(1)    3/   11B10 :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   11B10 : [3]                          endif
(1)    3/   11B10 : =>TRUE                       if SonicDriverVer<>1
(1)    3/   11B10 : 019C                                dc.w    z80_ptr(Game_Over_Voices)
(1)    3/   11B12 : =>FALSE                      else
(1)    3/   11B12 :                                     if MOMPASS>1
(1)    3/   11B12 :                                             if Game_Over_Voices<songStart
(1)    3/   11B12 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    3/   11B12 : [3]                                          endif
(1)    3/   11B12 : [3]                                  endif
(1)    3/   11B12 :                                     dc.w    Game_Over_Voices-songStart
(1)    3/   11B12 : [3]                          endif
(1)    4/   11B12 : (MACRO)              	smpsHeaderChan      $06, $03
(1)    4/   11B12 : 0603                        dc.b    $06,$03
(1)    5/   11B14 : (MACRO)              	smpsHeaderTempo     $01, $04
(1)    5/   11B14 : 01                          dc.b    $01
(1)    5/   11B15 :  (MACRO-2)                   convertMainTempoMod $04
(1)    5/   11B15 : =>TRUE                       if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)    5/   11B15 : 04                                  dc.b    $04
(1)    5/   11B16 : =>FALSE                      elseif SourceDriver==1
(1)    5/   11B16 :                                     if $04==1
(1)    5/   11B16 :                                             fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)    5/   11B16 : [5]                                  endif
(1)    5/   11B16 :                                     if SonicDriverVer==2
(1)    5/   11B16 :                                             dc.b    s1TempotoS2($04)
(1)    5/   11B16 :                                     else;if SonicDriverVer>=3
(1)    5/   11B16 :                                             dc.b    s1TempotoS3($04)
(1)    5/   11B16 : [5]                                  endif
(1)    5/   11B16 : =>FALSE                      elseif SourceDriver==2
(1)    5/   11B16 :                                     if $04==0
(1)    5/   11B16 :                                             fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)    5/   11B16 : [5]                                  endif
(1)    5/   11B16 :                                     if SonicDriverVer==1
(1)    5/   11B16 :                                             dc.b    s2TempotoS1($04)
(1)    5/   11B16 :                                     else;if SonicDriverVer>=3
(1)    5/   11B16 :                                             dc.b    s2TempotoS3($04)
(1)    5/   11B16 : [5]                                  endif
(1)    5/   11B16 : =>FALSE                      else;if SourceDriver>=3
(1)    5/   11B16 :                                     if $04==0
(1)    5/   11B16 :                                             message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)    5/   11B16 : [5]                                  endif
(1)    5/   11B16 :                                     if SonicDriverVer==1
(1)    5/   11B16 :                                             dc.b    s3TempotoS1($04)
(1)    5/   11B16 :                                     else;if SonicDriverVer==2
(1)    5/   11B16 :                                             dc.b    s3TempotoS2($04)
(1)    5/   11B16 : [5]                                  endif
(1)    5/   11B16 : [5]                          endif
(1)    6/   11B16 :                     
(1)    7/   11B16 : (MACRO)              	smpsHeaderDAC       Game_Over_DAC
(1)    7/   11B16 :  (MACRO-2)                   CheckedChannelPointer Game_Over_DAC
(1)    7/   11B16 : =>TRUE                       if SonicDriverVer<>1
(1)    7/   11B16 : F89B                                dc.w    z80_ptr(Game_Over_DAC)
(1)    7/   11B18 : =>FALSE                      else
(1)    7/   11B18 :                                     if MOMPASS>1
(1)    7/   11B18 :                                             if Game_Over_DAC<songStart
(1)    7/   11B18 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    7/   11B18 : [7]                                          endif
(1)    7/   11B18 : [7]                                  endif
(1)    7/   11B18 :                                     dc.w    Game_Over_DAC-songStart
(1)    7/   11B18 : [7]                          endif
(1)    7/   11B18 : =>FALSE                      if (""<>"")
(1)    7/   11B18 :                                     dc.b    
(1)    7/   11B18 :                                     if (""<>"")
(1)    7/   11B18 :                                             dc.b    
(1)    7/   11B18 :                                     else
(1)    7/   11B18 :                                             dc.b    $00
(1)    7/   11B18 : [7]                                  endif
(1)    7/   11B18 : =>TRUE                       else
(1)    7/   11B18 : 0000                                dc.w    $00
(1)    7/   11B1A : [7]                          endif
(1)    8/   11B1A : (MACRO)              	smpsHeaderFM        Game_Over_FM1,	$E8, $0A
(1)    8/   11B1A :  (MACRO-2)                   CheckedChannelPointer Game_Over_FM1
(1)    8/   11B1A : =>TRUE                       if SonicDriverVer<>1
(1)    8/   11B1A : 409B                                dc.w    z80_ptr(Game_Over_FM1)
(1)    8/   11B1C : =>FALSE                      else
(1)    8/   11B1C :                                     if MOMPASS>1
(1)    8/   11B1C :                                             if Game_Over_FM1<songStart
(1)    8/   11B1C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   11B1C : [8]                                          endif
(1)    8/   11B1C : [8]                                  endif
(1)    8/   11B1C :                                     dc.w    Game_Over_FM1-songStart
(1)    8/   11B1C : [8]                          endif
(1)    8/   11B1C : E80A                        dc.b    $E8,$0A
(1)    9/   11B1E : (MACRO)              	smpsHeaderFM        Game_Over_FM2,	$F4, $0F
(1)    9/   11B1E :  (MACRO-2)                   CheckedChannelPointer Game_Over_FM2
(1)    9/   11B1E : =>TRUE                       if SonicDriverVer<>1
(1)    9/   11B1E : 779B                                dc.w    z80_ptr(Game_Over_FM2)
(1)    9/   11B20 : =>FALSE                      else
(1)    9/   11B20 :                                     if MOMPASS>1
(1)    9/   11B20 :                                             if Game_Over_FM2<songStart
(1)    9/   11B20 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   11B20 : [9]                                          endif
(1)    9/   11B20 : [9]                                  endif
(1)    9/   11B20 :                                     dc.w    Game_Over_FM2-songStart
(1)    9/   11B20 : [9]                          endif
(1)    9/   11B20 : F40F                        dc.b    $F4,$0F
(1)   10/   11B22 : (MACRO)              	smpsHeaderFM        Game_Over_FM3,	$F4, $0F
(1)   10/   11B22 :  (MACRO-2)                   CheckedChannelPointer Game_Over_FM3
(1)   10/   11B22 : =>TRUE                       if SonicDriverVer<>1
(1)   10/   11B22 : 969B                                dc.w    z80_ptr(Game_Over_FM3)
(1)   10/   11B24 : =>FALSE                      else
(1)   10/   11B24 :                                     if MOMPASS>1
(1)   10/   11B24 :                                             if Game_Over_FM3<songStart
(1)   10/   11B24 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   10/   11B24 : [10]                                         endif
(1)   10/   11B24 : [10]                                 endif
(1)   10/   11B24 :                                     dc.w    Game_Over_FM3-songStart
(1)   10/   11B24 : [10]                         endif
(1)   10/   11B24 : F40F                        dc.b    $F4,$0F
(1)   11/   11B26 : (MACRO)              	smpsHeaderFM        Game_Over_FM4,	$F4, $0D
(1)   11/   11B26 :  (MACRO-2)                   CheckedChannelPointer Game_Over_FM4
(1)   11/   11B26 : =>TRUE                       if SonicDriverVer<>1
(1)   11/   11B26 : AB9B                                dc.w    z80_ptr(Game_Over_FM4)
(1)   11/   11B28 : =>FALSE                      else
(1)   11/   11B28 :                                     if MOMPASS>1
(1)   11/   11B28 :                                             if Game_Over_FM4<songStart
(1)   11/   11B28 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   11/   11B28 : [11]                                         endif
(1)   11/   11B28 : [11]                                 endif
(1)   11/   11B28 :                                     dc.w    Game_Over_FM4-songStart
(1)   11/   11B28 : [11]                         endif
(1)   11/   11B28 : F40D                        dc.b    $F4,$0D
(1)   12/   11B2A : (MACRO)              	smpsHeaderFM        Game_Over_FM5,	$DC, $16
(1)   12/   11B2A :  (MACRO-2)                   CheckedChannelPointer Game_Over_FM5
(1)   12/   11B2A : =>TRUE                       if SonicDriverVer<>1
(1)   12/   11B2A : E19B                                dc.w    z80_ptr(Game_Over_FM5)
(1)   12/   11B2C : =>FALSE                      else
(1)   12/   11B2C :                                     if MOMPASS>1
(1)   12/   11B2C :                                             if Game_Over_FM5<songStart
(1)   12/   11B2C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   11B2C : [12]                                         endif
(1)   12/   11B2C : [12]                                 endif
(1)   12/   11B2C :                                     dc.w    Game_Over_FM5-songStart
(1)   12/   11B2C : [12]                         endif
(1)   12/   11B2C : DC16                        dc.b    $DC,$16
(1)   13/   11B2E : (MACRO)              	smpsHeaderPSG       Game_Over_PSG1,	$D0, $03, $03, $00
(1)   13/   11B2E :  (MACRO-2)                   CheckedChannelPointer Game_Over_PSG1
(1)   13/   11B2E : =>TRUE                       if SonicDriverVer<>1
(1)   13/   11B2E : F59B                                dc.w    z80_ptr(Game_Over_PSG1)
(1)   13/   11B30 : =>FALSE                      else
(1)   13/   11B30 :                                     if MOMPASS>1
(1)   13/   11B30 :                                             if Game_Over_PSG1<songStart
(1)   13/   11B30 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   11B30 : [13]                                         endif
(1)   13/   11B30 : [13]                                 endif
(1)   13/   11B30 :                                     dc.w    Game_Over_PSG1-songStart
(1)   13/   11B30 : [13]                         endif
(1)   13/   11B30 :  (MACRO-2)                   PSGPitchConvert $D0
(1)   13/   11B30 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   13/   11B30 :                                     dc.b    ($D0+psgdelta)&$FF
(1)   13/   11B30 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   13/   11B30 :                                     dc.b    ($D0-psgdelta)&$FF
(1)   13/   11B30 : =>TRUE                       else
(1)   13/   11B30 : D0                                  dc.b    $D0
(1)   13/   11B31 : [13]                         endif
(1)   13/   11B31 : 03                          dc.b    $03
(1)   13/   11B32 :                             ; Frequency envelope
(1)   13/   11B32 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   13/   11B32 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   13/   11B32 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   13/   11B32 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   13/   11B32 :                                     dc.b    0
(1)   13/   11B32 : =>TRUE                       else
(1)   13/   11B32 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($03<>0)
(1)   13/   11B32 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   13/   11B32 : [13]                                 endif
(1)   13/   11B32 : 03                                  dc.b    $03
(1)   13/   11B33 : [13]                         endif
(1)   13/   11B33 :                             ; Volume envelope
(1)   13/   11B33 : 00                          dc.b    $00
(1)   14/   11B34 : (MACRO)              	smpsHeaderPSG       Game_Over_PSG2,	$DC, $06, $03, $00
(1)   14/   11B34 :  (MACRO-2)                   CheckedChannelPointer Game_Over_PSG2
(1)   14/   11B34 : =>TRUE                       if SonicDriverVer<>1
(1)   14/   11B34 : F69B                                dc.w    z80_ptr(Game_Over_PSG2)
(1)   14/   11B36 : =>FALSE                      else
(1)   14/   11B36 :                                     if MOMPASS>1
(1)   14/   11B36 :                                             if Game_Over_PSG2<songStart
(1)   14/   11B36 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   11B36 : [14]                                         endif
(1)   14/   11B36 : [14]                                 endif
(1)   14/   11B36 :                                     dc.w    Game_Over_PSG2-songStart
(1)   14/   11B36 : [14]                         endif
(1)   14/   11B36 :  (MACRO-2)                   PSGPitchConvert $DC
(1)   14/   11B36 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   11B36 :                                     dc.b    ($DC+psgdelta)&$FF
(1)   14/   11B36 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   11B36 :                                     dc.b    ($DC-psgdelta)&$FF
(1)   14/   11B36 : =>TRUE                       else
(1)   14/   11B36 : DC                                  dc.b    $DC
(1)   14/   11B37 : [14]                         endif
(1)   14/   11B37 : 06                          dc.b    $06
(1)   14/   11B38 :                             ; Frequency envelope
(1)   14/   11B38 : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   14/   11B38 :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   14/   11B38 :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   14/   11B38 :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   14/   11B38 :                                     dc.b    0
(1)   14/   11B38 : =>TRUE                       else
(1)   14/   11B38 : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($03<>0)
(1)   14/   11B38 :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   14/   11B38 : [14]                                 endif
(1)   14/   11B38 : 03                                  dc.b    $03
(1)   14/   11B39 : [14]                         endif
(1)   14/   11B39 :                             ; Volume envelope
(1)   14/   11B39 : 00                          dc.b    $00
(1)   15/   11B3A : (MACRO)              	smpsHeaderPSG       Game_Over_PSG3,	$DC, $00, $00, sTone_03
(1)   15/   11B3A :  (MACRO-2)                   CheckedChannelPointer Game_Over_PSG3
(1)   15/   11B3A : =>TRUE                       if SonicDriverVer<>1
(1)   15/   11B3A : F79B                                dc.w    z80_ptr(Game_Over_PSG3)
(1)   15/   11B3C : =>FALSE                      else
(1)   15/   11B3C :                                     if MOMPASS>1
(1)   15/   11B3C :                                             if Game_Over_PSG3<songStart
(1)   15/   11B3C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   15/   11B3C : [15]                                         endif
(1)   15/   11B3C : [15]                                 endif
(1)   15/   11B3C :                                     dc.w    Game_Over_PSG3-songStart
(1)   15/   11B3C : [15]                         endif
(1)   15/   11B3C :  (MACRO-2)                   PSGPitchConvert $DC
(1)   15/   11B3C : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   15/   11B3C :                                     dc.b    ($DC+psgdelta)&$FF
(1)   15/   11B3C : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   15/   11B3C :                                     dc.b    ($DC-psgdelta)&$FF
(1)   15/   11B3C : =>TRUE                       else
(1)   15/   11B3C : DC                                  dc.b    $DC
(1)   15/   11B3D : [15]                         endif
(1)   15/   11B3D : 00                          dc.b    $00
(1)   15/   11B3E :                             ; Frequency envelope
(1)   15/   11B3E : =>FALSE                      if (SonicDriverVer>=3) && (SourceDriver<3)
(1)   15/   11B3E :                                     ; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(1)   15/   11B3E :                                     ; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(1)   15/   11B3E :                                     ; other drivers may try to process as valid data, so manually force it to 0 here.
(1)   15/   11B3E :                                     dc.b    0
(1)   15/   11B3E : =>TRUE                       else
(1)   15/   11B3E : =>FALSE                              if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && ($00<>0)
(1)   15/   11B3E :                                             message "This track header specifies a frequency envelope, but this driver does not support them."                      
(1)   15/   11B3E : [15]                                 endif
(1)   15/   11B3E : 00                                  dc.b    $00
(1)   15/   11B3F : [15]                         endif
(1)   15/   11B3F :                             ; Volume envelope
(1)   15/   11B3F : 03                          dc.b    sTone_03
(1)   16/   11B40 :                     
(1)   17/   11B40 :                     ; FM1 Data
(1)   18/   11B40 :                     Game_Over_FM1:
(1)   19/   11B40 : (MACRO)              	smpsSetvoice        $00
(1)   19/   11B40 :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   11B40 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   11B40 :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   11B40 : =>TRUE                       else
(1)   19/   11B40 : EF00                                dc.b    $EF,$00
(1)   19/   11B42 : [19]                         endif
(1)   20/   11B42 : (MACRO)              	smpsModSet          $20, $01, $04, $05
(1)   20/   11B42 : F0                          dc.b    $F0
(1)   20/   11B43 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   20/   11B43 :                                     dc.b    $20+1,$01,$04,(($05+1) * $01) & $FF
(1)   20/   11B43 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   20/   11B43 :                                     dc.b    $20-1,$01,$04,conv0To256($05)/conv0To256($01)-1
(1)   20/   11B43 : =>TRUE                       else
(1)   20/   11B43 : 2001 0405                           dc.b    $20,$01,$04,$05
(1)   20/   11B47 : [20]                         endif
(1)   20/   11B47 :                             ;dc.b   $01,$04,$05
(1)   21/   11B47 : 8018 CA24 800C      	dc.b	nRst, $18, nCs6, $24, nRst, $0C, nCs6, nRst, nD6, $24, nB5, $3C
            11B4D : CA80 CB24 C83C    
(1)   22/   11B53 : CA0C 80CA 80CA      	dc.b	nCs6, $0C, nRst, nCs6, nRst, nCs6, nRst, nA5, nRst, nG5, $24, nB5
            11B59 : 80C6 80C4 24C8    
(1)   23/   11B5F : 1880 24C9 0880      	dc.b	$18, nRst, $24, nC6, $08, nRst, nC6, nB5, $0C, nRst, nBb5, nRst
            11B65 : C9C8 0C80 C780    
(1)   24/   11B6B : C680                	dc.b	nA5, nRst
(1)   25/   11B6D : (MACRO)              	smpsModSet          $28, $01, $18, $05
(1)   25/   11B6D : F0                          dc.b    $F0
(1)   25/   11B6E : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   25/   11B6E :                                     dc.b    $28+1,$01,$18,(($05+1) * $01) & $FF
(1)   25/   11B6E : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   25/   11B6E :                                     dc.b    $28-1,$01,$18,conv0To256($05)/conv0To256($01)-1
(1)   25/   11B6E : =>TRUE                       else
(1)   25/   11B6E : 2801 1805                           dc.b    $28,$01,$18,$05
(1)   25/   11B72 : [25]                         endif
(1)   25/   11B72 :                             ;dc.b   $01,$18,$05
(1)   26/   11B72 : C560 E760           	dc.b	nAb5, $60, smpsNoAttack, $60
(1)   27/   11B76 : (MACRO)              	smpsStop
(1)   27/   11B76 : F2                          dc.b    $F2
(1)   28/   11B77 :                     
(1)   29/   11B77 :                     ; FM2 Data
(1)   30/   11B77 :                     Game_Over_FM2:
(1)   31/   11B77 : (MACRO)              	smpsSetvoice        $01
(1)   31/   11B77 :  (MACRO-2)                   smpsFMvoice $01
(1)   31/   11B77 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   31/   11B77 :                                     dc.b    $EF,$01|$80,+$81
(1)   31/   11B77 : =>TRUE                       else
(1)   31/   11B77 : EF01                                dc.b    $EF,$01
(1)   31/   11B79 : [31]                         endif
(1)   32/   11B79 : 8001 D90C 80D9      	dc.b	nRst, $01, nE7, $0C, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst, nD7
            11B7F : 80D6 80D6 80D7    
(1)   33/   11B85 : 2AD7 36D9 0C80      	dc.b	$2A, nD7, $36, nE7, $0C, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst
            11B8B : D980 D680 D680    
(1)   34/   11B91 : DC2A DC36           	dc.b	nG7, $2A, nG7, $36
(1)   35/   11B95 : (MACRO)              	smpsStop
(1)   35/   11B95 : F2                          dc.b    $F2
(1)   36/   11B96 :                     
(1)   37/   11B96 :                     ; FM3 Data
(1)   38/   11B96 :                     Game_Over_FM3:
(1)   39/   11B96 : (MACRO)              	smpsSetvoice        $01
(1)   39/   11B96 :  (MACRO-2)                   smpsFMvoice $01
(1)   39/   11B96 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   39/   11B96 :                                     dc.b    $EF,$01|$80,+$81
(1)   39/   11B96 : =>TRUE                       else
(1)   39/   11B96 : EF01                                dc.b    $EF,$01
(1)   39/   11B98 : [39]                         endif
(1)   40/   11B98 : D618 D6D2 D2D4      	dc.b	nCs7, $18, nCs7, nA6, nA6, nB6, $2A, nB6, $36, nCs7, $18, nCs7
            11B9E : 2AD4 36D6 18D6    
(1)   41/   11BA4 : D2D2 D72A D736      	dc.b	nA6, nA6, nD7, $2A, nD7, $36
(1)   42/   11BAA : (MACRO)              	smpsStop
(1)   42/   11BAA : F2                          dc.b    $F2
(1)   43/   11BAB :                     
(1)   44/   11BAB :                     ; FM4 Data
(1)   45/   11BAB :                     Game_Over_FM4:
(1)   46/   11BAB : (MACRO)              	smpsSetvoice        $02
(1)   46/   11BAB :  (MACRO-2)                   smpsFMvoice $02
(1)   46/   11BAB : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   46/   11BAB :                                     dc.b    $EF,$02|$80,+$81
(1)   46/   11BAB : =>TRUE                       else
(1)   46/   11BAB : EF02                                dc.b    $EF,$02
(1)   46/   11BAD : [46]                         endif
(1)   47/   11BAD : (MACRO)              	smpsNop             $01
(1)   47/   11BAD : E201                                dc.b    $E2,$01
(1)   48/   11BAF : AE0C 80AE 80A9      	dc.b	nA3, $0C, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $2A, nFs3
            11BB5 : 80A9 80AC 2AAB    
(1)   49/   11BBB : 18AC 06AB 18AE      	dc.b	$18, nG3, $06, nFs3, $18, nA3, $0C, nRst, nA3, nRst, nE3, nRst
            11BC1 : 0C80 AE80 A980    
(1)   50/   11BC7 : A980 B32A B218      	dc.b	nE3, nRst, nD4, $2A, nCs4, $18, nD4, $06, nCs4, $18, nA3, $08
            11BCD : B306 B218 AE08    
(1)   51/   11BD3 : 80AE AD0C 80AC      	dc.b	nRst, nA3, nAb3, $0C, nRst, nG3, nRst, nFs3, nRst, nFs3, $60, smpsNoAttack
            11BD9 : 80AB 80AB 60E7    
(1)   52/   11BDF : 60                  	dc.b	$60
(1)   53/   11BE0 : (MACRO)              	smpsStop
(1)   53/   11BE0 : F2                          dc.b    $F2
(1)   54/   11BE1 :                     
(1)   55/   11BE1 :                     ; FM5 Data
(1)   56/   11BE1 :                     Game_Over_FM5:
(1)   57/   11BE1 : (MACRO)              	smpsSetvoice        $03
(1)   57/   11BE1 :  (MACRO-2)                   smpsFMvoice $03
(1)   57/   11BE1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   57/   11BE1 :                                     dc.b    $EF,$03|$80,+$81
(1)   57/   11BE1 : =>TRUE                       else
(1)   57/   11BE1 : EF03                                dc.b    $EF,$03
(1)   57/   11BE3 : [57]                         endif
(1)   58/   11BE3 : 8060 D724 8006      	dc.b	nRst, $60, nD7, $24, nRst, $06, nD7, $36, nRst, $60, nG7, $24
            11BE9 : D736 8060 DC24    
(1)   59/   11BEF : 8006 DC36           	dc.b	nRst, $06, nG7, $36
(1)   60/   11BF3 : (MACRO)              	smpsStop
(1)   60/   11BF3 : F2                          dc.b    $F2
(1)   61/   11BF4 :                     	
(1)   62/   11BF4 :                     ; Unreachable
(1)   63/   11BF4 : (MACRO)              	smpsStop
(1)   63/   11BF4 : F2                          dc.b    $F2
(1)   64/   11BF5 :                     
(1)   65/   11BF5 :                     ; PSG1 Data
(1)   66/   11BF5 :                     Game_Over_PSG1:
(1)   67/   11BF5 : (MACRO)              	smpsStop
(1)   67/   11BF5 : F2                          dc.b    $F2
(1)   68/   11BF6 :                     
(1)   69/   11BF6 :                     ; PSG2 Data
(1)   70/   11BF6 :                     Game_Over_PSG2:
(1)   71/   11BF6 : (MACRO)              	smpsStop
(1)   71/   11BF6 : F2                          dc.b    $F2
(1)   72/   11BF7 :                     
(1)   73/   11BF7 :                     ; PSG3 Data
(1)   74/   11BF7 :                     Game_Over_PSG3:
(1)   75/   11BF7 : (MACRO)              	smpsStop
(1)   75/   11BF7 : F2                          dc.b    $F2
(1)   76/   11BF8 :                     
(1)   77/   11BF8 :                     ; DAC Data
(1)   78/   11BF8 :                     Game_Over_DAC:
(1)   79/   11BF8 : 8030 81             	dc.b	nRst, $30, dKick
(1)   80/   11BFB : (MACRO)              	smpsLoop            $00, $04, Game_Over_DAC
(1)   80/   11BFB : F7                          dc.b    $F7
(1)   80/   11BFC : 0004                        dc.b    $00,$04
(1)   80/   11BFE : =>TRUE                       if SonicDriverVer<>1
(1)   80/   11BFE : F89B                                dc.w    z80_ptr(Game_Over_DAC)
(1)   80/   11C00 : =>FALSE                      else
(1)   80/   11C00 :                                     dc.w    Game_Over_DAC-*-1
(1)   80/   11C00 : [80]                         endif
(1)   81/   11C00 : (MACRO)              	smpsStop
(1)   81/   11C00 : F2                          dc.b    $F2
(1)   82/   11C01 :                     
(1)   83/   11C01 :                     Game_Over_Voices:
(1)   84/   11C01 :                     ;	Voice $00
(1)   85/   11C01 :                     ;	$3A
(1)   86/   11C01 :                     ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1)   87/   11C01 :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1)   88/   11C01 : (MACRO)              	smpsVcAlgorithm     $02
(1)   88/   11C01 : =$2                  vcAlgorithm set $02
(1)   89/   11C01 : (MACRO)              	smpsVcFeedback      $07
(1)   89/   11C01 : =$7                  vcFeedback set $07
(1)   90/   11C01 : (MACRO)              	smpsVcUnusedBits    $00
(1)   90/   11C01 : =$0                  vcUnusedBits set $00
(1)   90/   11C01 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   90/   11C01 :                                     set vcD1R1Unk,<<5
(1)   90/   11C01 :                                     set vcD1R2Unk,<<5
(1)   90/   11C01 :                                     set vcD1R3Unk,<<5
(1)   90/   11C01 :                                     set vcD1R4Unk,<<5
(1)   90/   11C01 : =>TRUE                       else
(1)   90/   11C01 : =$0                                  set vcD1R1Unk,0
(1)   90/   11C01 : =$0                                  set vcD1R2Unk,0
(1)   90/   11C01 : =$0                                  set vcD1R3Unk,0
(1)   90/   11C01 : =$0                                  set vcD1R4Unk,0
(1)   90/   11C01 : [90]                         endif
(1)   91/   11C01 : (MACRO)              	smpsVcDetune        $00, $05, $00, $05
(1)   91/   11C01 : =$0                          set vcDT1,$00
(1)   91/   11C01 : =$5                          set vcDT2,$05
(1)   91/   11C01 : =$0                          set vcDT3,$00
(1)   91/   11C01 : =$5                          set vcDT4,$05
(1)   92/   11C01 : (MACRO)              	smpsVcCoarseFreq    $02, $01, $08, $01
(1)   92/   11C01 : =$2                          set vcCF1,$02
(1)   92/   11C01 : =$1                          set vcCF2,$01
(1)   92/   11C01 : =$8                          set vcCF3,$08
(1)   92/   11C01 : =$1                          set vcCF4,$01
(1)   93/   11C01 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   93/   11C01 : =$0                          set vcRS1,$00
(1)   93/   11C01 : =$0                          set vcRS2,$00
(1)   93/   11C01 : =$0                          set vcRS3,$00
(1)   93/   11C01 : =$0                          set vcRS4,$00
(1)   94/   11C01 : (MACRO)              	smpsVcAttackRate    $10, $1E, $1E, $1E
(1)   94/   11C01 : =$10                         set vcAR1,$10
(1)   94/   11C01 : =$1E                         set vcAR2,$1E
(1)   94/   11C01 : =$1E                         set vcAR3,$1E
(1)   94/   11C01 : =$1E                         set vcAR4,$1E
(1)   95/   11C01 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   95/   11C01 : =>FALSE                      if SourceSMPS2ASM==0
(1)   95/   11C01 :                                     set vcAM1,$00<<5
(1)   95/   11C01 :                                     set vcAM2,$00<<5
(1)   95/   11C01 :                                     set vcAM3,$00<<5
(1)   95/   11C01 :                                     set vcAM4,$00<<5
(1)   95/   11C01 : =>TRUE                       else
(1)   95/   11C01 : =$0                                  set vcAM1,$00<<7
(1)   95/   11C01 : =$0                                  set vcAM2,$00<<7
(1)   95/   11C01 : =$0                                  set vcAM3,$00<<7
(1)   95/   11C01 : =$0                                  set vcAM4,$00<<7
(1)   95/   11C01 : [95]                         endif
(1)   96/   11C01 : (MACRO)              	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)   96/   11C01 : =$F                          set vcD1R1,$0F
(1)   96/   11C01 : =$1F                         set vcD1R2,$1F
(1)   96/   11C01 : =$1F                         set vcD1R3,$1F
(1)   96/   11C01 : =$1F                         set vcD1R4,$1F
(1)   97/   11C01 : (MACRO)              	smpsVcDecayRate2    $02, $00, $00, $00
(1)   97/   11C01 : =$2                          set vcD2R1,$02
(1)   97/   11C01 : =$0                          set vcD2R2,$00
(1)   97/   11C01 : =$0                          set vcD2R3,$00
(1)   97/   11C01 : =$0                          set vcD2R4,$00
(1)   98/   11C01 : (MACRO)              	smpsVcDecayLevel    $01, $00, $00, $00
(1)   98/   11C01 : =$1                          set vcDL1,$01
(1)   98/   11C01 : =$0                          set vcDL2,$00
(1)   98/   11C01 : =$0                          set vcDL3,$00
(1)   98/   11C01 : =$0                          set vcDL4,$00
(1)   99/   11C01 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   99/   11C01 : =$F                          set vcRR1,$0F
(1)   99/   11C01 : =$F                          set vcRR2,$0F
(1)   99/   11C01 : =$F                          set vcRR3,$0F
(1)   99/   11C01 : =$F                          set vcRR4,$0F
(1)  100/   11C01 : (MACRO)              	smpsVcTotalLevel    $81, $22, $24, $18
(1)  100/   11C01 : =$81                         set vcTL1,$81
(1)  100/   11C01 : =$22                         set vcTL2,$22
(1)  100/   11C01 : =$24                         set vcTL3,$24
(1)  100/   11C01 : =$18                         set vcTL4,$18
(1)  100/   11C01 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  100/   11C02 :                     ;   0     1     2     3     4     5     6     7
(1)  100/   11C02 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  100/   11C02 : =>FALSE                      if SourceSMPS2ASM==0
(1)  100/   11C02 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  100/   11C02 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  100/   11C02 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  100/   11C02 :                                     set vcTLMask1,$80
(1)  100/   11C02 : =>TRUE                       else
(1)  100/   11C02 : =$0                                  set vcTLMask4,0
(1)  100/   11C02 : =$0                                  set vcTLMask3,0
(1)  100/   11C02 : =$0                                  set vcTLMask2,0
(1)  100/   11C02 : =$0                                  set vcTLMask1,0
(1)  100/   11C02 : [100]                        endif
(1)  100/   11C02 :                     
(1)  100/   11C02 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  100/   11C02 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  100/   11C02 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  100/   11C02 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  100/   11C02 :                                     set vcTLMask1,$80
(1)  100/   11C02 :                                     set vcTL1,vcTL1&$7F
(1)  100/   11C02 :                                     set vcTL2,vcTL2&$7F
(1)  100/   11C02 :                                     set vcTL3,vcTL3&$7F
(1)  100/   11C02 :                                     set vcTL4,vcTL4&$7F
(1)  100/   11C02 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  100/   11C02 :                                     if MOMPASS>1
(1)  100/   11C02 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  100/   11C02 : [100]                                endif
(1)  100/   11C02 : [100]                        endif
(1)  100/   11C02 :                     
(1)  100/   11C02 : =>FALSE                      if SonicDriverVer==2
(1)  100/   11C02 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  100/   11C02 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  100/   11C02 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  100/   11C02 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  100/   11C02 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  100/   11C02 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  100/   11C02 : =>TRUE                       else
(1)  100/   11C02 : 5108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  100/   11C06 : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  100/   11C0A : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  100/   11C0E : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  100/   11C12 : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  100/   11C16 : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  100/   11C1A : [100]                        endif
(1)  101/   11C1A :                     
(1)  102/   11C1A :                     ;	Voice $01
(1)  103/   11C1A :                     ;	$3C
(1)  104/   11C1A :                     ;	$33, $30, $73, $70, 	$94, $9F, $96, $9F, 	$12, $00, $14, $0F
(1)  105/   11C1A :                     ;	$04, $0A, $04, $0D, 	$2F, $0F, $4F, $2F, 	$33, $80, $1A, $80
(1)  106/   11C1A : (MACRO)              	smpsVcAlgorithm     $04
(1)  106/   11C1A : =$4                  vcAlgorithm set $04
(1)  107/   11C1A : (MACRO)              	smpsVcFeedback      $07
(1)  107/   11C1A : =$7                  vcFeedback set $07
(1)  108/   11C1A : (MACRO)              	smpsVcUnusedBits    $00
(1)  108/   11C1A : =$0                  vcUnusedBits set $00
(1)  108/   11C1A : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  108/   11C1A :                                     set vcD1R1Unk,<<5
(1)  108/   11C1A :                                     set vcD1R2Unk,<<5
(1)  108/   11C1A :                                     set vcD1R3Unk,<<5
(1)  108/   11C1A :                                     set vcD1R4Unk,<<5
(1)  108/   11C1A : =>TRUE                       else
(1)  108/   11C1A : =$0                                  set vcD1R1Unk,0
(1)  108/   11C1A : =$0                                  set vcD1R2Unk,0
(1)  108/   11C1A : =$0                                  set vcD1R3Unk,0
(1)  108/   11C1A : =$0                                  set vcD1R4Unk,0
(1)  108/   11C1A : [108]                        endif
(1)  109/   11C1A : (MACRO)              	smpsVcDetune        $07, $07, $03, $03
(1)  109/   11C1A : =$7                          set vcDT1,$07
(1)  109/   11C1A : =$7                          set vcDT2,$07
(1)  109/   11C1A : =$3                          set vcDT3,$03
(1)  109/   11C1A : =$3                          set vcDT4,$03
(1)  110/   11C1A : (MACRO)              	smpsVcCoarseFreq    $00, $03, $00, $03
(1)  110/   11C1A : =$0                          set vcCF1,$00
(1)  110/   11C1A : =$3                          set vcCF2,$03
(1)  110/   11C1A : =$0                          set vcCF3,$00
(1)  110/   11C1A : =$3                          set vcCF4,$03
(1)  111/   11C1A : (MACRO)              	smpsVcRateScale     $02, $02, $02, $02
(1)  111/   11C1A : =$2                          set vcRS1,$02
(1)  111/   11C1A : =$2                          set vcRS2,$02
(1)  111/   11C1A : =$2                          set vcRS3,$02
(1)  111/   11C1A : =$2                          set vcRS4,$02
(1)  112/   11C1A : (MACRO)              	smpsVcAttackRate    $1F, $16, $1F, $14
(1)  112/   11C1A : =$1F                         set vcAR1,$1F
(1)  112/   11C1A : =$16                         set vcAR2,$16
(1)  112/   11C1A : =$1F                         set vcAR3,$1F
(1)  112/   11C1A : =$14                         set vcAR4,$14
(1)  113/   11C1A : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  113/   11C1A : =>FALSE                      if SourceSMPS2ASM==0
(1)  113/   11C1A :                                     set vcAM1,$00<<5
(1)  113/   11C1A :                                     set vcAM2,$00<<5
(1)  113/   11C1A :                                     set vcAM3,$00<<5
(1)  113/   11C1A :                                     set vcAM4,$00<<5
(1)  113/   11C1A : =>TRUE                       else
(1)  113/   11C1A : =$0                                  set vcAM1,$00<<7
(1)  113/   11C1A : =$0                                  set vcAM2,$00<<7
(1)  113/   11C1A : =$0                                  set vcAM3,$00<<7
(1)  113/   11C1A : =$0                                  set vcAM4,$00<<7
(1)  113/   11C1A : [113]                        endif
(1)  114/   11C1A : (MACRO)              	smpsVcDecayRate1    $0F, $14, $00, $12
(1)  114/   11C1A : =$F                          set vcD1R1,$0F
(1)  114/   11C1A : =$14                         set vcD1R2,$14
(1)  114/   11C1A : =$0                          set vcD1R3,$00
(1)  114/   11C1A : =$12                         set vcD1R4,$12
(1)  115/   11C1A : (MACRO)              	smpsVcDecayRate2    $0D, $04, $0A, $04
(1)  115/   11C1A : =$D                          set vcD2R1,$0D
(1)  115/   11C1A : =$4                          set vcD2R2,$04
(1)  115/   11C1A : =$A                          set vcD2R3,$0A
(1)  115/   11C1A : =$4                          set vcD2R4,$04
(1)  116/   11C1A : (MACRO)              	smpsVcDecayLevel    $02, $04, $00, $02
(1)  116/   11C1A : =$2                          set vcDL1,$02
(1)  116/   11C1A : =$4                          set vcDL2,$04
(1)  116/   11C1A : =$0                          set vcDL3,$00
(1)  116/   11C1A : =$2                          set vcDL4,$02
(1)  117/   11C1A : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  117/   11C1A : =$F                          set vcRR1,$0F
(1)  117/   11C1A : =$F                          set vcRR2,$0F
(1)  117/   11C1A : =$F                          set vcRR3,$0F
(1)  117/   11C1A : =$F                          set vcRR4,$0F
(1)  118/   11C1A : (MACRO)              	smpsVcTotalLevel    $80, $1A, $80, $33
(1)  118/   11C1A : =$80                         set vcTL1,$80
(1)  118/   11C1A : =$1A                         set vcTL2,$1A
(1)  118/   11C1A : =$80                         set vcTL3,$80
(1)  118/   11C1A : =$33                         set vcTL4,$33
(1)  118/   11C1A : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  118/   11C1B :                     ;   0     1     2     3     4     5     6     7
(1)  118/   11C1B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  118/   11C1B : =>FALSE                      if SourceSMPS2ASM==0
(1)  118/   11C1B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  118/   11C1B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  118/   11C1B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  118/   11C1B :                                     set vcTLMask1,$80
(1)  118/   11C1B : =>TRUE                       else
(1)  118/   11C1B : =$0                                  set vcTLMask4,0
(1)  118/   11C1B : =$0                                  set vcTLMask3,0
(1)  118/   11C1B : =$0                                  set vcTLMask2,0
(1)  118/   11C1B : =$0                                  set vcTLMask1,0
(1)  118/   11C1B : [118]                        endif
(1)  118/   11C1B :                     
(1)  118/   11C1B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  118/   11C1B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  118/   11C1B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  118/   11C1B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  118/   11C1B :                                     set vcTLMask1,$80
(1)  118/   11C1B :                                     set vcTL1,vcTL1&$7F
(1)  118/   11C1B :                                     set vcTL2,vcTL2&$7F
(1)  118/   11C1B :                                     set vcTL3,vcTL3&$7F
(1)  118/   11C1B :                                     set vcTL4,vcTL4&$7F
(1)  118/   11C1B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  118/   11C1B :                                     if MOMPASS>1
(1)  118/   11C1B :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  118/   11C1B : [118]                                endif
(1)  118/   11C1B : [118]                        endif
(1)  118/   11C1B :                     
(1)  118/   11C1B : =>FALSE                      if SonicDriverVer==2
(1)  118/   11C1B :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  118/   11C1B :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  118/   11C1B :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  118/   11C1B :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  118/   11C1B :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  118/   11C1B :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  118/   11C1B : =>TRUE                       else
(1)  118/   11C1B : 3330 7370                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  118/   11C1F : 949F 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  118/   11C23 : 1200 140F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  118/   11C27 : 040A 040D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  118/   11C2B : 2F0F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  118/   11C2F : 3380 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  118/   11C33 : [118]                        endif
(1)  119/   11C33 :                     
(1)  120/   11C33 :                     ;	Voice $02
(1)  121/   11C33 :                     ;	$3A
(1)  122/   11C33 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  123/   11C33 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$1C, $28, $27, $80
(1)  124/   11C33 : (MACRO)              	smpsVcAlgorithm     $02
(1)  124/   11C33 : =$2                  vcAlgorithm set $02
(1)  125/   11C33 : (MACRO)              	smpsVcFeedback      $07
(1)  125/   11C33 : =$7                  vcFeedback set $07
(1)  126/   11C33 : (MACRO)              	smpsVcUnusedBits    $00
(1)  126/   11C33 : =$0                  vcUnusedBits set $00
(1)  126/   11C33 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  126/   11C33 :                                     set vcD1R1Unk,<<5
(1)  126/   11C33 :                                     set vcD1R2Unk,<<5
(1)  126/   11C33 :                                     set vcD1R3Unk,<<5
(1)  126/   11C33 :                                     set vcD1R4Unk,<<5
(1)  126/   11C33 : =>TRUE                       else
(1)  126/   11C33 : =$0                                  set vcD1R1Unk,0
(1)  126/   11C33 : =$0                                  set vcD1R2Unk,0
(1)  126/   11C33 : =$0                                  set vcD1R3Unk,0
(1)  126/   11C33 : =$0                                  set vcD1R4Unk,0
(1)  126/   11C33 : [126]                        endif
(1)  127/   11C33 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)  127/   11C33 : =$0                          set vcDT1,$00
(1)  127/   11C33 : =$0                          set vcDT2,$00
(1)  127/   11C33 : =$0                          set vcDT3,$00
(1)  127/   11C33 : =$0                          set vcDT4,$00
(1)  128/   11C33 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  128/   11C33 : =$1                          set vcCF1,$01
(1)  128/   11C33 : =$1                          set vcCF2,$01
(1)  128/   11C33 : =$7                          set vcCF3,$07
(1)  128/   11C33 : =$1                          set vcCF4,$01
(1)  129/   11C33 : (MACRO)              	smpsVcRateScale     $01, $02, $02, $02
(1)  129/   11C33 : =$1                          set vcRS1,$01
(1)  129/   11C33 : =$2                          set vcRS2,$02
(1)  129/   11C33 : =$2                          set vcRS3,$02
(1)  129/   11C33 : =$2                          set vcRS4,$02
(1)  130/   11C33 : (MACRO)              	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  130/   11C33 : =$13                         set vcAR1,$13
(1)  130/   11C33 : =$D                          set vcAR2,$0D
(1)  130/   11C33 : =$E                          set vcAR3,$0E
(1)  130/   11C33 : =$E                          set vcAR4,$0E
(1)  131/   11C33 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  131/   11C33 : =>FALSE                      if SourceSMPS2ASM==0
(1)  131/   11C33 :                                     set vcAM1,$00<<5
(1)  131/   11C33 :                                     set vcAM2,$00<<5
(1)  131/   11C33 :                                     set vcAM3,$00<<5
(1)  131/   11C33 :                                     set vcAM4,$00<<5
(1)  131/   11C33 : =>TRUE                       else
(1)  131/   11C33 : =$0                                  set vcAM1,$00<<7
(1)  131/   11C33 : =$0                                  set vcAM2,$00<<7
(1)  131/   11C33 : =$0                                  set vcAM3,$00<<7
(1)  131/   11C33 : =$0                                  set vcAM4,$00<<7
(1)  131/   11C33 : [131]                        endif
(1)  132/   11C33 : (MACRO)              	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  132/   11C33 : =$3                          set vcD1R1,$03
(1)  132/   11C33 : =$E                          set vcD1R2,$0E
(1)  132/   11C33 : =$E                          set vcD1R3,$0E
(1)  132/   11C33 : =$E                          set vcD1R4,$0E
(1)  133/   11C33 : (MACRO)              	smpsVcDecayRate2    $07, $00, $00, $00
(1)  133/   11C33 : =$7                          set vcD2R1,$07
(1)  133/   11C33 : =$0                          set vcD2R2,$00
(1)  133/   11C33 : =$0                          set vcD2R3,$00
(1)  133/   11C33 : =$0                          set vcD2R4,$00
(1)  134/   11C33 : (MACRO)              	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  134/   11C33 : =$0                          set vcDL1,$00
(1)  134/   11C33 : =$1                          set vcDL2,$01
(1)  134/   11C33 : =$F                          set vcDL3,$0F
(1)  134/   11C33 : =$1                          set vcDL4,$01
(1)  135/   11C33 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  135/   11C33 : =$F                          set vcRR1,$0F
(1)  135/   11C33 : =$F                          set vcRR2,$0F
(1)  135/   11C33 : =$F                          set vcRR3,$0F
(1)  135/   11C33 : =$F                          set vcRR4,$0F
(1)  136/   11C33 : (MACRO)              	smpsVcTotalLevel    $80, $27, $28, $1C
(1)  136/   11C33 : =$80                         set vcTL1,$80
(1)  136/   11C33 : =$27                         set vcTL2,$27
(1)  136/   11C33 : =$28                         set vcTL3,$28
(1)  136/   11C33 : =$1C                         set vcTL4,$1C
(1)  136/   11C33 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  136/   11C34 :                     ;   0     1     2     3     4     5     6     7
(1)  136/   11C34 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  136/   11C34 : =>FALSE                      if SourceSMPS2ASM==0
(1)  136/   11C34 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  136/   11C34 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  136/   11C34 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  136/   11C34 :                                     set vcTLMask1,$80
(1)  136/   11C34 : =>TRUE                       else
(1)  136/   11C34 : =$0                                  set vcTLMask4,0
(1)  136/   11C34 : =$0                                  set vcTLMask3,0
(1)  136/   11C34 : =$0                                  set vcTLMask2,0
(1)  136/   11C34 : =$0                                  set vcTLMask1,0
(1)  136/   11C34 : [136]                        endif
(1)  136/   11C34 :                     
(1)  136/   11C34 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  136/   11C34 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  136/   11C34 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  136/   11C34 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  136/   11C34 :                                     set vcTLMask1,$80
(1)  136/   11C34 :                                     set vcTL1,vcTL1&$7F
(1)  136/   11C34 :                                     set vcTL2,vcTL2&$7F
(1)  136/   11C34 :                                     set vcTL3,vcTL3&$7F
(1)  136/   11C34 :                                     set vcTL4,vcTL4&$7F
(1)  136/   11C34 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  136/   11C34 :                                     if MOMPASS>1
(1)  136/   11C34 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  136/   11C34 : [136]                                endif
(1)  136/   11C34 : [136]                        endif
(1)  136/   11C34 :                     
(1)  136/   11C34 : =>FALSE                      if SonicDriverVer==2
(1)  136/   11C34 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  136/   11C34 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  136/   11C34 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  136/   11C34 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  136/   11C34 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  136/   11C34 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  136/   11C34 : =>TRUE                       else
(1)  136/   11C34 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  136/   11C38 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  136/   11C3C : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  136/   11C40 : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  136/   11C44 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  136/   11C48 : 1C28 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  136/   11C4C : [136]                        endif
(1)  137/   11C4C :                     
(1)  138/   11C4C :                     ;	Voice $03
(1)  139/   11C4C :                     ;	$1F
(1)  140/   11C4C :                     ;	$66, $31, $53, $22, 	$1C, $98, $1F, $1F, 	$12, $0F, $0F, $0F
(1)  141/   11C4C :                     ;	$00, $00, $00, $00, 	$FF, $0F, $0F, $0F, 	$8C, $8D, $8A, $8B
(1)  142/   11C4C : (MACRO)              	smpsVcAlgorithm     $07
(1)  142/   11C4C : =$7                  vcAlgorithm set $07
(1)  143/   11C4C : (MACRO)              	smpsVcFeedback      $03
(1)  143/   11C4C : =$3                  vcFeedback set $03
(1)  144/   11C4C : (MACRO)              	smpsVcUnusedBits    $00
(1)  144/   11C4C : =$0                  vcUnusedBits set $00
(1)  144/   11C4C : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)  144/   11C4C :                                     set vcD1R1Unk,<<5
(1)  144/   11C4C :                                     set vcD1R2Unk,<<5
(1)  144/   11C4C :                                     set vcD1R3Unk,<<5
(1)  144/   11C4C :                                     set vcD1R4Unk,<<5
(1)  144/   11C4C : =>TRUE                       else
(1)  144/   11C4C : =$0                                  set vcD1R1Unk,0
(1)  144/   11C4C : =$0                                  set vcD1R2Unk,0
(1)  144/   11C4C : =$0                                  set vcD1R3Unk,0
(1)  144/   11C4C : =$0                                  set vcD1R4Unk,0
(1)  144/   11C4C : [144]                        endif
(1)  145/   11C4C : (MACRO)              	smpsVcDetune        $02, $05, $03, $06
(1)  145/   11C4C : =$2                          set vcDT1,$02
(1)  145/   11C4C : =$5                          set vcDT2,$05
(1)  145/   11C4C : =$3                          set vcDT3,$03
(1)  145/   11C4C : =$6                          set vcDT4,$06
(1)  146/   11C4C : (MACRO)              	smpsVcCoarseFreq    $02, $03, $01, $06
(1)  146/   11C4C : =$2                          set vcCF1,$02
(1)  146/   11C4C : =$3                          set vcCF2,$03
(1)  146/   11C4C : =$1                          set vcCF3,$01
(1)  146/   11C4C : =$6                          set vcCF4,$06
(1)  147/   11C4C : (MACRO)              	smpsVcRateScale     $00, $00, $02, $00
(1)  147/   11C4C : =$0                          set vcRS1,$00
(1)  147/   11C4C : =$0                          set vcRS2,$00
(1)  147/   11C4C : =$2                          set vcRS3,$02
(1)  147/   11C4C : =$0                          set vcRS4,$00
(1)  148/   11C4C : (MACRO)              	smpsVcAttackRate    $1F, $1F, $18, $1C
(1)  148/   11C4C : =$1F                         set vcAR1,$1F
(1)  148/   11C4C : =$1F                         set vcAR2,$1F
(1)  148/   11C4C : =$18                         set vcAR3,$18
(1)  148/   11C4C : =$1C                         set vcAR4,$1C
(1)  149/   11C4C : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)  149/   11C4C : =>FALSE                      if SourceSMPS2ASM==0
(1)  149/   11C4C :                                     set vcAM1,$00<<5
(1)  149/   11C4C :                                     set vcAM2,$00<<5
(1)  149/   11C4C :                                     set vcAM3,$00<<5
(1)  149/   11C4C :                                     set vcAM4,$00<<5
(1)  149/   11C4C : =>TRUE                       else
(1)  149/   11C4C : =$0                                  set vcAM1,$00<<7
(1)  149/   11C4C : =$0                                  set vcAM2,$00<<7
(1)  149/   11C4C : =$0                                  set vcAM3,$00<<7
(1)  149/   11C4C : =$0                                  set vcAM4,$00<<7
(1)  149/   11C4C : [149]                        endif
(1)  150/   11C4C : (MACRO)              	smpsVcDecayRate1    $0F, $0F, $0F, $12
(1)  150/   11C4C : =$F                          set vcD1R1,$0F
(1)  150/   11C4C : =$F                          set vcD1R2,$0F
(1)  150/   11C4C : =$F                          set vcD1R3,$0F
(1)  150/   11C4C : =$12                         set vcD1R4,$12
(1)  151/   11C4C : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)  151/   11C4C : =$0                          set vcD2R1,$00
(1)  151/   11C4C : =$0                          set vcD2R2,$00
(1)  151/   11C4C : =$0                          set vcD2R3,$00
(1)  151/   11C4C : =$0                          set vcD2R4,$00
(1)  152/   11C4C : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $0F
(1)  152/   11C4C : =$0                          set vcDL1,$00
(1)  152/   11C4C : =$0                          set vcDL2,$00
(1)  152/   11C4C : =$0                          set vcDL3,$00
(1)  152/   11C4C : =$F                          set vcDL4,$0F
(1)  153/   11C4C : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  153/   11C4C : =$F                          set vcRR1,$0F
(1)  153/   11C4C : =$F                          set vcRR2,$0F
(1)  153/   11C4C : =$F                          set vcRR3,$0F
(1)  153/   11C4C : =$F                          set vcRR4,$0F
(1)  154/   11C4C : (MACRO)              	smpsVcTotalLevel    $8B, $8A, $8D, $8C
(1)  154/   11C4C : =$8B                         set vcTL1,$8B
(1)  154/   11C4C : =$8A                         set vcTL2,$8A
(1)  154/   11C4C : =$8D                         set vcTL3,$8D
(1)  154/   11C4C : =$8C                         set vcTL4,$8C
(1)  154/   11C4C : 1F                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  154/   11C4D :                     ;   0     1     2     3     4     5     6     7
(1)  154/   11C4D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  154/   11C4D : =>FALSE                      if SourceSMPS2ASM==0
(1)  154/   11C4D :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  154/   11C4D :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  154/   11C4D :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  154/   11C4D :                                     set vcTLMask1,$80
(1)  154/   11C4D : =>TRUE                       else
(1)  154/   11C4D : =$0                                  set vcTLMask4,0
(1)  154/   11C4D : =$0                                  set vcTLMask3,0
(1)  154/   11C4D : =$0                                  set vcTLMask2,0
(1)  154/   11C4D : =$0                                  set vcTLMask1,0
(1)  154/   11C4D : [154]                        endif
(1)  154/   11C4D :                     
(1)  154/   11C4D : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  154/   11C4D :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)  154/   11C4D :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)  154/   11C4D :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)  154/   11C4D :                                     set vcTLMask1,$80
(1)  154/   11C4D :                                     set vcTL1,vcTL1&$7F
(1)  154/   11C4D :                                     set vcTL2,vcTL2&$7F
(1)  154/   11C4D :                                     set vcTL3,vcTL3&$7F
(1)  154/   11C4D :                                     set vcTL4,vcTL4&$7F
(1)  154/   11C4D : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)  154/   11C4D :                                     if MOMPASS>1
(1)  154/   11C4D :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  154/   11C4D : [154]                                endif
(1)  154/   11C4D : [154]                        endif
(1)  154/   11C4D :                     
(1)  154/   11C4D : =>FALSE                      if SonicDriverVer==2
(1)  154/   11C4D :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  154/   11C4D :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  154/   11C4D :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  154/   11C4D :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  154/   11C4D :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  154/   11C4D :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  154/   11C4D : =>TRUE                       else
(1)  154/   11C4D : 6631 5322                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  154/   11C51 : 1C98 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  154/   11C55 : 120F 0F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  154/   11C59 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  154/   11C5D : FF0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  154/   11C61 : 8C8D 8A8B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  154/   11C65 : [154]                        endif
(1)  155/   11C65 :                     
(1)  156/   11C65 :                     
   18785/   11C65 : (MACRO)              		even
   18785/   11C65 : =>TRUE                       if notZ80(MOMCPU)
   18785/   11C65 : =>TRUE                               if (*)&1
   18785/   11C65 : 00                                          dc.b 0                          ;ds.b 1
   18785/   11C66 : [18785]                              endif
   18785/   11C66 : =>FALSE                      else
   18785/   11C66 :                                     if ($)&1
   18785/   11C66 :                                             db 0
   18785/   11C66 : [18785]                              endif
   18785/   11C66 : [18785]                      endif
   18786/   11C66 : (MACRO)              		finishBank
   18786/   11C66 : =>FALSE                      if * > soundBankStart + $8000
   18786/   11C66 :                                     fatal "soundBank \{soundBankName} must fit in $8000 bytes but was $\{*-soundBankStart}. Try moving something to the other bank."
   18786/   11C66 : =>FALSE                      elseif (DebugSoundbanks<>0)&&(MOMPASS=1)
   18786/   11C66 :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end."
   18786/   11C66 : [18786]                      endif
   18787/   11C66 :                     ; ---------------------------------------------------------------------------
   18788/   11C66 :                     ; ===========================================================================
   18789/   11C66 :                     ; ---------------------------------------------------------------------------
   18790/   11C66 :                     ; Unknown Data
   18791/   11C66 :                     ; ---------------------------------------------------------------------------
   18792/   11C66 :                     ; Data Location (00011C66 - 00012250)
   18793/   11C66 :                     ; Striped out
   18794/   11C66 :                     ; UnkData_00011C66:
   18795/   11C66 :                     		binclude	"UnknownCodes/UnknownData_00011C66.bin"
   18796/   12251 :                     ; ---------------------------------------------------------------------------
   18797/   12251 :                     ; ===========================================================================
   18798/   12251 :                     ; ---------------------------------------------------------------------------
   18799/   12251 :                     ; Unknown Data
   18800/   12251 :                     ; ---------------------------------------------------------------------------
   18801/   12251 :                     ; Data Location (00012251 - 000123FF)
   18802/   12251 :                     ; Striped out
   18803/   12251 :                     ; UnkData_00012251:
   18804/   12251 :                     		binclude	"UnknownCodes/UnknownData_00012251.bin"
   18805/   12400 :                     ; ---------------------------------------------------------------------------
   18806/   12400 :                     ; ===========================================================================
   18807/   12400 :                     ; ---------------------------------------------------------------------------
   18808/   12400 :                     ; Unknown Data
   18809/   12400 :                     ; ---------------------------------------------------------------------------
   18810/   12400 :                     ; Data Location (00012400 - 00012FFF)
   18811/   12400 :                     ; Striped out
   18812/   12400 :                     ; UnkData_00012400:
   18813/   12400 :                     		binclude	"UnknownCodes/UnknownData_00012400.bin"
   18814/   13000 :                     ; ---------------------------------------------------------------------------
   18815/   13000 :                     ; ===========================================================================
   18816/   13000 :                     ; ---------------------------------------------------------------------------
   18817/   13000 :                     ; Unknown Data
   18818/   13000 :                     ; ---------------------------------------------------------------------------
   18819/   13000 :                     ; Data Location (00013000 - 000145FF)
   18820/   13000 :                     ; Striped out
   18821/   13000 :                     ; UnkData_00013000:
   18822/   13000 :                     		binclude	"UnknownCodes/UnknownData_00013000.bin"
   18823/   14600 :                     ; ---------------------------------------------------------------------------
   18824/   14600 :                     ; ===========================================================================
   18825/   14600 :                     ; ---------------------------------------------------------------------------
   18826/   14600 :                     ; Unknown Data
   18827/   14600 :                     ; ---------------------------------------------------------------------------
   18828/   14600 :                     ; Data Location (00014600 - 000150FF)
   18829/   14600 :                     ; Striped out
   18830/   14600 :                     ; UnkData_00014600:
   18831/   14600 :                     		binclude	"UnknownCodes/UnknownData_00014600.bin"
   18832/   15100 :                     ; ---------------------------------------------------------------------------
   18833/   15100 :                     ; ===========================================================================
   18834/   15100 :                     ; ---------------------------------------------------------------------------
   18835/   15100 :                     ; Unknown Data
   18836/   15100 :                     ; ---------------------------------------------------------------------------
   18837/   15100 :                     ; Data Location (00015100 - 0001562F)
   18838/   15100 :                     ; Striped out
   18839/   15100 :                     ; UnkData_00013000:
   18840/   15100 :                     		binclude	"UnknownCodes/UnknownData_00015100.bin"
   18841/   15630 :                     ; ---------------------------------------------------------------------------
   18842/   15630 :                     ; ===========================================================================
   18843/   15630 :                     ; ---------------------------------------------------------------------------
   18844/   15630 :                     ; Align to $00016000, Unknown Data
   18845/   15630 :                     ; ---------------------------------------------------------------------------
   18846/   15630 : (MACRO)              	align $1000
   18846/   15630 :  (MACRO-2)                   cnop 0,$1000
   18846/   15630 : =>TRUE                       if notZ80(MOMCPU)
   18846/   15630 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   18846/   15630 : =>TRUE                       if notZ80(MOMCPU)
   18846/   15630 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   18846/   15630 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   18846/   15630 : =>TRUE                               else
   18846/   16000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   18846/   16000 : [18846]                              endif
   18846/   16000 : =>FALSE                      else
   18846/   16000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   18846/   16000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   18846/   16000 :                                     else
   18846/   16000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   18846/   16000 :                                                     db 0
   18846/   16000 :                                             endm
   18846/   16000 : [18846]                              endif
   18846/   16000 : [18846]                      endif
   18846/   16000 : =>FALSE                      else
   18846/   16000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   18846/   16000 : [18846]                      endif
   18847/   16000 :                     ; ---------------------------------------------------------------------------
   18848/   16000 :                     ; Data Location (00016000 - 00016703)
   18849/   16000 :                     ; Striped out
   18850/   16000 :                     ; UnkData_00016000:
   18851/   16000 :                     		binclude	"UnknownCodes/UnknownData_00016000.bin"
   18852/   16704 :                     ; ---------------------------------------------------------------------------
   18853/   16704 :                     ; ===========================================================================
   18854/   16704 :                     ; ---------------------------------------------------------------------------
   18855/   16704 :                     ; Align to $00018000, Sound Data (Unused by Z80)
   18856/   16704 :                     ; ---------------------------------------------------------------------------
   18857/   16704 : (MACRO)              SoundBank:	startBank
   18857/   16704 :  (MACRO-2)                   align   $8000
   18857/   16704 :   (MACRO-3)                  cnop 0,$8000
   18857/   16704 : =>TRUE                       if notZ80(MOMCPU)
   18857/   16704 :    (MACRO-4)                         org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   18857/   16704 : =>TRUE                       if notZ80(MOMCPU)
   18857/   16704 : =>FALSE                              if (*-1+($8000)-((*-1+(-(0)))#($8000))) < *
   18857/   16704 :                                             error "too much stuff before org $\{(*-1+($8000)-((*-1+(-(0)))#($8000)))} ($\{(*-(*-1+($8000)-((*-1+(-(0)))#($8000))))} bytes)"
   18857/   16704 : =>TRUE                               else
   18857/   18000 :                                             !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   18857/   18000 : [18857]                              endif
   18857/   18000 : =>FALSE                      else
   18857/   18000 :                                     if (*-1+($8000)-((*-1+(-(0)))#($8000))) < $
   18857/   18000 :                                             error "too much stuff before org 0\{(*-1+($8000)-((*-1+(-(0)))#($8000)))}h (0\{($-(*-1+($8000)-((*-1+(-(0)))#($8000))))}h bytes)"
   18857/   18000 :                                     else
   18857/   18000 :                                             while (*-1+($8000)-((*-1+(-(0)))#($8000))) > $
   18857/   18000 :                                                     db 0
   18857/   18000 :                                             endm
   18857/   18000 : [18857]                              endif
   18857/   18000 : [18857]                      endif
   18857/   18000 : =>FALSE                      else
   18857/   18000 :                                     org ($-1+($8000)-(($-1+(-(0)))#($8000)))
   18857/   18000 : [18857]                      endif
   18857/   18000 : =$18000              SoundBank label *
   18857/   18000 : =$18000              soundBankStart := SoundBank
   18857/   18000 : ="SoundBank"         soundBankName := "SoundBank"
   18858/   18000 :                     SoundA0:	include	"Sound/SFX/SndA0 - Jump.asm"	; Jump SFX (Same as Sonic CD FM NO.02)
(1)    1/   18000 :                     Snd00_Jump_Header:
(1)    2/   18000 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   18000 :                     
(1)    2/   18000 : =$3                  SourceDriver set 3
(1)    2/   18000 :                     
(1)    2/   18000 : =>TRUE                       if ("1"<>"")
(1)    2/   18000 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   18000 : =>FALSE                      else
(1)    2/   18000 :                                     set SourceSMPS2ASM,0
(1)    2/   18000 : [2]                          endif
(1)    2/   18000 :                     
(1)    2/   18000 : =$18000              songStart set *
(1)    2/   18000 :                     
(1)    2/   18000 : =>TRUE                       if MOMPASS>1
(1)    2/   18000 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   18000 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   18000 : [2]                                  endif
(1)    2/   18000 : [2]                          endif
(1)    2/   18000 :                     
(1)    3/   18000 : =>TRUE               	if ~~fixBugs
(1)    4/   18000 : (MACRO)              	smpsHeaderVoice     Snd00_Jump_Voices+$4000
(1)    4/   18000 : =>FALSE                      if songStart<>*
(1)    4/   18000 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   18000 : [4]                          endif
(1)    4/   18000 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   18000 : 1AC0                                dc.w    z80_ptr(Snd00_Jump_Voices+$4000)
(1)    4/   18002 : =>FALSE                      else
(1)    4/   18002 :                                     if MOMPASS>1
(1)    4/   18002 :                                             if Snd00_Jump_Voices+$4000<songStart
(1)    4/   18002 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   18002 : [4]                                          endif
(1)    4/   18002 : [4]                                  endif
(1)    4/   18002 :                                     dc.w    Snd00_Jump_Voices+$4000-songStart
(1)    4/   18002 : [4]                          endif
(1)    5/   18002 : =>FALSE              	else
(1)    6/   18002 :                     	smpsHeaderVoice     Snd00_Jump_Voices
(1)    7/   18002 : [3]                  	endif
(1)    8/   18002 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   18002 : 01                          dc.b    $01
(1)    9/   18003 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   18003 : 01                          dc.b    $01
(1)   10/   18004 :                     
(1)   11/   18004 : =>TRUE               	if ~~fixBugs
(1)   12/   18004 : (MACRO)              	smpsHeaderSFXChannel cFM6, Snd00_Jump_FM6+$4000,	$EB, $09
(1)   12/   18004 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM6==cNoise)
(1)   12/   18004 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18004 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM6==cFM6)
(1)   12/   18004 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18004 : [12]                         endif
(1)   12/   18004 : 8006                        dc.b    $80,cFM6
(1)   12/   18006 :  (MACRO-2)                   CheckedChannelPointer Snd00_Jump_FM6+$4000
(1)   12/   18006 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   18006 : 0AC0                                dc.w    z80_ptr(Snd00_Jump_FM6+$4000)
(1)   12/   18008 : =>FALSE                      else
(1)   12/   18008 :                                     if MOMPASS>1
(1)   12/   18008 :                                             if Snd00_Jump_FM6+$4000<songStart
(1)   12/   18008 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   18008 : [12]                                         endif
(1)   12/   18008 : [12]                                 endif
(1)   12/   18008 :                                     dc.w    Snd00_Jump_FM6+$4000-songStart
(1)   12/   18008 : [12]                         endif
(1)   12/   18008 : =>FALSE                      if (cFM6&$80)<>0
(1)   12/   18008 :                                     PSGPitchConvert $EB
(1)   12/   18008 : =>TRUE                       else
(1)   12/   18008 : EB                                  dc.b    $EB
(1)   12/   18009 : [12]                         endif
(1)   12/   18009 : 09                          dc.b    $09
(1)   13/   1800A : =>FALSE              	else
(1)   14/   1800A :                     	smpsHeaderSFXChannel cFM6, Snd00_Jump_FM6,	$EB, $09
(1)   15/   1800A : [11]                 	endif
(1)   16/   1800A :                     
(1)   17/   1800A :                     ; FM6 Data
(1)   18/   1800A :                     Snd00_Jump_FM6:
(1)   19/   1800A : (MACRO)              	smpsSetvoice        $00
(1)   19/   1800A :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   1800A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   1800A :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   1800A : =>TRUE                       else
(1)   19/   1800A : EF00                                dc.b    $EF,$00
(1)   19/   1800C : [19]                         endif
(1)   20/   1800C : (MACRO)              	smpsFMAlterVol      $05
(1)   20/   1800C : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   20/   1800C :                                     dc.b    $E5,$05,
(1)   20/   1800C : =>TRUE                       else
(1)   20/   1800C : E605                                dc.b    $E6,$05
(1)   20/   1800E : [20]                         endif
(1)   21/   1800E : AA05                	dc.b	nF3, $05
(1)   22/   18010 : (MACRO)              	smpsFMAlterVol      $FB
(1)   22/   18010 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   22/   18010 :                                     dc.b    $E5,$FB,
(1)   22/   18010 : =>TRUE                       else
(1)   22/   18010 : E6FB                                dc.b    $E6,$FB
(1)   22/   18012 : [22]                         endif
(1)   23/   18012 : (MACRO)              	smpsModSet          $02, $01, $34, $FF
(1)   23/   18012 : F0                          dc.b    $F0
(1)   23/   18013 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   23/   18013 :                                     dc.b    $02+1,$01,$34,(($FF+1) * $01) & $FF
(1)   23/   18013 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   23/   18013 :                                     dc.b    $02-1,$01,$34,conv0To256($FF)/conv0To256($01)-1
(1)   23/   18013 : =>TRUE                       else
(1)   23/   18013 : 0201 34FF                           dc.b    $02,$01,$34,$FF
(1)   23/   18017 : [23]                         endif
(1)   23/   18017 :                             ;dc.b   $01,$34,$FF
(1)   24/   18017 : AF15                	dc.b	nBb3, $15
(1)   25/   18019 : (MACRO)              	smpsStop
(1)   25/   18019 : F2                          dc.b    $F2
(1)   26/   1801A :                     
(1)   27/   1801A :                     Snd00_Jump_Voices:
(1)   28/   1801A :                     ;	Voice $00
(1)   29/   1801A :                     ;	$0C
(1)   30/   1801A :                     ;	$08, $08, $08, $08, 	$1F, $1F, $1F, $1F, 	$00, $0A, $00, $0A
(1)   31/   1801A :                     ;	$00, $00, $00, $0A, 	$FF, $FF, $FF, $FF, 	$55, $81, $33, $81
(1)   32/   1801A : (MACRO)              	smpsVcAlgorithm     $04
(1)   32/   1801A : =$4                  vcAlgorithm set $04
(1)   33/   1801A : (MACRO)              	smpsVcFeedback      $01
(1)   33/   1801A : =$1                  vcFeedback set $01
(1)   34/   1801A : (MACRO)              	smpsVcUnusedBits    $00
(1)   34/   1801A : =$0                  vcUnusedBits set $00
(1)   34/   1801A : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   34/   1801A :                                     set vcD1R1Unk,<<5
(1)   34/   1801A :                                     set vcD1R2Unk,<<5
(1)   34/   1801A :                                     set vcD1R3Unk,<<5
(1)   34/   1801A :                                     set vcD1R4Unk,<<5
(1)   34/   1801A : =>TRUE                       else
(1)   34/   1801A : =$0                                  set vcD1R1Unk,0
(1)   34/   1801A : =$0                                  set vcD1R2Unk,0
(1)   34/   1801A : =$0                                  set vcD1R3Unk,0
(1)   34/   1801A : =$0                                  set vcD1R4Unk,0
(1)   34/   1801A : [34]                         endif
(1)   35/   1801A : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   35/   1801A : =$0                          set vcDT1,$00
(1)   35/   1801A : =$0                          set vcDT2,$00
(1)   35/   1801A : =$0                          set vcDT3,$00
(1)   35/   1801A : =$0                          set vcDT4,$00
(1)   36/   1801A : (MACRO)              	smpsVcCoarseFreq    $08, $08, $08, $08
(1)   36/   1801A : =$8                          set vcCF1,$08
(1)   36/   1801A : =$8                          set vcCF2,$08
(1)   36/   1801A : =$8                          set vcCF3,$08
(1)   36/   1801A : =$8                          set vcCF4,$08
(1)   37/   1801A : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   37/   1801A : =$0                          set vcRS1,$00
(1)   37/   1801A : =$0                          set vcRS2,$00
(1)   37/   1801A : =$0                          set vcRS3,$00
(1)   37/   1801A : =$0                          set vcRS4,$00
(1)   38/   1801A : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   38/   1801A : =$1F                         set vcAR1,$1F
(1)   38/   1801A : =$1F                         set vcAR2,$1F
(1)   38/   1801A : =$1F                         set vcAR3,$1F
(1)   38/   1801A : =$1F                         set vcAR4,$1F
(1)   39/   1801A : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   39/   1801A : =>FALSE                      if SourceSMPS2ASM==0
(1)   39/   1801A :                                     set vcAM1,$00<<5
(1)   39/   1801A :                                     set vcAM2,$00<<5
(1)   39/   1801A :                                     set vcAM3,$00<<5
(1)   39/   1801A :                                     set vcAM4,$00<<5
(1)   39/   1801A : =>TRUE                       else
(1)   39/   1801A : =$0                                  set vcAM1,$00<<7
(1)   39/   1801A : =$0                                  set vcAM2,$00<<7
(1)   39/   1801A : =$0                                  set vcAM3,$00<<7
(1)   39/   1801A : =$0                                  set vcAM4,$00<<7
(1)   39/   1801A : [39]                         endif
(1)   40/   1801A : (MACRO)              	smpsVcDecayRate1    $0A, $00, $0A, $00
(1)   40/   1801A : =$A                          set vcD1R1,$0A
(1)   40/   1801A : =$0                          set vcD1R2,$00
(1)   40/   1801A : =$A                          set vcD1R3,$0A
(1)   40/   1801A : =$0                          set vcD1R4,$00
(1)   41/   1801A : (MACRO)              	smpsVcDecayRate2    $0A, $00, $00, $00
(1)   41/   1801A : =$A                          set vcD2R1,$0A
(1)   41/   1801A : =$0                          set vcD2R2,$00
(1)   41/   1801A : =$0                          set vcD2R3,$00
(1)   41/   1801A : =$0                          set vcD2R4,$00
(1)   42/   1801A : (MACRO)              	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   42/   1801A : =$F                          set vcDL1,$0F
(1)   42/   1801A : =$F                          set vcDL2,$0F
(1)   42/   1801A : =$F                          set vcDL3,$0F
(1)   42/   1801A : =$F                          set vcDL4,$0F
(1)   43/   1801A : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   43/   1801A : =$F                          set vcRR1,$0F
(1)   43/   1801A : =$F                          set vcRR2,$0F
(1)   43/   1801A : =$F                          set vcRR3,$0F
(1)   43/   1801A : =$F                          set vcRR4,$0F
(1)   44/   1801A : (MACRO)              	smpsVcTotalLevel    $81, $33, $81, $55
(1)   44/   1801A : =$81                         set vcTL1,$81
(1)   44/   1801A : =$33                         set vcTL2,$33
(1)   44/   1801A : =$81                         set vcTL3,$81
(1)   44/   1801A : =$55                         set vcTL4,$55
(1)   44/   1801A : 0C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   44/   1801B :                     ;   0     1     2     3     4     5     6     7
(1)   44/   1801B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   44/   1801B : =>FALSE                      if SourceSMPS2ASM==0
(1)   44/   1801B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   44/   1801B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   44/   1801B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   44/   1801B :                                     set vcTLMask1,$80
(1)   44/   1801B : =>TRUE                       else
(1)   44/   1801B : =$0                                  set vcTLMask4,0
(1)   44/   1801B : =$0                                  set vcTLMask3,0
(1)   44/   1801B : =$0                                  set vcTLMask2,0
(1)   44/   1801B : =$0                                  set vcTLMask1,0
(1)   44/   1801B : [44]                         endif
(1)   44/   1801B :                     
(1)   44/   1801B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   44/   1801B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   44/   1801B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   44/   1801B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   44/   1801B :                                     set vcTLMask1,$80
(1)   44/   1801B :                                     set vcTL1,vcTL1&$7F
(1)   44/   1801B :                                     set vcTL2,vcTL2&$7F
(1)   44/   1801B :                                     set vcTL3,vcTL3&$7F
(1)   44/   1801B :                                     set vcTL4,vcTL4&$7F
(1)   44/   1801B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   44/   1801B :                                     if MOMPASS>1
(1)   44/   1801B :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   44/   1801B : [44]                                 endif
(1)   44/   1801B : [44]                         endif
(1)   44/   1801B :                     
(1)   44/   1801B : =>FALSE                      if SonicDriverVer==2
(1)   44/   1801B :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   44/   1801B :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   44/   1801B :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   44/   1801B :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   44/   1801B :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   44/   1801B :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   44/   1801B : =>TRUE                       else
(1)   44/   1801B : 0808 0808                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   44/   1801F : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   44/   18023 : 000A 000A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   44/   18027 : 0000 000A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   44/   1802B : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   44/   1802F : 5581 3381                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   44/   18033 : [44]                         endif
(1)   45/   18033 :                     
(1)   46/   18033 :                     
   18859/   18033 :                     SoundA1:	include	"Sound/SFX/SndA1 - Cash Register.asm" ; Cash Machine SFX (Same as Sonic 1 SFX C5)
(1)    1/   18033 :                     Snd01_Cash_Register_Header:
(1)    2/   18033 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   18033 :                     
(1)    2/   18033 : =$3                  SourceDriver set 3
(1)    2/   18033 :                     
(1)    2/   18033 : =>TRUE                       if ("1"<>"")
(1)    2/   18033 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   18033 : =>FALSE                      else
(1)    2/   18033 :                                     set SourceSMPS2ASM,0
(1)    2/   18033 : [2]                          endif
(1)    2/   18033 :                     
(1)    2/   18033 : =$18033              songStart set *
(1)    2/   18033 :                     
(1)    2/   18033 : =>TRUE                       if MOMPASS>1
(1)    2/   18033 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   18033 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   18033 : [2]                                  endif
(1)    2/   18033 : [2]                          endif
(1)    2/   18033 :                     
(1)    3/   18033 : =>TRUE               	if ~~fixBugs
(1)    4/   18033 : (MACRO)              	smpsHeaderVoice     Snd01_Cash_Register_Voices+$4000
(1)    4/   18033 : =>FALSE                      if songStart<>*
(1)    4/   18033 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   18033 : [4]                          endif
(1)    4/   18033 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   18033 : 68C0                                dc.w    z80_ptr(Snd01_Cash_Register_Voices+$4000)
(1)    4/   18035 : =>FALSE                      else
(1)    4/   18035 :                                     if MOMPASS>1
(1)    4/   18035 :                                             if Snd01_Cash_Register_Voices+$4000<songStart
(1)    4/   18035 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   18035 : [4]                                          endif
(1)    4/   18035 : [4]                                  endif
(1)    4/   18035 :                                     dc.w    Snd01_Cash_Register_Voices+$4000-songStart
(1)    4/   18035 : [4]                          endif
(1)    5/   18035 : =>FALSE              	else
(1)    6/   18035 :                     	smpsHeaderVoice     Snd01_Cash_Register_Voices
(1)    7/   18035 : [3]                  	endif
(1)    8/   18035 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   18035 : 01                          dc.b    $01
(1)    9/   18036 : (MACRO)              	smpsHeaderChanSFX   $03
(1)    9/   18036 : 03                          dc.b    $03
(1)   10/   18037 :                     
(1)   11/   18037 : =>TRUE               	if ~~fixBugs
(1)   12/   18037 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd01_Cash_Register_FM5+$4000,	$00, $00
(1)   12/   18037 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18037 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18037 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18037 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18037 : [12]                         endif
(1)   12/   18037 : 8005                        dc.b    $80,cFM5
(1)   12/   18039 :  (MACRO-2)                   CheckedChannelPointer Snd01_Cash_Register_FM5+$4000
(1)   12/   18039 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   18039 : 49C0                                dc.w    z80_ptr(Snd01_Cash_Register_FM5+$4000)
(1)   12/   1803B : =>FALSE                      else
(1)   12/   1803B :                                     if MOMPASS>1
(1)   12/   1803B :                                             if Snd01_Cash_Register_FM5+$4000<songStart
(1)   12/   1803B :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   1803B : [12]                                         endif
(1)   12/   1803B : [12]                                 endif
(1)   12/   1803B :                                     dc.w    Snd01_Cash_Register_FM5+$4000-songStart
(1)   12/   1803B : [12]                         endif
(1)   12/   1803B : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   1803B :                                     PSGPitchConvert $00
(1)   12/   1803B : =>TRUE                       else
(1)   12/   1803B : 00                                  dc.b    $00
(1)   12/   1803C : [12]                         endif
(1)   12/   1803C : 00                          dc.b    $00
(1)   13/   1803D : (MACRO)              	smpsHeaderSFXChannel cFM4, Snd01_Cash_Register_FM4+$4000,	$00, $00
(1)   13/   1803D : =>FALSE                      if (SonicDriverVer>=3)&&(cFM4==cNoise)
(1)   13/   1803D :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   13/   1803D : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM4==cFM6)
(1)   13/   1803D :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   13/   1803D : [13]                         endif
(1)   13/   1803D : 8004                        dc.b    $80,cFM4
(1)   13/   1803F :  (MACRO-2)                   CheckedChannelPointer Snd01_Cash_Register_FM4+$4000
(1)   13/   1803F : =>TRUE                       if SonicDriverVer<>1
(1)   13/   1803F : 52C0                                dc.w    z80_ptr(Snd01_Cash_Register_FM4+$4000)
(1)   13/   18041 : =>FALSE                      else
(1)   13/   18041 :                                     if MOMPASS>1
(1)   13/   18041 :                                             if Snd01_Cash_Register_FM4+$4000<songStart
(1)   13/   18041 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   18041 : [13]                                         endif
(1)   13/   18041 : [13]                                 endif
(1)   13/   18041 :                                     dc.w    Snd01_Cash_Register_FM4+$4000-songStart
(1)   13/   18041 : [13]                         endif
(1)   13/   18041 : =>FALSE                      if (cFM4&$80)<>0
(1)   13/   18041 :                                     PSGPitchConvert $00
(1)   13/   18041 : =>TRUE                       else
(1)   13/   18041 : 00                                  dc.b    $00
(1)   13/   18042 : [13]                         endif
(1)   13/   18042 : 00                          dc.b    $00
(1)   14/   18043 : (MACRO)              	smpsHeaderSFXChannel cPSG3, Snd01_Cash_Register_PSG3+$4000,	$00, $00
(1)   14/   18043 : =>FALSE                      if (SonicDriverVer>=3)&&(cPSG3==cNoise)
(1)   14/   18043 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   14/   18043 : =>FALSE                      elseif (SonicDriverVer<3)&&(cPSG3==cFM6)
(1)   14/   18043 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   14/   18043 : [14]                         endif
(1)   14/   18043 : 80C0                        dc.b    $80,cPSG3
(1)   14/   18045 :  (MACRO-2)                   CheckedChannelPointer Snd01_Cash_Register_PSG3+$4000
(1)   14/   18045 : =>TRUE                       if SonicDriverVer<>1
(1)   14/   18045 : 59C0                                dc.w    z80_ptr(Snd01_Cash_Register_PSG3+$4000)
(1)   14/   18047 : =>FALSE                      else
(1)   14/   18047 :                                     if MOMPASS>1
(1)   14/   18047 :                                             if Snd01_Cash_Register_PSG3+$4000<songStart
(1)   14/   18047 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   14/   18047 : [14]                                         endif
(1)   14/   18047 : [14]                                 endif
(1)   14/   18047 :                                     dc.w    Snd01_Cash_Register_PSG3+$4000-songStart
(1)   14/   18047 : [14]                         endif
(1)   14/   18047 : =>TRUE                       if (cPSG3&$80)<>0
(1)   14/   18047 :  (MACRO-2)                           PSGPitchConvert $00
(1)   14/   18047 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   14/   18047 :                                     dc.b    ($00+psgdelta)&$FF
(1)   14/   18047 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   14/   18047 :                                     dc.b    ($00-psgdelta)&$FF
(1)   14/   18047 : =>TRUE                       else
(1)   14/   18047 : 00                                  dc.b    $00
(1)   14/   18048 : [14]                         endif
(1)   14/   18048 : =>FALSE                      else
(1)   14/   18048 :                                     dc.b    $00
(1)   14/   18048 : [14]                         endif
(1)   14/   18048 : 00                          dc.b    $00
(1)   15/   18049 : =>FALSE              	else
(1)   16/   18049 :                     	smpsHeaderSFXChannel cFM5, Snd01_Cash_Register_FM5,	$00, $00
(1)   17/   18049 :                     	smpsHeaderSFXChannel cFM4, Snd01_Cash_Register_FM4,	$00, $00
(1)   18/   18049 :                     	smpsHeaderSFXChannel cPSG3, Snd01_Cash_Register_PSG3,	$00, $00
(1)   19/   18049 : [11]                 	endif
(1)   20/   18049 :                     
(1)   21/   18049 :                     ; FM5 Data
(1)   22/   18049 :                     Snd01_Cash_Register_FM5:
(1)   23/   18049 : (MACRO)              	smpsSetvoice        $00
(1)   23/   18049 :  (MACRO-2)                   smpsFMvoice $00
(1)   23/   18049 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   23/   18049 :                                     dc.b    $EF,$00|$80,+$81
(1)   23/   18049 : =>TRUE                       else
(1)   23/   18049 : EF00                                dc.b    $EF,$00
(1)   23/   1804B : [23]                         endif
(1)   24/   1804B : 8A08 8002 8A08      	dc.b	nA0, $08, nRst, $02, nA0, $08
(1)   25/   18051 : (MACRO)              	smpsStop
(1)   25/   18051 : F2                          dc.b    $F2
(1)   26/   18052 :                     
(1)   27/   18052 :                     ; FM4 Data
(1)   28/   18052 :                     Snd01_Cash_Register_FM4:
(1)   29/   18052 : (MACRO)              	smpsSetvoice        $01
(1)   29/   18052 :  (MACRO-2)                   smpsFMvoice $01
(1)   29/   18052 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   29/   18052 :                                     dc.b    $EF,$01|$80,+$81
(1)   29/   18052 : =>TRUE                       else
(1)   29/   18052 : EF01                                dc.b    $EF,$01
(1)   29/   18054 : [29]                         endif
(1)   30/   18054 : 8012 C655           	dc.b	nRst, $12, nA5, $55
(1)   31/   18058 : (MACRO)              	smpsStop
(1)   31/   18058 : F2                          dc.b    $F2
(1)   32/   18059 :                     
(1)   33/   18059 :                     ; PSG3 Data
(1)   34/   18059 :                     Snd01_Cash_Register_PSG3:
(1)   35/   18059 : (MACRO)              	smpsPSGvoice        sTone_02
(1)   35/   18059 : F502                        dc.b    $F5,sTone_02
(1)   36/   1805B : (MACRO)              	smpsPSGform         $E7
(1)   36/   1805B : F3E7                        dc.b    $F3,$E7
(1)   37/   1805D : 8002 C205 C404      	dc.b	nRst, $02, nF5, $05, nG5, $04, nF5, $05, nG5, $04
            18063 : C205 C404          
(1)   38/   18067 : (MACRO)              	smpsStop
(1)   38/   18067 : F2                          dc.b    $F2
(1)   39/   18068 :                     
(1)   40/   18068 :                     Snd01_Cash_Register_Voices:
(1)   41/   18068 :                     ;	Voice $00
(1)   42/   18068 :                     ;	$3B
(1)   43/   18068 :                     ;	$03, $02, $02, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
(1)   44/   18068 :                     ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
(1)   45/   18068 : (MACRO)              	smpsVcAlgorithm     $03
(1)   45/   18068 : =$3                  vcAlgorithm set $03
(1)   46/   18068 : (MACRO)              	smpsVcFeedback      $07
(1)   46/   18068 : =$7                  vcFeedback set $07
(1)   47/   18068 : (MACRO)              	smpsVcUnusedBits    $00
(1)   47/   18068 : =$0                  vcUnusedBits set $00
(1)   47/   18068 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   47/   18068 :                                     set vcD1R1Unk,<<5
(1)   47/   18068 :                                     set vcD1R2Unk,<<5
(1)   47/   18068 :                                     set vcD1R3Unk,<<5
(1)   47/   18068 :                                     set vcD1R4Unk,<<5
(1)   47/   18068 : =>TRUE                       else
(1)   47/   18068 : =$0                                  set vcD1R1Unk,0
(1)   47/   18068 : =$0                                  set vcD1R2Unk,0
(1)   47/   18068 : =$0                                  set vcD1R3Unk,0
(1)   47/   18068 : =$0                                  set vcD1R4Unk,0
(1)   47/   18068 : [47]                         endif
(1)   48/   18068 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   48/   18068 : =$0                          set vcDT1,$00
(1)   48/   18068 : =$0                          set vcDT2,$00
(1)   48/   18068 : =$0                          set vcDT3,$00
(1)   48/   18068 : =$0                          set vcDT4,$00
(1)   49/   18068 : (MACRO)              	smpsVcCoarseFreq    $06, $02, $02, $03
(1)   49/   18068 : =$6                          set vcCF1,$06
(1)   49/   18068 : =$2                          set vcCF2,$02
(1)   49/   18068 : =$2                          set vcCF3,$02
(1)   49/   18068 : =$3                          set vcCF4,$03
(1)   50/   18068 : (MACRO)              	smpsVcRateScale     $02, $00, $00, $00
(1)   50/   18068 : =$2                          set vcRS1,$02
(1)   50/   18068 : =$0                          set vcRS2,$00
(1)   50/   18068 : =$0                          set vcRS3,$00
(1)   50/   18068 : =$0                          set vcRS4,$00
(1)   51/   18068 : (MACRO)              	smpsVcAttackRate    $16, $1A, $1A, $18
(1)   51/   18068 : =$16                         set vcAR1,$16
(1)   51/   18068 : =$1A                         set vcAR2,$1A
(1)   51/   18068 : =$1A                         set vcAR3,$1A
(1)   51/   18068 : =$18                         set vcAR4,$18
(1)   52/   18068 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   52/   18068 : =>FALSE                      if SourceSMPS2ASM==0
(1)   52/   18068 :                                     set vcAM1,$00<<5
(1)   52/   18068 :                                     set vcAM2,$00<<5
(1)   52/   18068 :                                     set vcAM3,$00<<5
(1)   52/   18068 :                                     set vcAM4,$00<<5
(1)   52/   18068 : =>TRUE                       else
(1)   52/   18068 : =$0                                  set vcAM1,$00<<7
(1)   52/   18068 : =$0                                  set vcAM2,$00<<7
(1)   52/   18068 : =$0                                  set vcAM3,$00<<7
(1)   52/   18068 : =$0                                  set vcAM4,$00<<7
(1)   52/   18068 : [52]                         endif
(1)   53/   18068 : (MACRO)              	smpsVcDecayRate1    $10, $0A, $0E, $17
(1)   53/   18068 : =$10                         set vcD1R1,$10
(1)   53/   18068 : =$A                          set vcD1R2,$0A
(1)   53/   18068 : =$E                          set vcD1R3,$0E
(1)   53/   18068 : =$17                         set vcD1R4,$17
(1)   54/   18068 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   54/   18068 : =$0                          set vcD2R1,$00
(1)   54/   18068 : =$0                          set vcD2R2,$00
(1)   54/   18068 : =$0                          set vcD2R3,$00
(1)   54/   18068 : =$0                          set vcD2R4,$00
(1)   55/   18068 : (MACRO)              	smpsVcDecayLevel    $0F, $0F, $0F, $0F
(1)   55/   18068 : =$F                          set vcDL1,$0F
(1)   55/   18068 : =$F                          set vcDL2,$0F
(1)   55/   18068 : =$F                          set vcDL3,$0F
(1)   55/   18068 : =$F                          set vcDL4,$0F
(1)   56/   18068 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   56/   18068 : =$F                          set vcRR1,$0F
(1)   56/   18068 : =$F                          set vcRR2,$0F
(1)   56/   18068 : =$F                          set vcRR3,$0F
(1)   56/   18068 : =$F                          set vcRR4,$0F
(1)   57/   18068 : (MACRO)              	smpsVcTotalLevel    $80, $39, $28, $00
(1)   57/   18068 : =$80                         set vcTL1,$80
(1)   57/   18068 : =$39                         set vcTL2,$39
(1)   57/   18068 : =$28                         set vcTL3,$28
(1)   57/   18068 : =$0                          set vcTL4,$00
(1)   57/   18068 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   57/   18069 :                     ;   0     1     2     3     4     5     6     7
(1)   57/   18069 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   57/   18069 : =>FALSE                      if SourceSMPS2ASM==0
(1)   57/   18069 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   57/   18069 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   57/   18069 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   57/   18069 :                                     set vcTLMask1,$80
(1)   57/   18069 : =>TRUE                       else
(1)   57/   18069 : =$0                                  set vcTLMask4,0
(1)   57/   18069 : =$0                                  set vcTLMask3,0
(1)   57/   18069 : =$0                                  set vcTLMask2,0
(1)   57/   18069 : =$0                                  set vcTLMask1,0
(1)   57/   18069 : [57]                         endif
(1)   57/   18069 :                     
(1)   57/   18069 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   57/   18069 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   57/   18069 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   57/   18069 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   57/   18069 :                                     set vcTLMask1,$80
(1)   57/   18069 :                                     set vcTL1,vcTL1&$7F
(1)   57/   18069 :                                     set vcTL2,vcTL2&$7F
(1)   57/   18069 :                                     set vcTL3,vcTL3&$7F
(1)   57/   18069 :                                     set vcTL4,vcTL4&$7F
(1)   57/   18069 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   57/   18069 :                                     if MOMPASS>1
(1)   57/   18069 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   57/   18069 : [57]                                 endif
(1)   57/   18069 : [57]                         endif
(1)   57/   18069 :                     
(1)   57/   18069 : =>FALSE                      if SonicDriverVer==2
(1)   57/   18069 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   57/   18069 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   57/   18069 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   57/   18069 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   57/   18069 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   57/   18069 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   57/   18069 : =>TRUE                       else
(1)   57/   18069 : 0302 0206                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   57/   1806D : 181A 1A96                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   57/   18071 : 170E 0A10                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   57/   18075 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   57/   18079 : FFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   57/   1807D : 0028 3980                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   57/   18081 : [57]                         endif
(1)   58/   18081 :                     
(1)   59/   18081 :                     ;	Voice $01
(1)   60/   18081 :                     ;	$04
(1)   61/   18081 :                     ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)   62/   18081 :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
(1)   63/   18081 : (MACRO)              	smpsVcAlgorithm     $04
(1)   63/   18081 : =$4                  vcAlgorithm set $04
(1)   64/   18081 : (MACRO)              	smpsVcFeedback      $00
(1)   64/   18081 : =$0                  vcFeedback set $00
(1)   65/   18081 : (MACRO)              	smpsVcUnusedBits    $00
(1)   65/   18081 : =$0                  vcUnusedBits set $00
(1)   65/   18081 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   65/   18081 :                                     set vcD1R1Unk,<<5
(1)   65/   18081 :                                     set vcD1R2Unk,<<5
(1)   65/   18081 :                                     set vcD1R3Unk,<<5
(1)   65/   18081 :                                     set vcD1R4Unk,<<5
(1)   65/   18081 : =>TRUE                       else
(1)   65/   18081 : =$0                                  set vcD1R1Unk,0
(1)   65/   18081 : =$0                                  set vcD1R2Unk,0
(1)   65/   18081 : =$0                                  set vcD1R3Unk,0
(1)   65/   18081 : =$0                                  set vcD1R4Unk,0
(1)   65/   18081 : [65]                         endif
(1)   66/   18081 : (MACRO)              	smpsVcDetune        $04, $07, $07, $03
(1)   66/   18081 : =$4                          set vcDT1,$04
(1)   66/   18081 : =$7                          set vcDT2,$07
(1)   66/   18081 : =$7                          set vcDT3,$07
(1)   66/   18081 : =$3                          set vcDT4,$03
(1)   67/   18081 : (MACRO)              	smpsVcCoarseFreq    $09, $07, $02, $07
(1)   67/   18081 : =$9                          set vcCF1,$09
(1)   67/   18081 : =$7                          set vcCF2,$07
(1)   67/   18081 : =$2                          set vcCF3,$02
(1)   67/   18081 : =$7                          set vcCF4,$07
(1)   68/   18081 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   68/   18081 : =$0                          set vcRS1,$00
(1)   68/   18081 : =$0                          set vcRS2,$00
(1)   68/   18081 : =$0                          set vcRS3,$00
(1)   68/   18081 : =$0                          set vcRS4,$00
(1)   69/   18081 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   69/   18081 : =$1F                         set vcAR1,$1F
(1)   69/   18081 : =$1F                         set vcAR2,$1F
(1)   69/   18081 : =$1F                         set vcAR3,$1F
(1)   69/   18081 : =$1F                         set vcAR4,$1F
(1)   70/   18081 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   70/   18081 : =>FALSE                      if SourceSMPS2ASM==0
(1)   70/   18081 :                                     set vcAM1,$00<<5
(1)   70/   18081 :                                     set vcAM2,$00<<5
(1)   70/   18081 :                                     set vcAM3,$00<<5
(1)   70/   18081 :                                     set vcAM4,$00<<5
(1)   70/   18081 : =>TRUE                       else
(1)   70/   18081 : =$0                                  set vcAM1,$00<<7
(1)   70/   18081 : =$0                                  set vcAM2,$00<<7
(1)   70/   18081 : =$0                                  set vcAM3,$00<<7
(1)   70/   18081 : =$0                                  set vcAM4,$00<<7
(1)   70/   18081 : [70]                         endif
(1)   71/   18081 : (MACRO)              	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)   71/   18081 : =$D                          set vcD1R1,$0D
(1)   71/   18081 : =$7                          set vcD1R2,$07
(1)   71/   18081 : =$A                          set vcD1R3,$0A
(1)   71/   18081 : =$7                          set vcD1R4,$07
(1)   72/   18081 : (MACRO)              	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)   72/   18081 : =$B                          set vcD2R1,$0B
(1)   72/   18081 : =$0                          set vcD2R2,$00
(1)   72/   18081 : =$B                          set vcD2R3,$0B
(1)   72/   18081 : =$0                          set vcD2R4,$00
(1)   73/   18081 : (MACRO)              	smpsVcDecayLevel    $00, $01, $00, $01
(1)   73/   18081 : =$0                          set vcDL1,$00
(1)   73/   18081 : =$1                          set vcDL2,$01
(1)   73/   18081 : =$0                          set vcDL3,$00
(1)   73/   18081 : =$1                          set vcDL4,$01
(1)   74/   18081 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   74/   18081 : =$F                          set vcRR1,$0F
(1)   74/   18081 : =$F                          set vcRR2,$0F
(1)   74/   18081 : =$F                          set vcRR3,$0F
(1)   74/   18081 : =$F                          set vcRR4,$0F
(1)   75/   18081 : (MACRO)              	smpsVcTotalLevel    $80, $23, $80, $23
(1)   75/   18081 : =$80                         set vcTL1,$80
(1)   75/   18081 : =$23                         set vcTL2,$23
(1)   75/   18081 : =$80                         set vcTL3,$80
(1)   75/   18081 : =$23                         set vcTL4,$23
(1)   75/   18081 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   75/   18082 :                     ;   0     1     2     3     4     5     6     7
(1)   75/   18082 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   75/   18082 : =>FALSE                      if SourceSMPS2ASM==0
(1)   75/   18082 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   75/   18082 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   75/   18082 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   75/   18082 :                                     set vcTLMask1,$80
(1)   75/   18082 : =>TRUE                       else
(1)   75/   18082 : =$0                                  set vcTLMask4,0
(1)   75/   18082 : =$0                                  set vcTLMask3,0
(1)   75/   18082 : =$0                                  set vcTLMask2,0
(1)   75/   18082 : =$0                                  set vcTLMask1,0
(1)   75/   18082 : [75]                         endif
(1)   75/   18082 :                     
(1)   75/   18082 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   75/   18082 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   75/   18082 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   75/   18082 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   75/   18082 :                                     set vcTLMask1,$80
(1)   75/   18082 :                                     set vcTL1,vcTL1&$7F
(1)   75/   18082 :                                     set vcTL2,vcTL2&$7F
(1)   75/   18082 :                                     set vcTL3,vcTL3&$7F
(1)   75/   18082 :                                     set vcTL4,vcTL4&$7F
(1)   75/   18082 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   75/   18082 :                                     if MOMPASS>1
(1)   75/   18082 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   75/   18082 : [75]                                 endif
(1)   75/   18082 : [75]                         endif
(1)   75/   18082 :                     
(1)   75/   18082 : =>FALSE                      if SonicDriverVer==2
(1)   75/   18082 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   75/   18082 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   75/   18082 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   75/   18082 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   75/   18082 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   75/   18082 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   75/   18082 : =>TRUE                       else
(1)   75/   18082 : 3772 7749                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   75/   18086 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   75/   1808A : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   75/   1808E : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   75/   18092 : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   75/   18096 : 2380 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   75/   1809A : [75]                         endif
(1)   76/   1809A :                     
(1)   77/   1809A :                     
   18860/   1809A :                     SoundA2:	include	"Sound/SFX/SndA2.asm"		; strange noise (it has modulation of "01 01 28 00", which the "00" makes the modulation do nothing) (this MAY be a "get hit by spikes" SFX unfinished)
(1)    1/   1809A :                     Snd02_Header:
(1)    2/   1809A : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   1809A :                     
(1)    2/   1809A : =$3                  SourceDriver set 3
(1)    2/   1809A :                     
(1)    2/   1809A : =>TRUE                       if ("1"<>"")
(1)    2/   1809A : =$1                                  set SourceSMPS2ASM,1
(1)    2/   1809A : =>FALSE                      else
(1)    2/   1809A :                                     set SourceSMPS2ASM,0
(1)    2/   1809A : [2]                          endif
(1)    2/   1809A :                     
(1)    2/   1809A : =$1809A              songStart set *
(1)    2/   1809A :                     
(1)    2/   1809A : =>TRUE                       if MOMPASS>1
(1)    2/   1809A : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   1809A :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   1809A : [2]                                  endif
(1)    2/   1809A : [2]                          endif
(1)    2/   1809A :                     
(1)    3/   1809A : =>TRUE               	if ~~fixBugs
(1)    4/   1809A : (MACRO)              	smpsHeaderVoice     Snd02_Voices+$4000
(1)    4/   1809A : =>FALSE                      if songStart<>*
(1)    4/   1809A :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   1809A : [4]                          endif
(1)    4/   1809A : =>TRUE                       if SonicDriverVer<>1
(1)    4/   1809A : AEC0                                dc.w    z80_ptr(Snd02_Voices+$4000)
(1)    4/   1809C : =>FALSE                      else
(1)    4/   1809C :                                     if MOMPASS>1
(1)    4/   1809C :                                             if Snd02_Voices+$4000<songStart
(1)    4/   1809C :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   1809C : [4]                                          endif
(1)    4/   1809C : [4]                                  endif
(1)    4/   1809C :                                     dc.w    Snd02_Voices+$4000-songStart
(1)    4/   1809C : [4]                          endif
(1)    5/   1809C : =>FALSE              	else
(1)    6/   1809C :                     	smpsHeaderVoice     Snd02_Voices
(1)    7/   1809C : [3]                  	endif
(1)    8/   1809C : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   1809C : 01                          dc.b    $01
(1)    9/   1809D : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   1809D : 01                          dc.b    $01
(1)   10/   1809E :                     
(1)   11/   1809E : =>TRUE               	if ~~fixBugs
(1)   12/   1809E : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd02_FM5+$4000,	$00, $00
(1)   12/   1809E : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   1809E :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   1809E : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   1809E :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   1809E : [12]                         endif
(1)   12/   1809E : 8005                        dc.b    $80,cFM5
(1)   12/   180A0 :  (MACRO-2)                   CheckedChannelPointer Snd02_FM5+$4000
(1)   12/   180A0 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   180A0 : A4C0                                dc.w    z80_ptr(Snd02_FM5+$4000)
(1)   12/   180A2 : =>FALSE                      else
(1)   12/   180A2 :                                     if MOMPASS>1
(1)   12/   180A2 :                                             if Snd02_FM5+$4000<songStart
(1)   12/   180A2 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   180A2 : [12]                                         endif
(1)   12/   180A2 : [12]                                 endif
(1)   12/   180A2 :                                     dc.w    Snd02_FM5+$4000-songStart
(1)   12/   180A2 : [12]                         endif
(1)   12/   180A2 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   180A2 :                                     PSGPitchConvert $00
(1)   12/   180A2 : =>TRUE                       else
(1)   12/   180A2 : 00                                  dc.b    $00
(1)   12/   180A3 : [12]                         endif
(1)   12/   180A3 : 00                          dc.b    $00
(1)   13/   180A4 : =>FALSE              	else
(1)   14/   180A4 :                     	smpsHeaderSFXChannel cFM5, Snd02_FM5,	$00, $00
(1)   15/   180A4 : [11]                 	endif
(1)   16/   180A4 :                     
(1)   17/   180A4 :                     ; FM5 Data
(1)   18/   180A4 :                     Snd02_FM5:
(1)   19/   180A4 : (MACRO)              	smpsSetvoice        $00
(1)   19/   180A4 :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   180A4 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   180A4 :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   180A4 : =>TRUE                       else
(1)   19/   180A4 : EF00                                dc.b    $EF,$00
(1)   19/   180A6 : [19]                         endif
(1)   20/   180A6 : (MACRO)              	smpsModSet          $01, $01, $28, $00
(1)   20/   180A6 : F0                          dc.b    $F0
(1)   20/   180A7 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   20/   180A7 :                                     dc.b    $01+1,$01,$28,(($00+1) * $01) & $FF
(1)   20/   180A7 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   20/   180A7 :                                     dc.b    $01-1,$01,$28,conv0To256($00)/conv0To256($01)-1
(1)   20/   180A7 : =>TRUE                       else
(1)   20/   180A7 : 0101 2800                           dc.b    $01,$01,$28,$00
(1)   20/   180AB : [20]                         endif
(1)   20/   180AB :                             ;dc.b   $01,$28,$00
(1)   21/   180AB : 9E1D                	dc.b	nF2, $1D
(1)   22/   180AD : (MACRO)              	smpsStop
(1)   22/   180AD : F2                          dc.b    $F2
(1)   23/   180AE :                     
(1)   24/   180AE :                     Snd02_Voices:
(1)   25/   180AE :                     ;	Voice $00
(1)   26/   180AE :                     ;	$03
(1)   27/   180AE :                     ;	$0A, $0A, $0F, $0F, 	$1F, $1F, $1F, $1F, 	$00, $00, $0C, $00
(1)   28/   180AE :                     ;	$00, $00, $00, $09, 	$FF, $FF, $FF, $0F, 	$21, $10, $10, $80
(1)   29/   180AE : (MACRO)              	smpsVcAlgorithm     $03
(1)   29/   180AE : =$3                  vcAlgorithm set $03
(1)   30/   180AE : (MACRO)              	smpsVcFeedback      $00
(1)   30/   180AE : =$0                  vcFeedback set $00
(1)   31/   180AE : (MACRO)              	smpsVcUnusedBits    $00
(1)   31/   180AE : =$0                  vcUnusedBits set $00
(1)   31/   180AE : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   31/   180AE :                                     set vcD1R1Unk,<<5
(1)   31/   180AE :                                     set vcD1R2Unk,<<5
(1)   31/   180AE :                                     set vcD1R3Unk,<<5
(1)   31/   180AE :                                     set vcD1R4Unk,<<5
(1)   31/   180AE : =>TRUE                       else
(1)   31/   180AE : =$0                                  set vcD1R1Unk,0
(1)   31/   180AE : =$0                                  set vcD1R2Unk,0
(1)   31/   180AE : =$0                                  set vcD1R3Unk,0
(1)   31/   180AE : =$0                                  set vcD1R4Unk,0
(1)   31/   180AE : [31]                         endif
(1)   32/   180AE : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   32/   180AE : =$0                          set vcDT1,$00
(1)   32/   180AE : =$0                          set vcDT2,$00
(1)   32/   180AE : =$0                          set vcDT3,$00
(1)   32/   180AE : =$0                          set vcDT4,$00
(1)   33/   180AE : (MACRO)              	smpsVcCoarseFreq    $0F, $0F, $0A, $0A
(1)   33/   180AE : =$F                          set vcCF1,$0F
(1)   33/   180AE : =$F                          set vcCF2,$0F
(1)   33/   180AE : =$A                          set vcCF3,$0A
(1)   33/   180AE : =$A                          set vcCF4,$0A
(1)   34/   180AE : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   180AE : =$0                          set vcRS1,$00
(1)   34/   180AE : =$0                          set vcRS2,$00
(1)   34/   180AE : =$0                          set vcRS3,$00
(1)   34/   180AE : =$0                          set vcRS4,$00
(1)   35/   180AE : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   180AE : =$1F                         set vcAR1,$1F
(1)   35/   180AE : =$1F                         set vcAR2,$1F
(1)   35/   180AE : =$1F                         set vcAR3,$1F
(1)   35/   180AE : =$1F                         set vcAR4,$1F
(1)   36/   180AE : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   180AE : =>FALSE                      if SourceSMPS2ASM==0
(1)   36/   180AE :                                     set vcAM1,$00<<5
(1)   36/   180AE :                                     set vcAM2,$00<<5
(1)   36/   180AE :                                     set vcAM3,$00<<5
(1)   36/   180AE :                                     set vcAM4,$00<<5
(1)   36/   180AE : =>TRUE                       else
(1)   36/   180AE : =$0                                  set vcAM1,$00<<7
(1)   36/   180AE : =$0                                  set vcAM2,$00<<7
(1)   36/   180AE : =$0                                  set vcAM3,$00<<7
(1)   36/   180AE : =$0                                  set vcAM4,$00<<7
(1)   36/   180AE : [36]                         endif
(1)   37/   180AE : (MACRO)              	smpsVcDecayRate1    $00, $0C, $00, $00
(1)   37/   180AE : =$0                          set vcD1R1,$00
(1)   37/   180AE : =$C                          set vcD1R2,$0C
(1)   37/   180AE : =$0                          set vcD1R3,$00
(1)   37/   180AE : =$0                          set vcD1R4,$00
(1)   38/   180AE : (MACRO)              	smpsVcDecayRate2    $09, $00, $00, $00
(1)   38/   180AE : =$9                          set vcD2R1,$09
(1)   38/   180AE : =$0                          set vcD2R2,$00
(1)   38/   180AE : =$0                          set vcD2R3,$00
(1)   38/   180AE : =$0                          set vcD2R4,$00
(1)   39/   180AE : (MACRO)              	smpsVcDecayLevel    $00, $0F, $0F, $0F
(1)   39/   180AE : =$0                          set vcDL1,$00
(1)   39/   180AE : =$F                          set vcDL2,$0F
(1)   39/   180AE : =$F                          set vcDL3,$0F
(1)   39/   180AE : =$F                          set vcDL4,$0F
(1)   40/   180AE : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   180AE : =$F                          set vcRR1,$0F
(1)   40/   180AE : =$F                          set vcRR2,$0F
(1)   40/   180AE : =$F                          set vcRR3,$0F
(1)   40/   180AE : =$F                          set vcRR4,$0F
(1)   41/   180AE : (MACRO)              	smpsVcTotalLevel    $80, $10, $10, $21
(1)   41/   180AE : =$80                         set vcTL1,$80
(1)   41/   180AE : =$10                         set vcTL2,$10
(1)   41/   180AE : =$10                         set vcTL3,$10
(1)   41/   180AE : =$21                         set vcTL4,$21
(1)   41/   180AE : 03                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   180AF :                     ;   0     1     2     3     4     5     6     7
(1)   41/   180AF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   180AF : =>FALSE                      if SourceSMPS2ASM==0
(1)   41/   180AF :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   41/   180AF :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   41/   180AF :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   41/   180AF :                                     set vcTLMask1,$80
(1)   41/   180AF : =>TRUE                       else
(1)   41/   180AF : =$0                                  set vcTLMask4,0
(1)   41/   180AF : =$0                                  set vcTLMask3,0
(1)   41/   180AF : =$0                                  set vcTLMask2,0
(1)   41/   180AF : =$0                                  set vcTLMask1,0
(1)   41/   180AF : [41]                         endif
(1)   41/   180AF :                     
(1)   41/   180AF : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   41/   180AF :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   41/   180AF :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   41/   180AF :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   41/   180AF :                                     set vcTLMask1,$80
(1)   41/   180AF :                                     set vcTL1,vcTL1&$7F
(1)   41/   180AF :                                     set vcTL2,vcTL2&$7F
(1)   41/   180AF :                                     set vcTL3,vcTL3&$7F
(1)   41/   180AF :                                     set vcTL4,vcTL4&$7F
(1)   41/   180AF : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   41/   180AF :                                     if MOMPASS>1
(1)   41/   180AF :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   41/   180AF : [41]                                 endif
(1)   41/   180AF : [41]                         endif
(1)   41/   180AF :                     
(1)   41/   180AF : =>FALSE                      if SonicDriverVer==2
(1)   41/   180AF :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   41/   180AF :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   41/   180AF :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   180AF :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   41/   180AF :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   41/   180AF :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   41/   180AF : =>TRUE                       else
(1)   41/   180AF : 0A0A 0F0F                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   180B3 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   180B7 : 0000 0C00                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   180BB : 0000 0009                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   180BF : FFFF FF0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   180C3 : 2110 1080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   41/   180C7 : [41]                         endif
(1)   42/   180C7 :                     
(1)   43/   180C7 :                     
   18861/   180C7 :                     SoundA3:	include	"Sound/SFX/SndA3 - Bomb.asm"	; Bomb explode SFX (Same as Sonic 1 SFX C4)
(1)    1/   180C7 :                     Snd03_Bomb_Header:
(1)    2/   180C7 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   180C7 :                     
(1)    2/   180C7 : =$3                  SourceDriver set 3
(1)    2/   180C7 :                     
(1)    2/   180C7 : =>TRUE                       if ("1"<>"")
(1)    2/   180C7 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   180C7 : =>FALSE                      else
(1)    2/   180C7 :                                     set SourceSMPS2ASM,0
(1)    2/   180C7 : [2]                          endif
(1)    2/   180C7 :                     
(1)    2/   180C7 : =$180C7              songStart set *
(1)    2/   180C7 :                     
(1)    2/   180C7 : =>TRUE                       if MOMPASS>1
(1)    2/   180C7 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   180C7 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   180C7 : [2]                                  endif
(1)    2/   180C7 : [2]                          endif
(1)    2/   180C7 :                     
(1)    3/   180C7 : =>TRUE               	if ~~fixBugs
(1)    4/   180C7 : (MACRO)              	smpsHeaderVoice     Snd03_Bomb_Voices+$4000
(1)    4/   180C7 : =>FALSE                      if songStart<>*
(1)    4/   180C7 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   180C7 : [4]                          endif
(1)    4/   180C7 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   180C7 : D6C0                                dc.w    z80_ptr(Snd03_Bomb_Voices+$4000)
(1)    4/   180C9 : =>FALSE                      else
(1)    4/   180C9 :                                     if MOMPASS>1
(1)    4/   180C9 :                                             if Snd03_Bomb_Voices+$4000<songStart
(1)    4/   180C9 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   180C9 : [4]                                          endif
(1)    4/   180C9 : [4]                                  endif
(1)    4/   180C9 :                                     dc.w    Snd03_Bomb_Voices+$4000-songStart
(1)    4/   180C9 : [4]                          endif
(1)    5/   180C9 : =>FALSE              	else
(1)    6/   180C9 :                     	smpsHeaderVoice     Snd03_Bomb_Voices
(1)    7/   180C9 : [3]                  	endif
(1)    8/   180C9 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   180C9 : 01                          dc.b    $01
(1)    9/   180CA : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   180CA : 01                          dc.b    $01
(1)   10/   180CB :                     
(1)   11/   180CB : =>TRUE               	if ~~fixBugs
(1)   12/   180CB : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd03_Bomb_FM5+$4000,	$00, $00
(1)   12/   180CB : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   180CB :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   180CB : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   180CB :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   180CB : [12]                         endif
(1)   12/   180CB : 8005                        dc.b    $80,cFM5
(1)   12/   180CD :  (MACRO-2)                   CheckedChannelPointer Snd03_Bomb_FM5+$4000
(1)   12/   180CD : =>TRUE                       if SonicDriverVer<>1
(1)   12/   180CD : D1C0                                dc.w    z80_ptr(Snd03_Bomb_FM5+$4000)
(1)   12/   180CF : =>FALSE                      else
(1)   12/   180CF :                                     if MOMPASS>1
(1)   12/   180CF :                                             if Snd03_Bomb_FM5+$4000<songStart
(1)   12/   180CF :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   180CF : [12]                                         endif
(1)   12/   180CF : [12]                                 endif
(1)   12/   180CF :                                     dc.w    Snd03_Bomb_FM5+$4000-songStart
(1)   12/   180CF : [12]                         endif
(1)   12/   180CF : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   180CF :                                     PSGPitchConvert $00
(1)   12/   180CF : =>TRUE                       else
(1)   12/   180CF : 00                                  dc.b    $00
(1)   12/   180D0 : [12]                         endif
(1)   12/   180D0 : 00                          dc.b    $00
(1)   13/   180D1 : =>FALSE              	else
(1)   14/   180D1 :                     	smpsHeaderSFXChannel cFM5, Snd03_Bomb_FM5,	$00, $00
(1)   15/   180D1 : [11]                 	endif
(1)   16/   180D1 :                     
(1)   17/   180D1 :                     ; FM5 Data
(1)   18/   180D1 :                     Snd03_Bomb_FM5:
(1)   19/   180D1 : (MACRO)              	smpsSetvoice        $00
(1)   19/   180D1 :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   180D1 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   180D1 :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   180D1 : =>TRUE                       else
(1)   19/   180D1 : EF00                                dc.b    $EF,$00
(1)   19/   180D3 : [19]                         endif
(1)   20/   180D3 : 8A22                	dc.b	nA0, $22
(1)   21/   180D5 : (MACRO)              	smpsStop
(1)   21/   180D5 : F2                          dc.b    $F2
(1)   22/   180D6 :                     
(1)   23/   180D6 :                     Snd03_Bomb_Voices:
(1)   24/   180D6 :                     ;	Voice $00
(1)   25/   180D6 :                     ;	$FA
(1)   26/   180D6 :                     ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $05, $10
(1)   27/   180D6 :                     ;	$0B, $1F, $10, $10, 	$1F, $2F, $4F, $2F, 	$0D, $07, $04, $80
(1)   28/   180D6 : (MACRO)              	smpsVcAlgorithm     $02
(1)   28/   180D6 : =$2                  vcAlgorithm set $02
(1)   29/   180D6 : (MACRO)              	smpsVcFeedback      $07
(1)   29/   180D6 : =$7                  vcFeedback set $07
(1)   30/   180D6 : (MACRO)              	smpsVcUnusedBits    $03
(1)   30/   180D6 : =$3                  vcUnusedBits set $03
(1)   30/   180D6 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   30/   180D6 :                                     set vcD1R1Unk,<<5
(1)   30/   180D6 :                                     set vcD1R2Unk,<<5
(1)   30/   180D6 :                                     set vcD1R3Unk,<<5
(1)   30/   180D6 :                                     set vcD1R4Unk,<<5
(1)   30/   180D6 : =>TRUE                       else
(1)   30/   180D6 : =$0                                  set vcD1R1Unk,0
(1)   30/   180D6 : =$0                                  set vcD1R2Unk,0
(1)   30/   180D6 : =$0                                  set vcD1R3Unk,0
(1)   30/   180D6 : =$0                                  set vcD1R4Unk,0
(1)   30/   180D6 : [30]                         endif
(1)   31/   180D6 : (MACRO)              	smpsVcDetune        $03, $01, $03, $02
(1)   31/   180D6 : =$3                          set vcDT1,$03
(1)   31/   180D6 : =$1                          set vcDT2,$01
(1)   31/   180D6 : =$3                          set vcDT3,$03
(1)   31/   180D6 : =$2                          set vcDT4,$02
(1)   32/   180D6 : (MACRO)              	smpsVcCoarseFreq    $02, $00, $00, $01
(1)   32/   180D6 : =$2                          set vcCF1,$02
(1)   32/   180D6 : =$0                          set vcCF2,$00
(1)   32/   180D6 : =$0                          set vcCF3,$00
(1)   32/   180D6 : =$1                          set vcCF4,$01
(1)   33/   180D6 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   33/   180D6 : =$0                          set vcRS1,$00
(1)   33/   180D6 : =$0                          set vcRS2,$00
(1)   33/   180D6 : =$0                          set vcRS3,$00
(1)   33/   180D6 : =$0                          set vcRS4,$00
(1)   34/   180D6 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   34/   180D6 : =$1F                         set vcAR1,$1F
(1)   34/   180D6 : =$1F                         set vcAR2,$1F
(1)   34/   180D6 : =$1F                         set vcAR3,$1F
(1)   34/   180D6 : =$1F                         set vcAR4,$1F
(1)   35/   180D6 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   35/   180D6 : =>FALSE                      if SourceSMPS2ASM==0
(1)   35/   180D6 :                                     set vcAM1,$00<<5
(1)   35/   180D6 :                                     set vcAM2,$00<<5
(1)   35/   180D6 :                                     set vcAM3,$00<<5
(1)   35/   180D6 :                                     set vcAM4,$00<<5
(1)   35/   180D6 : =>TRUE                       else
(1)   35/   180D6 : =$0                                  set vcAM1,$00<<7
(1)   35/   180D6 : =$0                                  set vcAM2,$00<<7
(1)   35/   180D6 : =$0                                  set vcAM3,$00<<7
(1)   35/   180D6 : =$0                                  set vcAM4,$00<<7
(1)   35/   180D6 : [35]                         endif
(1)   36/   180D6 : (MACRO)              	smpsVcDecayRate1    $10, $05, $18, $05
(1)   36/   180D6 : =$10                         set vcD1R1,$10
(1)   36/   180D6 : =$5                          set vcD1R2,$05
(1)   36/   180D6 : =$18                         set vcD1R3,$18
(1)   36/   180D6 : =$5                          set vcD1R4,$05
(1)   37/   180D6 : (MACRO)              	smpsVcDecayRate2    $10, $10, $1F, $0B
(1)   37/   180D6 : =$10                         set vcD2R1,$10
(1)   37/   180D6 : =$10                         set vcD2R2,$10
(1)   37/   180D6 : =$1F                         set vcD2R3,$1F
(1)   37/   180D6 : =$B                          set vcD2R4,$0B
(1)   38/   180D6 : (MACRO)              	smpsVcDecayLevel    $02, $04, $02, $01
(1)   38/   180D6 : =$2                          set vcDL1,$02
(1)   38/   180D6 : =$4                          set vcDL2,$04
(1)   38/   180D6 : =$2                          set vcDL3,$02
(1)   38/   180D6 : =$1                          set vcDL4,$01
(1)   39/   180D6 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   39/   180D6 : =$F                          set vcRR1,$0F
(1)   39/   180D6 : =$F                          set vcRR2,$0F
(1)   39/   180D6 : =$F                          set vcRR3,$0F
(1)   39/   180D6 : =$F                          set vcRR4,$0F
(1)   40/   180D6 : (MACRO)              	smpsVcTotalLevel    $80, $04, $07, $0D
(1)   40/   180D6 : =$80                         set vcTL1,$80
(1)   40/   180D6 : =$4                          set vcTL2,$04
(1)   40/   180D6 : =$7                          set vcTL3,$07
(1)   40/   180D6 : =$D                          set vcTL4,$0D
(1)   40/   180D6 : FA                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   40/   180D7 :                     ;   0     1     2     3     4     5     6     7
(1)   40/   180D7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   40/   180D7 : =>FALSE                      if SourceSMPS2ASM==0
(1)   40/   180D7 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   40/   180D7 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   40/   180D7 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   40/   180D7 :                                     set vcTLMask1,$80
(1)   40/   180D7 : =>TRUE                       else
(1)   40/   180D7 : =$0                                  set vcTLMask4,0
(1)   40/   180D7 : =$0                                  set vcTLMask3,0
(1)   40/   180D7 : =$0                                  set vcTLMask2,0
(1)   40/   180D7 : =$0                                  set vcTLMask1,0
(1)   40/   180D7 : [40]                         endif
(1)   40/   180D7 :                     
(1)   40/   180D7 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   40/   180D7 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   40/   180D7 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   40/   180D7 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   40/   180D7 :                                     set vcTLMask1,$80
(1)   40/   180D7 :                                     set vcTL1,vcTL1&$7F
(1)   40/   180D7 :                                     set vcTL2,vcTL2&$7F
(1)   40/   180D7 :                                     set vcTL3,vcTL3&$7F
(1)   40/   180D7 :                                     set vcTL4,vcTL4&$7F
(1)   40/   180D7 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   40/   180D7 :                                     if MOMPASS>1
(1)   40/   180D7 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   40/   180D7 : [40]                                 endif
(1)   40/   180D7 : [40]                         endif
(1)   40/   180D7 :                     
(1)   40/   180D7 : =>FALSE                      if SonicDriverVer==2
(1)   40/   180D7 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   40/   180D7 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   40/   180D7 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   40/   180D7 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   40/   180D7 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   40/   180D7 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   40/   180D7 : =>TRUE                       else
(1)   40/   180D7 : 2130 1032                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   40/   180DB : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   40/   180DF : 0518 0510                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   40/   180E3 : 0B1F 1010                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   40/   180E7 : 1F2F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   40/   180EB : 0D07 0480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   40/   180EF : [40]                         endif
(1)   41/   180EF :                     
(1)   42/   180EF :                     
   18862/   180EF :                     SoundA4:	include	"Sound/SFX/SndA4 - Skid.asm"	; Skidding SFX (Same as Sonic 1 SFX A4)
(1)    1/   180EF :                     Snd04_Skid_Header:
(1)    2/   180EF : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   180EF :                     
(1)    2/   180EF : =$3                  SourceDriver set 3
(1)    2/   180EF :                     
(1)    2/   180EF : =>TRUE                       if ("1"<>"")
(1)    2/   180EF : =$1                                  set SourceSMPS2ASM,1
(1)    2/   180EF : =>FALSE                      else
(1)    2/   180EF :                                     set SourceSMPS2ASM,0
(1)    2/   180EF : [2]                          endif
(1)    2/   180EF :                     
(1)    2/   180EF : =$180EF              songStart set *
(1)    2/   180EF :                     
(1)    2/   180EF : =>TRUE                       if MOMPASS>1
(1)    2/   180EF : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   180EF :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   180EF : [2]                                  endif
(1)    2/   180EF : [2]                          endif
(1)    2/   180EF :                     
(1)    3/   180EF : (MACRO)              	smpsHeaderVoiceNull
(1)    3/   180EF : =>FALSE                      if songStart<>*
(1)    3/   180EF :                                     fatal "Missing smpsHeaderStartSong"
(1)    3/   180EF : [3]                          endif
(1)    3/   180EF : 0000                        dc.w    $0000
(1)    4/   180F1 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    4/   180F1 : 01                          dc.b    $01
(1)    5/   180F2 : (MACRO)              	smpsHeaderChanSFX   $02
(1)    5/   180F2 : 02                          dc.b    $02
(1)    6/   180F3 :                     
(1)    7/   180F3 : =>TRUE               	if ~~fixBugs
(1)    8/   180F3 : (MACRO)              	smpsHeaderSFXChannel cPSG2, Snd04_Skid_PSG2+$4000,	$00, $00
(1)    8/   180F3 : =>FALSE                      if (SonicDriverVer>=3)&&(cPSG2==cNoise)
(1)    8/   180F3 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)    8/   180F3 : =>FALSE                      elseif (SonicDriverVer<3)&&(cPSG2==cFM6)
(1)    8/   180F3 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)    8/   180F3 : [8]                          endif
(1)    8/   180F3 : 80A0                        dc.b    $80,cPSG2
(1)    8/   180F5 :  (MACRO-2)                   CheckedChannelPointer Snd04_Skid_PSG2+$4000
(1)    8/   180F5 : =>TRUE                       if SonicDriverVer<>1
(1)    8/   180F5 : FFC0                                dc.w    z80_ptr(Snd04_Skid_PSG2+$4000)
(1)    8/   180F7 : =>FALSE                      else
(1)    8/   180F7 :                                     if MOMPASS>1
(1)    8/   180F7 :                                             if Snd04_Skid_PSG2+$4000<songStart
(1)    8/   180F7 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    8/   180F7 : [8]                                          endif
(1)    8/   180F7 : [8]                                  endif
(1)    8/   180F7 :                                     dc.w    Snd04_Skid_PSG2+$4000-songStart
(1)    8/   180F7 : [8]                          endif
(1)    8/   180F7 : =>TRUE                       if (cPSG2&$80)<>0
(1)    8/   180F7 :  (MACRO-2)                           PSGPitchConvert $00
(1)    8/   180F7 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)    8/   180F7 :                                     dc.b    ($00+psgdelta)&$FF
(1)    8/   180F7 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)    8/   180F7 :                                     dc.b    ($00-psgdelta)&$FF
(1)    8/   180F7 : =>TRUE                       else
(1)    8/   180F7 : 00                                  dc.b    $00
(1)    8/   180F8 : [8]                          endif
(1)    8/   180F8 : =>FALSE                      else
(1)    8/   180F8 :                                     dc.b    $00
(1)    8/   180F8 : [8]                          endif
(1)    8/   180F8 : 00                          dc.b    $00
(1)    9/   180F9 : (MACRO)              	smpsHeaderSFXChannel cPSG3, Snd04_Skid_PSG3+$4000,	$00, $00
(1)    9/   180F9 : =>FALSE                      if (SonicDriverVer>=3)&&(cPSG3==cNoise)
(1)    9/   180F9 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)    9/   180F9 : =>FALSE                      elseif (SonicDriverVer<3)&&(cPSG3==cFM6)
(1)    9/   180F9 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)    9/   180F9 : [9]                          endif
(1)    9/   180F9 : 80C0                        dc.b    $80,cPSG3
(1)    9/   180FB :  (MACRO-2)                   CheckedChannelPointer Snd04_Skid_PSG3+$4000
(1)    9/   180FB : =>TRUE                       if SonicDriverVer<>1
(1)    9/   180FB : 11C1                                dc.w    z80_ptr(Snd04_Skid_PSG3+$4000)
(1)    9/   180FD : =>FALSE                      else
(1)    9/   180FD :                                     if MOMPASS>1
(1)    9/   180FD :                                             if Snd04_Skid_PSG3+$4000<songStart
(1)    9/   180FD :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)    9/   180FD : [9]                                          endif
(1)    9/   180FD : [9]                                  endif
(1)    9/   180FD :                                     dc.w    Snd04_Skid_PSG3+$4000-songStart
(1)    9/   180FD : [9]                          endif
(1)    9/   180FD : =>TRUE                       if (cPSG3&$80)<>0
(1)    9/   180FD :  (MACRO-2)                           PSGPitchConvert $00
(1)    9/   180FD : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)    9/   180FD :                                     dc.b    ($00+psgdelta)&$FF
(1)    9/   180FD : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)    9/   180FD :                                     dc.b    ($00-psgdelta)&$FF
(1)    9/   180FD : =>TRUE                       else
(1)    9/   180FD : 00                                  dc.b    $00
(1)    9/   180FE : [9]                          endif
(1)    9/   180FE : =>FALSE                      else
(1)    9/   180FE :                                     dc.b    $00
(1)    9/   180FE : [9]                          endif
(1)    9/   180FE : 00                          dc.b    $00
(1)   10/   180FF : =>FALSE              	else
(1)   11/   180FF :                     	smpsHeaderSFXChannel cPSG2, Snd04_Skid_PSG2,	$00, $00
(1)   12/   180FF :                     	smpsHeaderSFXChannel cPSG3, Snd04_Skid_PSG3,	$00, $00
(1)   13/   180FF : [7]                  	endif
(1)   14/   180FF :                     
(1)   15/   180FF :                     ; PSG2 Data
(1)   16/   180FF :                     Snd04_Skid_PSG2:
(1)   17/   180FF : (MACRO)              	smpsPSGvoice        $00
(1)   17/   180FF : F500                        dc.b    $F5,$00
(1)   18/   18101 : AF01 80AF 8003      	dc.b	nBb3, $01, nRst, nBb3, nRst, $03
(1)   19/   18107 :                     
(1)   20/   18107 :                     Snd04_Skid_Loop01:
(1)   21/   18107 : AF01 8001           	dc.b	nBb3, $01, nRst, $01
(1)   22/   1810B : =>TRUE               	if ~~fixBugs
(1)   23/   1810B : (MACRO)              	smpsLoop            $00, $0B, Snd04_Skid_Loop01+$4000
(1)   23/   1810B : F7                          dc.b    $F7
(1)   23/   1810C : 000B                        dc.b    $00,$0B
(1)   23/   1810E : =>TRUE                       if SonicDriverVer<>1
(1)   23/   1810E : 07C1                                dc.w    z80_ptr(Snd04_Skid_Loop01+$4000)
(1)   23/   18110 : =>FALSE                      else
(1)   23/   18110 :                                     dc.w    Snd04_Skid_Loop01+$4000-*-1
(1)   23/   18110 : [23]                         endif
(1)   24/   18110 : =>FALSE              	else
(1)   25/   18110 :                     	smpsLoop            $00, $0B, Snd04_Skid_Loop01
(1)   26/   18110 : [22]                 	endif
(1)   27/   18110 : (MACRO)              	smpsStop
(1)   27/   18110 : F2                          dc.b    $F2
(1)   28/   18111 :                     
(1)   29/   18111 :                     ; PSG3 Data
(1)   30/   18111 :                     Snd04_Skid_PSG3:
(1)   31/   18111 : (MACRO)              	smpsPSGvoice        $00
(1)   31/   18111 : F500                        dc.b    $F5,$00
(1)   32/   18113 : 8001 AD80 AD80 03   	dc.b	nRst, $01, nAb3, nRst, nAb3, nRst, $03
(1)   33/   1811A :                     
(1)   34/   1811A :                     Snd04_Skid_Loop00:
(1)   35/   1811A : AD01 8001           	dc.b	nAb3, $01, nRst, $01
(1)   36/   1811E : =>TRUE               	if ~~fixBugs
(1)   37/   1811E : (MACRO)              	smpsLoop            $00, $0B, Snd04_Skid_Loop00+$4000
(1)   37/   1811E : F7                          dc.b    $F7
(1)   37/   1811F : 000B                        dc.b    $00,$0B
(1)   37/   18121 : =>TRUE                       if SonicDriverVer<>1
(1)   37/   18121 : 1AC1                                dc.w    z80_ptr(Snd04_Skid_Loop00+$4000)
(1)   37/   18123 : =>FALSE                      else
(1)   37/   18123 :                                     dc.w    Snd04_Skid_Loop00+$4000-*-1
(1)   37/   18123 : [37]                         endif
(1)   38/   18123 : =>FALSE              	else
(1)   39/   18123 :                     	smpsLoop            $00, $0B, Snd04_Skid_Loop00
(1)   40/   18123 : [36]                 	endif
(1)   41/   18123 : (MACRO)              	smpsStop
(1)   41/   18123 : F2                          dc.b    $F2
(1)   42/   18124 :                     
   18863/   18124 :                     SoundA5:	include	"Sound/SFX/SndA5 - Ring Loss.asm" ; Ring Loss SFX (Same as Sonic 1 SFX C6)
(1)    1/   18124 :                     Snd05_Ring_Loss_Header:
(1)    2/   18124 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   18124 :                     
(1)    2/   18124 : =$3                  SourceDriver set 3
(1)    2/   18124 :                     
(1)    2/   18124 : =>TRUE                       if ("1"<>"")
(1)    2/   18124 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   18124 : =>FALSE                      else
(1)    2/   18124 :                                     set SourceSMPS2ASM,0
(1)    2/   18124 : [2]                          endif
(1)    2/   18124 :                     
(1)    2/   18124 : =$18124              songStart set *
(1)    2/   18124 :                     
(1)    2/   18124 : =>TRUE                       if MOMPASS>1
(1)    2/   18124 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   18124 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   18124 : [2]                                  endif
(1)    2/   18124 : [2]                          endif
(1)    2/   18124 :                     
(1)    3/   18124 : =>TRUE               	if ~~fixBugs
(1)    4/   18124 : (MACRO)              	smpsHeaderVoice     Snd05_Ring_Loss_Voices+$4000
(1)    4/   18124 : =>FALSE                      if songStart<>*
(1)    4/   18124 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   18124 : [4]                          endif
(1)    4/   18124 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   18124 : 4CC1                                dc.w    z80_ptr(Snd05_Ring_Loss_Voices+$4000)
(1)    4/   18126 : =>FALSE                      else
(1)    4/   18126 :                                     if MOMPASS>1
(1)    4/   18126 :                                             if Snd05_Ring_Loss_Voices+$4000<songStart
(1)    4/   18126 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   18126 : [4]                                          endif
(1)    4/   18126 : [4]                                  endif
(1)    4/   18126 :                                     dc.w    Snd05_Ring_Loss_Voices+$4000-songStart
(1)    4/   18126 : [4]                          endif
(1)    5/   18126 : =>FALSE              	else
(1)    6/   18126 :                     	smpsHeaderVoice     Snd05_Ring_Loss_Voices
(1)    7/   18126 : [3]                  	endif
(1)    8/   18126 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   18126 : 01                          dc.b    $01
(1)    9/   18127 : (MACRO)              	smpsHeaderChanSFX   $02
(1)    9/   18127 : 02                          dc.b    $02
(1)   10/   18128 :                     
(1)   11/   18128 : =>TRUE               	if ~~fixBugs
(1)   12/   18128 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd05_Ring_Loss_FM5+$4000,	$00, $05
(1)   12/   18128 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18128 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18128 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18128 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18128 : [12]                         endif
(1)   12/   18128 : 8005                        dc.b    $80,cFM5
(1)   12/   1812A :  (MACRO-2)                   CheckedChannelPointer Snd05_Ring_Loss_FM5+$4000
(1)   12/   1812A : =>TRUE                       if SonicDriverVer<>1
(1)   12/   1812A : 34C1                                dc.w    z80_ptr(Snd05_Ring_Loss_FM5+$4000)
(1)   12/   1812C : =>FALSE                      else
(1)   12/   1812C :                                     if MOMPASS>1
(1)   12/   1812C :                                             if Snd05_Ring_Loss_FM5+$4000<songStart
(1)   12/   1812C :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   1812C : [12]                                         endif
(1)   12/   1812C : [12]                                 endif
(1)   12/   1812C :                                     dc.w    Snd05_Ring_Loss_FM5+$4000-songStart
(1)   12/   1812C : [12]                         endif
(1)   12/   1812C : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   1812C :                                     PSGPitchConvert $00
(1)   12/   1812C : =>TRUE                       else
(1)   12/   1812C : 00                                  dc.b    $00
(1)   12/   1812D : [12]                         endif
(1)   12/   1812D : 05                          dc.b    $05
(1)   13/   1812E : (MACRO)              	smpsHeaderSFXChannel cFM6, Snd05_Ring_Loss_FM6+$4000,	$00, $08
(1)   13/   1812E : =>FALSE                      if (SonicDriverVer>=3)&&(cFM6==cNoise)
(1)   13/   1812E :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   13/   1812E : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM6==cFM6)
(1)   13/   1812E :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   13/   1812E : [13]                         endif
(1)   13/   1812E : 8006                        dc.b    $80,cFM6
(1)   13/   18130 :  (MACRO-2)                   CheckedChannelPointer Snd05_Ring_Loss_FM6+$4000
(1)   13/   18130 : =>TRUE                       if SonicDriverVer<>1
(1)   13/   18130 : 40C1                                dc.w    z80_ptr(Snd05_Ring_Loss_FM6+$4000)
(1)   13/   18132 : =>FALSE                      else
(1)   13/   18132 :                                     if MOMPASS>1
(1)   13/   18132 :                                             if Snd05_Ring_Loss_FM6+$4000<songStart
(1)   13/   18132 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   18132 : [13]                                         endif
(1)   13/   18132 : [13]                                 endif
(1)   13/   18132 :                                     dc.w    Snd05_Ring_Loss_FM6+$4000-songStart
(1)   13/   18132 : [13]                         endif
(1)   13/   18132 : =>FALSE                      if (cFM6&$80)<>0
(1)   13/   18132 :                                     PSGPitchConvert $00
(1)   13/   18132 : =>TRUE                       else
(1)   13/   18132 : 00                                  dc.b    $00
(1)   13/   18133 : [13]                         endif
(1)   13/   18133 : 08                          dc.b    $08
(1)   14/   18134 : =>FALSE              	else
(1)   15/   18134 :                     	smpsHeaderSFXChannel cFM5, Snd05_Ring_Loss_FM5,	$00, $05
(1)   16/   18134 :                     	smpsHeaderSFXChannel cFM6, Snd05_Ring_Loss_FM6,	$00, $08
(1)   17/   18134 : [11]                 	endif
(1)   18/   18134 :                     
(1)   19/   18134 :                     ; FM5 Data
(1)   20/   18134 :                     Snd05_Ring_Loss_FM5:
(1)   21/   18134 : (MACRO)              	smpsSetvoice        $00
(1)   21/   18134 :  (MACRO-2)                   smpsFMvoice $00
(1)   21/   18134 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   21/   18134 :                                     dc.b    $EF,$00|$80,+$81
(1)   21/   18134 : =>TRUE                       else
(1)   21/   18134 : EF00                                dc.b    $EF,$00
(1)   21/   18136 : [21]                         endif
(1)   22/   18136 : C602 0505 0505      	dc.b	nA5, $02, $05, $05, $05, $05, $05, $05, $3A
            1813C : 0505 3A          
(1)   23/   1813F : (MACRO)              	smpsStop
(1)   23/   1813F : F2                          dc.b    $F2
(1)   24/   18140 :                     
(1)   25/   18140 :                     ; FM6 Data
(1)   26/   18140 :                     Snd05_Ring_Loss_FM6:
(1)   27/   18140 : (MACRO)              	smpsSetvoice        $00
(1)   27/   18140 :  (MACRO-2)                   smpsFMvoice $00
(1)   27/   18140 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   27/   18140 :                                     dc.b    $EF,$00|$80,+$81
(1)   27/   18140 : =>TRUE                       else
(1)   27/   18140 : EF00                                dc.b    $EF,$00
(1)   27/   18142 : [27]                         endif
(1)   28/   18142 : 8002 C402 0515      	dc.b	nRst, $02, nG5, $02, $05, $15, $02, $05, $32
            18148 : 0205 32          
(1)   29/   1814B : (MACRO)              	smpsStop
(1)   29/   1814B : F2                          dc.b    $F2
(1)   30/   1814C :                     
(1)   31/   1814C :                     Snd05_Ring_Loss_Voices:
(1)   32/   1814C :                     ;	Voice $00
(1)   33/   1814C :                     ;	$04
(1)   34/   1814C :                     ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)   35/   1814C :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
(1)   36/   1814C : (MACRO)              	smpsVcAlgorithm     $04
(1)   36/   1814C : =$4                  vcAlgorithm set $04
(1)   37/   1814C : (MACRO)              	smpsVcFeedback      $00
(1)   37/   1814C : =$0                  vcFeedback set $00
(1)   38/   1814C : (MACRO)              	smpsVcUnusedBits    $00
(1)   38/   1814C : =$0                  vcUnusedBits set $00
(1)   38/   1814C : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   38/   1814C :                                     set vcD1R1Unk,<<5
(1)   38/   1814C :                                     set vcD1R2Unk,<<5
(1)   38/   1814C :                                     set vcD1R3Unk,<<5
(1)   38/   1814C :                                     set vcD1R4Unk,<<5
(1)   38/   1814C : =>TRUE                       else
(1)   38/   1814C : =$0                                  set vcD1R1Unk,0
(1)   38/   1814C : =$0                                  set vcD1R2Unk,0
(1)   38/   1814C : =$0                                  set vcD1R3Unk,0
(1)   38/   1814C : =$0                                  set vcD1R4Unk,0
(1)   38/   1814C : [38]                         endif
(1)   39/   1814C : (MACRO)              	smpsVcDetune        $04, $07, $07, $03
(1)   39/   1814C : =$4                          set vcDT1,$04
(1)   39/   1814C : =$7                          set vcDT2,$07
(1)   39/   1814C : =$7                          set vcDT3,$07
(1)   39/   1814C : =$3                          set vcDT4,$03
(1)   40/   1814C : (MACRO)              	smpsVcCoarseFreq    $09, $07, $02, $07
(1)   40/   1814C : =$9                          set vcCF1,$09
(1)   40/   1814C : =$7                          set vcCF2,$07
(1)   40/   1814C : =$2                          set vcCF3,$02
(1)   40/   1814C : =$7                          set vcCF4,$07
(1)   41/   1814C : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   41/   1814C : =$0                          set vcRS1,$00
(1)   41/   1814C : =$0                          set vcRS2,$00
(1)   41/   1814C : =$0                          set vcRS3,$00
(1)   41/   1814C : =$0                          set vcRS4,$00
(1)   42/   1814C : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   42/   1814C : =$1F                         set vcAR1,$1F
(1)   42/   1814C : =$1F                         set vcAR2,$1F
(1)   42/   1814C : =$1F                         set vcAR3,$1F
(1)   42/   1814C : =$1F                         set vcAR4,$1F
(1)   43/   1814C : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   43/   1814C : =>FALSE                      if SourceSMPS2ASM==0
(1)   43/   1814C :                                     set vcAM1,$00<<5
(1)   43/   1814C :                                     set vcAM2,$00<<5
(1)   43/   1814C :                                     set vcAM3,$00<<5
(1)   43/   1814C :                                     set vcAM4,$00<<5
(1)   43/   1814C : =>TRUE                       else
(1)   43/   1814C : =$0                                  set vcAM1,$00<<7
(1)   43/   1814C : =$0                                  set vcAM2,$00<<7
(1)   43/   1814C : =$0                                  set vcAM3,$00<<7
(1)   43/   1814C : =$0                                  set vcAM4,$00<<7
(1)   43/   1814C : [43]                         endif
(1)   44/   1814C : (MACRO)              	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)   44/   1814C : =$D                          set vcD1R1,$0D
(1)   44/   1814C : =$7                          set vcD1R2,$07
(1)   44/   1814C : =$A                          set vcD1R3,$0A
(1)   44/   1814C : =$7                          set vcD1R4,$07
(1)   45/   1814C : (MACRO)              	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)   45/   1814C : =$B                          set vcD2R1,$0B
(1)   45/   1814C : =$0                          set vcD2R2,$00
(1)   45/   1814C : =$B                          set vcD2R3,$0B
(1)   45/   1814C : =$0                          set vcD2R4,$00
(1)   46/   1814C : (MACRO)              	smpsVcDecayLevel    $00, $01, $00, $01
(1)   46/   1814C : =$0                          set vcDL1,$00
(1)   46/   1814C : =$1                          set vcDL2,$01
(1)   46/   1814C : =$0                          set vcDL3,$00
(1)   46/   1814C : =$1                          set vcDL4,$01
(1)   47/   1814C : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   47/   1814C : =$F                          set vcRR1,$0F
(1)   47/   1814C : =$F                          set vcRR2,$0F
(1)   47/   1814C : =$F                          set vcRR3,$0F
(1)   47/   1814C : =$F                          set vcRR4,$0F
(1)   48/   1814C : (MACRO)              	smpsVcTotalLevel    $80, $23, $80, $23
(1)   48/   1814C : =$80                         set vcTL1,$80
(1)   48/   1814C : =$23                         set vcTL2,$23
(1)   48/   1814C : =$80                         set vcTL3,$80
(1)   48/   1814C : =$23                         set vcTL4,$23
(1)   48/   1814C : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   48/   1814D :                     ;   0     1     2     3     4     5     6     7
(1)   48/   1814D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   48/   1814D : =>FALSE                      if SourceSMPS2ASM==0
(1)   48/   1814D :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   48/   1814D :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   48/   1814D :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   48/   1814D :                                     set vcTLMask1,$80
(1)   48/   1814D : =>TRUE                       else
(1)   48/   1814D : =$0                                  set vcTLMask4,0
(1)   48/   1814D : =$0                                  set vcTLMask3,0
(1)   48/   1814D : =$0                                  set vcTLMask2,0
(1)   48/   1814D : =$0                                  set vcTLMask1,0
(1)   48/   1814D : [48]                         endif
(1)   48/   1814D :                     
(1)   48/   1814D : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   48/   1814D :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   48/   1814D :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   48/   1814D :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   48/   1814D :                                     set vcTLMask1,$80
(1)   48/   1814D :                                     set vcTL1,vcTL1&$7F
(1)   48/   1814D :                                     set vcTL2,vcTL2&$7F
(1)   48/   1814D :                                     set vcTL3,vcTL3&$7F
(1)   48/   1814D :                                     set vcTL4,vcTL4&$7F
(1)   48/   1814D : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   48/   1814D :                                     if MOMPASS>1
(1)   48/   1814D :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   48/   1814D : [48]                                 endif
(1)   48/   1814D : [48]                         endif
(1)   48/   1814D :                     
(1)   48/   1814D : =>FALSE                      if SonicDriverVer==2
(1)   48/   1814D :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   48/   1814D :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   48/   1814D :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   48/   1814D :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   48/   1814D :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   48/   1814D :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   48/   1814D : =>TRUE                       else
(1)   48/   1814D : 3772 7749                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   48/   18151 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   48/   18155 : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   48/   18159 : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   48/   1815D : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   48/   18161 : 2380 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   48/   18165 : [48]                         endif
(1)   49/   18165 :                     
(1)   50/   18165 :                     
   18864/   18165 :                     SoundA6:	include	"Sound/SFX/SndA6 - Ring.asm"	; Ring Collect SFX (Same as Sonic 1 SFX B5) (Plays on Right Speaker, may very well be the "right to left to right" speaker thing)
(1)    1/   18165 :                     Snd06_Ring_Header:
(1)    2/   18165 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   18165 :                     
(1)    2/   18165 : =$3                  SourceDriver set 3
(1)    2/   18165 :                     
(1)    2/   18165 : =>TRUE                       if ("1"<>"")
(1)    2/   18165 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   18165 : =>FALSE                      else
(1)    2/   18165 :                                     set SourceSMPS2ASM,0
(1)    2/   18165 : [2]                          endif
(1)    2/   18165 :                     
(1)    2/   18165 : =$18165              songStart set *
(1)    2/   18165 :                     
(1)    2/   18165 : =>TRUE                       if MOMPASS>1
(1)    2/   18165 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   18165 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   18165 : [2]                                  endif
(1)    2/   18165 : [2]                          endif
(1)    2/   18165 :                     
(1)    3/   18165 : =>TRUE               	if ~~fixBugs
(1)    4/   18165 : (MACRO)              	smpsHeaderVoice     Snd06_Ring_Voices+$4000
(1)    4/   18165 : =>FALSE                      if songStart<>*
(1)    4/   18165 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   18165 : [4]                          endif
(1)    4/   18165 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   18165 : 7AC1                                dc.w    z80_ptr(Snd06_Ring_Voices+$4000)
(1)    4/   18167 : =>FALSE                      else
(1)    4/   18167 :                                     if MOMPASS>1
(1)    4/   18167 :                                             if Snd06_Ring_Voices+$4000<songStart
(1)    4/   18167 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   18167 : [4]                                          endif
(1)    4/   18167 : [4]                                  endif
(1)    4/   18167 :                                     dc.w    Snd06_Ring_Voices+$4000-songStart
(1)    4/   18167 : [4]                          endif
(1)    5/   18167 : =>FALSE              	else
(1)    6/   18167 :                     	smpsHeaderVoice     Snd06_Ring_Voices
(1)    7/   18167 : [3]                  	endif
(1)    8/   18167 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   18167 : 01                          dc.b    $01
(1)    9/   18168 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   18168 : 01                          dc.b    $01
(1)   10/   18169 :                     
(1)   11/   18169 : =>TRUE               	if ~~fixBugs
(1)   12/   18169 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd06_Ring_FM5+$4000,	$00, $05
(1)   12/   18169 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18169 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18169 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18169 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18169 : [12]                         endif
(1)   12/   18169 : 8005                        dc.b    $80,cFM5
(1)   12/   1816B :  (MACRO-2)                   CheckedChannelPointer Snd06_Ring_FM5+$4000
(1)   12/   1816B : =>TRUE                       if SonicDriverVer<>1
(1)   12/   1816B : 6FC1                                dc.w    z80_ptr(Snd06_Ring_FM5+$4000)
(1)   12/   1816D : =>FALSE                      else
(1)   12/   1816D :                                     if MOMPASS>1
(1)   12/   1816D :                                             if Snd06_Ring_FM5+$4000<songStart
(1)   12/   1816D :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   1816D : [12]                                         endif
(1)   12/   1816D : [12]                                 endif
(1)   12/   1816D :                                     dc.w    Snd06_Ring_FM5+$4000-songStart
(1)   12/   1816D : [12]                         endif
(1)   12/   1816D : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   1816D :                                     PSGPitchConvert $00
(1)   12/   1816D : =>TRUE                       else
(1)   12/   1816D : 00                                  dc.b    $00
(1)   12/   1816E : [12]                         endif
(1)   12/   1816E : 05                          dc.b    $05
(1)   13/   1816F : =>FALSE              	else
(1)   14/   1816F :                     	smpsHeaderSFXChannel cFM5, Snd06_Ring_FM5,	$00, $05
(1)   15/   1816F : [11]                 	endif
(1)   16/   1816F :                     
(1)   17/   1816F :                     ; FM5 Data
(1)   18/   1816F :                     Snd06_Ring_FM5:
(1)   19/   1816F : (MACRO)              	smpsPan             panRight, $00
(1)   19/   1816F : =$0                  panNone set $00
(1)   19/   1816F : =$40                 panRight set $40
(1)   19/   1816F : =$80                 panLeft set $80
(1)   19/   1816F : =$C0                 panCentre set $C0
(1)   19/   1816F : =$C0                 panCenter set $C0 ; silly Americans :U
(1)   19/   1816F : E040                        dc.b $E0,panRight+$00
(1)   20/   18171 : (MACRO)              	smpsSetvoice        $00
(1)   20/   18171 :  (MACRO-2)                   smpsFMvoice $00
(1)   20/   18171 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   20/   18171 :                                     dc.b    $EF,$00|$80,+$81
(1)   20/   18171 : =>TRUE                       else
(1)   20/   18171 : EF00                                dc.b    $EF,$00
(1)   20/   18173 : [20]                         endif
(1)   21/   18173 : C105 C405 C91B      	dc.b	nE5, $05, nG5, $05, nC6, $1B
(1)   22/   18179 : (MACRO)              	smpsStop
(1)   22/   18179 : F2                          dc.b    $F2
(1)   23/   1817A :                     
(1)   24/   1817A :                     Snd06_Ring_Voices:
(1)   25/   1817A :                     ;	Voice $00
(1)   26/   1817A :                     ;	$04
(1)   27/   1817A :                     ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
(1)   28/   1817A :                     ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
(1)   29/   1817A : (MACRO)              	smpsVcAlgorithm     $04
(1)   29/   1817A : =$4                  vcAlgorithm set $04
(1)   30/   1817A : (MACRO)              	smpsVcFeedback      $00
(1)   30/   1817A : =$0                  vcFeedback set $00
(1)   31/   1817A : (MACRO)              	smpsVcUnusedBits    $00
(1)   31/   1817A : =$0                  vcUnusedBits set $00
(1)   31/   1817A : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   31/   1817A :                                     set vcD1R1Unk,<<5
(1)   31/   1817A :                                     set vcD1R2Unk,<<5
(1)   31/   1817A :                                     set vcD1R3Unk,<<5
(1)   31/   1817A :                                     set vcD1R4Unk,<<5
(1)   31/   1817A : =>TRUE                       else
(1)   31/   1817A : =$0                                  set vcD1R1Unk,0
(1)   31/   1817A : =$0                                  set vcD1R2Unk,0
(1)   31/   1817A : =$0                                  set vcD1R3Unk,0
(1)   31/   1817A : =$0                                  set vcD1R4Unk,0
(1)   31/   1817A : [31]                         endif
(1)   32/   1817A : (MACRO)              	smpsVcDetune        $04, $07, $07, $03
(1)   32/   1817A : =$4                          set vcDT1,$04
(1)   32/   1817A : =$7                          set vcDT2,$07
(1)   32/   1817A : =$7                          set vcDT3,$07
(1)   32/   1817A : =$3                          set vcDT4,$03
(1)   33/   1817A : (MACRO)              	smpsVcCoarseFreq    $09, $07, $02, $07
(1)   33/   1817A : =$9                          set vcCF1,$09
(1)   33/   1817A : =$7                          set vcCF2,$07
(1)   33/   1817A : =$2                          set vcCF3,$02
(1)   33/   1817A : =$7                          set vcCF4,$07
(1)   34/   1817A : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   34/   1817A : =$0                          set vcRS1,$00
(1)   34/   1817A : =$0                          set vcRS2,$00
(1)   34/   1817A : =$0                          set vcRS3,$00
(1)   34/   1817A : =$0                          set vcRS4,$00
(1)   35/   1817A : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   35/   1817A : =$1F                         set vcAR1,$1F
(1)   35/   1817A : =$1F                         set vcAR2,$1F
(1)   35/   1817A : =$1F                         set vcAR3,$1F
(1)   35/   1817A : =$1F                         set vcAR4,$1F
(1)   36/   1817A : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   36/   1817A : =>FALSE                      if SourceSMPS2ASM==0
(1)   36/   1817A :                                     set vcAM1,$00<<5
(1)   36/   1817A :                                     set vcAM2,$00<<5
(1)   36/   1817A :                                     set vcAM3,$00<<5
(1)   36/   1817A :                                     set vcAM4,$00<<5
(1)   36/   1817A : =>TRUE                       else
(1)   36/   1817A : =$0                                  set vcAM1,$00<<7
(1)   36/   1817A : =$0                                  set vcAM2,$00<<7
(1)   36/   1817A : =$0                                  set vcAM3,$00<<7
(1)   36/   1817A : =$0                                  set vcAM4,$00<<7
(1)   36/   1817A : [36]                         endif
(1)   37/   1817A : (MACRO)              	smpsVcDecayRate1    $0D, $07, $0A, $07
(1)   37/   1817A : =$D                          set vcD1R1,$0D
(1)   37/   1817A : =$7                          set vcD1R2,$07
(1)   37/   1817A : =$A                          set vcD1R3,$0A
(1)   37/   1817A : =$7                          set vcD1R4,$07
(1)   38/   1817A : (MACRO)              	smpsVcDecayRate2    $0B, $00, $0B, $00
(1)   38/   1817A : =$B                          set vcD2R1,$0B
(1)   38/   1817A : =$0                          set vcD2R2,$00
(1)   38/   1817A : =$B                          set vcD2R3,$0B
(1)   38/   1817A : =$0                          set vcD2R4,$00
(1)   39/   1817A : (MACRO)              	smpsVcDecayLevel    $00, $01, $00, $01
(1)   39/   1817A : =$0                          set vcDL1,$00
(1)   39/   1817A : =$1                          set vcDL2,$01
(1)   39/   1817A : =$0                          set vcDL3,$00
(1)   39/   1817A : =$1                          set vcDL4,$01
(1)   40/   1817A : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   40/   1817A : =$F                          set vcRR1,$0F
(1)   40/   1817A : =$F                          set vcRR2,$0F
(1)   40/   1817A : =$F                          set vcRR3,$0F
(1)   40/   1817A : =$F                          set vcRR4,$0F
(1)   41/   1817A : (MACRO)              	smpsVcTotalLevel    $80, $23, $80, $23
(1)   41/   1817A : =$80                         set vcTL1,$80
(1)   41/   1817A : =$23                         set vcTL2,$23
(1)   41/   1817A : =$80                         set vcTL3,$80
(1)   41/   1817A : =$23                         set vcTL4,$23
(1)   41/   1817A : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   41/   1817B :                     ;   0     1     2     3     4     5     6     7
(1)   41/   1817B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   41/   1817B : =>FALSE                      if SourceSMPS2ASM==0
(1)   41/   1817B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   41/   1817B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   41/   1817B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   41/   1817B :                                     set vcTLMask1,$80
(1)   41/   1817B : =>TRUE                       else
(1)   41/   1817B : =$0                                  set vcTLMask4,0
(1)   41/   1817B : =$0                                  set vcTLMask3,0
(1)   41/   1817B : =$0                                  set vcTLMask2,0
(1)   41/   1817B : =$0                                  set vcTLMask1,0
(1)   41/   1817B : [41]                         endif
(1)   41/   1817B :                     
(1)   41/   1817B : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   41/   1817B :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   41/   1817B :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   41/   1817B :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   41/   1817B :                                     set vcTLMask1,$80
(1)   41/   1817B :                                     set vcTL1,vcTL1&$7F
(1)   41/   1817B :                                     set vcTL2,vcTL2&$7F
(1)   41/   1817B :                                     set vcTL3,vcTL3&$7F
(1)   41/   1817B :                                     set vcTL4,vcTL4&$7F
(1)   41/   1817B : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   41/   1817B :                                     if MOMPASS>1
(1)   41/   1817B :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   41/   1817B : [41]                                 endif
(1)   41/   1817B : [41]                         endif
(1)   41/   1817B :                     
(1)   41/   1817B : =>FALSE                      if SonicDriverVer==2
(1)   41/   1817B :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   41/   1817B :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   41/   1817B :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   1817B :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   41/   1817B :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   41/   1817B :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   41/   1817B : =>TRUE                       else
(1)   41/   1817B : 3772 7749                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   41/   1817F : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   41/   18183 : 070A 070D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   41/   18187 : 000B 000B                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   41/   1818B : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   41/   1818F : 2380 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   41/   18193 : [41]                         endif
(1)   42/   18193 :                     
(1)   43/   18193 :                     
   18865/   18193 :                     SoundA7:	include	"Sound/SFX/SndA7 - Break Item.asm" ; Destroy Badnik/Monitor SFX (Same a Sonic 3 SFX 3D)
(1)    1/   18193 :                     Snd07_Header:
(1)    2/   18193 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   18193 :                     
(1)    2/   18193 : =$3                  SourceDriver set 3
(1)    2/   18193 :                     
(1)    2/   18193 : =>TRUE                       if ("1"<>"")
(1)    2/   18193 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   18193 : =>FALSE                      else
(1)    2/   18193 :                                     set SourceSMPS2ASM,0
(1)    2/   18193 : [2]                          endif
(1)    2/   18193 :                     
(1)    2/   18193 : =$18193              songStart set *
(1)    2/   18193 :                     
(1)    2/   18193 : =>TRUE                       if MOMPASS>1
(1)    2/   18193 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   18193 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   18193 : [2]                                  endif
(1)    2/   18193 : [2]                          endif
(1)    2/   18193 :                     
(1)    3/   18193 : =>TRUE               	if ~~fixBugs
(1)    4/   18193 : (MACRO)              	smpsHeaderVoice     Snd07_Voices+$4000
(1)    4/   18193 : =>FALSE                      if songStart<>*
(1)    4/   18193 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   18193 : [4]                          endif
(1)    4/   18193 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   18193 : B2C1                                dc.w    z80_ptr(Snd07_Voices+$4000)
(1)    4/   18195 : =>FALSE                      else
(1)    4/   18195 :                                     if MOMPASS>1
(1)    4/   18195 :                                             if Snd07_Voices+$4000<songStart
(1)    4/   18195 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   18195 : [4]                                          endif
(1)    4/   18195 : [4]                                  endif
(1)    4/   18195 :                                     dc.w    Snd07_Voices+$4000-songStart
(1)    4/   18195 : [4]                          endif
(1)    5/   18195 : =>FALSE              	else
(1)    6/   18195 :                     	smpsHeaderVoice     Snd07_Voices
(1)    7/   18195 : [3]                  	endif
(1)    8/   18195 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   18195 : 01                          dc.b    $01
(1)    9/   18196 : (MACRO)              	smpsHeaderChanSFX   $02
(1)    9/   18196 : 02                          dc.b    $02
(1)   10/   18197 :                     
(1)   11/   18197 : =>TRUE               	if ~~fixBugs
(1)   12/   18197 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd07_FM5+$4000,	$00, $00
(1)   12/   18197 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18197 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18197 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18197 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18197 : [12]                         endif
(1)   12/   18197 : 8005                        dc.b    $80,cFM5
(1)   12/   18199 :  (MACRO-2)                   CheckedChannelPointer Snd07_FM5+$4000
(1)   12/   18199 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   18199 : A3C1                                dc.w    z80_ptr(Snd07_FM5+$4000)
(1)   12/   1819B : =>FALSE                      else
(1)   12/   1819B :                                     if MOMPASS>1
(1)   12/   1819B :                                             if Snd07_FM5+$4000<songStart
(1)   12/   1819B :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   1819B : [12]                                         endif
(1)   12/   1819B : [12]                                 endif
(1)   12/   1819B :                                     dc.w    Snd07_FM5+$4000-songStart
(1)   12/   1819B : [12]                         endif
(1)   12/   1819B : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   1819B :                                     PSGPitchConvert $00
(1)   12/   1819B : =>TRUE                       else
(1)   12/   1819B : 00                                  dc.b    $00
(1)   12/   1819C : [12]                         endif
(1)   12/   1819C : 00                          dc.b    $00
(1)   13/   1819D : (MACRO)              	smpsHeaderSFXChannel cFM6, Snd07_FM6+$4000,	$00, $0B
(1)   13/   1819D : =>FALSE                      if (SonicDriverVer>=3)&&(cFM6==cNoise)
(1)   13/   1819D :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   13/   1819D : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM6==cFM6)
(1)   13/   1819D :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   13/   1819D : [13]                         endif
(1)   13/   1819D : 8006                        dc.b    $80,cFM6
(1)   13/   1819F :  (MACRO-2)                   CheckedChannelPointer Snd07_FM6+$4000
(1)   13/   1819F : =>TRUE                       if SonicDriverVer<>1
(1)   13/   1819F : ADC1                                dc.w    z80_ptr(Snd07_FM6+$4000)
(1)   13/   181A1 : =>FALSE                      else
(1)   13/   181A1 :                                     if MOMPASS>1
(1)   13/   181A1 :                                             if Snd07_FM6+$4000<songStart
(1)   13/   181A1 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   13/   181A1 : [13]                                         endif
(1)   13/   181A1 : [13]                                 endif
(1)   13/   181A1 :                                     dc.w    Snd07_FM6+$4000-songStart
(1)   13/   181A1 : [13]                         endif
(1)   13/   181A1 : =>FALSE                      if (cFM6&$80)<>0
(1)   13/   181A1 :                                     PSGPitchConvert $00
(1)   13/   181A1 : =>TRUE                       else
(1)   13/   181A1 : 00                                  dc.b    $00
(1)   13/   181A2 : [13]                         endif
(1)   13/   181A2 : 0B                          dc.b    $0B
(1)   14/   181A3 : =>FALSE              	else
(1)   15/   181A3 :                     	smpsHeaderSFXChannel cFM5, Snd07_FM5,	$00, $00
(1)   16/   181A3 :                     	smpsHeaderSFXChannel cFM6, Snd07_FM6,	$00, $0B
(1)   17/   181A3 : [11]                 	endif
(1)   18/   181A3 :                     
(1)   19/   181A3 :                     ; FM5 Data
(1)   20/   181A3 :                     Snd07_FM5:
(1)   21/   181A3 : (MACRO)              	smpsModSet          $03, $01, $72, $0B
(1)   21/   181A3 : F0                          dc.b    $F0
(1)   21/   181A4 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   21/   181A4 :                                     dc.b    $03+1,$01,$72,(($0B+1) * $01) & $FF
(1)   21/   181A4 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   21/   181A4 :                                     dc.b    $03-1,$01,$72,conv0To256($0B)/conv0To256($01)-1
(1)   21/   181A4 : =>TRUE                       else
(1)   21/   181A4 : 0301 720B                           dc.b    $03,$01,$72,$0B
(1)   21/   181A8 : [21]                         endif
(1)   21/   181A8 :                             ;dc.b   $01,$72,$0B
(1)   22/   181A8 : (MACRO)              	smpsSetvoice        $00
(1)   22/   181A8 :  (MACRO-2)                   smpsFMvoice $00
(1)   22/   181A8 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   22/   181A8 :                                     dc.b    $EF,$00|$80,+$81
(1)   22/   181A8 : =>TRUE                       else
(1)   22/   181A8 : EF00                                dc.b    $EF,$00
(1)   22/   181AA : [22]                         endif
(1)   23/   181AA : BA16                	dc.b	nA4, $16
(1)   24/   181AC : (MACRO)              	smpsStop
(1)   24/   181AC : F2                          dc.b    $F2
(1)   25/   181AD :                     
(1)   26/   181AD :                     ; FM6 Data
(1)   27/   181AD :                     Snd07_FM6:
(1)   28/   181AD : (MACRO)              	smpsSetvoice        $01
(1)   28/   181AD :  (MACRO-2)                   smpsFMvoice $01
(1)   28/   181AD : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   28/   181AD :                                     dc.b    $EF,$01|$80,+$81
(1)   28/   181AD : =>TRUE                       else
(1)   28/   181AD : EF01                                dc.b    $EF,$01
(1)   28/   181AF : [28]                         endif
(1)   29/   181AF : B013                	dc.b	nB3, $13
(1)   30/   181B1 : (MACRO)              	smpsStop
(1)   30/   181B1 : F2                          dc.b    $F2
(1)   31/   181B2 :                     
(1)   32/   181B2 :                     Snd07_Voices:
(1)   33/   181B2 :                     ;	Voice $00
(1)   34/   181B2 :                     ;	$3C
(1)   35/   181B2 :                     ;	$0F, $01, $03, $01, 	$1F, $1F, $1F, $1F, 	$19, $12, $19, $0E
(1)   36/   181B2 :                     ;	$05, $12, $00, $0F, 	$0F, $7F, $FF, $FF, 	$00, $80, $00, $80
(1)   37/   181B2 : (MACRO)              	smpsVcAlgorithm     $04
(1)   37/   181B2 : =$4                  vcAlgorithm set $04
(1)   38/   181B2 : (MACRO)              	smpsVcFeedback      $07
(1)   38/   181B2 : =$7                  vcFeedback set $07
(1)   39/   181B2 : (MACRO)              	smpsVcUnusedBits    $00
(1)   39/   181B2 : =$0                  vcUnusedBits set $00
(1)   39/   181B2 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   39/   181B2 :                                     set vcD1R1Unk,<<5
(1)   39/   181B2 :                                     set vcD1R2Unk,<<5
(1)   39/   181B2 :                                     set vcD1R3Unk,<<5
(1)   39/   181B2 :                                     set vcD1R4Unk,<<5
(1)   39/   181B2 : =>TRUE                       else
(1)   39/   181B2 : =$0                                  set vcD1R1Unk,0
(1)   39/   181B2 : =$0                                  set vcD1R2Unk,0
(1)   39/   181B2 : =$0                                  set vcD1R3Unk,0
(1)   39/   181B2 : =$0                                  set vcD1R4Unk,0
(1)   39/   181B2 : [39]                         endif
(1)   40/   181B2 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   40/   181B2 : =$0                          set vcDT1,$00
(1)   40/   181B2 : =$0                          set vcDT2,$00
(1)   40/   181B2 : =$0                          set vcDT3,$00
(1)   40/   181B2 : =$0                          set vcDT4,$00
(1)   41/   181B2 : (MACRO)              	smpsVcCoarseFreq    $01, $03, $01, $0F
(1)   41/   181B2 : =$1                          set vcCF1,$01
(1)   41/   181B2 : =$3                          set vcCF2,$03
(1)   41/   181B2 : =$1                          set vcCF3,$01
(1)   41/   181B2 : =$F                          set vcCF4,$0F
(1)   42/   181B2 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   42/   181B2 : =$0                          set vcRS1,$00
(1)   42/   181B2 : =$0                          set vcRS2,$00
(1)   42/   181B2 : =$0                          set vcRS3,$00
(1)   42/   181B2 : =$0                          set vcRS4,$00
(1)   43/   181B2 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   43/   181B2 : =$1F                         set vcAR1,$1F
(1)   43/   181B2 : =$1F                         set vcAR2,$1F
(1)   43/   181B2 : =$1F                         set vcAR3,$1F
(1)   43/   181B2 : =$1F                         set vcAR4,$1F
(1)   44/   181B2 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   44/   181B2 : =>FALSE                      if SourceSMPS2ASM==0
(1)   44/   181B2 :                                     set vcAM1,$00<<5
(1)   44/   181B2 :                                     set vcAM2,$00<<5
(1)   44/   181B2 :                                     set vcAM3,$00<<5
(1)   44/   181B2 :                                     set vcAM4,$00<<5
(1)   44/   181B2 : =>TRUE                       else
(1)   44/   181B2 : =$0                                  set vcAM1,$00<<7
(1)   44/   181B2 : =$0                                  set vcAM2,$00<<7
(1)   44/   181B2 : =$0                                  set vcAM3,$00<<7
(1)   44/   181B2 : =$0                                  set vcAM4,$00<<7
(1)   44/   181B2 : [44]                         endif
(1)   45/   181B2 : (MACRO)              	smpsVcDecayRate1    $0E, $19, $12, $19
(1)   45/   181B2 : =$E                          set vcD1R1,$0E
(1)   45/   181B2 : =$19                         set vcD1R2,$19
(1)   45/   181B2 : =$12                         set vcD1R3,$12
(1)   45/   181B2 : =$19                         set vcD1R4,$19
(1)   46/   181B2 : (MACRO)              	smpsVcDecayRate2    $0F, $00, $12, $05
(1)   46/   181B2 : =$F                          set vcD2R1,$0F
(1)   46/   181B2 : =$0                          set vcD2R2,$00
(1)   46/   181B2 : =$12                         set vcD2R3,$12
(1)   46/   181B2 : =$5                          set vcD2R4,$05
(1)   47/   181B2 : (MACRO)              	smpsVcDecayLevel    $0F, $0F, $07, $00
(1)   47/   181B2 : =$F                          set vcDL1,$0F
(1)   47/   181B2 : =$F                          set vcDL2,$0F
(1)   47/   181B2 : =$7                          set vcDL3,$07
(1)   47/   181B2 : =$0                          set vcDL4,$00
(1)   48/   181B2 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   48/   181B2 : =$F                          set vcRR1,$0F
(1)   48/   181B2 : =$F                          set vcRR2,$0F
(1)   48/   181B2 : =$F                          set vcRR3,$0F
(1)   48/   181B2 : =$F                          set vcRR4,$0F
(1)   49/   181B2 : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   49/   181B2 : =$80                         set vcTL1,$80
(1)   49/   181B2 : =$0                          set vcTL2,$00
(1)   49/   181B2 : =$80                         set vcTL3,$80
(1)   49/   181B2 : =$0                          set vcTL4,$00
(1)   49/   181B2 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   49/   181B3 :                     ;   0     1     2     3     4     5     6     7
(1)   49/   181B3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   49/   181B3 : =>FALSE                      if SourceSMPS2ASM==0
(1)   49/   181B3 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   49/   181B3 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   49/   181B3 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   49/   181B3 :                                     set vcTLMask1,$80
(1)   49/   181B3 : =>TRUE                       else
(1)   49/   181B3 : =$0                                  set vcTLMask4,0
(1)   49/   181B3 : =$0                                  set vcTLMask3,0
(1)   49/   181B3 : =$0                                  set vcTLMask2,0
(1)   49/   181B3 : =$0                                  set vcTLMask1,0
(1)   49/   181B3 : [49]                         endif
(1)   49/   181B3 :                     
(1)   49/   181B3 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   49/   181B3 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   49/   181B3 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   49/   181B3 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   49/   181B3 :                                     set vcTLMask1,$80
(1)   49/   181B3 :                                     set vcTL1,vcTL1&$7F
(1)   49/   181B3 :                                     set vcTL2,vcTL2&$7F
(1)   49/   181B3 :                                     set vcTL3,vcTL3&$7F
(1)   49/   181B3 :                                     set vcTL4,vcTL4&$7F
(1)   49/   181B3 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   49/   181B3 :                                     if MOMPASS>1
(1)   49/   181B3 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   49/   181B3 : [49]                                 endif
(1)   49/   181B3 : [49]                         endif
(1)   49/   181B3 :                     
(1)   49/   181B3 : =>FALSE                      if SonicDriverVer==2
(1)   49/   181B3 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   49/   181B3 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   49/   181B3 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   49/   181B3 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   49/   181B3 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   49/   181B3 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   49/   181B3 : =>TRUE                       else
(1)   49/   181B3 : 0F01 0301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   49/   181B7 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   49/   181BB : 1912 190E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   49/   181BF : 0512 000F                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   49/   181C3 : 0F7F FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   49/   181C7 : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   49/   181CB : [49]                         endif
(1)   50/   181CB :                     
(1)   51/   181CB :                     ;	Voice $01
(1)   52/   181CB :                     ;	$3C
(1)   53/   181CB :                     ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
(1)   54/   181CB :                     ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $80
(1)   55/   181CB : (MACRO)              	smpsVcAlgorithm     $04
(1)   55/   181CB : =$4                  vcAlgorithm set $04
(1)   56/   181CB : (MACRO)              	smpsVcFeedback      $07
(1)   56/   181CB : =$7                  vcFeedback set $07
(1)   57/   181CB : (MACRO)              	smpsVcUnusedBits    $00
(1)   57/   181CB : =$0                  vcUnusedBits set $00
(1)   57/   181CB : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   57/   181CB :                                     set vcD1R1Unk,<<5
(1)   57/   181CB :                                     set vcD1R2Unk,<<5
(1)   57/   181CB :                                     set vcD1R3Unk,<<5
(1)   57/   181CB :                                     set vcD1R4Unk,<<5
(1)   57/   181CB : =>TRUE                       else
(1)   57/   181CB : =$0                                  set vcD1R1Unk,0
(1)   57/   181CB : =$0                                  set vcD1R2Unk,0
(1)   57/   181CB : =$0                                  set vcD1R3Unk,0
(1)   57/   181CB : =$0                                  set vcD1R4Unk,0
(1)   57/   181CB : [57]                         endif
(1)   58/   181CB : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   58/   181CB : =$0                          set vcDT1,$00
(1)   58/   181CB : =$0                          set vcDT2,$00
(1)   58/   181CB : =$0                          set vcDT3,$00
(1)   58/   181CB : =$0                          set vcDT4,$00
(1)   59/   181CB : (MACRO)              	smpsVcCoarseFreq    $00, $00, $00, $0F
(1)   59/   181CB : =$0                          set vcCF1,$00
(1)   59/   181CB : =$0                          set vcCF2,$00
(1)   59/   181CB : =$0                          set vcCF3,$00
(1)   59/   181CB : =$F                          set vcCF4,$0F
(1)   60/   181CB : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   60/   181CB : =$0                          set vcRS1,$00
(1)   60/   181CB : =$0                          set vcRS2,$00
(1)   60/   181CB : =$0                          set vcRS3,$00
(1)   60/   181CB : =$0                          set vcRS4,$00
(1)   61/   181CB : (MACRO)              	smpsVcAttackRate    $1C, $18, $1A, $1F
(1)   61/   181CB : =$1C                         set vcAR1,$1C
(1)   61/   181CB : =$18                         set vcAR2,$18
(1)   61/   181CB : =$1A                         set vcAR3,$1A
(1)   61/   181CB : =$1F                         set vcAR4,$1F
(1)   62/   181CB : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   62/   181CB : =>FALSE                      if SourceSMPS2ASM==0
(1)   62/   181CB :                                     set vcAM1,$00<<5
(1)   62/   181CB :                                     set vcAM2,$00<<5
(1)   62/   181CB :                                     set vcAM3,$00<<5
(1)   62/   181CB :                                     set vcAM4,$00<<5
(1)   62/   181CB : =>TRUE                       else
(1)   62/   181CB : =$0                                  set vcAM1,$00<<7
(1)   62/   181CB : =$0                                  set vcAM2,$00<<7
(1)   62/   181CB : =$0                                  set vcAM3,$00<<7
(1)   62/   181CB : =$0                                  set vcAM4,$00<<7
(1)   62/   181CB : [62]                         endif
(1)   63/   181CB : (MACRO)              	smpsVcDecayRate1    $0E, $1A, $11, $17
(1)   63/   181CB : =$E                          set vcD1R1,$0E
(1)   63/   181CB : =$1A                         set vcD1R2,$1A
(1)   63/   181CB : =$11                         set vcD1R3,$11
(1)   63/   181CB : =$17                         set vcD1R4,$17
(1)   64/   181CB : (MACRO)              	smpsVcDecayRate2    $10, $14, $0F, $00
(1)   64/   181CB : =$10                         set vcD2R1,$10
(1)   64/   181CB : =$14                         set vcD2R2,$14
(1)   64/   181CB : =$F                          set vcD2R3,$0F
(1)   64/   181CB : =$0                          set vcD2R4,$00
(1)   65/   181CB : (MACRO)              	smpsVcDecayLevel    $02, $09, $09, $01
(1)   65/   181CB : =$2                          set vcDL1,$02
(1)   65/   181CB : =$9                          set vcDL2,$09
(1)   65/   181CB : =$9                          set vcDL3,$09
(1)   65/   181CB : =$1                          set vcDL4,$01
(1)   66/   181CB : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   66/   181CB : =$F                          set vcRR1,$0F
(1)   66/   181CB : =$F                          set vcRR2,$0F
(1)   66/   181CB : =$F                          set vcRR3,$0F
(1)   66/   181CB : =$F                          set vcRR4,$0F
(1)   67/   181CB : (MACRO)              	smpsVcTotalLevel    $80, $26, $80, $07
(1)   67/   181CB : =$80                         set vcTL1,$80
(1)   67/   181CB : =$26                         set vcTL2,$26
(1)   67/   181CB : =$80                         set vcTL3,$80
(1)   67/   181CB : =$7                          set vcTL4,$07
(1)   67/   181CB : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   67/   181CC :                     ;   0     1     2     3     4     5     6     7
(1)   67/   181CC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   67/   181CC : =>FALSE                      if SourceSMPS2ASM==0
(1)   67/   181CC :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   67/   181CC :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   67/   181CC :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   67/   181CC :                                     set vcTLMask1,$80
(1)   67/   181CC : =>TRUE                       else
(1)   67/   181CC : =$0                                  set vcTLMask4,0
(1)   67/   181CC : =$0                                  set vcTLMask3,0
(1)   67/   181CC : =$0                                  set vcTLMask2,0
(1)   67/   181CC : =$0                                  set vcTLMask1,0
(1)   67/   181CC : [67]                         endif
(1)   67/   181CC :                     
(1)   67/   181CC : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   67/   181CC :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   67/   181CC :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   67/   181CC :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   67/   181CC :                                     set vcTLMask1,$80
(1)   67/   181CC :                                     set vcTL1,vcTL1&$7F
(1)   67/   181CC :                                     set vcTL2,vcTL2&$7F
(1)   67/   181CC :                                     set vcTL3,vcTL3&$7F
(1)   67/   181CC :                                     set vcTL4,vcTL4&$7F
(1)   67/   181CC : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   67/   181CC :                                     if MOMPASS>1
(1)   67/   181CC :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   67/   181CC : [67]                                 endif
(1)   67/   181CC : [67]                         endif
(1)   67/   181CC :                     
(1)   67/   181CC : =>FALSE                      if SonicDriverVer==2
(1)   67/   181CC :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   67/   181CC :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   67/   181CC :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   67/   181CC :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   67/   181CC :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   67/   181CC :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   67/   181CC : =>TRUE                       else
(1)   67/   181CC : 0F00 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   67/   181D0 : 1F1A 181C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   67/   181D4 : 1711 1A0E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   67/   181D8 : 000F 1410                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   67/   181DC : 1F9F 9F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   67/   181E0 : 0780 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   67/   181E4 : [67]                         endif
(1)   68/   181E4 :                     
(1)   69/   181E4 :                     
   18866/   181E4 :                     SoundA8:	include	"Sound/SFX/SndA8 - Spring.asm"	; Spring SFX (Same as Sonic 3 SFX B1)
(1)    1/   181E4 :                     Snd08_Header:
(1)    2/   181E4 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   181E4 :                     
(1)    2/   181E4 : =$3                  SourceDriver set 3
(1)    2/   181E4 :                     
(1)    2/   181E4 : =>TRUE                       if ("1"<>"")
(1)    2/   181E4 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   181E4 : =>FALSE                      else
(1)    2/   181E4 :                                     set SourceSMPS2ASM,0
(1)    2/   181E4 : [2]                          endif
(1)    2/   181E4 :                     
(1)    2/   181E4 : =$181E4              songStart set *
(1)    2/   181E4 :                     
(1)    2/   181E4 : =>TRUE                       if MOMPASS>1
(1)    2/   181E4 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   181E4 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   181E4 : [2]                                  endif
(1)    2/   181E4 : [2]                          endif
(1)    2/   181E4 :                     
(1)    3/   181E4 : =>TRUE               	if ~~fixBugs
(1)    4/   181E4 : (MACRO)              	smpsHeaderVoice     Snd08_Voices+$4000
(1)    4/   181E4 : =>FALSE                      if songStart<>*
(1)    4/   181E4 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   181E4 : [4]                          endif
(1)    4/   181E4 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   181E4 : 0DC2                                dc.w    z80_ptr(Snd08_Voices+$4000)
(1)    4/   181E6 : =>FALSE                      else
(1)    4/   181E6 :                                     if MOMPASS>1
(1)    4/   181E6 :                                             if Snd08_Voices+$4000<songStart
(1)    4/   181E6 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   181E6 : [4]                                          endif
(1)    4/   181E6 : [4]                                  endif
(1)    4/   181E6 :                                     dc.w    Snd08_Voices+$4000-songStart
(1)    4/   181E6 : [4]                          endif
(1)    5/   181E6 : =>FALSE              	else
(1)    6/   181E6 :                     	smpsHeaderVoice     Snd08_Voices
(1)    7/   181E6 : [3]                  	endif
(1)    8/   181E6 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   181E6 : 01                          dc.b    $01
(1)    9/   181E7 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   181E7 : 01                          dc.b    $01
(1)   10/   181E8 :                     
(1)   11/   181E8 : =>TRUE               	if ~~fixBugs
(1)   12/   181E8 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd08_FM5+$4000,	$00, $02
(1)   12/   181E8 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   181E8 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   181E8 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   181E8 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   181E8 : [12]                         endif
(1)   12/   181E8 : 8005                        dc.b    $80,cFM5
(1)   12/   181EA :  (MACRO-2)                   CheckedChannelPointer Snd08_FM5+$4000
(1)   12/   181EA : =>TRUE                       if SonicDriverVer<>1
(1)   12/   181EA : EEC1                                dc.w    z80_ptr(Snd08_FM5+$4000)
(1)   12/   181EC : =>FALSE                      else
(1)   12/   181EC :                                     if MOMPASS>1
(1)   12/   181EC :                                             if Snd08_FM5+$4000<songStart
(1)   12/   181EC :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   181EC : [12]                                         endif
(1)   12/   181EC : [12]                                 endif
(1)   12/   181EC :                                     dc.w    Snd08_FM5+$4000-songStart
(1)   12/   181EC : [12]                         endif
(1)   12/   181EC : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   181EC :                                     PSGPitchConvert $00
(1)   12/   181EC : =>TRUE                       else
(1)   12/   181EC : 00                                  dc.b    $00
(1)   12/   181ED : [12]                         endif
(1)   12/   181ED : 02                          dc.b    $02
(1)   13/   181EE : =>FALSE              	else
(1)   14/   181EE :                     	smpsHeaderSFXChannel cFM5, Snd08_FM5,	$00, $02
(1)   15/   181EE : [11]                 	endif
(1)   16/   181EE :                     
(1)   17/   181EE :                     ; FM5 Data
(1)   18/   181EE :                     Snd08_FM5:
(1)   19/   181EE : (MACRO)              	smpsSetvoice        $00
(1)   19/   181EE :  (MACRO-2)                   smpsFMvoice $00
(1)   19/   181EE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   19/   181EE :                                     dc.b    $EF,$00|$80,+$81
(1)   19/   181EE : =>TRUE                       else
(1)   19/   181EE : EF00                                dc.b    $EF,$00
(1)   19/   181F0 : [19]                         endif
(1)   20/   181F0 : 8001                	dc.b	nRst, $01
(1)   21/   181F2 : (MACRO)              	smpsModSet          $03, $01, $5D, $0F
(1)   21/   181F2 : F0                          dc.b    $F0
(1)   21/   181F3 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   21/   181F3 :                                     dc.b    $03+1,$01,$5D,(($0F+1) * $01) & $FF
(1)   21/   181F3 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   21/   181F3 :                                     dc.b    $03-1,$01,$5D,conv0To256($0F)/conv0To256($01)-1
(1)   21/   181F3 : =>TRUE                       else
(1)   21/   181F3 : 0301 5D0F                           dc.b    $03,$01,$5D,$0F
(1)   21/   181F7 : [21]                         endif
(1)   21/   181F7 :                             ;dc.b   $01,$5D,$0F
(1)   22/   181F7 : B00A                	dc.b	nB3, $0A
(1)   23/   181F9 : (MACRO)              	smpsModSet          $00, $00, $00, $00
(1)   23/   181F9 : F0                          dc.b    $F0
(1)   23/   181FA : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   23/   181FA :                                     dc.b    $00+1,$00,$00,(($00+1) * $00) & $FF
(1)   23/   181FA : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)   23/   181FA :                                     dc.b    $00-1,$00,$00,conv0To256($00)/conv0To256($00)-1
(1)   23/   181FA : =>TRUE                       else
(1)   23/   181FA : 0000 0000                           dc.b    $00,$00,$00,$00
(1)   23/   181FE : [23]                         endif
(1)   23/   181FE :                             ;dc.b   $00,$00,$00
(1)   24/   181FE : (MACRO)              	smpsSetvoice        $01
(1)   24/   181FE :  (MACRO-2)                   smpsFMvoice $01
(1)   24/   181FE : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   24/   181FE :                                     dc.b    $EF,$01|$80,+$81
(1)   24/   181FE : =>TRUE                       else
(1)   24/   181FE : EF01                                dc.b    $EF,$01
(1)   24/   18200 : [24]                         endif
(1)   25/   18200 :                     
(1)   26/   18200 :                     Snd08_Loop00:
(1)   27/   18200 : BD02                	dc.b	nC5, $02
(1)   28/   18202 : (MACRO)              	smpsFMAlterVol      $01
(1)   28/   18202 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   28/   18202 :                                     dc.b    $E5,$01,
(1)   28/   18202 : =>TRUE                       else
(1)   28/   18202 : E601                                dc.b    $E6,$01
(1)   28/   18204 : [28]                         endif
(1)   29/   18204 : E7                  	dc.b	smpsNoAttack
(1)   30/   18205 : (MACRO)              	smpsLoop            $00, $19, Snd08_Loop00+$4000
(1)   30/   18205 : F7                          dc.b    $F7
(1)   30/   18206 : 0019                        dc.b    $00,$19
(1)   30/   18208 : =>TRUE                       if SonicDriverVer<>1
(1)   30/   18208 : 00C2                                dc.w    z80_ptr(Snd08_Loop00+$4000)
(1)   30/   1820A : =>FALSE                      else
(1)   30/   1820A :                                     dc.w    Snd08_Loop00+$4000-*-1
(1)   30/   1820A : [30]                         endif
(1)   31/   1820A :                     	; This line appears bugged, as this didn't exist in Sonic 3 & Knuckles.
(1)   32/   1820A : (MACRO)              	smpsFMAlterVol      $E7
(1)   32/   1820A : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   32/   1820A :                                     dc.b    $E5,$E7,
(1)   32/   1820A : =>TRUE                       else
(1)   32/   1820A : E6E7                                dc.b    $E6,$E7
(1)   32/   1820C : [32]                         endif
(1)   33/   1820C : (MACRO)              	smpsStop
(1)   33/   1820C : F2                          dc.b    $F2
(1)   34/   1820D :                     
(1)   35/   1820D :                     Snd08_Voices:
(1)   36/   1820D :                     ;	Voice $00
(1)   37/   1820D :                     ;	$20
(1)   38/   1820D :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(1)   39/   1820D :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
(1)   40/   1820D : (MACRO)              	smpsVcAlgorithm     $00
(1)   40/   1820D : =$0                  vcAlgorithm set $00
(1)   41/   1820D : (MACRO)              	smpsVcFeedback      $04
(1)   41/   1820D : =$4                  vcFeedback set $04
(1)   42/   1820D : (MACRO)              	smpsVcUnusedBits    $00
(1)   42/   1820D : =$0                  vcUnusedBits set $00
(1)   42/   1820D : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   42/   1820D :                                     set vcD1R1Unk,<<5
(1)   42/   1820D :                                     set vcD1R2Unk,<<5
(1)   42/   1820D :                                     set vcD1R3Unk,<<5
(1)   42/   1820D :                                     set vcD1R4Unk,<<5
(1)   42/   1820D : =>TRUE                       else
(1)   42/   1820D : =$0                                  set vcD1R1Unk,0
(1)   42/   1820D : =$0                                  set vcD1R2Unk,0
(1)   42/   1820D : =$0                                  set vcD1R3Unk,0
(1)   42/   1820D : =$0                                  set vcD1R4Unk,0
(1)   42/   1820D : [42]                         endif
(1)   43/   1820D : (MACRO)              	smpsVcDetune        $03, $03, $03, $03
(1)   43/   1820D : =$3                          set vcDT1,$03
(1)   43/   1820D : =$3                          set vcDT2,$03
(1)   43/   1820D : =$3                          set vcDT3,$03
(1)   43/   1820D : =$3                          set vcDT4,$03
(1)   44/   1820D : (MACRO)              	smpsVcCoarseFreq    $01, $00, $05, $06
(1)   44/   1820D : =$1                          set vcCF1,$01
(1)   44/   1820D : =$0                          set vcCF2,$00
(1)   44/   1820D : =$5                          set vcCF3,$05
(1)   44/   1820D : =$6                          set vcCF4,$06
(1)   45/   1820D : (MACRO)              	smpsVcRateScale     $02, $02, $03, $03
(1)   45/   1820D : =$2                          set vcRS1,$02
(1)   45/   1820D : =$2                          set vcRS2,$02
(1)   45/   1820D : =$3                          set vcRS3,$03
(1)   45/   1820D : =$3                          set vcRS4,$03
(1)   46/   1820D : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   46/   1820D : =$1F                         set vcAR1,$1F
(1)   46/   1820D : =$1F                         set vcAR2,$1F
(1)   46/   1820D : =$1F                         set vcAR3,$1F
(1)   46/   1820D : =$1F                         set vcAR4,$1F
(1)   47/   1820D : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   47/   1820D : =>FALSE                      if SourceSMPS2ASM==0
(1)   47/   1820D :                                     set vcAM1,$00<<5
(1)   47/   1820D :                                     set vcAM2,$00<<5
(1)   47/   1820D :                                     set vcAM3,$00<<5
(1)   47/   1820D :                                     set vcAM4,$00<<5
(1)   47/   1820D : =>TRUE                       else
(1)   47/   1820D : =$0                                  set vcAM1,$00<<7
(1)   47/   1820D : =$0                                  set vcAM2,$00<<7
(1)   47/   1820D : =$0                                  set vcAM3,$00<<7
(1)   47/   1820D : =$0                                  set vcAM4,$00<<7
(1)   47/   1820D : [47]                         endif
(1)   48/   1820D : (MACRO)              	smpsVcDecayRate1    $06, $09, $06, $07
(1)   48/   1820D : =$6                          set vcD1R1,$06
(1)   48/   1820D : =$9                          set vcD1R2,$09
(1)   48/   1820D : =$6                          set vcD1R3,$06
(1)   48/   1820D : =$7                          set vcD1R4,$07
(1)   49/   1820D : (MACRO)              	smpsVcDecayRate2    $08, $06, $06, $07
(1)   49/   1820D : =$8                          set vcD2R1,$08
(1)   49/   1820D : =$6                          set vcD2R2,$06
(1)   49/   1820D : =$6                          set vcD2R3,$06
(1)   49/   1820D : =$7                          set vcD2R4,$07
(1)   50/   1820D : (MACRO)              	smpsVcDecayLevel    $0F, $01, $01, $02
(1)   50/   1820D : =$F                          set vcDL1,$0F
(1)   50/   1820D : =$1                          set vcDL2,$01
(1)   50/   1820D : =$1                          set vcDL3,$01
(1)   50/   1820D : =$2                          set vcDL4,$02
(1)   51/   1820D : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   51/   1820D : =$F                          set vcRR1,$0F
(1)   51/   1820D : =$F                          set vcRR2,$0F
(1)   51/   1820D : =$F                          set vcRR3,$0F
(1)   51/   1820D : =$F                          set vcRR4,$0F
(1)   52/   1820D : (MACRO)              	smpsVcTotalLevel    $80, $13, $30, $16
(1)   52/   1820D : =$80                         set vcTL1,$80
(1)   52/   1820D : =$13                         set vcTL2,$13
(1)   52/   1820D : =$30                         set vcTL3,$30
(1)   52/   1820D : =$16                         set vcTL4,$16
(1)   52/   1820D : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   52/   1820E :                     ;   0     1     2     3     4     5     6     7
(1)   52/   1820E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   52/   1820E : =>FALSE                      if SourceSMPS2ASM==0
(1)   52/   1820E :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   52/   1820E :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   52/   1820E :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   52/   1820E :                                     set vcTLMask1,$80
(1)   52/   1820E : =>TRUE                       else
(1)   52/   1820E : =$0                                  set vcTLMask4,0
(1)   52/   1820E : =$0                                  set vcTLMask3,0
(1)   52/   1820E : =$0                                  set vcTLMask2,0
(1)   52/   1820E : =$0                                  set vcTLMask1,0
(1)   52/   1820E : [52]                         endif
(1)   52/   1820E :                     
(1)   52/   1820E : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   52/   1820E :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   52/   1820E :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   52/   1820E :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   52/   1820E :                                     set vcTLMask1,$80
(1)   52/   1820E :                                     set vcTL1,vcTL1&$7F
(1)   52/   1820E :                                     set vcTL2,vcTL2&$7F
(1)   52/   1820E :                                     set vcTL3,vcTL3&$7F
(1)   52/   1820E :                                     set vcTL4,vcTL4&$7F
(1)   52/   1820E : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   52/   1820E :                                     if MOMPASS>1
(1)   52/   1820E :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   52/   1820E : [52]                                 endif
(1)   52/   1820E : [52]                         endif
(1)   52/   1820E :                     
(1)   52/   1820E : =>FALSE                      if SonicDriverVer==2
(1)   52/   1820E :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   52/   1820E :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   52/   1820E :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   52/   1820E :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   52/   1820E :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   52/   1820E :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   52/   1820E : =>TRUE                       else
(1)   52/   1820E : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   52/   18212 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   52/   18216 : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   52/   1821A : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   52/   1821E : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   52/   18222 : 1630 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   52/   18226 : [52]                         endif
(1)   53/   18226 :                     
(1)   54/   18226 :                     ;	Voice $01
(1)   55/   18226 :                     ;	$20
(1)   56/   18226 :                     ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
(1)   57/   18226 :                     ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
(1)   58/   18226 : (MACRO)              	smpsVcAlgorithm     $00
(1)   58/   18226 : =$0                  vcAlgorithm set $00
(1)   59/   18226 : (MACRO)              	smpsVcFeedback      $04
(1)   59/   18226 : =$4                  vcFeedback set $04
(1)   60/   18226 : (MACRO)              	smpsVcUnusedBits    $00
(1)   60/   18226 : =$0                  vcUnusedBits set $00
(1)   60/   18226 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   60/   18226 :                                     set vcD1R1Unk,<<5
(1)   60/   18226 :                                     set vcD1R2Unk,<<5
(1)   60/   18226 :                                     set vcD1R3Unk,<<5
(1)   60/   18226 :                                     set vcD1R4Unk,<<5
(1)   60/   18226 : =>TRUE                       else
(1)   60/   18226 : =$0                                  set vcD1R1Unk,0
(1)   60/   18226 : =$0                                  set vcD1R2Unk,0
(1)   60/   18226 : =$0                                  set vcD1R3Unk,0
(1)   60/   18226 : =$0                                  set vcD1R4Unk,0
(1)   60/   18226 : [60]                         endif
(1)   61/   18226 : (MACRO)              	smpsVcDetune        $03, $03, $03, $03
(1)   61/   18226 : =$3                          set vcDT1,$03
(1)   61/   18226 : =$3                          set vcDT2,$03
(1)   61/   18226 : =$3                          set vcDT3,$03
(1)   61/   18226 : =$3                          set vcDT4,$03
(1)   62/   18226 : (MACRO)              	smpsVcCoarseFreq    $01, $00, $03, $01
(1)   62/   18226 : =$1                          set vcCF1,$01
(1)   62/   18226 : =$0                          set vcCF2,$00
(1)   62/   18226 : =$3                          set vcCF3,$03
(1)   62/   18226 : =$1                          set vcCF4,$01
(1)   63/   18226 : (MACRO)              	smpsVcRateScale     $02, $02, $02, $02
(1)   63/   18226 : =$2                          set vcRS1,$02
(1)   63/   18226 : =$2                          set vcRS2,$02
(1)   63/   18226 : =$2                          set vcRS3,$02
(1)   63/   18226 : =$2                          set vcRS4,$02
(1)   64/   18226 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   64/   18226 : =$1F                         set vcAR1,$1F
(1)   64/   18226 : =$1F                         set vcAR2,$1F
(1)   64/   18226 : =$1F                         set vcAR3,$1F
(1)   64/   18226 : =$1F                         set vcAR4,$1F
(1)   65/   18226 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   65/   18226 : =>FALSE                      if SourceSMPS2ASM==0
(1)   65/   18226 :                                     set vcAM1,$00<<5
(1)   65/   18226 :                                     set vcAM2,$00<<5
(1)   65/   18226 :                                     set vcAM3,$00<<5
(1)   65/   18226 :                                     set vcAM4,$00<<5
(1)   65/   18226 : =>TRUE                       else
(1)   65/   18226 : =$0                                  set vcAM1,$00<<7
(1)   65/   18226 : =$0                                  set vcAM2,$00<<7
(1)   65/   18226 : =$0                                  set vcAM3,$00<<7
(1)   65/   18226 : =$0                                  set vcAM4,$00<<7
(1)   65/   18226 : [65]                         endif
(1)   66/   18226 : (MACRO)              	smpsVcDecayRate1    $06, $09, $06, $07
(1)   66/   18226 : =$6                          set vcD1R1,$06
(1)   66/   18226 : =$9                          set vcD1R2,$09
(1)   66/   18226 : =$6                          set vcD1R3,$06
(1)   66/   18226 : =$7                          set vcD1R4,$07
(1)   67/   18226 : (MACRO)              	smpsVcDecayRate2    $08, $06, $06, $07
(1)   67/   18226 : =$8                          set vcD2R1,$08
(1)   67/   18226 : =$6                          set vcD2R2,$06
(1)   67/   18226 : =$6                          set vcD2R3,$06
(1)   67/   18226 : =$7                          set vcD2R4,$07
(1)   68/   18226 : (MACRO)              	smpsVcDecayLevel    $0F, $01, $01, $02
(1)   68/   18226 : =$F                          set vcDL1,$0F
(1)   68/   18226 : =$1                          set vcDL2,$01
(1)   68/   18226 : =$1                          set vcDL3,$01
(1)   68/   18226 : =$2                          set vcDL4,$02
(1)   69/   18226 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   69/   18226 : =$F                          set vcRR1,$0F
(1)   69/   18226 : =$F                          set vcRR2,$0F
(1)   69/   18226 : =$F                          set vcRR3,$0F
(1)   69/   18226 : =$F                          set vcRR4,$0F
(1)   70/   18226 : (MACRO)              	smpsVcTotalLevel    $80, $11, $23, $19
(1)   70/   18226 : =$80                         set vcTL1,$80
(1)   70/   18226 : =$11                         set vcTL2,$11
(1)   70/   18226 : =$23                         set vcTL3,$23
(1)   70/   18226 : =$19                         set vcTL4,$19
(1)   70/   18226 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   70/   18227 :                     ;   0     1     2     3     4     5     6     7
(1)   70/   18227 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   70/   18227 : =>FALSE                      if SourceSMPS2ASM==0
(1)   70/   18227 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   70/   18227 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   70/   18227 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   70/   18227 :                                     set vcTLMask1,$80
(1)   70/   18227 : =>TRUE                       else
(1)   70/   18227 : =$0                                  set vcTLMask4,0
(1)   70/   18227 : =$0                                  set vcTLMask3,0
(1)   70/   18227 : =$0                                  set vcTLMask2,0
(1)   70/   18227 : =$0                                  set vcTLMask1,0
(1)   70/   18227 : [70]                         endif
(1)   70/   18227 :                     
(1)   70/   18227 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   70/   18227 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   70/   18227 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   70/   18227 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   70/   18227 :                                     set vcTLMask1,$80
(1)   70/   18227 :                                     set vcTL1,vcTL1&$7F
(1)   70/   18227 :                                     set vcTL2,vcTL2&$7F
(1)   70/   18227 :                                     set vcTL3,vcTL3&$7F
(1)   70/   18227 :                                     set vcTL4,vcTL4&$7F
(1)   70/   18227 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   70/   18227 :                                     if MOMPASS>1
(1)   70/   18227 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   70/   18227 : [70]                                 endif
(1)   70/   18227 : [70]                         endif
(1)   70/   18227 :                     
(1)   70/   18227 : =>FALSE                      if SonicDriverVer==2
(1)   70/   18227 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   70/   18227 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   70/   18227 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   70/   18227 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   70/   18227 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   70/   18227 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   70/   18227 : =>TRUE                       else
(1)   70/   18227 : 3133 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   70/   1822B : 9F9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   70/   1822F : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   70/   18233 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   70/   18237 : 2F1F 1FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   70/   1823B : 1923 1180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   70/   1823F : [70]                         endif
(1)   71/   1823F :                     
(1)   72/   1823F :                     
   18867/   1823F :                     SoundA9:	include	"Sound/SFX/SndA9 - Lamppost.asm" ; Check Point SFX (Same as Sonic 1 SFX A1)
(1)    1/   1823F :                     Snd09_Header:
(1)    2/   1823F : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   1823F :                     
(1)    2/   1823F : =$3                  SourceDriver set 3
(1)    2/   1823F :                     
(1)    2/   1823F : =>TRUE                       if ("1"<>"")
(1)    2/   1823F : =$1                                  set SourceSMPS2ASM,1
(1)    2/   1823F : =>FALSE                      else
(1)    2/   1823F :                                     set SourceSMPS2ASM,0
(1)    2/   1823F : [2]                          endif
(1)    2/   1823F :                     
(1)    2/   1823F : =$1823F              songStart set *
(1)    2/   1823F :                     
(1)    2/   1823F : =>TRUE                       if MOMPASS>1
(1)    2/   1823F : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   1823F :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   1823F : [2]                                  endif
(1)    2/   1823F : [2]                          endif
(1)    2/   1823F :                     
(1)    3/   1823F : =>TRUE               	if ~~fixBugs
(1)    4/   1823F : (MACRO)              	smpsHeaderVoice     Snd09_Voices+$4000
(1)    4/   1823F : =>FALSE                      if songStart<>*
(1)    4/   1823F :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   1823F : [4]                          endif
(1)    4/   1823F : =>TRUE                       if SonicDriverVer<>1
(1)    4/   1823F : 49C2                                dc.w    z80_ptr(Snd09_Voices+$4000)
(1)    4/   18241 : =>FALSE                      else
(1)    4/   18241 :                                     if MOMPASS>1
(1)    4/   18241 :                                             if Snd09_Voices+$4000<songStart
(1)    4/   18241 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   18241 : [4]                                          endif
(1)    4/   18241 : [4]                                  endif
(1)    4/   18241 :                                     dc.w    Snd09_Voices+$4000-songStart
(1)    4/   18241 : [4]                          endif
(1)    5/   18241 : =>FALSE              	else
(1)    6/   18241 :                     	smpsHeaderVoice     Snd09_Voices
(1)    7/   18241 : [3]                  	endif
(1)    8/   18241 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   18241 : 01                          dc.b    $01
(1)    9/   18242 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   18242 : 01                          dc.b    $01
(1)   10/   18243 :                     
(1)   11/   18243 : =>TRUE               	if ~~fixBugs
(1)   12/   18243 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd09_FM5+$4000,	$00, $01
(1)   12/   18243 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18243 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18243 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18243 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18243 : [12]                         endif
(1)   12/   18243 : 8005                        dc.b    $80,cFM5
(1)   12/   18245 :  (MACRO-2)                   CheckedChannelPointer Snd09_FM5+$4000
(1)   12/   18245 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   18245 : 62C2                                dc.w    z80_ptr(Snd09_FM5+$4000)
(1)   12/   18247 : =>FALSE                      else
(1)   12/   18247 :                                     if MOMPASS>1
(1)   12/   18247 :                                             if Snd09_FM5+$4000<songStart
(1)   12/   18247 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   18247 : [12]                                         endif
(1)   12/   18247 : [12]                                 endif
(1)   12/   18247 :                                     dc.w    Snd09_FM5+$4000-songStart
(1)   12/   18247 : [12]                         endif
(1)   12/   18247 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   18247 :                                     PSGPitchConvert $00
(1)   12/   18247 : =>TRUE                       else
(1)   12/   18247 : 00                                  dc.b    $00
(1)   12/   18248 : [12]                         endif
(1)   12/   18248 : 01                          dc.b    $01
(1)   13/   18249 : =>FALSE              	else
(1)   14/   18249 :                     	smpsHeaderSFXChannel cFM5, Snd09_FM5,	$00, $01
(1)   15/   18249 : [11]                 	endif
(1)   16/   18249 :                     
(1)   17/   18249 :                     Snd09_Voices:
(1)   18/   18249 :                     ;	Voice $00
(1)   19/   18249 :                     ;	$3C
(1)   20/   18249 :                     ;	$05, $01, $0A, $01, 	$56, $5C, $5C, $5C, 	$0E, $11, $11, $11
(1)   21/   18249 :                     ;	$09, $0A, $06, $0A, 	$4F, $3F, $3F, $3F, 	$17, $80, $20, $80
(1)   22/   18249 : (MACRO)              	smpsVcAlgorithm     $04
(1)   22/   18249 : =$4                  vcAlgorithm set $04
(1)   23/   18249 : (MACRO)              	smpsVcFeedback      $07
(1)   23/   18249 : =$7                  vcFeedback set $07
(1)   24/   18249 : (MACRO)              	smpsVcUnusedBits    $00
(1)   24/   18249 : =$0                  vcUnusedBits set $00
(1)   24/   18249 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   24/   18249 :                                     set vcD1R1Unk,<<5
(1)   24/   18249 :                                     set vcD1R2Unk,<<5
(1)   24/   18249 :                                     set vcD1R3Unk,<<5
(1)   24/   18249 :                                     set vcD1R4Unk,<<5
(1)   24/   18249 : =>TRUE                       else
(1)   24/   18249 : =$0                                  set vcD1R1Unk,0
(1)   24/   18249 : =$0                                  set vcD1R2Unk,0
(1)   24/   18249 : =$0                                  set vcD1R3Unk,0
(1)   24/   18249 : =$0                                  set vcD1R4Unk,0
(1)   24/   18249 : [24]                         endif
(1)   25/   18249 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   25/   18249 : =$0                          set vcDT1,$00
(1)   25/   18249 : =$0                          set vcDT2,$00
(1)   25/   18249 : =$0                          set vcDT3,$00
(1)   25/   18249 : =$0                          set vcDT4,$00
(1)   26/   18249 : (MACRO)              	smpsVcCoarseFreq    $01, $0A, $01, $05
(1)   26/   18249 : =$1                          set vcCF1,$01
(1)   26/   18249 : =$A                          set vcCF2,$0A
(1)   26/   18249 : =$1                          set vcCF3,$01
(1)   26/   18249 : =$5                          set vcCF4,$05
(1)   27/   18249 : (MACRO)              	smpsVcRateScale     $01, $01, $01, $01
(1)   27/   18249 : =$1                          set vcRS1,$01
(1)   27/   18249 : =$1                          set vcRS2,$01
(1)   27/   18249 : =$1                          set vcRS3,$01
(1)   27/   18249 : =$1                          set vcRS4,$01
(1)   28/   18249 : (MACRO)              	smpsVcAttackRate    $1C, $1C, $1C, $16
(1)   28/   18249 : =$1C                         set vcAR1,$1C
(1)   28/   18249 : =$1C                         set vcAR2,$1C
(1)   28/   18249 : =$1C                         set vcAR3,$1C
(1)   28/   18249 : =$16                         set vcAR4,$16
(1)   29/   18249 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   29/   18249 : =>FALSE                      if SourceSMPS2ASM==0
(1)   29/   18249 :                                     set vcAM1,$00<<5
(1)   29/   18249 :                                     set vcAM2,$00<<5
(1)   29/   18249 :                                     set vcAM3,$00<<5
(1)   29/   18249 :                                     set vcAM4,$00<<5
(1)   29/   18249 : =>TRUE                       else
(1)   29/   18249 : =$0                                  set vcAM1,$00<<7
(1)   29/   18249 : =$0                                  set vcAM2,$00<<7
(1)   29/   18249 : =$0                                  set vcAM3,$00<<7
(1)   29/   18249 : =$0                                  set vcAM4,$00<<7
(1)   29/   18249 : [29]                         endif
(1)   30/   18249 : (MACRO)              	smpsVcDecayRate1    $11, $11, $11, $0E
(1)   30/   18249 : =$11                         set vcD1R1,$11
(1)   30/   18249 : =$11                         set vcD1R2,$11
(1)   30/   18249 : =$11                         set vcD1R3,$11
(1)   30/   18249 : =$E                          set vcD1R4,$0E
(1)   31/   18249 : (MACRO)              	smpsVcDecayRate2    $0A, $06, $0A, $09
(1)   31/   18249 : =$A                          set vcD2R1,$0A
(1)   31/   18249 : =$6                          set vcD2R2,$06
(1)   31/   18249 : =$A                          set vcD2R3,$0A
(1)   31/   18249 : =$9                          set vcD2R4,$09
(1)   32/   18249 : (MACRO)              	smpsVcDecayLevel    $03, $03, $03, $04
(1)   32/   18249 : =$3                          set vcDL1,$03
(1)   32/   18249 : =$3                          set vcDL2,$03
(1)   32/   18249 : =$3                          set vcDL3,$03
(1)   32/   18249 : =$4                          set vcDL4,$04
(1)   33/   18249 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   33/   18249 : =$F                          set vcRR1,$0F
(1)   33/   18249 : =$F                          set vcRR2,$0F
(1)   33/   18249 : =$F                          set vcRR3,$0F
(1)   33/   18249 : =$F                          set vcRR4,$0F
(1)   34/   18249 : (MACRO)              	smpsVcTotalLevel    $80, $20, $80, $17
(1)   34/   18249 : =$80                         set vcTL1,$80
(1)   34/   18249 : =$20                         set vcTL2,$20
(1)   34/   18249 : =$80                         set vcTL3,$80
(1)   34/   18249 : =$17                         set vcTL4,$17
(1)   34/   18249 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   34/   1824A :                     ;   0     1     2     3     4     5     6     7
(1)   34/   1824A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   34/   1824A : =>FALSE                      if SourceSMPS2ASM==0
(1)   34/   1824A :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   34/   1824A :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   34/   1824A :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   34/   1824A :                                     set vcTLMask1,$80
(1)   34/   1824A : =>TRUE                       else
(1)   34/   1824A : =$0                                  set vcTLMask4,0
(1)   34/   1824A : =$0                                  set vcTLMask3,0
(1)   34/   1824A : =$0                                  set vcTLMask2,0
(1)   34/   1824A : =$0                                  set vcTLMask1,0
(1)   34/   1824A : [34]                         endif
(1)   34/   1824A :                     
(1)   34/   1824A : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   34/   1824A :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   34/   1824A :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   34/   1824A :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   34/   1824A :                                     set vcTLMask1,$80
(1)   34/   1824A :                                     set vcTL1,vcTL1&$7F
(1)   34/   1824A :                                     set vcTL2,vcTL2&$7F
(1)   34/   1824A :                                     set vcTL3,vcTL3&$7F
(1)   34/   1824A :                                     set vcTL4,vcTL4&$7F
(1)   34/   1824A : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   34/   1824A :                                     if MOMPASS>1
(1)   34/   1824A :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   34/   1824A : [34]                                 endif
(1)   34/   1824A : [34]                         endif
(1)   34/   1824A :                     
(1)   34/   1824A : =>FALSE                      if SonicDriverVer==2
(1)   34/   1824A :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   34/   1824A :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   34/   1824A :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   34/   1824A :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   34/   1824A :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   34/   1824A :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   34/   1824A : =>TRUE                       else
(1)   34/   1824A : 0501 0A01                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   34/   1824E : 565C 5C5C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   34/   18252 : 0E11 1111                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   34/   18256 : 090A 060A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   34/   1825A : 4F3F 3F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   34/   1825E : 1780 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   34/   18262 : [34]                         endif
(1)   35/   18262 :                     
(1)   36/   18262 :                     
(1)   37/   18262 :                     ; FM5 Data
(1)   38/   18262 :                     Snd09_FM5:
(1)   39/   18262 : (MACRO)              	smpsSetvoice        $00
(1)   39/   18262 :  (MACRO-2)                   smpsFMvoice $00
(1)   39/   18262 : =>FALSE                      if (SonicDriverVer>=3)&&(""<>"")
(1)   39/   18262 :                                     dc.b    $EF,$00|$80,+$81
(1)   39/   18262 : =>TRUE                       else
(1)   39/   18262 : EF00                                dc.b    $EF,$00
(1)   39/   18264 : [39]                         endif
(1)   40/   18264 : BD06 BA16           	dc.b	nC5, $06, nA4, $16
(1)   41/   18268 : (MACRO)              	smpsStop
(1)   41/   18268 : F2                          dc.b    $F2
(1)   42/   18269 :                     
   18868/   18269 :                     ; ---------------------------------------------------------------------------
   18869/   18269 :                     ; these SFX below play Nothing (plays F2 straight away and does nothing)
   18870/   18269 :                     ; however they have the same SMPS Instrument in each of them ("blurrr.. (buzzer) noise with static")
   18871/   18269 :                     ; I'm asuming these are just simply blank SFX slots ready to be used when the sound
   18872/   18269 :                     ; programmers needed them.
   18873/   18269 :                     ; ---------------------------------------------------------------------------
   18874/   18269 :                     SoundAA:	include	"Sound/SFX/SndAA.asm"
(1)    1/   18269 :                     Snd0A_Header:
(1)    2/   18269 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   18269 :                     
(1)    2/   18269 : =$3                  SourceDriver set 3
(1)    2/   18269 :                     
(1)    2/   18269 : =>TRUE                       if ("1"<>"")
(1)    2/   18269 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   18269 : =>FALSE                      else
(1)    2/   18269 :                                     set SourceSMPS2ASM,0
(1)    2/   18269 : [2]                          endif
(1)    2/   18269 :                     
(1)    2/   18269 : =$18269              songStart set *
(1)    2/   18269 :                     
(1)    2/   18269 : =>TRUE                       if MOMPASS>1
(1)    2/   18269 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   18269 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   18269 : [2]                                  endif
(1)    2/   18269 : [2]                          endif
(1)    2/   18269 :                     
(1)    3/   18269 : =>TRUE               	if ~~fixBugs
(1)    4/   18269 : (MACRO)              	smpsHeaderVoice     Snd0A_Voices+$4000
(1)    4/   18269 : =>FALSE                      if songStart<>*
(1)    4/   18269 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   18269 : [4]                          endif
(1)    4/   18269 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   18269 : 74C2                                dc.w    z80_ptr(Snd0A_Voices+$4000)
(1)    4/   1826B : =>FALSE                      else
(1)    4/   1826B :                                     if MOMPASS>1
(1)    4/   1826B :                                             if Snd0A_Voices+$4000<songStart
(1)    4/   1826B :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   1826B : [4]                                          endif
(1)    4/   1826B : [4]                                  endif
(1)    4/   1826B :                                     dc.w    Snd0A_Voices+$4000-songStart
(1)    4/   1826B : [4]                          endif
(1)    5/   1826B : =>FALSE              	else
(1)    6/   1826B :                     	smpsHeaderVoice     Snd0A_Voices
(1)    7/   1826B : [3]                  	endif
(1)    8/   1826B : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   1826B : 01                          dc.b    $01
(1)    9/   1826C : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   1826C : 01                          dc.b    $01
(1)   10/   1826D :                     
(1)   11/   1826D : =>TRUE               	if ~~fixBugs
(1)   12/   1826D : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd0A_FM5+$4000,	$00, $00
(1)   12/   1826D : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   1826D :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   1826D : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   1826D :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   1826D : [12]                         endif
(1)   12/   1826D : 8005                        dc.b    $80,cFM5
(1)   12/   1826F :  (MACRO-2)                   CheckedChannelPointer Snd0A_FM5+$4000
(1)   12/   1826F : =>TRUE                       if SonicDriverVer<>1
(1)   12/   1826F : 73C2                                dc.w    z80_ptr(Snd0A_FM5+$4000)
(1)   12/   18271 : =>FALSE                      else
(1)   12/   18271 :                                     if MOMPASS>1
(1)   12/   18271 :                                             if Snd0A_FM5+$4000<songStart
(1)   12/   18271 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   18271 : [12]                                         endif
(1)   12/   18271 : [12]                                 endif
(1)   12/   18271 :                                     dc.w    Snd0A_FM5+$4000-songStart
(1)   12/   18271 : [12]                         endif
(1)   12/   18271 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   18271 :                                     PSGPitchConvert $00
(1)   12/   18271 : =>TRUE                       else
(1)   12/   18271 : 00                                  dc.b    $00
(1)   12/   18272 : [12]                         endif
(1)   12/   18272 : 00                          dc.b    $00
(1)   13/   18273 : =>FALSE              	else
(1)   14/   18273 :                     	smpsHeaderSFXChannel cFM5, Snd0A_FM5,	$00, $00
(1)   15/   18273 : [11]                 	endif
(1)   16/   18273 :                     
(1)   17/   18273 :                     ; FM5 Data
(1)   18/   18273 :                     Snd0A_FM5:
(1)   19/   18273 : (MACRO)              	smpsStop
(1)   19/   18273 : F2                          dc.b    $F2
(1)   20/   18274 :                     
(1)   21/   18274 :                     Snd0A_Voices:
(1)   22/   18274 :                     ;	Voice $00 (unused)
(1)   23/   18274 :                     ;	$3C
(1)   24/   18274 :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   25/   18274 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $80, $00, $80
(1)   26/   18274 : (MACRO)              	smpsVcAlgorithm     $04
(1)   26/   18274 : =$4                  vcAlgorithm set $04
(1)   27/   18274 : (MACRO)              	smpsVcFeedback      $07
(1)   27/   18274 : =$7                  vcFeedback set $07
(1)   28/   18274 : (MACRO)              	smpsVcUnusedBits    $00
(1)   28/   18274 : =$0                  vcUnusedBits set $00
(1)   28/   18274 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   28/   18274 :                                     set vcD1R1Unk,<<5
(1)   28/   18274 :                                     set vcD1R2Unk,<<5
(1)   28/   18274 :                                     set vcD1R3Unk,<<5
(1)   28/   18274 :                                     set vcD1R4Unk,<<5
(1)   28/   18274 : =>TRUE                       else
(1)   28/   18274 : =$0                                  set vcD1R1Unk,0
(1)   28/   18274 : =$0                                  set vcD1R2Unk,0
(1)   28/   18274 : =$0                                  set vcD1R3Unk,0
(1)   28/   18274 : =$0                                  set vcD1R4Unk,0
(1)   28/   18274 : [28]                         endif
(1)   29/   18274 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   29/   18274 : =$0                          set vcDT1,$00
(1)   29/   18274 : =$0                          set vcDT2,$00
(1)   29/   18274 : =$0                          set vcDT3,$00
(1)   29/   18274 : =$0                          set vcDT4,$00
(1)   30/   18274 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)   30/   18274 : =$1                          set vcCF1,$01
(1)   30/   18274 : =$1                          set vcCF2,$01
(1)   30/   18274 : =$1                          set vcCF3,$01
(1)   30/   18274 : =$1                          set vcCF4,$01
(1)   31/   18274 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   31/   18274 : =$0                          set vcRS1,$00
(1)   31/   18274 : =$0                          set vcRS2,$00
(1)   31/   18274 : =$0                          set vcRS3,$00
(1)   31/   18274 : =$0                          set vcRS4,$00
(1)   32/   18274 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   32/   18274 : =$1F                         set vcAR1,$1F
(1)   32/   18274 : =$1F                         set vcAR2,$1F
(1)   32/   18274 : =$1F                         set vcAR3,$1F
(1)   32/   18274 : =$1F                         set vcAR4,$1F
(1)   33/   18274 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   18274 : =>FALSE                      if SourceSMPS2ASM==0
(1)   33/   18274 :                                     set vcAM1,$00<<5
(1)   33/   18274 :                                     set vcAM2,$00<<5
(1)   33/   18274 :                                     set vcAM3,$00<<5
(1)   33/   18274 :                                     set vcAM4,$00<<5
(1)   33/   18274 : =>TRUE                       else
(1)   33/   18274 : =$0                                  set vcAM1,$00<<7
(1)   33/   18274 : =$0                                  set vcAM2,$00<<7
(1)   33/   18274 : =$0                                  set vcAM3,$00<<7
(1)   33/   18274 : =$0                                  set vcAM4,$00<<7
(1)   33/   18274 : [33]                         endif
(1)   34/   18274 : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)   34/   18274 : =$0                          set vcD1R1,$00
(1)   34/   18274 : =$0                          set vcD1R2,$00
(1)   34/   18274 : =$0                          set vcD1R3,$00
(1)   34/   18274 : =$0                          set vcD1R4,$00
(1)   35/   18274 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   35/   18274 : =$0                          set vcD2R1,$00
(1)   35/   18274 : =$0                          set vcD2R2,$00
(1)   35/   18274 : =$0                          set vcD2R3,$00
(1)   35/   18274 : =$0                          set vcD2R4,$00
(1)   36/   18274 : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)   36/   18274 : =$0                          set vcDL1,$00
(1)   36/   18274 : =$0                          set vcDL2,$00
(1)   36/   18274 : =$0                          set vcDL3,$00
(1)   36/   18274 : =$0                          set vcDL4,$00
(1)   37/   18274 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   18274 : =$F                          set vcRR1,$0F
(1)   37/   18274 : =$F                          set vcRR2,$0F
(1)   37/   18274 : =$F                          set vcRR3,$0F
(1)   37/   18274 : =$F                          set vcRR4,$0F
(1)   38/   18274 : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   38/   18274 : =$80                         set vcTL1,$80
(1)   38/   18274 : =$0                          set vcTL2,$00
(1)   38/   18274 : =$80                         set vcTL3,$80
(1)   38/   18274 : =$0                          set vcTL4,$00
(1)   38/   18274 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   18275 :                     ;   0     1     2     3     4     5     6     7
(1)   38/   18275 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   18275 : =>FALSE                      if SourceSMPS2ASM==0
(1)   38/   18275 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18275 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18275 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18275 :                                     set vcTLMask1,$80
(1)   38/   18275 : =>TRUE                       else
(1)   38/   18275 : =$0                                  set vcTLMask4,0
(1)   38/   18275 : =$0                                  set vcTLMask3,0
(1)   38/   18275 : =$0                                  set vcTLMask2,0
(1)   38/   18275 : =$0                                  set vcTLMask1,0
(1)   38/   18275 : [38]                         endif
(1)   38/   18275 :                     
(1)   38/   18275 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   18275 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18275 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18275 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18275 :                                     set vcTLMask1,$80
(1)   38/   18275 :                                     set vcTL1,vcTL1&$7F
(1)   38/   18275 :                                     set vcTL2,vcTL2&$7F
(1)   38/   18275 :                                     set vcTL3,vcTL3&$7F
(1)   38/   18275 :                                     set vcTL4,vcTL4&$7F
(1)   38/   18275 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   38/   18275 :                                     if MOMPASS>1
(1)   38/   18275 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   38/   18275 : [38]                                 endif
(1)   38/   18275 : [38]                         endif
(1)   38/   18275 :                     
(1)   38/   18275 : =>FALSE                      if SonicDriverVer==2
(1)   38/   18275 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   38/   18275 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   38/   18275 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18275 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   38/   18275 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   38/   18275 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   38/   18275 : =>TRUE                       else
(1)   38/   18275 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   18279 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   1827D : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18281 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   18285 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   18289 : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   1828D : [38]                         endif
(1)   39/   1828D :                     
   18875/   1828D :                     SoundAB:	include	"Sound/SFX/SndAB.asm"
(1)    1/   1828D :                     Snd0B_Header:
(1)    2/   1828D : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   1828D :                     
(1)    2/   1828D : =$3                  SourceDriver set 3
(1)    2/   1828D :                     
(1)    2/   1828D : =>TRUE                       if ("1"<>"")
(1)    2/   1828D : =$1                                  set SourceSMPS2ASM,1
(1)    2/   1828D : =>FALSE                      else
(1)    2/   1828D :                                     set SourceSMPS2ASM,0
(1)    2/   1828D : [2]                          endif
(1)    2/   1828D :                     
(1)    2/   1828D : =$1828D              songStart set *
(1)    2/   1828D :                     
(1)    2/   1828D : =>TRUE                       if MOMPASS>1
(1)    2/   1828D : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   1828D :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   1828D : [2]                                  endif
(1)    2/   1828D : [2]                          endif
(1)    2/   1828D :                     
(1)    3/   1828D : =>TRUE               	if ~~fixBugs
(1)    4/   1828D : (MACRO)              	smpsHeaderVoice     Snd0B_Voices+$4000
(1)    4/   1828D : =>FALSE                      if songStart<>*
(1)    4/   1828D :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   1828D : [4]                          endif
(1)    4/   1828D : =>TRUE                       if SonicDriverVer<>1
(1)    4/   1828D : 98C2                                dc.w    z80_ptr(Snd0B_Voices+$4000)
(1)    4/   1828F : =>FALSE                      else
(1)    4/   1828F :                                     if MOMPASS>1
(1)    4/   1828F :                                             if Snd0B_Voices+$4000<songStart
(1)    4/   1828F :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   1828F : [4]                                          endif
(1)    4/   1828F : [4]                                  endif
(1)    4/   1828F :                                     dc.w    Snd0B_Voices+$4000-songStart
(1)    4/   1828F : [4]                          endif
(1)    5/   1828F : =>FALSE              	else
(1)    6/   1828F :                     	smpsHeaderVoice     Snd0B_Voices
(1)    7/   1828F : [3]                  	endif
(1)    8/   1828F : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   1828F : 01                          dc.b    $01
(1)    9/   18290 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   18290 : 01                          dc.b    $01
(1)   10/   18291 :                     
(1)   11/   18291 : =>TRUE               	if ~~fixBugs
(1)   12/   18291 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd0B_FM5+$4000,	$00, $00
(1)   12/   18291 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18291 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18291 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18291 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18291 : [12]                         endif
(1)   12/   18291 : 8005                        dc.b    $80,cFM5
(1)   12/   18293 :  (MACRO-2)                   CheckedChannelPointer Snd0B_FM5+$4000
(1)   12/   18293 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   18293 : 97C2                                dc.w    z80_ptr(Snd0B_FM5+$4000)
(1)   12/   18295 : =>FALSE                      else
(1)   12/   18295 :                                     if MOMPASS>1
(1)   12/   18295 :                                             if Snd0B_FM5+$4000<songStart
(1)   12/   18295 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   18295 : [12]                                         endif
(1)   12/   18295 : [12]                                 endif
(1)   12/   18295 :                                     dc.w    Snd0B_FM5+$4000-songStart
(1)   12/   18295 : [12]                         endif
(1)   12/   18295 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   18295 :                                     PSGPitchConvert $00
(1)   12/   18295 : =>TRUE                       else
(1)   12/   18295 : 00                                  dc.b    $00
(1)   12/   18296 : [12]                         endif
(1)   12/   18296 : 00                          dc.b    $00
(1)   13/   18297 : =>FALSE              	else
(1)   14/   18297 :                     	smpsHeaderSFXChannel cFM5, Snd0B_FM5,	$00, $00
(1)   15/   18297 : [11]                 	endif
(1)   16/   18297 :                     
(1)   17/   18297 :                     ; FM5 Data
(1)   18/   18297 :                     Snd0B_FM5:
(1)   19/   18297 : (MACRO)              	smpsStop
(1)   19/   18297 : F2                          dc.b    $F2
(1)   20/   18298 :                     
(1)   21/   18298 :                     Snd0B_Voices:
(1)   22/   18298 :                     ;	Voice $00 (unused)
(1)   23/   18298 :                     ;	$3C
(1)   24/   18298 :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   25/   18298 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $80, $00, $80
(1)   26/   18298 : (MACRO)              	smpsVcAlgorithm     $04
(1)   26/   18298 : =$4                  vcAlgorithm set $04
(1)   27/   18298 : (MACRO)              	smpsVcFeedback      $07
(1)   27/   18298 : =$7                  vcFeedback set $07
(1)   28/   18298 : (MACRO)              	smpsVcUnusedBits    $00
(1)   28/   18298 : =$0                  vcUnusedBits set $00
(1)   28/   18298 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   28/   18298 :                                     set vcD1R1Unk,<<5
(1)   28/   18298 :                                     set vcD1R2Unk,<<5
(1)   28/   18298 :                                     set vcD1R3Unk,<<5
(1)   28/   18298 :                                     set vcD1R4Unk,<<5
(1)   28/   18298 : =>TRUE                       else
(1)   28/   18298 : =$0                                  set vcD1R1Unk,0
(1)   28/   18298 : =$0                                  set vcD1R2Unk,0
(1)   28/   18298 : =$0                                  set vcD1R3Unk,0
(1)   28/   18298 : =$0                                  set vcD1R4Unk,0
(1)   28/   18298 : [28]                         endif
(1)   29/   18298 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   29/   18298 : =$0                          set vcDT1,$00
(1)   29/   18298 : =$0                          set vcDT2,$00
(1)   29/   18298 : =$0                          set vcDT3,$00
(1)   29/   18298 : =$0                          set vcDT4,$00
(1)   30/   18298 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)   30/   18298 : =$1                          set vcCF1,$01
(1)   30/   18298 : =$1                          set vcCF2,$01
(1)   30/   18298 : =$1                          set vcCF3,$01
(1)   30/   18298 : =$1                          set vcCF4,$01
(1)   31/   18298 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   31/   18298 : =$0                          set vcRS1,$00
(1)   31/   18298 : =$0                          set vcRS2,$00
(1)   31/   18298 : =$0                          set vcRS3,$00
(1)   31/   18298 : =$0                          set vcRS4,$00
(1)   32/   18298 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   32/   18298 : =$1F                         set vcAR1,$1F
(1)   32/   18298 : =$1F                         set vcAR2,$1F
(1)   32/   18298 : =$1F                         set vcAR3,$1F
(1)   32/   18298 : =$1F                         set vcAR4,$1F
(1)   33/   18298 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   18298 : =>FALSE                      if SourceSMPS2ASM==0
(1)   33/   18298 :                                     set vcAM1,$00<<5
(1)   33/   18298 :                                     set vcAM2,$00<<5
(1)   33/   18298 :                                     set vcAM3,$00<<5
(1)   33/   18298 :                                     set vcAM4,$00<<5
(1)   33/   18298 : =>TRUE                       else
(1)   33/   18298 : =$0                                  set vcAM1,$00<<7
(1)   33/   18298 : =$0                                  set vcAM2,$00<<7
(1)   33/   18298 : =$0                                  set vcAM3,$00<<7
(1)   33/   18298 : =$0                                  set vcAM4,$00<<7
(1)   33/   18298 : [33]                         endif
(1)   34/   18298 : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)   34/   18298 : =$0                          set vcD1R1,$00
(1)   34/   18298 : =$0                          set vcD1R2,$00
(1)   34/   18298 : =$0                          set vcD1R3,$00
(1)   34/   18298 : =$0                          set vcD1R4,$00
(1)   35/   18298 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   35/   18298 : =$0                          set vcD2R1,$00
(1)   35/   18298 : =$0                          set vcD2R2,$00
(1)   35/   18298 : =$0                          set vcD2R3,$00
(1)   35/   18298 : =$0                          set vcD2R4,$00
(1)   36/   18298 : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)   36/   18298 : =$0                          set vcDL1,$00
(1)   36/   18298 : =$0                          set vcDL2,$00
(1)   36/   18298 : =$0                          set vcDL3,$00
(1)   36/   18298 : =$0                          set vcDL4,$00
(1)   37/   18298 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   18298 : =$F                          set vcRR1,$0F
(1)   37/   18298 : =$F                          set vcRR2,$0F
(1)   37/   18298 : =$F                          set vcRR3,$0F
(1)   37/   18298 : =$F                          set vcRR4,$0F
(1)   38/   18298 : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   38/   18298 : =$80                         set vcTL1,$80
(1)   38/   18298 : =$0                          set vcTL2,$00
(1)   38/   18298 : =$80                         set vcTL3,$80
(1)   38/   18298 : =$0                          set vcTL4,$00
(1)   38/   18298 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   18299 :                     ;   0     1     2     3     4     5     6     7
(1)   38/   18299 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   18299 : =>FALSE                      if SourceSMPS2ASM==0
(1)   38/   18299 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18299 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18299 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18299 :                                     set vcTLMask1,$80
(1)   38/   18299 : =>TRUE                       else
(1)   38/   18299 : =$0                                  set vcTLMask4,0
(1)   38/   18299 : =$0                                  set vcTLMask3,0
(1)   38/   18299 : =$0                                  set vcTLMask2,0
(1)   38/   18299 : =$0                                  set vcTLMask1,0
(1)   38/   18299 : [38]                         endif
(1)   38/   18299 :                     
(1)   38/   18299 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   18299 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18299 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18299 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18299 :                                     set vcTLMask1,$80
(1)   38/   18299 :                                     set vcTL1,vcTL1&$7F
(1)   38/   18299 :                                     set vcTL2,vcTL2&$7F
(1)   38/   18299 :                                     set vcTL3,vcTL3&$7F
(1)   38/   18299 :                                     set vcTL4,vcTL4&$7F
(1)   38/   18299 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   38/   18299 :                                     if MOMPASS>1
(1)   38/   18299 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   38/   18299 : [38]                                 endif
(1)   38/   18299 : [38]                         endif
(1)   38/   18299 :                     
(1)   38/   18299 : =>FALSE                      if SonicDriverVer==2
(1)   38/   18299 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   38/   18299 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   38/   18299 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18299 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   38/   18299 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   38/   18299 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   38/   18299 : =>TRUE                       else
(1)   38/   18299 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   1829D : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   182A1 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   182A5 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   182A9 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   182AD : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   182B1 : [38]                         endif
(1)   39/   182B1 :                     
   18876/   182B1 :                     SoundAC:	include	"Sound/SFX/SndAC.asm"
(1)    1/   182B1 :                     Snd0C_Header:
(1)    2/   182B1 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   182B1 :                     
(1)    2/   182B1 : =$3                  SourceDriver set 3
(1)    2/   182B1 :                     
(1)    2/   182B1 : =>TRUE                       if ("1"<>"")
(1)    2/   182B1 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   182B1 : =>FALSE                      else
(1)    2/   182B1 :                                     set SourceSMPS2ASM,0
(1)    2/   182B1 : [2]                          endif
(1)    2/   182B1 :                     
(1)    2/   182B1 : =$182B1              songStart set *
(1)    2/   182B1 :                     
(1)    2/   182B1 : =>TRUE                       if MOMPASS>1
(1)    2/   182B1 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   182B1 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   182B1 : [2]                                  endif
(1)    2/   182B1 : [2]                          endif
(1)    2/   182B1 :                     
(1)    3/   182B1 : =>TRUE               	if ~~fixBugs
(1)    4/   182B1 : (MACRO)              	smpsHeaderVoice     Snd0C_Voices+$4000
(1)    4/   182B1 : =>FALSE                      if songStart<>*
(1)    4/   182B1 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   182B1 : [4]                          endif
(1)    4/   182B1 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   182B1 : BCC2                                dc.w    z80_ptr(Snd0C_Voices+$4000)
(1)    4/   182B3 : =>FALSE                      else
(1)    4/   182B3 :                                     if MOMPASS>1
(1)    4/   182B3 :                                             if Snd0C_Voices+$4000<songStart
(1)    4/   182B3 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   182B3 : [4]                                          endif
(1)    4/   182B3 : [4]                                  endif
(1)    4/   182B3 :                                     dc.w    Snd0C_Voices+$4000-songStart
(1)    4/   182B3 : [4]                          endif
(1)    5/   182B3 : =>FALSE              	else
(1)    6/   182B3 :                     	smpsHeaderVoice     Snd0C_Voices
(1)    7/   182B3 : [3]                  	endif
(1)    8/   182B3 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   182B3 : 01                          dc.b    $01
(1)    9/   182B4 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   182B4 : 01                          dc.b    $01
(1)   10/   182B5 :                     
(1)   11/   182B5 : =>TRUE               	if ~~fixBugs
(1)   12/   182B5 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd0C_FM5+$4000,	$00, $00
(1)   12/   182B5 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   182B5 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   182B5 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   182B5 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   182B5 : [12]                         endif
(1)   12/   182B5 : 8005                        dc.b    $80,cFM5
(1)   12/   182B7 :  (MACRO-2)                   CheckedChannelPointer Snd0C_FM5+$4000
(1)   12/   182B7 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   182B7 : BBC2                                dc.w    z80_ptr(Snd0C_FM5+$4000)
(1)   12/   182B9 : =>FALSE                      else
(1)   12/   182B9 :                                     if MOMPASS>1
(1)   12/   182B9 :                                             if Snd0C_FM5+$4000<songStart
(1)   12/   182B9 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   182B9 : [12]                                         endif
(1)   12/   182B9 : [12]                                 endif
(1)   12/   182B9 :                                     dc.w    Snd0C_FM5+$4000-songStart
(1)   12/   182B9 : [12]                         endif
(1)   12/   182B9 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   182B9 :                                     PSGPitchConvert $00
(1)   12/   182B9 : =>TRUE                       else
(1)   12/   182B9 : 00                                  dc.b    $00
(1)   12/   182BA : [12]                         endif
(1)   12/   182BA : 00                          dc.b    $00
(1)   13/   182BB : =>FALSE              	else
(1)   14/   182BB :                     	smpsHeaderSFXChannel cFM5, Snd0C_FM5,	$00, $00
(1)   15/   182BB : [11]                 	endif
(1)   16/   182BB :                     
(1)   17/   182BB :                     ; FM5 Data
(1)   18/   182BB :                     Snd0C_FM5:
(1)   19/   182BB : (MACRO)              	smpsStop
(1)   19/   182BB : F2                          dc.b    $F2
(1)   20/   182BC :                     
(1)   21/   182BC :                     Snd0C_Voices:
(1)   22/   182BC :                     ;	Voice $00 (unused)
(1)   23/   182BC :                     ;	$3C
(1)   24/   182BC :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   25/   182BC :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $80, $00, $80
(1)   26/   182BC : (MACRO)              	smpsVcAlgorithm     $04
(1)   26/   182BC : =$4                  vcAlgorithm set $04
(1)   27/   182BC : (MACRO)              	smpsVcFeedback      $07
(1)   27/   182BC : =$7                  vcFeedback set $07
(1)   28/   182BC : (MACRO)              	smpsVcUnusedBits    $00
(1)   28/   182BC : =$0                  vcUnusedBits set $00
(1)   28/   182BC : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   28/   182BC :                                     set vcD1R1Unk,<<5
(1)   28/   182BC :                                     set vcD1R2Unk,<<5
(1)   28/   182BC :                                     set vcD1R3Unk,<<5
(1)   28/   182BC :                                     set vcD1R4Unk,<<5
(1)   28/   182BC : =>TRUE                       else
(1)   28/   182BC : =$0                                  set vcD1R1Unk,0
(1)   28/   182BC : =$0                                  set vcD1R2Unk,0
(1)   28/   182BC : =$0                                  set vcD1R3Unk,0
(1)   28/   182BC : =$0                                  set vcD1R4Unk,0
(1)   28/   182BC : [28]                         endif
(1)   29/   182BC : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   29/   182BC : =$0                          set vcDT1,$00
(1)   29/   182BC : =$0                          set vcDT2,$00
(1)   29/   182BC : =$0                          set vcDT3,$00
(1)   29/   182BC : =$0                          set vcDT4,$00
(1)   30/   182BC : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)   30/   182BC : =$1                          set vcCF1,$01
(1)   30/   182BC : =$1                          set vcCF2,$01
(1)   30/   182BC : =$1                          set vcCF3,$01
(1)   30/   182BC : =$1                          set vcCF4,$01
(1)   31/   182BC : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   31/   182BC : =$0                          set vcRS1,$00
(1)   31/   182BC : =$0                          set vcRS2,$00
(1)   31/   182BC : =$0                          set vcRS3,$00
(1)   31/   182BC : =$0                          set vcRS4,$00
(1)   32/   182BC : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   32/   182BC : =$1F                         set vcAR1,$1F
(1)   32/   182BC : =$1F                         set vcAR2,$1F
(1)   32/   182BC : =$1F                         set vcAR3,$1F
(1)   32/   182BC : =$1F                         set vcAR4,$1F
(1)   33/   182BC : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   182BC : =>FALSE                      if SourceSMPS2ASM==0
(1)   33/   182BC :                                     set vcAM1,$00<<5
(1)   33/   182BC :                                     set vcAM2,$00<<5
(1)   33/   182BC :                                     set vcAM3,$00<<5
(1)   33/   182BC :                                     set vcAM4,$00<<5
(1)   33/   182BC : =>TRUE                       else
(1)   33/   182BC : =$0                                  set vcAM1,$00<<7
(1)   33/   182BC : =$0                                  set vcAM2,$00<<7
(1)   33/   182BC : =$0                                  set vcAM3,$00<<7
(1)   33/   182BC : =$0                                  set vcAM4,$00<<7
(1)   33/   182BC : [33]                         endif
(1)   34/   182BC : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)   34/   182BC : =$0                          set vcD1R1,$00
(1)   34/   182BC : =$0                          set vcD1R2,$00
(1)   34/   182BC : =$0                          set vcD1R3,$00
(1)   34/   182BC : =$0                          set vcD1R4,$00
(1)   35/   182BC : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   35/   182BC : =$0                          set vcD2R1,$00
(1)   35/   182BC : =$0                          set vcD2R2,$00
(1)   35/   182BC : =$0                          set vcD2R3,$00
(1)   35/   182BC : =$0                          set vcD2R4,$00
(1)   36/   182BC : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)   36/   182BC : =$0                          set vcDL1,$00
(1)   36/   182BC : =$0                          set vcDL2,$00
(1)   36/   182BC : =$0                          set vcDL3,$00
(1)   36/   182BC : =$0                          set vcDL4,$00
(1)   37/   182BC : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   182BC : =$F                          set vcRR1,$0F
(1)   37/   182BC : =$F                          set vcRR2,$0F
(1)   37/   182BC : =$F                          set vcRR3,$0F
(1)   37/   182BC : =$F                          set vcRR4,$0F
(1)   38/   182BC : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   38/   182BC : =$80                         set vcTL1,$80
(1)   38/   182BC : =$0                          set vcTL2,$00
(1)   38/   182BC : =$80                         set vcTL3,$80
(1)   38/   182BC : =$0                          set vcTL4,$00
(1)   38/   182BC : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   182BD :                     ;   0     1     2     3     4     5     6     7
(1)   38/   182BD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   182BD : =>FALSE                      if SourceSMPS2ASM==0
(1)   38/   182BD :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   182BD :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   182BD :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   182BD :                                     set vcTLMask1,$80
(1)   38/   182BD : =>TRUE                       else
(1)   38/   182BD : =$0                                  set vcTLMask4,0
(1)   38/   182BD : =$0                                  set vcTLMask3,0
(1)   38/   182BD : =$0                                  set vcTLMask2,0
(1)   38/   182BD : =$0                                  set vcTLMask1,0
(1)   38/   182BD : [38]                         endif
(1)   38/   182BD :                     
(1)   38/   182BD : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   182BD :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   182BD :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   182BD :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   182BD :                                     set vcTLMask1,$80
(1)   38/   182BD :                                     set vcTL1,vcTL1&$7F
(1)   38/   182BD :                                     set vcTL2,vcTL2&$7F
(1)   38/   182BD :                                     set vcTL3,vcTL3&$7F
(1)   38/   182BD :                                     set vcTL4,vcTL4&$7F
(1)   38/   182BD : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   38/   182BD :                                     if MOMPASS>1
(1)   38/   182BD :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   38/   182BD : [38]                                 endif
(1)   38/   182BD : [38]                         endif
(1)   38/   182BD :                     
(1)   38/   182BD : =>FALSE                      if SonicDriverVer==2
(1)   38/   182BD :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   38/   182BD :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   38/   182BD :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   182BD :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   38/   182BD :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   38/   182BD :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   38/   182BD : =>TRUE                       else
(1)   38/   182BD : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   182C1 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   182C5 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   182C9 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   182CD : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   182D1 : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   182D5 : [38]                         endif
(1)   39/   182D5 :                     
   18877/   182D5 :                     SoundAD:	include	"Sound/SFX/SndAD.asm"
(1)    1/   182D5 :                     Snd0D_Header:
(1)    2/   182D5 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   182D5 :                     
(1)    2/   182D5 : =$3                  SourceDriver set 3
(1)    2/   182D5 :                     
(1)    2/   182D5 : =>TRUE                       if ("1"<>"")
(1)    2/   182D5 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   182D5 : =>FALSE                      else
(1)    2/   182D5 :                                     set SourceSMPS2ASM,0
(1)    2/   182D5 : [2]                          endif
(1)    2/   182D5 :                     
(1)    2/   182D5 : =$182D5              songStart set *
(1)    2/   182D5 :                     
(1)    2/   182D5 : =>TRUE                       if MOMPASS>1
(1)    2/   182D5 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   182D5 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   182D5 : [2]                                  endif
(1)    2/   182D5 : [2]                          endif
(1)    2/   182D5 :                     
(1)    3/   182D5 : =>TRUE               	if ~~fixBugs
(1)    4/   182D5 : (MACRO)              	smpsHeaderVoice     Snd0D_Voices+$4000
(1)    4/   182D5 : =>FALSE                      if songStart<>*
(1)    4/   182D5 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   182D5 : [4]                          endif
(1)    4/   182D5 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   182D5 : E0C2                                dc.w    z80_ptr(Snd0D_Voices+$4000)
(1)    4/   182D7 : =>FALSE                      else
(1)    4/   182D7 :                                     if MOMPASS>1
(1)    4/   182D7 :                                             if Snd0D_Voices+$4000<songStart
(1)    4/   182D7 :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   182D7 : [4]                                          endif
(1)    4/   182D7 : [4]                                  endif
(1)    4/   182D7 :                                     dc.w    Snd0D_Voices+$4000-songStart
(1)    4/   182D7 : [4]                          endif
(1)    5/   182D7 : =>FALSE              	else
(1)    6/   182D7 :                     	smpsHeaderVoice     Snd0D_Voices
(1)    7/   182D7 : [3]                  	endif
(1)    8/   182D7 : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   182D7 : 01                          dc.b    $01
(1)    9/   182D8 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   182D8 : 01                          dc.b    $01
(1)   10/   182D9 :                     
(1)   11/   182D9 : =>TRUE               	if ~~fixBugs
(1)   12/   182D9 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd0D_FM5+$4000,	$00, $00
(1)   12/   182D9 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   182D9 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   182D9 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   182D9 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   182D9 : [12]                         endif
(1)   12/   182D9 : 8005                        dc.b    $80,cFM5
(1)   12/   182DB :  (MACRO-2)                   CheckedChannelPointer Snd0D_FM5+$4000
(1)   12/   182DB : =>TRUE                       if SonicDriverVer<>1
(1)   12/   182DB : DFC2                                dc.w    z80_ptr(Snd0D_FM5+$4000)
(1)   12/   182DD : =>FALSE                      else
(1)   12/   182DD :                                     if MOMPASS>1
(1)   12/   182DD :                                             if Snd0D_FM5+$4000<songStart
(1)   12/   182DD :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   182DD : [12]                                         endif
(1)   12/   182DD : [12]                                 endif
(1)   12/   182DD :                                     dc.w    Snd0D_FM5+$4000-songStart
(1)   12/   182DD : [12]                         endif
(1)   12/   182DD : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   182DD :                                     PSGPitchConvert $00
(1)   12/   182DD : =>TRUE                       else
(1)   12/   182DD : 00                                  dc.b    $00
(1)   12/   182DE : [12]                         endif
(1)   12/   182DE : 00                          dc.b    $00
(1)   13/   182DF : =>FALSE              	else
(1)   14/   182DF :                     	smpsHeaderSFXChannel cFM5, Snd0D_FM5,	$00, $00
(1)   15/   182DF : [11]                 	endif
(1)   16/   182DF :                     
(1)   17/   182DF :                     ; FM5 Data
(1)   18/   182DF :                     Snd0D_FM5:
(1)   19/   182DF : (MACRO)              	smpsStop
(1)   19/   182DF : F2                          dc.b    $F2
(1)   20/   182E0 :                     
(1)   21/   182E0 :                     Snd0D_Voices:
(1)   22/   182E0 :                     ;	Voice $00 (unused)
(1)   23/   182E0 :                     ;	$3C
(1)   24/   182E0 :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   25/   182E0 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $80, $00, $80
(1)   26/   182E0 : (MACRO)              	smpsVcAlgorithm     $04
(1)   26/   182E0 : =$4                  vcAlgorithm set $04
(1)   27/   182E0 : (MACRO)              	smpsVcFeedback      $07
(1)   27/   182E0 : =$7                  vcFeedback set $07
(1)   28/   182E0 : (MACRO)              	smpsVcUnusedBits    $00
(1)   28/   182E0 : =$0                  vcUnusedBits set $00
(1)   28/   182E0 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   28/   182E0 :                                     set vcD1R1Unk,<<5
(1)   28/   182E0 :                                     set vcD1R2Unk,<<5
(1)   28/   182E0 :                                     set vcD1R3Unk,<<5
(1)   28/   182E0 :                                     set vcD1R4Unk,<<5
(1)   28/   182E0 : =>TRUE                       else
(1)   28/   182E0 : =$0                                  set vcD1R1Unk,0
(1)   28/   182E0 : =$0                                  set vcD1R2Unk,0
(1)   28/   182E0 : =$0                                  set vcD1R3Unk,0
(1)   28/   182E0 : =$0                                  set vcD1R4Unk,0
(1)   28/   182E0 : [28]                         endif
(1)   29/   182E0 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   29/   182E0 : =$0                          set vcDT1,$00
(1)   29/   182E0 : =$0                          set vcDT2,$00
(1)   29/   182E0 : =$0                          set vcDT3,$00
(1)   29/   182E0 : =$0                          set vcDT4,$00
(1)   30/   182E0 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)   30/   182E0 : =$1                          set vcCF1,$01
(1)   30/   182E0 : =$1                          set vcCF2,$01
(1)   30/   182E0 : =$1                          set vcCF3,$01
(1)   30/   182E0 : =$1                          set vcCF4,$01
(1)   31/   182E0 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   31/   182E0 : =$0                          set vcRS1,$00
(1)   31/   182E0 : =$0                          set vcRS2,$00
(1)   31/   182E0 : =$0                          set vcRS3,$00
(1)   31/   182E0 : =$0                          set vcRS4,$00
(1)   32/   182E0 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   32/   182E0 : =$1F                         set vcAR1,$1F
(1)   32/   182E0 : =$1F                         set vcAR2,$1F
(1)   32/   182E0 : =$1F                         set vcAR3,$1F
(1)   32/   182E0 : =$1F                         set vcAR4,$1F
(1)   33/   182E0 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   182E0 : =>FALSE                      if SourceSMPS2ASM==0
(1)   33/   182E0 :                                     set vcAM1,$00<<5
(1)   33/   182E0 :                                     set vcAM2,$00<<5
(1)   33/   182E0 :                                     set vcAM3,$00<<5
(1)   33/   182E0 :                                     set vcAM4,$00<<5
(1)   33/   182E0 : =>TRUE                       else
(1)   33/   182E0 : =$0                                  set vcAM1,$00<<7
(1)   33/   182E0 : =$0                                  set vcAM2,$00<<7
(1)   33/   182E0 : =$0                                  set vcAM3,$00<<7
(1)   33/   182E0 : =$0                                  set vcAM4,$00<<7
(1)   33/   182E0 : [33]                         endif
(1)   34/   182E0 : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)   34/   182E0 : =$0                          set vcD1R1,$00
(1)   34/   182E0 : =$0                          set vcD1R2,$00
(1)   34/   182E0 : =$0                          set vcD1R3,$00
(1)   34/   182E0 : =$0                          set vcD1R4,$00
(1)   35/   182E0 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   35/   182E0 : =$0                          set vcD2R1,$00
(1)   35/   182E0 : =$0                          set vcD2R2,$00
(1)   35/   182E0 : =$0                          set vcD2R3,$00
(1)   35/   182E0 : =$0                          set vcD2R4,$00
(1)   36/   182E0 : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)   36/   182E0 : =$0                          set vcDL1,$00
(1)   36/   182E0 : =$0                          set vcDL2,$00
(1)   36/   182E0 : =$0                          set vcDL3,$00
(1)   36/   182E0 : =$0                          set vcDL4,$00
(1)   37/   182E0 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   182E0 : =$F                          set vcRR1,$0F
(1)   37/   182E0 : =$F                          set vcRR2,$0F
(1)   37/   182E0 : =$F                          set vcRR3,$0F
(1)   37/   182E0 : =$F                          set vcRR4,$0F
(1)   38/   182E0 : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   38/   182E0 : =$80                         set vcTL1,$80
(1)   38/   182E0 : =$0                          set vcTL2,$00
(1)   38/   182E0 : =$80                         set vcTL3,$80
(1)   38/   182E0 : =$0                          set vcTL4,$00
(1)   38/   182E0 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   182E1 :                     ;   0     1     2     3     4     5     6     7
(1)   38/   182E1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   182E1 : =>FALSE                      if SourceSMPS2ASM==0
(1)   38/   182E1 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   182E1 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   182E1 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   182E1 :                                     set vcTLMask1,$80
(1)   38/   182E1 : =>TRUE                       else
(1)   38/   182E1 : =$0                                  set vcTLMask4,0
(1)   38/   182E1 : =$0                                  set vcTLMask3,0
(1)   38/   182E1 : =$0                                  set vcTLMask2,0
(1)   38/   182E1 : =$0                                  set vcTLMask1,0
(1)   38/   182E1 : [38]                         endif
(1)   38/   182E1 :                     
(1)   38/   182E1 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   182E1 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   182E1 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   182E1 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   182E1 :                                     set vcTLMask1,$80
(1)   38/   182E1 :                                     set vcTL1,vcTL1&$7F
(1)   38/   182E1 :                                     set vcTL2,vcTL2&$7F
(1)   38/   182E1 :                                     set vcTL3,vcTL3&$7F
(1)   38/   182E1 :                                     set vcTL4,vcTL4&$7F
(1)   38/   182E1 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   38/   182E1 :                                     if MOMPASS>1
(1)   38/   182E1 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   38/   182E1 : [38]                                 endif
(1)   38/   182E1 : [38]                         endif
(1)   38/   182E1 :                     
(1)   38/   182E1 : =>FALSE                      if SonicDriverVer==2
(1)   38/   182E1 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   38/   182E1 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   38/   182E1 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   182E1 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   38/   182E1 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   38/   182E1 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   38/   182E1 : =>TRUE                       else
(1)   38/   182E1 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   182E5 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   182E9 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   182ED : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   182F1 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   182F5 : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   182F9 : [38]                         endif
(1)   39/   182F9 :                     
   18878/   182F9 :                     SoundAE:	include	"Sound/SFX/SndAE.asm"
(1)    1/   182F9 :                     Snd0E_Header:
(1)    2/   182F9 : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   182F9 :                     
(1)    2/   182F9 : =$3                  SourceDriver set 3
(1)    2/   182F9 :                     
(1)    2/   182F9 : =>TRUE                       if ("1"<>"")
(1)    2/   182F9 : =$1                                  set SourceSMPS2ASM,1
(1)    2/   182F9 : =>FALSE                      else
(1)    2/   182F9 :                                     set SourceSMPS2ASM,0
(1)    2/   182F9 : [2]                          endif
(1)    2/   182F9 :                     
(1)    2/   182F9 : =$182F9              songStart set *
(1)    2/   182F9 :                     
(1)    2/   182F9 : =>TRUE                       if MOMPASS>1
(1)    2/   182F9 : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   182F9 :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   182F9 : [2]                                  endif
(1)    2/   182F9 : [2]                          endif
(1)    2/   182F9 :                     
(1)    3/   182F9 : =>TRUE               	if ~~fixBugs
(1)    4/   182F9 : (MACRO)              	smpsHeaderVoice     Snd0E_Voices+$4000
(1)    4/   182F9 : =>FALSE                      if songStart<>*
(1)    4/   182F9 :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   182F9 : [4]                          endif
(1)    4/   182F9 : =>TRUE                       if SonicDriverVer<>1
(1)    4/   182F9 : 04C3                                dc.w    z80_ptr(Snd0E_Voices+$4000)
(1)    4/   182FB : =>FALSE                      else
(1)    4/   182FB :                                     if MOMPASS>1
(1)    4/   182FB :                                             if Snd0E_Voices+$4000<songStart
(1)    4/   182FB :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   182FB : [4]                                          endif
(1)    4/   182FB : [4]                                  endif
(1)    4/   182FB :                                     dc.w    Snd0E_Voices+$4000-songStart
(1)    4/   182FB : [4]                          endif
(1)    5/   182FB : =>FALSE              	else
(1)    6/   182FB :                     	smpsHeaderVoice     Snd0E_Voices
(1)    7/   182FB : [3]                  	endif
(1)    8/   182FB : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   182FB : 01                          dc.b    $01
(1)    9/   182FC : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   182FC : 01                          dc.b    $01
(1)   10/   182FD :                     
(1)   11/   182FD : =>TRUE               	if ~~fixBugs
(1)   12/   182FD : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd0E_FM5+$4000,	$00, $00
(1)   12/   182FD : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   182FD :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   182FD : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   182FD :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   182FD : [12]                         endif
(1)   12/   182FD : 8005                        dc.b    $80,cFM5
(1)   12/   182FF :  (MACRO-2)                   CheckedChannelPointer Snd0E_FM5+$4000
(1)   12/   182FF : =>TRUE                       if SonicDriverVer<>1
(1)   12/   182FF : 03C3                                dc.w    z80_ptr(Snd0E_FM5+$4000)
(1)   12/   18301 : =>FALSE                      else
(1)   12/   18301 :                                     if MOMPASS>1
(1)   12/   18301 :                                             if Snd0E_FM5+$4000<songStart
(1)   12/   18301 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   18301 : [12]                                         endif
(1)   12/   18301 : [12]                                 endif
(1)   12/   18301 :                                     dc.w    Snd0E_FM5+$4000-songStart
(1)   12/   18301 : [12]                         endif
(1)   12/   18301 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   18301 :                                     PSGPitchConvert $00
(1)   12/   18301 : =>TRUE                       else
(1)   12/   18301 : 00                                  dc.b    $00
(1)   12/   18302 : [12]                         endif
(1)   12/   18302 : 00                          dc.b    $00
(1)   13/   18303 : =>FALSE              	else
(1)   14/   18303 :                     	smpsHeaderSFXChannel cFM5, Snd0E_FM5,	$00, $00
(1)   15/   18303 : [11]                 	endif
(1)   16/   18303 :                     
(1)   17/   18303 :                     ; FM5 Data
(1)   18/   18303 :                     Snd0E_FM5:
(1)   19/   18303 : (MACRO)              	smpsStop
(1)   19/   18303 : F2                          dc.b    $F2
(1)   20/   18304 :                     
(1)   21/   18304 :                     Snd0E_Voices:
(1)   22/   18304 :                     ;	Voice $00 (unused)
(1)   23/   18304 :                     ;	$3C
(1)   24/   18304 :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   25/   18304 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $80, $00, $80
(1)   26/   18304 : (MACRO)              	smpsVcAlgorithm     $04
(1)   26/   18304 : =$4                  vcAlgorithm set $04
(1)   27/   18304 : (MACRO)              	smpsVcFeedback      $07
(1)   27/   18304 : =$7                  vcFeedback set $07
(1)   28/   18304 : (MACRO)              	smpsVcUnusedBits    $00
(1)   28/   18304 : =$0                  vcUnusedBits set $00
(1)   28/   18304 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   28/   18304 :                                     set vcD1R1Unk,<<5
(1)   28/   18304 :                                     set vcD1R2Unk,<<5
(1)   28/   18304 :                                     set vcD1R3Unk,<<5
(1)   28/   18304 :                                     set vcD1R4Unk,<<5
(1)   28/   18304 : =>TRUE                       else
(1)   28/   18304 : =$0                                  set vcD1R1Unk,0
(1)   28/   18304 : =$0                                  set vcD1R2Unk,0
(1)   28/   18304 : =$0                                  set vcD1R3Unk,0
(1)   28/   18304 : =$0                                  set vcD1R4Unk,0
(1)   28/   18304 : [28]                         endif
(1)   29/   18304 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   29/   18304 : =$0                          set vcDT1,$00
(1)   29/   18304 : =$0                          set vcDT2,$00
(1)   29/   18304 : =$0                          set vcDT3,$00
(1)   29/   18304 : =$0                          set vcDT4,$00
(1)   30/   18304 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)   30/   18304 : =$1                          set vcCF1,$01
(1)   30/   18304 : =$1                          set vcCF2,$01
(1)   30/   18304 : =$1                          set vcCF3,$01
(1)   30/   18304 : =$1                          set vcCF4,$01
(1)   31/   18304 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   31/   18304 : =$0                          set vcRS1,$00
(1)   31/   18304 : =$0                          set vcRS2,$00
(1)   31/   18304 : =$0                          set vcRS3,$00
(1)   31/   18304 : =$0                          set vcRS4,$00
(1)   32/   18304 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   32/   18304 : =$1F                         set vcAR1,$1F
(1)   32/   18304 : =$1F                         set vcAR2,$1F
(1)   32/   18304 : =$1F                         set vcAR3,$1F
(1)   32/   18304 : =$1F                         set vcAR4,$1F
(1)   33/   18304 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   18304 : =>FALSE                      if SourceSMPS2ASM==0
(1)   33/   18304 :                                     set vcAM1,$00<<5
(1)   33/   18304 :                                     set vcAM2,$00<<5
(1)   33/   18304 :                                     set vcAM3,$00<<5
(1)   33/   18304 :                                     set vcAM4,$00<<5
(1)   33/   18304 : =>TRUE                       else
(1)   33/   18304 : =$0                                  set vcAM1,$00<<7
(1)   33/   18304 : =$0                                  set vcAM2,$00<<7
(1)   33/   18304 : =$0                                  set vcAM3,$00<<7
(1)   33/   18304 : =$0                                  set vcAM4,$00<<7
(1)   33/   18304 : [33]                         endif
(1)   34/   18304 : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)   34/   18304 : =$0                          set vcD1R1,$00
(1)   34/   18304 : =$0                          set vcD1R2,$00
(1)   34/   18304 : =$0                          set vcD1R3,$00
(1)   34/   18304 : =$0                          set vcD1R4,$00
(1)   35/   18304 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   35/   18304 : =$0                          set vcD2R1,$00
(1)   35/   18304 : =$0                          set vcD2R2,$00
(1)   35/   18304 : =$0                          set vcD2R3,$00
(1)   35/   18304 : =$0                          set vcD2R4,$00
(1)   36/   18304 : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)   36/   18304 : =$0                          set vcDL1,$00
(1)   36/   18304 : =$0                          set vcDL2,$00
(1)   36/   18304 : =$0                          set vcDL3,$00
(1)   36/   18304 : =$0                          set vcDL4,$00
(1)   37/   18304 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   18304 : =$F                          set vcRR1,$0F
(1)   37/   18304 : =$F                          set vcRR2,$0F
(1)   37/   18304 : =$F                          set vcRR3,$0F
(1)   37/   18304 : =$F                          set vcRR4,$0F
(1)   38/   18304 : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   38/   18304 : =$80                         set vcTL1,$80
(1)   38/   18304 : =$0                          set vcTL2,$00
(1)   38/   18304 : =$80                         set vcTL3,$80
(1)   38/   18304 : =$0                          set vcTL4,$00
(1)   38/   18304 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   18305 :                     ;   0     1     2     3     4     5     6     7
(1)   38/   18305 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   18305 : =>FALSE                      if SourceSMPS2ASM==0
(1)   38/   18305 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18305 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18305 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18305 :                                     set vcTLMask1,$80
(1)   38/   18305 : =>TRUE                       else
(1)   38/   18305 : =$0                                  set vcTLMask4,0
(1)   38/   18305 : =$0                                  set vcTLMask3,0
(1)   38/   18305 : =$0                                  set vcTLMask2,0
(1)   38/   18305 : =$0                                  set vcTLMask1,0
(1)   38/   18305 : [38]                         endif
(1)   38/   18305 :                     
(1)   38/   18305 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   18305 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18305 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18305 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18305 :                                     set vcTLMask1,$80
(1)   38/   18305 :                                     set vcTL1,vcTL1&$7F
(1)   38/   18305 :                                     set vcTL2,vcTL2&$7F
(1)   38/   18305 :                                     set vcTL3,vcTL3&$7F
(1)   38/   18305 :                                     set vcTL4,vcTL4&$7F
(1)   38/   18305 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   38/   18305 :                                     if MOMPASS>1
(1)   38/   18305 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   38/   18305 : [38]                                 endif
(1)   38/   18305 : [38]                         endif
(1)   38/   18305 :                     
(1)   38/   18305 : =>FALSE                      if SonicDriverVer==2
(1)   38/   18305 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   38/   18305 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   38/   18305 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18305 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   38/   18305 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   38/   18305 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   38/   18305 : =>TRUE                       else
(1)   38/   18305 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   18309 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   1830D : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18311 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   18315 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   18319 : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   1831D : [38]                         endif
(1)   39/   1831D :                     
   18879/   1831D :                     SoundAF:	include	"Sound/SFX/SndAF.asm"
(1)    1/   1831D :                     Snd0F_Header:
(1)    2/   1831D : (MACRO)              	smpsHeaderStartSong 3, 1
(1)    2/   1831D :                     
(1)    2/   1831D : =$3                  SourceDriver set 3
(1)    2/   1831D :                     
(1)    2/   1831D : =>TRUE                       if ("1"<>"")
(1)    2/   1831D : =$1                                  set SourceSMPS2ASM,1
(1)    2/   1831D : =>FALSE                      else
(1)    2/   1831D :                                     set SourceSMPS2ASM,0
(1)    2/   1831D : [2]                          endif
(1)    2/   1831D :                     
(1)    2/   1831D : =$1831D              songStart set *
(1)    2/   1831D :                     
(1)    2/   1831D : =>TRUE                       if MOMPASS>1
(1)    2/   1831D : =>FALSE                              if SMPS2ASMVer < SourceSMPS2ASM
(1)    2/   1831D :                                             message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)    2/   1831D : [2]                                  endif
(1)    2/   1831D : [2]                          endif
(1)    2/   1831D :                     
(1)    3/   1831D : =>TRUE               	if ~~fixBugs
(1)    4/   1831D : (MACRO)              	smpsHeaderVoice     Snd0F_Voices+$4000
(1)    4/   1831D : =>FALSE                      if songStart<>*
(1)    4/   1831D :                                     fatal "Missing smpsHeaderStartSong"
(1)    4/   1831D : [4]                          endif
(1)    4/   1831D : =>TRUE                       if SonicDriverVer<>1
(1)    4/   1831D : 28C3                                dc.w    z80_ptr(Snd0F_Voices+$4000)
(1)    4/   1831F : =>FALSE                      else
(1)    4/   1831F :                                     if MOMPASS>1
(1)    4/   1831F :                                             if Snd0F_Voices+$4000<songStart
(1)    4/   1831F :                                                     fatal "Voice banks for Sonic 1 songs must come after the song"
(1)    4/   1831F : [4]                                          endif
(1)    4/   1831F : [4]                                  endif
(1)    4/   1831F :                                     dc.w    Snd0F_Voices+$4000-songStart
(1)    4/   1831F : [4]                          endif
(1)    5/   1831F : =>FALSE              	else
(1)    6/   1831F :                     	smpsHeaderVoice     Snd0F_Voices
(1)    7/   1831F : [3]                  	endif
(1)    8/   1831F : (MACRO)              	smpsHeaderTempoSFX  $01
(1)    8/   1831F : 01                          dc.b    $01
(1)    9/   18320 : (MACRO)              	smpsHeaderChanSFX   $01
(1)    9/   18320 : 01                          dc.b    $01
(1)   10/   18321 :                     
(1)   11/   18321 : =>TRUE               	if ~~fixBugs
(1)   12/   18321 : (MACRO)              	smpsHeaderSFXChannel cFM5, Snd0F_FM5+$4000,	$00, $00
(1)   12/   18321 : =>FALSE                      if (SonicDriverVer>=3)&&(cFM5==cNoise)
(1)   12/   18321 :                                     fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)   12/   18321 : =>FALSE                      elseif (SonicDriverVer<3)&&(cFM5==cFM6)
(1)   12/   18321 :                                     fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)   12/   18321 : [12]                         endif
(1)   12/   18321 : 8005                        dc.b    $80,cFM5
(1)   12/   18323 :  (MACRO-2)                   CheckedChannelPointer Snd0F_FM5+$4000
(1)   12/   18323 : =>TRUE                       if SonicDriverVer<>1
(1)   12/   18323 : 27C3                                dc.w    z80_ptr(Snd0F_FM5+$4000)
(1)   12/   18325 : =>FALSE                      else
(1)   12/   18325 :                                     if MOMPASS>1
(1)   12/   18325 :                                             if Snd0F_FM5+$4000<songStart
(1)   12/   18325 :                                                     fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)   12/   18325 : [12]                                         endif
(1)   12/   18325 : [12]                                 endif
(1)   12/   18325 :                                     dc.w    Snd0F_FM5+$4000-songStart
(1)   12/   18325 : [12]                         endif
(1)   12/   18325 : =>FALSE                      if (cFM5&$80)<>0
(1)   12/   18325 :                                     PSGPitchConvert $00
(1)   12/   18325 : =>TRUE                       else
(1)   12/   18325 : 00                                  dc.b    $00
(1)   12/   18326 : [12]                         endif
(1)   12/   18326 : 00                          dc.b    $00
(1)   13/   18327 : =>FALSE              	else
(1)   14/   18327 :                     	smpsHeaderSFXChannel cFM5, Snd0F_FM5,	$00, $00
(1)   15/   18327 : [11]                 	endif
(1)   16/   18327 :                     
(1)   17/   18327 :                     ; FM5 Data
(1)   18/   18327 :                     Snd0F_FM5:
(1)   19/   18327 : (MACRO)              	smpsStop
(1)   19/   18327 : F2                          dc.b    $F2
(1)   20/   18328 :                     
(1)   21/   18328 :                     Snd0F_Voices:
(1)   22/   18328 :                     ;	Voice $00 (unused)
(1)   23/   18328 :                     ;	$3C
(1)   24/   18328 :                     ;	$01, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(1)   25/   18328 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$00, $80, $00, $80
(1)   26/   18328 : (MACRO)              	smpsVcAlgorithm     $04
(1)   26/   18328 : =$4                  vcAlgorithm set $04
(1)   27/   18328 : (MACRO)              	smpsVcFeedback      $07
(1)   27/   18328 : =$7                  vcFeedback set $07
(1)   28/   18328 : (MACRO)              	smpsVcUnusedBits    $00
(1)   28/   18328 : =$0                  vcUnusedBits set $00
(1)   28/   18328 : =>FALSE                      if (""<>"")&&(""<>"")&&(""<>"")&&(""<>"")
(1)   28/   18328 :                                     set vcD1R1Unk,<<5
(1)   28/   18328 :                                     set vcD1R2Unk,<<5
(1)   28/   18328 :                                     set vcD1R3Unk,<<5
(1)   28/   18328 :                                     set vcD1R4Unk,<<5
(1)   28/   18328 : =>TRUE                       else
(1)   28/   18328 : =$0                                  set vcD1R1Unk,0
(1)   28/   18328 : =$0                                  set vcD1R2Unk,0
(1)   28/   18328 : =$0                                  set vcD1R3Unk,0
(1)   28/   18328 : =$0                                  set vcD1R4Unk,0
(1)   28/   18328 : [28]                         endif
(1)   29/   18328 : (MACRO)              	smpsVcDetune        $00, $00, $00, $00
(1)   29/   18328 : =$0                          set vcDT1,$00
(1)   29/   18328 : =$0                          set vcDT2,$00
(1)   29/   18328 : =$0                          set vcDT3,$00
(1)   29/   18328 : =$0                          set vcDT4,$00
(1)   30/   18328 : (MACRO)              	smpsVcCoarseFreq    $01, $01, $01, $01
(1)   30/   18328 : =$1                          set vcCF1,$01
(1)   30/   18328 : =$1                          set vcCF2,$01
(1)   30/   18328 : =$1                          set vcCF3,$01
(1)   30/   18328 : =$1                          set vcCF4,$01
(1)   31/   18328 : (MACRO)              	smpsVcRateScale     $00, $00, $00, $00
(1)   31/   18328 : =$0                          set vcRS1,$00
(1)   31/   18328 : =$0                          set vcRS2,$00
(1)   31/   18328 : =$0                          set vcRS3,$00
(1)   31/   18328 : =$0                          set vcRS4,$00
(1)   32/   18328 : (MACRO)              	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)   32/   18328 : =$1F                         set vcAR1,$1F
(1)   32/   18328 : =$1F                         set vcAR2,$1F
(1)   32/   18328 : =$1F                         set vcAR3,$1F
(1)   32/   18328 : =$1F                         set vcAR4,$1F
(1)   33/   18328 : (MACRO)              	smpsVcAmpMod        $00, $00, $00, $00
(1)   33/   18328 : =>FALSE                      if SourceSMPS2ASM==0
(1)   33/   18328 :                                     set vcAM1,$00<<5
(1)   33/   18328 :                                     set vcAM2,$00<<5
(1)   33/   18328 :                                     set vcAM3,$00<<5
(1)   33/   18328 :                                     set vcAM4,$00<<5
(1)   33/   18328 : =>TRUE                       else
(1)   33/   18328 : =$0                                  set vcAM1,$00<<7
(1)   33/   18328 : =$0                                  set vcAM2,$00<<7
(1)   33/   18328 : =$0                                  set vcAM3,$00<<7
(1)   33/   18328 : =$0                                  set vcAM4,$00<<7
(1)   33/   18328 : [33]                         endif
(1)   34/   18328 : (MACRO)              	smpsVcDecayRate1    $00, $00, $00, $00
(1)   34/   18328 : =$0                          set vcD1R1,$00
(1)   34/   18328 : =$0                          set vcD1R2,$00
(1)   34/   18328 : =$0                          set vcD1R3,$00
(1)   34/   18328 : =$0                          set vcD1R4,$00
(1)   35/   18328 : (MACRO)              	smpsVcDecayRate2    $00, $00, $00, $00
(1)   35/   18328 : =$0                          set vcD2R1,$00
(1)   35/   18328 : =$0                          set vcD2R2,$00
(1)   35/   18328 : =$0                          set vcD2R3,$00
(1)   35/   18328 : =$0                          set vcD2R4,$00
(1)   36/   18328 : (MACRO)              	smpsVcDecayLevel    $00, $00, $00, $00
(1)   36/   18328 : =$0                          set vcDL1,$00
(1)   36/   18328 : =$0                          set vcDL2,$00
(1)   36/   18328 : =$0                          set vcDL3,$00
(1)   36/   18328 : =$0                          set vcDL4,$00
(1)   37/   18328 : (MACRO)              	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   37/   18328 : =$F                          set vcRR1,$0F
(1)   37/   18328 : =$F                          set vcRR2,$0F
(1)   37/   18328 : =$F                          set vcRR3,$0F
(1)   37/   18328 : =$F                          set vcRR4,$0F
(1)   38/   18328 : (MACRO)              	smpsVcTotalLevel    $80, $00, $80, $00
(1)   38/   18328 : =$80                         set vcTL1,$80
(1)   38/   18328 : =$0                          set vcTL2,$00
(1)   38/   18328 : =$80                         set vcTL3,$80
(1)   38/   18328 : =$0                          set vcTL4,$00
(1)   38/   18328 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   38/   18329 :                     ;   0     1     2     3     4     5     6     7
(1)   38/   18329 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   38/   18329 : =>FALSE                      if SourceSMPS2ASM==0
(1)   38/   18329 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18329 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18329 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18329 :                                     set vcTLMask1,$80
(1)   38/   18329 : =>TRUE                       else
(1)   38/   18329 : =$0                                  set vcTLMask4,0
(1)   38/   18329 : =$0                                  set vcTLMask3,0
(1)   38/   18329 : =$0                                  set vcTLMask2,0
(1)   38/   18329 : =$0                                  set vcTLMask1,0
(1)   38/   18329 : [38]                         endif
(1)   38/   18329 :                     
(1)   38/   18329 : =>FALSE                      if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)   38/   18329 :                                     set vcTLMask4,((vcAlgorithm==7)<<7)
(1)   38/   18329 :                                     set vcTLMask3,((vcAlgorithm>=4)<<7)
(1)   38/   18329 :                                     set vcTLMask2,((vcAlgorithm>=5)<<7)
(1)   38/   18329 :                                     set vcTLMask1,$80
(1)   38/   18329 :                                     set vcTL1,vcTL1&$7F
(1)   38/   18329 :                                     set vcTL2,vcTL2&$7F
(1)   38/   18329 :                                     set vcTL3,vcTL3&$7F
(1)   38/   18329 :                                     set vcTL4,vcTL4&$7F
(1)   38/   18329 : =>FALSE                      elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(1)   38/   18329 :                                     if MOMPASS>1
(1)   38/   18329 :                                             message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)   38/   18329 : [38]                                 endif
(1)   38/   18329 : [38]                         endif
(1)   38/   18329 :                     
(1)   38/   18329 : =>FALSE                      if SonicDriverVer==2
(1)   38/   18329 :                                     dc.b    (vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)   38/   18329 :                                     dc.b    (vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)   38/   18329 :                                     dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18329 :                                     dc.b    vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)   38/   18329 :                                     dc.b    (vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)   38/   18329 :                                     dc.b    vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)   38/   18329 : =>TRUE                       else
(1)   38/   18329 : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   38/   1832D : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   38/   18331 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   38/   18335 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   38/   18339 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   38/   1833D : 0080 0080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   38/   18341 : [38]                         endif
(1)   39/   18341 :                     
   18880/   18341 : (MACRO)              		finishBank
   18880/   18341 : =>FALSE                      if * > soundBankStart + $8000
   18880/   18341 :                                     fatal "soundBank \{soundBankName} must fit in $8000 bytes but was $\{*-soundBankStart}. Try moving something to the other bank."
   18880/   18341 : =>FALSE                      elseif (DebugSoundbanks<>0)&&(MOMPASS=1)
   18880/   18341 :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end."
   18880/   18341 : [18880]                      endif
   18881/   18341 :                     ; ---------------------------------------------------------------------------
   18882/   18341 :                     ; ===========================================================================
   18883/   18341 :                     ; ---------------------------------------------------------------------------
   18884/   18341 :                     ; Uncompressed Hud Patterns (Unused)
   18885/   18341 :                     ; ---------------------------------------------------------------------------
   18886/   18341 :                     ; Uncompressed grahics that look like a mini version of a hud
   18887/   18341 :                     ; ---------------------------------------------------------------------------
   18888/   18341 :                     ; Data Location (00018341 - 00018740)
   18889/   18341 :                     ; Striped out
   18890/   18341 :                     ; UnkData_00018341:
   18891/   18341 :                     		binclude	"UnknownCodes/UnknownData_00018341.bin"
   18892/   18741 :                     ; ---------------------------------------------------------------------------
   18893/   18741 :                     ; ===========================================================================
   18894/   18741 :                     ; ---------------------------------------------------------------------------
   18895/   18741 :                     ; Unknown Data
   18896/   18741 :                     ; ---------------------------------------------------------------------------
   18897/   18741 :                     ; Data Location (00018741 - 0001C98F)
   18898/   18741 :                     ; Striped out
   18899/   18741 :                     ; UnkData_00018741:
   18900/   18741 :                     		binclude	"UnknownCodes/UnknownData_00018741.bin"
   18901/   1C990 :                     ; ---------------------------------------------------------------------------
   18902/   1C990 :                     ; ===========================================================================
   18903/   1C990 :                     ; ---------------------------------------------------------------------------
   18904/   1C990 :                     ; Unknown Data
   18905/   1C990 :                     ; ---------------------------------------------------------------------------
   18906/   1C990 :                     ; Data Location (0001C990 - 0001CD8F)
   18907/   1C990 :                     ; Striped out
   18908/   1C990 :                     ; UnkData_0001C990:
   18909/   1C990 :                     		binclude	"UnknownCodes/UnknownData_0001C990.bin"
   18910/   1CD90 :                     ; ---------------------------------------------------------------------------
   18911/   1CD90 :                     ; ===========================================================================
   18912/   1CD90 :                     ; ---------------------------------------------------------------------------
   18913/   1CD90 :                     ; Unknown Data
   18914/   1CD90 :                     ; ---------------------------------------------------------------------------
   18915/   1CD90 :                     ; Data Location (0001CD90 - 0001F761)
   18916/   1CD90 :                     ; Striped out
   18917/   1CD90 :                     ; UnkData_0001CD90:
   18918/   1CD90 :                     		binclude	"UnknownCodes/UnknownData_0001CD90.bin"
   18919/   1F762 :                     ; ---------------------------------------------------------------------------
   18920/   1F762 :                     ; ===========================================================================
   18921/   1F762 :                     ; ---------------------------------------------------------------------------
   18922/   1F762 :                     ; Unknown Data
   18923/   1F762 :                     ; (The usual similar data)
   18924/   1F762 :                     ; ---------------------------------------------------------------------------
   18925/   1F762 :                     ; Data Location (0001F762 - 0001FB61)
   18926/   1F762 :                     ; Striped out
   18927/   1F762 :                     ; UnkData_0001F762:
   18928/   1F762 :                     		binclude	"UnknownCodes/UnknownData_0001F762.bin"
   18929/   1FB62 :                     ; ---------------------------------------------------------------------------
   18930/   1FB62 :                     ; ===========================================================================
   18931/   1FB62 :                     ; ---------------------------------------------------------------------------
   18932/   1FB62 :                     ; Unknown Data
   18933/   1FB62 :                     ; ---------------------------------------------------------------------------
   18934/   1FB62 :                     ; Data Location (0001FB62 - 0001FFFF)
   18935/   1FB62 :                     ; Striped out
   18936/   1FB62 :                     ; UnkData_0001FB62:
   18937/   1FB62 :                     		binclude	"UnknownCodes/UnknownData_0001FB62.bin"
   18938/   20000 :                     ; ---------------------------------------------------------------------------
   18939/   20000 :                     ; ===========================================================================
   18940/   20000 :                     ; ---------------------------------------------------------------------------
   18941/   20000 :                     ; Align to $00020000, PCM Voice Data
   18942/   20000 :                     ; ---------------------------------------------------------------------------
   18943/   20000 : (MACRO)              DACBank:	startBank
   18943/   20000 :  (MACRO-2)                   align   $8000
   18943/   20000 :   (MACRO-3)                  cnop 0,$8000
   18943/   20000 : =>TRUE                       if notZ80(MOMCPU)
   18943/   20000 :    (MACRO-4)                         org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   18943/   20000 : =>TRUE                       if notZ80(MOMCPU)
   18943/   20000 : =>FALSE                              if (*-1+($8000)-((*-1+(-(0)))#($8000))) < *
   18943/   20000 :                                             error "too much stuff before org $\{(*-1+($8000)-((*-1+(-(0)))#($8000)))} ($\{(*-(*-1+($8000)-((*-1+(-(0)))#($8000))))} bytes)"
   18943/   20000 : =>TRUE                               else
   18943/   20000 :                                             !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   18943/   20000 : [18943]                              endif
   18943/   20000 : =>FALSE                      else
   18943/   20000 :                                     if (*-1+($8000)-((*-1+(-(0)))#($8000))) < $
   18943/   20000 :                                             error "too much stuff before org 0\{(*-1+($8000)-((*-1+(-(0)))#($8000)))}h (0\{($-(*-1+($8000)-((*-1+(-(0)))#($8000))))}h bytes)"
   18943/   20000 :                                     else
   18943/   20000 :                                             while (*-1+($8000)-((*-1+(-(0)))#($8000))) > $
   18943/   20000 :                                                     db 0
   18943/   20000 :                                             endm
   18943/   20000 : [18943]                              endif
   18943/   20000 : [18943]                      endif
   18943/   20000 : =>FALSE                      else
   18943/   20000 :                                     org ($-1+($8000)-(($-1+(-(0)))#($8000)))
   18943/   20000 : [18943]                      endif
   18943/   20000 : =$20000              DACBank label *
   18943/   20000 : =$20000              soundBankStart := DACBank
   18943/   20000 : ="DACBank"           soundBankName := "DACBank"
   18944/   20000 :                     DAC_Sample1:	binclude	"Sound/DAC/Kick.dpcm"	; DAC 81 (Beat Sample)
   18945/   201D4 : (MACRO)              DAC_Sample1_End:even
   18945/   201D4 : =>TRUE                       if notZ80(MOMCPU)
   18945/   201D4 : =>FALSE                              if (*)&1
   18945/   201D4 :                                             dc.b 0                          ;ds.b 1
   18945/   201D4 : [18945]                              endif
   18945/   201D4 : =>FALSE                      else
   18945/   201D4 :                                     if ($)&1
   18945/   201D4 :                                             db 0
   18945/   201D4 : [18945]                              endif
   18945/   201D4 : [18945]                      endif
   18946/   201D4 :                     DAC_Sample2:	binclude	"Sound/DAC/Snare.dpcm"	; DAC 82 (Snare Sample)
   18947/   20FB2 : (MACRO)              DAC_Sample2_End:even
   18947/   20FB2 : =>TRUE                       if notZ80(MOMCPU)
   18947/   20FB2 : =>FALSE                              if (*)&1
   18947/   20FB2 :                                             dc.b 0                          ;ds.b 1
   18947/   20FB2 : [18947]                              endif
   18947/   20FB2 : =>FALSE                      else
   18947/   20FB2 :                                     if ($)&1
   18947/   20FB2 :                                             db 0
   18947/   20FB2 : [18947]                              endif
   18947/   20FB2 : [18947]                      endif
   18948/   20FB2 :                     DAC_Sample3:	binclude	"Sound/DAC/Tom.dpcm"	; DAC 83-85 [Hi to Low pitches] (Timpani/Tom-beat Sample)
   18949/   21672 : (MACRO)              DAC_Sample3_End:even
   18949/   21672 : =>TRUE                       if notZ80(MOMCPU)
   18949/   21672 : =>FALSE                              if (*)&1
   18949/   21672 :                                             dc.b 0                          ;ds.b 1
   18949/   21672 : [18949]                              endif
   18949/   21672 : =>FALSE                      else
   18949/   21672 :                                     if ($)&1
   18949/   21672 :                                             db 0
   18949/   21672 : [18949]                              endif
   18949/   21672 : [18949]                      endif
   18950/   21672 :                     ; ---------------------------------------------------------------------------
   18951/   21672 :                     ; these two samples can be heard when note 86 and 87 are triggered in music
   18952/   21672 :                     ; (however they are not used in any of the regular music)
   18953/   21672 :                     ; ---------------------------------------------------------------------------
   18954/   21672 :                     DAC_Sample4:	binclude	"Sound/DAC/Let's Go.dpcm" ; DAC 86 (Unknown voice: "Lets Go" or "Ley'k Go" in Japanese accent)
   18955/   22BEE : (MACRO)              DAC_Sample4_End:even
   18955/   22BEE : =>TRUE                       if notZ80(MOMCPU)
   18955/   22BEE : =>FALSE                              if (*)&1
   18955/   22BEE :                                             dc.b 0                          ;ds.b 1
   18955/   22BEE : [18955]                              endif
   18955/   22BEE : =>FALSE                      else
   18955/   22BEE :                                     if ($)&1
   18955/   22BEE :                                             db 0
   18955/   22BEE : [18955]                              endif
   18955/   22BEE : [18955]                      endif
   18956/   22BEE :                     DAC_Sample5:	binclude	"Sound/DAC/Hey.dpcm"	; DAC 87 (Unknown voice: "Hey!" or "Hez!" in Japanese accent)
   18957/   244A2 : (MACRO)              DAC_Sample5_End:even
   18957/   244A2 : =>TRUE                       if notZ80(MOMCPU)
   18957/   244A2 : =>FALSE                              if (*)&1
   18957/   244A2 :                                             dc.b 0                          ;ds.b 1
   18957/   244A2 : [18957]                              endif
   18957/   244A2 : =>FALSE                      else
   18957/   244A2 :                                     if ($)&1
   18957/   244A2 :                                             db 0
   18957/   244A2 : [18957]                              endif
   18957/   244A2 : [18957]                      endif
   18958/   244A2 : (MACRO)              		finishBank
   18958/   244A2 : =>FALSE                      if * > soundBankStart + $8000
   18958/   244A2 :                                     fatal "soundBank \{soundBankName} must fit in $8000 bytes but was $\{*-soundBankStart}. Try moving something to the other bank."
   18958/   244A2 : =>FALSE                      elseif (DebugSoundbanks<>0)&&(MOMPASS=1)
   18958/   244A2 :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end."
   18958/   244A2 : [18958]                      endif
   18959/   244A2 :                     ; ---------------------------------------------------------------------------
   18960/   244A2 :                     ; ===========================================================================
   18961/   244A2 :                     ; ---------------------------------------------------------------------------
   18962/   244A2 :                     ; Unknown Data
   18963/   244A2 :                     ; ---------------------------------------------------------------------------
   18964/   244A2 :                     ; Data Location (000244A2 - 000247EF)
   18965/   244A2 :                     ; Striped out
   18966/   244A2 :                     ; UnkData_000244A2:
   18967/   244A2 :                     		binclude	"UnknownCodes/UnknownData_000244A2.bin"
   18968/   247F0 :                     ; ---------------------------------------------------------------------------
   18969/   247F0 :                     ; ===========================================================================
   18970/   247F0 :                     ; ---------------------------------------------------------------------------
   18971/   247F0 :                     ; Unknown Data
   18972/   247F0 :                     ; ---------------------------------------------------------------------------
   18973/   247F0 :                     ; Data Location (000247F0 - 00026009)
   18974/   247F0 :                     ; Striped out
   18975/   247F0 :                     ; UnkData_000247F0:
   18976/   247F0 :                     		binclude	"UnknownCodes/UnknownData_000247F0.bin"
   18977/   2600A :                     ; ---------------------------------------------------------------------------
   18978/   2600A :                     ; ===========================================================================
   18979/   2600A :                     ; ---------------------------------------------------------------------------
   18980/   2600A :                     ; Unknown Data
   18981/   2600A :                     ; ---------------------------------------------------------------------------
   18982/   2600A :                     ; Data Location (0002600A - 00028844)
   18983/   2600A :                     ; Striped out
   18984/   2600A :                     ; UnkData_0002600A:
   18985/   2600A :                     		binclude	"UnknownCodes/UnknownData_0002600A.bin"
   18986/   28845 :                     ; ---------------------------------------------------------------------------
   18987/   28845 :                     ; ===========================================================================
   18988/   28845 :                     ; ---------------------------------------------------------------------------
   18989/   28845 :                     ; Unknown Data
   18990/   28845 :                     ; ---------------------------------------------------------------------------
   18991/   28845 :                     ; Data Location (00028845 - 0002A222)
   18992/   28845 :                     ; Striped out
   18993/   28845 :                     ; UnkData_00028845:
   18994/   28845 :                     		binclude	"UnknownCodes/UnknownData_00028845.bin"
   18995/   2A223 :                     ; ---------------------------------------------------------------------------
   18996/   2A223 :                     ; ===========================================================================
   18997/   2A223 :                     ; ---------------------------------------------------------------------------
   18998/   2A223 :                     ; Unknown Data
   18999/   2A223 :                     ; ---------------------------------------------------------------------------
   19000/   2A223 :                     ; Data Location (0002A223 - 0002AC5F)
   19001/   2A223 :                     ; Striped out
   19002/   2A223 :                     ; UnkData_0002A223:
   19003/   2A223 :                     		binclude	"UnknownCodes/UnknownData_0002A223.bin"
   19004/   2AC60 :                     ; ---------------------------------------------------------------------------
   19005/   2AC60 :                     ; ===========================================================================
   19006/   2AC60 :                     ; ---------------------------------------------------------------------------
   19007/   2AC60 :                     ; Align to $0002C000, Unknown Data
   19008/   2AC60 :                     ; ---------------------------------------------------------------------------
   19009/   2AC60 : (MACRO)              	align $2000
   19009/   2AC60 :  (MACRO-2)                   cnop 0,$2000
   19009/   2AC60 : =>TRUE                       if notZ80(MOMCPU)
   19009/   2AC60 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19009/   2AC60 : =>TRUE                       if notZ80(MOMCPU)
   19009/   2AC60 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19009/   2AC60 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19009/   2AC60 : =>TRUE                               else
   19009/   2C000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19009/   2C000 : [19009]                              endif
   19009/   2C000 : =>FALSE                      else
   19009/   2C000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19009/   2C000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19009/   2C000 :                                     else
   19009/   2C000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19009/   2C000 :                                                     db 0
   19009/   2C000 :                                             endm
   19009/   2C000 : [19009]                              endif
   19009/   2C000 : [19009]                      endif
   19009/   2C000 : =>FALSE                      else
   19009/   2C000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19009/   2C000 : [19009]                      endif
   19010/   2C000 :                     ; ---------------------------------------------------------------------------
   19011/   2C000 :                     ; Data Location (0002C000 - 0002D1FF)
   19012/   2C000 :                     ; Striped out
   19013/   2C000 :                     ; UnkData_0002C000:
   19014/   2C000 :                     		binclude	"UnknownCodes/UnknownData_0002C000.bin"
   19015/   2D200 :                     ; ---------------------------------------------------------------------------
   19016/   2D200 :                     ; ===========================================================================
   19017/   2D200 :                     ; ---------------------------------------------------------------------------
   19018/   2D200 :                     ; Align to $00030000, Used Multiple Data
   19019/   2D200 :                     ; ---------------------------------------------------------------------------
   19020/   2D200 : (MACRO)              	align $3000
   19020/   2D200 :  (MACRO-2)                   cnop 0,$3000
   19020/   2D200 : =>TRUE                       if notZ80(MOMCPU)
   19020/   2D200 :   (MACRO-3)                          org (*-1+($3000)-((*-1+(-(0)))#($3000)))
   19020/   2D200 : =>TRUE                       if notZ80(MOMCPU)
   19020/   2D200 : =>FALSE                              if (*-1+($3000)-((*-1+(-(0)))#($3000))) < *
   19020/   2D200 :                                             error "too much stuff before org $\{(*-1+($3000)-((*-1+(-(0)))#($3000)))} ($\{(*-(*-1+($3000)-((*-1+(-(0)))#($3000))))} bytes)"
   19020/   2D200 : =>TRUE                               else
   19020/   30000 :                                             !org (*-1+($3000)-((*-1+(-(0)))#($3000)))
   19020/   30000 : [19020]                              endif
   19020/   30000 : =>FALSE                      else
   19020/   30000 :                                     if (*-1+($3000)-((*-1+(-(0)))#($3000))) < $
   19020/   30000 :                                             error "too much stuff before org 0\{(*-1+($3000)-((*-1+(-(0)))#($3000)))}h (0\{($-(*-1+($3000)-((*-1+(-(0)))#($3000))))}h bytes)"
   19020/   30000 :                                     else
   19020/   30000 :                                             while (*-1+($3000)-((*-1+(-(0)))#($3000))) > $
   19020/   30000 :                                                     db 0
   19020/   30000 :                                             endm
   19020/   30000 : [19020]                              endif
   19020/   30000 : [19020]                      endif
   19020/   30000 : =>FALSE                      else
   19020/   30000 :                                     org ($-1+($3000)-(($-1+(-(0)))#($3000)))
   19020/   30000 : [19020]                      endif
   19021/   30000 :                     ; ---------------------------------------------------------------------------
   19022/   30000 :                     ArtUnc_HUD:
   19023/   30000 :                     	binclude	"artunc/Hud.bin"		; Hud Patterns
   19024/   30E80 : (MACRO)              	even
   19024/   30E80 : =>TRUE                       if notZ80(MOMCPU)
   19024/   30E80 : =>FALSE                              if (*)&1
   19024/   30E80 :                                             dc.b 0                          ;ds.b 1
   19024/   30E80 : [19024]                              endif
   19024/   30E80 : =>FALSE                      else
   19024/   30E80 :                                     if ($)&1
   19024/   30E80 :                                             db 0
   19024/   30E80 : [19024]                              endif
   19024/   30E80 : [19024]                      endif
   19025/   30E80 :                     ; ---------------------------------------------------------------------------
   19026/   30E80 :                     ARTNEM_RingTetherStarsUnused:
   19027/   30E80 :                     	binclude	"artnem/Unused - Ring Tether Stars.bin" ; unused Ring tether stars
   19028/   30EE2 : (MACRO)              	even
   19028/   30EE2 : =>TRUE                       if notZ80(MOMCPU)
   19028/   30EE2 : =>FALSE                              if (*)&1
   19028/   30EE2 :                                             dc.b 0                          ;ds.b 1
   19028/   30EE2 : [19028]                              endif
   19028/   30EE2 : =>FALSE                      else
   19028/   30EE2 :                                     if ($)&1
   19028/   30EE2 :                                             db 0
   19028/   30EE2 : [19028]                              endif
   19028/   30EE2 : [19028]                      endif
   19029/   30EE2 :                     ; ---------------------------------------------------------------------------
   19030/   30EE2 :                     ARTNEM_SSZ8x8_FG:
   19031/   30EE2 :                     	binclude	"artnem/8x8 - SSZ FG.bin"	; 8x8 tiles for SSZ FG
   19032/   3452C : (MACRO)              	even
   19032/   3452C : =>TRUE                       if notZ80(MOMCPU)
   19032/   3452C : =>FALSE                              if (*)&1
   19032/   3452C :                                             dc.b 0                          ;ds.b 1
   19032/   3452C : [19032]                              endif
   19032/   3452C : =>FALSE                      else
   19032/   3452C :                                     if ($)&1
   19032/   3452C :                                             db 0
   19032/   3452C : [19032]                              endif
   19032/   3452C : [19032]                      endif
   19033/   3452C :                     ; ---------------------------------------------------------------------------
   19034/   3452C :                     MAPENI_SSZ16x16_FG:
   19035/   3452C :                     	binclude	"map16/SSZ FG.bin"		; 16x16 blocks for SSZ FG
   19036/   35762 : (MACRO)              	even
   19036/   35762 : =>TRUE                       if notZ80(MOMCPU)
   19036/   35762 : =>FALSE                              if (*)&1
   19036/   35762 :                                             dc.b 0                          ;ds.b 1
   19036/   35762 : [19036]                              endif
   19036/   35762 : =>FALSE                      else
   19036/   35762 :                                     if ($)&1
   19036/   35762 :                                             db 0
   19036/   35762 : [19036]                              endif
   19036/   35762 : [19036]                      endif
   19037/   35762 :                     ; ---------------------------------------------------------------------------
   19038/   35762 :                     MAPENI_SSZ128x128_FG:
   19039/   35762 :                     	binclude	"map128/SSZ FG.bin"		; 128x128 chunks for SSZ FG
   19040/   39086 : (MACRO)              	even
   19040/   39086 : =>TRUE                       if notZ80(MOMCPU)
   19040/   39086 : =>FALSE                              if (*)&1
   19040/   39086 :                                             dc.b 0                          ;ds.b 1
   19040/   39086 : [19040]                              endif
   19040/   39086 : =>FALSE                      else
   19040/   39086 :                                     if ($)&1
   19040/   39086 :                                             db 0
   19040/   39086 : [19040]                              endif
   19040/   39086 : [19040]                      endif
   19041/   39086 :                     ; ---------------------------------------------------------------------------
   19042/   39086 :                     MAPENI_SSZLayout_FG:
   19043/   39086 :                     	binclude	"levels/SSZ FG.bin"		; Layout for SSZ FG
   19044/   3931E : (MACRO)              	even
   19044/   3931E : =>TRUE                       if notZ80(MOMCPU)
   19044/   3931E : =>FALSE                              if (*)&1
   19044/   3931E :                                             dc.b 0                          ;ds.b 1
   19044/   3931E : [19044]                              endif
   19044/   3931E : =>FALSE                      else
   19044/   3931E :                                     if ($)&1
   19044/   3931E :                                             db 0
   19044/   3931E : [19044]                              endif
   19044/   3931E : [19044]                      endif
   19045/   3931E :                     ; ---------------------------------------------------------------------------
   19046/   3931E :                     COL_SSZPrimary:
   19047/   3931E :                     	binclude	"collide/ColSSZPrimary.bin"	; Primary Collisions for SSZ
   19048/   3971E : (MACRO)              	even
   19048/   3971E : =>TRUE                       if notZ80(MOMCPU)
   19048/   3971E : =>FALSE                              if (*)&1
   19048/   3971E :                                             dc.b 0                          ;ds.b 1
   19048/   3971E : [19048]                              endif
   19048/   3971E : =>FALSE                      else
   19048/   3971E :                                     if ($)&1
   19048/   3971E :                                             db 0
   19048/   3971E : [19048]                              endif
   19048/   3971E : [19048]                      endif
   19049/   3971E :                     ; ---------------------------------------------------------------------------
   19050/   3971E :                     COL_SSZSecondary:
   19051/   3971E :                     	binclude	"collide/ColSSZSecondary.bin"	; Secondary Collisions for SSZ
   19052/   39B1E : (MACRO)              	even
   19052/   39B1E : =>TRUE                       if notZ80(MOMCPU)
   19052/   39B1E : =>FALSE                              if (*)&1
   19052/   39B1E :                                             dc.b 0                          ;ds.b 1
   19052/   39B1E : [19052]                              endif
   19052/   39B1E : =>FALSE                      else
   19052/   39B1E :                                     if ($)&1
   19052/   39B1E :                                             db 0
   19052/   39B1E : [19052]                              endif
   19052/   39B1E : [19052]                      endif
   19053/   39B1E :                     ; ---------------------------------------------------------------------------
   19054/   39B1E :                     ARTNEM_SSZ8x8_BG:
   19055/   39B1E :                     	binclude	"artnem/8x8 - SSZ BG.bin"	; 8x8 tiles for SSZ BG
   19056/   3A5FE : (MACRO)              	even
   19056/   3A5FE : =>TRUE                       if notZ80(MOMCPU)
   19056/   3A5FE : =>FALSE                              if (*)&1
   19056/   3A5FE :                                             dc.b 0                          ;ds.b 1
   19056/   3A5FE : [19056]                              endif
   19056/   3A5FE : =>FALSE                      else
   19056/   3A5FE :                                     if ($)&1
   19056/   3A5FE :                                             db 0
   19056/   3A5FE : [19056]                              endif
   19056/   3A5FE : [19056]                      endif
   19057/   3A5FE :                     ; ---------------------------------------------------------------------------
   19058/   3A5FE :                     MAPENI_SSZ16x16_BG:
   19059/   3A5FE :                     	binclude	"map16/SSZ BG.bin"		; 16x16 blocks for SSZ BG
   19060/   3A6E8 : (MACRO)              	even
   19060/   3A6E8 : =>TRUE                       if notZ80(MOMCPU)
   19060/   3A6E8 : =>FALSE                              if (*)&1
   19060/   3A6E8 :                                             dc.b 0                          ;ds.b 1
   19060/   3A6E8 : [19060]                              endif
   19060/   3A6E8 : =>FALSE                      else
   19060/   3A6E8 :                                     if ($)&1
   19060/   3A6E8 :                                             db 0
   19060/   3A6E8 : [19060]                              endif
   19060/   3A6E8 : [19060]                      endif
   19061/   3A6E8 :                     ; ---------------------------------------------------------------------------
   19062/   3A6E8 :                     MAPENI_SSZ128x128_BG:
   19063/   3A6E8 :                     	binclude	"map128/SSZ BG.bin"		; 128x128 chunks for SSZ BG
   19064/   3A7B8 : (MACRO)              	even
   19064/   3A7B8 : =>TRUE                       if notZ80(MOMCPU)
   19064/   3A7B8 : =>FALSE                              if (*)&1
   19064/   3A7B8 :                                             dc.b 0                          ;ds.b 1
   19064/   3A7B8 : [19064]                              endif
   19064/   3A7B8 : =>FALSE                      else
   19064/   3A7B8 :                                     if ($)&1
   19064/   3A7B8 :                                             db 0
   19064/   3A7B8 : [19064]                              endif
   19064/   3A7B8 : [19064]                      endif
   19065/   3A7B8 :                     ; ---------------------------------------------------------------------------
   19066/   3A7B8 :                     MAPENI_SSZLayout_BG:
   19067/   3A7B8 :                     	binclude	"levels/SSZ BG.bin"		; Layout for SSZ BG
   19068/   3A7CE : (MACRO)              	even
   19068/   3A7CE : =>TRUE                       if notZ80(MOMCPU)
   19068/   3A7CE : =>FALSE                              if (*)&1
   19068/   3A7CE :                                             dc.b 0                          ;ds.b 1
   19068/   3A7CE : [19068]                              endif
   19068/   3A7CE : =>FALSE                      else
   19068/   3A7CE :                                     if ($)&1
   19068/   3A7CE :                                             db 0
   19068/   3A7CE : [19068]                              endif
   19068/   3A7CE : [19068]                      endif
   19069/   3A7CE :                     ; ---------------------------------------------------------------------------
   19070/   3A7CE :                     ARTNEM_TTZ8x8_FG:
   19071/   3A7CE :                     	binclude	"artnem/8x8 - TTZ FG.bin"	; 8x8 tiles for TTZ FG
   19072/   3BB24 : (MACRO)              	even
   19072/   3BB24 : =>TRUE                       if notZ80(MOMCPU)
   19072/   3BB24 : =>FALSE                              if (*)&1
   19072/   3BB24 :                                             dc.b 0                          ;ds.b 1
   19072/   3BB24 : [19072]                              endif
   19072/   3BB24 : =>FALSE                      else
   19072/   3BB24 :                                     if ($)&1
   19072/   3BB24 :                                             db 0
   19072/   3BB24 : [19072]                              endif
   19072/   3BB24 : [19072]                      endif
   19073/   3BB24 :                     ; ---------------------------------------------------------------------------
   19074/   3BB24 :                     MAPENI_TTZ16x16_FG:
   19075/   3BB24 :                     	binclude	"map16/TTZ FG.bin"		; 16x16 blocks for TTZ FG
   19076/   3C60A : (MACRO)              	even
   19076/   3C60A : =>TRUE                       if notZ80(MOMCPU)
   19076/   3C60A : =>FALSE                              if (*)&1
   19076/   3C60A :                                             dc.b 0                          ;ds.b 1
   19076/   3C60A : [19076]                              endif
   19076/   3C60A : =>FALSE                      else
   19076/   3C60A :                                     if ($)&1
   19076/   3C60A :                                             db 0
   19076/   3C60A : [19076]                              endif
   19076/   3C60A : [19076]                      endif
   19077/   3C60A :                     ; ---------------------------------------------------------------------------
   19078/   3C60A :                     MAPENI_TTZ128x128_FG:
   19079/   3C60A :                     	binclude	"map128/TTZ FG.bin"		; 128x128 chunks for TTZ FG
   19080/   3ED12 : (MACRO)              	even
   19080/   3ED12 : =>TRUE                       if notZ80(MOMCPU)
   19080/   3ED12 : =>FALSE                              if (*)&1
   19080/   3ED12 :                                             dc.b 0                          ;ds.b 1
   19080/   3ED12 : [19080]                              endif
   19080/   3ED12 : =>FALSE                      else
   19080/   3ED12 :                                     if ($)&1
   19080/   3ED12 :                                             db 0
   19080/   3ED12 : [19080]                              endif
   19080/   3ED12 : [19080]                      endif
   19081/   3ED12 :                     ; ---------------------------------------------------------------------------
   19082/   3ED12 :                     MAPENI_TTZLayout_FG:
   19083/   3ED12 :                     	binclude	"levels/TTZ FG.bin"		; Layout for TTZ FG
   19084/   3EEC4 : (MACRO)              	even
   19084/   3EEC4 : =>TRUE                       if notZ80(MOMCPU)
   19084/   3EEC4 : =>FALSE                              if (*)&1
   19084/   3EEC4 :                                             dc.b 0                          ;ds.b 1
   19084/   3EEC4 : [19084]                              endif
   19084/   3EEC4 : =>FALSE                      else
   19084/   3EEC4 :                                     if ($)&1
   19084/   3EEC4 :                                             db 0
   19084/   3EEC4 : [19084]                              endif
   19084/   3EEC4 : [19084]                      endif
   19085/   3EEC4 :                     ; ---------------------------------------------------------------------------
   19086/   3EEC4 :                     COL_TTZPrimary:
   19087/   3EEC4 :                     	binclude	"collide/ColTTZPrimary.bin"	; Primary Collisions for TTZ
   19088/   3F2C4 : (MACRO)              	even
   19088/   3F2C4 : =>TRUE                       if notZ80(MOMCPU)
   19088/   3F2C4 : =>FALSE                              if (*)&1
   19088/   3F2C4 :                                             dc.b 0                          ;ds.b 1
   19088/   3F2C4 : [19088]                              endif
   19088/   3F2C4 : =>FALSE                      else
   19088/   3F2C4 :                                     if ($)&1
   19088/   3F2C4 :                                             db 0
   19088/   3F2C4 : [19088]                              endif
   19088/   3F2C4 : [19088]                      endif
   19089/   3F2C4 :                     ; ---------------------------------------------------------------------------
   19090/   3F2C4 :                     COL_TTZSecondary:
   19091/   3F2C4 :                     	binclude	"collide/ColTTZSecondary.bin"	; Secondary Collisions for TTZ
   19092/   3F6C4 : (MACRO)              	even
   19092/   3F6C4 : =>TRUE                       if notZ80(MOMCPU)
   19092/   3F6C4 : =>FALSE                              if (*)&1
   19092/   3F6C4 :                                             dc.b 0                          ;ds.b 1
   19092/   3F6C4 : [19092]                              endif
   19092/   3F6C4 : =>FALSE                      else
   19092/   3F6C4 :                                     if ($)&1
   19092/   3F6C4 :                                             db 0
   19092/   3F6C4 : [19092]                              endif
   19092/   3F6C4 : [19092]                      endif
   19093/   3F6C4 :                     ; ---------------------------------------------------------------------------
   19094/   3F6C4 :                     ARTNEM_TTZ8x8_BG:
   19095/   3F6C4 :                     	binclude	"artnem/8x8 - TTZ BG.bin"	; 8x8 tiles for TTZ BG
   19096/   409E2 : (MACRO)              	even
   19096/   409E2 : =>TRUE                       if notZ80(MOMCPU)
   19096/   409E2 : =>FALSE                              if (*)&1
   19096/   409E2 :                                             dc.b 0                          ;ds.b 1
   19096/   409E2 : [19096]                              endif
   19096/   409E2 : =>FALSE                      else
   19096/   409E2 :                                     if ($)&1
   19096/   409E2 :                                             db 0
   19096/   409E2 : [19096]                              endif
   19096/   409E2 : [19096]                      endif
   19097/   409E2 :                     ; ---------------------------------------------------------------------------
   19098/   409E2 :                     MAPENI_TTZ16x16_BG:
   19099/   409E2 :                     	binclude	"map16/TTZ BG.bin"		; 16x16 blocks for TTZ BG
   19100/   4108C : (MACRO)              	even
   19100/   4108C : =>TRUE                       if notZ80(MOMCPU)
   19100/   4108C : =>FALSE                              if (*)&1
   19100/   4108C :                                             dc.b 0                          ;ds.b 1
   19100/   4108C : [19100]                              endif
   19100/   4108C : =>FALSE                      else
   19100/   4108C :                                     if ($)&1
   19100/   4108C :                                             db 0
   19100/   4108C : [19100]                              endif
   19100/   4108C : [19100]                      endif
   19101/   4108C :                     ; ---------------------------------------------------------------------------
   19102/   4108C :                     MAPENI_TTZ128x128_BG:
   19103/   4108C :                     	binclude	"map128/TTZ BG.bin"		; 128x128 chunks for TTZ BG
   19104/   4183E : (MACRO)              	even
   19104/   4183E : =>TRUE                       if notZ80(MOMCPU)
   19104/   4183E : =>FALSE                              if (*)&1
   19104/   4183E :                                             dc.b 0                          ;ds.b 1
   19104/   4183E : [19104]                              endif
   19104/   4183E : =>FALSE                      else
   19104/   4183E :                                     if ($)&1
   19104/   4183E :                                             db 0
   19104/   4183E : [19104]                              endif
   19104/   4183E : [19104]                      endif
   19105/   4183E :                     ; ---------------------------------------------------------------------------
   19106/   4183E :                     MAPENI_TTZLayout_BG:
   19107/   4183E :                     	binclude	"levels/TTZ BG.bin"		; Layout for TTZ BG
   19108/   4194E : (MACRO)              	even
   19108/   4194E : =>TRUE                       if notZ80(MOMCPU)
   19108/   4194E : =>FALSE                              if (*)&1
   19108/   4194E :                                             dc.b 0                          ;ds.b 1
   19108/   4194E : [19108]                              endif
   19108/   4194E : =>FALSE                      else
   19108/   4194E :                                     if ($)&1
   19108/   4194E :                                             db 0
   19108/   4194E : [19108]                              endif
   19108/   4194E : [19108]                      endif
   19109/   4194E :                     ; ---------------------------------------------------------------------------
   19110/   4194E :                     ; ===========================================================================
   19111/   4194E :                     ; ---------------------------------------------------------------------------
   19112/   4194E :                     ; Title Card and Pause Bar Patterns
   19113/   4194E :                     ; ---------------------------------------------------------------------------
   19114/   4194E :                     ; Note:
   19115/   4194E :                     ; in this section you'll notice the bytes...
   19116/   4194E :                     ;
   19117/   4194E :                     ;		dc.w 32
   19118/   4194E :                     ;		dc.l 6
   19119/   4194E :                     ;
   19120/   4194E :                     ; ...right before the art itself, allow me to explain what it is:
   19121/   4194E :                     ;
   19122/   4194E :                     ; "32" is the number of bytes long the current art tile(s) are,
   19123/   4194E :                     ; "6" gets added to the address of the art label to tell the engine
   19124/   4194E :                     ; where the art is, (basically telling it to jump over that first word and
   19125/   4194E :                     ; long-word code to get to the art that is directly after it).
   19126/   4194E :                     ; ---------------------------------------------------------------------------
   19127/   4194E :                     ; ===========================================================================
   19128/   4194E :                     ; ---------------------------------------------------------------------------
   19129/   4194E :                     ARTUNC_TitleCardBGAndPause:
   19130/   4194E : 0020                		dc.w 32					; 32 bytes (1 tile)
   19131/   41950 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19132/   41954 :                     		binclude "artunc/TCBG1.bin"		; Yellow Pause Bar
   19133/   41974 :                     ; ---------------------------------------------------------------------------
   19134/   41974 :                     TCBG_Tile2:
   19135/   41974 : 0020                		dc.w 32					; 32 bytes (1 tile)
   19136/   41976 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19137/   4197A :                     		binclude "artunc/TCBG2.bin"		; Title Card - Black tiles that appear to hide the level design before the title card appears
   19138/   4199A :                     ; ---------------------------------------------------------------------------
   19139/   4199A :                     TCBG_Tile3:
   19140/   4199A : 0020                		dc.w 32					; 32 bytes (1 tile)
   19141/   4199C : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19142/   419A0 :                     		binclude "artunc/TCBG3.bin"		; Title Card - Dark Gray/Blue Bar that comes down first
   19143/   419C0 :                     ; ---------------------------------------------------------------------------
   19144/   419C0 :                     TCBG_Tile4:
   19145/   419C0 : 0020                		dc.w 32					; 32 bytes (1 tile)
   19146/   419C2 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19147/   419C6 :                     		binclude "artunc/TCBG4.bin"		; Title Card - Light Gray/Blue Bar that appears from top right
   19148/   419E6 :                     ; ---------------------------------------------------------------------------
   19149/   419E6 :                     TCBG_Tile5:
   19150/   419E6 : 0020                		dc.w 32					; 32 bytes (1 tile)
   19151/   419E8 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19152/   419EC :                     		binclude "artunc/TCBG5.bin"		; Title Card - Pure White tiles that appear from the left
   19153/   41A0C :                     ; ---------------------------------------------------------------------------
   19154/   41A0C :                     TCBG_Tile6:
   19155/   41A0C : 0020                		dc.w 32					; 32 bytes (1 tile)
   19156/   41A0E : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19157/   41A12 :                     		binclude "artunc/TCBG6.bin"		; Title Card - Faded Blue tiles that appear from the bottom that move over the Pure White tiles
   19158/   41A32 :                     ; ---------------------------------------------------------------------------
   19159/   41A32 :                     TCBG_Tile7:
   19160/   41A32 : 0020                		dc.w 32					; 32 bytes (1 tile)
   19161/   41A34 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19162/   41A38 :                     		binclude "artunc/TCBG7.bin"		; ??? (Unused)
   19163/   41A58 :                     ; ---------------------------------------------------------------------------
   19164/   41A58 :                     TCBG_Tile8:
   19165/   41A58 : 0020                		dc.w 32					; 32 bytes (1 tile)
   19166/   41A5A : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19167/   41A5E :                     		binclude "artunc/TCBG8.bin"		; Title Card - Dark Blue tiles on bottom right
   19168/   41A7E :                     ; ---------------------------------------------------------------------------
   19169/   41A7E :                     TCBG_Tile9:
   19170/   41A7E : 0020                		dc.w 32					; 32 bytes (1 tile)
   19171/   41A80 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19172/   41A84 :                     		binclude "artunc/TCBG9.bin"		; Title Card - Light blue tiles that appear on the bottom and right
   19173/   41AA4 :                     ; ---------------------------------------------------------------------------
   19174/   41AA4 :                     TCBG_TileA:
   19175/   41AA4 : 0020                		dc.w 32					; 32 bytes (1 tile)
   19176/   41AA6 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19177/   41AAA :                     		binclude "artunc/TCBGA.bin"		; Title Card - Red thin bar that appears from the right
   19178/   41ACA :                     ; ---------------------------------------------------------------------------
   19179/   41ACA :                     TCBG_TileB:
   19180/   41ACA : 0040                		dc.w 32*2				; 64 bytes (2 tiles)
   19181/   41ACC : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19182/   41AD0 :                     		binclude "artunc/TCBGB.bin"		; Title Card - White Zig-Zag tiles that appear overlapping the light Gray/Blue Bar that appears from top right
   19183/   41B10 :                     ; ---------------------------------------------------------------------------
   19184/   41B10 :                     TCBG_TileC:
   19185/   41B10 : 0040                		dc.w 32*2				; 64 bytes (2 tiles)
   19186/   41B12 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19187/   41B16 :                     		binclude "artunc/TCBGC.bin"		; Title Card - White Zig-Zag tiles that appear overlapping middle section
   19188/   41B56 :                     ; ---------------------------------------------------------------------------
   19189/   41B56 :                     TCBG_TileD:
   19190/   41B56 : 0040                		dc.w 32*2				; 64 bytes (2 tiles)
   19191/   41B58 : 0000 0006           		dc.l 6					; jump forward 6 bytes to art
   19192/   41B5C :                     		binclude "artunc/TCBGD.bin"		; Title Card - Light blue Zig-Zag tiles (The Light blue tiles overlapping the white Zig-Zag tiles basically)
   19193/   41B9C :                     ; ---------------------------------------------------------------------------
   19194/   41B9C :                     ; ===========================================================================
   19195/   41B9C :                     ; ---------------------------------------------------------------------------
   19196/   41B9C :                     ; Nemesis Compressed Object Patterns
   19197/   41B9C :                     ; ---------------------------------------------------------------------------
   19198/   41B9C :                     ARTNEM_Springs:
   19199/   41B9C :                     	binclude	"artnem/Springs.bin"		; Red and Yellow Springs
   19200/   41F76 : (MACRO)              	even
   19200/   41F76 : =>TRUE                       if notZ80(MOMCPU)
   19200/   41F76 : =>FALSE                              if (*)&1
   19200/   41F76 :                                             dc.b 0                          ;ds.b 1
   19200/   41F76 : [19200]                              endif
   19200/   41F76 : =>FALSE                      else
   19200/   41F76 :                                     if ($)&1
   19200/   41F76 :                                             db 0
   19200/   41F76 : [19200]                              endif
   19200/   41F76 : [19200]                      endif
   19201/   41F76 :                     ; ---------------------------------------------------------------------------
   19202/   41F76 :                     ARTNEM_SpikesHoz:
   19203/   41F76 :                     	binclude	"artnem/Spikes Horizontal.bin"	; Horizontal Spikes
   19204/   4221E : (MACRO)              	even
   19204/   4221E : =>TRUE                       if notZ80(MOMCPU)
   19204/   4221E : =>FALSE                              if (*)&1
   19204/   4221E :                                             dc.b 0                          ;ds.b 1
   19204/   4221E : [19204]                              endif
   19204/   4221E : =>FALSE                      else
   19204/   4221E :                                     if ($)&1
   19204/   4221E :                                             db 0
   19204/   4221E : [19204]                              endif
   19204/   4221E : [19204]                      endif
   19205/   4221E :                     ; ---------------------------------------------------------------------------
   19206/   4221E :                     ARTNEM_SpikesVer:
   19207/   4221E :                     	binclude	"artnem/Spikes Vertical.bin"	; Vertical Spikes
   19208/   422BC : (MACRO)              	even
   19208/   422BC : =>TRUE                       if notZ80(MOMCPU)
   19208/   422BC : =>FALSE                              if (*)&1
   19208/   422BC :                                             dc.b 0                          ;ds.b 1
   19208/   422BC : [19208]                              endif
   19208/   422BC : =>FALSE                      else
   19208/   422BC :                                     if ($)&1
   19208/   422BC :                                             db 0
   19208/   422BC : [19208]                              endif
   19208/   422BC : [19208]                      endif
   19209/   422BC :                     ; ---------------------------------------------------------------------------
   19210/   422BC :                     ; ===========================================================================
   19211/   422BC :                     ; ---------------------------------------------------------------------------
   19212/   422BC :                     ; Sprite mapping - "Sprngs" and "Spikes" Objects
   19213/   422BC :                     ; ---------------------------------------------------------------------------
   19214/   422BC :                     	include	"PLCMAPANI/MAP_Springs.asm"		; Spring mapping
(1)    1/   422BC :                     ; ===========================================================================
(1)    2/   422BC :                     ; ---------------------------------------------------------------------------
(1)    3/   422BC :                     ; Spring mapping
(1)    4/   422BC :                     ; ---------------------------------------------------------------------------
(1)    5/   422BC :                     ; Left/Right
(1)    6/   422BC : 03F0 002D 0000      Map_SpringLR:		dc.b $03,$F0,$00,$2D,$00,$00	; Normal
(1)    7/   422C2 : 01F8 000E F8FF      			dc.b $01,$F8,$00,$0E,$F8,$FF	; ''
(1)    8/   422C8 : 03F8 002D F000      			dc.b $03,$F8,$00,$2D,$F0,$00	; Pushed In
(1)    9/   422CE : 01F8 000E F8FF      			dc.b $01,$F8,$00,$0E,$F8,$FF	; ''
(1)   10/   422D4 : 03F0 002D 1000      			dc.b $03,$F0,$00,$2D,$10,$00	; Pushed Out
(1)   11/   422DA : 09F8 0008 F8FF      			dc.b $09,$F8,$00,$08,$F8,$FF	; ''
(1)   12/   422E0 :                     ; ---------------------------------------------------------------------------
(1)   13/   422E0 :                     ; Up
(1)   14/   422E0 : 0CF8 0029 F000      Map_SpringUp:		dc.b $0C,$F8,$00,$29,$F0,$00	; Normal
(1)   15/   422E6 : 0400 0000 F8FF      			dc.b $04,$00,$00,$00,$F8,$FF	; ''
(1)   16/   422EC : 0C00 0029 F000      			dc.b $0C,$00,$00,$29,$F0,$00	; Pushed In
(1)   17/   422F2 : 0400 0000 F8FF      			dc.b $04,$00,$00,$00,$F8,$FF	; ''
(1)   18/   422F8 : 0CE8 0029 F000      			dc.b $0C,$E8,$00,$29,$F0,$00	; Pushed Out
(1)   19/   422FE : 06F0 0002 F8FF      			dc.b $06,$F0,$00,$02,$F8,$FF	; ''
(1)   20/   42304 :                     ; ---------------------------------------------------------------------------
(1)   21/   42304 :                     ; Angle/Up
(1)   22/   42304 : 0FF4 0031 EC00      Map_SpringAngUp:	dc.b $0F,$F4,$00,$31,$EC,$00	; Normal
(1)   23/   4230A : 0AFC 0010 ECFF      			dc.b $0A,$FC,$00,$10,$EC,$FF	; ''
(1)   24/   42310 : 0FF9 0031 E700      			dc.b $0F,$F9,$00,$31,$E7,$00	; Pushed In
(1)   25/   42316 : 0AFC 0010 ECFF      			dc.b $0A,$FC,$00,$10,$EC,$FF	; ''
(1)   26/   4231C : 0FE6 0031 FA00      			dc.b $0F,$E6,$00,$31,$FA,$00	; Pushed Out
(1)   27/   42322 : 0FF4 0019 ECFF      			dc.b $0F,$F4,$00,$19,$EC,$FF	; ''
(1)   28/   42328 :                     ; ---------------------------------------------------------------------------
(1)   29/   42328 :                     ; Unused
(1)   30/   42328 : 03E0 002D E0FF      			dc.b $03,$E0,$00,$2D,$E0,$FF	; Red Platform Piece From Left/Right Spring
(1)   31/   4232E : 0CF8 0029 F8FF      			dc.b $0C,$F8,$00,$29,$F8,$FF	; Red Platform Piece From Up Spring
(1)   32/   42334 : 0FE0 0031 E0FF      			dc.b $0F,$E0,$00,$31,$E0,$FF	; Red Platform Piece From Angle/Up Spring
(1)   33/   4233A :                     ; ---------------------------------------------------------------------------
(1)   34/   4233A :                     ; ===========================================================================
(1)   35/   4233A :                     
   19215/   4233A :                     	include	"PLCMAPANI/MAP_Spikes.asm"		; Spikes mapping
(1)    1/   4233A :                     ; ===========================================================================
(1)    2/   4233A :                     ; ---------------------------------------------------------------------------
(1)    3/   4233A :                     ; Spikes mapping
(1)    4/   4233A :                     ; ---------------------------------------------------------------------------
(1)    5/   4233A :                     ; (Multiple)
(1)    6/   4233A : 0FF0 0000 F0FF      Map_SpikesUpLrg:	dc.b $0F,$F0,$00,$00,$F0,$FF	; Spikes Up (Large)
(1)    7/   42340 : 0DF8 0010 F0FF      			dc.b $0D,$F8,$00,$10,$F0,$FF	; Spikes Up (Small)
(1)    8/   42346 : 0FF0 0018 F0FF      Map_SpikesLR:		dc.b $0F,$F0,$00,$18,$F0,$FF	; Spikes Left/Right
(1)    9/   4234C : 0FF4 0028 F4FF      Map_SpikesAng:		dc.b $0F,$F4,$00,$28,$F4,$FF	; Angle/Up Spikes
(1)   10/   42352 : 0FF0 0000 F0FF      			dc.b $0F,$F0,$00,$00,$F0,$FF	; Spikes Up (Large)
(1)   11/   42358 :                     ; ---------------------------------------------------------------------------
(1)   12/   42358 :                     ; ===========================================================================
(1)   13/   42358 :                     
(1)   14/   42358 :                     
   19216/   42358 :                     ; ---------------------------------------------------------------------------
   19217/   42358 :                     ; ===========================================================================
   19218/   42358 :                     ; ---------------------------------------------------------------------------
   19219/   42358 :                     ; Unknown Data, Something to do with sprite mapping or PLC (Possibly an
   19220/   42358 :                     ; index block in here?)
   19221/   42358 :                     ; ---------------------------------------------------------------------------
   19222/   42358 :                     
   19223/   42358 : FF64 FF70 FF7C      unk_42358:		dc.b $FF,$64,$FF,$70,$FF,$7C
   19224/   4235E : FF82 FF8E FF9A      unk_4235E:		dc.b $FF,$82,$FF,$8E,$FF,$9A
   19225/   42364 : FFA0 FFAC FFB8      unk_42364:		dc.b $FF,$A0,$FF,$AC,$FF,$B8
   19226/   4236A :                     
   19227/   4236A :                     ; ===========================================================================
   19228/   4236A :                     ; ---------------------------------------------------------------------------
   19229/   4236A :                     ; Object Positions
   19230/   4236A :                     ; ---------------------------------------------------------------------------
   19231/   4236A :                     ; Format:	dc.w $XXXX,$YYYY,$AAAA,$FFFF
   19232/   4236A :                     ;
   19233/   4236A :                     ; XXXX 	=	X Position (If FFFF is placed in X position then it's the end of the list)
   19234/   4236A :                     ; YYYY	=	Y Position
   19235/   4236A :                     ; AAAA	=	ID (This cannot be an odd value or the engine will crash)
   19236/   4236A :                     ; FFFF	=	End of definition (Unless the object is a pathswapper)
   19237/   4236A :                     ;
   19238/   4236A :                     ; ---------------------------------------------------------------------------
   19239/   4236A :                     ; List of valid and invalid Object IDs
   19240/   4236A :                     ;
   19241/   4236A :                     ; AAAA -> 00	=	Red spring - Right
   19242/   4236A :                     ; AAAA -> 02	=	Red spring - Up
   19243/   4236A :                     ; AAAA -> 04	=	Red spring - Left
   19244/   4236A :                     ; AAAA -> 06	=	Blank
   19245/   4236A :                     ; AAAA -> 08	=	Red spring - Up (Duplicate; same as 02)
   19246/   4236A :                     ; AAAA -> 0A	=	Blank
   19247/   4236A :                     ; AAAA -> 0C	=	Red spring - Down
   19248/   4236A :                     ; AAAA -> 0E	=	Blank
   19249/   4236A :                     ; AAAA -> 10	=	Blank
   19250/   4236A :                     ; AAAA -> 12	=	Red spring - Angle Left/Up
   19251/   4236A :                     ; AAAA -> 14	=	Red spring - Angle Right/Up
   19252/   4236A :                     ; AAAA -> 16	=	(Crashes)
   19253/   4236A :                     ; AAAA -> 18	=	Red spring - Angle Left/Up
   19254/   4236A :                     ; AAAA -> 1A	=	(Crashes)
   19255/   4236A :                     ; AAAA -> 1C	=	Red spring - Angle Down/Right
   19256/   4236A :                     ; AAAA -> 1E	=	(Crashes)
   19257/   4236A :                     ; AAAA -> 20	=	Red spring - Angle Down/Left
   19258/   4236A :                     ; AAAA -> 22	=	(Crashes)
   19259/   4236A :                     ; AAAA -> 24	=	Blank
   19260/   4236A :                     ; AAAA -> 26	=	(Crashes)
   19261/   4236A :                     ; AAAA -> 28	=	A Ring that spawns when hit from spikes (Uncollectable)
   19262/   4236A :                     ; AAAA -> 2A	=	(Crashes)
   19263/   4236A :                     ; AAAA -> 2C	=	Blank
   19264/   4236A :                     ; AAAA -> 2E	=	Blank
   19265/   4236A :                     ; AAAA -> 30	=	Blank
   19266/   4236A :                     ; AAAA -> 32	=	(Crashes)
   19267/   4236A :                     ; AAAA -> 34	=	Yellow spring - Right
   19268/   4236A :                     ; AAAA -> 36	=	Yellow spring - Angle Right/Up
   19269/   4236A :                     ; AAAA -> 38	=	Yellow spring - Left
   19270/   4236A :                     ; AAAA -> 3A	=	Yellow spring - Angle Right/Up
   19271/   4236A :                     ; AAAA -> 3C	=	Yellow spring - Up
   19272/   4236A :                     ; AAAA -> 3E	=	Yellow spring - Angle Right/Up
   19273/   4236A :                     ; AAAA -> 40	=	Yellow spring - Down
   19274/   4236A :                     ; AAAA -> 42	=	Yellow spring - Angle Right/Up
   19275/   4236A :                     ; AAAA -> 44	=	Yellow spring - Angle Right/Up
   19276/   4236A :                     ; AAAA -> 46	=	(Crashes)
   19277/   4236A :                     ; AAAA -> 48	=	Yellow spring - Angle Left/Up
   19278/   4236A :                     ; AAAA -> 4A	=	(Crashes)
   19279/   4236A :                     ; AAAA -> 4C	=	Yellow spring - Angle Down/Right
   19280/   4236A :                     ; AAAA -> 4E	=	(Crashes)
   19281/   4236A :                     ; AAAA -> 50	=	Yellow spring - Angle Down/Left
   19282/   4236A :                     ; AAAA -> 52	=	Spikes - Up
   19283/   4236A :                     ; AAAA -> 54	=	Spikes - Up
   19284/   4236A :                     ; AAAA -> 56	=	Spikes - Down (This seems to lag the engine and cause gliches after a few seconds of being present)
   19285/   4236A :                     ; AAAA -> 58	=	Spikes - Down
   19286/   4236A :                     ; AAAA -> 5A	=	(Crashes)
   19287/   4236A :                     ; AAAA -> 5C	=	Spikes - Right
   19288/   4236A :                     ; AAAA -> 5E	=	(Crashes)
   19289/   4236A :                     ; AAAA -> 60	=	Spikes - Left
   19290/   4236A :                     ; AAAA -> 62	=	(Crashes)
   19291/   4236A :                     ; AAAA -> 64	=	Spikes - Angle Right/Up
   19292/   4236A :                     ; AAAA -> 66	=	Spikes - Angle Left/Up
   19293/   4236A :                     ; AAAA -> 68	=	Spikes - Angle Left/Up
   19294/   4236A :                     ; AAAA -> 6A	=	Spikes - Angle Down/Left
   19295/   4236A :                     ; AAAA -> 6C	=	Spikes - Angle Down/Right
   19296/   4236A :                     ; AAAA -> 6E	=	(Crashes)
   19297/   4236A :                     ; AAAA -> 70	=	Spikes Angle Down/Left
   19298/   4236A :                     ; AAAA -> 72+	=	These are either pathswappers, blank, invalid, gliches of previous objects, lag the engine, or crash (as far as I've seen)
   19299/   4236A :                     ;			note: some pathswappers crash on TTZ (Not sure why though)
   19300/   4236A :                     ; ---------------------------------------------------------------------------
   19301/   4236A :                     ; ===========================================================================
   19302/   4236A :                     ; --------------------------------------------------------------------------
   19303/   4236A :                     Objpos_SSZ:
   19304/   4236A :                     	binclude	"objpos/SSZ.bin"		; Speed Slider Zone"s Object Position
   19305/   423C4 : (MACRO)              	even
   19305/   423C4 : =>TRUE                       if notZ80(MOMCPU)
   19305/   423C4 : =>FALSE                              if (*)&1
   19305/   423C4 :                                             dc.b 0                          ;ds.b 1
   19305/   423C4 : [19305]                              endif
   19305/   423C4 : =>FALSE                      else
   19305/   423C4 :                                     if ($)&1
   19305/   423C4 :                                             db 0
   19305/   423C4 : [19305]                              endif
   19305/   423C4 : [19305]                      endif
   19306/   423C4 :                     ; ---------------------------------------------------------------------------
   19307/   423C4 :                     Objpos_TTZ:
   19308/   423C4 :                     	binclude	"objpos/TTZ.bin"		; Techno Tower Zone"s Object Position
   19309/   42486 : (MACRO)              	even
   19309/   42486 : =>TRUE                       if notZ80(MOMCPU)
   19309/   42486 : =>FALSE                              if (*)&1
   19309/   42486 :                                             dc.b 0                          ;ds.b 1
   19309/   42486 : [19309]                              endif
   19309/   42486 : =>FALSE                      else
   19309/   42486 :                                     if ($)&1
   19309/   42486 :                                             db 0
   19309/   42486 : [19309]                              endif
   19309/   42486 : [19309]                      endif
   19310/   42486 :                     ; ---------------------------------------------------------------------------
   19311/   42486 :                     ; ===========================================================================
   19312/   42486 :                     ; ---------------------------------------------------------------------------
   19313/   42486 :                     ; uncompressed Art (Used for animation)
   19314/   42486 :                     ; ---------------------------------------------------------------------------
   19315/   42486 :                     ARTUNC_TTZAnimatedFanFG1:
   19316/   42486 :                     	binclude	"artunc/TTZAnimatedFanFG1.bin"	; Fan tiles 1
   19317/   42686 : (MACRO)              	even
   19317/   42686 : =>TRUE                       if notZ80(MOMCPU)
   19317/   42686 : =>FALSE                              if (*)&1
   19317/   42686 :                                             dc.b 0                          ;ds.b 1
   19317/   42686 : [19317]                              endif
   19317/   42686 : =>FALSE                      else
   19317/   42686 :                                     if ($)&1
   19317/   42686 :                                             db 0
   19317/   42686 : [19317]                              endif
   19317/   42686 : [19317]                      endif
   19318/   42686 :                     ; ---------------------------------------------------------------------------
   19319/   42686 :                     ARTUNC_TTZAnimatedFanFG2:
   19320/   42686 :                     	binclude	"artunc/TTZAnimatedFanFG2.bin"	; Fan tiles 2
   19321/   42886 : (MACRO)              	even
   19321/   42886 : =>TRUE                       if notZ80(MOMCPU)
   19321/   42886 : =>FALSE                              if (*)&1
   19321/   42886 :                                             dc.b 0                          ;ds.b 1
   19321/   42886 : [19321]                              endif
   19321/   42886 : =>FALSE                      else
   19321/   42886 :                                     if ($)&1
   19321/   42886 :                                             db 0
   19321/   42886 : [19321]                              endif
   19321/   42886 : [19321]                      endif
   19322/   42886 :                     ; ---------------------------------------------------------------------------
   19323/   42886 :                     ARTUNC_TTZAnimatedTurbineBG1:
   19324/   42886 :                     	binclude	"artunc/TTZAnimatedTurbineBG1.bin" ; Turbine tiles 1
   19325/   42C86 : (MACRO)              	even
   19325/   42C86 : =>TRUE                       if notZ80(MOMCPU)
   19325/   42C86 : =>FALSE                              if (*)&1
   19325/   42C86 :                                             dc.b 0                          ;ds.b 1
   19325/   42C86 : [19325]                              endif
   19325/   42C86 : =>FALSE                      else
   19325/   42C86 :                                     if ($)&1
   19325/   42C86 :                                             db 0
   19325/   42C86 : [19325]                              endif
   19325/   42C86 : [19325]                      endif
   19326/   42C86 :                     ; ---------------------------------------------------------------------------
   19327/   42C86 :                     ARTUNC_TTZAnimatedTurbineBG2:
   19328/   42C86 :                     	binclude	"artunc/TTZAnimatedTurbineBG2.bin" ; Turbine tiles 2
   19329/   43086 : (MACRO)              	even
   19329/   43086 : =>TRUE                       if notZ80(MOMCPU)
   19329/   43086 : =>FALSE                              if (*)&1
   19329/   43086 :                                             dc.b 0                          ;ds.b 1
   19329/   43086 : [19329]                              endif
   19329/   43086 : =>FALSE                      else
   19329/   43086 :                                     if ($)&1
   19329/   43086 :                                             db 0
   19329/   43086 : [19329]                              endif
   19329/   43086 : [19329]                      endif
   19330/   43086 :                     ; ---------------------------------------------------------------------------
   19331/   43086 :                     ARTUNC_TTZAnimatedTurbineBG3:
   19332/   43086 :                     	binclude	"artunc/TTZAnimatedTurbineBG3.bin" ; Turbine tiles 3
   19333/   43486 : (MACRO)              	even
   19333/   43486 : =>TRUE                       if notZ80(MOMCPU)
   19333/   43486 : =>FALSE                              if (*)&1
   19333/   43486 :                                             dc.b 0                          ;ds.b 1
   19333/   43486 : [19333]                              endif
   19333/   43486 : =>FALSE                      else
   19333/   43486 :                                     if ($)&1
   19333/   43486 :                                             db 0
   19333/   43486 : [19333]                              endif
   19333/   43486 : [19333]                      endif
   19334/   43486 :                     ; ---------------------------------------------------------------------------
   19335/   43486 :                     ARTUNC_TTZAnimatedTurbineBG4:
   19336/   43486 :                     	binclude	"artunc/TTZAnimatedTurbineBG4.bin" ; Turbine tiles 4
   19337/   44886 : (MACRO)              	even
   19337/   44886 : =>TRUE                       if notZ80(MOMCPU)
   19337/   44886 : =>FALSE                              if (*)&1
   19337/   44886 :                                             dc.b 0                          ;ds.b 1
   19337/   44886 : [19337]                              endif
   19337/   44886 : =>FALSE                      else
   19337/   44886 :                                     if ($)&1
   19337/   44886 :                                             db 0
   19337/   44886 : [19337]                              endif
   19337/   44886 : [19337]                      endif
   19338/   44886 :                     ; ---------------------------------------------------------------------------
   19339/   44886 :                     ARTUNC_TTZAnimatedTurbineBG5:
   19340/   44886 :                     	binclude	"artunc/TTZAnimatedTurbineBG5.bin" ; Turbine tiles 5
   19341/   448C6 : (MACRO)              	even
   19341/   448C6 : =>TRUE                       if notZ80(MOMCPU)
   19341/   448C6 : =>FALSE                              if (*)&1
   19341/   448C6 :                                             dc.b 0                          ;ds.b 1
   19341/   448C6 : [19341]                              endif
   19341/   448C6 : =>FALSE                      else
   19341/   448C6 :                                     if ($)&1
   19341/   448C6 :                                             db 0
   19341/   448C6 : [19341]                              endif
   19341/   448C6 : [19341]                      endif
   19342/   448C6 :                     ; ---------------------------------------------------------------------------
   19343/   448C6 :                     ARTUNC_TTZAnimatedTurbineBG6:
   19344/   448C6 :                     	binclude	"artunc/TTZAnimatedTurbineBG6.bin" ; Turbine tiles 6
   19345/   44906 : (MACRO)              	even
   19345/   44906 : =>TRUE                       if notZ80(MOMCPU)
   19345/   44906 : =>FALSE                              if (*)&1
   19345/   44906 :                                             dc.b 0                          ;ds.b 1
   19345/   44906 : [19345]                              endif
   19345/   44906 : =>FALSE                      else
   19345/   44906 :                                     if ($)&1
   19345/   44906 :                                             db 0
   19345/   44906 : [19345]                              endif
   19345/   44906 : [19345]                      endif
   19346/   44906 :                     ; ---------------------------------------------------------------------------
   19347/   44906 :                     ARTUNC_TTZAnimatedTurbineBG7:
   19348/   44906 :                     	binclude	"artunc/TTZAnimatedTurbineBG7.bin" ; Turbine tiles 7
   19349/   44946 : (MACRO)              	even
   19349/   44946 : =>TRUE                       if notZ80(MOMCPU)
   19349/   44946 : =>FALSE                              if (*)&1
   19349/   44946 :                                             dc.b 0                          ;ds.b 1
   19349/   44946 : [19349]                              endif
   19349/   44946 : =>FALSE                      else
   19349/   44946 :                                     if ($)&1
   19349/   44946 :                                             db 0
   19349/   44946 : [19349]                              endif
   19349/   44946 : [19349]                      endif
   19350/   44946 :                     ; ---------------------------------------------------------------------------
   19351/   44946 :                     ; ===========================================================================
   19352/   44946 :                     ; ---------------------------------------------------------------------------
   19353/   44946 :                     ; Multiple Uncompressed Art (some of these are unused)
   19354/   44946 :                     ; ---------------------------------------------------------------------------
   19355/   44946 :                     AniArt_Combi:						; "COMBI" (Unused)
   19356/   44946 :                     	binclude	"artunc/Combi_Un.bin"
   19357/   44A66 :                     AniArt_Limits:						; "LIMITS" (Unused)
   19358/   44A66 :                     	binclude	"artunc/Limits_Un.bin"
   19359/   44BA6 :                     AniArt_StripBlock:					; Striped Block (Unused)
   19360/   44BA6 :                     	binclude	"artunc/StripBlock_Un.bin"
   19361/   44C66 :                     AniArt_Score:						; "SCORE" (Unused)
   19362/   44C66 :                     	binclude	"artunc/Score_Un.bin"
   19363/   44D66 :                     AniArt_Rings:						; "RINGS" (Unused)
   19364/   44D66 :                     	binclude	"artunc/Rings_Un.bin"
   19365/   44E66 :                     AniArt_SLTime:						; "/TIME" (Unused)
   19366/   44E66 :                     	binclude	"artunc/SLTime_Un.bin"
   19367/   44F66 :                     AniArt_Hud1to9_Sym:					; "0" to "9" Hud (Exclaimation Mark, and Minute/Second Symbol)
   19368/   44F66 :                     	binclude	"artunc/Hud0to9_Sym.bin"
   19369/   45246 :                     AniArt_RingSprites:					; Ring Sprites
   19370/   45246 :                     	binclude	"artunc/Spark_Ring.bin"
   19371/   45446 :                     AniArt_Tether:						; Tether Star Sprites
   19372/   45446 :                     	binclude	"artunc/Tether.bin"
   19373/   454C6 :                     AniArt_MultiStars:					; Multiple Stars (Unused)
   19374/   454C6 :                     	binclude	"artunc/MultipleStars_Un.bin"
   19375/   45906 :                     AniArt_MiliSymbol:					; "" (Second/Mili-Second Symbol)
   19376/   45906 :                     	binclude	"artunc/Hud_Sym2.bin"
   19377/   45926 :                     ; ---------------------------------------------------------------------------
   19378/   45926 :                     ; ===========================================================================
   19379/   45926 :                     ; ---------------------------------------------------------------------------
   19380/   45926 :                     ; Field Data (Palettes, Art, mapping)
   19381/   45926 :                     ; ---------------------------------------------------------------------------
   19382/   45926 :                     
   19383/   45926 :                     PAL_RainbowField:
   19384/   45926 :                     	binclude	"Palettes/PalRainbowField.bin"	; Palettes for Rainbow Field
   19385/   45966 : (MACRO)              	even
   19385/   45966 : =>TRUE                       if notZ80(MOMCPU)
   19385/   45966 : =>FALSE                              if (*)&1
   19385/   45966 :                                             dc.b 0                          ;ds.b 1
   19385/   45966 : [19385]                              endif
   19385/   45966 : =>FALSE                      else
   19385/   45966 :                                     if ($)&1
   19385/   45966 :                                             db 0
   19385/   45966 : [19385]                              endif
   19385/   45966 : [19385]                      endif
   19386/   45966 :                     ARTCRA_RainbowField8x8:
   19387/   45966 :                     	binclude	"artcra/Rainbow Field.bin"	; 8x8 tiles for Rainbow Field
   19388/   48FE0 : (MACRO)              	even
   19388/   48FE0 : =>TRUE                       if notZ80(MOMCPU)
   19388/   48FE0 : =>FALSE                              if (*)&1
   19388/   48FE0 :                                             dc.b 0                          ;ds.b 1
   19388/   48FE0 : [19388]                              endif
   19388/   48FE0 : =>FALSE                      else
   19388/   48FE0 :                                     if ($)&1
   19388/   48FE0 :                                             db 0
   19388/   48FE0 : [19388]                              endif
   19388/   48FE0 : [19388]                      endif
   19389/   48FE0 :                     MAPUNC_RainbowFieldFG:
   19390/   48FE0 :                     	binclude	"Uncompressed/MapuncRainbowFieldFG.bin" ; Screen map for Rainbow Field FG
   19391/   4B002 : (MACRO)              	even
   19391/   4B002 : =>TRUE                       if notZ80(MOMCPU)
   19391/   4B002 : =>FALSE                              if (*)&1
   19391/   4B002 :                                             dc.b 0                          ;ds.b 1
   19391/   4B002 : [19391]                              endif
   19391/   4B002 : =>FALSE                      else
   19391/   4B002 :                                     if ($)&1
   19391/   4B002 :                                             db 0
   19391/   4B002 : [19391]                              endif
   19391/   4B002 : [19391]                      endif
   19392/   4B002 :                     MAPUNC_RainbowFieldBG:
   19393/   4B002 :                     	binclude	"Uncompressed/MapuncRainbowFieldBG.bin" ; Screen map for Rainbow Field BG
   19394/   4C014 : (MACRO)              	even
   19394/   4C014 : =>TRUE                       if notZ80(MOMCPU)
   19394/   4C014 : =>FALSE                              if (*)&1
   19394/   4C014 :                                             dc.b 0                          ;ds.b 1
   19394/   4C014 : [19394]                              endif
   19394/   4C014 : =>FALSE                      else
   19394/   4C014 :                                     if ($)&1
   19394/   4C014 :                                             db 0
   19394/   4C014 : [19394]                              endif
   19394/   4C014 : [19394]                      endif
   19395/   4C014 :                     PAL_ElectricField:
   19396/   4C014 :                     	binclude	"Palettes/PalElectricField.bin"	; Palettes for Electric Field
   19397/   4C054 : (MACRO)              	even
   19397/   4C054 : =>TRUE                       if notZ80(MOMCPU)
   19397/   4C054 : =>FALSE                              if (*)&1
   19397/   4C054 :                                             dc.b 0                          ;ds.b 1
   19397/   4C054 : [19397]                              endif
   19397/   4C054 : =>FALSE                      else
   19397/   4C054 :                                     if ($)&1
   19397/   4C054 :                                             db 0
   19397/   4C054 : [19397]                              endif
   19397/   4C054 : [19397]                      endif
   19398/   4C054 :                     ARTCRA_ElectricField8x8:
   19399/   4C054 :                     	binclude	"artcra/Electric Field.bin"	; 8x8 tiles for Electric Field
   19400/   5108A : (MACRO)              	even
   19400/   5108A : =>TRUE                       if notZ80(MOMCPU)
   19400/   5108A : =>FALSE                              if (*)&1
   19400/   5108A :                                             dc.b 0                          ;ds.b 1
   19400/   5108A : [19400]                              endif
   19400/   5108A : =>FALSE                      else
   19400/   5108A :                                     if ($)&1
   19400/   5108A :                                             db 0
   19400/   5108A : [19400]                              endif
   19400/   5108A : [19400]                      endif
   19401/   5108A :                     MAPUNC_ElectricFieldFG:
   19402/   5108A :                     	binclude	"Uncompressed/MapuncElectricFieldFG.bin" ; Screen map for Electric Field FG
   19403/   530AC : (MACRO)              	even
   19403/   530AC : =>TRUE                       if notZ80(MOMCPU)
   19403/   530AC : =>FALSE                              if (*)&1
   19403/   530AC :                                             dc.b 0                          ;ds.b 1
   19403/   530AC : [19403]                              endif
   19403/   530AC : =>FALSE                      else
   19403/   530AC :                                     if ($)&1
   19403/   530AC :                                             db 0
   19403/   530AC : [19403]                              endif
   19403/   530AC : [19403]                      endif
   19404/   530AC :                     MAPUNC_ElectricFieldBG:
   19405/   530AC :                     	binclude	"Uncompressed/MapuncElectricFieldBG.bin" ; Screen map for Electric Field BG
   19406/   54460 : (MACRO)              	even
   19406/   54460 : =>TRUE                       if notZ80(MOMCPU)
   19406/   54460 : =>FALSE                              if (*)&1
   19406/   54460 :                                             dc.b 0                          ;ds.b 1
   19406/   54460 : [19406]                              endif
   19406/   54460 : =>FALSE                      else
   19406/   54460 :                                     if ($)&1
   19406/   54460 :                                             db 0
   19406/   54460 : [19406]                              endif
   19406/   54460 : [19406]                      endif
   19407/   54460 :                     ; ---------------------------------------------------------------------------
   19408/   54460 :                     ; ===========================================================================
   19409/   54460 :                     ; ---------------------------------------------------------------------------
   19410/   54460 :                     ; Unknown Data
   19411/   54460 :                     ; ---------------------------------------------------------------------------
   19412/   54460 :                     ; Large Section of Data, has 2 padded sections, and something that looks like
   19413/   54460 :                     ; uncompressed Tails mini art (May wanna look into this in the near future)
   19414/   54460 :                     ; ---------------------------------------------------------------------------
   19415/   54460 :                     ; Data Location (00054460 - 00025A3FF)
   19416/   54460 :                     ; Striped out
   19417/   54460 :                     ; UnkData_00054460:
   19418/   54460 :                     		binclude	"UnknownCodes/UnknownData_00054460.bin"
   19419/   5A400 :                     ; ---------------------------------------------------------------------------
   19420/   5A400 :                     ; ===========================================================================
   19421/   5A400 :                     ; ---------------------------------------------------------------------------
   19422/   5A400 :                     ; Align to $00060000, Sonic's Arms
   19423/   5A400 :                     ; ---------------------------------------------------------------------------
   19424/   5A400 : (MACRO)              	align $6000
   19424/   5A400 :  (MACRO-2)                   cnop 0,$6000
   19424/   5A400 : =>TRUE                       if notZ80(MOMCPU)
   19424/   5A400 :   (MACRO-3)                          org (*-1+($6000)-((*-1+(-(0)))#($6000)))
   19424/   5A400 : =>TRUE                       if notZ80(MOMCPU)
   19424/   5A400 : =>FALSE                              if (*-1+($6000)-((*-1+(-(0)))#($6000))) < *
   19424/   5A400 :                                             error "too much stuff before org $\{(*-1+($6000)-((*-1+(-(0)))#($6000)))} ($\{(*-(*-1+($6000)-((*-1+(-(0)))#($6000))))} bytes)"
   19424/   5A400 : =>TRUE                               else
   19424/   60000 :                                             !org (*-1+($6000)-((*-1+(-(0)))#($6000)))
   19424/   60000 : [19424]                              endif
   19424/   60000 : =>FALSE                      else
   19424/   60000 :                                     if (*-1+($6000)-((*-1+(-(0)))#($6000))) < $
   19424/   60000 :                                             error "too much stuff before org 0\{(*-1+($6000)-((*-1+(-(0)))#($6000)))}h (0\{($-(*-1+($6000)-((*-1+(-(0)))#($6000))))}h bytes)"
   19424/   60000 :                                     else
   19424/   60000 :                                             while (*-1+($6000)-((*-1+(-(0)))#($6000))) > $
   19424/   60000 :                                                     db 0
   19424/   60000 :                                             endm
   19424/   60000 : [19424]                              endif
   19424/   60000 : [19424]                      endif
   19424/   60000 : =>FALSE                      else
   19424/   60000 :                                     org ($-1+($6000)-(($-1+(-(0)))#($6000)))
   19424/   60000 : [19424]                      endif
   19425/   60000 :                     ; ---------------------------------------------------------------------------
   19426/   60000 :                     ARTUNC_SonicArms:
   19427/   60000 :                     	binclude	"artunc/SonicArms.bin"		; Sonic's Arms
   19428/   63720 : (MACRO)              	even
   19428/   63720 : =>TRUE                       if notZ80(MOMCPU)
   19428/   63720 : =>FALSE                              if (*)&1
   19428/   63720 :                                             dc.b 0                          ;ds.b 1
   19428/   63720 : [19428]                              endif
   19428/   63720 : =>FALSE                      else
   19428/   63720 :                                     if ($)&1
   19428/   63720 :                                             db 0
   19428/   63720 : [19428]                              endif
   19428/   63720 : [19428]                      endif
   19429/   63720 :                     ; ---------------------------------------------------------------------------
   19430/   63720 :                     ; ===========================================================================
   19431/   63720 :                     ; ---------------------------------------------------------------------------
   19432/   63720 :                     ; Align to $00064000, Tails' Arms
   19433/   63720 :                     ; ---------------------------------------------------------------------------
   19434/   63720 : (MACRO)              	align $1000
   19434/   63720 :  (MACRO-2)                   cnop 0,$1000
   19434/   63720 : =>TRUE                       if notZ80(MOMCPU)
   19434/   63720 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19434/   63720 : =>TRUE                       if notZ80(MOMCPU)
   19434/   63720 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19434/   63720 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19434/   63720 : =>TRUE                               else
   19434/   64000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19434/   64000 : [19434]                              endif
   19434/   64000 : =>FALSE                      else
   19434/   64000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19434/   64000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19434/   64000 :                                     else
   19434/   64000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19434/   64000 :                                                     db 0
   19434/   64000 :                                             endm
   19434/   64000 : [19434]                              endif
   19434/   64000 : [19434]                      endif
   19434/   64000 : =>FALSE                      else
   19434/   64000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19434/   64000 : [19434]                      endif
   19435/   64000 :                     ; ---------------------------------------------------------------------------
   19436/   64000 :                     ARTUNC_TailsArms:
   19437/   64000 :                     	binclude	"artunc/TailsArms.bin"		; Tails' Arms
   19438/   66680 : (MACRO)              	even
   19438/   66680 : =>TRUE                       if notZ80(MOMCPU)
   19438/   66680 : =>FALSE                              if (*)&1
   19438/   66680 :                                             dc.b 0                          ;ds.b 1
   19438/   66680 : [19438]                              endif
   19438/   66680 : =>FALSE                      else
   19438/   66680 :                                     if ($)&1
   19438/   66680 :                                             db 0
   19438/   66680 : [19438]                              endif
   19438/   66680 : [19438]                      endif
   19439/   66680 :                     ; ---------------------------------------------------------------------------
   19440/   66680 :                     ; ===========================================================================
   19441/   66680 :                     ; ---------------------------------------------------------------------------
   19442/   66680 :                     ; PLC, mapping & Main index block - Sonic's Arm
   19443/   66680 :                     ; ---------------------------------------------------------------------------
   19444/   66680 :                     PLCMAP_SonArm_MainIndex:
   19445/   66680 :                     	include	"PLCMAPANI/PLCMAP_IndxBlck_SonicArm.asm"
(1)    1/   66680 :                     ; ===========================================================================
(1)    2/   66680 :                     ; ---------------------------------------------------------------------------
(1)    3/   66680 :                     ; PLC/Sprite map index block - Sonic's Arm
(1)    4/   66680 :                     ; ---------------------------------------------------------------------------
(1)    5/   66680 :                     ; An example of the setup:
(1)    6/   66680 :                     ;
(1)    7/   66680 :                     ;		dc.w Location-Map_SonicArm,			Location-PLC_SonicArm
(1)    8/   66680 :                     ;		dc.w Location-Map_SonicArm,			Location-PLC_SonicArm
(1)    9/   66680 :                     ;		dc.w Location-Map_SonicArm,			Location-PLC_SonicArm
(1)   10/   66680 :                     ; etc, etc.
(1)   11/   66680 :                     ; ---------------------------------------------------------------------------
(1)   12/   66680 :                     ; ===========================================================================
(1)   13/   66680 : 0000 0000           		dc.w MapSArm_Wait1-Map_SonicArm,		PLCSArm_Wait1-PLC_SonicArm
(1)   14/   66684 : 0006 000A           		dc.w MapSArm_Wait2-Map_SonicArm,		PLCSArm_Wait2-PLC_SonicArm
(1)   15/   66688 : 000C 0014           		dc.W MapSArm_Wait3-Map_SonicArm,		PLCSArm_Wait3-PLC_SonicArm
(1)   16/   6668C : 0012 001E           		dc.W MapSArm_Walk5_000-Map_SonicArm,		PLCSArm_Walk5_000-PLC_SonicArm
(1)   17/   66690 : 0018 0028           		dc.W MapSArm_Walk6_000-Map_SonicArm,		PLCSArm_Walk6_000-PLC_SonicArm
(1)   18/   66694 : 001E 0032           		dc.W MapSArm_Walk1_000-Map_SonicArm,		PLCSArm_Walk1_000-PLC_SonicArm
(1)   19/   66698 : 0024 003C           		dc.W MapSArm_Walk2_000-Map_SonicArm,		PLCSArm_Walk2_000-PLC_SonicArm
(1)   20/   6669C : 002A 0046           		dc.W MapSArm_Walk3_000-Map_SonicArm,		PLCSArm_Walk3_000-PLC_SonicArm
(1)   21/   666A0 : 0030 0050           		dc.W MapSArm_Walk4_000-Map_SonicArm,		PLCSArm_Walk4_000-PLC_SonicArm
(1)   22/   666A4 : 0036 005A           		dc.W MapSArm_Walk5_045-Map_SonicArm,		PLCSArm_Walk5_045-PLC_SonicArm
(1)   23/   666A8 : 003C 0064           		dc.W MapSArm_Walk6_045-Map_SonicArm,		PLCSArm_Walk6_045-PLC_SonicArm
(1)   24/   666AC : 0042 006E           		dc.W MapSArm_Walk1_045-Map_SonicArm,		PLCSArm_Walk1_045-PLC_SonicArm
(1)   25/   666B0 : 0048 0078           		dc.W MapSArm_Walk2_045-Map_SonicArm,		PLCSArm_Walk2_045-PLC_SonicArm
(1)   26/   666B4 : 004E 0082           		dc.W MapSArm_Walk3_045-Map_SonicArm,		PLCSArm_Walk3_045-PLC_SonicArm
(1)   27/   666B8 : 0054 008C           		dc.W MapSArm_Walk4_045-Map_SonicArm,		PLCSArm_Walk4_045-PLC_SonicArm
(1)   28/   666BC : 005A 0096           		dc.W MapSArm_Walk5_090-Map_SonicArm,		PLCSArm_Walk5_090-PLC_SonicArm
(1)   29/   666C0 : 0060 00A0           		dc.W MapSArm_Walk6_090-Map_SonicArm,		PLCSArm_Walk6_090-PLC_SonicArm
(1)   30/   666C4 : 0066 00AA           		dc.W MapSArm_Walk1_090-Map_SonicArm,		PLCSArm_Walk1_090-PLC_SonicArm
(1)   31/   666C8 : 006C 00B4           		dc.W MapSArm_Walk2_090-Map_SonicArm,		PLCSArm_Walk2_090-PLC_SonicArm
(1)   32/   666CC : 0072 00BE           		dc.W MapSArm_Walk3_090-Map_SonicArm,		PLCSArm_Walk3_090-PLC_SonicArm
(1)   33/   666D0 : 0078 00C8           		dc.W MapSArm_Walk4_090-Map_SonicArm,		PLCSArm_Walk4_090-PLC_SonicArm
(1)   34/   666D4 : 007E 00D2           		dc.W MapSArm_Walk5_135-Map_SonicArm,		PLCSArm_Walk5_135-PLC_SonicArm
(1)   35/   666D8 : 0084 00DC           		dc.W MapSArm_Walk6_135-Map_SonicArm,		PLCSArm_Walk6_135-PLC_SonicArm
(1)   36/   666DC : 008A 00E6           		dc.W MapSArm_Walk1_135-Map_SonicArm,		PLCSArm_Walk1_135-PLC_SonicArm
(1)   37/   666E0 : 0090 00F0           		dc.W MapSArm_Walk2_135-Map_SonicArm,		PLCSArm_Walk2_135-PLC_SonicArm
(1)   38/   666E4 : 0096 00FA           		dc.W MapSArm_Walk3_135-Map_SonicArm,		PLCSArm_Walk3_135-PLC_SonicArm
(1)   39/   666E8 : 009C 0104           		dc.W MapSArm_Walk4_135-Map_SonicArm,		PLCSArm_Walk4_135-PLC_SonicArm
(1)   40/   666EC : 00A2 010E           		dc.W MapSArm_Run_000-Map_SonicArm,		PLCSArm_Run_000-PLC_SonicArm
(1)   41/   666F0 : 00A8 0118           		dc.W MapSArm_Run_045-Map_SonicArm,		PLCSArm_Run_045-PLC_SonicArm
(1)   42/   666F4 : 00AE 0122           		dc.W MapSArm_Run_090-Map_SonicArm,		PLCSArm_Run_090-PLC_SonicArm
(1)   43/   666F8 : 00B4 012C           		dc.W MapSArm_Run_135-Map_SonicArm,		PLCSArm_Run_135-PLC_SonicArm
(1)   44/   666FC : 00BA 0136           		dc.W MapSArm_Pul_Lft_000-Map_SonicArm,		PLCSArm_Pul_Lft_000-PLC_SonicArm
(1)   45/   66700 : 00C0 0140           		dc.W MapSArm_Pul_LftDwn_020-Map_SonicArm,	PLCSArm_Pul_LftDwn_020-PLC_SonicArm
(1)   46/   66704 : 00C6 014A           		dc.W MapSArm_Pul_LftDwn_045-Map_SonicArm,	PLCSArm_Pul_LftDwn_045-PLC_SonicArm
(1)   47/   66708 : 00CC 0154           		dc.W MapSArm_Pul_LftDwn_060-Map_SonicArm,	PLCSArm_Pul_LftDwn_060-PLC_SonicArm
(1)   48/   6670C : 00D2 015E           		dc.W MapSArm_Pul_Dwn_000-Map_SonicArm,		PLCSArm_Pul_Dwn_000-PLC_SonicArm
(1)   49/   66710 : 00D8 0168           		dc.W MapSArm_Pul_DwnRht_020-Map_SonicArm,	PLCSArm_Pul_DwnRht_020-PLC_SonicArm
(1)   50/   66714 : 00DE 0172           		dc.W MapSArm_Pul_DwnRht_045-Map_SonicArm,	PLCSArm_Pul_DwnRht_045-PLC_SonicArm
(1)   51/   66718 : 00EA 017C           		dc.W MapSArm_Pul_DwnRht_060-Map_SonicArm,	PLCSArm_Pul_DwnRht_060-PLC_SonicArm
(1)   52/   6671C : 00F0 0186           		dc.W MapSArm_Pul_Rht_000-Map_SonicArm,		PLCSArm_Pul_Rht_000-PLC_SonicArm
(1)   53/   66720 : 00FC 0190           		dc.W MapSArm_Pul_RhtUp_020-Map_SonicArm,	PLCSArm_Pul_RhtUp_020-PLC_SonicArm
(1)   54/   66724 : 0102 019A           		dc.W MapSArm_Pul_RhtUp_045-Map_SonicArm,	PLCSArm_Pul_RhtUp_045-PLC_SonicArm
(1)   55/   66728 : 010E 01A4           		dc.W MapSArm_Pul_RhtUp_060-Map_SonicArm,	PLCSArm_Pul_RhtUp_060-PLC_SonicArm
(1)   56/   6672C : 0114 01AE           		dc.W MapSArm_Pul_Up_000-Map_SonicArm,		PLCSArm_Pul_Up_000-PLC_SonicArm
(1)   57/   66730 : 011A 01B8           		dc.W MapSArm_Pul_UpDwn_020-Map_SonicArm,	PLCSArm_Pul_UpDwn_020-PLC_SonicArm
(1)   58/   66734 : 0120 01C2           		dc.W MapSArm_Pul_UpDwn_045-Map_SonicArm,	PLCSArm_Pul_UpDwn_045-PLC_SonicArm
(1)   59/   66738 : 012C 01CC           		dc.W MapSArm_Pul_UpDwn_060-Map_SonicArm,	PLCSArm_Pul_UpDwn_060-PLC_SonicArm
(1)   60/   6673C : 0132 01D6           		dc.W MapSArm_Hold1_000-Map_SonicArm,		PLCSArm_Hold1_000-PLC_SonicArm
(1)   61/   66740 : 0138 01E0           		dc.W MapSArm_Hold2_000-Map_SonicArm,		PLCSArm_Hold2_000-PLC_SonicArm
(1)   62/   66744 : 013E 01EA           		dc.W MapSArm_Hold3_000-Map_SonicArm,		PLCSArm_Hold3_000-PLC_SonicArm
(1)   63/   66748 : 0144 01F4           		dc.W MapSArm_Hold1_045-Map_SonicArm,		PLCSArm_Hold1_045-PLC_SonicArm
(1)   64/   6674C : 014A 01FE           		dc.W MapSArm_Hold2_045-Map_SonicArm,		PLCSArm_Hold2_045-PLC_SonicArm
(1)   65/   66750 : 0150 0208           		dc.W MapSArm_Hold3_045-Map_SonicArm,		PLCSArm_Hold3_045-PLC_SonicArm
(1)   66/   66754 : 0156 0212           		dc.W MapSArm_Hold1_090-Map_SonicArm,		PLCSArm_Hold1_090-PLC_SonicArm
(1)   67/   66758 : 015C 021C           		dc.W MapSArm_Hold2_090-Map_SonicArm,		PLCSArm_Hold2_090-PLC_SonicArm
(1)   68/   6675C : 0162 0226           		dc.W MapSArm_Hold3_090-Map_SonicArm,		PLCSArm_Hold3_090-PLC_SonicArm
(1)   69/   66760 : 0168 0230           		dc.W MapSArm_Hold1_135-Map_SonicArm,		PLCSArm_Hold1_135-PLC_SonicArm
(1)   70/   66764 : 016E 023A           		dc.W MapSArm_Hold2_135-Map_SonicArm,		PLCSArm_Hold2_135-PLC_SonicArm
(1)   71/   66768 : 0174 0244           		dc.W MapSArm_Hold3_135-Map_SonicArm,		PLCSArm_Hold3_135-PLC_SonicArm
(1)   72/   6676C : 017A 024E           		dc.W MapSArm_Unused_00-Map_SonicArm,		PLCSArm_Unused_00-PLC_SonicArm
(1)   73/   66770 : 0180 0258           		dc.W MapSArm_Unused_01-Map_SonicArm,		PLCSArm_Unused_01-PLC_SonicArm
(1)   74/   66774 : 0186 0262           		dc.W MapSArm_Unused_02-Map_SonicArm,		PLCSArm_Unused_02-PLC_SonicArm
(1)   75/   66778 : 018C 026C           		dc.W MapSArm_Unused_03-Map_SonicArm,		PLCSArm_Unused_03-PLC_SonicArm
(1)   76/   6677C : 0192 0276           		dc.W MapSArm_Unused_04-Map_SonicArm,		PLCSArm_Unused_04-PLC_SonicArm
(1)   77/   66780 : 0198 0280           		dc.W MapSArm_Unused_05-Map_SonicArm,		PLCSArm_Unused_05-PLC_SonicArm
(1)   78/   66784 : 019E 028A           		dc.W MapSArm_Unused_06-Map_SonicArm,		PLCSArm_Unused_06-PLC_SonicArm
(1)   79/   66788 : 01A4 0294           		dc.W MapSArm_Unused_07-Map_SonicArm,		PLCSArm_Unused_07-PLC_SonicArm
(1)   80/   6678C : 01AA 029E           		dc.W MapSArm_Unused_08-Map_SonicArm,		PLCSArm_Unused_08-PLC_SonicArm
(1)   81/   66790 : 01B0 02A8           		dc.W MapSArm_Unused_09-Map_SonicArm,		PLCSArm_Unused_09-PLC_SonicArm
(1)   82/   66794 : 01B6 02B2           		dc.W MapSArm_Unused_0A-Map_SonicArm,		PLCSArm_Unused_0A-PLC_SonicArm
(1)   83/   66798 : 01BC 02BC           		dc.W MapSArm_Unused_0B-Map_SonicArm,		PLCSArm_Unused_0B-PLC_SonicArm
(1)   84/   6679C : 01C2 02C6           		dc.W MapSArm_Unused_0C-Map_SonicArm,		PLCSArm_Unused_0C-PLC_SonicArm
(1)   85/   667A0 : 01C8 02D0           		dc.W MapSArm_Unused_0D-Map_SonicArm, 		PLCSArm_Unused_0D-PLC_SonicArm
(1)   86/   667A4 : 01D4 02DA           		dc.W MapSArm_Unused_0E-Map_SonicArm,		PLCSArm_Unused_0E-PLC_SonicArm
(1)   87/   667A8 : 01DA 02E4           		dc.W MapSArm_Unused_0F-Map_SonicArm,		PLCSArm_Unused_0F-PLC_SonicArm
(1)   88/   667AC : 01E0 02EE           		dc.W MapSArm_Unused_10-Map_SonicArm,		PLCSArm_Unused_10-PLC_SonicArm
(1)   89/   667B0 : 01E6 02F8           		dc.W MapSArm_Unused_11-Map_SonicArm,		PLCSArm_Unused_11-PLC_SonicArm
(1)   90/   667B4 : 01EC 0302           		dc.W MapSArm_Unused_12-Map_SonicArm,		PLCSArm_Unused_12-PLC_SonicArm
(1)   91/   667B8 : 01F2 030C           		dc.W MapSArm_Unused_13-Map_SonicArm,		PLCSArm_Unused_13-PLC_SonicArm
(1)   92/   667BC : 01F8 0316           		dc.W MapSArm_Unused_14-Map_SonicArm,		PLCSArm_Unused_14-PLC_SonicArm
(1)   93/   667C0 : 01FE 0320           		dc.W MapSArm_Unused_15-Map_SonicArm,		PLCSArm_Unused_15-PLC_SonicArm
(1)   94/   667C4 : 0204 032A           		dc.W MapSArm_Unused_16-Map_SonicArm,		PLCSArm_Unused_16-PLC_SonicArm
(1)   95/   667C8 : 020A 0334           		dc.W MapSArm_Unused_17-Map_SonicArm,		PLCSArm_Unused_17-PLC_SonicArm
(1)   96/   667CC : 0210 033E           		dc.W MapSArm_Unused_18-Map_SonicArm,		PLCSArm_Unused_18-PLC_SonicArm
(1)   97/   667D0 : 0216 0348           		dc.W MapSArm_Unused_19-Map_SonicArm,		PLCSArm_Unused_19-PLC_SonicArm
(1)   98/   667D4 : 0222 0352           		dc.W MapSArm_Unused_1A-Map_SonicArm,		PLCSArm_Unused_1A-PLC_SonicArm
(1)   99/   667D8 :                     ; ---------------------------------------------------------------------------
(1)  100/   667D8 :                     ; ===========================================================================
(1)  101/   667D8 :                     
   19446/   667D8 :                     ; ---------------------------------------------------------------------------
   19447/   667D8 :                     PLC_SonicArm:
   19448/   667D8 :                     	include	"PLCMAPANI/PLC_SonicArm.asm"
(1)    1/   667D8 :                     ; ===========================================================================
(1)    2/   667D8 :                     ; ---------------------------------------------------------------------------
(1)    3/   667D8 :                     ; Pattern Load Cues - Sonic's Arm
(1)    4/   667D8 :                     ; ---------------------------------------------------------------------------
(1)    5/   667D8 :                     ; Guide as documented by Hivebrain
(1)    6/   667D8 :                     ;
(1)    7/   667D8 :                     ;	Each load cue consists of ten bytes:
(1)    8/   667D8 :                     ;
(1)    9/   667D8 :                     ;		dc.w $QQQQ,$----,$RRR-,$DDDD,$EEEE
(1)   10/   667D8 :                     ;
(1)   11/   667D8 :                     ;	$QQQQ = Number of tiles to load from Rom
(1)   12/   667D8 :                     ;	$RRR- = Location to start reading the tiles
(1)   13/   667D8 :                     ; ---------------------------------------------------------------------------
(1)   14/   667D8 :                     ; the rest were not mentioned on the guide, and I am assuming are:
(1)   15/   667D8 :                     ; ---------------------------------------------------------------------------
(1)   16/   667D8 :                     ;	$---- = Unknown
(1)   17/   667D8 :                     ;	$DDDD = I think it's some sort of dumping location (to dump the art)
(1)   18/   667D8 :                     ;	$EEEE = whether it's the last PLC section to use or not (00 Include next PLC section/FF End of PLC section)
(1)   19/   667D8 :                     ; ---------------------------------------------------------------------------
(1)   20/   667D8 :                     ; ===========================================================================
(1)   21/   667D8 :                     ; ---------------------------------------------------------------------------
(1)   22/   667D8 : 2000 9703 0000      PLCSArm_Wait1:		dc.w $2000,$9703,$0000,$D6A0,$FFFF ; Waiting 1
            667DE : D6A0 FFFF          
(1)   23/   667E2 : 2000 9703 0020      PLCSArm_Wait2:		dc.w $2000,$9703,$0020,$D6A0,$FFFF ; Waiting 2
            667E8 : D6A0 FFFF          
(1)   24/   667EC : 2000 9703 0040      PLCSArm_Wait3:		dc.w $2000,$9703,$0040,$D6A0,$FFFF ; Waiting 3
            667F2 : D6A0 FFFF          
(1)   25/   667F6 :                     ; ---------------------------------------------------------------------------
(1)   26/   667F6 :                     ; Walking (Angle: 000* 180* degrees)
(1)   27/   667F6 : 6000 9703 0060      PLCSArm_Walk5_000:	dc.w $6000,$9703,$0060,$D6A0,$FFFF ; Walk 5
            667FC : D6A0 FFFF          
(1)   28/   66800 : 6000 9703 00C0      PLCSArm_Walk6_000:	dc.w $6000,$9703,$00C0,$D6A0,$FFFF ; Walk 6
            66806 : D6A0 FFFF          
(1)   29/   6680A : 6000 9703 0120      PLCSArm_Walk1_000:	dc.w $6000,$9703,$0120,$D6A0,$FFFF ; Walk 1 (Also Stand)
            66810 : D6A0 FFFF          
(1)   30/   66814 : 6000 9703 0180      PLCSArm_Walk2_000:	dc.w $6000,$9703,$0180,$D6A0,$FFFF ; Walk 2
            6681A : D6A0 FFFF          
(1)   31/   6681E : 4000 9703 01E0      PLCSArm_Walk3_000:	dc.w $4000,$9703,$01E0,$D6A0,$FFFF ; Walk 3
            66824 : D6A0 FFFF          
(1)   32/   66828 : 6000 9703 0220      PLCSArm_Walk4_000:	dc.w $6000,$9703,$0220,$D6A0,$FFFF ; Walk 4
            6682E : D6A0 FFFF          
(1)   33/   66832 :                     ; ---------------------------------------------------------------------------
(1)   34/   66832 :                     ; Walking (Angle: 045* 225* degrees)
(1)   35/   66832 : 6000 9703 0280      PLCSArm_Walk5_045:	dc.w $6000,$9703,$0280,$D6A0,$FFFF ; Walk 5
            66838 : D6A0 FFFF          
(1)   36/   6683C : 6000 9703 02E0      PLCSArm_Walk6_045:	dc.w $6000,$9703,$02E0,$D6A0,$FFFF ; Walk 6
            66842 : D6A0 FFFF          
(1)   37/   66846 : 4000 9703 0340      PLCSArm_Walk1_045:	dc.w $4000,$9703,$0340,$D6A0,$FFFF ; Walk 1
            6684C : D6A0 FFFF          
(1)   38/   66850 : 6000 9703 0380      PLCSArm_Walk2_045:	dc.w $6000,$9703,$0380,$D6A0,$FFFF ; Walk 2
            66856 : D6A0 FFFF          
(1)   39/   6685A : 4000 9703 03E0      PLCSArm_Walk3_045:	dc.w $4000,$9703,$03E0,$D6A0,$FFFF ; Walk 3
            66860 : D6A0 FFFF          
(1)   40/   66864 : 4000 9703 0420      PLCSArm_Walk4_045:	dc.w $4000,$9703,$0420,$D6A0,$FFFF ; Walk 4
            6686A : D6A0 FFFF          
(1)   41/   6686E :                     ; ---------------------------------------------------------------------------
(1)   42/   6686E :                     ; Walking (Angle: 090* 270* degrees)
(1)   43/   6686E : 6000 9703 0460      PLCSArm_Walk5_090:	dc.w $6000,$9703,$0460,$D6A0,$FFFF ; Walk 5
            66874 : D6A0 FFFF          
(1)   44/   66878 : 6000 9703 04C0      PLCSArm_Walk6_090:	dc.w $6000,$9703,$04C0,$D6A0,$FFFF ; Walk 6
            6687E : D6A0 FFFF          
(1)   45/   66882 : 6000 9703 0520      PLCSArm_Walk1_090:	dc.w $6000,$9703,$0520,$D6A0,$FFFF ; Walk 1
            66888 : D6A0 FFFF          
(1)   46/   6688C : 6000 9703 0580      PLCSArm_Walk2_090:	dc.w $6000,$9703,$0580,$D6A0,$FFFF ; Walk 2
            66892 : D6A0 FFFF          
(1)   47/   66896 : 4000 9703 05E0      PLCSArm_Walk3_090:	dc.w $4000,$9703,$05E0,$D6A0,$FFFF ; Walk 3
            6689C : D6A0 FFFF          
(1)   48/   668A0 : 6000 9703 0620      PLCSArm_Walk4_090:	dc.w $6000,$9703,$0620,$D6A0,$FFFF ; Walk 4
            668A6 : D6A0 FFFF          
(1)   49/   668AA :                     ; ---------------------------------------------------------------------------
(1)   50/   668AA :                     ; Walking (Angle: 135* 315* degrees)
(1)   51/   668AA : 6000 9703 0680      PLCSArm_Walk5_135:	dc.w $6000,$9703,$0680,$D6A0,$FFFF ; Walk 5
            668B0 : D6A0 FFFF          
(1)   52/   668B4 : 6000 9703 06E0      PLCSArm_Walk6_135:	dc.w $6000,$9703,$06E0,$D6A0,$FFFF ; Walk 6
            668BA : D6A0 FFFF          
(1)   53/   668BE : 4000 9703 0740      PLCSArm_Walk1_135:	dc.w $4000,$9703,$0740,$D6A0,$FFFF ; Walk 1
            668C4 : D6A0 FFFF          
(1)   54/   668C8 : 6000 9703 0780      PLCSArm_Walk2_135:	dc.w $6000,$9703,$0780,$D6A0,$FFFF ; Walk 2
            668CE : D6A0 FFFF          
(1)   55/   668D2 : 4000 9703 07E0      PLCSArm_Walk3_135:	dc.w $4000,$9703,$07E0,$D6A0,$FFFF ; Walk 3
            668D8 : D6A0 FFFF          
(1)   56/   668DC : 4000 9703 0820      PLCSArm_Walk4_135:	dc.w $4000,$9703,$0820,$D6A0,$FFFF ; Walk 4
            668E2 : D6A0 FFFF          
(1)   57/   668E6 :                     ; ---------------------------------------------------------------------------
(1)   58/   668E6 : 6000 9703 0860      PLCSArm_Run_000:	dc.w $6000,$9703,$0860,$D6A0,$FFFF ; Running 1-4 (Angle: 000* 180* degrees)
            668EC : D6A0 FFFF          
(1)   59/   668F0 : 4000 9703 08C0      PLCSArm_Run_045:	dc.w $4000,$9703,$08C0,$D6A0,$FFFF ; Running 1-4 (Angle: 045* 225* degrees)
            668F6 : D6A0 FFFF          
(1)   60/   668FA : 6000 9703 0900      PLCSArm_Run_090:	dc.w $6000,$9703,$0900,$D6A0,$FFFF ; Running 1-4 (Angle: 090* 270* degrees)
            66900 : D6A0 FFFF          
(1)   61/   66904 : 4000 9703 0960      PLCSArm_Run_135:	dc.w $4000,$9703,$0960,$D6A0,$FFFF ; Running 1-4 (Angle: 135* 315* degrees)
            6690A : D6A0 FFFF          
(1)   62/   6690E :                     ; ---------------------------------------------------------------------------
(1)   63/   6690E : 3000 9703 09A0      PLCSArm_Pul_Lft_000:	dc.w $3000,$9703,$09A0,$D6A0,$FFFF ; Walk Pull (Arm Left)
            66914 : D6A0 FFFF          
(1)   64/   66918 : 6000 9703 09D0      PLCSArm_Pul_LftDwn_020:	dc.w $6000,$9703,$09D0,$D6A0,$FFFF ; Walk Pull (Arm Left/Down 020*)
            6691E : D6A0 FFFF          
(1)   65/   66922 : 6000 9703 0A30      PLCSArm_Pul_LftDwn_045:	dc.w $6000,$9703,$0A30,$D6A0,$FFFF ; Walk Pull (Arm Left/Down 045*)
            66928 : D6A0 FFFF          
(1)   66/   6692C : 6000 9703 0A90      PLCSArm_Pul_LftDwn_060:	dc.w $6000,$9703,$0A90,$D6A0,$FFFF ; Walk Pull (Arm Left/Down 060*)
            66932 : D6A0 FFFF          
(1)   67/   66936 : 6000 9703 0AF0      PLCSArm_Pul_Dwn_000:	dc.w $6000,$9703,$0AF0,$D6A0,$FFFF ; Walk Pull (Arm Down)
            6693C : D6A0 FFFF          
(1)   68/   66940 : 6000 9703 0B50      PLCSArm_Pul_DwnRht_020:	dc.w $6000,$9703,$0B50,$D6A0,$FFFF ; Walk Pull (Arm Down/Right 020*)
            66946 : D6A0 FFFF          
(1)   69/   6694A : 7000 9703 0BB0      PLCSArm_Pul_DwnRht_045:	dc.w $7000,$9703,$0BB0,$D6A0,$FFFF ; Walk Pull (Arm Down/Right 045*)
            66950 : D6A0 FFFF          
(1)   70/   66954 : 6000 9703 0C20      PLCSArm_Pul_DwnRht_060:	dc.w $6000,$9703,$0C20,$D6A0,$FFFF ; Walk Pull (Arm Down/Right 060*)
            6695A : D6A0 FFFF          
(1)   71/   6695E : 6000 9703 0C80      PLCSArm_Pul_Rht_000:	dc.w $6000,$9703,$0C80,$D6A0,$FFFF ; Walk Pull (Arm Right)
            66964 : D6A0 FFFF          
(1)   72/   66968 : 6000 9703 0CE0      PLCSArm_Pul_RhtUp_020:	dc.w $6000,$9703,$0CE0,$D6A0,$FFFF ; Walk Pull (Arm Right/Up 020*)
            6696E : D6A0 FFFF          
(1)   73/   66972 : 5000 9703 0D40      PLCSArm_Pul_RhtUp_045:	dc.w $5000,$9703,$0D40,$D6A0,$FFFF ; Walk Pull (Arm Right/Up 045*)
            66978 : D6A0 FFFF          
(1)   74/   6697C : 6000 9703 0D90      PLCSArm_Pul_RhtUp_060:	dc.w $6000,$9703,$0D90,$D6A0,$FFFF ; Walk Pull (Arm Right/Up 060*)
            66982 : D6A0 FFFF          
(1)   75/   66986 : 3000 9703 0DF0      PLCSArm_Pul_Up_000:	dc.w $3000,$9703,$0DF0,$D6A0,$FFFF ; Walk Pull (Arm Up)
            6698C : D6A0 FFFF          
(1)   76/   66990 : 6000 9703 0E20      PLCSArm_Pul_UpDwn_020:	dc.w $6000,$9703,$0E20,$D6A0,$FFFF ; Walk Pull (Arm Up/Left 020*)
            66996 : D6A0 FFFF          
(1)   77/   6699A : 5000 9703 0E80      PLCSArm_Pul_UpDwn_045:	dc.w $5000,$9703,$0E80,$D6A0,$FFFF ; Walk Pull (Arm Up/Left 045*)
            669A0 : D6A0 FFFF          
(1)   78/   669A4 : 6000 9703 0ED0      PLCSArm_Pul_UpDwn_060:	dc.w $6000,$9703,$0ED0,$D6A0,$FFFF ; Walk Pull (Arm Up/Left 060*)
            669AA : D6A0 FFFF          
(1)   79/   669AE :                     ; ---------------------------------------------------------------------------
(1)   80/   669AE : 3000 9703 0F30      PLCSArm_Hold1_000:	dc.w $3000,$9703,$0F30,$D6A0,$FFFF ; Holding Tails 1 (000*) (Used on 000*)
            669B4 : D6A0 FFFF          
(1)   81/   669B8 : 3000 9703 0F60      PLCSArm_Hold2_000:	dc.w $3000,$9703,$0F60,$D6A0,$FFFF ; Holding Tails 2 (000*) (Used on 045*)
            669BE : D6A0 FFFF          
(1)   82/   669C2 : 3000 9703 0F90      PLCSArm_Hold3_000:	dc.w $3000,$9703,$0F90,$D6A0,$FFFF ; Holding Tails 3 (000*) (Used on 090*)
            669C8 : D6A0 FFFF          
(1)   83/   669CC : 6000 9703 0FC0      PLCSArm_Hold1_045:	dc.w $6000,$9703,$0FC0,$D6A0,$FFFF ; Holding Tails 1 (045*) (Used on 135*)
            669D2 : D6A0 FFFF          
(1)   84/   669D6 : 4000 9703 1020      PLCSArm_Hold2_045:	dc.w $4000,$9703,$1020,$D6A0,$FFFF ; Holding Tails 2 (045*) (Unused)
            669DC : D6A0 FFFF          
(1)   85/   669E0 : 4000 9703 1060      PLCSArm_Hold3_045:	dc.w $4000,$9703,$1060,$D6A0,$FFFF ; Holding Tails 3 (045*) (Unused)
            669E6 : D6A0 FFFF          
(1)   86/   669EA : 3000 9703 10A0      PLCSArm_Hold1_090:	dc.w $3000,$9703,$10A0,$D6A0,$FFFF ; Holding Tails 1 (090*) (Unused)
            669F0 : D6A0 FFFF          
(1)   87/   669F4 : 3000 9703 10D0      PLCSArm_Hold2_090:	dc.w $3000,$9703,$10D0,$D6A0,$FFFF ; Holding Tails 2 (090*) (Unused)
            669FA : D6A0 FFFF          
(1)   88/   669FE : 3000 9703 1100      PLCSArm_Hold3_090:	dc.w $3000,$9703,$1100,$D6A0,$FFFF ; Holding Tails 3 (090*) (Unused)
            66A04 : D6A0 FFFF          
(1)   89/   66A08 : 6000 9703 1130      PLCSArm_Hold1_135:	dc.w $6000,$9703,$1130,$D6A0,$FFFF ; Holding Tails 1 (135*) (Unused)
            66A0E : D6A0 FFFF          
(1)   90/   66A12 : 4000 9703 1190      PLCSArm_Hold2_135:	dc.w $4000,$9703,$1190,$D6A0,$FFFF ; Holding Tails 2 (135*) (Unused)
            66A18 : D6A0 FFFF          
(1)   91/   66A1C : 4000 9703 11D0      PLCSArm_Hold3_135:	dc.w $4000,$9703,$11D0,$D6A0,$FFFF ; Holding Tails 3 (135*) (Unused)
            66A22 : D6A0 FFFF          
(1)   92/   66A26 :                     ; ---------------------------------------------------------------------------
(1)   93/   66A26 :                     ; Unused
(1)   94/   66A26 : 6000 9703 1210      PLCSArm_Unused_00:	dc.w $6000,$9703,$1210,$D6A0,$FFFF ; Unused
            66A2C : D6A0 FFFF          
(1)   95/   66A30 : 6000 9703 1270      PLCSArm_Unused_01:	dc.w $6000,$9703,$1270,$D6A0,$FFFF ; Unused
            66A36 : D6A0 FFFF          
(1)   96/   66A3A : 4000 9703 12D0      PLCSArm_Unused_02:	dc.w $4000,$9703,$12D0,$D6A0,$FFFF ; Unused
            66A40 : D6A0 FFFF          
(1)   97/   66A44 : 6000 9703 1310      PLCSArm_Unused_03:	dc.w $6000,$9703,$1310,$D6A0,$FFFF ; Unused
            66A4A : D6A0 FFFF          
(1)   98/   66A4E : 6000 9703 1370      PLCSArm_Unused_04:	dc.w $6000,$9703,$1370,$D6A0,$FFFF ; Unused
            66A54 : D6A0 FFFF          
(1)   99/   66A58 : 6000 9703 13D0      PLCSArm_Unused_05:	dc.w $6000,$9703,$13D0,$D6A0,$FFFF ; Unused
            66A5E : D6A0 FFFF          
(1)  100/   66A62 : 6000 9703 1430      PLCSArm_Unused_06:	dc.w $6000,$9703,$1430,$D6A0,$FFFF ; Unused
            66A68 : D6A0 FFFF          
(1)  101/   66A6C : 6000 9703 1490      PLCSArm_Unused_07:	dc.w $6000,$9703,$1490,$D6A0,$FFFF ; Unused
            66A72 : D6A0 FFFF          
(1)  102/   66A76 : 6000 9703 14F0      PLCSArm_Unused_08:	dc.w $6000,$9703,$14F0,$D6A0,$FFFF ; Unused
            66A7C : D6A0 FFFF          
(1)  103/   66A80 : 6000 9703 1550      PLCSArm_Unused_09:	dc.w $6000,$9703,$1550,$D6A0,$FFFF ; Unused
            66A86 : D6A0 FFFF          
(1)  104/   66A8A : 6000 9703 15B0      PLCSArm_Unused_0A:	dc.w $6000,$9703,$15B0,$D6A0,$FFFF ; Unused
            66A90 : D6A0 FFFF          
(1)  105/   66A94 : 6000 9703 1610      PLCSArm_Unused_0B:	dc.w $6000,$9703,$1610,$D6A0,$FFFF ; Unused
            66A9A : D6A0 FFFF          
(1)  106/   66A9E : 6000 9703 1670      PLCSArm_Unused_0C:	dc.w $6000,$9703,$1670,$D6A0,$FFFF ; Unused
            66AA4 : D6A0 FFFF          
(1)  107/   66AA8 : 5000 9703 16D0      PLCSArm_Unused_0D:	dc.w $5000,$9703,$16D0,$D6A0,$FFFF ; Unused
            66AAE : D6A0 FFFF          
(1)  108/   66AB2 : 6000 9703 1720      PLCSArm_Unused_0E:	dc.w $6000,$9703,$1720,$D6A0,$FFFF ; Unused
            66AB8 : D6A0 FFFF          
(1)  109/   66ABC : 6000 9703 1780      PLCSArm_Unused_0F:	dc.w $6000,$9703,$1780,$D6A0,$FFFF ; Unused
            66AC2 : D6A0 FFFF          
(1)  110/   66AC6 : 6000 9703 17E0      PLCSArm_Unused_10:	dc.w $6000,$9703,$17E0,$D6A0,$FFFF ; Unused
            66ACC : D6A0 FFFF          
(1)  111/   66AD0 : 6000 9703 1840      PLCSArm_Unused_11:	dc.w $6000,$9703,$1840,$D6A0,$FFFF ; Unused
            66AD6 : D6A0 FFFF          
(1)  112/   66ADA : 6000 9703 18A0      PLCSArm_Unused_12:	dc.w $6000,$9703,$18A0,$D6A0,$FFFF ; Unused
            66AE0 : D6A0 FFFF          
(1)  113/   66AE4 : 6000 9703 1900      PLCSArm_Unused_13:	dc.w $6000,$9703,$1900,$D6A0,$FFFF ; Unused
            66AEA : D6A0 FFFF          
(1)  114/   66AEE : 6000 9703 1960      PLCSArm_Unused_14:	dc.w $6000,$9703,$1960,$D6A0,$FFFF ; Unused
            66AF4 : D6A0 FFFF          
(1)  115/   66AF8 : 6000 9703 19C0      PLCSArm_Unused_15:	dc.w $6000,$9703,$19C0,$D6A0,$FFFF ; Unused
            66AFE : D6A0 FFFF          
(1)  116/   66B02 : 6000 9703 1A20      PLCSArm_Unused_16:	dc.w $6000,$9703,$1A20,$D6A0,$FFFF ; Unused
            66B08 : D6A0 FFFF          
(1)  117/   66B0C : 4000 9703 1A80      PLCSArm_Unused_17:	dc.w $4000,$9703,$1A80,$D6A0,$FFFF ; Unused
            66B12 : D6A0 FFFF          
(1)  118/   66B16 : 6000 9703 1AC0      PLCSArm_Unused_18:	dc.w $6000,$9703,$1AC0,$D6A0,$FFFF ; Unused
            66B1C : D6A0 FFFF          
(1)  119/   66B20 : 6000 9703 1B20      PLCSArm_Unused_19:	dc.w $6000,$9703,$1B20,$D6A0,$FFFF ; Unused
            66B26 : D6A0 FFFF          
(1)  120/   66B2A : 1000 9703 1B80      PLCSArm_Unused_1A:	dc.w $1000,$9703,$1B80,$D6A0,$FFFF ; Unused
            66B30 : D6A0 FFFF          
(1)  121/   66B34 : (MACRO)              			even
(1)  121/   66B34 : =>TRUE                       if notZ80(MOMCPU)
(1)  121/   66B34 : =>FALSE                              if (*)&1
(1)  121/   66B34 :                                             dc.b 0                          ;ds.b 1
(1)  121/   66B34 : [121]                                endif
(1)  121/   66B34 : =>FALSE                      else
(1)  121/   66B34 :                                     if ($)&1
(1)  121/   66B34 :                                             db 0
(1)  121/   66B34 : [121]                                endif
(1)  121/   66B34 : [121]                        endif
(1)  122/   66B34 :                     ; ---------------------------------------------------------------------------
(1)  123/   66B34 :                     ; ===========================================================================
(1)  124/   66B34 :                     
   19449/   66B34 :                     ; ---------------------------------------------------------------------------
   19450/   66B34 :                     Map_SonicArm:
   19451/   66B34 :                     	include	"PLCMAPANI/MAP_SonicArm.asm"
(1)    1/   66B34 :                     ; ===========================================================================
(1)    2/   66B34 :                     ; ---------------------------------------------------------------------------
(1)    3/   66B34 :                     ; Mappings - Sonic's Arm
(1)    4/   66B34 :                     ; ---------------------------------------------------------------------------
(1)    5/   66B34 :                     ; Guide as documented by Hivebrain
(1)    6/   66B34 :                     ;
(1)    7/   66B34 :                     ;	Each map block consists of six bytes:
(1)    8/   66B34 :                     ;
(1)    9/   66B34 :                     ;		dc.w $SS,$YY,$TT,$TT,$XX,$ZZ
(1)   10/   66B34 :                     ;
(1)   11/   66B34 :                     ;	$SS   = Shape and size of sprite piece
(1)   12/   66B34 :                     ;	$YY   = Y position of sprite piece
(1)   13/   66B34 :                     ;	$TTTT = Tile to read in VRAM
(1)   14/   66B34 :                     ;	$XX   = X position of sprite piece
(1)   15/   66B34 :                     ;	$ZZ   = whether it's the last map to use in the sprite or not (00 = Include next map in sprite/FF = End of sprite)
(1)   16/   66B34 :                     ;
(1)   17/   66B34 :                     ; ---------------------------------------------------------------------------
(1)   18/   66B34 :                     ; ===========================================================================
(1)   19/   66B34 :                     ; ---------------------------------------------------------------------------
(1)   20/   66B34 : 0400 26B5 08FF      MapSArm_Wait1:		dc.b $04,$00,$26,$B5,$08,$FF	; Waiting 1
(1)   21/   66B3A : 0400 26B5 00FF      MapSArm_Wait2:		dc.b $04,$00,$26,$B5,$00,$FF	; Waiting 2
(1)   22/   66B40 : 0400 26B5 00FF      MapSArm_Wait3:		dc.b $04,$00,$26,$B5,$00,$FF	; Waiting 3
(1)   23/   66B46 :                     ; ---------------------------------------------------------------------------
(1)   24/   66B46 :                     ; Walking (Angle: 000* 180* degrees)
(1)   25/   66B46 : 0900 26B5 00FF      MapSArm_Walk5_000:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 5
(1)   26/   66B4C : 0900 26B5 00FF      MapSArm_Walk6_000:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 6
(1)   27/   66B52 : 0601 26B5 00FF      MapSArm_Walk1_000:	dc.b $06,$01,$26,$B5,$00,$FF	; Walk 1 (Also Stand)
(1)   28/   66B58 : 0900 26B5 00FF      MapSArm_Walk2_000:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 2
(1)   29/   66B5E : 0500 26B5 00FF      MapSArm_Walk3_000:	dc.b $05,$00,$26,$B5,$00,$FF	; Walk 3
(1)   30/   66B64 : 0900 26B5 00FF      MapSArm_Walk4_000:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 4
(1)   31/   66B6A :                     ; ---------------------------------------------------------------------------
(1)   32/   66B6A :                     ; Walking (Angle: 045* 225* degrees)
(1)   33/   66B6A : 0600 26B5 00FF      MapSArm_Walk5_045:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 5
(1)   34/   66B70 : 0900 26B5 00FF      MapSArm_Walk6_045:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 6
(1)   35/   66B76 : 0500 26B5 00FF      MapSArm_Walk1_045:	dc.b $05,$00,$26,$B5,$00,$FF	; Walk 1
(1)   36/   66B7C : 0600 26B5 00FF      MapSArm_Walk2_045:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 2
(1)   37/   66B82 : 0505 26B5 00FF      MapSArm_Walk3_045:	dc.b $05,$05,$26,$B5,$00,$FF	; Walk 3
(1)   38/   66B88 : 0500 26B5 00FF      MapSArm_Walk4_045:	dc.b $05,$00,$26,$B5,$00,$FF	; Walk 4
(1)   39/   66B8E :                     ; ---------------------------------------------------------------------------
(1)   40/   66B8E :                     ; Walking (Angle: 090* 270* degrees)
(1)   41/   66B8E : 0600 26B5 00FF      MapSArm_Walk5_090:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 5
(1)   42/   66B94 : 0600 26B5 00FF      MapSArm_Walk6_090:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 6
(1)   43/   66B9A : 0900 26B5 00FF      MapSArm_Walk1_090:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 1
(1)   44/   66BA0 : 0600 26B5 00FF      MapSArm_Walk2_090:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 2
(1)   45/   66BA6 : 0500 26B5 00FF      MapSArm_Walk3_090:	dc.b $05,$00,$26,$B5,$00,$FF	; Walk 3
(1)   46/   66BAC : 0600 26B5 00FF      MapSArm_Walk4_090:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 4
(1)   47/   66BB2 :                     ; ---------------------------------------------------------------------------
(1)   48/   66BB2 :                     ; Walking (Angle: 135* 315* degrees)
(1)   49/   66BB2 : 0900 26B5 00FF      MapSArm_Walk5_135:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 5
(1)   50/   66BB8 : 0600 26B5 00FF      MapSArm_Walk6_135:	dc.b $06,$00,$26,$B5,$00,$FF	; Walk 6
(1)   51/   66BBE : 0500 26B5 00FF      MapSArm_Walk1_135:	dc.b $05,$00,$26,$B5,$00,$FF	; Walk 1
(1)   52/   66BC4 : 0900 26B5 00FF      MapSArm_Walk2_135:	dc.b $09,$00,$26,$B5,$00,$FF	; Walk 2
(1)   53/   66BCA : 0500 26B5 05FF      MapSArm_Walk3_135:	dc.b $05,$00,$26,$B5,$05,$FF	; Walk 3
(1)   54/   66BD0 : 0500 26B5 00FF      MapSArm_Walk4_135:	dc.b $05,$00,$26,$B5,$00,$FF	; Walk 4
(1)   55/   66BD6 :                     ; ---------------------------------------------------------------------------
(1)   56/   66BD6 : 0900 26B5 00FF      MapSArm_Run_000:	dc.b $09,$00,$26,$B5,$00,$FF	; Running 1-4 (Angle: 000* 180* degrees)
(1)   57/   66BDC : 0500 26B5 00FF      MapSArm_Run_045:	dc.b $05,$00,$26,$B5,$00,$FF	; Running 1-4 (Angle: 045* 225* degrees)
(1)   58/   66BE2 : 0600 26B5 00FF      MapSArm_Run_090:	dc.b $06,$00,$26,$B5,$00,$FF	; Running 1-4 (Angle: 090* 270* degrees)
(1)   59/   66BE8 : 0500 26B5 00FF      MapSArm_Run_135:	dc.b $05,$00,$26,$B5,$00,$FF	; Running 1-4 (Angle: 135* 315* degrees)
(1)   60/   66BEE :                     ; ---------------------------------------------------------------------------
(1)   61/   66BEE : 08FB 26B5 E8FF      MapSArm_Pul_Lft_000:	dc.b $08,$FB,$26,$B5,$E8,$FF	; Walk Pull (Arm Left)
(1)   62/   66BF4 : 09FE 26B5 EAFF      MapSArm_Pul_LftDwn_020:	dc.b $09,$FE,$26,$B5,$EA,$FF	; Walk Pull (Arm Left/Down 020*)
(1)   63/   66BFA : 09FE 26B5 ECFF      MapSArm_Pul_LftDwn_045:	dc.b $09,$FE,$26,$B5,$EC,$FF	; Walk Pull (Arm Left/Down 045*)
(1)   64/   66C00 : 06FE 26B5 F1FF      MapSArm_Pul_LftDwn_060:	dc.b $06,$FE,$26,$B5,$F1,$FF	; Walk Pull (Arm Left/Down 060*)
(1)   65/   66C06 : 06FE 26B5 F9FF      MapSArm_Pul_Dwn_000:	dc.b $06,$FE,$26,$B5,$F9,$FF	; Walk Pull (Arm Down)
(1)   66/   66C0C : 06FE 26B5 FDFF      MapSArm_Pul_DwnRht_020:	dc.b $06,$FE,$26,$B5,$FD,$FF	; Walk Pull (Arm Down/Right 020*)
(1)   67/   66C12 : 0902 26B5 FF00      MapSArm_Pul_DwnRht_045:	dc.b $09,$02,$26,$B5,$FF,$00	; Walk Pull (Arm Down/Right 045*)
(1)   68/   66C18 : 00FA 26BB FDFF      			dc.b $00,$FA,$26,$BB,$FD,$FF	; ''
(1)   69/   66C1E : 09FE 26B5 FEFF      MapSArm_Pul_DwnRht_060:	dc.b $09,$FE,$26,$B5,$FE,$FF	; Walk Pull (Arm Down/Right 060*)
(1)   70/   66C24 : 05F7 26B5 0800      MapSArm_Pul_Rht_000:	dc.b $05,$F7,$26,$B5,$08,$00	; Walk Pull (Arm Right)
(1)   71/   66C2A : 04FD 26B9 F8FF      			dc.b $04,$FD,$26,$B9,$F8,$FF	; ''
(1)   72/   66C30 : 09F2 26B5 FEFF      MapSArm_Pul_RhtUp_020:	dc.b $09,$F2,$26,$B5,$FE,$FF	; Walk Pull (Arm Right/Up 020*)
(1)   73/   66C36 : 05ED 26B5 0100      MapSArm_Pul_RhtUp_045:	dc.b $05,$ED,$26,$B5,$01,$00	; Walk Pull (Arm Right/Up 045*)
(1)   74/   66C3C : 00FD 26B9 FEFF      			dc.b $00,$FD,$26,$B9,$FE,$FF	; ''
(1)   75/   66C42 : 06EB 26B5 FDFF      MapSArm_Pul_RhtUp_060:	dc.b $06,$EB,$26,$B5,$FD,$FF	; Walk Pull (Arm Right/Up 060*)
(1)   76/   66C48 : 02E9 26B5 F8FF      MapSArm_Pul_Up_000:	dc.b $02,$E9,$26,$B5,$F8,$FF	; Walk Pull (Arm Up)
(1)   77/   66C4E : 06EC 26B5 F1FF      MapSArm_Pul_UpDwn_020:	dc.b $06,$EC,$26,$B5,$F1,$FF	; Walk Pull (Arm Up/Left 020*)
(1)   78/   66C54 : 05ED 26B5 EB00      MapSArm_Pul_UpDwn_045:	dc.b $05,$ED,$26,$B5,$EB,$00	; Walk Pull (Arm Up/Left 045*)
(1)   79/   66C5A : 00FD 26B9 F8FF      			dc.b $00,$FD,$26,$B9,$F8,$FF	; ''
(1)   80/   66C60 : 09F6 26B5 E9FF      MapSArm_Pul_UpDwn_060:	dc.b $09,$F6,$26,$B5,$E9,$FF	; Walk Pull (Arm Up/Left 060*)
(1)   81/   66C66 :                     ; ---------------------------------------------------------------------------
(1)   82/   66C66 : 0806 26B5 00FF      MapSArm_Hold1_000:	dc.b $08,$06,$26,$B5,$00,$FF	; Holding Tails 1 (000*) (Used on 000*)
(1)   83/   66C6C : 0808 26B5 00FF      MapSArm_Hold2_000:	dc.b $08,$08,$26,$B5,$00,$FF	; Holding Tails 2 (000*) (Used on 045*)
(1)   84/   66C72 : 0809 26B5 01FF      MapSArm_Hold3_000:	dc.b $08,$09,$26,$B5,$01,$FF	; Holding Tails 3 (000*) (Used on 090*)
(1)   85/   66C78 : 0600 26B5 00FF      MapSArm_Hold1_045:	dc.b $06,$00,$26,$B5,$00,$FF	; Holding Tails 1 (045*) (Used on 135*)
(1)   86/   66C7E : 0508 26B5 00FF      MapSArm_Hold2_045:	dc.b $05,$08,$26,$B5,$00,$FF	; Holding Tails 2 (045*) (Unused)
(1)   87/   66C84 : 0508 26B5 01FF      MapSArm_Hold3_045:	dc.b $05,$08,$26,$B5,$01,$FF	; Holding Tails 3 (045*) (Unused)
(1)   88/   66C8A : 0203 26B5 06FF      MapSArm_Hold1_090:	dc.b $02,$03,$26,$B5,$06,$FF	; Holding Tails 1 (090*) (Unused)
(1)   89/   66C90 : 0203 26B5 08FF      MapSArm_Hold2_090:	dc.b $02,$03,$26,$B5,$08,$FF	; Holding Tails 2 (090*) (Unused)
(1)   90/   66C96 : 0202 26B5 0AFF      MapSArm_Hold3_090:	dc.b $02,$02,$26,$B5,$0A,$FF	; Holding Tails 3 (090*) (Unused)
(1)   91/   66C9C : 0909 26B5 07FF      MapSArm_Hold1_135:	dc.b $09,$09,$26,$B5,$07,$FF	; Holding Tails 1 (135*) (Unused)
(1)   92/   66CA2 : 0508 26B5 08FF      MapSArm_Hold2_135:	dc.b $05,$08,$26,$B5,$08,$FF	; Holding Tails 2 (135*) (Unused)
(1)   93/   66CA8 : 0507 26B5 09FF      MapSArm_Hold3_135:	dc.b $05,$07,$26,$B5,$09,$FF	; Holding Tails 3 (135*) (Unused)
(1)   94/   66CAE :                     ; ---------------------------------------------------------------------------
(1)   95/   66CAE :                     ; Unused
(1)   96/   66CAE : 0618 26B5 06FF      MapSArm_Unused_00:	dc.b $06,$18,$26,$B5,$06,$FF	; Unused
(1)   97/   66CB4 : 090A 26B5 0BFF      MapSArm_Unused_01:	dc.b $09,$0A,$26,$B5,$0B,$FF	; Unused
(1)   98/   66CBA : 050D 26B5 0AFF      MapSArm_Unused_02:	dc.b $05,$0D,$26,$B5,$0A,$FF	; Unused
(1)   99/   66CC0 : 0611 26B5 00FF      MapSArm_Unused_03:	dc.b $06,$11,$26,$B5,$00,$FF	; Unused
(1)  100/   66CC6 : 061C 26B5 0BFF      MapSArm_Unused_04:	dc.b $06,$1C,$26,$B5,$0B,$FF	; Unused
(1)  101/   66CCC : 0915 26B5 15FF      MapSArm_Unused_05:	dc.b $09,$15,$26,$B5,$15,$FF	; Unused
(1)  102/   66CD2 : 060A 26B5 14FF      MapSArm_Unused_06:	dc.b $06,$0A,$26,$B5,$14,$FF	; Unused
(1)  103/   66CD8 : 0605 26B5 0DFF      MapSArm_Unused_07:	dc.b $06,$05,$26,$B5,$0D,$FF	; Unused
(1)  104/   66CDE : 090F 26B5 03FF      MapSArm_Unused_08:	dc.b $09,$0F,$26,$B5,$03,$FF	; Unused
(1)  105/   66CE4 : 061C 26B5 05FF      MapSArm_Unused_09:	dc.b $06,$1C,$26,$B5,$05,$FF	; Unused
(1)  106/   66CEA : 0908 26B5 18FF      MapSArm_Unused_0A:	dc.b $09,$08,$26,$B5,$18,$FF	; Unused
(1)  107/   66CF0 : 0913 26B5 16FF      MapSArm_Unused_0B:	dc.b $09,$13,$26,$B5,$16,$FF	; Unused
(1)  108/   66CF6 : 0613 26B5 13FF      MapSArm_Unused_0C:	dc.b $06,$13,$26,$B5,$13,$FF	; Unused
(1)  109/   66CFC : 0505 26B5 0400      MapSArm_Unused_0D:	dc.b $05,$05,$26,$B5,$04,$00	; Unused
(1)  110/   66D02 : 0015 26B9 12FF      			dc.b $00,$15,$26,$B9,$12,$FF	; ''
(1)  111/   66D08 : 090E 26B5 04FF      MapSArm_Unused_0E:	dc.b $09,$0E,$26,$B5,$04,$FF	; Unused
(1)  112/   66D0E : 0915 26B5 04FF      MapSArm_Unused_0F:	dc.b $09,$15,$26,$B5,$04,$FF	; Unused
(1)  113/   66D14 : 0609 26B5 1EFF      MapSArm_Unused_10:	dc.b $06,$09,$26,$B5,$1E,$FF	; Unused
(1)  114/   66D1A : 0612 26B5 0FFF      MapSArm_Unused_11:	dc.b $06,$12,$26,$B5,$0F,$FF	; Unused
(1)  115/   66D20 : 0612 26B5 12FF      MapSArm_Unused_12:	dc.b $06,$12,$26,$B5,$12,$FF	; Unused
(1)  116/   66D26 : 0915 26B5 0EFF      MapSArm_Unused_13:	dc.b $09,$15,$26,$B5,$0E,$FF	; Unused
(1)  117/   66D2C : 0912 26B5 04FF      MapSArm_Unused_14:	dc.b $09,$12,$26,$B5,$04,$FF	; Unused
(1)  118/   66D32 : 090A 26B5 18FF      MapSArm_Unused_15:	dc.b $09,$0A,$26,$B5,$18,$FF	; Unused
(1)  119/   66D38 : 090E 26B5 15FF      MapSArm_Unused_16:	dc.b $09,$0E,$26,$B5,$15,$FF	; Unused
(1)  120/   66D3E : 0511 26B5 03FF      MapSArm_Unused_17:	dc.b $05,$11,$26,$B5,$03,$FF	; Unused
(1)  121/   66D44 : 0912 26B5 13FF      MapSArm_Unused_18:	dc.b $09,$12,$26,$B5,$13,$FF	; Unused
(1)  122/   66D4A : 050C 26B5 0D00      MapSArm_Unused_19:	dc.b $05,$0C,$26,$B5,$0D,$00	; Unused
(1)  123/   66D50 : 041C 26B9 0BFF      			dc.b $04,$1C,$26,$B9,$0B,$FF	; ''
(1)  124/   66D56 : 0000 26B5 00FF      MapSArm_Unused_1A:	dc.b $00,$00,$26,$B5,$00,$FF	; Unused
(1)  125/   66D5C : (MACRO)              			even
(1)  125/   66D5C : =>TRUE                       if notZ80(MOMCPU)
(1)  125/   66D5C : =>FALSE                              if (*)&1
(1)  125/   66D5C :                                             dc.b 0                          ;ds.b 1
(1)  125/   66D5C : [125]                                endif
(1)  125/   66D5C : =>FALSE                      else
(1)  125/   66D5C :                                     if ($)&1
(1)  125/   66D5C :                                             db 0
(1)  125/   66D5C : [125]                                endif
(1)  125/   66D5C : [125]                        endif
(1)  126/   66D5C :                     ; ---------------------------------------------------------------------------
(1)  127/   66D5C :                     ; ===========================================================================
(1)  128/   66D5C :                     
   19452/   66D5C :                     ; ---------------------------------------------------------------------------
   19453/   66D5C :                     ; ===========================================================================
   19454/   66D5C :                     ; ---------------------------------------------------------------------------
   19455/   66D5C :                     ; Animation, PLC, mapping & Main index block - Sonic
   19456/   66D5C :                     ; ---------------------------------------------------------------------------
   19457/   66D5C :                     ANI_Sonic:
   19458/   66D5C :                     	include	"PLCMAPANI/ANI_Sonic.asm"
(1)    1/   66D5C :                     ; ===========================================================================
(1)    2/   66D5C :                     ; ---------------------------------------------------------------------------
(1)    3/   66D5C :                     ; Animation scripts - Sonic
(1)    4/   66D5C :                     ; ---------------------------------------------------------------------------
(1)    5/   66D5C :                     ;
(1)    6/   66D5C :                     ; Each animation script starts with 3 bytes of data
(1)    7/   66D5C :                     ;
(1)    8/   66D5C :                     ;		dc.b $XX,$YY,$ZZ
(1)    9/   66D5C :                     ;
(1)   10/   66D5C :                     ;	$XX   = Speed to run animation at (00 Slow/3F Fast)
(1)   11/   66D5C :                     ;		(Note: if it is 40, then it's a special animation speed that
(1)   12/   66D5C :                     ;		is controled by routines somewhere)
(1)   13/   66D5C :                     ;	$YY   = Number of frames within script
(1)   14/   66D5C :                     ;	$ZZ   = (unknown)
(1)   15/   66D5C :                     ;
(1)   16/   66D5C :                     ; Then each byte in the line under, is each frame to use in that specific script
(1)   17/   66D5C :                     ; (Basically the same as S1 and S2)
(1)   18/   66D5C :                     ;
(1)   19/   66D5C :                     ; ---------------------------------------------------------------------------
(1)   20/   66D5C :                     ; ===========================================================================
(1)   21/   66D5C :                     ; ---------------------------------------------------------------------------
(1)   22/   66D5C : 0034                		dc.w AniSon_Normal-ANI_Sonic		; Stand, Look up, Look down
(1)   23/   66D5E : 003A                		dc.w AniSon_Walk000-ANI_Sonic		; Walking (000* 180*)
(1)   24/   66D60 : 0044                		dc.w AniSon_Walk045-ANI_Sonic		; Walking (045* 225*)
(1)   25/   66D62 : 004E                		dc.w AniSon_Walk090-ANI_Sonic		; Walking (090* 270*)
(1)   26/   66D64 : 0058                		dc.w AniSon_Walk135-ANI_Sonic		; Walking (135* 315*)
(1)   27/   66D66 : 0062                		dc.w AniSon_Run000-ANI_Sonic		; Running (000* 180*)
(1)   28/   66D68 : 006A                		dc.w AniSon_Run045-ANI_Sonic		; Running (045* 225*)
(1)   29/   66D6A : 0072                		dc.w AniSon_Run090-ANI_Sonic		; Running (090* 270*)
(1)   30/   66D6C : 007A                		dc.w AniSon_Run135-ANI_Sonic		; Running (135* 315*)
(1)   31/   66D6E : 0082                		dc.w AniSon_Roll-ANI_Sonic		; Rolling (Somersault)
(1)   32/   66D70 : 008E                		dc.w AniSon_Wait-ANI_Sonic		; Waiting
(1)   33/   66D72 : 0096                		dc.w AniSon_Balnce1-ANI_Sonic		; Balancing (Facing inwards)
(1)   34/   66D74 : 009E                		dc.w AniSon_Balnce2-ANI_Sonic		; Balancing (Facing outwards)
(1)   35/   66D76 : 00A6                		dc.w AniSon_Skid-ANI_Sonic		; Skiddings
(1)   36/   66D78 : 0034                		dc.w AniSon_Normal-ANI_Sonic		; Stand, Look up, Look down
(1)   37/   66D7A : 003A                		dc.w AniSon_Walk000-ANI_Sonic		; Walking (000* 180*)
(1)   38/   66D7C : 0044                		dc.w AniSon_Walk045-ANI_Sonic		; Walking (045* 225*)
(1)   39/   66D7E : 004E                		dc.w AniSon_Walk090-ANI_Sonic		; Walking (090* 270*)
(1)   40/   66D80 : 0058                		dc.w AniSon_Walk135-ANI_Sonic		; Walking (135* 315*)
(1)   41/   66D82 : 0062                		dc.w AniSon_Run000-ANI_Sonic		; Running (000* 180*)
(1)   42/   66D84 : 006A                		dc.w AniSon_Run045-ANI_Sonic		; Running (045* 225*)
(1)   43/   66D86 : 0072                		dc.w AniSon_Run090-ANI_Sonic		; Running (090* 270*)
(1)   44/   66D88 : 007A                		dc.w AniSon_Run135-ANI_Sonic		; Running (135* 315*)
(1)   45/   66D8A : 00AE                		dc.w AniSon_Spindsh-ANI_Sonic		; Spindashing
(1)   46/   66D8C : 00BC                		dc.w AniSon_Hurt-ANI_Sonic		; Hurt
(1)   47/   66D8E : 00C0                		dc.w AniSon_Dizzy-ANI_Sonic		; fast spinning where sonic looks dizzy (Unused)
(1)   48/   66D90 :                     ; ---------------------------------------------------------------------------
(1)   49/   66D90 : 0102 00             AniSon_Normal:	dc.b $01,$02,$00
(1)   50/   66D93 : 0001 02             		dc.b $00,$01,$02
(1)   51/   66D96 : 0005 00             AniSon_Walk000:	dc.b $00,$05,$00
(1)   52/   66D99 : 1112 1314 0F10 00   		dc.b $11,$12,$13,$14,$0F,$10,$00
(1)   53/   66DA0 : 0005 00             AniSon_Walk045:	dc.b $00,$05,$00
(1)   54/   66DA3 : 1718 191A 1516 00   		dc.b $17,$18,$19,$1A,$15,$16,$00
(1)   55/   66DAA : 0005 00             AniSon_Walk090:	dc.b $00,$05,$00
(1)   56/   66DAD : 1D1E 1F20 1B1C 00   		dc.b $1D,$1E,$1F,$20,$1B,$1C,$00
(1)   57/   66DB4 : 0005 00             AniSon_Walk135:	dc.b $00,$05,$00
(1)   58/   66DB7 : 2324 2526 2122 00   		dc.b $23,$24,$25,$26,$21,$22,$00
(1)   59/   66DBE : 4003 00             AniSon_Run000:	dc.b $40,$03,$00
(1)   60/   66DC1 : 2728 292A 00        		dc.b $27,$28,$29,$2A,$00
(1)   61/   66DC6 : 4003 00             AniSon_Run045:	dc.b $40,$03,$00
(1)   62/   66DC9 : 2B2C 2D2E 00        		dc.b $2B,$2C,$2D,$2E,$00
(1)   63/   66DCE : 4003 00             AniSon_Run090:	dc.b $40,$03,$00
(1)   64/   66DD1 : 2F30 3132 00        		dc.b $2F,$30,$31,$32,$00
(1)   65/   66DD6 : 4003 00             AniSon_Run135:	dc.b $40,$03,$00
(1)   66/   66DD9 : 3334 3536 00        		dc.b $33,$34,$35,$36,$00
(1)   67/   66DDE : 4007 00             AniSon_Roll:	dc.b $40,$07,$00
(1)   68/   66DE1 : 403C 403D 403E      		dc.b $40,$3C,$40,$3D,$40,$3E,$40,$3F,$00
            66DE7 : 403F 00          
(1)   69/   66DEA : 2003 00             AniSon_Wait:	dc.b $20,$03,$00
(1)   70/   66DED : 0405 0405 00        		dc.b $04,$05,$04,$05,$00
(1)   71/   66DF2 : 2003 00             AniSon_Balnce1:	dc.b $20,$03,$00
(1)   72/   66DF5 : 090A 0B0A 00        		dc.b $09,$0A,$0B,$0A,$00
(1)   73/   66DFA : 2003 00             AniSon_Balnce2:	dc.b $20,$03,$00
(1)   74/   66DFD : 0C0D 0E0D 00        		dc.b $0C,$0D,$0E,$0D,$00
(1)   75/   66E02 : 2003 00             AniSon_Skid:	dc.b $20,$03,$00
(1)   76/   66E05 : 3738 3939 00        		dc.b $37,$38,$39,$39,$00
(1)   77/   66E0A : 0009 00             AniSon_Spindsh:	dc.b $00,$09,$00
(1)   78/   66E0D : 5556 5557 5558      		dc.b $55,$56,$55,$57,$55,$58,$55,$59,$55,$5A,$00
            66E13 : 5559 555A 00       
(1)   79/   66E18 : 0000 00             AniSon_Hurt:	dc.b $00,$00,$00
(1)   80/   66E1B : 03                  		dc.b $03
(1)   81/   66E1C : 1005 00             AniSon_Dizzy:	dc.b $10,$05,$00
(1)   82/   66E1F : 4142 4344 4546 00   		dc.b $41,$42,$43,$44,$45,$46,$00
(1)   83/   66E26 : (MACRO)              		even
(1)   83/   66E26 : =>TRUE                       if notZ80(MOMCPU)
(1)   83/   66E26 : =>FALSE                              if (*)&1
(1)   83/   66E26 :                                             dc.b 0                          ;ds.b 1
(1)   83/   66E26 : [83]                                 endif
(1)   83/   66E26 : =>FALSE                      else
(1)   83/   66E26 :                                     if ($)&1
(1)   83/   66E26 :                                             db 0
(1)   83/   66E26 : [83]                                 endif
(1)   83/   66E26 : [83]                         endif
(1)   84/   66E26 :                     ; ---------------------------------------------------------------------------
(1)   85/   66E26 :                     ; ===========================================================================
(1)   86/   66E26 :                     
   19459/   66E26 :                     ; ---------------------------------------------------------------------------
   19460/   66E26 :                     PLCMAP_Sonic_MainIndex:
   19461/   66E26 :                     	include	"PLCMAPANI/PLCMAP_IndxBlck_Sonic.asm"
(1)    1/   66E26 :                     ; ===========================================================================
(1)    2/   66E26 :                     ; ---------------------------------------------------------------------------
(1)    3/   66E26 :                     ; PLC/Sprite map index block - Sonic
(1)    4/   66E26 :                     ; ---------------------------------------------------------------------------
(1)    5/   66E26 :                     ; An example of the setup:
(1)    6/   66E26 :                     ;
(1)    7/   66E26 :                     ;		dc.w Location-Map_Sonic,			Location-PLC_Sonic
(1)    8/   66E26 :                     ;		dc.w Location-Map_Sonic,			Location-PLC_Sonic
(1)    9/   66E26 :                     ;		dc.w Location-Map_Sonic,			Location-PLC_Sonic
(1)   10/   66E26 :                     ; etc, etc.
(1)   11/   66E26 :                     ; ---------------------------------------------------------------------------
(1)   12/   66E26 :                     ; ===========================================================================
(1)   13/   66E26 : 0000 0000           		dc.w MAPSon_Stand-Map_Sonic,			PLCSon_Stand-PLC_Sonic
(1)   14/   66E2A : 0012 000A           		dc.w MAPSon_LookUp-Map_Sonic,			PLCSon_LookUp-PLC_Sonic
(1)   15/   66E2E : 001E 0014           		dc.w MAPSon_LookDown-Map_Sonic,			PLCSon_LookDown-PLC_Sonic
(1)   16/   66E32 : 002A 001E           		dc.w MAPSon_Hurt-Map_Sonic,			PLCSon_Hurt-PLC_Sonic
(1)   17/   66E36 : 0036 0028           		dc.w MAPSon_Wait1-Map_Sonic,			PLCSon_Wait1-PLC_Sonic
(1)   18/   66E3A : 0042 0032           		dc.w MAPSon_Wait2-Map_Sonic,			PLCSon_Wait2-PLC_Sonic
(1)   19/   66E3E : 004E 003C           		dc.w MAPSon_BlncIn1-Map_Sonic,			PLCSon_BlncIn1-PLC_Sonic
(1)   20/   66E42 : 004E 003C           		dc.w MAPSon_BlncIn1-Map_Sonic,			PLCSon_BlncIn1-PLC_Sonic
(1)   21/   66E46 : 004E 003C           		dc.w MAPSon_BlncIn1-Map_Sonic,			PLCSon_BlncIn1-PLC_Sonic
(1)   22/   66E4A : 004E 003C           		dc.w MAPSon_BlncIn1-Map_Sonic,			PLCSon_BlncIn1-PLC_Sonic
(1)   23/   66E4E : 005A 0046           		dc.w MAPSon_BlncIn2-Map_Sonic,			PLCSon_BlncIn2-PLC_Sonic
(1)   24/   66E52 : 0066 0050           		dc.w MAPSon_BlncIn3-Map_Sonic,			PLCSon_BlncIn3-PLC_Sonic
(1)   25/   66E56 : 0072 005A           		dc.w MAPSon_BlncOut1-Map_Sonic,			PLCSon_BlncOut1-PLC_Sonic
(1)   26/   66E5A : 0084 0064           		dc.w MAPSon_BlncOut2-Map_Sonic,			PLCSon_BlncOut2-PLC_Sonic
(1)   27/   66E5E : 0096 006E           		dc.w MAPSon_BlncOut3-Map_Sonic,			PLCSon_BlncOut3-PLC_Sonic
(1)   28/   66E62 : 00A8 0078           		dc.w MAPSon_Walk5_000-Map_Sonic,		PLCSon_Walk5_000-PLC_Sonic
(1)   29/   66E66 : 00BA 0082           		dc.w MAPSon_Walk6_000-Map_Sonic,		PLCSon_Walk6_000-PLC_Sonic
(1)   30/   66E6A : 00CC 008C           		dc.w MAPSon_Walk1_000-Map_Sonic,		PLCSon_Walk1_000-PLC_Sonic
(1)   31/   66E6E : 00D8 0096           		dc.w MAPSon_Walk2_000-Map_Sonic,		PLCSon_Walk2_000-PLC_Sonic
(1)   32/   66E72 : 00E4 00A0           		dc.w MAPSon_Walk3_000-Map_Sonic,		PLCSon_Walk3_000-PLC_Sonic
(1)   33/   66E76 : 00F6 00AA           		dc.w MAPSon_Walk4_000-Map_Sonic,		PLCSon_Walk4_000-PLC_Sonic
(1)   34/   66E7A : 0102 00B4           		dc.w MAPSon_Walk5_045-Map_Sonic,		PLCSon_Walk5_045-PLC_Sonic
(1)   35/   66E7E : 0114 00BE           		dc.w MAPSon_Walk6_045-Map_Sonic,		PLCSon_Walk6_045-PLC_Sonic
(1)   36/   66E82 : 0126 00C8           		dc.w MAPSon_Walk1_045-Map_Sonic,		PLCSon_Walk1_045-PLC_Sonic
(1)   37/   66E86 : 0138 00D2           		dc.w MAPSon_Walk2_045-Map_Sonic,		PLCSon_Walk2_045-PLC_Sonic
(1)   38/   66E8A : 014A 00DC           		dc.w MAPSon_Walk3_045-Map_Sonic,		PLCSon_Walk3_045-PLC_Sonic
(1)   39/   66E8E : 015C 00E6           		dc.w MAPSon_Walk4_045-Map_Sonic,		PLCSon_Walk4_045-PLC_Sonic
(1)   40/   66E92 : 016E 00F0           		dc.w MAPSon_Walk5_090-Map_Sonic,		PLCSon_Walk5_090-PLC_Sonic
(1)   41/   66E96 : 0180 00FA           		dc.w MAPSon_Walk6_090-Map_Sonic,		PLCSon_Walk6_090-PLC_Sonic
(1)   42/   66E9A : 018C 0104           		dc.w MAPSon_Walk1_090-Map_Sonic,		PLCSon_Walk1_090-PLC_Sonic
(1)   43/   66E9E : 0198 010E           		dc.w MAPSon_Walk2_090-Map_Sonic,		PLCSon_Walk2_090-PLC_Sonic
(1)   44/   66EA2 : 01A4 0118           		dc.w MAPSon_Walk3_090-Map_Sonic,		PLCSon_Walk3_090-PLC_Sonic
(1)   45/   66EA6 : 01B6 0122           		dc.w MAPSon_Walk4_090-Map_Sonic,		PLCSon_Walk4_090-PLC_Sonic
(1)   46/   66EAA : 01C2 012C           		dc.w MAPSon_Walk5_135-Map_Sonic,		PLCSon_Walk5_135-PLC_Sonic
(1)   47/   66EAE : 01D4 0136           		dc.w MAPSon_Walk6_135-Map_Sonic,		PLCSon_Walk6_135-PLC_Sonic
(1)   48/   66EB2 : 01E6 0140           		dc.w MAPSon_Walk1_135-Map_Sonic,		PLCSon_Walk1_135-PLC_Sonic
(1)   49/   66EB6 : 01F8 014A           		dc.w MAPSon_Walk2_135-Map_Sonic,		PLCSon_Walk2_135-PLC_Sonic
(1)   50/   66EBA : 020A 0154           		dc.w MAPSon_Walk3_135-Map_Sonic,		PLCSon_Walk3_135-PLC_Sonic
(1)   51/   66EBE : 021C 015E           		dc.w MAPSon_Walk4_135-Map_Sonic,		PLCSon_Walk4_135-PLC_Sonic
(1)   52/   66EC2 : 022E 0168           		dc.w MAPSon_Run1_000-Map_Sonic,			PLCSon_Run1_000-PLC_Sonic
(1)   53/   66EC6 : 023A 0172           		dc.w MAPSon_Run2_000-Map_Sonic,			PLCSon_Run1_045-PLC_Sonic
(1)   54/   66ECA : 0246 017C           		dc.w MAPSon_Run3_000-Map_Sonic,			PLCSon_Run1_090-PLC_Sonic
(1)   55/   66ECE : 0252 0186           		dc.w MAPSon_Run4_000-Map_Sonic,			PLCSon_Run1_135-PLC_Sonic
(1)   56/   66ED2 : 025E 0190           		dc.w MAPSon_Run1_045-Map_Sonic,			PLCSon_Run2_000-PLC_Sonic
(1)   57/   66ED6 : 026A 019A           		dc.w MAPSon_Run2_045-Map_Sonic,			PLCSon_Run2_045-PLC_Sonic
(1)   58/   66EDA : 0276 01A4           		dc.w MAPSon_Run3_045-Map_Sonic,			PLCSon_Run2_090-PLC_Sonic
(1)   59/   66EDE : 0282 01AE           		dc.w MAPSon_Run4_045-Map_Sonic,			PLCSon_Run2_135-PLC_Sonic
(1)   60/   66EE2 : 028E 01B8           		dc.w MAPSon_Run1_090-Map_Sonic,			PLCSon_Run3_000-PLC_Sonic
(1)   61/   66EE6 : 029A 01C2           		dc.w MAPSon_Run2_090-Map_Sonic,			PLCSon_Run3_045-PLC_Sonic
(1)   62/   66EEA : 02A6 01CC           		dc.w MAPSon_Run3_090-Map_Sonic,			PLCSon_Run3_090-PLC_Sonic
(1)   63/   66EEE : 02B2 01D6           		dc.w MAPSon_Run4_090-Map_Sonic,			PLCSon_Run3_135-PLC_Sonic
(1)   64/   66EF2 : 02BE 01E0           		dc.w MAPSon_Run1_135-Map_Sonic,			PLCSon_Run4_000-PLC_Sonic
(1)   65/   66EF6 : 02CA 01EA           		dc.w MAPSon_Run2_135-Map_Sonic,			PLCSon_Run4_045-PLC_Sonic
(1)   66/   66EFA : 02D6 01F4           		dc.w MAPSon_Run3_135-Map_Sonic,			PLCSon_Run4_090-PLC_Sonic
(1)   67/   66EFE : 02E2 01FE           		dc.w MAPSon_Run4_135-Map_Sonic,			PLCSon_Run4_135-PLC_Sonic
(1)   68/   66F02 : 02EE 0208           		dc.w MAPSon_Skid1-Map_Sonic,			PLCSon_Skid1-PLC_Sonic
(1)   69/   66F06 : 02FA 0212           		dc.w MAPSon_Skid2-Map_Sonic,			PLCSon_Skid2-PLC_Sonic
(1)   70/   66F0A : 030C 021C           		dc.w MAPSon_Skid3-Map_Sonic,			PLCSon_Skid3-PLC_Sonic
(1)   71/   66F0E : 031E 0226           		dc.w MAPSon_Pull1-Map_Sonic,			PLCSon_Pull1-PLC_Sonic
(1)   72/   66F12 : 0324 0230           		dc.w MAPSon_Pull2-Map_Sonic,			PLCSon_Pull2-PLC_Sonic
(1)   73/   66F16 : 0330 023A           		dc.w MAPSon_Roll1-Map_Sonic,			PLCSon_Roll1-PLC_Sonic
(1)   74/   66F1A : 0336 0244           		dc.w MAPSon_Roll2-Map_Sonic,			PLCSon_Roll2-PLC_Sonic
(1)   75/   66F1E : 033C 024E           		dc.w MAPSon_Roll3-Map_Sonic,			PLCSon_Roll3-PLC_Sonic
(1)   76/   66F22 : 0342 0258           		dc.w MAPSon_Roll4-Map_Sonic,			PLCSon_Roll4-PLC_Sonic
(1)   77/   66F26 : 0348 0262           		dc.w MAPSon_Roll5-Map_Sonic,			PLCSon_Roll5-PLC_Sonic
(1)   78/   66F2A : 034E 026C           		dc.w MAPSon_Dizzy1-Map_Sonic,			PLCSon_Dizzy1-PLC_Sonic
(1)   79/   66F2E : 0360 0276           		dc.w MAPSon_Dizzy2-Map_Sonic,			PLCSon_Dizzy2-PLC_Sonic
(1)   80/   66F32 : 036C 0280           		dc.w MAPSon_Dizzy3-Map_Sonic,			PLCSon_Dizzy3-PLC_Sonic
(1)   81/   66F36 : 0378 028A           		dc.w MAPSon_Dizzy4-Map_Sonic,			PLCSon_Dizzy4-PLC_Sonic
(1)   82/   66F3A : 0384 0294           		dc.w MAPSon_Dizzy5-Map_Sonic,			PLCSon_Dizzy5-PLC_Sonic
(1)   83/   66F3E : 0396 029E           		dc.w MAPSon_Dizzy6-Map_Sonic,			PLCSon_Dizzy6-PLC_Sonic
(1)   84/   66F42 : 03A8 02A8           		dc.w MAPSon_Climb1-Map_Sonic,			PLCSon_Climb1-PLC_Sonic
(1)   85/   66F46 : 03B4 02B2           		dc.w MAPSon_Climb2-Map_Sonic,			PLCSon_Climb2-PLC_Sonic
(1)   86/   66F4A : 03C0 02BC           		dc.w MAPSon_Climb3-Map_Sonic,			PLCSon_Climb3-PLC_Sonic
(1)   87/   66F4E : 03CC 02C6           		dc.w MAPSon_Climb4-Map_Sonic,			PLCSon_Climb4-PLC_Sonic
(1)   88/   66F52 : 03D8 02D0           		dc.w MAPSon_Climb5-Map_Sonic,			PLCSon_Climb5-PLC_Sonic
(1)   89/   66F56 : 03E4 02DA           		dc.w MAPSon_Throw1-Map_Sonic,			PLCSon_Throw1-PLC_Sonic
(1)   90/   66F5A : 03F6 02E4           		dc.w MAPSon_Throw2-Map_Sonic,			PLCSon_Throw2-PLC_Sonic
(1)   91/   66F5E : 0402 02EE           		dc.w MAPSon_Throw3-Map_Sonic,			PLCSon_Throw3-PLC_Sonic
(1)   92/   66F62 : 040E 02F8           		dc.w MAPSon_Throw4-Map_Sonic,			PLCSon_Throw4-PLC_Sonic
(1)   93/   66F66 : 041A 0302           		dc.w MAPSon_WallJump1-Map_Sonic,		PLCSon_WallJump1-PLC_Sonic
(1)   94/   66F6A : 042C 030C           		dc.w MAPSon_WallJump2-Map_Sonic,		PLCSon_WallJump2-PLC_Sonic
(1)   95/   66F6E : 0432 0316           		dc.w MAPSon_WallJump3-Map_Sonic,		PLCSon_WallJump3-PLC_Sonic
(1)   96/   66F72 : 043E 0320           		dc.w MAPSon_WallJump4-Map_Sonic,		PLCSon_WallJump4-PLC_Sonic
(1)   97/   66F76 : 044A 032A           		dc.w MAPSon_WallJump5-Map_Sonic,		PLCSon_WallJump5-PLC_Sonic
(1)   98/   66F7A : 0456 0334           		dc.w MAPSon_Spindash1-Map_Sonic,		PLCSon_Spindash1-PLC_Sonic
(1)   99/   66F7E : 045C 033E           		dc.w MAPSon_Spindash2-Map_Sonic,		PLCSon_Spindash2-PLC_Sonic
(1)  100/   66F82 : 0462 0348           		dc.w MAPSon_Spindash3-Map_Sonic,		PLCSon_Spindash3-PLC_Sonic
(1)  101/   66F86 : 0468 0352           		dc.w MAPSon_Spindash4-Map_Sonic,		PLCSon_Spindash4-PLC_Sonic
(1)  102/   66F8A : 046E 035C           		dc.w MAPSon_Spindash5-Map_Sonic,		PLCSon_Spindash5-PLC_Sonic
(1)  103/   66F8E : 0474 0366           		dc.w MAPSon_Spindash6-Map_Sonic,		PLCSon_Spindash6-PLC_Sonic
(1)  104/   66F92 :                     ; ---------------------------------------------------------------------------
(1)  105/   66F92 :                     ; ===========================================================================
(1)  106/   66F92 :                     
   19462/   66F92 :                     ; ---------------------------------------------------------------------------
   19463/   66F92 :                     PLC_Sonic:
   19464/   66F92 :                     	include	"PLCMAPANI/PLC_Sonic.asm"
(1)    1/   66F92 :                     ; ===========================================================================
(1)    2/   66F92 :                     ; ---------------------------------------------------------------------------
(1)    3/   66F92 :                     ; Pattern Load Cues - Sonic
(1)    4/   66F92 :                     ; ---------------------------------------------------------------------------
(1)    5/   66F92 :                     ; Guide as documented by Hivebrain
(1)    6/   66F92 :                     ;
(1)    7/   66F92 :                     ;	Each load cue consists of ten bytes:
(1)    8/   66F92 :                     ;
(1)    9/   66F92 :                     ;		dc.w $QQQQ,$----,$RRR-,$DDDD,$EEEE
(1)   10/   66F92 :                     ;
(1)   11/   66F92 :                     ;	$QQQQ = Number of tiles to load from Rom
(1)   12/   66F92 :                     ;	$RRR- = Location to start reading the tiles
(1)   13/   66F92 :                     ; ---------------------------------------------------------------------------
(1)   14/   66F92 :                     ; the rest were not mentioned on the guide, and I am assuming are:
(1)   15/   66F92 :                     ; ---------------------------------------------------------------------------
(1)   16/   66F92 :                     ;	$---- = Unknown
(1)   17/   66F92 :                     ;	$DDDD = I think it's some sort of dumping location (to dump the art)
(1)   18/   66F92 :                     ;	$EEEE = whether it's the last PLC section to use or not (00 Include next PLC section/FF End of PLC section)
(1)   19/   66F92 :                     ; ---------------------------------------------------------------------------
(1)   20/   66F92 :                     ; ===========================================================================
(1)   21/   66F92 :                     ; ---------------------------------------------------------------------------
(1)   22/   66F92 : 1001 9704 0000      PLCSon_Stand:		dc.w $1001,$9704,$0000,$D380,$FFFF
            66F98 : D380 FFFF          
(1)   23/   66F9C : F000 9704 0110      PLCSon_LookUp:		dc.w $F000,$9704,$0110,$D380,$FFFF
            66FA2 : D380 FFFF          
(1)   24/   66FA6 : E000 9704 0200      PLCSon_LookDown:	dc.w $E000,$9704,$0200,$D380,$FFFF
            66FAC : D380 FFFF          
(1)   25/   66FB0 : 2001 9704 02E0      PLCSon_Hurt:		dc.w $2001,$9704,$02E0,$D380,$FFFF
            66FB6 : D380 FFFF          
(1)   26/   66FBA : F000 9704 0400      PLCSon_Wait1:		dc.w $F000,$9704,$0400,$D380,$FFFF
            66FC0 : D380 FFFF          
(1)   27/   66FC4 : F000 9704 04F0      PLCSon_Wait2:		dc.w $F000,$9704,$04F0,$D380,$FFFF
            66FCA : D380 FFFF          
(1)   28/   66FCE : 1001 9704 05E0      PLCSon_BlncIn1:		dc.w $1001,$9704,$05E0,$D380,$FFFF ; Balance in 1
            66FD4 : D380 FFFF          
(1)   29/   66FD8 : 2001 9704 06F0      PLCSon_BlncIn2:		dc.w $2001,$9704,$06F0,$D380,$FFFF ; Balance in 2
            66FDE : D380 FFFF          
(1)   30/   66FE2 : 2001 9704 0810      PLCSon_BlncIn3:		dc.w $2001,$9704,$0810,$D380,$FFFF ; Balance in 3
            66FE8 : D380 FFFF          
(1)   31/   66FEC : 2001 9704 0930      PLCSon_BlncOut1:	dc.w $2001,$9704,$0930,$D380,$FFFF ; Balance out 1
            66FF2 : D380 FFFF          
(1)   32/   66FF6 : 1001 9704 0A50      PLCSon_BlncOut2:	dc.w $1001,$9704,$0A50,$D380,$FFFF ; Balance out 2
            66FFC : D380 FFFF          
(1)   33/   67000 : F000 9704 0B60      PLCSon_BlncOut3:	dc.w $F000,$9704,$0B60,$D380,$FFFF ; Balance out 3
            67006 : D380 FFFF          
(1)   34/   6700A :                     ; ---------------------------------------------------------------------------
(1)   35/   6700A :                     ; Walking (Angle: 000* 180* degrees)
(1)   36/   6700A : 6001 9704 0C50      PLCSon_Walk5_000:	dc.w $6001,$9704,$0C50,$D380,$FFFF
            67010 : D380 FFFF          
(1)   37/   67014 : 3001 9704 0DB0      PLCSon_Walk6_000:	dc.w $3001,$9704,$0DB0,$D380,$FFFF
            6701A : D380 FFFF          
(1)   38/   6701E : E000 9704 0EE0      PLCSon_Walk1_000:	dc.w $E000,$9704,$0EE0,$D380,$FFFF
            67024 : D380 FFFF          
(1)   39/   67028 : 1001 9704 0FC0      PLCSon_Walk2_000:	dc.w $1001,$9704,$0FC0,$D380,$FFFF
            6702E : D380 FFFF          
(1)   40/   67032 : F000 9704 10D0      PLCSon_Walk3_000:	dc.w $F000,$9704,$10D0,$D380,$FFFF
            67038 : D380 FFFF          
(1)   41/   6703C : 1001 9704 11C0      PLCSon_Walk4_000:	dc.w $1001,$9704,$11C0,$D380,$FFFF
            67042 : D380 FFFF          
(1)   42/   67046 :                     ; ---------------------------------------------------------------------------
(1)   43/   67046 :                     ; Walking (Angle: 045* 225* degrees)
(1)   44/   67046 : 4001 9704 12D0      PLCSon_Walk5_045:	dc.w $4001,$9704,$12D0,$D380,$FFFF
            6704C : D380 FFFF          
(1)   45/   67050 : 6001 9704 1410      PLCSon_Walk6_045:	dc.w $6001,$9704,$1410,$D380,$FFFF
            67056 : D380 FFFF          
(1)   46/   6705A : 0001 9704 1570      PLCSon_Walk1_045:	dc.w $0001,$9704,$1570,$D380,$FFFF
            67060 : D380 FFFF          
(1)   47/   67064 : 4001 9704 1670      PLCSon_Walk2_045:	dc.w $4001,$9704,$1670,$D380,$FFFF
            6706A : D380 FFFF          
(1)   48/   6706E : 3001 9704 17B0      PLCSon_Walk3_045:	dc.w $3001,$9704,$17B0,$D380,$FFFF
            67074 : D380 FFFF          
(1)   49/   67078 : 3001 9704 18E0      PLCSon_Walk4_045:	dc.w $3001,$9704,$18E0,$D380,$FFFF
            6707E : D380 FFFF          
(1)   50/   67082 :                     ; ---------------------------------------------------------------------------
(1)   51/   67082 :                     ; Walking (Angle: 090* 270* degrees)
(1)   52/   67082 : 6001 9704 1A10      PLCSon_Walk5_090:	dc.w $6001,$9704,$1A10,$D380,$FFFF
            67088 : D380 FFFF          
(1)   53/   6708C : 4001 9704 1B70      PLCSon_Walk6_090:	dc.w $4001,$9704,$1B70,$D380,$FFFF
            67092 : D380 FFFF          
(1)   54/   67096 : E000 9704 1CB0      PLCSon_Walk1_090:	dc.w $E000,$9704,$1CB0,$D380,$FFFF
            6709C : D380 FFFF          
(1)   55/   670A0 : 1001 9704 1D90      PLCSon_Walk2_090:	dc.w $1001,$9704,$1D90,$D380,$FFFF
            670A6 : D380 FFFF          
(1)   56/   670AA : F000 9704 1EA0      PLCSon_Walk3_090:	dc.w $F000,$9704,$1EA0,$D380,$FFFF
            670B0 : D380 FFFF          
(1)   57/   670B4 : 1001 9704 1F90      PLCSon_Walk4_090:	dc.w $1001,$9704,$1F90,$D380,$FFFF
            670BA : D380 FFFF          
(1)   58/   670BE :                     ; ---------------------------------------------------------------------------
(1)   59/   670BE :                     ; Walking (Angle: 135* 315* degrees)
(1)   60/   670BE : 4001 9704 20A0      PLCSon_Walk5_135:	dc.w $4001,$9704,$20A0,$D380,$FFFF
            670C4 : D380 FFFF          
(1)   61/   670C8 : 6001 9704 21E0      PLCSon_Walk6_135:	dc.w $6001,$9704,$21E0,$D380,$FFFF
            670CE : D380 FFFF          
(1)   62/   670D2 : 1001 9704 2340      PLCSon_Walk1_135:	dc.w $1001,$9704,$2340,$D380,$FFFF
            670D8 : D380 FFFF          
(1)   63/   670DC : 3001 9704 2450      PLCSon_Walk2_135:	dc.w $3001,$9704,$2450,$D380,$FFFF
            670E2 : D380 FFFF          
(1)   64/   670E6 : 3001 9704 2580      PLCSon_Walk3_135:	dc.w $3001,$9704,$2580,$D380,$FFFF
            670EC : D380 FFFF          
(1)   65/   670F0 : 3001 9704 26B0      PLCSon_Walk4_135:	dc.w $3001,$9704,$26B0,$D380,$FFFF
            670F6 : D380 FFFF          
(1)   66/   670FA :                     ; ---------------------------------------------------------------------------
(1)   67/   670FA : 2001 9704 27E0      PLCSon_Run1_000:	dc.w $2001,$9704,$27E0,$D380,$FFFF
            67100 : D380 FFFF          
(1)   68/   67104 : 2001 9704 2900      PLCSon_Run1_045:	dc.w $2001,$9704,$2900,$D380,$FFFF
            6710A : D380 FFFF          
(1)   69/   6710E : 2001 9704 2A20      PLCSon_Run1_090:	dc.w $2001,$9704,$2A20,$D380,$FFFF
            67114 : D380 FFFF          
(1)   70/   67118 : 2001 9704 2B40      PLCSon_Run1_135:	dc.w $2001,$9704,$2B40,$D380,$FFFF
            6711E : D380 FFFF          
(1)   71/   67122 : 4001 9704 2C60      PLCSon_Run2_000:	dc.w $4001,$9704,$2C60,$D380,$FFFF
            67128 : D380 FFFF          
(1)   72/   6712C : 4001 9704 2DA0      PLCSon_Run2_045:	dc.w $4001,$9704,$2DA0,$D380,$FFFF
            67132 : D380 FFFF          
(1)   73/   67136 : 4001 9704 2EE0      PLCSon_Run2_090:	dc.w $4001,$9704,$2EE0,$D380,$FFFF
            6713C : D380 FFFF          
(1)   74/   67140 : 4001 9704 3020      PLCSon_Run2_135:	dc.w $4001,$9704,$3020,$D380,$FFFF
            67146 : D380 FFFF          
(1)   75/   6714A : 2001 9704 3160      PLCSon_Run3_000:	dc.w $2001,$9704,$3160,$D380,$FFFF
            67150 : D380 FFFF          
(1)   76/   67154 : 2001 9704 3280      PLCSon_Run3_045:	dc.w $2001,$9704,$3280,$D380,$FFFF
            6715A : D380 FFFF          
(1)   77/   6715E : 2001 9704 33A0      PLCSon_Run3_090:	dc.w $2001,$9704,$33A0,$D380,$FFFF
            67164 : D380 FFFF          
(1)   78/   67168 : 2001 9704 34C0      PLCSon_Run3_135:	dc.w $2001,$9704,$34C0,$D380,$FFFF
            6716E : D380 FFFF          
(1)   79/   67172 : 4001 9704 35E0      PLCSon_Run4_000:	dc.w $4001,$9704,$35E0,$D380,$FFFF
            67178 : D380 FFFF          
(1)   80/   6717C : 4001 9704 3720      PLCSon_Run4_045:	dc.w $4001,$9704,$3720,$D380,$FFFF
            67182 : D380 FFFF          
(1)   81/   67186 : 4001 9704 3860      PLCSon_Run4_090:	dc.w $4001,$9704,$3860,$D380,$FFFF
            6718C : D380 FFFF          
(1)   82/   67190 : 4001 9704 39A0      PLCSon_Run4_135:	dc.w $4001,$9704,$39A0,$D380,$FFFF
            67196 : D380 FFFF          
(1)   83/   6719A :                     ; ---------------------------------------------------------------------------
(1)   84/   6719A : 1001 9704 3AE0      PLCSon_Skid1:		dc.w $1001,$9704,$3AE0,$D380,$FFFF
            671A0 : D380 FFFF          
(1)   85/   671A4 : 1001 9704 3BF0      PLCSon_Skid2:		dc.w $1001,$9704,$3BF0,$D380,$FFFF
            671AA : D380 FFFF          
(1)   86/   671AE : 4001 9704 3D00      PLCSon_Skid3:		dc.w $4001,$9704,$3D00,$D380,$FFFF
            671B4 : D380 FFFF          
(1)   87/   671B8 : 0001 9704 3E40      PLCSon_Pull1:		dc.w $0001,$9704,$3E40,$D380,$FFFF
            671BE : D380 FFFF          
(1)   88/   671C2 : 4001 9704 3F40      PLCSon_Pull2:		dc.w $4001,$9704,$3F40,$D380,$FFFF
            671C8 : D380 FFFF          
(1)   89/   671CC : 0001 9704 4080      PLCSon_Roll1:		dc.w $0001,$9704,$4080,$D380,$FFFF
            671D2 : D380 FFFF          
(1)   90/   671D6 : 0001 9704 4180      PLCSon_Roll2:		dc.w $0001,$9704,$4180,$D380,$FFFF
            671DC : D380 FFFF          
(1)   91/   671E0 : 0001 9704 4280      PLCSon_Roll3:		dc.w $0001,$9704,$4280,$D380,$FFFF
            671E6 : D380 FFFF          
(1)   92/   671EA : 0001 9704 4380      PLCSon_Roll4:		dc.w $0001,$9704,$4380,$D380,$FFFF
            671F0 : D380 FFFF          
(1)   93/   671F4 : 0001 9704 4480      PLCSon_Roll5:		dc.w $0001,$9704,$4480,$D380,$FFFF
            671FA : D380 FFFF          
(1)   94/   671FE :                     ; ---------------------------------------------------------------------------
(1)   95/   671FE :                     ; Unused
(1)   96/   671FE : 0001 9704 4580      PLCSon_Dizzy1:		dc.w $0001,$9704,$4580,$D380,$FFFF
            67204 : D380 FFFF          
(1)   97/   67208 : D000 9704 4680      PLCSon_Dizzy2:		dc.w $D000,$9704,$4680,$D380,$FFFF
            6720E : D380 FFFF          
(1)   98/   67212 : 0001 9704 4750      PLCSon_Dizzy3:		dc.w $0001,$9704,$4750,$D380,$FFFF
            67218 : D380 FFFF          
(1)   99/   6721C : F000 9704 4850      PLCSon_Dizzy4:		dc.w $F000,$9704,$4850,$D380,$FFFF
            67222 : D380 FFFF          
(1)  100/   67226 : 1001 9704 4940      PLCSon_Dizzy5:		dc.w $1001,$9704,$4940,$D380,$FFFF
            6722C : D380 FFFF          
(1)  101/   67230 : 0001 9704 4A50      PLCSon_Dizzy6:		dc.w $0001,$9704,$4A50,$D380,$FFFF
            67236 : D380 FFFF          
(1)  102/   6723A : 2001 9704 4B50      PLCSon_Climb1:		dc.w $2001,$9704,$4B50,$D380,$FFFF
            67240 : D380 FFFF          
(1)  103/   67244 : 0001 9704 4C70      PLCSon_Climb2:		dc.w $0001,$9704,$4C70,$D380,$FFFF
            6724A : D380 FFFF          
(1)  104/   6724E : F000 9704 4D70      PLCSon_Climb3:		dc.w $F000,$9704,$4D70,$D380,$FFFF
            67254 : D380 FFFF          
(1)  105/   67258 : E000 9704 4E60      PLCSon_Climb4:		dc.w $E000,$9704,$4E60,$D380,$FFFF
            6725E : D380 FFFF          
(1)  106/   67262 : 2001 9704 4F40      PLCSon_Climb5:		dc.w $2001,$9704,$4F40,$D380,$FFFF
            67268 : D380 FFFF          
(1)  107/   6726C : 5001 9704 5060      PLCSon_Throw1:		dc.w $5001,$9704,$5060,$D380,$FFFF
            67272 : D380 FFFF          
(1)  108/   67276 : 1001 9704 51B0      PLCSon_Throw2:		dc.w $1001,$9704,$51B0,$D380,$FFFF
            6727C : D380 FFFF          
(1)  109/   67280 : 3001 9704 52C0      PLCSon_Throw3:		dc.w $3001,$9704,$52C0,$D380,$FFFF
            67286 : D380 FFFF          
(1)  110/   6728A : E000 9704 53F0      PLCSon_Throw4:		dc.w $E000,$9704,$53F0,$D380,$FFFF
            67290 : D380 FFFF          
(1)  111/   67294 : 6001 9704 54D0      PLCSon_WallJump1:	dc.w $6001,$9704,$54D0,$D380,$FFFF
            6729A : D380 FFFF          
(1)  112/   6729E : 0001 9704 5630      PLCSon_WallJump2:	dc.w $0001,$9704,$5630,$D380,$FFFF
            672A4 : D380 FFFF          
(1)  113/   672A8 : 2001 9704 5730      PLCSon_WallJump3:	dc.w $2001,$9704,$5730,$D380,$FFFF
            672AE : D380 FFFF          
(1)  114/   672B2 : E000 9704 5850      PLCSon_WallJump4:	dc.w $E000,$9704,$5850,$D380,$FFFF
            672B8 : D380 FFFF          
(1)  115/   672BC : 2001 9704 5930      PLCSon_WallJump5:	dc.w $2001,$9704,$5930,$D380,$FFFF
            672C2 : D380 FFFF          
(1)  116/   672C6 :                     ; ---------------------------------------------------------------------------
(1)  117/   672C6 : 0001 9704 5A50      PLCSon_Spindash1:	dc.w $0001,$9704,$5A50,$D380,$FFFF
            672CC : D380 FFFF          
(1)  118/   672D0 : 0001 9704 5B50      PLCSon_Spindash2:	dc.w $0001,$9704,$5B50,$D380,$FFFF
            672D6 : D380 FFFF          
(1)  119/   672DA : 0001 9704 5C50      PLCSon_Spindash3:	dc.w $0001,$9704,$5C50,$D380,$FFFF
            672E0 : D380 FFFF          
(1)  120/   672E4 : 0001 9704 5D50      PLCSon_Spindash4:	dc.w $0001,$9704,$5D50,$D380,$FFFF
            672EA : D380 FFFF          
(1)  121/   672EE : 0001 9704 5E50      PLCSon_Spindash5:	dc.w $0001,$9704,$5E50,$D380,$FFFF
            672F4 : D380 FFFF          
(1)  122/   672F8 : 0001 9704 5F50      PLCSon_Spindash6:	dc.w $0001,$9704,$5F50,$D380,$FFFF
            672FE : D380 FFFF          
(1)  123/   67302 : (MACRO)              			even
(1)  123/   67302 : =>TRUE                       if notZ80(MOMCPU)
(1)  123/   67302 : =>FALSE                              if (*)&1
(1)  123/   67302 :                                             dc.b 0                          ;ds.b 1
(1)  123/   67302 : [123]                                endif
(1)  123/   67302 : =>FALSE                      else
(1)  123/   67302 :                                     if ($)&1
(1)  123/   67302 :                                             db 0
(1)  123/   67302 : [123]                                endif
(1)  123/   67302 : [123]                        endif
(1)  124/   67302 :                     ; ---------------------------------------------------------------------------
(1)  125/   67302 :                     ; ===========================================================================
(1)  126/   67302 :                     
   19465/   67302 :                     ; ---------------------------------------------------------------------------
   19466/   67302 :                     Map_Sonic:
   19467/   67302 :                     	include	"PLCMAPANI/MAP_Sonic.asm"
(1)    1/   67302 :                     ; ===========================================================================
(1)    2/   67302 :                     ; ---------------------------------------------------------------------------
(1)    3/   67302 :                     ; Mappings - Sonic
(1)    4/   67302 :                     ; ---------------------------------------------------------------------------
(1)    5/   67302 :                     ; Guide as documented by Hivebrain
(1)    6/   67302 :                     ;
(1)    7/   67302 :                     ;	Each map block consists of six bytes:
(1)    8/   67302 :                     ;
(1)    9/   67302 :                     ;		dc.w $SS,$YY,$TT,$TT,$XX,$ZZ
(1)   10/   67302 :                     ;
(1)   11/   67302 :                     ;	$SS   = Shape and size of sprite piece
(1)   12/   67302 :                     ;	$YY   = Y position of sprite piece
(1)   13/   67302 :                     ;	$TTTT = Tile to read in VRAM
(1)   14/   67302 :                     ;	$XX   = X position of sprite piece
(1)   15/   67302 :                     ;	$ZZ   = whether it's the last map to use in the sprite or not (00 = Include next map in sprite/FF = End of sprite)
(1)   16/   67302 :                     ;
(1)   17/   67302 :                     ; ---------------------------------------------------------------------------
(1)   18/   67302 :                     ; ===========================================================================
(1)   19/   67302 :                     ; ---------------------------------------------------------------------------
(1)   20/   67302 : 0DEA 069C F000      MAPSon_Stand:		dc.b $0D,$EA,$06,$9C,$F0,$00
(1)   21/   67308 : 09FA 06A4 F200      			dc.b $09,$FA,$06,$A4,$F2,$00
(1)   22/   6730E : 080A 06AA F8FF      			dc.b $08,$0A,$06,$AA,$F8,$FF
(1)   23/   67314 : 0BE9 069C F000      MAPSon_LookUp:		dc.b $0B,$E9,$06,$9C,$F0,$00
(1)   24/   6731A : 0809 06A8 F8FF      			dc.b $08,$09,$06,$A8,$F8,$FF
(1)   25/   67320 : 04F1 069C 0000      MAPSon_LookDown:	dc.b $04,$F1,$06,$9C,$00,$00
(1)   26/   67326 : 0EF9 069E F5FF      			dc.b $0E,$F9,$06,$9E,$F5,$FF
(1)   27/   6732C : 0BF1 069C EC00      MAPSon_Hurt:		dc.b $0B,$F1,$06,$9C,$EC,$00
(1)   28/   67332 : 06F6 06A8 04FF      			dc.b $06,$F6,$06,$A8,$04,$FF
(1)   29/   67338 : 0BE9 069C F000      MAPSon_Wait1:		dc.b $0B,$E9,$06,$9C,$F0,$00
(1)   30/   6733E : 0809 06A8 F8FF      			dc.b $08,$09,$06,$A8,$F8,$FF
(1)   31/   67344 : 0BE9 069C F000      MAPSon_Wait2:		dc.b $0B,$E9,$06,$9C,$F0,$00
(1)   32/   6734A : 0809 06A8 F8FF      			dc.b $08,$09,$06,$A8,$F8,$FF
(1)   33/   67350 : 0FEC 069C EE00      MAPSon_BlncIn1:		dc.b $0F,$EC,$06,$9C,$EE,$00	; Balance in 1
(1)   34/   67356 : 000C 06AC F8FF      			dc.b $00,$0C,$06,$AC,$F8,$FF
(1)   35/   6735C : 0FEA 069C EC00      MAPSon_BlncIn2:		dc.b $0F,$EA,$06,$9C,$EC,$00	; Balance in 2
(1)   36/   67362 : 040A 06AC F0FF      			dc.b $04,$0A,$06,$AC,$F0,$FF
(1)   37/   67368 : 0EEB 069C EC00      MAPSon_BlncIn3:		dc.b $0E,$EB,$06,$9C,$EC,$00	; Balance in 3
(1)   38/   6736E : 0903 06A8 EDFF      			dc.b $09,$03,$06,$A8,$ED,$FF
(1)   39/   67374 : 0BEC 069C FC00      MAPSon_BlncOut1:	dc.b $0B,$EC,$06,$9C,$FC,$00	; Balance out 1
(1)   40/   6737A : 05F6 06A8 EC00      			dc.b $05,$F6,$06,$A8,$EC,$00
(1)   41/   67380 : 040C 06AC 04FF      			dc.b $04,$0C,$06,$AC,$04,$FF
(1)   42/   67386 : 0EEC 069C F400      MAPSon_BlncOut2:	dc.b $0E,$EC,$06,$9C,$F4,$00	; Balance out 2
(1)   43/   6738C : 00F8 06A8 EC00      			dc.b $00,$F8,$06,$A8,$EC,$00
(1)   44/   67392 : 0504 06A9 FDFF      			dc.b $05,$04,$06,$A9,$FD,$FF
(1)   45/   67398 : 0DEC 069C F000      MAPSon_BlncOut3:	dc.b $0D,$EC,$06,$9C,$F0,$00	; Balance out 3
(1)   46/   6739E : 09FC 06A4 F400      			dc.b $09,$FC,$06,$A4,$F4,$00
(1)   47/   673A4 : 000C 06AA 03FF      			dc.b $00,$0C,$06,$AA,$03,$FF
(1)   48/   673AA :                     ; ---------------------------------------------------------------------------
(1)   49/   673AA :                     ; Walking (Angle: 000* 180* degrees)
(1)   50/   673AA : 0FE9 069C EC00      MAPSon_Walk5_000:	dc.b $0F,$E9,$06,$9C,$EC,$00
(1)   51/   673B0 : 01F9 06AC 0C00      			dc.b $01,$F9,$06,$AC,$0C,$00
(1)   52/   673B6 : 0C09 06AE EFFF      			dc.b $0C,$09,$06,$AE,$EF,$FF
(1)   53/   673BC : 08E9 069C F300      MAPSon_Walk6_000:	dc.b $08,$E9,$06,$9C,$F3,$00
(1)   54/   673C2 : 0DF1 069F F300      			dc.b $0D,$F1,$06,$9F,$F3,$00
(1)   55/   673C8 : 0D01 06A7 F4FF      			dc.b $0D,$01,$06,$A7,$F4,$FF
(1)   56/   673CE : 0BEB 069C F400      MAPSon_Walk1_000:	dc.b $0B,$EB,$06,$9C,$F4,$00
(1)   57/   673D4 : 040B 06A8 F7FF      			dc.b $04,$0B,$06,$A8,$F7,$FF
(1)   58/   673DA : 0AEA 069C F400      MAPSon_Walk2_000:	dc.b $0A,$EA,$06,$9C,$F4,$00
(1)   59/   673E0 : 0D02 06A5 F2FF      			dc.b $0D,$02,$06,$A5,$F2,$FF
(1)   60/   673E6 : 0AEB 069C F400      MAPSon_Walk3_000:	dc.b $0A,$EB,$06,$9C,$F4,$00
(1)   61/   673EC : 0C03 06A5 EC00      			dc.b $0C,$03,$06,$A5,$EC,$00
(1)   62/   673F2 : 040B 06A9 FFFF      			dc.b $04,$0B,$06,$A9,$FF,$FF
(1)   63/   673F8 : 0DEB 069C F300      MAPSon_Walk4_000:	dc.b $0D,$EB,$06,$9C,$F3,$00
(1)   64/   673FE : 0AFB 06A4 F4FF      			dc.b $0A,$FB,$06,$A4,$F4,$FF
(1)   65/   67404 :                     ; ---------------------------------------------------------------------------
(1)   66/   67404 :                     ; Walking (Angle: 045* 225* degrees)
(1)   67/   67404 : 0EED 069C EC00      MAPSon_Walk5_045:	dc.b $0E,$ED,$06,$9C,$EC,$00
(1)   68/   6740A : 01F5 06A8 0C00      			dc.b $01,$F5,$06,$A8,$0C,$00
(1)   69/   67410 : 0605 06AA F8FF      			dc.b $06,$05,$06,$AA,$F8,$FF
(1)   70/   67416 : 0FED 069C EC00      MAPSon_Walk6_045:	dc.b $0F,$ED,$06,$9C,$EC,$00
(1)   71/   6741C : 05FC 06AC 0C00      			dc.b $05,$FC,$06,$AC,$0C,$00
(1)   72/   67422 : 040D 06B0 FBFF      			dc.b $04,$0D,$06,$B0,$FB,$FF
(1)   73/   67428 : 09ED 069C F000      MAPSon_Walk1_045:	dc.b $09,$ED,$06,$9C,$F0,$00
(1)   74/   6742E : 0DFD 06A2 F400      			dc.b $0D,$FD,$06,$A2,$F4,$00
(1)   75/   67434 : 040D 06AA 03FF      			dc.b $04,$0D,$06,$AA,$03,$FF
(1)   76/   6743A : 0FED 069C F000      MAPSon_Walk2_045:	dc.b $0F,$ED,$06,$9C,$F0,$00
(1)   77/   67440 : 01F6 06AC 1000      			dc.b $01,$F6,$06,$AC,$10,$00
(1)   78/   67446 : 010D 06AE FEFF      			dc.b $01,$0D,$06,$AE,$FE,$FF
(1)   79/   6744C : 0BED 069C F000      MAPSon_Walk3_045:	dc.b $0B,$ED,$06,$9C,$F0,$00
(1)   80/   67452 : 05FD 06A8 0800      			dc.b $05,$FD,$06,$A8,$08,$00
(1)   81/   67458 : 080D 06AC FDFF      			dc.b $08,$0D,$06,$AC,$FD,$FF
(1)   82/   6745E : 0FED 069C EC00      MAPSon_Walk4_045:	dc.b $0F,$ED,$06,$9C,$EC,$00
(1)   83/   67464 : 0001 06AC 0C00      			dc.b $00,$01,$06,$AC,$0C,$00
(1)   84/   6746A : 040D 06AD FEFF      			dc.b $04,$0D,$06,$AD,$FE,$FF
(1)   85/   67470 :                     ; ---------------------------------------------------------------------------
(1)   86/   67470 :                     ; Walking (Angle: 090* 270* degrees)
(1)   87/   67470 : 0FF4 069C E900      MAPSon_Walk5_090:	dc.b $0F,$F4,$06,$9C,$E9,$00
(1)   88/   67476 : 04EC 06AC F900      			dc.b $04,$EC,$06,$AC,$F9,$00
(1)   89/   6747C : 03F1 06AE 09FF      			dc.b $03,$F1,$06,$AE,$09,$FF
(1)   90/   67482 : 0BF2 069C EB00      MAPSon_Walk6_090:	dc.b $0B,$F2,$06,$9C,$EB,$00
(1)   91/   67488 : 07ED 06A8 03FF      			dc.b $07,$ED,$06,$A8,$03,$FF
(1)   92/   6748E : 0EF4 069C EB00      MAPSon_Walk1_090:	dc.b $0E,$F4,$06,$9C,$EB,$00
(1)   93/   67494 : 01FC 06A8 0BFF      			dc.b $01,$FC,$06,$A8,$0B,$FF
(1)   94/   6749A : 0AF4 069C EA00      MAPSon_Walk2_090:	dc.b $0A,$F4,$06,$9C,$EA,$00
(1)   95/   674A0 : 07EE 06A5 02FF      			dc.b $07,$EE,$06,$A5,$02,$FF
(1)   96/   674A6 : 0EF4 069C EB00      MAPSon_Walk3_090:	dc.b $0E,$F4,$06,$9C,$EB,$00
(1)   97/   674AC : 01F5 06A8 0B00      			dc.b $01,$F5,$06,$A8,$0B,$00
(1)   98/   674B2 : 000C 06AA 05FF      			dc.b $00,$0C,$06,$AA,$05,$FF
(1)   99/   674B8 : 07F2 069C EB00      MAPSon_Walk4_090:	dc.b $07,$F2,$06,$9C,$EB,$00
(1)  100/   674BE : 0AF4 06A4 FBFF      			dc.b $0A,$F4,$06,$A4,$FB,$FF
(1)  101/   674C4 :                     ; ---------------------------------------------------------------------------
(1)  102/   674C4 :                     ; Walking (Angle: 135* 315* degrees)
(1)  103/   674C4 : 0BF4 069C EC00      MAPSon_Walk5_135:	dc.b $0B,$F4,$06,$9C,$EC,$00
(1)  104/   674CA : 04EC 06A8 F400      			dc.b $04,$EC,$06,$A8,$F4,$00
(1)  105/   674D0 : 09F9 06AA 04FF      			dc.b $09,$F9,$06,$AA,$04,$FF
(1)  106/   674D6 : 0FF4 069C EC00      MAPSon_Walk6_135:	dc.b $0F,$F4,$06,$9C,$EC,$00
(1)  107/   674DC : 05E4 06AC FB00      			dc.b $05,$E4,$06,$AC,$FB,$00
(1)  108/   674E2 : 01F5 06B0 0CFF      			dc.b $01,$F5,$06,$B0,$0C,$FF
(1)  109/   674E8 : 0AF8 069C EC00      MAPSon_Walk1_135:	dc.b $0A,$F8,$06,$9C,$EC,$00
(1)  110/   674EE : 05E8 06A5 0100      			dc.b $05,$E8,$06,$A5,$01,$00
(1)  111/   674F4 : 05F8 06A9 04FF      			dc.b $05,$F8,$06,$A9,$04,$FF
(1)  112/   674FA : 0AF8 069C EC00      MAPSon_Walk2_135:	dc.b $0A,$F8,$06,$9C,$EC,$00
(1)  113/   67500 : 05E8 06A5 F500      			dc.b $05,$E8,$06,$A5,$F5,$00
(1)  114/   67506 : 09F9 06A9 04FF      			dc.b $09,$F9,$06,$A9,$04,$FF
(1)  115/   6750C : 0EF8 069C EC00      MAPSon_Walk3_135:	dc.b $0E,$F8,$06,$9C,$EC,$00
(1)  116/   67512 : 09E8 06A8 FC00      			dc.b $09,$E8,$06,$A8,$FC,$00
(1)  117/   67518 : 00FC 06AE 0CFF      			dc.b $00,$FC,$06,$AE,$0C,$FF
(1)  118/   6751E : 0FF2 069C EC00      MAPSon_Walk4_135:	dc.b $0F,$F2,$06,$9C,$EC,$00
(1)  119/   67524 : 00EA 06AC 0100      			dc.b $00,$EA,$06,$AC,$01,$00
(1)  120/   6752A : 01F2 06AD 0CFF      			dc.b $01,$F2,$06,$AD,$0C,$FF
(1)  121/   67530 :                     ; ---------------------------------------------------------------------------
(1)  122/   67530 : 09ED 069C F600      MAPSon_Run1_000:	dc.b $09,$ED,$06,$9C,$F6,$00
(1)  123/   67536 : 0EFD 06A2 EFFF      			dc.b $0E,$FD,$06,$A2,$EF,$FF
(1)  124/   6753C : 09ED 069C F600      MAPSon_Run2_000:	dc.b $09,$ED,$06,$9C,$F6,$00
(1)  125/   67542 : 0EFD 06A2 EEFF      			dc.b $0E,$FD,$06,$A2,$EE,$FF
(1)  126/   67548 : 09ED 069C F600      MAPSon_Run3_000:	dc.b $09,$ED,$06,$9C,$F6,$00
(1)  127/   6754E : 0EFD 06A2 EEFF      			dc.b $0E,$FD,$06,$A2,$EE,$FF
(1)  128/   67554 : 09ED 069C F600      MAPSon_Run4_000:	dc.b $09,$ED,$06,$9C,$F6,$00
(1)  129/   6755A : 0EFD 06A2 EEFF      			dc.b $0E,$FD,$06,$A2,$EE,$FF
(1)  130/   67560 : 0DEB 069C EE00      MAPSon_Run1_045:	dc.b $0D,$EB,$06,$9C,$EE,$00
(1)  131/   67566 : 0EFB 06A4 F5FF      			dc.b $0E,$FB,$06,$A4,$F5,$FF
(1)  132/   6756C : 0DEB 069C EE00      MAPSon_Run2_045:	dc.b $0D,$EB,$06,$9C,$EE,$00
(1)  133/   67572 : 0EFB 06A4 F5FF      			dc.b $0E,$FB,$06,$A4,$F5,$FF
(1)  134/   67578 : 0DEB 069C EE00      MAPSon_Run3_045:	dc.b $0D,$EB,$06,$9C,$EE,$00
(1)  135/   6757E : 0EFB 06A4 F5FF      			dc.b $0E,$FB,$06,$A4,$F5,$FF
(1)  136/   67584 : 0DEB 069C EE00      MAPSon_Run4_045:	dc.b $0D,$EB,$06,$9C,$EE,$00
(1)  137/   6758A : 0EFB 06A4 F5FF      			dc.b $0E,$FB,$06,$A4,$F5,$FF
(1)  138/   67590 : 06F2 069C ED00      MAPSon_Run1_090:	dc.b $06,$F2,$06,$9C,$ED,$00
(1)  139/   67596 : 0BF2 06A2 FDFF      			dc.b $0B,$F2,$06,$A2,$FD,$FF
(1)  140/   6759C : 06F2 069C ED00      MAPSon_Run2_090:	dc.b $06,$F2,$06,$9C,$ED,$00
(1)  141/   675A2 : 0BF2 06A2 FDFF      			dc.b $0B,$F2,$06,$A2,$FD,$FF
(1)  142/   675A8 : 06F2 069C ED00      MAPSon_Run3_090:	dc.b $06,$F2,$06,$9C,$ED,$00
(1)  143/   675AE : 0BF2 06A2 FDFF      			dc.b $0B,$F2,$06,$A2,$FD,$FF
(1)  144/   675B4 : 06F2 069C ED00      MAPSon_Run4_090:	dc.b $06,$F2,$06,$9C,$ED,$00
(1)  145/   675BA : 0BF2 06A2 FDFF      			dc.b $0B,$F2,$06,$A2,$FD,$FF
(1)  146/   675C0 : 0BEB 069C FB00      MAPSon_Run1_135:	dc.b $0B,$EB,$06,$9C,$FB,$00
(1)  147/   675C6 : 07F2 06A8 EBFF      			dc.b $07,$F2,$06,$A8,$EB,$FF
(1)  148/   675CC : 0BEA 069C FB00      MAPSon_Run2_135:	dc.b $0B,$EA,$06,$9C,$FB,$00
(1)  149/   675D2 : 07F2 06A8 EBFF      			dc.b $07,$F2,$06,$A8,$EB,$FF
(1)  150/   675D8 : 0BEB 069C FB00      MAPSon_Run3_135:	dc.b $0B,$EB,$06,$9C,$FB,$00
(1)  151/   675DE : 07F2 06A8 EBFF      			dc.b $07,$F2,$06,$A8,$EB,$FF
(1)  152/   675E4 : 0BEA 069C FB00      MAPSon_Run4_135:	dc.b $0B,$EA,$06,$9C,$FB,$00
(1)  153/   675EA : 07F2 06A8 EBFF      			dc.b $07,$F2,$06,$A8,$EB,$FF
(1)  154/   675F0 :                     ; ---------------------------------------------------------------------------
(1)  155/   675F0 : 0AED 069C F800      MAPSon_Skid1:		dc.b $0A,$ED,$06,$9C,$F8,$00
(1)  156/   675F6 : 0D05 06A5 F0FF      			dc.b $0D,$05,$06,$A5,$F0,$FF
(1)  157/   675FC : 0AE9 069C F800      MAPSon_Skid2:		dc.b $0A,$E9,$06,$9C,$F8,$00
(1)  158/   67602 : 0901 06A5 EE00      			dc.b $09,$01,$06,$A5,$EE,$00
(1)  159/   67608 : 0401 06AB 06FF      			dc.b $04,$01,$06,$AB,$06,$FF
(1)  160/   6760E : 0FED 069C F000      MAPSon_Skid3:		dc.b $0F,$ED,$06,$9C,$F0,$00
(1)  161/   67614 : 01F9 06AC 1000      			dc.b $01,$F9,$06,$AC,$10,$00
(1)  162/   6761A : 040D 06AE F0FF      			dc.b $04,$0D,$06,$AE,$F0,$FF
(1)  163/   67620 : 0FF1 069C ECFF      MAPSon_Pull1:		dc.b $0F,$F1,$06,$9C,$EC,$FF
(1)  164/   67626 : 0EE9 069C EC00      MAPSon_Pull2:		dc.b $0E,$E9,$06,$9C,$EC,$00
(1)  165/   6762C : 0D01 06A8 F4FF      			dc.b $0D,$01,$06,$A8,$F4,$FF
(1)  166/   67632 : 0FF0 069C F0FF      MAPSon_Roll1:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  167/   67638 : 0FF0 069C F0FF      MAPSon_Roll2:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  168/   6763E : 0FF0 069C F0FF      MAPSon_Roll3:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  169/   67644 : 0FF0 069C F0FF      MAPSon_Roll4:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  170/   6764A : 0FF0 069C F0FF      MAPSon_Roll5:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  171/   67650 :                     ; ---------------------------------------------------------------------------
(1)  172/   67650 :                     ; Unused
(1)  173/   67650 : 04E9 069C F800      MAPSon_Dizzy1:		dc.b $04,$E9,$06,$9C,$F8,$00
(1)  174/   67656 : 0DF1 069E F300      			dc.b $0D,$F1,$06,$9E,$F3,$00
(1)  175/   6765C : 0901 06A6 F8FF      			dc.b $09,$01,$06,$A6,$F8,$FF
(1)  176/   67662 : 0AEC 069C F200      MAPSon_Dizzy2:		dc.b $0A,$EC,$06,$9C,$F2,$00
(1)  177/   67668 : 0504 06A5 F7FF      			dc.b $05,$04,$06,$A5,$F7,$FF
(1)  178/   6766E : 0EE9 069C F000      MAPSon_Dizzy3:		dc.b $0E,$E9,$06,$9C,$F0,$00
(1)  179/   67674 : 0501 06A8 FAFF      			dc.b $05,$01,$06,$A8,$FA,$FF
(1)  180/   6767A : 09E9 069C F700      MAPSon_Dizzy4:		dc.b $09,$E9,$06,$9C,$F7,$00
(1)  181/   67680 : 0AF9 06A2 F3FF      			dc.b $0A,$F9,$06,$A2,$F3,$FF
(1)  182/   67686 : 04E9 069C F800      MAPSon_Dizzy5:		dc.b $04,$E9,$06,$9C,$F8,$00
(1)  183/   6768C : 0EF1 069E F000      			dc.b $0E,$F1,$06,$9E,$F0,$00
(1)  184/   67692 : 0809 06AA F6FF      			dc.b $08,$09,$06,$AA,$F6,$FF
(1)  185/   67698 : 09E9 069C F800      MAPSon_Dizzy6:		dc.b $09,$E9,$06,$9C,$F8,$00
(1)  186/   6769E : 0DF9 06A2 F800      			dc.b $0D,$F9,$06,$A2,$F8,$00
(1)  187/   676A4 : 0409 06AA FDFF      			dc.b $04,$09,$06,$AA,$FD,$FF
(1)  188/   676AA : 0B00 069C 0100      MAPSon_Climb1:		dc.b $0B,$00,$06,$9C,$01,$00
(1)  189/   676B0 : 0920 06A8 07FF      			dc.b $09,$20,$06,$A8,$07,$FF
(1)  190/   676B6 : 0B00 069C 0000      MAPSon_Climb2:		dc.b $0B,$00,$06,$9C,$00,$00
(1)  191/   676BC : 0520 06A8 07FF      			dc.b $05,$20,$06,$A8,$07,$FF
(1)  192/   676C2 : 0A00 069C 0000      MAPSon_Climb3:		dc.b $0A,$00,$06,$9C,$00,$00
(1)  193/   676C8 : 0918 06A5 0AFF      			dc.b $09,$18,$06,$A5,$0A,$FF
(1)  194/   676CE : 0900 069C 0000      MAPSon_Climb4:		dc.b $09,$00,$06,$9C,$00,$00
(1)  195/   676D4 : 0D10 06A2 00FF      			dc.b $0D,$10,$06,$A2,$00,$FF
(1)  196/   676DA : 0F00 069C 0000      MAPSon_Climb5:		dc.b $0F,$00,$06,$9C,$00,$00
(1)  197/   676E0 : 0420 06AC 10FF      			dc.b $04,$20,$06,$AC,$10,$FF
(1)  198/   676E6 : 0FE9 069C EC00      MAPSon_Throw1:		dc.b $0F,$E9,$06,$9C,$EC,$00
(1)  199/   676EC : 0C09 06AC EC00      			dc.b $0C,$09,$06,$AC,$EC,$00
(1)  200/   676F2 : 0006 06B0 0CFF      			dc.b $00,$06,$06,$B0,$0C,$FF
(1)  201/   676F8 : 0AE9 069C F300      MAPSon_Throw2:		dc.b $0A,$E9,$06,$9C,$F3,$00
(1)  202/   676FE : 0D01 06A5 EFFF      			dc.b $0D,$01,$06,$A5,$EF,$FF
(1)  203/   67704 : 0FE9 069C F400      MAPSon_Throw3:		dc.b $0F,$E9,$06,$9C,$F4,$00
(1)  204/   6770A : 0809 06AC F9FF      			dc.b $08,$09,$06,$AC,$F9,$FF
(1)  205/   67710 : 0BE9 069C F400      MAPSon_Throw4:		dc.b $0B,$E9,$06,$9C,$F4,$00
(1)  206/   67716 : 0409 06A8 F7FF      			dc.b $04,$09,$06,$A8,$F7,$FF
(1)  207/   6771C : 0F00 069C 1000      MAPSon_WallJump1:	dc.b $0F,$00,$06,$9C,$10,$00
(1)  208/   67722 : 0102 06AC 0800      			dc.b $01,$02,$06,$AC,$08,$00
(1)  209/   67728 : 0512 06AE 00FF      			dc.b $05,$12,$06,$AE,$00,$FF
(1)  210/   6772E : 0F00 069C 00FF      MAPSon_WallJump2:	dc.b $0F,$00,$06,$9C,$00,$FF
(1)  211/   67734 : 0E00 069C 0000      MAPSon_WallJump3:	dc.b $0E,$00,$06,$9C,$00,$00
(1)  212/   6773A : 0918 06A8 00FF      			dc.b $09,$18,$06,$A8,$00,$FF
(1)  213/   67740 : 0E00 069C 0800      MAPSon_WallJump4:	dc.b $0E,$00,$06,$9C,$08,$00
(1)  214/   67746 : 0108 06A8 00FF      			dc.b $01,$08,$06,$A8,$00,$FF
(1)  215/   6774C : 0B00 069C 1000      MAPSon_WallJump5:	dc.b $0B,$00,$06,$9C,$10,$00
(1)  216/   67752 : 0600 06A8 00FF      			dc.b $06,$00,$06,$A8,$00,$FF
(1)  217/   67758 :                     ; ---------------------------------------------------------------------------
(1)  218/   67758 : 0FF5 069C F0FF      MAPSon_Spindash1:	dc.b $0F,$F5,$06,$9C,$F0,$FF
(1)  219/   6775E : 0FF5 069C F0FF      MAPSon_Spindash2:	dc.b $0F,$F5,$06,$9C,$F0,$FF
(1)  220/   67764 : 0FF5 069C F0FF      MAPSon_Spindash3:	dc.b $0F,$F5,$06,$9C,$F0,$FF
(1)  221/   6776A : 0FF5 069C F0FF      MAPSon_Spindash4:	dc.b $0F,$F5,$06,$9C,$F0,$FF
(1)  222/   67770 : 0FF5 069C F0FF      MAPSon_Spindash5:	dc.b $0F,$F5,$06,$9C,$F0,$FF
(1)  223/   67776 : 0FF5 069C F0FF      MAPSon_Spindash6:	dc.b $0F,$F5,$06,$9C,$F0,$FF
(1)  224/   6777C : (MACRO)              			even
(1)  224/   6777C : =>TRUE                       if notZ80(MOMCPU)
(1)  224/   6777C : =>FALSE                              if (*)&1
(1)  224/   6777C :                                             dc.b 0                          ;ds.b 1
(1)  224/   6777C : [224]                                endif
(1)  224/   6777C : =>FALSE                      else
(1)  224/   6777C :                                     if ($)&1
(1)  224/   6777C :                                             db 0
(1)  224/   6777C : [224]                                endif
(1)  224/   6777C : [224]                        endif
(1)  225/   6777C :                     ; ---------------------------------------------------------------------------
(1)  226/   6777C :                     ; ===========================================================================
(1)  227/   6777C :                     
   19468/   6777C :                     ; ---------------------------------------------------------------------------
   19469/   6777C :                     ; ===========================================================================
   19470/   6777C :                     ; ---------------------------------------------------------------------------
   19471/   6777C :                     ; PLC, mapping & Main index block - Tails' Arm
   19472/   6777C :                     ; ---------------------------------------------------------------------------
   19473/   6777C :                     PLCMAP_TalArm_MainIndex:
   19474/   6777C :                     	include	"PLCMAPANI/PLCMAP_IndxBlck_TailsArm.asm"
(1)    1/   6777C :                     ; ===========================================================================
(1)    2/   6777C :                     ; ---------------------------------------------------------------------------
(1)    3/   6777C :                     ; PLC/Sprite map index block - Tails Arm
(1)    4/   6777C :                     ; ---------------------------------------------------------------------------
(1)    5/   6777C :                     ; An example of the setup:
(1)    6/   6777C :                     ;
(1)    7/   6777C :                     ;		dc.w Location-Map_TailsArm,			Location-PLC_TailsArm
(1)    8/   6777C :                     ;		dc.w Location-Map_TailsArm,			Location-PLC_TailsArm
(1)    9/   6777C :                     ;		dc.w Location-Map_TailsArm,			Location-PLC_TailsArm
(1)   10/   6777C :                     ; etc, etc.
(1)   11/   6777C :                     ; ---------------------------------------------------------------------------
(1)   12/   6777C :                     ; ===========================================================================
(1)   13/   6777C : 0000 0000           		dc.w MAPTArm_Pul_Lft_000-MAP_TailsArm,		PLCTArm_Pul_Lft_000-PLC_TailsArm
(1)   14/   67780 : 0006 000A           		dc.w MAPTArm_Pul_LftDwn_020-MAP_TailsArm,	PLCTArm_Pul_LftDwn_020-PLC_TailsArm
(1)   15/   67784 : 000C 0014           		dc.w MAPTArm_Pul_LftDwn_045-MAP_TailsArm,	PLCTArm_Pul_LftDwn_045-PLC_TailsArm
(1)   16/   67788 : 0012 001E           		dc.w MAPTArm_Pul_LftDwn_060-MAP_TailsArm,	PLCTArm_Pul_LftDwn_060-PLC_TailsArm
(1)   17/   6778C : 0018 0028           		dc.w MAPTArm_Pul_Dwn_000-MAP_TailsArm,		PLCTArm_Pul_Dwn_000-PLC_TailsArm
(1)   18/   67790 : 001E 0032           		dc.w MAPTArm_Pul_DwnRht_020-MAP_TailsArm,	PLCTArm_Pul_DwnRht_020-PLC_TailsArm
(1)   19/   67794 : 0024 003C           		dc.w MAPTArm_Pul_DwnRht_045-MAP_TailsArm,	PLCTArm_Pul_DwnRht_045-PLC_TailsArm
(1)   20/   67798 : 002A 0046           		dc.w MAPTArm_Pul_DwnRht_060-MAP_TailsArm,	PLCTArm_Pul_DwnRht_060-PLC_TailsArm
(1)   21/   6779C : 0030 0050           		dc.w MAPTArm_Pul_Rht_000-MAP_TailsArm,		PLCTArm_Pul_Rht_000-PLC_TailsArm
(1)   22/   677A0 : 0036 005A           		dc.w MAPTArm_Pul_RhtUp_020-MAP_TailsArm,	PLCTArm_Pul_RhtUp_020-PLC_TailsArm
(1)   23/   677A4 : 003C 0064           		dc.w MAPTArm_Pul_RhtUp_045-MAP_TailsArm,	PLCTArm_Pul_RhtUp_045-PLC_TailsArm
(1)   24/   677A8 : 0048 006E           		dc.w MAPTArm_Pul_RhtUp_060-MAP_TailsArm,	PLCTArm_Pul_RhtUp_060-PLC_TailsArm
(1)   25/   677AC : 004E 0078           		dc.w MAPTArm_Pul_Up_000-MAP_TailsArm,		PLCTArm_Pul_Up_000-PLC_TailsArm
(1)   26/   677B0 : 0054 0082           		dc.w MAPTArm_Pul_UpDwn_020-MAP_TailsArm,	PLCTArm_Pul_UpDwn_020-PLC_TailsArm
(1)   27/   677B4 : 005A 008C           		dc.w MAPTArm_Pul_UpDwn_045-MAP_TailsArm,	PLCTArm_Pul_UpDwn_045-PLC_TailsArm
(1)   28/   677B8 : 0060 0096           		dc.w MAPTArm_Pul_UpDwn_060-MAP_TailsArm,	PLCTArm_Pul_UpDwn_060-PLC_TailsArm
(1)   29/   677BC : 0066 00A0           		dc.w MAPTArm_BlncOut1-MAP_TailsArm,		PLCTArm_BlncOut1-PLC_TailsArm
(1)   30/   677C0 : 006C 00AA           		dc.w MAPTArm_BlncOut2-MAP_TailsArm,		PLCTArm_BlncOut2-PLC_TailsArm
(1)   31/   677C4 : 0072 00B4           		dc.w MAPTArm_BlncOut3-MAP_TailsArm,		PLCTArm_BlncOut3-PLC_TailsArm
(1)   32/   677C8 : 0078 00BE           		dc.w MAPTArm_BlncIn1-MAP_TailsArm,		PLCTArm_BlncIn1-PLC_TailsArm
(1)   33/   677CC : 007E 00C8           		dc.w MAPTArm_BlncIn2-MAP_TailsArm,		PLCTArm_BlncIn2-PLC_TailsArm
(1)   34/   677D0 : 0084 00D2           		dc.w MAPTArm_BlncIn3-MAP_TailsArm,		PLCTArm_BlncIn3-PLC_TailsArm
(1)   35/   677D4 : 008A 00DC           		dc.w MAPTArm_Walk4_000-MAP_TailsArm,		PLCTArm_Walk4_000-PLC_TailsArm
(1)   36/   677D8 : 0090 00E6           		dc.w MAPTArm_Walk1_000-MAP_TailsArm,		PLCTArm_Walk1_000-PLC_TailsArm
(1)   37/   677DC : 0096 00F0           		dc.w MAPTArm_Walk2_000-MAP_TailsArm,		PLCTArm_Walk2_000-PLC_TailsArm
(1)   38/   677E0 : 009C 00FA           		dc.w MAPTArm_Walk3_000-MAP_TailsArm,		PLCTArm_Walk3_000-PLC_TailsArm
(1)   39/   677E4 : 00A2 0104           		dc.w MAPTArm_Walk4_045-MAP_TailsArm,		PLCTArm_Walk4_045-PLC_TailsArm
(1)   40/   677E8 : 00A8 010E           		dc.w MAPTArm_Walk1_045-MAP_TailsArm,		PLCTArm_Walk1_045-PLC_TailsArm
(1)   41/   677EC : 00AE 0118           		dc.w MAPTArm_Walk2_045-MAP_TailsArm,		PLCTArm_Walk2_045-PLC_TailsArm
(1)   42/   677F0 : 00B4 0122           		dc.w MAPTArm_Walk3_045-MAP_TailsArm,		PLCTArm_Walk3_045-PLC_TailsArm
(1)   43/   677F4 : 00BA 012C           		dc.w MAPTArm_Walk4_090-MAP_TailsArm,		PLCTArm_Walk4_090-PLC_TailsArm
(1)   44/   677F8 : 00C0 0136           		dc.w MAPTArm_Walk1_090-MAP_TailsArm,		PLCTArm_Walk1_090-PLC_TailsArm
(1)   45/   677FC : 00C6 0140           		dc.w MAPTArm_Walk2_090-MAP_TailsArm,		PLCTArm_Walk2_090-PLC_TailsArm
(1)   46/   67800 : 00CC 014A           		dc.w MAPTArm_Walk3_090-MAP_TailsArm,		PLCTArm_Walk3_090-PLC_TailsArm
(1)   47/   67804 : 00D2 0154           		dc.w MAPTArm_Walk4_135-MAP_TailsArm,		PLCTArm_Walk4_135-PLC_TailsArm
(1)   48/   67808 : 00D8 015E           		dc.w MAPTArm_Walk1_135-MAP_TailsArm,		PLCTArm_Walk1_135-PLC_TailsArm
(1)   49/   6780C : 00DE 0168           		dc.w MAPTArm_Walk2_135-MAP_TailsArm,		PLCTArm_Walk2_135-PLC_TailsArm
(1)   50/   67810 : 00E4 0172           		dc.w MAPTArm_Walk3_135-MAP_TailsArm,		PLCTArm_Walk3_135-PLC_TailsArm
(1)   51/   67814 : 00EA 017C           		dc.w MAPTArm_Unused_00-MAP_TailsArm,		PLCTArm_Unused_00-PLC_TailsArm
(1)   52/   67818 : 00F0 0186           		dc.w MAPTArm_Unused_01-MAP_TailsArm,		PLCTArm_Unused_01-PLC_TailsArm
(1)   53/   6781C : 00F6 0190           		dc.w MAPTArm_Unused_02-MAP_TailsArm,		PLCTArm_Unused_02-PLC_TailsArm
(1)   54/   67820 : 00FC 019A           		dc.w MAPTArm_Run_000-MAP_TailsArm,		PLCTArm_Run_000-PLC_TailsArm
(1)   55/   67824 : 0102 01A4           		dc.w MAPTArm_Run_045-MAP_TailsArm,		PLCTArm_Run_045-PLC_TailsArm
(1)   56/   67828 : 0108 01AE           		dc.w MAPTArm_Run_090-MAP_TailsArm,		PLCTArm_Run_090-PLC_TailsArm
(1)   57/   6782C : 010E 01B8           		dc.w MAPTArm_Run_135-MAP_TailsArm,		PLCTArm_Run_135-PLC_TailsArm
(1)   58/   67830 : 0114 01C2           		dc.w MAPTArm_Hold1_000-MAP_TailsArm,		PLCTArm_Hold1_000-PLC_TailsArm
(1)   59/   67834 : 011A 01CC           		dc.w MAPTArm_Hold2_000-MAP_TailsArm,		PLCTArm_Hold2_000-PLC_TailsArm
(1)   60/   67838 : 0120 01D6           		dc.w MAPTArm_Hold3_000-MAP_TailsArm,		PLCTArm_Hold3_000-PLC_TailsArm
(1)   61/   6783C : 0126 01E0           		dc.w MAPTArm_Hold1_045-MAP_TailsArm,		PLCTArm_Hold1_045-PLC_TailsArm
(1)   62/   67840 : 012C 01EA           		dc.w MAPTArm_Hold2_045-MAP_TailsArm,		PLCTArm_Hold2_045-PLC_TailsArm
(1)   63/   67844 : 0132 01F4           		dc.w MAPTArm_Hold3_045-MAP_TailsArm,		PLCTArm_Hold3_045-PLC_TailsArm
(1)   64/   67848 : 0138 01FE           		dc.w MAPTArm_Hold1_090-MAP_TailsArm,		PLCTArm_Hold1_090-PLC_TailsArm
(1)   65/   6784C : 013E 0208           		dc.w MAPTArm_Hold2_090-MAP_TailsArm,		PLCTArm_Hold2_090-PLC_TailsArm
(1)   66/   67850 : 0144 0212           		dc.w MAPTArm_Hold3_090-MAP_TailsArm,		PLCTArm_Hold3_090-PLC_TailsArm
(1)   67/   67854 : 014A 021C           		dc.w MAPTArm_Hold1_135-MAP_TailsArm,		PLCTArm_Hold1_135-PLC_TailsArm
(1)   68/   67858 : 0150 0226           		dc.w MAPTArm_Hold2_135-MAP_TailsArm,		PLCTArm_Hold2_135-PLC_TailsArm
(1)   69/   6785C : 0156 0230           		dc.w MAPTArm_Hold3_135-MAP_TailsArm,		PLCTArm_Hold3_135-PLC_TailsArm
(1)   70/   67860 : 015C 023A           		dc.w MAPTArm_Unused_03-MAP_TailsArm,		PLCTArm_Unused_03-PLC_TailsArm
(1)   71/   67864 : 0162 0244           		dc.w MAPTArm_Unused_04-MAP_TailsArm,		PLCTArm_Unused_04-PLC_TailsArm
(1)   72/   67868 : 0168 024E           		dc.w MAPTArm_Unused_05-MAP_TailsArm,		PLCTArm_Unused_05-PLC_TailsArm
(1)   73/   6786C : 016E 0258           		dc.w MAPTArm_Unused_06-MAP_TailsArm,		PLCTArm_Unused_06-PLC_TailsArm
(1)   74/   67870 : 0174 0262           		dc.w MAPTArm_Unused_07-MAP_TailsArm,		PLCTArm_Unused_07-PLC_TailsArm
(1)   75/   67874 : 017A 026C           		dc.w MAPTArm_Unused_08-MAP_TailsArm,		PLCTArm_Unused_08-PLC_TailsArm
(1)   76/   67878 : 0180 0276           		dc.w MAPTArm_Unused_09-MAP_TailsArm,		PLCTArm_Unused_09-PLC_TailsArm
(1)   77/   6787C : 0186 0280           		dc.w MAPTArm_Unused_0A-MAP_TailsArm,		PLCTArm_Unused_0A-PLC_TailsArm
(1)   78/   67880 : 018C 028A           		dc.w MAPTArm_Unused_0B-MAP_TailsArm,		PLCTArm_Unused_0B-PLC_TailsArm
(1)   79/   67884 : 0192 0294           		dc.w MAPTArm_Unused_0C-MAP_TailsArm,		PLCTArm_Unused_0C-PLC_TailsArm
(1)   80/   67888 : 0198 029E           		dc.w MAPTArm_Unused_0D-MAP_TailsArm,		PLCTArm_Unused_0D-PLC_TailsArm
(1)   81/   6788C :                     ; ---------------------------------------------------------------------------
(1)   82/   6788C :                     ; ===========================================================================
(1)   83/   6788C :                     
   19475/   6788C :                     ; ---------------------------------------------------------------------------
   19476/   6788C :                     PLC_TailsArm:
   19477/   6788C :                     	include	"PLCMAPANI/PLC_TailsArm.asm"
(1)    1/   6788C :                     ; ===========================================================================
(1)    2/   6788C :                     ; ---------------------------------------------------------------------------
(1)    3/   6788C :                     ; Pattern Load Cues - Tails' Arm
(1)    4/   6788C :                     ; ---------------------------------------------------------------------------
(1)    5/   6788C :                     ; Guide as documented by Hivebrain
(1)    6/   6788C :                     ;
(1)    7/   6788C :                     ;	Each load cue consists of ten bytes:
(1)    8/   6788C :                     ;
(1)    9/   6788C :                     ;		dc.w $QQQQ,$----,$RRR-,$DDDD,$EEEE
(1)   10/   6788C :                     ;
(1)   11/   6788C :                     ;	$QQQQ = Number of tiles to load from Rom
(1)   12/   6788C :                     ;	$RRR- = Location to start reading the tiles
(1)   13/   6788C :                     ; ---------------------------------------------------------------------------
(1)   14/   6788C :                     ; the rest were not mentioned on the guide, and I am assuming are:
(1)   15/   6788C :                     ; ---------------------------------------------------------------------------
(1)   16/   6788C :                     ;	$---- = Unknown
(1)   17/   6788C :                     ;	$DDDD = I think it's some sort of dumping location (to dump the art)
(1)   18/   6788C :                     ;	$EEEE = whether it's the last PLC section to use or not (00 Include next PLC section/FF End of PLC section)
(1)   19/   6788C :                     ; ---------------------------------------------------------------------------
(1)   20/   6788C :                     ; ===========================================================================
(1)   21/   6788C :                     ; ---------------------------------------------------------------------------
(1)   22/   6788C : 3000 9703 2000      PLCTArm_Pul_Lft_000:	dc.w $3000,$9703,$2000,$D6A0,$FFFF ; Walk Pull (Arm Left)
            67892 : D6A0 FFFF          
(1)   23/   67896 : 6000 9703 2030      PLCTArm_Pul_LftDwn_020:	dc.w $6000,$9703,$2030,$D6A0,$FFFF ; Walk Pull (Arm Left/Down 020*)
            6789C : D6A0 FFFF          
(1)   24/   678A0 : 6000 9703 2090      PLCTArm_Pul_LftDwn_045:	dc.w $6000,$9703,$2090,$D6A0,$FFFF ; Walk Pull (Arm Left/Down 045*)
            678A6 : D6A0 FFFF          
(1)   25/   678AA : 6000 9703 20F0      PLCTArm_Pul_LftDwn_060:	dc.w $6000,$9703,$20F0,$D6A0,$FFFF ; Walk Pull (Arm Left/Down 060*)
            678B0 : D6A0 FFFF          
(1)   26/   678B4 : 6000 9703 2150      PLCTArm_Pul_Dwn_000:	dc.w $6000,$9703,$2150,$D6A0,$FFFF ; Walk Pull (Arm Down)
            678BA : D6A0 FFFF          
(1)   27/   678BE : 6000 9703 21B0      PLCTArm_Pul_DwnRht_020:	dc.w $6000,$9703,$21B0,$D6A0,$FFFF ; Walk Pull (Arm Down/Right 020*)
            678C4 : D6A0 FFFF          
(1)   28/   678C8 : 6000 9703 2210      PLCTArm_Pul_DwnRht_045:	dc.w $6000,$9703,$2210,$D6A0,$FFFF ; Walk Pull (Arm Down/Right 045*)
            678CE : D6A0 FFFF          
(1)   29/   678D2 : 6000 9703 2270      PLCTArm_Pul_DwnRht_060:	dc.w $6000,$9703,$2270,$D6A0,$FFFF ; Walk Pull (Arm Down/Right 060*)
            678D8 : D6A0 FFFF          
(1)   30/   678DC : 6000 9703 22D0      PLCTArm_Pul_Rht_000:	dc.w $6000,$9703,$22D0,$D6A0,$FFFF ; Walk Pull (Arm Right)
            678E2 : D6A0 FFFF          
(1)   31/   678E6 : 6000 9703 2330      PLCTArm_Pul_RhtUp_020:	dc.w $6000,$9703,$2330,$D6A0,$FFFF ; Walk Pull (Arm Right/Up 020*)
            678EC : D6A0 FFFF          
(1)   32/   678F0 : 5000 9703 2390      PLCTArm_Pul_RhtUp_045:	dc.w $5000,$9703,$2390,$D6A0,$FFFF ; Walk Pull (Arm Right/Up 045*)
            678F6 : D6A0 FFFF          
(1)   33/   678FA : 6000 9703 23E0      PLCTArm_Pul_RhtUp_060:	dc.w $6000,$9703,$23E0,$D6A0,$FFFF ; Walk Pull (Arm Right/Up 060*)
            67900 : D6A0 FFFF          
(1)   34/   67904 : 3000 9703 2440      PLCTArm_Pul_Up_000:	dc.w $3000,$9703,$2440,$D6A0,$FFFF ; Walk Pull (Arm Up)
            6790A : D6A0 FFFF          
(1)   35/   6790E : 6000 9703 2470      PLCTArm_Pul_UpDwn_020:	dc.w $6000,$9703,$2470,$D6A0,$FFFF ; Walk Pull (Arm Up/Left 020*)
            67914 : D6A0 FFFF          
(1)   36/   67918 : 6000 9703 24D0      PLCTArm_Pul_UpDwn_045:	dc.w $6000,$9703,$24D0,$D6A0,$FFFF ; Walk Pull (Arm Up/Left 045*)
            6791E : D6A0 FFFF          
(1)   37/   67922 : 6000 9703 2530      PLCTArm_Pul_UpDwn_060:	dc.w $6000,$9703,$2530,$D6A0,$FFFF ; Walk Pull (Arm Up/Left 060*)
            67928 : D6A0 FFFF          
(1)   38/   6792C :                     ; ---------------------------------------------------------------------------
(1)   39/   6792C : 4000 9703 2590      PLCTArm_BlncOut1:	dc.w $4000,$9703,$2590,$D6A0,$FFFF ; Balance Face Out 1
            67932 : D6A0 FFFF          
(1)   40/   67936 : 4000 9703 25D0      PLCTArm_BlncOut2:	dc.w $4000,$9703,$25D0,$D6A0,$FFFF ; Balance Face Out 2
            6793C : D6A0 FFFF          
(1)   41/   67940 : 4000 9703 2610      PLCTArm_BlncOut3:	dc.w $4000,$9703,$2610,$D6A0,$FFFF ; Balance Face Out 3
            67946 : D6A0 FFFF          
(1)   42/   6794A : 4000 9703 2650      PLCTArm_BlncIn1:	dc.w $4000,$9703,$2650,$D6A0,$FFFF ; Balance Face In 1
            67950 : D6A0 FFFF          
(1)   43/   67954 : 2000 9703 2690      PLCTArm_BlncIn2:	dc.w $2000,$9703,$2690,$D6A0,$FFFF ; Balance Face In 2
            6795A : D6A0 FFFF          
(1)   44/   6795E : 4000 9703 26B0      PLCTArm_BlncIn3:	dc.w $4000,$9703,$26B0,$D6A0,$FFFF ; Balance Face In 3
            67964 : D6A0 FFFF          
(1)   45/   67968 :                     ; ---------------------------------------------------------------------------
(1)   46/   67968 :                     ; Walking (Angle: 000* 180* degrees)
(1)   47/   67968 : 4000 9703 26F0      PLCTArm_Walk4_000:	dc.w $4000,$9703,$26F0,$D6A0,$FFFF ; Walk 4
            6796E : D6A0 FFFF          
(1)   48/   67972 : 4000 9703 2730      PLCTArm_Walk1_000:	dc.w $4000,$9703,$2730,$D6A0,$FFFF ; Walk 1 (Also Stand)
            67978 : D6A0 FFFF          
(1)   49/   6797C : 6000 9703 2770      PLCTArm_Walk2_000:	dc.w $6000,$9703,$2770,$D6A0,$FFFF ; Walk 2
            67982 : D6A0 FFFF          
(1)   50/   67986 : 6000 9703 27D0      PLCTArm_Walk3_000:	dc.w $6000,$9703,$27D0,$D6A0,$FFFF ; Walk 3 (Also Look Down)
            6798C : D6A0 FFFF          
(1)   51/   67990 :                     ; ---------------------------------------------------------------------------
(1)   52/   67990 :                     ; Walking (Angle: 045* 225* degrees)
(1)   53/   67990 : 6000 9703 2830      PLCTArm_Walk4_045:	dc.w $6000,$9703,$2830,$D6A0,$FFFF ; Walk 4
            67996 : D6A0 FFFF          
(1)   54/   6799A : 6000 9703 2890      PLCTArm_Walk1_045:	dc.w $6000,$9703,$2890,$D6A0,$FFFF ; Walk 1
            679A0 : D6A0 FFFF          
(1)   55/   679A4 : 6000 9703 28F0      PLCTArm_Walk2_045:	dc.w $6000,$9703,$28F0,$D6A0,$FFFF ; Walk 2
            679AA : D6A0 FFFF          
(1)   56/   679AE : 6000 9703 2950      PLCTArm_Walk3_045:	dc.w $6000,$9703,$2950,$D6A0,$FFFF ; Walk 3
            679B4 : D6A0 FFFF          
(1)   57/   679B8 :                     ; ---------------------------------------------------------------------------
(1)   58/   679B8 :                     ; Walking (Angle: 090* 270* degrees)
(1)   59/   679B8 : 4000 9703 29B0      PLCTArm_Walk4_090:	dc.w $4000,$9703,$29B0,$D6A0,$FFFF ; Walk 4
            679BE : D6A0 FFFF          
(1)   60/   679C2 : 4000 9703 29F0      PLCTArm_Walk1_090:	dc.w $4000,$9703,$29F0,$D6A0,$FFFF ; Walk 1
            679C8 : D6A0 FFFF          
(1)   61/   679CC : 6000 9703 2A30      PLCTArm_Walk2_090:	dc.w $6000,$9703,$2A30,$D6A0,$FFFF ; Walk 2
            679D2 : D6A0 FFFF          
(1)   62/   679D6 : 6000 9703 2A90      PLCTArm_Walk3_090:	dc.w $6000,$9703,$2A90,$D6A0,$FFFF ; Walk 3
            679DC : D6A0 FFFF          
(1)   63/   679E0 :                     ; ---------------------------------------------------------------------------
(1)   64/   679E0 :                     ; Walking (Angle: 135* 315* degrees)
(1)   65/   679E0 : 6000 9703 2AF0      PLCTArm_Walk4_135:	dc.w $6000,$9703,$2AF0,$D6A0,$FFFF ; Walk 4
            679E6 : D6A0 FFFF          
(1)   66/   679EA : 6000 9703 2B50      PLCTArm_Walk1_135:	dc.w $6000,$9703,$2B50,$D6A0,$FFFF ; Walk 1
            679F0 : D6A0 FFFF          
(1)   67/   679F4 : 4000 9703 2BB0      PLCTArm_Walk2_135:	dc.w $4000,$9703,$2BB0,$D6A0,$FFFF ; Walk 2
            679FA : D6A0 FFFF          
(1)   68/   679FE : 6000 9703 2BF0      PLCTArm_Walk3_135:	dc.w $6000,$9703,$2BF0,$D6A0,$FFFF ; Walk 3
            67A04 : D6A0 FFFF          
(1)   69/   67A08 :                     ; ---------------------------------------------------------------------------
(1)   70/   67A08 :                     ; Unused
(1)   71/   67A08 : 2000 9703 2C50      PLCTArm_Unused_00:	dc.w $2000,$9703,$2C50,$D6A0,$FFFF ; Unused
            67A0E : D6A0 FFFF          
(1)   72/   67A12 : 4000 9703 2C70      PLCTArm_Unused_01:	dc.w $4000,$9703,$2C70,$D6A0,$FFFF ; Unused
            67A18 : D6A0 FFFF          
(1)   73/   67A1C : 4000 9703 2CB0      PLCTArm_Unused_02:	dc.w $4000,$9703,$2CB0,$D6A0,$FFFF ; Unused
            67A22 : D6A0 FFFF          
(1)   74/   67A26 :                     ; ---------------------------------------------------------------------------
(1)   75/   67A26 : 6000 9703 2CF0      PLCTArm_Run_000:	dc.w $6000,$9703,$2CF0,$D6A0,$FFFF ; Running 1-4 (Angle: 000* 180* degrees)
            67A2C : D6A0 FFFF          
(1)   76/   67A30 : 6000 9703 2D50      PLCTArm_Run_045:	dc.w $6000,$9703,$2D50,$D6A0,$FFFF ; Running 1-4 (Angle: 045* 225* degrees)
            67A36 : D6A0 FFFF          
(1)   77/   67A3A : 6000 9703 2DB0      PLCTArm_Run_090:	dc.w $6000,$9703,$2DB0,$D6A0,$FFFF ; Running 1-4 (Angle: 090* 270* degrees)
            67A40 : D6A0 FFFF          
(1)   78/   67A44 : 6000 9703 2E10      PLCTArm_Run_135:	dc.w $6000,$9703,$2E10,$D6A0,$FFFF ; Running 1-4 (Angle: 135* 315* degrees)
            67A4A : D6A0 FFFF          
(1)   79/   67A4E :                     ; ---------------------------------------------------------------------------
(1)   80/   67A4E : 4000 9703 2E70      PLCTArm_Hold1_000:	dc.w $4000,$9703,$2E70,$D6A0,$FFFF ; Holding Sonic 1 (000*) (Used on 000*)
            67A54 : D6A0 FFFF          
(1)   81/   67A58 : 2000 9703 2EB0      PLCTArm_Hold2_000:	dc.w $2000,$9703,$2EB0,$D6A0,$FFFF ; Holding Sonic 2 (000*) (Used on 045*)
            67A5E : D6A0 FFFF          
(1)   82/   67A62 : 2000 9703 2ED0      PLCTArm_Hold3_000:	dc.w $2000,$9703,$2ED0,$D6A0,$FFFF ; Holding Sonic 3 (000*) (Used on 090*)
            67A68 : D6A0 FFFF          
(1)   83/   67A6C : 2000 9703 2EF0      PLCTArm_Hold1_045:	dc.w $2000,$9703,$2EF0,$D6A0,$FFFF ; Holding Sonic 1 (045*) (Used on 135*)
            67A72 : D6A0 FFFF          
(1)   84/   67A76 : 4000 9703 2F10      PLCTArm_Hold2_045:	dc.w $4000,$9703,$2F10,$D6A0,$FFFF ; Holding Sonic 2 (045*) (Unused)
            67A7C : D6A0 FFFF          
(1)   85/   67A80 : 4000 9703 2F50      PLCTArm_Hold3_045:	dc.w $4000,$9703,$2F50,$D6A0,$FFFF ; Holding Sonic 3 (045*) (Unused)
            67A86 : D6A0 FFFF          
(1)   86/   67A8A : 4000 9703 2F90      PLCTArm_Hold1_090:	dc.w $4000,$9703,$2F90,$D6A0,$FFFF ; Holding Sonic 1 (090*) (Unused)
            67A90 : D6A0 FFFF          
(1)   87/   67A94 : 2000 9703 2FD0      PLCTArm_Hold2_090:	dc.w $2000,$9703,$2FD0,$D6A0,$FFFF ; Holding Sonic 2 (090*) (Unused)
            67A9A : D6A0 FFFF          
(1)   88/   67A9E : 2000 9703 2FF0      PLCTArm_Hold3_090:	dc.w $2000,$9703,$2FF0,$D6A0,$FFFF ; Holding Sonic 3 (090*) (Unused)
            67AA4 : D6A0 FFFF          
(1)   89/   67AA8 : 2000 9703 3010      PLCTArm_Hold1_135:	dc.w $2000,$9703,$3010,$D6A0,$FFFF ; Holding Sonic 1 (135*) (Unused)
            67AAE : D6A0 FFFF          
(1)   90/   67AB2 : 4000 9703 3030      PLCTArm_Hold2_135:	dc.w $4000,$9703,$3030,$D6A0,$FFFF ; Holding Sonic 2 (135*) (Unused)
            67AB8 : D6A0 FFFF          
(1)   91/   67ABC : 4000 9703 3070      PLCTArm_Hold3_135:	dc.w $4000,$9703,$3070,$D6A0,$FFFF ; Holding Sonic 3 (135*) (Unused)
            67AC2 : D6A0 FFFF          
(1)   92/   67AC6 :                     ; ---------------------------------------------------------------------------
(1)   93/   67AC6 :                     ; Unused
(1)   94/   67AC6 : 4000 9703 30B0      PLCTArm_Unused_03:	dc.w $4000,$9703,$30B0,$D6A0,$FFFF ; Unused
            67ACC : D6A0 FFFF          
(1)   95/   67AD0 : 4000 9703 30F0      PLCTArm_Unused_04:	dc.w $4000,$9703,$30F0,$D6A0,$FFFF ; Unused
            67AD6 : D6A0 FFFF          
(1)   96/   67ADA : 1000 9703 3130      PLCTArm_Unused_05:	dc.w $1000,$9703,$3130,$D6A0,$FFFF ; Unused
            67AE0 : D6A0 FFFF          
(1)   97/   67AE4 : 4000 9703 3140      PLCTArm_Unused_06:	dc.w $4000,$9703,$3140,$D6A0,$FFFF ; Unused
            67AEA : D6A0 FFFF          
(1)   98/   67AEE : 4000 9703 3180      PLCTArm_Unused_07:	dc.w $4000,$9703,$3180,$D6A0,$FFFF ; Unused
            67AF4 : D6A0 FFFF          
(1)   99/   67AF8 : 4000 9703 31C0      PLCTArm_Unused_08:	dc.w $4000,$9703,$31C0,$D6A0,$FFFF ; Unused
            67AFE : D6A0 FFFF          
(1)  100/   67B02 : 4000 9703 3200      PLCTArm_Unused_09:	dc.w $4000,$9703,$3200,$D6A0,$FFFF ; Unused
            67B08 : D6A0 FFFF          
(1)  101/   67B0C : 4000 9703 3240      PLCTArm_Unused_0A:	dc.w $4000,$9703,$3240,$D6A0,$FFFF ; Unused
            67B12 : D6A0 FFFF          
(1)  102/   67B16 : 4000 9703 3280      PLCTArm_Unused_0B:	dc.w $4000,$9703,$3280,$D6A0,$FFFF ; Unused
            67B1C : D6A0 FFFF          
(1)  103/   67B20 : 4000 9703 32C0      PLCTArm_Unused_0C:	dc.w $4000,$9703,$32C0,$D6A0,$FFFF ; Unused
            67B26 : D6A0 FFFF          
(1)  104/   67B2A : 4000 9703 3300      PLCTArm_Unused_0D:	dc.w $4000,$9703,$3300,$D6A0,$FFFF ; Unused
            67B30 : D6A0 FFFF          
(1)  105/   67B34 : (MACRO)              			even
(1)  105/   67B34 : =>TRUE                       if notZ80(MOMCPU)
(1)  105/   67B34 : =>FALSE                              if (*)&1
(1)  105/   67B34 :                                             dc.b 0                          ;ds.b 1
(1)  105/   67B34 : [105]                                endif
(1)  105/   67B34 : =>FALSE                      else
(1)  105/   67B34 :                                     if ($)&1
(1)  105/   67B34 :                                             db 0
(1)  105/   67B34 : [105]                                endif
(1)  105/   67B34 : [105]                        endif
(1)  106/   67B34 :                     ; ---------------------------------------------------------------------------
(1)  107/   67B34 :                     ; ===========================================================================
(1)  108/   67B34 :                     
   19478/   67B34 :                     ; ---------------------------------------------------------------------------
   19479/   67B34 :                     MAP_TailsArm:
   19480/   67B34 :                     	include	"PLCMAPANI/MAP_TailsArm.asm"
(1)    1/   67B34 :                     ; ===========================================================================
(1)    2/   67B34 :                     ; ---------------------------------------------------------------------------
(1)    3/   67B34 :                     ; Mappings - Tails' Arm
(1)    4/   67B34 :                     ; ---------------------------------------------------------------------------
(1)    5/   67B34 :                     ; Guide as documented by Hivebrain
(1)    6/   67B34 :                     ;
(1)    7/   67B34 :                     ;	Each map block consists of six bytes:
(1)    8/   67B34 :                     ;
(1)    9/   67B34 :                     ;		dc.w $SS,$YY,$TT,$TT,$XX,$ZZ
(1)   10/   67B34 :                     ;
(1)   11/   67B34 :                     ;	$SS   = Shape and size of sprite piece
(1)   12/   67B34 :                     ;	$YY   = Y position of sprite piece
(1)   13/   67B34 :                     ;	$TTTT = Tile to read in VRAM
(1)   14/   67B34 :                     ;	$XX   = X position of sprite piece
(1)   15/   67B34 :                     ;	$ZZ   = whether it's the last map to use in the sprite or not (00 = Include next map in sprite/FF = End of sprite)
(1)   16/   67B34 :                     ;
(1)   17/   67B34 :                     ; ---------------------------------------------------------------------------
(1)   18/   67B34 :                     ; ===========================================================================
(1)   19/   67B34 :                     ; ---------------------------------------------------------------------------
(1)   20/   67B34 : 0810 26B5 00FF      MAPTArm_Pul_Lft_000:	dc.b $08,$10,$26,$B5,$00,$FF	; Walk Pull (Arm Left)
(1)   21/   67B3A : 0910 26B5 00FF      MAPTArm_Pul_LftDwn_020:	dc.b $09,$10,$26,$B5,$00,$FF	; Walk Pull (Arm Left/Down 020*)
(1)   22/   67B40 : 0911 26B5 00FF      MAPTArm_Pul_LftDwn_045:	dc.b $09,$11,$26,$B5,$00,$FF	; Walk Pull (Arm Left/Down 045*)
(1)   23/   67B46 : 0610 26B5 08FF      MAPTArm_Pul_LftDwn_060:	dc.b $06,$10,$26,$B5,$08,$FF	; Walk Pull (Arm Left/Down 060*)
(1)   24/   67B4C : 0611 26B5 0DFF      MAPTArm_Pul_Dwn_000:	dc.b $06,$11,$26,$B5,$0D,$FF	; Walk Pull (Arm Down)
(1)   25/   67B52 : 0610 26B5 10FF      MAPTArm_Pul_DwnRht_020:	dc.b $06,$10,$26,$B5,$10,$FF	; Walk Pull (Arm Down/Right 020*)
(1)   26/   67B58 : 0913 26B5 12FF      MAPTArm_Pul_DwnRht_045:	dc.b $09,$13,$26,$B5,$12,$FF	; Walk Pull (Arm Down/Right 045*)
(1)   27/   67B5E : 0910 26B5 10FF      MAPTArm_Pul_DwnRht_060:	dc.b $09,$10,$26,$B5,$10,$FF	; Walk Pull (Arm Down/Right 060*)
(1)   28/   67B64 : 090C 26B5 11FF      MAPTArm_Pul_Rht_000:	dc.b $09,$0C,$26,$B5,$11,$FF	; Walk Pull (Arm Right)
(1)   29/   67B6A : 0907 26B5 11FF      MAPTArm_Pul_RhtUp_020:	dc.b $09,$07,$26,$B5,$11,$FF	; Walk Pull (Arm Right/Up 020*)
(1)   30/   67B70 : 0501 26B5 1600      MAPTArm_Pul_RhtUp_045:	dc.b $05,$01,$26,$B5,$16,$00	; Walk Pull (Arm Right/Up 045*)
(1)   31/   67B76 : 0011 26B9 11FF      			dc.b $00,$11,$26,$B9,$11,$FF	; ''
(1)   32/   67B7C : 0600 26B5 10FF      MAPTArm_Pul_RhtUp_060:	dc.b $06,$00,$26,$B5,$10,$FF	; Walk Pull (Arm Right/Up 060*)
(1)   33/   67B82 : 0200 26B5 0EFF      MAPTArm_Pul_Up_000:	dc.b $02,$00,$26,$B5,$0E,$FF	; Walk Pull (Arm Up)
(1)   34/   67B88 : 0602 26B5 08FF      MAPTArm_Pul_UpDwn_020:	dc.b $06,$02,$26,$B5,$08,$FF	; Walk Pull (Arm Up/Left 020*)
(1)   35/   67B8E : 0905 26B5 03FF      MAPTArm_Pul_UpDwn_045:	dc.b $09,$05,$26,$B5,$03,$FF	; Walk Pull (Arm Up/Left 045*)
(1)   36/   67B94 : 090B 26B5 01FF      MAPTArm_Pul_UpDwn_060:	dc.b $09,$0B,$26,$B5,$01,$FF	; Walk Pull (Arm Up/Left 060*)
(1)   37/   67B9A :                     ; ---------------------------------------------------------------------------
(1)   38/   67B9A : 0514 26B5 00FF      MAPTArm_BlncOut1:	dc.b $05,$14,$26,$B5,$00,$FF	; Balance Face Out 1
(1)   39/   67BA0 : 0514 26B5 07FF      MAPTArm_BlncOut2:	dc.b $05,$14,$26,$B5,$07,$FF	; Balance Face Out 2
(1)   40/   67BA6 : 0512 26B5 0BFF      MAPTArm_BlncOut3:	dc.b $05,$12,$26,$B5,$0B,$FF	; Balance Face Out 3
(1)   41/   67BAC : 0505 26B5 01FF      MAPTArm_BlncIn1:	dc.b $05,$05,$26,$B5,$01,$FF	; Balance Face In 1
(1)   42/   67BB2 : 0410 26B5 05FF      MAPTArm_BlncIn2:	dc.b $04,$10,$26,$B5,$05,$FF	; Balance Face In 2
(1)   43/   67BB8 : 0513 26B5 0CFF      MAPTArm_BlncIn3:	dc.b $05,$13,$26,$B5,$0C,$FF	; Balance Face In 3
(1)   44/   67BBE :                     ; ---------------------------------------------------------------------------
(1)   45/   67BBE :                     ; Walking (Angle: 000* 180* degrees)
(1)   46/   67BBE : 0512 26B5 07FF      MAPTArm_Walk4_000:	dc.b $05,$12,$26,$B5,$07,$FF	; Walk 4
(1)   47/   67BC4 : 0512 26B5 07FF      MAPTArm_Walk1_000:	dc.b $05,$12,$26,$B5,$07,$FF	; Walk 1 (Also Stand)
(1)   48/   67BCA : 090E 26B5 0BFF      MAPTArm_Walk2_000:	dc.b $09,$0E,$26,$B5,$0B,$FF	; Walk 2
(1)   49/   67BD0 : 090D 26B5 06FF      MAPTArm_Walk3_000:	dc.b $09,$0D,$26,$B5,$06,$FF	; Walk 3 (Also Look Down)
(1)   50/   67BD6 :                     ; ---------------------------------------------------------------------------
(1)   51/   67BD6 :                     ; Walking (Angle: 045* 225* degrees)
(1)   52/   67BD6 : 090E 26B5 0DFF      MAPTArm_Walk4_045:	dc.b $09,$0E,$26,$B5,$0D,$FF	; Walk 4
(1)   53/   67BDC : 090D 26B5 0EFF      MAPTArm_Walk1_045:	dc.b $09,$0D,$26,$B5,$0E,$FF	; Walk 1
(1)   54/   67BE2 : 090F 26B5 0DFF      MAPTArm_Walk2_045:	dc.b $09,$0F,$26,$B5,$0D,$FF	; Walk 2
(1)   55/   67BE8 : 090E 26B5 0DFF      MAPTArm_Walk3_045:	dc.b $09,$0E,$26,$B5,$0D,$FF	; Walk 3
(1)   56/   67BEE :                     ; ---------------------------------------------------------------------------
(1)   57/   67BEE :                     ; Walking (Angle: 090* 270* degrees)
(1)   58/   67BEE : 050A 26B5 12FF      MAPTArm_Walk4_090:	dc.b $05,$0A,$26,$B5,$12,$FF	; Walk 4
(1)   59/   67BF4 : 0509 26B5 12FF      MAPTArm_Walk1_090:	dc.b $05,$09,$26,$B5,$12,$FF	; Walk 1
(1)   60/   67BFA : 0602 26B5 0EFF      MAPTArm_Walk2_090:	dc.b $06,$02,$26,$B5,$0E,$FF	; Walk 2
(1)   61/   67C00 : 0607 26B5 0DFF      MAPTArm_Walk3_090:	dc.b $06,$07,$26,$B5,$0D,$FF	; Walk 3
(1)   62/   67C06 :                     ; ---------------------------------------------------------------------------
(1)   63/   67C06 :                     ; Walking (Angle: 135* 315* degrees)
(1)   64/   67C06 : 0602 26B5 0EFF      MAPTArm_Walk4_135:	dc.b $06,$02,$26,$B5,$0E,$FF	; Walk 4
(1)   65/   67C0C : 0609 26B5 0DFF      MAPTArm_Walk1_135:	dc.b $06,$09,$26,$B5,$0D,$FF	; Walk 1
(1)   66/   67C12 : 0502 26B5 0FFF      MAPTArm_Walk2_135:	dc.b $05,$02,$26,$B5,$0F,$FF	; Walk 2
(1)   67/   67C18 : 0606 26B5 0BFF      MAPTArm_Walk3_135:	dc.b $06,$06,$26,$B5,$0B,$FF	; Walk 3
(1)   68/   67C1E :                     ; ---------------------------------------------------------------------------
(1)   69/   67C1E :                     ; Unused
(1)   70/   67C1E : 010D 26B5 06FF      MAPTArm_Unused_00:	dc.b $01,$0D,$26,$B5,$06,$FF	; Unused
(1)   71/   67C24 : 0510 26B5 04FF      MAPTArm_Unused_01:	dc.b $05,$10,$26,$B5,$04,$FF	; Unused
(1)   72/   67C2A : 0508 26B5 04FF      MAPTArm_Unused_02:	dc.b $05,$08,$26,$B5,$04,$FF	; Unused
(1)   73/   67C30 :                     ; ---------------------------------------------------------------------------
(1)   74/   67C30 : 090D 26B5 13FF      MAPTArm_Run_000:	dc.b $09,$0D,$26,$B5,$13,$FF	; Running 1-4 (Angle: 000* 180* degrees)
(1)   75/   67C36 : 090A 26B5 08FF      MAPTArm_Run_045:	dc.b $09,$0A,$26,$B5,$08,$FF	; Running 1-4 (Angle: 045* 225* degrees)
(1)   76/   67C3C : 090B 26B5 09FF      MAPTArm_Run_090:	dc.b $09,$0B,$26,$B5,$09,$FF	; Running 1-4 (Angle: 090* 270* degrees)
(1)   77/   67C42 : 0605 26B5 0AFF      MAPTArm_Run_135:	dc.b $06,$05,$26,$B5,$0A,$FF	; Running 1-4 (Angle: 135* 315* degrees)
(1)   78/   67C48 :                     ; ---------------------------------------------------------------------------
(1)   79/   67C48 : 0506 26B5 0BFF      MAPTArm_Hold1_000:	dc.b $05,$06,$26,$B5,$0B,$FF	; Holding Sonic 1 (000*) (Used on 000*)
(1)   80/   67C4E : 0400 26B5 00FF      MAPTArm_Hold2_000:	dc.b $04,$00,$26,$B5,$00,$FF	; Holding Sonic 2 (000*) (Used on 045*)
(1)   81/   67C54 : 0400 26B5 00FF      MAPTArm_Hold3_000:	dc.b $04,$00,$26,$B5,$00,$FF	; Holding Sonic 3 (000*) (Used on 090*)
(1)   82/   67C5A : 0401 26B5 00FF      MAPTArm_Hold1_045:	dc.b $04,$01,$26,$B5,$00,$FF	; Holding Sonic 1 (045*) (Used on 135*)
(1)   83/   67C60 : 0500 26B5 00FF      MAPTArm_Hold2_045:	dc.b $05,$00,$26,$B5,$00,$FF	; Holding Sonic 2 (045*) (Unused)
(1)   84/   67C66 : 0500 26B5 00FF      MAPTArm_Hold3_045:	dc.b $05,$00,$26,$B5,$00,$FF	; Holding Sonic 3 (045*) (Unused)
(1)   85/   67C6C : 0500 26B5 00FF      MAPTArm_Hold1_090:	dc.b $05,$00,$26,$B5,$00,$FF	; Holding Sonic 1 (090*) (Unused)
(1)   86/   67C72 : 0100 26B5 00FF      MAPTArm_Hold2_090:	dc.b $01,$00,$26,$B5,$00,$FF	; Holding Sonic 2 (090*) (Unused)
(1)   87/   67C78 : 0100 26B5 00FF      MAPTArm_Hold3_090:	dc.b $01,$00,$26,$B5,$00,$FF	; Holding Sonic 3 (090*) (Unused)
(1)   88/   67C7E : 0100 26B5 02FF      MAPTArm_Hold1_135:	dc.b $01,$00,$26,$B5,$02,$FF	; Holding Sonic 1 (135*) (Unused)
(1)   89/   67C84 : 0500 26B5 00FF      MAPTArm_Hold2_135:	dc.b $05,$00,$26,$B5,$00,$FF	; Holding Sonic 2 (135*) (Unused)
(1)   90/   67C8A : 0500 26B5 00FF      MAPTArm_Hold3_135:	dc.b $05,$00,$26,$B5,$00,$FF	; Holding Sonic 3 (135*) (Unused)
(1)   91/   67C90 :                     ; ---------------------------------------------------------------------------
(1)   92/   67C90 :                     ; Unused
(1)   93/   67C90 : 0500 26B5 00FF      MAPTArm_Unused_03:	dc.b $05,$00,$26,$B5,$00,$FF	; Unused
(1)   94/   67C96 : 0500 26B5 00FF      MAPTArm_Unused_04:	dc.b $05,$00,$26,$B5,$00,$FF	; Unused
(1)   95/   67C9C : 0000 26B5 00FF      MAPTArm_Unused_05:	dc.b $00,$00,$26,$B5,$00,$FF	; Unused
(1)   96/   67CA2 : 0513 26B5 00FF      MAPTArm_Unused_06:	dc.b $05,$13,$26,$B5,$00,$FF	; Unused
(1)   97/   67CA8 : 0514 26B5 05FF      MAPTArm_Unused_07:	dc.b $05,$14,$26,$B5,$05,$FF	; Unused
(1)   98/   67CAE : 0514 26B5 03FF      MAPTArm_Unused_08:	dc.b $05,$14,$26,$B5,$03,$FF	; Unused
(1)   99/   67CB4 : 0512 26B5 05FF      MAPTArm_Unused_09:	dc.b $05,$12,$26,$B5,$05,$FF	; Unused
(1)  100/   67CBA : 0514 26B5 04FF      MAPTArm_Unused_0A:	dc.b $05,$14,$26,$B5,$04,$FF	; Unused
(1)  101/   67CC0 : 0511 26B5 07FF      MAPTArm_Unused_0B:	dc.b $05,$11,$26,$B5,$07,$FF	; Unused
(1)  102/   67CC6 : 0513 26B5 05FF      MAPTArm_Unused_0C:	dc.b $05,$13,$26,$B5,$05,$FF	; Unused
(1)  103/   67CCC : 0512 26B5 06FF      MAPTArm_Unused_0D:	dc.b $05,$12,$26,$B5,$06,$FF	; Unused
(1)  104/   67CD2 : (MACRO)              			even
(1)  104/   67CD2 : =>TRUE                       if notZ80(MOMCPU)
(1)  104/   67CD2 : =>FALSE                              if (*)&1
(1)  104/   67CD2 :                                             dc.b 0                          ;ds.b 1
(1)  104/   67CD2 : [104]                                endif
(1)  104/   67CD2 : =>FALSE                      else
(1)  104/   67CD2 :                                     if ($)&1
(1)  104/   67CD2 :                                             db 0
(1)  104/   67CD2 : [104]                                endif
(1)  104/   67CD2 : [104]                        endif
(1)  105/   67CD2 :                     ; ---------------------------------------------------------------------------
(1)  106/   67CD2 :                     ; ===========================================================================
(1)  107/   67CD2 :                     
   19481/   67CD2 :                     ; ---------------------------------------------------------------------------
   19482/   67CD2 :                     ; ===========================================================================
   19483/   67CD2 :                     ; ---------------------------------------------------------------------------
   19484/   67CD2 :                     ; Animation, PLC, mapping & Main index block - Tails
   19485/   67CD2 :                     ; ---------------------------------------------------------------------------
   19486/   67CD2 :                     ANI_Tails:
   19487/   67CD2 :                     	include	"PLCMAPANI/ANI_Tails.asm"
(1)    1/   67CD2 :                     ; ===========================================================================
(1)    2/   67CD2 :                     ; ---------------------------------------------------------------------------
(1)    3/   67CD2 :                     ; Animation scripts - Tails
(1)    4/   67CD2 :                     ; ---------------------------------------------------------------------------
(1)    5/   67CD2 :                     ;
(1)    6/   67CD2 :                     ; Each animation script starts with 3 bytes of data
(1)    7/   67CD2 :                     ;
(1)    8/   67CD2 :                     ;		dc.b $XX,$YY,$ZZ
(1)    9/   67CD2 :                     ;
(1)   10/   67CD2 :                     ;	$XX   = Speed to run animation at (00 Slow/3F Fast)
(1)   11/   67CD2 :                     ;		(Note: if it is 40, then it's a special animation speed that
(1)   12/   67CD2 :                     ;		is controled by routines somewhere)
(1)   13/   67CD2 :                     ;	$YY   = Number of frames within script
(1)   14/   67CD2 :                     ;	$ZZ   = (unknown)
(1)   15/   67CD2 :                     ;
(1)   16/   67CD2 :                     ; Then each byte in the line under, is each frame to use in that specific script
(1)   17/   67CD2 :                     ; (Basically the same as S1 and S2)
(1)   18/   67CD2 :                     ;
(1)   19/   67CD2 :                     ; ---------------------------------------------------------------------------
(1)   20/   67CD2 :                     ; ===========================================================================
(1)   21/   67CD2 :                     ; ---------------------------------------------------------------------------
(1)   22/   67CD2 : 0034                		dc.w AniTal_Normal-ANI_Tails		; Stand, Look up, Look down
(1)   23/   67CD4 : 003A                		dc.w AniTal_Walk000-ANI_Tails		; Walking (000* 180*)
(1)   24/   67CD6 : 0046                		dc.w AniTal_Walk045-ANI_Tails		; Walking (045* 225*)
(1)   25/   67CD8 : 0052                		dc.w AniTal_Walk090-ANI_Tails		; Walking (090* 270*)
(1)   26/   67CDA : 005E                		dc.w AniTal_Walk135-ANI_Tails		; Walking (135* 315*)
(1)   27/   67CDC : 006A                		dc.w AniTal_Run000-ANI_Tails		; Running (000* 180*)
(1)   28/   67CDE : 0070                		dc.w AniTal_Run045-ANI_Tails		; Running (045* 225*)
(1)   29/   67CE0 : 0076                		dc.w AniTal_Run090-ANI_Tails		; Running (090* 270*)
(1)   30/   67CE2 : 007C                		dc.w AniTal_Run135-ANI_Tails		; Running (135* 315*)
(1)   31/   67CE4 : 0082                		dc.w AniTal_Roll-ANI_Tails		; Rolling (Somersault)
(1)   32/   67CE6 : 009E                		dc.w AniTal_Wait-ANI_Tails		; Waiting
(1)   33/   67CE8 : 00C8                		dc.w AniTal_Balnce1-ANI_Tails		; Balancing (Facing inwards)
(1)   34/   67CEA : 00D0                		dc.w AniTal_Balnce2-ANI_Tails		; Balancing (Facing outwards)
(1)   35/   67CEC : 00D8                		dc.w AniTal_Skid-ANI_Tails		; Skiddings
(1)   36/   67CEE : 0034                		dc.w AniTal_Normal-ANI_Tails		; Stand, Look up, Look down
(1)   37/   67CF0 : 003A                		dc.w AniTal_Walk000-ANI_Tails		; Walking (000* 180*)
(1)   38/   67CF2 : 0046                		dc.w AniTal_Walk045-ANI_Tails		; Walking (045* 225*)
(1)   39/   67CF4 : 0052                		dc.w AniTal_Walk090-ANI_Tails		; Walking (090* 270*)
(1)   40/   67CF6 : 005E                		dc.w AniTal_Walk135-ANI_Tails		; Walking (135* 315*)
(1)   41/   67CF8 : 006A                		dc.w AniTal_Run000-ANI_Tails		; Running (000* 180*)
(1)   42/   67CFA : 0070                		dc.w AniTal_Run045-ANI_Tails		; Running (045* 225*)
(1)   43/   67CFC : 0076                		dc.w AniTal_Run090-ANI_Tails		; Running (090* 270*)
(1)   44/   67CFE : 007C                		dc.w AniTal_Run135-ANI_Tails		; Running (135* 315*)
(1)   45/   67D00 : 00E0                		dc.w AniTal_Spindsh-ANI_Tails		; Spindashing
(1)   46/   67D02 : 00F0                		dc.w AniTal_Hurt-ANI_Tails		; Hurt
(1)   47/   67D04 : 00F4                		dc.w AniTal_Dizzy-ANI_Tails		; fast spinning where Tails looks dizzy (Unused)
(1)   48/   67D06 :                     ; ---------------------------------------------------------------------------
(1)   49/   67D06 : 0102 00             AniTal_Normal:	dc.b $01,$02,$00
(1)   50/   67D09 : 0001 02             		dc.b $00,$01,$02
(1)   51/   67D0C : 0007 00             AniTal_Walk000:	dc.b $00,$07,$00
(1)   52/   67D0F : 0B0C 0D0E 0F10      		dc.b $0B,$0C,$0D,$0E,$0F,$10,$09,$0A,$00
            67D15 : 090A 00          
(1)   53/   67D18 : 0007 00             AniTal_Walk045:	dc.b $00,$07,$00
(1)   54/   67D1B : 1314 1516 1718      		dc.b $13,$14,$15,$16,$17,$18,$11,$12,$00
            67D21 : 1112 00          
(1)   55/   67D24 : 0007 00             AniTal_Walk090:	dc.b $00,$07,$00
(1)   56/   67D27 : 1B1C 1D1E 1F20      		dc.b $1B,$1C,$1D,$1E,$1F,$20,$19,$1A,$00
            67D2D : 191A 00          
(1)   57/   67D30 : 0007 00             AniTal_Walk135:	dc.b $00,$07,$00
(1)   58/   67D33 : 2324 2526 2728      		dc.b $23,$24,$25,$26,$27,$28,$21,$22,$00
            67D39 : 2122 00          
(1)   59/   67D3C : 4001 00             AniTal_Run000:	dc.b $40,$01,$00
(1)   60/   67D3F : 292A 00             		dc.b $29,$2A,$00
(1)   61/   67D42 : 4001 00             AniTal_Run045:	dc.b $40,$01,$00
(1)   62/   67D45 : 2B2C 00             		dc.b $2B,$2C,$00
(1)   63/   67D48 : 4001 00             AniTal_Run090:	dc.b $40,$01,$00
(1)   64/   67D4B : 2D2E 00             		dc.b $2D,$2E,$00
(1)   65/   67D4E : 4001 00             AniTal_Run135:	dc.b $40,$01,$00
(1)   66/   67D51 : 2F30 00             		dc.b $2F,$30,$00
(1)   67/   67D54 : 8017 00             AniTal_Roll:	dc.b $80,$17,$00
(1)   68/   67D57 : 3332 3133 3231      		dc.b $33,$32,$31,$33,$32,$31,$33,$32,$31,$33,$32,$31,$33,$32,$31,$33,$32,$31,$33,$32,$31,$33,$32,$31,$00
            67D5D : 3332 3133 3231 
            67D63 : 3332 3133 3231 
            67D69 : 3332 3133 3231 00 
(1)   69/   67D70 : 2025 14             AniTal_Wait:	dc.b $20,$25,$14
(1)   70/   67D73 : 0403 0000 0000      		dc.b $04,$03,$00,$00,$00,$00,$00,$00,$00,$00,$04,$03,$00,$00,$00,$00,$00,$00,$00,$00,$05,$05,$05,$05,$05,$05
            67D79 : 0000 0000 0403 
            67D7F : 0000 0000 0000 
            67D85 : 0000 0505 0505 
            67D8B : 0505             
(1)   71/   67D8D : 0607 0807 0807      		dc.b $06,$07,$08,$07,$08,$07,$08,$07,$08,$07,$08,$06,$00
            67D93 : 0807 0807 0806 00 
(1)   72/   67D9A : 2003 00             AniTal_Balnce1:	dc.b $20,$03,$00
(1)   73/   67D9D : 4142 4342 00        		dc.b $41,$42,$43,$42,$00
(1)   74/   67DA2 : 2003 00             AniTal_Balnce2:	dc.b $20,$03,$00
(1)   75/   67DA5 : 4445 4645 00        		dc.b $44,$45,$46,$45,$00
(1)   76/   67DAA : 2003 00             AniTal_Skid:	dc.b $20,$03,$00
(1)   77/   67DAD : 3C3D 3E3E 00        		dc.b $3C,$3D,$3E,$3E,$00
(1)   78/   67DB2 : 000B 00             AniTal_Spindsh:	dc.b $00,$0B,$00
(1)   79/   67DB5 : 3435 3634 3536      		dc.b $34,$35,$36,$34,$35,$36,$34,$35,$36,$34,$35,$36,$00
            67DBB : 3435 3634 3536 00 
(1)   80/   67DC2 : 0000 00             AniTal_Hurt:	dc.b $00,$00,$00
(1)   81/   67DC5 : 37                  		dc.b $37
(1)   82/   67DC6 : 1007 00             AniTal_Dizzy:	dc.b $10,$07,$00
(1)   83/   67DC9 : 4C4D 4E4F 5051      		dc.b $4C,$4D,$4E,$4F,$50,$51,$52,$53,$00
            67DCF : 5253 00          
(1)   84/   67DD2 : (MACRO)              		even
(1)   84/   67DD2 : =>TRUE                       if notZ80(MOMCPU)
(1)   84/   67DD2 : =>FALSE                              if (*)&1
(1)   84/   67DD2 :                                             dc.b 0                          ;ds.b 1
(1)   84/   67DD2 : [84]                                 endif
(1)   84/   67DD2 : =>FALSE                      else
(1)   84/   67DD2 :                                     if ($)&1
(1)   84/   67DD2 :                                             db 0
(1)   84/   67DD2 : [84]                                 endif
(1)   84/   67DD2 : [84]                         endif
(1)   85/   67DD2 :                     ; ---------------------------------------------------------------------------
(1)   86/   67DD2 :                     ; ===========================================================================
(1)   87/   67DD2 :                     
   19488/   67DD2 :                     ; ---------------------------------------------------------------------------
   19489/   67DD2 :                     PLCMAP_Tails_MainIndex:
   19490/   67DD2 :                     	include	"PLCMAPANI/PLCMAP_IndxBlck_Tails.asm"
(1)    1/   67DD2 :                     ; ===========================================================================
(1)    2/   67DD2 :                     ; ---------------------------------------------------------------------------
(1)    3/   67DD2 :                     ; PLC/Sprite map index block - Tails
(1)    4/   67DD2 :                     ; ---------------------------------------------------------------------------
(1)    5/   67DD2 :                     ; An example of the setup:
(1)    6/   67DD2 :                     ;
(1)    7/   67DD2 :                     ;		dc.w Location-MAP_Tails,			Location-PLC_Tails
(1)    8/   67DD2 :                     ;		dc.w Location-MAP_Tails,			Location-PLC_Tails
(1)    9/   67DD2 :                     ;		dc.w Location-MAP_Tails,			Location-PLC_Tails
(1)   10/   67DD2 :                     ; etc, etc.
(1)   11/   67DD2 :                     ; ---------------------------------------------------------------------------
(1)   12/   67DD2 :                     ; ===========================================================================
(1)   13/   67DD2 : 0000 0000           		dc.w MAPTal_Stand-MAP_Tails,			PLCTal_Stand-PLC_Tails
(1)   14/   67DD6 : 0006 000A           		dc.w MAPTal_LookUp-MAP_Tails,			PLCTal_LookUp-PLC_Tails
(1)   15/   67DDA : 000C 0014           		dc.w MAPTal_LookDown-MAP_Tails,			PLCTal_LookDown-PLC_Tails
(1)   16/   67DDE : 0012 001E           		dc.w MAPTal_WaitBlink2-MAP_Tails,		PLCTal_WaitBlink2-PLC_Tails
(1)   17/   67DE2 : 0018 0028           		dc.w MAPTal_WaitBlink1-MAP_Tails,		PLCTal_WaitBlink1-PLC_Tails
(1)   18/   67DE6 : 001E 0032           		dc.w MAPTal_WaitStare-MAP_Tails,		PLCTal_WaitStare-PLC_Tails
(1)   19/   67DEA : 0024 003C           		dc.w MAPTal_WaitYawn1-MAP_Tails,		PLCTal_WaitYawn1-PLC_Tails
(1)   20/   67DEE : 002A 0046           		dc.w MAPTal_WaitYawn2-MAP_Tails,		PLCTal_WaitYawn2-PLC_Tails
(1)   21/   67DF2 : 0030 0050           		dc.w MAPTal_WaitYawn3-MAP_Tails,		PLCTal_WaitYawn3-PLC_Tails
(1)   22/   67DF6 : 0036 005A           		dc.w MAPTal_Walk7_000-MAP_Tails,		PLCTal_Walk7_000-PLC_Tails
(1)   23/   67DFA : 0048 006E           		dc.w MAPTal_Walk8_000-MAP_Tails,		PLCTal_Walk8_000-PLC_Tails
(1)   24/   67DFE : 005A 0082           		dc.w MAPTal_Walk1_000-MAP_Tails,		PLCTal_Walk1_000-PLC_Tails
(1)   25/   67E02 : 006C 0096           		dc.w MAPTal_Walk2_000-MAP_Tails,		PLCTal_Walk2_000-PLC_Tails
(1)   26/   67E06 : 007E 00AA           		dc.w MAPTal_Walk3_000-MAP_Tails,		PLCTal_Walk3_000-PLC_Tails
(1)   27/   67E0A : 0090 00BE           		dc.w MAPTal_Walk4_000-MAP_Tails,		PLCTal_Walk4_000-PLC_Tails
(1)   28/   67E0E : 00A2 00D2           		dc.w MAPTal_Walk5_000-MAP_Tails,		PLCTal_Walk5_000-PLC_Tails
(1)   29/   67E12 : 00B4 00E6           		dc.w MAPTal_Walk6_000-MAP_Tails,		PLCTal_Walk6_000-PLC_Tails
(1)   30/   67E16 : 00C0 00FA           		dc.w MAPTal_Walk7_045-MAP_Tails,		PLCTal_Walk7_045-PLC_Tails
(1)   31/   67E1A : 00CC 0104           		dc.w MAPTal_Walk8_045-MAP_Tails,		PLCTal_Walk8_045-PLC_Tails
(1)   32/   67E1E : 00DE 010E           		dc.w MAPTal_Walk1_045-MAP_Tails,		PLCTal_Walk1_045-PLC_Tails
(1)   33/   67E22 : 00EA 0118           		dc.w MAPTal_Walk2_045-MAP_Tails,		PLCTal_Walk2_045-PLC_Tails
(1)   34/   67E26 : 00FC 0122           		dc.w MAPTal_Walk3_045-MAP_Tails,		PLCTal_Walk3_045-PLC_Tails
(1)   35/   67E2A : 0108 012C           		dc.w MAPTal_Walk4_045-MAP_Tails,		PLCTal_Walk4_045-PLC_Tails
(1)   36/   67E2E : 011A 0136           		dc.w MAPTal_Walk5_045-MAP_Tails,		PLCTal_Walk5_045-PLC_Tails
(1)   37/   67E32 : 012C 0140           		dc.w MAPTal_Walk6_045-MAP_Tails,		PLCTal_Walk6_045-PLC_Tails
(1)   38/   67E36 : 013E 014A           		dc.w MAPTal_Walk7_090-MAP_Tails,		PLCTal_Walk7_090-PLC_Tails
(1)   39/   67E3A : 0150 015E           		dc.w MAPTal_Walk8_090-MAP_Tails,		PLCTal_Walk8_090-PLC_Tails
(1)   40/   67E3E : 0162 0172           		dc.w MAPTal_Walk1_090-MAP_Tails,		PLCTal_Walk1_090-PLC_Tails
(1)   41/   67E42 : 0174 0186           		dc.w MAPTal_Walk2_090-MAP_Tails,		PLCTal_Walk2_090-PLC_Tails
(1)   42/   67E46 : 0186 019A           		dc.w MAPTal_Walk3_090-MAP_Tails,		PLCTal_Walk3_090-PLC_Tails
(1)   43/   67E4A : 0198 01AE           		dc.w MAPTal_Walk4_090-MAP_Tails,		PLCTal_Walk4_090-PLC_Tails
(1)   44/   67E4E : 01AA 01C2           		dc.w MAPTal_Walk5_090-MAP_Tails,		PLCTal_Walk5_090-PLC_Tails
(1)   45/   67E52 : 01BC 01D6           		dc.w MAPTal_Walk6_090-MAP_Tails,		PLCTal_Walk6_090-PLC_Tails
(1)   46/   67E56 : 01C8 01EA           		dc.w MAPTal_Walk7_135-MAP_Tails,		PLCTal_Walk7_135-PLC_Tails
(1)   47/   67E5A : 01DA 01F4           		dc.w MAPTal_Walk8_135-MAP_Tails,		PLCTal_Walk8_135-PLC_Tails
(1)   48/   67E5E : 01EC 01FE           		dc.w MAPTal_Walk1_135-MAP_Tails,		PLCTal_Walk1_135-PLC_Tails
(1)   49/   67E62 : 01F8 0208           		dc.w MAPTal_Walk2_135-MAP_Tails,		PLCTal_Walk2_135-PLC_Tails
(1)   50/   67E66 : 020A 0212           		dc.w MAPTal_Walk3_135-MAP_Tails,		PLCTal_Walk3_135-PLC_Tails
(1)   51/   67E6A : 0216 021C           		dc.w MAPTal_Walk4_135-MAP_Tails,		PLCTal_Walk4_135-PLC_Tails
(1)   52/   67E6E : 0228 0226           		dc.w MAPTal_Walk5_135-MAP_Tails,		PLCTal_Walk5_135-PLC_Tails
(1)   53/   67E72 : 0234 0230           		dc.w MAPTal_Walk6_135-MAP_Tails,		PLCTal_Walk6_135-PLC_Tails
(1)   54/   67E76 : 0246 023A           		dc.w MAPTal_Run1_000-MAP_Tails,			PLCTal_Run1_000-PLC_Tails
(1)   55/   67E7A : 0252 0244           		dc.w MAPTal_Run2_000-MAP_Tails,			PLCTal_Run2_000-PLC_Tails
(1)   56/   67E7E : 025E 024E           		dc.w MAPTal_Run1_045-MAP_Tails,			PLCTal_Run1_045-PLC_Tails
(1)   57/   67E82 : 026A 0258           		dc.w MAPTal_Run2_045-MAP_Tails,			PLCTal_Run2_045-PLC_Tails
(1)   58/   67E86 : 0276 0262           		dc.w MAPTal_Run1_090-MAP_Tails,			PLCTal_Run1_090-PLC_Tails
(1)   59/   67E8A : 0282 026C           		dc.w MAPTal_Run2_090-MAP_Tails,			PLCTal_Run2_090-PLC_Tails
(1)   60/   67E8E : 028E 0276           		dc.w MAPTal_Run1_135-MAP_Tails,			PLCTal_Run1_135-PLC_Tails
(1)   61/   67E92 : 029A 0280           		dc.w MAPTal_Run2_135-MAP_Tails,			PLCTal_Run2_135-PLC_Tails
(1)   62/   67E96 : 02A6 028A           		dc.w MAPTal_Roll1-MAP_Tails,			PLCTal_Roll1-PLC_Tails
(1)   63/   67E9A : 02AC 0294           		dc.w MAPTal_Roll2-MAP_Tails,			PLCTal_Roll2-PLC_Tails
(1)   64/   67E9E : 02B2 029E           		dc.w MAPTal_Roll3-MAP_Tails,			PLCTal_Roll3-PLC_Tails
(1)   65/   67EA2 : 02B8 02A8           		dc.w MAPTal_Spindsh1-MAP_Tails,			PLCTal_Spindsh1-PLC_Tails
(1)   66/   67EA6 : 02BE 02B2           		dc.w MAPTal_Spindsh2-MAP_Tails,			PLCTal_Spindsh2-PLC_Tails
(1)   67/   67EAA : 02C4 02BC           		dc.w MAPTal_Spindsh3-MAP_Tails,			PLCTal_Spindsh3-PLC_Tails
(1)   68/   67EAE : 02CA 02C6           		dc.w MAPTal_Hurt-MAP_Tails,			PLCTal_Hurt-PLC_Tails
(1)   69/   67EB2 : 02D0 02D0           		dc.w MAPTal_Fly-MAP_Tails,			PLCTal_Fly-PLC_Tails
(1)   70/   67EB6 : 02D6 02DA           		dc.w MAPTal_FlyTired1-MAP_Tails,		PLCTal_FlyTired1-PLC_Tails
(1)   71/   67EBA : 02DC 02E4           		dc.w MAPTal_FlyTired2-MAP_Tails,		PLCTal_FlyTired2-PLC_Tails
(1)   72/   67EBE : 02E2 02EE           		dc.w MAPTal_FlyHeliTails-MAP_Tails,		PLCTal_FlyHeliTails-PLC_Tails
(1)   73/   67EC2 : 02E8 02F8           		dc.w MAPTal_Skid1-MAP_Tails,			PLCTal_Skid1-PLC_Tails
(1)   74/   67EC6 : 02F4 0302           		dc.w MAPTal_Skid2-MAP_Tails,			PLCTal_Skid2-PLC_Tails
(1)   75/   67ECA : 0300 030C           		dc.w MAPTal_Skid3-MAP_Tails,			PLCTal_Skid3-PLC_Tails
(1)   76/   67ECE : 0306 0316           		dc.w MAPTal_UnkSkid1-MAP_Tails,			PLCTal_UnkSkid1-PLC_Tails
(1)   77/   67ED2 : 0312 0320           		dc.w MAPTal_UnkSkid2-MAP_Tails,			PLCTal_UnkSkid2-PLC_Tails
(1)   78/   67ED6 : 031E 032A           		dc.w MAPTal_BlncOut1-MAP_Tails,			PLCTal_BlncOut1-PLC_Tails
(1)   79/   67EDA : 0324 0334           		dc.w MAPTal_BlncOut2-MAP_Tails,			PLCTal_BlncOut2-PLC_Tails
(1)   80/   67EDE : 0330 033E           		dc.w MAPTal_BlncOut3-MAP_Tails,			PLCTal_BlncOut3-PLC_Tails
(1)   81/   67EE2 : 0336 0348           		dc.w MAPTal_BlncIn1-MAP_Tails,			PLCTal_BlncIn1-PLC_Tails
(1)   82/   67EE6 : 0342 0352           		dc.w MAPTal_BlncIn2-MAP_Tails,			PLCTal_BlncIn2-PLC_Tails
(1)   83/   67EEA : 034E 035C           		dc.w MAPTal_BlncIn3-MAP_Tails,			PLCTal_BlncIn3-PLC_Tails
(1)   84/   67EEE : 035A 0366           		dc.w MAPTal_Throw1-MAP_Tails,			PLCTal_Throw1-PLC_Tails
(1)   85/   67EF2 : 0366 0370           		dc.w MAPTal_Throw2-MAP_Tails,			PLCTal_Throw2-PLC_Tails
(1)   86/   67EF6 : 0372 037A           		dc.w MAPTal_Throw3-MAP_Tails,			PLCTal_Throw3-PLC_Tails
(1)   87/   67EFA : 037E 0384           		dc.w MAPTal_Throw4-MAP_Tails,			PLCTal_Throw4-PLC_Tails
(1)   88/   67EFE : 0384 038E           		dc.w MAPTal_Hang2-MAP_Tails,			PLCTal_Hang2-PLC_Tails
(1)   89/   67F02 : 0390 0398           		dc.w MAPTal_Dizzy1-MAP_Tails,			PLCTal_Dizzy1-PLC_Tails
(1)   90/   67F06 : 0396 03A2           		dc.w MAPTal_Dizzy2-MAP_Tails,			PLCTal_Dizzy2-PLC_Tails
(1)   91/   67F0A : 03A2 03AC           		dc.w MAPTal_Dizzy3-MAP_Tails,			PLCTal_Dizzy3-PLC_Tails
(1)   92/   67F0E : 03AE 03B6           		dc.w MAPTal_Dizzy4-MAP_Tails,			PLCTal_Dizzy4-PLC_Tails
(1)   93/   67F12 : 03B4 03C0           		dc.w MAPTal_Dizzy5-MAP_Tails,			PLCTal_Dizzy5-PLC_Tails
(1)   94/   67F16 : 03BA 03CA           		dc.w MAPTal_Dizzy6-MAP_Tails,			PLCTal_Dizzy6-PLC_Tails
(1)   95/   67F1A : 03C6 03D4           		dc.w MAPTal_Dizzy7-MAP_Tails,			PLCTal_Dizzy7-PLC_Tails
(1)   96/   67F1E : 03D2 03DE           		dc.w MAPTal_Dizzy8-MAP_Tails,			PLCTal_Dizzy8-PLC_Tails
(1)   97/   67F22 : 03D8 03E8           		dc.w MAPTal_TalJmp01_000-MAP_Tails,		PLCTal_TalJmp01_000-PLC_Tails
(1)   98/   67F26 : 03DE 03F2           		dc.w MAPTal_TalJmp02_000-MAP_Tails,		PLCTal_TalJmp02_000-PLC_Tails
(1)   99/   67F2A : 03E4 03FC           		dc.w MAPTal_TalJmp03_000-MAP_Tails,		PLCTal_TalJmp03_000-PLC_Tails
(1)  100/   67F2E : 03EA 0406           		dc.w MAPTal_TalJmp04_000-MAP_Tails,		PLCTal_TalJmp04_000-PLC_Tails
(1)  101/   67F32 : 03F0 0410           		dc.w MAPTal_TalJmp01_045-MAP_Tails,		PLCTal_TalJmp01_045-PLC_Tails
(1)  102/   67F36 : 03F6 041A           		dc.w MAPTal_TalJmp02_045-MAP_Tails,		PLCTal_TalJmp02_045-PLC_Tails
(1)  103/   67F3A : 03FC 0424           		dc.w MAPTal_TalJmp03_045-MAP_Tails,		PLCTal_TalJmp03_045-PLC_Tails
(1)  104/   67F3E : 0402 042E           		dc.w MAPTal_TalJmp04_045-MAP_Tails,		PLCTal_TalJmp04_045-PLC_Tails
(1)  105/   67F42 : 0408 0438           		dc.w MAPTal_TalJmp01_090-MAP_Tails,		PLCTal_TalJmp01_090-PLC_Tails
(1)  106/   67F46 : 040E 0442           		dc.w MAPTal_TalJmp02_090-MAP_Tails,		PLCTal_TalJmp02_090-PLC_Tails
(1)  107/   67F4A : 0414 044C           		dc.w MAPTal_TalJmp03_090-MAP_Tails,		PLCTal_TalJmp03_090-PLC_Tails
(1)  108/   67F4E : 041A 0456           		dc.w MAPTal_TalJmp04_090-MAP_Tails,		PLCTal_TalJmp04_090-PLC_Tails
(1)  109/   67F52 : 0420 0460           		dc.w MAPTal_TalJmp01_135-MAP_Tails,		PLCTal_TalJmp01_135-PLC_Tails
(1)  110/   67F56 : 0426 046A           		dc.w MAPTal_TalJmp02_135-MAP_Tails,		PLCTal_TalJmp02_135-PLC_Tails
(1)  111/   67F5A : 042C 0474           		dc.w MAPTal_TalJmp03_135-MAP_Tails,		PLCTal_TalJmp03_135-PLC_Tails
(1)  112/   67F5E : 0432 047E           		dc.w MAPTal_TalJmp04_135-MAP_Tails,		PLCTal_TalJmp04_135-PLC_Tails
(1)  113/   67F62 : 0438 0488           		dc.w MAPTal_RunNorm01_000-MAP_Tails,		PLCTal_RunNorm01_000-PLC_Tails
(1)  114/   67F66 : 043E 0492           		dc.w MAPTal_RunNorm02_000-MAP_Tails,		PLCTal_RunNorm02_000-PLC_Tails
(1)  115/   67F6A : 0444 049C           		dc.w MAPTal_RunFast01_000-MAP_Tails,		PLCTal_RunFast01_000-PLC_Tails
(1)  116/   67F6E : 044A 04A6           		dc.w MAPTal_RunFast02_000-MAP_Tails,		PLCTal_RunFast02_000-PLC_Tails
(1)  117/   67F72 : 0450 04B0           		dc.w MAPTal_RunNorm01_045-MAP_Tails,		PLCTal_RunNorm01_045-PLC_Tails
(1)  118/   67F76 : 045C 04BA           		dc.w MAPTal_RunNorm02_045-MAP_Tails,		PLCTal_RunNorm02_045-PLC_Tails
(1)  119/   67F7A : 0462 04C4           		dc.w MAPTal_RunFast01_045-MAP_Tails,		PLCTal_RunFast01_045-PLC_Tails
(1)  120/   67F7E : 0468 04CE           		dc.w MAPTal_RunFast02_045-MAP_Tails,		PLCTal_RunFast02_045-PLC_Tails
(1)  121/   67F82 : 0474 04D8           		dc.w MAPTal_RunNorm01_090-MAP_Tails,		PLCTal_RunNorm01_090-PLC_Tails
(1)  122/   67F86 : 047A 04E2           		dc.w MAPTal_RunNorm02_090-MAP_Tails,		PLCTal_RunNorm02_090-PLC_Tails
(1)  123/   67F8A : 0480 04EC           		dc.w MAPTal_RunFast01_090-MAP_Tails,		PLCTal_RunFast01_090-PLC_Tails
(1)  124/   67F8E : 0486 04F6           		dc.w MAPTal_RunFast02_090-MAP_Tails,		PLCTal_RunFast02_090-PLC_Tails
(1)  125/   67F92 : 048C 0500           		dc.w MAPTal_RunNorm01_135-MAP_Tails,		PLCTal_RunNorm01_135-PLC_Tails
(1)  126/   67F96 : 0492 050A           		dc.w MAPTal_RunNorm02_135-MAP_Tails,		PLCTal_RunNorm02_135-PLC_Tails
(1)  127/   67F9A : 049E 0514           		dc.w MAPTal_RunFast01_135-MAP_Tails,		PLCTal_RunFast01_135-PLC_Tails
(1)  128/   67F9E : 04A4 051E           		dc.w MAPTal_RunFast02_135-MAP_Tails,		PLCTal_RunFast02_135-PLC_Tails
(1)  129/   67FA2 : 04AA 0528           		dc.w MAPTal_UnkTails1-MAP_Tails,		PLCTal_UnkTails1-PLC_Tails
(1)  130/   67FA6 : 04B6 0532           		dc.w MAPTal_UnkTails2-MAP_Tails,		PLCTal_UnkTails2-PLC_Tails
(1)  131/   67FAA : 04BC 053C           		dc.w MAPTal_Wait01-MAP_Tails,			PLCTal_Wait01-PLC_Tails
(1)  132/   67FAE : 04C2 0546           		dc.w MAPTal_Wait02-MAP_Tails,			PLCTal_Wait02-PLC_Tails
(1)  133/   67FB2 : 04C8 0550           		dc.w MAPTal_Wait03-MAP_Tails,			PLCTal_Wait03-PLC_Tails
(1)  134/   67FB6 : 04CE 055A           		dc.w MAPTal_Wait04-MAP_Tails,			PLCTal_Wait04-PLC_Tails
(1)  135/   67FBA : 04D4 0564           		dc.w MAPTal_Wait05-MAP_Tails,			PLCTal_Wait05-PLC_Tails
(1)  136/   67FBE :                     ; ---------------------------------------------------------------------------
(1)  137/   67FBE :                     ; ===========================================================================
(1)  138/   67FBE :                     
   19491/   67FBE :                     ; ---------------------------------------------------------------------------
   19492/   67FBE :                     PLC_Tails:
   19493/   67FBE :                     	include	"PLCMAPANI/PLC_Tails.asm"
(1)    1/   67FBE :                     ; ===========================================================================
(1)    2/   67FBE :                     ; ---------------------------------------------------------------------------
(1)    3/   67FBE :                     ; Pattern Load Cues - Tails
(1)    4/   67FBE :                     ; ---------------------------------------------------------------------------
(1)    5/   67FBE :                     ; Guide as documented by Hivebrain
(1)    6/   67FBE :                     ;
(1)    7/   67FBE :                     ;	Each load cue consists of ten bytes:
(1)    8/   67FBE :                     ;
(1)    9/   67FBE :                     ;		dc.w $QQQQ,$----,$RRR-,$DDDD,$EEEE
(1)   10/   67FBE :                     ;
(1)   11/   67FBE :                     ;	$QQQQ = Number of tiles to load from Rom
(1)   12/   67FBE :                     ;	$RRR- = Location to start reading the tiles
(1)   13/   67FBE :                     ; ---------------------------------------------------------------------------
(1)   14/   67FBE :                     ; the rest were not mentioned on the guide, and I am assuming are:
(1)   15/   67FBE :                     ; ---------------------------------------------------------------------------
(1)   16/   67FBE :                     ;	$---- = Unknown
(1)   17/   67FBE :                     ;	$DDDD = I think it's some sort of dumping location (to dump the art)
(1)   18/   67FBE :                     ;	$EEEE = whether it's the last PLC section to use or not (00 Include next PLC section/FF End of PLC section)
(1)   19/   67FBE :                     ; ---------------------------------------------------------------------------
(1)   20/   67FBE :                     ; ===========================================================================
(1)   21/   67FBE :                     ; ---------------------------------------------------------------------------
(1)   22/   67FBE : C000 9705 0000      PLCTal_Stand:		dc.w $C000,$9705,$0000,$D380,$FFFF
            67FC4 : D380 FFFF          
(1)   23/   67FC8 : C000 9705 00C0      PLCTal_LookUp:		dc.w $C000,$9705,$00C0,$D380,$FFFF
            67FCE : D380 FFFF          
(1)   24/   67FD2 : 9000 9705 0180      PLCTal_LookDown:	dc.w $9000,$9705,$0180,$D380,$FFFF
            67FD8 : D380 FFFF          
(1)   25/   67FDC : C000 9705 0210      PLCTal_WaitBlink2:	dc.w $C000,$9705,$0210,$D380,$FFFF ; Blink (eyes half closed)
            67FE2 : D380 FFFF          
(1)   26/   67FE6 : C000 9705 02D0      PLCTal_WaitBlink1:	dc.w $C000,$9705,$02D0,$D380,$FFFF ; Blink (eyes closed)
            67FEC : D380 FFFF          
(1)   27/   67FF0 : C000 9705 0390      PLCTal_WaitStare:	dc.w $C000,$9705,$0390,$D380,$FFFF ; Waiting (Looking at player)
            67FF6 : D380 FFFF          
(1)   28/   67FFA : C000 9705 0450      PLCTal_WaitYawn1:	dc.w $C000,$9705,$0450,$D380,$FFFF ; Yawn (eyes half closed)
            68000 : D380 FFFF          
(1)   29/   68004 : C000 9705 0510      PLCTal_WaitYawn2:	dc.w $C000,$9705,$0510,$D380,$FFFF ; Yawn (Hand wave away)
            6800A : D380 FFFF          
(1)   30/   6800E : C000 9705 05D0      PLCTal_WaitYawn3:	dc.w $C000,$9705,$05D0,$D380,$FFFF ; Yawn (Hand wave close)
            68014 : D380 FFFF          
(1)   31/   68018 :                     ; ---------------------------------------------------------------------------
(1)   32/   68018 :                     ; Walking (Angle: 000* 180* degrees)
(1)   33/   68018 : E000 9705 0690      PLCTal_Walk7_000:	dc.w $E000,$9705,$0690,$D380,$0000
            6801E : D380 0000          
(1)   34/   68022 : 6000 9705 4A20      			dc.w $6000,$9705,$4A20,$D580,$FFFF
            68028 : D580 FFFF          
(1)   35/   6802C : D000 9705 0770      PLCTal_Walk8_000:	dc.w $D000,$9705,$0770,$D380,$0000
            68032 : D380 0000          
(1)   36/   68036 : 6000 9705 4A80      			dc.w $6000,$9705,$4A80,$D580,$FFFF
            6803C : D580 FFFF          
(1)   37/   68040 : C000 9705 0840      PLCTal_Walk1_000:	dc.w $C000,$9705,$0840,$D380,$0000
            68046 : D380 0000          
(1)   38/   6804A : 6000 9705 4AE0      			dc.w $6000,$9705,$4AE0,$D580,$FFFF
            68050 : D580 FFFF          
(1)   39/   68054 : D000 9705 0900      PLCTal_Walk2_000:	dc.w $D000,$9705,$0900,$D380,$0000
            6805A : D380 0000          
(1)   40/   6805E : 6000 9705 4B40      			dc.w $6000,$9705,$4B40,$D580,$FFFF
            68064 : D580 FFFF          
(1)   41/   68068 : E000 9705 09D0      PLCTal_Walk3_000:	dc.w $E000,$9705,$09D0,$D380,$0000
            6806E : D380 0000          
(1)   42/   68072 : 6000 9705 4A20      			dc.w $6000,$9705,$4A20,$D580,$FFFF
            68078 : D580 FFFF          
(1)   43/   6807C : D000 9705 0AB0      PLCTal_Walk4_000:	dc.w $D000,$9705,$0AB0,$D380,$0000
            68082 : D380 0000          
(1)   44/   68086 : 6000 9705 4A80      			dc.w $6000,$9705,$4A80,$D580,$FFFF
            6808C : D580 FFFF          
(1)   45/   68090 : B000 9705 0B80      PLCTal_Walk5_000:	dc.w $B000,$9705,$0B80,$D380,$0000
            68096 : D380 0000          
(1)   46/   6809A : 6000 9705 4AE0      			dc.w $6000,$9705,$4AE0,$D580,$FFFF
            680A0 : D580 FFFF          
(1)   47/   680A4 : C000 9705 0C30      PLCTal_Walk6_000:	dc.w $C000,$9705,$0C30,$D380,$0000
            680AA : D380 0000          
(1)   48/   680AE : 6000 9705 4B40      			dc.w $6000,$9705,$4B40,$D580,$FFFF
            680B4 : D580 FFFF          
(1)   49/   680B8 :                     ; ---------------------------------------------------------------------------
(1)   50/   680B8 :                     ; Walking (Angle: 045* 225* degrees)
(1)   51/   680B8 : 2001 9705 0CF0      PLCTal_Walk7_045:	dc.w $2001,$9705,$0CF0,$D380,$FFFF
            680BE : D380 FFFF          
(1)   52/   680C2 : 4001 9705 0E10      PLCTal_Walk8_045:	dc.w $4001,$9705,$0E10,$D380,$FFFF
            680C8 : D380 FFFF          
(1)   53/   680CC : 5001 9705 0F50      PLCTal_Walk1_045:	dc.w $5001,$9705,$0F50,$D380,$FFFF
            680D2 : D380 FFFF          
(1)   54/   680D6 : 3001 9705 10A0      PLCTal_Walk2_045:	dc.w $3001,$9705,$10A0,$D380,$FFFF
            680DC : D380 FFFF          
(1)   55/   680E0 : 2001 9705 11D0      PLCTal_Walk3_045:	dc.w $2001,$9705,$11D0,$D380,$FFFF
            680E6 : D380 FFFF          
(1)   56/   680EA : 1001 9705 12F0      PLCTal_Walk4_045:	dc.w $1001,$9705,$12F0,$D380,$FFFF
            680F0 : D380 FFFF          
(1)   57/   680F4 : 3001 9705 1400      PLCTal_Walk5_045:	dc.w $3001,$9705,$1400,$D380,$FFFF
            680FA : D380 FFFF          
(1)   58/   680FE : 2001 9705 1530      PLCTal_Walk6_045:	dc.w $2001,$9705,$1530,$D380,$FFFF
            68104 : D380 FFFF          
(1)   59/   68108 :                     ; ---------------------------------------------------------------------------
(1)   60/   68108 :                     ; Walking (Angle: 090* 270* degrees)
(1)   61/   68108 : D000 9705 1650      PLCTal_Walk7_090:	dc.w $D000,$9705,$1650,$D380,$0000
            6810E : D380 0000          
(1)   62/   68112 : 6000 9705 4D20      			dc.w $6000,$9705,$4D20,$D580,$FFFF
            68118 : D580 FFFF          
(1)   63/   6811C : D000 9705 1720      PLCTal_Walk8_090:	dc.w $D000,$9705,$1720,$D380,$0000
            68122 : D380 0000          
(1)   64/   68126 : 6000 9705 4D80      			dc.w $6000,$9705,$4D80,$D580,$FFFF
            6812C : D580 FFFF          
(1)   65/   68130 : D000 9705 17F0      PLCTal_Walk1_090:	dc.w $D000,$9705,$17F0,$D380,$0000
            68136 : D380 0000          
(1)   66/   6813A : 6000 9705 4DE0      			dc.w $6000,$9705,$4DE0,$D580,$FFFF
            68140 : D580 FFFF          
(1)   67/   68144 : D000 9705 18C0      PLCTal_Walk2_090:	dc.w $D000,$9705,$18C0,$D380,$0000
            6814A : D380 0000          
(1)   68/   6814E : 6000 9705 4E40      			dc.w $6000,$9705,$4E40,$D580,$FFFF
            68154 : D580 FFFF          
(1)   69/   68158 : E000 9705 1990      PLCTal_Walk3_090:	dc.w $E000,$9705,$1990,$D380,$0000
            6815E : D380 0000          
(1)   70/   68162 : 6000 9705 4D20      			dc.w $6000,$9705,$4D20,$D580,$FFFF
            68168 : D580 FFFF          
(1)   71/   6816C : D000 9705 1A70      PLCTal_Walk4_090:	dc.w $D000,$9705,$1A70,$D380,$0000
            68172 : D380 0000          
(1)   72/   68176 : 6000 9705 4D80      			dc.w $6000,$9705,$4D80,$D580,$FFFF
            6817C : D580 FFFF          
(1)   73/   68180 : B000 9705 1B40      PLCTal_Walk5_090:	dc.w $B000,$9705,$1B40,$D380,$0000
            68186 : D380 0000          
(1)   74/   6818A : 6000 9705 4DE0      			dc.w $6000,$9705,$4DE0,$D580,$FFFF
            68190 : D580 FFFF          
(1)   75/   68194 : C000 9705 1BF0      PLCTal_Walk6_090:	dc.w $C000,$9705,$1BF0,$D380,$0000
            6819A : D380 0000          
(1)   76/   6819E : 6000 9705 4E40      			dc.w $6000,$9705,$4E40,$D580,$FFFF
            681A4 : D580 FFFF          
(1)   77/   681A8 :                     ; ---------------------------------------------------------------------------
(1)   78/   681A8 :                     ; Walking (Angle: 135* 315* degrees)
(1)   79/   681A8 : 1001 9705 1CB0      PLCTal_Walk7_135:	dc.w $1001,$9705,$1CB0,$D380,$FFFF
            681AE : D380 FFFF          
(1)   80/   681B2 : 3001 9705 1DC0      PLCTal_Walk8_135:	dc.w $3001,$9705,$1DC0,$D380,$FFFF
            681B8 : D380 FFFF          
(1)   81/   681BC : 4001 9705 1EF0      PLCTal_Walk1_135:	dc.w $4001,$9705,$1EF0,$D380,$FFFF
            681C2 : D380 FFFF          
(1)   82/   681C6 : 3001 9705 2030      PLCTal_Walk2_135:	dc.w $3001,$9705,$2030,$D380,$FFFF
            681CC : D380 FFFF          
(1)   83/   681D0 : 2001 9705 2160      PLCTal_Walk3_135:	dc.w $2001,$9705,$2160,$D380,$FFFF
            681D6 : D380 FFFF          
(1)   84/   681DA : 2001 9705 2280      PLCTal_Walk4_135:	dc.w $2001,$9705,$2280,$D380,$FFFF
            681E0 : D380 FFFF          
(1)   85/   681E4 : 6001 9705 23A0      PLCTal_Walk5_135:	dc.w $6001,$9705,$23A0,$D380,$FFFF
            681EA : D380 FFFF          
(1)   86/   681EE : 3001 9705 2500      PLCTal_Walk6_135:	dc.w $3001,$9705,$2500,$D380,$FFFF
            681F4 : D380 FFFF          
(1)   87/   681F8 :                     ; ---------------------------------------------------------------------------
(1)   88/   681F8 : C000 9705 2630      PLCTal_Run1_000:	dc.w $C000,$9705,$2630,$D380,$FFFF
            681FE : D380 FFFF          
(1)   89/   68202 : C000 9705 26F0      PLCTal_Run2_000:	dc.w $C000,$9705,$26F0,$D380,$FFFF
            68208 : D380 FFFF          
(1)   90/   6820C : D000 9705 27B0      PLCTal_Run1_045:	dc.w $D000,$9705,$27B0,$D380,$FFFF
            68212 : D380 FFFF          
(1)   91/   68216 : D000 9705 2880      PLCTal_Run2_045:	dc.w $D000,$9705,$2880,$D380,$FFFF
            6821C : D380 FFFF          
(1)   92/   68220 : E000 9705 2950      PLCTal_Run1_090:	dc.w $E000,$9705,$2950,$D380,$FFFF
            68226 : D380 FFFF          
(1)   93/   6822A : E000 9705 2A30      PLCTal_Run2_090:	dc.w $E000,$9705,$2A30,$D380,$FFFF
            68230 : D380 FFFF          
(1)   94/   68234 : D000 9705 2B10      PLCTal_Run1_135:	dc.w $D000,$9705,$2B10,$D380,$FFFF
            6823A : D380 FFFF          
(1)   95/   6823E : D000 9705 2BE0      PLCTal_Run2_135:	dc.w $D000,$9705,$2BE0,$D380,$FFFF
            68244 : D380 FFFF          
(1)   96/   68248 :                     ; ---------------------------------------------------------------------------
(1)   97/   68248 : 0001 9705 2CB0      PLCTal_Roll1:		dc.w $0001,$9705,$2CB0,$D380,$FFFF
            6824E : D380 FFFF          
(1)   98/   68252 : 0001 9705 2DB0      PLCTal_Roll2:		dc.w $0001,$9705,$2DB0,$D380,$FFFF
            68258 : D380 FFFF          
(1)   99/   6825C : 0001 9705 2EB0      PLCTal_Roll3:		dc.w $0001,$9705,$2EB0,$D380,$FFFF
            68262 : D380 FFFF          
(1)  100/   68266 : 0001 9705 2FB0      PLCTal_Spindsh1:	dc.w $0001,$9705,$2FB0,$D380,$FFFF
            6826C : D380 FFFF          
(1)  101/   68270 : C000 9705 30B0      PLCTal_Spindsh2:	dc.w $C000,$9705,$30B0,$D380,$FFFF
            68276 : D380 FFFF          
(1)  102/   6827A : 0001 9705 3170      PLCTal_Spindsh3:	dc.w $0001,$9705,$3170,$D380,$FFFF
            68280 : D380 FFFF          
(1)  103/   68284 :                     ; ---------------------------------------------------------------------------
(1)  104/   68284 : 0001 9705 3270      PLCTal_Hurt:		dc.w $0001,$9705,$3270,$D380,$FFFF
            6828A : D380 FFFF          
(1)  105/   6828E : 0001 9705 3370      PLCTal_Fly:		dc.w $0001,$9705,$3370,$D380,$FFFF ; Tails Flying (Unused)
            68294 : D380 FFFF          
(1)  106/   68298 : 0001 9705 3470      PLCTal_FlyTired1:	dc.w $0001,$9705,$3470,$D380,$FFFF ; Tails Flying When Tired 1 (Unused)
            6829E : D380 FFFF          
(1)  107/   682A2 : 0001 9705 3570      PLCTal_FlyTired2:	dc.w $0001,$9705,$3570,$D380,$FFFF ; Tails Flying When Tired 2 (Unused)
            682A8 : D380 FFFF          
(1)  108/   682AC : 4000 9705 3670      PLCTal_FlyHeliTails:	dc.w $4000,$9705,$3670,$D380,$FFFF ; Tails' "Tails" (Flying Helicopter Tails) (Unused)
            682B2 : D380 FFFF          
(1)  109/   682B6 : E000 9705 36B0      PLCTal_Skid1:		dc.w $E000,$9705,$36B0,$D380,$FFFF ; Skidding 1
            682BC : D380 FFFF          
(1)  110/   682C0 : E000 9705 3790      PLCTal_Skid2:		dc.w $E000,$9705,$3790,$D380,$FFFF ; Skidding 2
            682C6 : D380 FFFF          
(1)  111/   682CA : C000 9705 3870      PLCTal_Skid3:		dc.w $C000,$9705,$3870,$D380,$FFFF ; Skidding 3 (Turn Direction)
            682D0 : D380 FFFF          
(1)  112/   682D4 : C000 9705 3930      PLCTal_UnkSkid1:	dc.w $C000,$9705,$3930,$D380,$FFFF ; Unused Hulting 1
            682DA : D380 FFFF          
(1)  113/   682DE : E000 9705 39F0      PLCTal_UnkSkid2:	dc.w $E000,$9705,$39F0,$D380,$FFFF ; Unused Hulting 2
            682E4 : D380 FFFF          
(1)  114/   682E8 : 0001 9705 3AD0      PLCTal_BlncOut1:	dc.w $0001,$9705,$3AD0,$D380,$FFFF ; Balancing 1 (Facing outwards)
            682EE : D380 FFFF          
(1)  115/   682F2 : E000 9705 3BD0      PLCTal_BlncOut2:	dc.w $E000,$9705,$3BD0,$D380,$FFFF ; Balancing 2 (Facing outwards)
            682F8 : D380 FFFF          
(1)  116/   682FC : C000 9705 3CB0      PLCTal_BlncOut3:	dc.w $C000,$9705,$3CB0,$D380,$FFFF ; Balancing 3 (Facing outwards)
            68302 : D380 FFFF          
(1)  117/   68306 : A000 9705 3D70      PLCTal_BlncIn1:		dc.w $A000,$9705,$3D70,$D380,$FFFF ; Balancing 1 (Facing inwards)
            6830C : D380 FFFF          
(1)  118/   68310 : C000 9705 3E10      PLCTal_BlncIn2:		dc.w $C000,$9705,$3E10,$D380,$FFFF ; Balancing 2 (Facing inwards)
            68316 : D380 FFFF          
(1)  119/   6831A : E000 9705 3ED0      PLCTal_BlncIn3:		dc.w $E000,$9705,$3ED0,$D380,$FFFF ; Balancing 3 (Facing inwards)
            68320 : D380 FFFF          
(1)  120/   68324 :                     ; ---------------------------------------------------------------------------
(1)  121/   68324 : 1001 9705 3FB0      PLCTal_Throw1:		dc.w $1001,$9705,$3FB0,$D380,$FFFF ; Throwing 1 (Unused)
            6832A : D380 FFFF          
(1)  122/   6832E : D000 9705 40C0      PLCTal_Throw2:		dc.w $D000,$9705,$40C0,$D380,$FFFF ; Throwing 2 (Unused)
            68334 : D380 FFFF          
(1)  123/   68338 : D000 9705 4190      PLCTal_Throw3:		dc.w $D000,$9705,$4190,$D380,$FFFF ; Throwing 3 (Unused)
            6833E : D380 FFFF          
(1)  124/   68342 : C000 9705 4260      PLCTal_Throw4:		dc.w $C000,$9705,$4260,$D380,$FFFF ; Throwing 4/Hanging 1? (Unused)
            68348 : D380 FFFF          
(1)  125/   6834C : C000 9705 4320      PLCTal_Hang2:		dc.w $C000,$9705,$4320,$D380,$FFFF ; Hanging 2 (Unused)
            68352 : D380 FFFF          
(1)  126/   68356 : C000 9705 43E0      PLCTal_Dizzy1:		dc.w $C000,$9705,$43E0,$D380,$FFFF ; Spinning Dizzy 1
            6835C : D380 FFFF          
(1)  127/   68360 : C000 9705 44A0      PLCTal_Dizzy2:		dc.w $C000,$9705,$44A0,$D380,$FFFF ; Spinning Dizzy 2
            68366 : D380 FFFF          
(1)  128/   6836A : C000 9705 4560      PLCTal_Dizzy3:		dc.w $C000,$9705,$4560,$D380,$FFFF ; Spinning Dizzy 3
            68370 : D380 FFFF          
(1)  129/   68374 : C000 9705 4620      PLCTal_Dizzy4:		dc.w $C000,$9705,$4620,$D380,$FFFF ; Spinning Dizzy 4
            6837A : D380 FFFF          
(1)  130/   6837E : C000 9705 46E0      PLCTal_Dizzy5:		dc.w $C000,$9705,$46E0,$D380,$FFFF ; Spinning Dizzy 5
            68384 : D380 FFFF          
(1)  131/   68388 : E000 9705 47A0      PLCTal_Dizzy6:		dc.w $E000,$9705,$47A0,$D380,$FFFF ; Spinning Dizzy 6
            6838E : D380 FFFF          
(1)  132/   68392 : E000 9705 4880      PLCTal_Dizzy7:		dc.w $E000,$9705,$4880,$D380,$FFFF ; Spinning Dizzy 7
            68398 : D380 FFFF          
(1)  133/   6839C : C000 9705 4960      PLCTal_Dizzy8:		dc.w $C000,$9705,$4960,$D380,$FFFF ; Spinning Dizzy 8
            683A2 : D380 FFFF          
(1)  134/   683A6 :                     ; ---------------------------------------------------------------------------
(1)  135/   683A6 :                     ; ===========================================================================
(1)  136/   683A6 :                     ; ---------------------------------------------------------------------------
(1)  137/   683A6 :                     ; This next section is for Tails' tails
(1)  138/   683A6 :                     ; ---------------------------------------------------------------------------
(1)  139/   683A6 :                     ; Tails' Tails When Jumping (moving left or right) (Angle: 000* 180* degrees)
(1)  140/   683A6 : 6000 9705 4A20      PLCTal_TalJmp01_000:	dc.w $6000,$9705,$4A20,$D5C0,$FFFF
            683AC : D5C0 FFFF          
(1)  141/   683B0 : 6000 9705 4A80      PLCTal_TalJmp02_000:	dc.w $6000,$9705,$4A80,$D5C0,$FFFF
            683B6 : D5C0 FFFF          
(1)  142/   683BA : 6000 9705 4AE0      PLCTal_TalJmp03_000:	dc.w $6000,$9705,$4AE0,$D5C0,$FFFF
            683C0 : D5C0 FFFF          
(1)  143/   683C4 : 6000 9705 4B40      PLCTal_TalJmp04_000:	dc.w $6000,$9705,$4B40,$D5C0,$FFFF
            683CA : D5C0 FFFF          
(1)  144/   683CE :                     ; ---------------------------------------------------------------------------
(1)  145/   683CE :                     ; Tails' Tails When Jumping (moving left or right and up) (Angle: 045* 225* degrees)
(1)  146/   683CE : 6000 9705 4BA0      PLCTal_TalJmp01_045:	dc.w $6000,$9705,$4BA0,$D5C0,$FFFF
            683D4 : D5C0 FFFF          
(1)  147/   683D8 : 6000 9705 4C00      PLCTal_TalJmp02_045:	dc.w $6000,$9705,$4C00,$D5C0,$FFFF
            683DE : D5C0 FFFF          
(1)  148/   683E2 : 6000 9705 4C60      PLCTal_TalJmp03_045:	dc.w $6000,$9705,$4C60,$D5C0,$FFFF
            683E8 : D5C0 FFFF          
(1)  149/   683EC : 6000 9705 4CC0      PLCTal_TalJmp04_045:	dc.w $6000,$9705,$4CC0,$D5C0,$FFFF
            683F2 : D5C0 FFFF          
(1)  150/   683F6 :                     ; ---------------------------------------------------------------------------
(1)  151/   683F6 :                     ; Tails' Tails When Jumping (moving Up or down) (Angle: 090* 270* degrees)
(1)  152/   683F6 : 6000 9705 4D20      PLCTal_TalJmp01_090:	dc.w $6000,$9705,$4D20,$D5C0,$FFFF
            683FC : D5C0 FFFF          
(1)  153/   68400 : 6000 9705 4D80      PLCTal_TalJmp02_090:	dc.w $6000,$9705,$4D80,$D5C0,$FFFF
            68406 : D5C0 FFFF          
(1)  154/   6840A : 6000 9705 4DE0      PLCTal_TalJmp03_090:	dc.w $6000,$9705,$4DE0,$D5C0,$FFFF
            68410 : D5C0 FFFF          
(1)  155/   68414 : 6000 9705 4E40      PLCTal_TalJmp04_090:	dc.w $6000,$9705,$4E40,$D5C0,$FFFF
            6841A : D5C0 FFFF          
(1)  156/   6841E :                     ; ---------------------------------------------------------------------------
(1)  157/   6841E :                     ; Tails' Tails When Jumping (moving left or right and down) (Angle: 135* 315* degrees)
(1)  158/   6841E : 6000 9705 4EA0      PLCTal_TalJmp01_135:	dc.w $6000,$9705,$4EA0,$D5C0,$FFFF
            68424 : D5C0 FFFF          
(1)  159/   68428 : 6000 9705 4F00      PLCTal_TalJmp02_135:	dc.w $6000,$9705,$4F00,$D5C0,$FFFF
            6842E : D5C0 FFFF          
(1)  160/   68432 : 6000 9705 4F60      PLCTal_TalJmp03_135:	dc.w $6000,$9705,$4F60,$D5C0,$FFFF
            68438 : D5C0 FFFF          
(1)  161/   6843C : 6000 9705 4FC0      PLCTal_TalJmp04_135:	dc.w $6000,$9705,$4FC0,$D5C0,$FFFF
            68442 : D5C0 FFFF          
(1)  162/   68446 :                     ; ---------------------------------------------------------------------------
(1)  163/   68446 :                     ; Running Normal and Fast (Angle: 000* 180* degrees)
(1)  164/   68446 : 8000 9705 5020      PLCTal_RunNorm01_000:	dc.w $8000,$9705,$5020,$D580,$FFFF ; RUN normal 1 000 (Unused)
            6844C : D580 FFFF          
(1)  165/   68450 : 4000 9705 50A0      PLCTal_RunNorm02_000:	dc.w $4000,$9705,$50A0,$D580,$FFFF ; RUN normal 2 000 (Unused)
            68456 : D580 FFFF          
(1)  166/   6845A : 2000 9705 50E0      PLCTal_RunFast01_000:	dc.w $2000,$9705,$50E0,$D580,$FFFF ; RUN fast 1 000
            68460 : D580 FFFF          
(1)  167/   68464 : 8000 9705 5100      PLCTal_RunFast02_000:	dc.w $8000,$9705,$5100,$D580,$FFFF ; RUN fast 2 000
            6846A : D580 FFFF          
(1)  168/   6846E :                     ; ---------------------------------------------------------------------------
(1)  169/   6846E :                     ; Running Normal and Fast (Angle: 045* 225* degrees)
(1)  170/   6846E : 8000 9705 5180      PLCTal_RunNorm01_045:	dc.w $8000,$9705,$5180,$D580,$FFFF ; RUN normal 1 045 (Unused)
            68474 : D580 FFFF          
(1)  171/   68478 : 4000 9705 5200      PLCTal_RunNorm02_045:	dc.w $4000,$9705,$5200,$D580,$FFFF ; RUN normal 2 045 (Unused)
            6847E : D580 FFFF          
(1)  172/   68482 : 4000 9705 5240      PLCTal_RunFast01_045:	dc.w $4000,$9705,$5240,$D580,$FFFF ; RUN fast 1 045 (Unused)
            68488 : D580 FFFF          
(1)  173/   6848C : 8000 9705 5280      PLCTal_RunFast02_045:	dc.w $8000,$9705,$5280,$D580,$FFFF ; RUN fast 2 045 (Unused)
            68492 : D580 FFFF          
(1)  174/   68496 :                     ; ---------------------------------------------------------------------------
(1)  175/   68496 :                     ; Running Normal and Fast (Angle: 090* 270* degrees)
(1)  176/   68496 : 4000 9705 5300      PLCTal_RunNorm01_090:	dc.w $4000,$9705,$5300,$D580,$FFFF ; RUN normal 1 090 (Unused)
            6849C : D580 FFFF          
(1)  177/   684A0 : 8000 9705 5340      PLCTal_RunNorm02_090:	dc.w $8000,$9705,$5340,$D580,$FFFF ; RUN normal 2 090 (Unused)
            684A6 : D580 FFFF          
(1)  178/   684AA : 4000 9705 53C0      PLCTal_RunFast01_090:	dc.w $4000,$9705,$53C0,$D580,$FFFF ; RUN fast 1 090 (Unused)
            684B0 : D580 FFFF          
(1)  179/   684B4 : 2000 9705 5400      PLCTal_RunFast02_090:	dc.w $2000,$9705,$5400,$D580,$FFFF ; RUN fast 2 090 (Unused)
            684BA : D580 FFFF          
(1)  180/   684BE :                     ; ---------------------------------------------------------------------------
(1)  181/   684BE :                     ; Running Normal and Fast (Angle: 135* 315* degrees)
(1)  182/   684BE : 8000 9705 5420      PLCTal_RunNorm01_135:	dc.w $8000,$9705,$5420,$D580,$FFFF ; RUN normal 1 135 (Unused)
            684C4 : D580 FFFF          
(1)  183/   684C8 : 7000 9705 54A0      PLCTal_RunNorm02_135:	dc.w $7000,$9705,$54A0,$D580,$FFFF ; RUN normal 2 135 (Unused)
            684CE : D580 FFFF          
(1)  184/   684D2 : 4000 9705 5510      PLCTal_RunFast01_135:	dc.w $4000,$9705,$5510,$D580,$FFFF ; RUN fast 1 135 (Unused)
            684D8 : D580 FFFF          
(1)  185/   684DC : 4000 9705 5550      PLCTal_RunFast02_135:	dc.w $4000,$9705,$5550,$D580,$FFFF ; RUN fast 2 135 (Unused)
            684E2 : D580 FFFF          
(1)  186/   684E6 :                     ; ---------------------------------------------------------------------------
(1)  187/   684E6 : 8000 9705 5590      PLCTal_UnkTails1:	dc.w $8000,$9705,$5590,$D580,$FFFF ; Unknown frames (looks like the tails are flipping or snapping, or something on them lines)
            684EC : D580 FFFF          
(1)  188/   684F0 : 4000 9705 5610      PLCTal_UnkTails2:	dc.w $4000,$9705,$5610,$D580,$FFFF ; ''
            684F6 : D580 FFFF          
(1)  189/   684FA : 6000 9705 5650      PLCTal_Wait01:		dc.w $6000,$9705,$5650,$D580,$FFFF ; waiting, Looking up, looking down (Tails' Idle tails)
            68500 : D580 FFFF          
(1)  190/   68504 : 9000 9705 56B0      PLCTal_Wait02:		dc.w $9000,$9705,$56B0,$D580,$FFFF ; ''
            6850A : D580 FFFF          
(1)  191/   6850E : 9000 9705 5740      PLCTal_Wait03:		dc.w $9000,$9705,$5740,$D580,$FFFF ; ''
            68514 : D580 FFFF          
(1)  192/   68518 : 6000 9705 57D0      PLCTal_Wait04:		dc.w $6000,$9705,$57D0,$D580,$FFFF ; ''
            6851E : D580 FFFF          
(1)  193/   68522 : 9000 9705 5830      PLCTal_Wait05:		dc.w $9000,$9705,$5830,$D580,$FFFF ; ''
            68528 : D580 FFFF          
(1)  194/   6852C :                     ; ---------------------------------------------------------------------------
(1)  195/   6852C :                     ; ===========================================================================
(1)  196/   6852C :                     
   19494/   6852C :                     ; ---------------------------------------------------------------------------
   19495/   6852C :                     MAP_Tails:
   19496/   6852C :                     	include	"PLCMAPANI/MAP_Tails.asm"
(1)    1/   6852C :                     ; ===========================================================================
(1)    2/   6852C :                     ; ---------------------------------------------------------------------------
(1)    3/   6852C :                     ; Mappings - Tails (And his Tails)
(1)    4/   6852C :                     ; ---------------------------------------------------------------------------
(1)    5/   6852C :                     ; Guide as documented by Hivebrain
(1)    6/   6852C :                     ;
(1)    7/   6852C :                     ;	Each map block consists of six bytes:
(1)    8/   6852C :                     ;
(1)    9/   6852C :                     ;		dc.w $SS,$YY,$TT,$TT,$XX,$ZZ
(1)   10/   6852C :                     ;
(1)   11/   6852C :                     ;	$SS   = Shape and size of sprite piece
(1)   12/   6852C :                     ;	$YY   = Y position of sprite piece
(1)   13/   6852C :                     ;	$TTTT = Tile to read in VRAM
(1)   14/   6852C :                     ;	$XX   = X position of sprite piece
(1)   15/   6852C :                     ;	$ZZ   = whether it's the last map to use in the sprite or not (00 = Include next map in sprite/FF = End of sprite)
(1)   16/   6852C :                     ;
(1)   17/   6852C :                     ; ---------------------------------------------------------------------------
(1)   18/   6852C :                     ; ===========================================================================
(1)   19/   6852C :                     ; ---------------------------------------------------------------------------
(1)   20/   6852C : 0BEE 069C F4FF      MAPTal_Stand:		dc.b $0B,$EE,$06,$9C,$F4,$FF
(1)   21/   68532 : 0BEE 069C F4FF      MAPTal_LookUp:		dc.b $0B,$EE,$06,$9C,$F4,$FF
(1)   22/   68538 : 0AF6 069C FCFF      MAPTal_LookDown:	dc.b $0A,$F6,$06,$9C,$FC,$FF
(1)   23/   6853E : 0BEE 069C F4FF      MAPTal_WaitBlink2:	dc.b $0B,$EE,$06,$9C,$F4,$FF	; Blink (eyes half closed)
(1)   24/   68544 : 0BEE 069C F4FF      MAPTal_WaitBlink1:	dc.b $0B,$EE,$06,$9C,$F4,$FF	; Blink (eyes closed)
(1)   25/   6854A : 0BEE 069C F4FF      MAPTal_WaitStare:	dc.b $0B,$EE,$06,$9C,$F4,$FF	; Waiting (Looking at player)
(1)   26/   68550 : 0BEE 069C F4FF      MAPTal_WaitYawn1:	dc.b $0B,$EE,$06,$9C,$F4,$FF	; Yawn (eyes half closed)
(1)   27/   68556 : 0BEE 069C F4FF      MAPTal_WaitYawn2:	dc.b $0B,$EE,$06,$9C,$F4,$FF	; Yawn (Hand wave away)
(1)   28/   6855C : 0BEE 069C F4FF      MAPTal_WaitYawn3:	dc.b $0B,$EE,$06,$9C,$F4,$FF	; Yawn (Hand wave close)
(1)   29/   68562 :                     ; ---------------------------------------------------------------------------
(1)   30/   68562 :                     ; Walking (Angle: 000* 180* degrees)
(1)   31/   68562 : 09EE 069C F200      MAPTal_Walk7_000:	dc.b $09,$EE,$06,$9C,$F2,$00	; Walk 7
(1)   32/   68568 : 0DFE 06A2 F200      			dc.b $0D,$FE,$06,$A2,$F2,$00
(1)   33/   6856E : 09FE 06AC E4FF      			dc.b $09,$FE,$06,$AC,$E4,$FF
(1)   34/   68574 : 0AEE 069C F200      MAPTal_Walk8_000:	dc.b $0A,$EE,$06,$9C,$F2,$00	; Walk 8
(1)   35/   6857A : 0C06 06A5 F200      			dc.b $0C,$06,$06,$A5,$F2,$00
(1)   36/   68580 : 09FE 06AC E6FF      			dc.b $09,$FE,$06,$AC,$E6,$FF
(1)   37/   68586 : 0AEE 069C FA00      MAPTal_Walk1_000:	dc.b $0A,$EE,$06,$9C,$FA,$00	; Walk 1
(1)   38/   6858C : 0806 06A5 F800      			dc.b $08,$06,$06,$A5,$F8,$00
(1)   39/   68592 : 09FB 06AC E6FF      			dc.b $09,$FB,$06,$AC,$E6,$FF
(1)   40/   68598 : 0AEE 069C F200      MAPTal_Walk2_000:	dc.b $0A,$EE,$06,$9C,$F2,$00	; Walk 2
(1)   41/   6859E : 0C06 06A5 F200      			dc.b $0C,$06,$06,$A5,$F2,$00
(1)   42/   685A4 : 09FB 06AC E6FF      			dc.b $09,$FB,$06,$AC,$E6,$FF
(1)   43/   685AA : 09EE 069C F200      MAPTal_Walk3_000:	dc.b $09,$EE,$06,$9C,$F2,$00	; Walk 3
(1)   44/   685B0 : 0DFE 06A2 F200      			dc.b $0D,$FE,$06,$A2,$F2,$00
(1)   45/   685B6 : 09FE 06AC E4FF      			dc.b $09,$FE,$06,$AC,$E4,$FF
(1)   46/   685BC : 0AEE 069C F200      MAPTal_Walk4_000:	dc.b $0A,$EE,$06,$9C,$F2,$00	; Walk 4
(1)   47/   685C2 : 0C06 06A5 F200      			dc.b $0C,$06,$06,$A5,$F2,$00
(1)   48/   685C8 : 09FE 06AC E6FF      			dc.b $09,$FE,$06,$AC,$E6,$FF
(1)   49/   685CE : 0AEE 069C FA00      MAPTal_Walk5_000:	dc.b $0A,$EE,$06,$9C,$FA,$00	; Walk 5
(1)   50/   685D4 : 0406 06A5 FA00      			dc.b $04,$06,$06,$A5,$FA,$00
(1)   51/   685DA : 09FB 06AC E6FF      			dc.b $09,$FB,$06,$AC,$E6,$FF
(1)   52/   685E0 : 0BEE 069C F200      MAPTal_Walk6_000:	dc.b $0B,$EE,$06,$9C,$F2,$00	; Walk 6
(1)   53/   685E6 : 09FB 06AC E6FF      			dc.b $09,$FB,$06,$AC,$E6,$FF
(1)   54/   685EC :                     ; ---------------------------------------------------------------------------
(1)   55/   685EC :                     ; Walking (Angle: 045* 225* degrees)
(1)   56/   685EC : 0EEE 069C F200      MAPTal_Walk7_045:	dc.b $0E,$EE,$06,$9C,$F2,$00
(1)   57/   685F2 : 0906 06A8 F2FF      			dc.b $09,$06,$06,$A8,$F2,$FF
(1)   58/   685F8 : 0FEE 069C F200      MAPTal_Walk8_045:	dc.b $0F,$EE,$06,$9C,$F2,$00
(1)   59/   685FE : 080E 06AC F200      			dc.b $08,$0E,$06,$AC,$F2,$00
(1)   60/   68604 : 00FC 06AF 12FF      			dc.b $00,$FC,$06,$AF,$12,$FF
(1)   61/   6860A : 0AE7 069C EF00      MAPTal_Walk1_045:	dc.b $0A,$E7,$06,$9C,$EF,$00
(1)   62/   68610 : 0EFF 06A5 EEFF      			dc.b $0E,$FF,$06,$A5,$EE,$FF
(1)   63/   68616 : 0AEE 069C F100      MAPTal_Walk2_045:	dc.b $0A,$EE,$06,$9C,$F1,$00
(1)   64/   6861C : 0D06 06A5 EC00      			dc.b $0D,$06,$06,$A5,$EC,$00
(1)   65/   68622 : 04FE 06AD 09FF      			dc.b $04,$FE,$06,$AD,$09,$FF
(1)   66/   68628 : 0EEE 069C F200      MAPTal_Walk3_045:	dc.b $0E,$EE,$06,$9C,$F2,$00
(1)   67/   6862E : 0906 06A8 F2FF      			dc.b $09,$06,$06,$A8,$F2,$FF
(1)   68/   68634 : 09EE 069C F200      MAPTal_Walk4_045:	dc.b $09,$EE,$06,$9C,$F2,$00
(1)   69/   6863A : 0DFE 06A2 F500      			dc.b $0D,$FE,$06,$A2,$F5,$00
(1)   70/   68640 : 080E 06AA F2FF      			dc.b $08,$0E,$06,$AA,$F2,$FF
(1)   71/   68646 : 09EC 069C F000      MAPTal_Walk5_045:	dc.b $09,$EC,$06,$9C,$F0,$00
(1)   72/   6864C : 0EFC 06A2 EE00      			dc.b $0E,$FC,$06,$A2,$EE,$00
(1)   73/   68652 : 0014 06AE F0FF      			dc.b $00,$14,$06,$AE,$F0,$FF
(1)   74/   68658 : 09EE 069C F100      MAPTal_Walk6_045:	dc.b $09,$EE,$06,$9C,$F1,$00
(1)   75/   6865E : 0CFE 06A2 F100      			dc.b $0C,$FE,$06,$A2,$F1,$00
(1)   76/   68664 : 0D06 06A6 ECFF      			dc.b $0D,$06,$06,$A6,$EC,$FF
(1)   77/   6866A :                     ; ---------------------------------------------------------------------------
(1)   78/   6866A :                     ; Walking (Angle: 090* 270* degrees)
(1)   79/   6866A : 00EC 069C 0300      MAPTal_Walk7_090:	dc.b $00,$EC,$06,$9C,$03,$00
(1)   80/   68670 : 0EF4 069D EE00      			dc.b $0E,$F4,$06,$9D,$EE,$00
(1)   81/   68676 : 0602 06AC FEFF      			dc.b $06,$02,$06,$AC,$FE,$FF
(1)   82/   6867C : 00EC 069C 0600      MAPTal_Walk8_090:	dc.b $00,$EC,$06,$9C,$06,$00
(1)   83/   68682 : 0EF4 069D EE00      			dc.b $0E,$F4,$06,$9D,$EE,$00
(1)   84/   68688 : 0600 06AC FEFF      			dc.b $06,$00,$06,$AC,$FE,$FF
(1)   85/   6868E : 0EEC 069C EE00      MAPTal_Walk1_090:	dc.b $0E,$EC,$06,$9C,$EE,$00
(1)   86/   68694 : 0004 06A8 0600      			dc.b $00,$04,$06,$A8,$06,$00
(1)   87/   6869A : 0600 06AC FBFF      			dc.b $06,$00,$06,$AC,$FB,$FF
(1)   88/   686A0 : 00EC 069C 0600      MAPTal_Walk2_090:	dc.b $00,$EC,$06,$9C,$06,$00
(1)   89/   686A6 : 0EF4 069D EE00      			dc.b $0E,$F4,$06,$9D,$EE,$00
(1)   90/   686AC : 0600 06AC FBFF      			dc.b $06,$00,$06,$AC,$FB,$FF
(1)   91/   686B2 : 04EC 069C FE00      MAPTal_Walk3_090:	dc.b $04,$EC,$06,$9C,$FE,$00
(1)   92/   686B8 : 0EF4 069E EE00      			dc.b $0E,$F4,$06,$9E,$EE,$00
(1)   93/   686BE : 0602 06AC FEFF      			dc.b $06,$02,$06,$AC,$FE,$FF
(1)   94/   686C4 : 00EC 069C 0600      MAPTal_Walk4_090:	dc.b $00,$EC,$06,$9C,$06,$00
(1)   95/   686CA : 0EF4 069D EE00      			dc.b $0E,$F4,$06,$9D,$EE,$00
(1)   96/   686D0 : 0600 06AC FEFF      			dc.b $06,$00,$06,$AC,$FE,$FF
(1)   97/   686D6 : 08EC 069C EE00      MAPTal_Walk5_090:	dc.b $08,$EC,$06,$9C,$EE,$00
(1)   98/   686DC : 0DF4 069F EE00      			dc.b $0D,$F4,$06,$9F,$EE,$00
(1)   99/   686E2 : 0600 06AC FBFF      			dc.b $06,$00,$06,$AC,$FB,$FF
(1)  100/   686E8 : 0EF4 069C EE00      MAPTal_Walk6_090:	dc.b $0E,$F4,$06,$9C,$EE,$00
(1)  101/   686EE : 0600 06AC FBFF      			dc.b $06,$00,$06,$AC,$FB,$FF
(1)  102/   686F4 :                     ; ---------------------------------------------------------------------------
(1)  103/   686F4 :                     ; Walking (Angle: 135* 315* degrees)
(1)  104/   686F4 : 04EE 069C F400      MAPTal_Walk7_135:	dc.b $04,$EE,$06,$9C,$F4,$00
(1)  105/   686FA : 0EF6 069E EC00      			dc.b $0E,$F6,$06,$9E,$EC,$00
(1)  106/   68700 : 02F6 06AA 0CFF      			dc.b $02,$F6,$06,$AA,$0C,$FF
(1)  107/   68706 : 05E6 069C F900      MAPTal_Walk8_135:	dc.b $05,$E6,$06,$9C,$F9,$00
(1)  108/   6870C : 0EF6 06A0 EC00      			dc.b $0E,$F6,$06,$A0,$EC,$00
(1)  109/   68712 : 02F6 06AC 0CFF      			dc.b $02,$F6,$06,$AC,$0C,$FF
(1)  110/   68718 : 0FF2 069C F600      MAPTal_Walk1_135:	dc.b $0F,$F2,$06,$9C,$F6,$00
(1)  111/   6871E : 05F8 06AC E6FF      			dc.b $05,$F8,$06,$AC,$E6,$FF
(1)  112/   68724 : 0FF4 069C F400      MAPTal_Walk2_135:	dc.b $0F,$F4,$06,$9C,$F4,$00
(1)  113/   6872A : 01FC 06AC EC00      			dc.b $01,$FC,$06,$AC,$EC,$00
(1)  114/   68730 : 00EC 06AE 01FF      			dc.b $00,$EC,$06,$AE,$01,$FF
(1)  115/   68736 : 0BEE 069C EC00      MAPTal_Walk3_135:	dc.b $0B,$EE,$06,$9C,$EC,$00
(1)  116/   6873C : 06F6 06A8 04FF      			dc.b $06,$F6,$06,$A8,$04,$FF
(1)  117/   68742 : 0EF6 069C F600      MAPTal_Walk4_135:	dc.b $0E,$F6,$06,$9C,$F6,$00
(1)  118/   68748 : 01F8 06A8 EE00      			dc.b $01,$F8,$06,$A8,$EE,$00
(1)  119/   6874E : 05E6 06AA FEFF      			dc.b $05,$E6,$06,$AA,$FE,$FF
(1)  120/   68754 : 0FF2 069C F800      MAPTal_Walk5_135:	dc.b $0F,$F2,$06,$9C,$F8,$00
(1)  121/   6875A : 06F9 06AC E8FF      			dc.b $06,$F9,$06,$AC,$E8,$FF
(1)  122/   68760 : 0FF4 069C F400      MAPTal_Walk6_135:	dc.b $0F,$F4,$06,$9C,$F4,$00
(1)  123/   68766 : 01FC 06AC EC00      			dc.b $01,$FC,$06,$AC,$EC,$00
(1)  124/   6876C : 00EC 06AE 02FF      			dc.b $00,$EC,$06,$AE,$02,$FF
(1)  125/   68772 :                     ; ---------------------------------------------------------------------------
(1)  126/   68772 : 09F0 069C F800      MAPTal_Run1_000:	dc.b $09,$F0,$06,$9C,$F8,$00
(1)  127/   68778 : 0900 06A2 F1FF      			dc.b $09,$00,$06,$A2,$F1,$FF
(1)  128/   6877E : 09F0 069C F800      MAPTal_Run2_000:	dc.b $09,$F0,$06,$9C,$F8,$00
(1)  129/   68784 : 0900 06A2 F1FF      			dc.b $09,$00,$06,$A2,$F1,$FF
(1)  130/   6878A : 0AEC 069C F000      MAPTal_Run1_045:	dc.b $0A,$EC,$06,$9C,$F0,$00
(1)  131/   68790 : 0504 06A5 F8FF      			dc.b $05,$04,$06,$A5,$F8,$FF
(1)  132/   68796 : 0AEC 069C F000      MAPTal_Run2_045:	dc.b $0A,$EC,$06,$9C,$F0,$00
(1)  133/   6879C : 0504 06A5 F8FF      			dc.b $05,$04,$06,$A5,$F8,$FF
(1)  134/   687A2 : 09F0 069C F000      MAPTal_Run1_090:	dc.b $09,$F0,$06,$9C,$F0,$00
(1)  135/   687A8 : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  136/   687AE : 09F0 069C F000      MAPTal_Run2_090:	dc.b $09,$F0,$06,$9C,$F0,$00
(1)  137/   687B4 : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  138/   687BA : 0AFA 069C EC00      MAPTal_Run1_135:	dc.b $0A,$FA,$06,$9C,$EC,$00
(1)  139/   687C0 : 05FA 06A5 04FF      			dc.b $05,$FA,$06,$A5,$04,$FF
(1)  140/   687C6 : 0AFA 069C EC00      MAPTal_Run2_135:	dc.b $0A,$FA,$06,$9C,$EC,$00
(1)  141/   687CC : 05FA 06A5 04FF      			dc.b $05,$FA,$06,$A5,$04,$FF
(1)  142/   687D2 :                     ; ---------------------------------------------------------------------------
(1)  143/   687D2 : 0FF0 069C F0FF      MAPTal_Roll1:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  144/   687D8 : 0FF0 069C F0FF      MAPTal_Roll2:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  145/   687DE : 0FF0 069C F0FF      MAPTal_Roll3:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  146/   687E4 : 0FF4 069C F0FF      MAPTal_Spindsh1:	dc.b $0F,$F4,$06,$9C,$F0,$FF
(1)  147/   687EA : 0EF8 069C F0FF      MAPTal_Spindsh2:	dc.b $0E,$F8,$06,$9C,$F0,$FF
(1)  148/   687F0 : 0FF4 069C F0FF      MAPTal_Spindsh3:	dc.b $0F,$F4,$06,$9C,$F0,$FF
(1)  149/   687F6 :                     ; ---------------------------------------------------------------------------
(1)  150/   687F6 : 0FF0 069C F0FF      MAPTal_Hurt:		dc.b $0F,$F0,$06,$9C,$F0,$FF
(1)  151/   687FC : 0FF0 069C F0FF      MAPTal_Fly:		dc.b $0F,$F0,$06,$9C,$F0,$FF	; Tails Flying (Unused)
(1)  152/   68802 : 0FF0 069C F0FF      MAPTal_FlyTired1:	dc.b $0F,$F0,$06,$9C,$F0,$FF	; Tails Flying When Tired 1 (Unused)
(1)  153/   68808 : 0FF0 069C F0FF      MAPTal_FlyTired2:	dc.b $0F,$F0,$06,$9C,$F0,$FF	; Tails Flying When Tired 2 (Unused)
(1)  154/   6880E : 0C08 069C 00FF      MAPTal_FlyHeliTails:	dc.b $0C,$08,$06,$9C,$00,$FF	; Tails' "Tails" (Flying Helicopter Tails) (Unused)
(1)  155/   68814 : 09F0 069C F000      MAPTal_Skid1:		dc.b $09,$F0,$06,$9C,$F0,$00	; Skidding 1
(1)  156/   6881A : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  157/   68820 : 09F0 069C F000      MAPTal_Skid2:		dc.b $09,$F0,$06,$9C,$F0,$00	; Skidding 2
(1)  158/   68826 : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  159/   6882C : 0BF0 069C F0FF      MAPTal_Skid3:		dc.b $0B,$F0,$06,$9C,$F0,$FF	; Skidding 3 (Turn Direction)
(1)  160/   68832 : 0AF0 069C F000      MAPTal_UnkSkid1:	dc.b $0A,$F0,$06,$9C,$F0,$00	; Unused Hulting 1
(1)  161/   68838 : 0808 06A5 F8FF      			dc.b $08,$08,$06,$A5,$F8,$FF
(1)  162/   6883E : 09F0 069C F000      MAPTal_UnkSkid2:	dc.b $09,$F0,$06,$9C,$F0,$00	; Unused Hulting 2
(1)  163/   68844 : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  164/   6884A : 0FF0 069C F0FF      MAPTal_BlncOut1:	dc.b $0F,$F0,$06,$9C,$F0,$FF	; Balancing 1 (Facing outwards)
(1)  165/   68850 : 09F0 069C F000      MAPTal_BlncOut2:	dc.b $09,$F0,$06,$9C,$F0,$00	; Balancing 2 (Facing outwards)
(1)  166/   68856 : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  167/   6885C : 0BF0 069C F5FF      MAPTal_BlncOut3:	dc.b $0B,$F0,$06,$9C,$F5,$FF	; Balancing 3 (Facing outwards)
(1)  168/   68862 : 09F1 069C F300      MAPTal_BlncIn1:		dc.b $09,$F1,$06,$9C,$F3,$00	; Balancing 1 (Facing inwards)
(1)  169/   68868 : 0501 06A2 F3FF      			dc.b $05,$01,$06,$A2,$F3,$FF
(1)  170/   6886E : 09F0 069C F700      MAPTal_BlncIn2:		dc.b $09,$F0,$06,$9C,$F7,$00	; Balancing 2 (Facing inwards)
(1)  171/   68874 : 0900 06A2 F2FF      			dc.b $09,$00,$06,$A2,$F2,$FF
(1)  172/   6887A : 09F0 069C F800      MAPTal_BlncIn3:		dc.b $09,$F0,$06,$9C,$F8,$00	; Balancing 3 (Facing inwards)
(1)  173/   68880 : 0D00 06A2 F0FF      			dc.b $0D,$00,$06,$A2,$F0,$FF
(1)  174/   68886 :                     ; ---------------------------------------------------------------------------
(1)  175/   68886 :                     ; Unused
(1)  176/   68886 : 0AE8 069C F000      MAPTal_Throw1:		dc.b $0A,$E8,$06,$9C,$F0,$00	; Throwing 1 (Unused)
(1)  177/   6888C : 0D00 06A5 F0FF      			dc.b $0D,$00,$06,$A5,$F0,$FF
(1)  178/   68892 : 0AF0 069C F000      MAPTal_Throw2:		dc.b $0A,$F0,$06,$9C,$F0,$00	; Throwing 2 (Unused)
(1)  179/   68898 : 0508 06A5 F6FF      			dc.b $05,$08,$06,$A5,$F6,$FF
(1)  180/   6889E : 0AF2 069C F200      MAPTal_Throw3:		dc.b $0A,$F2,$06,$9C,$F2,$00	; Throwing 3 (Unused)
(1)  181/   688A4 : 050A 06A5 F7FF      			dc.b $05,$0A,$06,$A5,$F7,$FF
(1)  182/   688AA : 0BF4 069C FAFF      MAPTal_Throw4:		dc.b $0B,$F4,$06,$9C,$FA,$FF	; Throwing 4/Hanging 1? (Unused)
(1)  183/   688B0 : 0900 069C 0300      MAPTal_Hang2:		dc.b $09,$00,$06,$9C,$03,$00	; Hanging 2 (Unused)
(1)  184/   688B6 : 0610 06A2 07FF      			dc.b $06,$10,$06,$A2,$07,$FF
(1)  185/   688BC : 0BEF 069C F5FF      MAPTal_Dizzy1:		dc.b $0B,$EF,$06,$9C,$F5,$FF	; Spinning Dizzy 1
(1)  186/   688C2 : 09F1 069C F200      MAPTal_Dizzy2:		dc.b $09,$F1,$06,$9C,$F2,$00	; Spinning Dizzy 2
(1)  187/   688C8 : 0901 06A2 F9FF      			dc.b $09,$01,$06,$A2,$F9,$FF
(1)  188/   688CE : 08F0 069C F300      MAPTal_Dizzy3:		dc.b $08,$F0,$06,$9C,$F3,$00	; Spinning Dizzy 3
(1)  189/   688D4 : 0AF8 069F F5FF      			dc.b $0A,$F8,$06,$9F,$F5,$FF
(1)  190/   688DA : 0BF0 069C F2FF      MAPTal_Dizzy4:		dc.b $0B,$F0,$06,$9C,$F2,$FF	; Spinning Dizzy 4
(1)  191/   688E0 : 0BEF 069C F6FF      MAPTal_Dizzy5:		dc.b $0B,$EF,$06,$9C,$F6,$FF	; Spinning Dizzy 5
(1)  192/   688E6 : 09F1 069C F900      MAPTal_Dizzy6:		dc.b $09,$F1,$06,$9C,$F9,$00	; Spinning Dizzy 6
(1)  193/   688EC : 0D01 06A2 F1FF      			dc.b $0D,$01,$06,$A2,$F1,$FF
(1)  194/   688F2 : 0EF0 069C F300      MAPTal_Dizzy7:		dc.b $0E,$F0,$06,$9C,$F3,$00	; Spinning Dizzy 7
(1)  195/   688F8 : 0408 06A8 F6FF      			dc.b $04,$08,$06,$A8,$F6,$FF
(1)  196/   688FE : 0BF0 069C F8FF      MAPTal_Dizzy8:		dc.b $0B,$F0,$06,$9C,$F8,$FF	; Spinning Dizzy 8
(1)  197/   68904 :                     ; ---------------------------------------------------------------------------
(1)  198/   68904 :                     ; ===========================================================================
(1)  199/   68904 :                     ; ---------------------------------------------------------------------------
(1)  200/   68904 :                     ; This next section is for Tails' tails
(1)  201/   68904 :                     ; ---------------------------------------------------------------------------
(1)  202/   68904 :                     ; Tails' Tails When Jumping (moving left or right) (Angle: 000* 180* degrees)
(1)  203/   68904 : 0900 06AE 00FF      MAPTal_TalJmp01_000:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  204/   6890A : 0900 06AE 00FF      MAPTal_TalJmp02_000:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  205/   68910 : 0900 06AE 00FF      MAPTal_TalJmp03_000:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  206/   68916 : 0900 06AE 00FF      MAPTal_TalJmp04_000:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  207/   6891C :                     ; ---------------------------------------------------------------------------
(1)  208/   6891C :                     ; Tails' Tails When Jumping (moving left or right and up) (Angle: 045* 225* degrees)
(1)  209/   6891C : 0900 06AE 00FF      MAPTal_TalJmp01_045:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  210/   68922 : 0900 06AE 00FF      MAPTal_TalJmp02_045:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  211/   68928 : 0900 06AE 00FF      MAPTal_TalJmp03_045:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  212/   6892E : 0900 06AE 00FF      MAPTal_TalJmp04_045:	dc.b $09,$00,$06,$AE,$00,$FF
(1)  213/   68934 :                     ; ---------------------------------------------------------------------------
(1)  214/   68934 :                     ; Tails' Tails When Jumping (moving Up or down) (Angle: 090* 270* degrees)
(1)  215/   68934 : 0600 06AE 00FF      MAPTal_TalJmp01_090:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  216/   6893A : 0600 06AE 00FF      MAPTal_TalJmp02_090:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  217/   68940 : 0600 06AE 00FF      MAPTal_TalJmp03_090:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  218/   68946 : 0600 06AE 00FF      MAPTal_TalJmp04_090:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  219/   6894C :                     ; ---------------------------------------------------------------------------
(1)  220/   6894C :                     ; Tails' Tails When Jumping (moving left or right and down) (Angle: 135* 315* degrees)
(1)  221/   6894C : 0600 06AE 00FF      MAPTal_TalJmp01_135:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  222/   68952 : 0600 06AE 00FF      MAPTal_TalJmp02_135:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  223/   68958 : 0600 06AE 00FF      MAPTal_TalJmp03_135:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  224/   6895E : 0600 06AE 00FF      MAPTal_TalJmp04_135:	dc.b $06,$00,$06,$AE,$00,$FF
(1)  225/   68964 :                     ; ---------------------------------------------------------------------------
(1)  226/   68964 :                     ; Running Normal and Fast (Angle: 000* 180* degrees)
(1)  227/   68964 : 0700 06AC 00FF      MAPTal_RunNorm01_000:	dc.b $07,$00,$06,$AC,$00,$FF	; RUN normal 1 000 (Unused)
(1)  228/   6896A : 0508 06AC 00FF      MAPTal_RunNorm02_000:	dc.b $05,$08,$06,$AC,$00,$FF	; RUN normal 2 000 (Unused)
(1)  229/   68970 : 040C 06AC 00FF      MAPTal_RunFast01_000:	dc.b $04,$0C,$06,$AC,$00,$FF	; RUN fast 1 000
(1)  230/   68976 : 07F0 06AC F8FF      MAPTal_RunFast02_000:	dc.b $07,$F0,$06,$AC,$F8,$FF	; RUN fast 2 000
(1)  231/   6897C :                     ; ---------------------------------------------------------------------------
(1)  232/   6897C :                     ; Running Normal and Fast (Angle: 045* 225* degrees)
(1)  233/   6897C : 0900 06AC 0000      MAPTal_RunNorm01_045:	dc.b $09,$00,$06,$AC,$00,$00	; RUN normal 1 045 (Unused)
(1)  234/   68982 : 0110 06B2 10FF      			dc.b $01,$10,$06,$B2,$10,$FF	; ''
(1)  235/   68988 : 0500 06AC 00FF      MAPTal_RunNorm02_045:	dc.b $05,$00,$06,$AC,$00,$FF	; RUN normal 2 045 (Unused)
(1)  236/   6898E : 0500 06AC 00FF      MAPTal_RunFast01_045:	dc.b $05,$00,$06,$AC,$00,$FF	; RUN fast 1 045 (Unused)
(1)  237/   68994 : 0901 06AC 0000      MAPTal_RunFast02_045:	dc.b $09,$01,$06,$AC,$00,$00	; RUN fast 2 045 (Unused)
(1)  238/   6899A : 0411 06B2 08FF      			dc.b $04,$11,$06,$B2,$08,$FF	; ''
(1)  239/   689A0 :                     ; ---------------------------------------------------------------------------
(1)  240/   689A0 :                     ; Running Normal and Fast (Angle: 090* 270* degrees)
(1)  241/   689A0 : 0500 06AC 00FF      MAPTal_RunNorm01_090:	dc.b $05,$00,$06,$AC,$00,$FF	; RUN normal 1 090 (Unused)
(1)  242/   689A6 : 0D00 06AC 00FF      MAPTal_RunNorm02_090:	dc.b $0D,$00,$06,$AC,$00,$FF	; RUN normal 2 090 (Unused)
(1)  243/   689AC : 0500 06AC 08FF      MAPTal_RunFast01_090:	dc.b $05,$00,$06,$AC,$08,$FF	; RUN fast 1 090 (Unused)
(1)  244/   689B2 : 0100 06AC 0CFF      MAPTal_RunFast02_090:	dc.b $01,$00,$06,$AC,$0C,$FF	; RUN fast 2 090 (Unused)
(1)  245/   689B8 :                     ; ---------------------------------------------------------------------------
(1)  246/   689B8 :                     ; Running Normal and Fast (Angle: 135* 315* degrees)
(1)  247/   689B8 : 0D00 06AC 00FF      MAPTal_RunNorm01_135:	dc.b $0D,$00,$06,$AC,$00,$FF	; RUN normal 1 135 (Unused)
(1)  248/   689BE : 0800 06AC 0300      MAPTal_RunNorm02_135:	dc.b $08,$00,$06,$AC,$03,$00	; RUN normal 2 135 (Unused)
(1)  249/   689C4 : 0508 06AF 00FF      			dc.b $05,$08,$06,$AF,$00,$FF	; ''
(1)  250/   689CA : 0500 06AC 00FF      MAPTal_RunFast01_135:	dc.b $05,$00,$06,$AC,$00,$FF	; RUN fast 1 135 (Unused)
(1)  251/   689D0 : 0500 06AC 00FF      MAPTal_RunFast02_135:	dc.b $05,$00,$06,$AC,$00,$FF	; RUN fast 2 135 (Unused)
(1)  252/   689D6 :                     ; ---------------------------------------------------------------------------
(1)  253/   689D6 : 0400 06AC 0800      MAPTal_UnkTails1:	dc.b $04,$00,$06,$AC,$08,$00	; Unknown frames (looks like the tails are flipping or snapping, or something on them lines)
(1)  254/   689DC : 0908 06AE 00FF      			dc.b $09,$08,$06,$AE,$00,$FF	; ''
(1)  255/   689E2 : 0500 06AC 00FF      MAPTal_UnkTails2:	dc.b $05,$00,$06,$AC,$00,$FF	; ''
(1)  256/   689E8 : 0608 06AC 10FF      MAPTal_Wait01:		dc.b $06,$08,$06,$AC,$10,$FF	; waiting, Looking up, looking down (Tails' Idle tails)
(1)  257/   689EE : 0A08 06AC 08FF      MAPTal_Wait02:		dc.b $0A,$08,$06,$AC,$08,$FF	; ''
(1)  258/   689F4 : 0A08 06AC 08FF      MAPTal_Wait03:		dc.b $0A,$08,$06,$AC,$08,$FF	; ''
(1)  259/   689FA : 0910 06AC 08FF      MAPTal_Wait04:		dc.b $09,$10,$06,$AC,$08,$FF	; ''
(1)  260/   68A00 : 0A08 06AC 08FF      MAPTal_Wait05:		dc.b $0A,$08,$06,$AC,$08,$FF	; ''
(1)  261/   68A06 : (MACRO)              			even
(1)  261/   68A06 : =>TRUE                       if notZ80(MOMCPU)
(1)  261/   68A06 : =>FALSE                              if (*)&1
(1)  261/   68A06 :                                             dc.b 0                          ;ds.b 1
(1)  261/   68A06 : [261]                                endif
(1)  261/   68A06 : =>FALSE                      else
(1)  261/   68A06 :                                     if ($)&1
(1)  261/   68A06 :                                             db 0
(1)  261/   68A06 : [261]                                endif
(1)  261/   68A06 : [261]                        endif
(1)  262/   68A06 :                     ; ---------------------------------------------------------------------------
(1)  263/   68A06 :                     ; ===========================================================================
(1)  264/   68A06 :                     
   19497/   68A06 :                     ; ---------------------------------------------------------------------------
   19498/   68A06 :                     ; ===========================================================================
   19499/   68A06 :                     ; ---------------------------------------------------------------------------
   19500/   68A06 :                     ; Animation, PLC, mapping & Main index block - Sonic Fields
   19501/   68A06 :                     ; ---------------------------------------------------------------------------
   19502/   68A06 :                     ANI_SonicFields:
   19503/   68A06 :                     	include	"PLCMAPANI/ANI_SonicFields.asm"
(1)    1/   68A06 :                     ; ===========================================================================
(1)    2/   68A06 :                     ; ---------------------------------------------------------------------------
(1)    3/   68A06 :                     ; Animation scripts - Sonic Fields
(1)    4/   68A06 :                     ; ---------------------------------------------------------------------------
(1)    5/   68A06 :                     ;
(1)    6/   68A06 :                     ; Each animation script starts with 3 bytes of data
(1)    7/   68A06 :                     ;
(1)    8/   68A06 :                     ;		dc.b $XX,$YY,$ZZ
(1)    9/   68A06 :                     ;
(1)   10/   68A06 :                     ;	$XX   = Speed to run animation at (00 Slow/3F Fast)
(1)   11/   68A06 :                     ;		(Note: if it is 40, then it's a special animation speed that
(1)   12/   68A06 :                     ;		is controled by routines somewhere)
(1)   13/   68A06 :                     ;	$YY   = Number of frames within script
(1)   14/   68A06 :                     ;	$ZZ   = (unknown)
(1)   15/   68A06 :                     ;
(1)   16/   68A06 :                     ; Then each byte in the line under, is each frame to use in that specific script
(1)   17/   68A06 :                     ; (Basically the same as S1 and S2)
(1)   18/   68A06 :                     ;
(1)   19/   68A06 :                     ; ---------------------------------------------------------------------------
(1)   20/   68A06 :                     ; ===========================================================================
(1)   21/   68A06 :                     ; ---------------------------------------------------------------------------
(1)   22/   68A06 : 000A                			dc.w AniSonFld_Normal-ANI_SonicFields ; Standing animation (all directions)
(1)   23/   68A08 : 0010                			dc.w AniSonFld_WalkDw-ANI_SonicFields ; running animation (Moving downwards)
(1)   24/   68A0A : 001C                			dc.w AniSonFld_WalkLR-ANI_SonicFields ; running animation (Moving Left or Right)
(1)   25/   68A0C : 0028                			dc.w AniSonFld_WalkUp-ANI_SonicFields ; running animation (Moving Upwards
(1)   26/   68A0E : 0034                			dc.w AniSonFld_Ball-ANI_SonicFields ; Ball animation (Unused) (Could be jumping or rolling)
(1)   27/   68A10 :                     ; ---------------------------------------------------------------------------
(1)   28/   68A10 : 0002 00             AniSonFld_Normal:	dc.b $00,$02,$00		; Standing (00 Forward/01 Left/Right/02 Backwards)
(1)   29/   68A13 : 0001 02             			dc.b $00,$01,$02
(1)   30/   68A16 : 2007 00             AniSonFld_WalkDw:	dc.b $20,$07,$00		; Down running
(1)   31/   68A19 : 0304 0506 0708      			dc.b $03,$04,$05,$06,$07,$08,$09,$0A,$00
            68A1F : 090A 00          
(1)   32/   68A22 : 2007 00             AniSonFld_WalkLR:	dc.b $20,$07,$00		; LR running
(1)   33/   68A25 : 0B0C 0D0E 0F10      			dc.b $0B,$0C,$0D,$0E,$0F,$10,$11,$12,$00
            68A2B : 1112 00          
(1)   34/   68A2E : 2007 00             AniSonFld_WalkUp:	dc.b $20,$07,$00		; Up Running
(1)   35/   68A31 : 1314 1516 1718      			dc.b $13,$14,$15,$16,$17,$18,$19,$1A,$00
            68A37 : 191A 00          
(1)   36/   68A3A : 8003 00             AniSonFld_Ball:		dc.b $80,$03,$00		; Ball Animation (Unused)
(1)   37/   68A3D : 1B1C 1D1C 00        			dc.b $1B,$1C,$1D,$1C,$00
(1)   38/   68A42 : (MACRO)              			even
(1)   38/   68A42 : =>TRUE                       if notZ80(MOMCPU)
(1)   38/   68A42 : =>FALSE                              if (*)&1
(1)   38/   68A42 :                                             dc.b 0                          ;ds.b 1
(1)   38/   68A42 : [38]                                 endif
(1)   38/   68A42 : =>FALSE                      else
(1)   38/   68A42 :                                     if ($)&1
(1)   38/   68A42 :                                             db 0
(1)   38/   68A42 : [38]                                 endif
(1)   38/   68A42 : [38]                         endif
(1)   39/   68A42 :                     ; ---------------------------------------------------------------------------
(1)   40/   68A42 :                     ; ===========================================================================
(1)   41/   68A42 :                     
   19504/   68A42 :                     ; ---------------------------------------------------------------------------
   19505/   68A42 :                     PLCMAP_SonicFields_MainIndex:
   19506/   68A42 :                     	include	"PLCMAPANI/PLCMAP_IndxBlck_SonicFields.asm"
(1)    1/   68A42 :                     ; ===========================================================================
(1)    2/   68A42 :                     ; ---------------------------------------------------------------------------
(1)    3/   68A42 :                     ; PLC and Mapping Main Index Block - Sonic Fields
(1)    4/   68A42 :                     ; ---------------------------------------------------------------------------
(1)    5/   68A42 :                     ; An example of the setup:
(1)    6/   68A42 :                     ;
(1)    7/   68A42 :                     ;		dc.w Location-Map_SonicFields,			Location-PLC_SonicFields
(1)    8/   68A42 :                     ;		dc.w Location-Map_SonicFields,			Location-PLC_SonicFields
(1)    9/   68A42 :                     ;		dc.w Location-Map_SonicFields,			Location-PLC_SonicFields
(1)   10/   68A42 :                     ; etc, etc.
(1)   11/   68A42 :                     ; ---------------------------------------------------------------------------
(1)   12/   68A42 :                     ; ===========================================================================
(1)   13/   68A42 : 0000 0000           		dc.w MapSonFld_StandForward-Map_SonicFields,	PLCSonFld_StandForward-PLC_SonicFields
(1)   14/   68A46 : 000C 000A           		dc.w MapSonFld_StandLftRht-Map_SonicFields,	PLCSonFld_StandLftRht-PLC_SonicFields
(1)   15/   68A4A : 0018 0014           		dc.w MapSonFld_StandBckward-Map_SonicFields,	PLCSonFld_StandBckward-PLC_SonicFields
(1)   16/   68A4E : 0024 001E           		dc.w MapSonFld_WalkDwn_1-Map_SonicFields,	PLCSonFld_WalkDwn_1-PLC_SonicFields
(1)   17/   68A52 : 0030 0028           		dc.w MapSonFld_WalkDwn_2-Map_SonicFields,	PLCSonFld_WalkDwn_2-PLC_SonicFields
(1)   18/   68A56 : 003C 0032           		dc.w MapSonFld_WalkDwn_3-Map_SonicFields,	PLCSonFld_WalkDwn_3-PLC_SonicFields
(1)   19/   68A5A : 0042 003C           		dc.w MapSonFld_WalkDwn_4-Map_SonicFields,	PLCSonFld_WalkDwn_4-PLC_SonicFields
(1)   20/   68A5E : 0048 0046           		dc.w MapSonFld_WalkDwn_5-Map_SonicFields,	PLCSonFld_WalkDwn_5-PLC_SonicFields
(1)   21/   68A62 : 0054 0050           		dc.w MapSonFld_WalkDwn_6-Map_SonicFields,	PLCSonFld_WalkDwn_6-PLC_SonicFields
(1)   22/   68A66 : 0060 005A           		dc.w MapSonFld_WalkDwn_7-Map_SonicFields,	PLCSonFld_WalkDwn_7-PLC_SonicFields
(1)   23/   68A6A : 0066 0064           		dc.w MapSonFld_WalkDwn_8-Map_SonicFields,	PLCSonFld_WalkDwn_8-PLC_SonicFields
(1)   24/   68A6E : 006C 006E           		dc.w MapSonFld_WalkLR_1-Map_SonicFields,	PLCSonFld_WalkLR_1-PLC_SonicFields
(1)   25/   68A72 : 0078 0078           		dc.w MapSonFld_WalkLR_2-Map_SonicFields,	PLCSonFld_WalkLR_2-PLC_SonicFields
(1)   26/   68A76 : 0084 0082           		dc.w MapSonFld_WalkLR_3-Map_SonicFields,	PLCSonFld_WalkLR_3-PLC_SonicFields
(1)   27/   68A7A : 0090 008C           		dc.w MapSonFld_WalkLR_4-Map_SonicFields,	PLCSonFld_WalkLR_4-PLC_SonicFields
(1)   28/   68A7E : 009C 0096           		dc.w MapSonFld_WalkLR_5-Map_SonicFields,	PLCSonFld_WalkLR_5-PLC_SonicFields
(1)   29/   68A82 : 00A2 00A0           		dc.w MapSonFld_WalkLR_6-Map_SonicFields,	PLCSonFld_WalkLR_6-PLC_SonicFields
(1)   30/   68A86 : 00A8 00AA           		dc.w MapSonFld_WalkLR_7-Map_SonicFields,	PLCSonFld_WalkLR_7-PLC_SonicFields
(1)   31/   68A8A : 00AE 00B4           		dc.w MapSonFld_WalkLR_8-Map_SonicFields,	PLCSonFld_WalkLR_8-PLC_SonicFields
(1)   32/   68A8E : 00BA 00BE           		dc.w MapSonFld_WalkUp_1-Map_SonicFields,	PLCSonFld_WalkUp_1-PLC_SonicFields
(1)   33/   68A92 : 00C6 00C8           		dc.w MapSonFld_WalkUp_2-Map_SonicFields,	PLCSonFld_WalkUp_2-PLC_SonicFields
(1)   34/   68A96 : 00CC 00D2           		dc.w MapSonFld_WalkUp_3-Map_SonicFields,	PLCSonFld_WalkUp_3-PLC_SonicFields
(1)   35/   68A9A : 00D2 00DC           		dc.w MapSonFld_WalkUp_4-Map_SonicFields,	PLCSonFld_WalkUp_4-PLC_SonicFields
(1)   36/   68A9E : 00DE 00E6           		dc.w MapSonFld_WalkUp_5-Map_SonicFields,	PLCSonFld_WalkUp_5-PLC_SonicFields
(1)   37/   68AA2 : 00EA 00F0           		dc.w MapSonFld_WalkUp_6-Map_SonicFields,	PLCSonFld_WalkUp_6-PLC_SonicFields
(1)   38/   68AA6 : 00F0 00FA           		dc.w MapSonFld_WalkUp_7-Map_SonicFields,	PLCSonFld_WalkUp_7-PLC_SonicFields
(1)   39/   68AAA : 00F6 0104           		dc.w MapSonFld_WalkUp_8-Map_SonicFields,	PLCSonFld_WalkUp_8-PLC_SonicFields
(1)   40/   68AAE : 0102 010E           		dc.w MapSonFld_UncBall_1-Map_SonicFields,	PLCSonFld_UncBall_1-PLC_SonicFields
(1)   41/   68AB2 : 0108 0118           		dc.w MapSonFld_UncBall_2-Map_SonicFields,	PLCSonFld_UncBall_2-PLC_SonicFields
(1)   42/   68AB6 : 010E 0122           		dc.w MapSonFld_UncBall_3-Map_SonicFields,	PLCSonFld_UncBall_3-PLC_SonicFields
(1)   43/   68ABA :                     ; ---------------------------------------------------------------------------
(1)   44/   68ABA :                     ; ===========================================================================
(1)   45/   68ABA :                     
   19507/   68ABA :                     ; ---------------------------------------------------------------------------
   19508/   68ABA :                     PLC_SonicFields:
   19509/   68ABA :                     	include	"PLCMAPANI/PLC_SonicFields.asm"
(1)    1/   68ABA :                     ; ===========================================================================
(1)    2/   68ABA :                     ; ---------------------------------------------------------------------------
(1)    3/   68ABA :                     ; Pattern Load Cues - Sonic Fields
(1)    4/   68ABA :                     ; ---------------------------------------------------------------------------
(1)    5/   68ABA :                     ; Guide as documented by Hivebrain
(1)    6/   68ABA :                     ;
(1)    7/   68ABA :                     ;	Each load cue consists of ten bytes:
(1)    8/   68ABA :                     ;
(1)    9/   68ABA :                     ;		dc.w $QQQQ,$----,$RRR-,$DDDD,$EEEE
(1)   10/   68ABA :                     ;
(1)   11/   68ABA :                     ;	$QQQQ = Number of tiles to load from Rom
(1)   12/   68ABA :                     ;	$RRR- = Location to start reading the tiles
(1)   13/   68ABA :                     ; ---------------------------------------------------------------------------
(1)   14/   68ABA :                     ; the rest were not mentioned on the guide, and I am assuming are:
(1)   15/   68ABA :                     ; ---------------------------------------------------------------------------
(1)   16/   68ABA :                     ;	$---- = Unknown
(1)   17/   68ABA :                     ;	$DDDD = I think it's some sort of dumping location (to dump the art)
(1)   18/   68ABA :                     ;	$EEEE = whether it's the last PLC section to use or not (00 Include next PLC section/FF End of PLC section)
(1)   19/   68ABA :                     ; ---------------------------------------------------------------------------
(1)   20/   68ABA :                     ; ===========================================================================
(1)   21/   68ABA :                     ; ---------------------------------------------------------------------------
(1)   22/   68ABA : 1001 9704 8000      PLCSonFld_StandForward:	dc.w $1001,$9704,$8000,$A000,$FFFF ; standing (Facing forwards)
            68AC0 : A000 FFFF          
(1)   23/   68AC4 : F000 9704 8110      PLCSonFld_StandLftRht:	dc.w $F000,$9704,$8110,$A000,$FFFF ; standing (Facing left or right)
            68ACA : A000 FFFF          
(1)   24/   68ACE : 1001 9704 8200      PLCSonFld_StandBckward:	dc.w $1001,$9704,$8200,$A000,$FFFF ; standing (facing backwards)
            68AD4 : A000 FFFF          
(1)   25/   68AD8 :                     ; ---------------------------------------------------------------------------
(1)   26/   68AD8 : D000 9704 8310      PLCSonFld_WalkDwn_1:	dc.w $D000,$9704,$8310,$A000,$FFFF ; Walk Down 1
            68ADE : A000 FFFF          
(1)   27/   68AE2 : F000 9704 83E0      PLCSonFld_WalkDwn_2:	dc.w $F000,$9704,$83E0,$A000,$FFFF ; Walk Down 2
            68AE8 : A000 FFFF          
(1)   28/   68AEC : 0001 9704 84D0      PLCSonFld_WalkDwn_3:	dc.w $0001,$9704,$84D0,$A000,$FFFF ; Walk Down 3
            68AF2 : A000 FFFF          
(1)   29/   68AF6 : 0001 9704 85D0      PLCSonFld_WalkDwn_4:	dc.w $0001,$9704,$85D0,$A000,$FFFF ; Walk Down 4
            68AFC : A000 FFFF          
(1)   30/   68B00 : 0001 9704 86D0      PLCSonFld_WalkDwn_5:	dc.w $0001,$9704,$86D0,$A000,$FFFF ; Walk Down 5
            68B06 : A000 FFFF          
(1)   31/   68B0A : 2001 9704 87D0      PLCSonFld_WalkDwn_6:	dc.w $2001,$9704,$87D0,$A000,$FFFF ; Walk Down 6
            68B10 : A000 FFFF          
(1)   32/   68B14 : 0001 9704 88F0      PLCSonFld_WalkDwn_7:	dc.w $0001,$9704,$88F0,$A000,$FFFF ; Walk Down 7
            68B1A : A000 FFFF          
(1)   33/   68B1E : C000 9704 89F0      PLCSonFld_WalkDwn_8:	dc.w $C000,$9704,$89F0,$A000,$FFFF ; Walk Down 8
            68B24 : A000 FFFF          
(1)   34/   68B28 :                     ; ---------------------------------------------------------------------------
(1)   35/   68B28 : 1001 9704 8AB0      PLCSonFld_WalkLR_1:	dc.w $1001,$9704,$8AB0,$A000,$FFFF ; Walk Left or Right 1
            68B2E : A000 FFFF          
(1)   36/   68B32 : 2001 9704 8BC0      PLCSonFld_WalkLR_2:	dc.w $2001,$9704,$8BC0,$A000,$FFFF ; Walk Left or Right 2
            68B38 : A000 FFFF          
(1)   37/   68B3C : 1001 9704 8CE0      PLCSonFld_WalkLR_3:	dc.w $1001,$9704,$8CE0,$A000,$FFFF ; Walk Left or Right 3
            68B42 : A000 FFFF          
(1)   38/   68B46 : 1001 9704 8DF0      PLCSonFld_WalkLR_4:	dc.w $1001,$9704,$8DF0,$A000,$FFFF ; Walk Left or Right 4
            68B4C : A000 FFFF          
(1)   39/   68B50 : 0001 9704 8F00      PLCSonFld_WalkLR_5:	dc.w $0001,$9704,$8F00,$A000,$FFFF ; Walk Left or Right 5
            68B56 : A000 FFFF          
(1)   40/   68B5A : 0001 9704 9000      PLCSonFld_WalkLR_6:	dc.w $0001,$9704,$9000,$A000,$FFFF ; Walk Left or Right 6
            68B60 : A000 FFFF          
(1)   41/   68B64 : 0001 9704 9100      PLCSonFld_WalkLR_7:	dc.w $0001,$9704,$9100,$A000,$FFFF ; Walk Left or Right 7
            68B6A : A000 FFFF          
(1)   42/   68B6E : 1001 9704 9200      PLCSonFld_WalkLR_8:	dc.w $1001,$9704,$9200,$A000,$FFFF ; Walk Left or Right 8
            68B74 : A000 FFFF          
(1)   43/   68B78 :                     ; ---------------------------------------------------------------------------
(1)   44/   68B78 : D000 9704 9310      PLCSonFld_WalkUp_1:	dc.w $D000,$9704,$9310,$A000,$FFFF ; Walk Up 1
            68B7E : A000 FFFF          
(1)   45/   68B82 : C000 9704 93E0      PLCSonFld_WalkUp_2:	dc.w $C000,$9704,$93E0,$A000,$FFFF ; Walk Up 2
            68B88 : A000 FFFF          
(1)   46/   68B8C : 0001 9704 94A0      PLCSonFld_WalkUp_3:	dc.w $0001,$9704,$94A0,$A000,$FFFF ; Walk Up 3
            68B92 : A000 FFFF          
(1)   47/   68B96 : 1001 9704 95A0      PLCSonFld_WalkUp_4:	dc.w $1001,$9704,$95A0,$A000,$FFFF ; Walk Up 4
            68B9C : A000 FFFF          
(1)   48/   68BA0 : 1001 9704 96B0      PLCSonFld_WalkUp_5:	dc.w $1001,$9704,$96B0,$A000,$FFFF ; Walk Up 5
            68BA6 : A000 FFFF          
(1)   49/   68BAA : 0001 9704 97C0      PLCSonFld_WalkUp_6:	dc.w $0001,$9704,$97C0,$A000,$FFFF ; Walk Up 6
            68BB0 : A000 FFFF          
(1)   50/   68BB4 : 0001 9704 98C0      PLCSonFld_WalkUp_7:	dc.w $0001,$9704,$98C0,$A000,$FFFF ; Walk Up 7
            68BBA : A000 FFFF          
(1)   51/   68BBE : D000 9704 99C0      PLCSonFld_WalkUp_8:	dc.w $D000,$9704,$99C0,$A000,$FFFF ; Walk Up 8
            68BC4 : A000 FFFF          
(1)   52/   68BC8 :                     ; ---------------------------------------------------------------------------
(1)   53/   68BC8 : 0001 9704 9A90      PLCSonFld_UncBall_1:	dc.w $0001,$9704,$9A90,$A000,$FFFF ; Ball frame 1 (Rolling/jumping) (Unused)
            68BCE : A000 FFFF          
(1)   54/   68BD2 : 0001 9704 9B90      PLCSonFld_UncBall_2:	dc.w $0001,$9704,$9B90,$A000,$FFFF ; Ball frame 2 (Rolling/jumping) (Unused)
            68BD8 : A000 FFFF          
(1)   55/   68BDC : 0001 9704 9C90      PLCSonFld_UncBall_3:	dc.w $0001,$9704,$9C90,$A000,$FFFF ; Ball frame 3 (Rolling/jumping) (Unused)
            68BE2 : A000 FFFF          
(1)   56/   68BE6 : (MACRO)              			even
(1)   56/   68BE6 : =>TRUE                       if notZ80(MOMCPU)
(1)   56/   68BE6 : =>FALSE                              if (*)&1
(1)   56/   68BE6 :                                             dc.b 0                          ;ds.b 1
(1)   56/   68BE6 : [56]                                 endif
(1)   56/   68BE6 : =>FALSE                      else
(1)   56/   68BE6 :                                     if ($)&1
(1)   56/   68BE6 :                                             db 0
(1)   56/   68BE6 : [56]                                 endif
(1)   56/   68BE6 : [56]                         endif
(1)   57/   68BE6 :                     ; ---------------------------------------------------------------------------
(1)   58/   68BE6 :                     ; ===========================================================================
(1)   59/   68BE6 :                     
   19510/   68BE6 :                     ; ---------------------------------------------------------------------------
   19511/   68BE6 :                     Map_SonicFields:
   19512/   68BE6 :                     	include	"PLCMAPANI/MAP_SonicFields.asm"
(1)    1/   68BE6 :                     ; ===========================================================================
(1)    2/   68BE6 :                     ; ---------------------------------------------------------------------------
(1)    3/   68BE6 :                     ; Mappings - Sonic Fields
(1)    4/   68BE6 :                     ; ---------------------------------------------------------------------------
(1)    5/   68BE6 :                     ; Guide as documented by Hivebrain
(1)    6/   68BE6 :                     ;
(1)    7/   68BE6 :                     ;	Each map block consists of six bytes:
(1)    8/   68BE6 :                     ;
(1)    9/   68BE6 :                     ;		dc.w $SS,$YY,$TT,$TT,$XX,$ZZ
(1)   10/   68BE6 :                     ;
(1)   11/   68BE6 :                     ;	$SS   = Shape and size of sprite piece
(1)   12/   68BE6 :                     ;	$YY   = Y position of sprite piece
(1)   13/   68BE6 :                     ;	$TTTT = Tile to read in VRAM
(1)   14/   68BE6 :                     ;	$XX   = X position of sprite piece
(1)   15/   68BE6 :                     ;	$ZZ   = whether it's the last map to use in the sprite or not (00 = Include next map in sprite/FF = End of sprite)
(1)   16/   68BE6 :                     ;
(1)   17/   68BE6 :                     ; ---------------------------------------------------------------------------
(1)   18/   68BE6 :                     ; ===========================================================================
(1)   19/   68BE6 :                     ; ---------------------------------------------------------------------------
(1)   20/   68BE6 : 0AF0 0500 F400      MapSonFld_StandForward:	dc.b $0A,$F0,$05,$00,$F4,$00	; standing (Facing forwards)
(1)   21/   68BEC : 0D08 0509 ECFF      			dc.b $0D,$08,$05,$09,$EC,$FF
(1)   22/   68BF2 : 09F0 0500 F600      MapSonFld_StandLftRht:	dc.b $09,$F0,$05,$00,$F6,$00	; standing (Facing left or right)
(1)   23/   68BF8 : 0A00 0506 F4FF      			dc.b $0A,$00,$05,$06,$F4,$FF
(1)   24/   68BFE : 0AF0 0500 F400      MapSonFld_StandBckward:	dc.b $0A,$F0,$05,$00,$F4,$00	; standing (facing backwards)
(1)   25/   68C04 : 0D08 0509 F4FF      			dc.b $0D,$08,$05,$09,$F4,$FF
(1)   26/   68C0A :                     ; ---------------------------------------------------------------------------
(1)   27/   68C0A : 0AF0 0500 F400      MapSonFld_WalkDwn_1:	dc.b $0A,$F0,$05,$00,$F4,$00	; Walk Down 1
(1)   28/   68C10 : 0508 0509 F7FF      			dc.b $05,$08,$05,$09,$F7,$FF
(1)   29/   68C16 : 0AF0 0500 F400      MapSonFld_WalkDwn_2:	dc.b $0A,$F0,$05,$00,$F4,$00	; Walk Down 2
(1)   30/   68C1C : 0908 0509 F0FF      			dc.b $09,$08,$05,$09,$F0,$FF
(1)   31/   68C22 : 0FF4 0500 ECFF      MapSonFld_WalkDwn_3:	dc.b $0F,$F4,$05,$00,$EC,$FF	; Walk Down 3
(1)   32/   68C28 : 0FF0 0500 ECFF      MapSonFld_WalkDwn_4:	dc.b $0F,$F0,$05,$00,$EC,$FF	; Walk Down 4
(1)   33/   68C2E : 0EF0 0500 EC00      MapSonFld_WalkDwn_5:	dc.b $0E,$F0,$05,$00,$EC,$00	; Walk Down 5
(1)   34/   68C34 : 0508 050C F9FF      			dc.b $05,$08,$05,$0C,$F9,$FF
(1)   35/   68C3A : 09F0 0500 F400      MapSonFld_WalkDwn_6:	dc.b $09,$F0,$05,$00,$F4,$00	; Walk Down 6
(1)   36/   68C40 : 0E00 0506 ECFF      			dc.b $0E,$00,$05,$06,$EC,$FF
(1)   37/   68C46 : 0FF4 0500 ECFF      MapSonFld_WalkDwn_7:	dc.b $0F,$F4,$05,$00,$EC,$FF	; Walk Down 7
(1)   38/   68C4C : 0BF1 0500 F3FF      MapSonFld_WalkDwn_8:	dc.b $0B,$F1,$05,$00,$F3,$FF	; Walk Down 8
(1)   39/   68C52 :                     ; ---------------------------------------------------------------------------
(1)   40/   68C52 : 0FF0 0500 F000      MapSonFld_WalkLR_1:	dc.b $0F,$F0,$05,$00,$F0,$00	; Walk Left or Right 1
(1)   41/   68C58 : 00FF 0510 10FF      			dc.b $00,$FF,$05,$10,$10,$FF
(1)   42/   68C5E : 0FF3 0500 F000      MapSonFld_WalkLR_2:	dc.b $0F,$F3,$05,$00,$F0,$00	; Walk Left or Right 2
(1)   43/   68C64 : 0413 0510 FAFF      			dc.b $04,$13,$05,$10,$FA,$FF
(1)   44/   68C6A : 0FF0 0500 F000      MapSonFld_WalkLR_3:	dc.b $0F,$F0,$05,$00,$F0,$00	; Walk Left or Right 3
(1)   45/   68C70 : 0010 0510 00FF      			dc.b $00,$10,$05,$10,$00,$FF
(1)   46/   68C76 : 0FF0 0500 F000      MapSonFld_WalkLR_4:	dc.b $0F,$F0,$05,$00,$F0,$00	; Walk Left or Right 4
(1)   47/   68C7C : 0010 0510 04FF      			dc.b $00,$10,$05,$10,$04,$FF
(1)   48/   68C82 : 0FF0 0500 F0FF      MapSonFld_WalkLR_5:	dc.b $0F,$F0,$05,$00,$F0,$FF	; Walk Left or Right 5
(1)   49/   68C88 : 0FF0 0500 F0FF      MapSonFld_WalkLR_6:	dc.b $0F,$F0,$05,$00,$F0,$FF	; Walk Left or Right 6
(1)   50/   68C8E : 0FF0 0500 F0FF      MapSonFld_WalkLR_7:	dc.b $0F,$F0,$05,$00,$F0,$FF	; Walk Left or Right 7
(1)   51/   68C94 : 0FF0 0500 F000      MapSonFld_WalkLR_8:	dc.b $0F,$F0,$05,$00,$F0,$00	; Walk Left or Right 8
(1)   52/   68C9A : 00FE 0510 10FF      			dc.b $00,$FE,$05,$10,$10,$FF
(1)   53/   68CA0 :                     ; ---------------------------------------------------------------------------
(1)   54/   68CA0 : 0BF0 0500 F400      MapSonFld_WalkUp_1:	dc.b $0B,$F0,$05,%00,$F4,$00	; Walk Up 1
(1)   55/   68CA6 : 0010 050C 00FF      			dc.b $00,$10,$05,$0C,$00,$FF
(1)   56/   68CAC : 0BF1 0500 F4FF      MapSonFld_WalkUp_2:	dc.b $0B,$F1,$05,$00,$F4,$FF	; Walk Up 2
(1)   57/   68CB2 : 0FF4 0500 F4FF      MapSonFld_WalkUp_3:	dc.b $0F,$F4,$05,$00,$F4,$FF	; Walk Up 3
(1)   58/   68CB8 : 0FF0 0500 F400      MapSonFld_WalkUp_4:	dc.b $0F,$F0,$05,$00,$F4,$00	; Walk Up 4
(1)   59/   68CBE : 0010 0510 F9FF      			dc.b $00,$10,$05,$10,$F9,$FF
(1)   60/   68CC4 : 0FF0 0500 F400      MapSonFld_WalkUp_5:	dc.b $0F,$F0,$05,$00,$F4,$00	; Walk Up 5
(1)   61/   68CCA : 0010 0510 F9FF      			dc.b $00,$10,$05,$10,$F9,$FF
(1)   62/   68CD0 : 0FF1 0500 F4FF      MapSonFld_WalkUp_6:	dc.b $0F,$F1,$05,$00,$F4,$FF	; Walk Up 6
(1)   63/   68CD6 : 0FF4 0500 F4FF      MapSonFld_WalkUp_7:	dc.b $0F,$F4,$05,$00,$F4,$FF	; Walk Up 7
(1)   64/   68CDC : 0BF0 0500 F400      MapSonFld_WalkUp_8:	dc.b $0B,$F0,$05,$00,$F4,$00	; Walk Up 8
(1)   65/   68CE2 : 0010 050C 00FF      			dc.b $00,$10,$05,$0C,$00,$FF
(1)   66/   68CE8 :                     ; ---------------------------------------------------------------------------
(1)   67/   68CE8 : 0FF0 0500 F0FF      MapSonFld_UncBall_1:	dc.b $0F,$F0,$05,$00,$F0,$FF	; Ball frame 1 (Rolling/jumping) (Unused)
(1)   68/   68CEE : 0F00 0500 00FF      MapSonFld_UncBall_2:	dc.b $0F,$00,$05,$00,$00,$FF	; Ball frame 2 (Rolling/jumping) (Unused)
(1)   69/   68CF4 : 0F00 0500 00FF      MapSonFld_UncBall_3:	dc.b $0F,$00,$05,$00,$00,$FF	; Ball frame 3 (Rolling/jumping) (Unused)
(1)   70/   68CFA : (MACRO)              			even
(1)   70/   68CFA : =>TRUE                       if notZ80(MOMCPU)
(1)   70/   68CFA : =>FALSE                              if (*)&1
(1)   70/   68CFA :                                             dc.b 0                          ;ds.b 1
(1)   70/   68CFA : [70]                                 endif
(1)   70/   68CFA : =>FALSE                      else
(1)   70/   68CFA :                                     if ($)&1
(1)   70/   68CFA :                                             db 0
(1)   70/   68CFA : [70]                                 endif
(1)   70/   68CFA : [70]                         endif
(1)   71/   68CFA :                     ; ---------------------------------------------------------------------------
(1)   72/   68CFA :                     ; ===========================================================================
(1)   73/   68CFA :                     
   19513/   68CFA :                     ; ---------------------------------------------------------------------------
   19514/   68CFA :                     ; ===========================================================================
   19515/   68CFA :                     ; ---------------------------------------------------------------------------
   19516/   68CFA :                     ; Animation, PLC, mapping & Main index block - Tails Fields
   19517/   68CFA :                     ; ---------------------------------------------------------------------------
   19518/   68CFA :                     ANI_TailsFields:
   19519/   68CFA :                     	include	"PLCMAPANI/ANI_TailsFields.asm"
(1)    1/   68CFA :                     ; ===========================================================================
(1)    2/   68CFA :                     ; ---------------------------------------------------------------------------
(1)    3/   68CFA :                     ; Animation scripts - Tails Fields
(1)    4/   68CFA :                     ; ---------------------------------------------------------------------------
(1)    5/   68CFA :                     ;
(1)    6/   68CFA :                     ; Each animation script starts with 3 bytes of data
(1)    7/   68CFA :                     ;
(1)    8/   68CFA :                     ;		dc.b $XX,$YY,$ZZ
(1)    9/   68CFA :                     ;
(1)   10/   68CFA :                     ;	$XX   = Speed to run animation at (00 Slow/3F Fast)
(1)   11/   68CFA :                     ;		(Note: if it is 40, then it's a special animation speed that
(1)   12/   68CFA :                     ;		is controled by routines somewhere)
(1)   13/   68CFA :                     ;	$YY   = Number of frames within script
(1)   14/   68CFA :                     ;	$ZZ   = (unknown)
(1)   15/   68CFA :                     ;
(1)   16/   68CFA :                     ; Then each byte in the line under, is each frame to use in that specific script
(1)   17/   68CFA :                     ; (Basically the same as S1 and S2)
(1)   18/   68CFA :                     ;
(1)   19/   68CFA :                     ; ---------------------------------------------------------------------------
(1)   20/   68CFA :                     ; ===========================================================================
(1)   21/   68CFA :                     ; ---------------------------------------------------------------------------
(1)   22/   68CFA : 000A                			dc.w AniTalFld_Normal-ANI_TailsFields ; Standing animation (all directions)
(1)   23/   68CFC : 0010                			dc.w AniTalFld_WalkDw-ANI_TailsFields ; running animation (Moving downwards)
(1)   24/   68CFE : 001C                			dc.w AniTalFld_WalkLR-ANI_TailsFields ; running animation (Moving Left or Right)
(1)   25/   68D00 : 0028                			dc.w AniTalFld_WalkUp-ANI_TailsFields ; running animation (Moving Upwards
(1)   26/   68D02 : 0034                			dc.w AniTalFld_Ball-ANI_TailsFields ; Ball animation (Unused) (Could be jumping or rolling)
(1)   27/   68D04 :                     ; ---------------------------------------------------------------------------
(1)   28/   68D04 : 0002 00             AniTalFld_Normal:	dc.b $00,$02,$00		; Standing (00 Forward/01 Left/Right/02 Backwards)
(1)   29/   68D07 : 0001 02             			dc.b $00,$01,$02
(1)   30/   68D0A : 2007 00             AniTalFld_WalkDw:	dc.b $20,$07,$00		; Down running
(1)   31/   68D0D : 0304 0506 0708      			dc.b $03,$04,$05,$06,$07,$08,$09,$0A,$00
            68D13 : 090A 00          
(1)   32/   68D16 : 2007 00             AniTalFld_WalkLR:	dc.b $20,$07,$00		; LR running
(1)   33/   68D19 : 0B0C 0D0E 0F10      			dc.b $0B,$0C,$0D,$0E,$0F,$10,$11,$12,$00
            68D1F : 1112 00          
(1)   34/   68D22 : 2007 00             AniTalFld_WalkUp:	dc.b $20,$07,$00		; Up Running
(1)   35/   68D25 : 1314 1516 1718      			dc.b $13,$14,$15,$16,$17,$18,$19,$1A,$00
            68D2B : 191A 00          
(1)   36/   68D2E : 8003 00             AniTalFld_Ball:		dc.b $80,$03,$00		; Ball Animation (Unused)
(1)   37/   68D31 : 1B1C 1D1C 00        			dc.b $1B,$1C,$1D,$1C,$00
(1)   38/   68D36 : (MACRO)              			even
(1)   38/   68D36 : =>TRUE                       if notZ80(MOMCPU)
(1)   38/   68D36 : =>FALSE                              if (*)&1
(1)   38/   68D36 :                                             dc.b 0                          ;ds.b 1
(1)   38/   68D36 : [38]                                 endif
(1)   38/   68D36 : =>FALSE                      else
(1)   38/   68D36 :                                     if ($)&1
(1)   38/   68D36 :                                             db 0
(1)   38/   68D36 : [38]                                 endif
(1)   38/   68D36 : [38]                         endif
(1)   39/   68D36 :                     ; ---------------------------------------------------------------------------
(1)   40/   68D36 :                     ; ===========================================================================
(1)   41/   68D36 :                     
   19520/   68D36 :                     ; ---------------------------------------------------------------------------
   19521/   68D36 :                     PLCMAP_TailsFields_MainIndex:
   19522/   68D36 :                     	include	"PLCMAPANI/PLCMAP_IndxBlck_TailsFields.asm"
(1)    1/   68D36 :                     ; ===========================================================================
(1)    2/   68D36 :                     ; ---------------------------------------------------------------------------
(1)    3/   68D36 :                     ; PLC and Mapping Main Index Block - Tails Fields
(1)    4/   68D36 :                     ; ---------------------------------------------------------------------------
(1)    5/   68D36 :                     ; An example of the setup:
(1)    6/   68D36 :                     ;
(1)    7/   68D36 :                     ;		dc.w Location-Map_TailsFields,			Location-PLC_TailsFields
(1)    8/   68D36 :                     ;		dc.w Location-Map_TailsFields,			Location-PLC_TailsFields
(1)    9/   68D36 :                     ;		dc.w Location-Map_TailsFields,			Location-PLC_TailsFields
(1)   10/   68D36 :                     ; etc, etc.
(1)   11/   68D36 :                     ; ---------------------------------------------------------------------------
(1)   12/   68D36 :                     ; ===========================================================================
(1)   13/   68D36 : 0000 0000           		dc.w MapTalFld_StandForward-Map_TailsFields,	PLCTalFld_StandForward-PLC_TailsFields
(1)   14/   68D3A : 0006 000A           		dc.w MapTalFld_StandLftRht-Map_TailsFields,	PLCTalFld_StandLftRht-PLC_TailsFields
(1)   15/   68D3E : 000C 0014           		dc.w MapTalFld_StandBckward-Map_TailsFields,	PLCTalFld_StandBckward-PLC_TailsFields
(1)   16/   68D42 : 0012 001E           		dc.w MapTalFld_WalkDwn_1-Map_TailsFields,	PLCTalFld_WalkDwn_1-PLC_TailsFields
(1)   17/   68D46 : 0018 0028           		dc.w MapTalFld_WalkDwn_2-Map_TailsFields,	PLCTalFld_WalkDwn_2-PLC_TailsFields
(1)   18/   68D4A : 001E 0032           		dc.w MapTalFld_WalkDwn_3-Map_TailsFields,	PLCTalFld_WalkDwn_3-PLC_TailsFields
(1)   19/   68D4E : 0024 003C           		dc.w MapTalFld_WalkDwn_4-Map_TailsFields,	PLCTalFld_WalkDwn_4-PLC_TailsFields
(1)   20/   68D52 : 002A 0046           		dc.w MapTalFld_WalkDwn_5-Map_TailsFields,	PLCTalFld_WalkDwn_5-PLC_TailsFields
(1)   21/   68D56 : 0030 0050           		dc.w MapTalFld_WalkDwn_6-Map_TailsFields,	PLCTalFld_WalkDwn_6-PLC_TailsFields
(1)   22/   68D5A : 0036 005A           		dc.w MapTalFld_WalkDwn_7-Map_TailsFields,	PLCTalFld_WalkDwn_7-PLC_TailsFields
(1)   23/   68D5E : 003C 0064           		dc.w MapTalFld_WalkDwn_8-Map_TailsFields,	PLCTalFld_WalkDwn_8-PLC_TailsFields
(1)   24/   68D62 : 0042 006E           		dc.w MapTalFld_WalkLR_1-Map_TailsFields,	PLCTalFld_WalkLR_1-PLC_TailsFields
(1)   25/   68D66 : 004E 0078           		dc.w MapTalFld_WalkLR_2-Map_TailsFields,	PLCTalFld_WalkLR_2-PLC_TailsFields
(1)   26/   68D6A : 005A 0082           		dc.w MapTalFld_WalkLR_3-Map_TailsFields,	PLCTalFld_WalkLR_3-PLC_TailsFields
(1)   27/   68D6E : 0066 008C           		dc.w MapTalFld_WalkLR_4-Map_TailsFields,	PLCTalFld_WalkLR_4-PLC_TailsFields
(1)   28/   68D72 : 0072 0096           		dc.w MapTalFld_WalkLR_5-Map_TailsFields,	PLCTalFld_WalkLR_5-PLC_TailsFields
(1)   29/   68D76 : 007E 00A0           		dc.w MapTalFld_WalkLR_6-Map_TailsFields,	PLCTalFld_WalkLR_6-PLC_TailsFields
(1)   30/   68D7A : 008A 00AA           		dc.w MapTalFld_WalkLR_7-Map_TailsFields,	PLCTalFld_WalkLR_7-PLC_TailsFields
(1)   31/   68D7E : 0096 00B4           		dc.w MapTalFld_WalkLR_8-Map_TailsFields,	PLCTalFld_WalkLR_8-PLC_TailsFields
(1)   32/   68D82 : 00A2 00BE           		dc.w MapTalFld_WalkUp_1-Map_TailsFields,	PLCTalFld_WalkUp_1-PLC_TailsFields
(1)   33/   68D86 : 00A8 00C8           		dc.w MapTalFld_WalkUp_2-Map_TailsFields,	PLCTalFld_WalkUp_2-PLC_TailsFields
(1)   34/   68D8A : 00AE 00D2           		dc.w MapTalFld_WalkUp_3-Map_TailsFields,	PLCTalFld_WalkUp_3-PLC_TailsFields
(1)   35/   68D8E : 00B4 00DC           		dc.w MapTalFld_WalkUp_4-Map_TailsFields,	PLCTalFld_WalkUp_4-PLC_TailsFields
(1)   36/   68D92 : 00BA 00E6           		dc.w MapTalFld_WalkUp_5-Map_TailsFields,	PLCTalFld_WalkUp_5-PLC_TailsFields
(1)   37/   68D96 : 00C0 00F0           		dc.w MapTalFld_WalkUp_6-Map_TailsFields,	PLCTalFld_WalkUp_6-PLC_TailsFields
(1)   38/   68D9A : 00C6 00FA           		dc.w MapTalFld_WalkUp_7-Map_TailsFields,	PLCTalFld_WalkUp_7-PLC_TailsFields
(1)   39/   68D9E : 00CC 0104           		dc.w MapTalFld_WalkUp_8-Map_TailsFields,	PLCTalFld_WalkUp_8-PLC_TailsFields
(1)   40/   68DA2 : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   41/   68DA6 : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   42/   68DAA : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   43/   68DAE : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   44/   68DB2 : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   45/   68DB6 : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   46/   68DBA : 00D2 010E           		dc.w MapTalFld_UncBall_1-Map_TailsFields,	PLCTalFld_UncBall_1-PLC_TailsFields
(1)   47/   68DBE : 00D8 0118           		dc.w MapTalFld_UncBall_2-Map_TailsFields,	PLCTalFld_UncBall_2-PLC_TailsFields
(1)   48/   68DC2 : 00DE 0122           		dc.w MapTalFld_UncBall_3-Map_TailsFields,	PLCTalFld_UncBall_3-PLC_TailsFields
(1)   49/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)   50/   68DC6 :                     ; ===========================================================================
(1)   51/   68DC6 :                     
   19523/   68DC6 :                     ; ---------------------------------------------------------------------------
   19524/   68DC6 :                     PLC_TailsFields:
   19525/   68DC6 :                     	include	"PLCMAPANI/PLC_TailsFields.asm"
(1)    1/   68DC6 :                     ; ===========================================================================
(1)    2/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)    3/   68DC6 :                     ; Pattern Load Cues - Tails Fields
(1)    4/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)    5/   68DC6 :                     ; Guide as documented by Hivebrain
(1)    6/   68DC6 :                     ;
(1)    7/   68DC6 :                     ;	Each load cue consists of ten bytes:
(1)    8/   68DC6 :                     ;
(1)    9/   68DC6 :                     ;		dc.w $QQQQ,$----,$RRR-,$DDDD,$EEEE
(1)   10/   68DC6 :                     ;
(1)   11/   68DC6 :                     ;	$QQQQ = Number of tiles to load from Rom
(1)   12/   68DC6 :                     ;	$RRR- = Location to start reading the tiles
(1)   13/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)   14/   68DC6 :                     ; the rest were not mentioned on the guide, and I am assuming are:
(1)   15/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)   16/   68DC6 :                     ;	$---- = Unknown
(1)   17/   68DC6 :                     ;	$DDDD = I think it's some sort of dumping location (to dump the art)
(1)   18/   68DC6 :                     ;	$EEEE = whether it's the last PLC section to use or not (00 Include next PLC section/FF End of PLC section)
(1)   19/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)   20/   68DC6 :                     ; ===========================================================================
(1)   21/   68DC6 :                     ; ---------------------------------------------------------------------------
(1)   22/   68DC6 : 0001 9705 8000      PLCTalFld_StandForward:	dc.w $0001,$9705,$8000,$A400,$FFFF
            68DCC : A400 FFFF          
(1)   23/   68DD0 : C000 9705 8100      PLCTalFld_StandLftRht:	dc.w $C000,$9705,$8100,$A400,$FFFF
            68DD6 : A400 FFFF          
(1)   24/   68DDA : 0001 9705 81C0      PLCTalFld_StandBckward:	dc.w $0001,$9705,$81C0,$A400,$FFFF
            68DE0 : A400 FFFF          
(1)   25/   68DE4 :                     ; ---------------------------------------------------------------------------
(1)   26/   68DE4 : C000 9705 82C0      PLCTalFld_WalkDwn_1:	dc.w $C000,$9705,$82C0,$A400,$FFFF
            68DEA : A400 FFFF          
(1)   27/   68DEE : 0001 9705 8380      PLCTalFld_WalkDwn_2:	dc.w $0001,$9705,$8380,$A400,$FFFF
            68DF4 : A400 FFFF          
(1)   28/   68DF8 : C000 9705 8480      PLCTalFld_WalkDwn_3:	dc.w $C000,$9705,$8480,$A400,$FFFF
            68DFE : A400 FFFF          
(1)   29/   68E02 : C000 9705 8540      PLCTalFld_WalkDwn_4:	dc.w $C000,$9705,$8540,$A400,$FFFF
            68E08 : A400 FFFF          
(1)   30/   68E0C : 0001 9705 8600      PLCTalFld_WalkDwn_5:	dc.w $0001,$9705,$8600,$A400,$FFFF
            68E12 : A400 FFFF          
(1)   31/   68E16 : 0001 9705 8700      PLCTalFld_WalkDwn_6:	dc.w $0001,$9705,$8700,$A400,$FFFF
            68E1C : A400 FFFF          
(1)   32/   68E20 : C000 9705 8800      PLCTalFld_WalkDwn_7:	dc.w $C000,$9705,$8800,$A400,$FFFF
            68E26 : A400 FFFF          
(1)   33/   68E2A : C000 9705 88C0      PLCTalFld_WalkDwn_8:	dc.w $C000,$9705,$88C0,$A400,$FFFF
            68E30 : A400 FFFF          
(1)   34/   68E34 :                     ; ---------------------------------------------------------------------------
(1)   35/   68E34 : 3001 9705 8980      PLCTalFld_WalkLR_1:	dc.w $3001,$9705,$8980,$A400,$FFFF
            68E3A : A400 FFFF          
(1)   36/   68E3E : 2001 9705 8AB0      PLCTalFld_WalkLR_2:	dc.w $2001,$9705,$8AB0,$A400,$FFFF
            68E44 : A400 FFFF          
(1)   37/   68E48 : 2001 9705 8BD0      PLCTalFld_WalkLR_3:	dc.w $2001,$9705,$8BD0,$A400,$FFFF
            68E4E : A400 FFFF          
(1)   38/   68E52 : 2001 9705 8CF0      PLCTalFld_WalkLR_4:	dc.w $2001,$9705,$8CF0,$A400,$FFFF
            68E58 : A400 FFFF          
(1)   39/   68E5C : 3001 9705 8E10      PLCTalFld_WalkLR_5:	dc.w $3001,$9705,$8E10,$A400,$FFFF
            68E62 : A400 FFFF          
(1)   40/   68E66 : 2001 9705 8F40      PLCTalFld_WalkLR_6:	dc.w $2001,$9705,$8F40,$A400,$FFFF
            68E6C : A400 FFFF          
(1)   41/   68E70 : 2001 9705 9060      PLCTalFld_WalkLR_7:	dc.w $2001,$9705,$9060,$A400,$FFFF
            68E76 : A400 FFFF          
(1)   42/   68E7A : 2001 9705 9180      PLCTalFld_WalkLR_8:	dc.w $2001,$9705,$9180,$A400,$FFFF
            68E80 : A400 FFFF          
(1)   43/   68E84 :                     ; ---------------------------------------------------------------------------
(1)   44/   68E84 : C000 9705 92A0      PLCTalFld_WalkUp_1:	dc.w $C000,$9705,$92A0,$A400,$FFFF
            68E8A : A400 FFFF          
(1)   45/   68E8E : 0001 9705 9360      PLCTalFld_WalkUp_2:	dc.w $0001,$9705,$9360,$A400,$FFFF
            68E94 : A400 FFFF          
(1)   46/   68E98 : 0001 9705 9460      PLCTalFld_WalkUp_3:	dc.w $0001,$9705,$9460,$A400,$FFFF
            68E9E : A400 FFFF          
(1)   47/   68EA2 : 0001 9705 9560      PLCTalFld_WalkUp_4:	dc.w $0001,$9705,$9560,$A400,$FFFF
            68EA8 : A400 FFFF          
(1)   48/   68EAC : 0001 9705 9660      PLCTalFld_WalkUp_5:	dc.w $0001,$9705,$9660,$A400,$FFFF
            68EB2 : A400 FFFF          
(1)   49/   68EB6 : 0001 9705 9760      PLCTalFld_WalkUp_6:	dc.w $0001,$9705,$9760,$A400,$FFFF
            68EBC : A400 FFFF          
(1)   50/   68EC0 : 0001 9705 9860      PLCTalFld_WalkUp_7:	dc.w $0001,$9705,$9860,$A400,$FFFF
            68EC6 : A400 FFFF          
(1)   51/   68ECA : 0001 9705 9960      PLCTalFld_WalkUp_8:	dc.w $0001,$9705,$9960,$A400,$FFFF
            68ED0 : A400 FFFF          
(1)   52/   68ED4 :                     ; ---------------------------------------------------------------------------
(1)   53/   68ED4 : 9000 9705 9A60      PLCTalFld_UncBall_1:	dc.w $9000,$9705,$9A60,$A400,$FFFF
            68EDA : A400 FFFF          
(1)   54/   68EDE : 9000 9705 9AF0      PLCTalFld_UncBall_2:	dc.w $9000,$9705,$9AF0,$A400,$FFFF
            68EE4 : A400 FFFF          
(1)   55/   68EE8 : 9000 9705 9B80      PLCTalFld_UncBall_3:	dc.w $9000,$9705,$9B80,$A400,$FFFF
            68EEE : A400 FFFF          
(1)   56/   68EF2 : (MACRO)              			even
(1)   56/   68EF2 : =>TRUE                       if notZ80(MOMCPU)
(1)   56/   68EF2 : =>FALSE                              if (*)&1
(1)   56/   68EF2 :                                             dc.b 0                          ;ds.b 1
(1)   56/   68EF2 : [56]                                 endif
(1)   56/   68EF2 : =>FALSE                      else
(1)   56/   68EF2 :                                     if ($)&1
(1)   56/   68EF2 :                                             db 0
(1)   56/   68EF2 : [56]                                 endif
(1)   56/   68EF2 : [56]                         endif
(1)   57/   68EF2 :                     ; ---------------------------------------------------------------------------
(1)   58/   68EF2 :                     ; ===========================================================================
(1)   59/   68EF2 :                     
   19526/   68EF2 :                     ; ---------------------------------------------------------------------------
   19527/   68EF2 :                     Map_TailsFields:
   19528/   68EF2 :                     	include	"PLCMAPANI/MAP_TailsFields.asm"
(1)    1/   68EF2 :                     ; ===========================================================================
(1)    2/   68EF2 :                     ; ---------------------------------------------------------------------------
(1)    3/   68EF2 :                     ; Mappings - Tails Fields
(1)    4/   68EF2 :                     ; ---------------------------------------------------------------------------
(1)    5/   68EF2 :                     ; Guide as documented by Hivebrain
(1)    6/   68EF2 :                     ;
(1)    7/   68EF2 :                     ;	Each map block consists of six bytes:
(1)    8/   68EF2 :                     ;
(1)    9/   68EF2 :                     ;		dc.w $SS,$YY,$TT,$TT,$XX,$ZZ
(1)   10/   68EF2 :                     ;
(1)   11/   68EF2 :                     ;	$SS   = Shape and size of sprite piece
(1)   12/   68EF2 :                     ;	$YY   = Y position of sprite piece
(1)   13/   68EF2 :                     ;	$TTTT = Tile to read in VRAM
(1)   14/   68EF2 :                     ;	$XX   = X position of sprite piece
(1)   15/   68EF2 :                     ;	$ZZ   = whether it's the last map to use in the sprite or not (00 = Include next map in sprite/FF = End of sprite)
(1)   16/   68EF2 :                     ;
(1)   17/   68EF2 :                     ; ---------------------------------------------------------------------------
(1)   18/   68EF2 :                     ; ===========================================================================
(1)   19/   68EF2 :                     ; ---------------------------------------------------------------------------
(1)   20/   68EF2 : 0FF2 0520 ECFF      MapTalFld_StandForward:	dc.b $0F,$F2,$05,$20,$EC,$FF
(1)   21/   68EF8 : 0BF2 0520 F4FF      MapTalFld_StandLftRht:	dc.b $0B,$F2,$05,$20,$F4,$FF
(1)   22/   68EFE : 0FF2 0520 F4FF      MapTalFld_StandBckward:	dc.b $0F,$F2,$05,$20,$F4,$FF
(1)   23/   68F04 :                     ; ---------------------------------------------------------------------------
(1)   24/   68F04 : 0BF2 0520 F4FF      MapTalFld_WalkDwn_1:	dc.b $0B,$F2,$05,$20,$F4,$FF
(1)   25/   68F0A : 0FF2 0520 ECFF      MapTalFld_WalkDwn_2:	dc.b $0F,$F2,$05,$20,$EC,$FF
(1)   26/   68F10 : 0EF2 0520 ECFF      MapTalFld_WalkDwn_3:	dc.b $0E,$F2,$05,$20,$EC,$FF
(1)   27/   68F16 : 0EF2 0520 ECFF      MapTalFld_WalkDwn_4:	dc.b $0E,$F2,$05,$20,$EC,$FF
(1)   28/   68F1C : 0FF2 0520 ECFF      MapTalFld_WalkDwn_5:	dc.b $0F,$F2,$05,$20,$EC,$FF
(1)   29/   68F22 : 0FF2 0520 ECFF      MapTalFld_WalkDwn_6:	dc.b $0F,$F2,$05,$20,$EC,$FF
(1)   30/   68F28 : 0EF2 0520 ECFF      MapTalFld_WalkDwn_7:	dc.b $0E,$F2,$05,$20,$EC,$FF
(1)   31/   68F2E : 0EF3 0520 ECFF      MapTalFld_WalkDwn_8:	dc.b $0E,$F3,$05,$20,$EC,$FF
(1)   32/   68F34 :                     ; ---------------------------------------------------------------------------
(1)   33/   68F34 : 0FF2 0520 F000      MapTalFld_WalkLR_1:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   34/   68F3A : 02FA 0530 10FF      			dc.b $02,$FA,$05,$30,$10,$FF
(1)   35/   68F40 : 0FF2 0520 F000      MapTalFld_WalkLR_2:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   36/   68F46 : 01FD 0530 10FF      			dc.b $01,$FD,$05,$30,$10,$FF
(1)   37/   68F4C : 0FF2 0520 F000      MapTalFld_WalkLR_3:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   38/   68F52 : 01FE 0530 10FF      			dc.b $01,$FE,$05,$30,$10,$FF
(1)   39/   68F58 : 0FF2 0520 F000      MapTalFld_WalkLR_4:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   40/   68F5E : 01FB 0530 10FF      			dc.b $01,$FB,$05,$30,$10,$FF
(1)   41/   68F64 : 0FF2 0520 F000      MapTalFld_WalkLR_5:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   42/   68F6A : 02FA 0530 10FF      			dc.b $02,$FA,$05,$30,$10,$FF
(1)   43/   68F70 : 0FF2 0520 F000      MapTalFld_WalkLR_6:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   44/   68F76 : 01FD 0530 10FF      			dc.b $01,$FD,$05,$30,$10,$FF
(1)   45/   68F7C : 0FF2 0520 F000      MapTalFld_WalkLR_7:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   46/   68F82 : 01FC 0530 10FF      			dc.b $01,$FC,$05,$30,$10,$FF
(1)   47/   68F88 : 0FF2 0520 F000      MapTalFld_WalkLR_8:	dc.b $0F,$F2,$05,$20,$F0,$00
(1)   48/   68F8E : 01FB 0530 10FF      			dc.b $01,$FB,$05,$30,$10,$FF
(1)   49/   68F94 :                     ; ---------------------------------------------------------------------------
(1)   50/   68F94 : 0BF0 0520 F4FF      MapTalFld_WalkUp_1:	dc.b $0B,$F0,$05,$20,$F4,$FF
(1)   51/   68F9A : 0FF2 0520 F4FF      MapTalFld_WalkUp_2:	dc.b $0F,$F2,$05,$20,$F4,$FF
(1)   52/   68FA0 : 0FF4 0520 F4FF      MapTalFld_WalkUp_3:	dc.b $0F,$F4,$05,$20,$F4,$FF
(1)   53/   68FA6 : 0FF2 0520 F4FF      MapTalFld_WalkUp_4:	dc.b $0F,$F2,$05,$20,$F4,$FF
(1)   54/   68FAC : 0FF0 0520 F4FF      MapTalFld_WalkUp_5:	dc.b $0F,$F0,$05,$20,$F4,$FF
(1)   55/   68FB2 : 0FF2 0520 F4FF      MapTalFld_WalkUp_6:	dc.b $0F,$F2,$05,$20,$F4,$FF
(1)   56/   68FB8 : 0FF4 0520 F4FF      MapTalFld_WalkUp_7:	dc.b $0F,$F4,$05,$20,$F4,$FF
(1)   57/   68FBE : 0FF2 0520 F4FF      MapTalFld_WalkUp_8:	dc.b $0F,$F2,$05,$20,$F4,$FF
(1)   58/   68FC4 :                     ; ---------------------------------------------------------------------------
(1)   59/   68FC4 : 0AF4 0520 F4FF      MapTalFld_UncBall_1:	dc.b $0A,$F4,$05,$20,$F4,$FF
(1)   60/   68FCA : 0AF4 0520 F4FF      MapTalFld_UncBall_2:	dc.b $0A,$F4,$05,$20,$F4,$FF
(1)   61/   68FD0 : 0AF4 0520 F4FF      MapTalFld_UncBall_3:	dc.b $0A,$F4,$05,$20,$F4,$FF
(1)   62/   68FD6 : (MACRO)              			even
(1)   62/   68FD6 : =>TRUE                       if notZ80(MOMCPU)
(1)   62/   68FD6 : =>FALSE                              if (*)&1
(1)   62/   68FD6 :                                             dc.b 0                          ;ds.b 1
(1)   62/   68FD6 : [62]                                 endif
(1)   62/   68FD6 : =>FALSE                      else
(1)   62/   68FD6 :                                     if ($)&1
(1)   62/   68FD6 :                                             db 0
(1)   62/   68FD6 : [62]                                 endif
(1)   62/   68FD6 : [62]                         endif
(1)   63/   68FD6 :                     ; ---------------------------------------------------------------------------
(1)   64/   68FD6 :                     ; ===========================================================================
(1)   65/   68FD6 :                     
   19529/   68FD6 :                     ; ---------------------------------------------------------------------------
   19530/   68FD6 :                     ; ===========================================================================
   19531/   68FD6 :                     ; ---------------------------------------------------------------------------
   19532/   68FD6 :                     ; Unknown Data
   19533/   68FD6 :                     ; ---------------------------------------------------------------------------
   19534/   68FD6 :                     ; Data Location (00068FD6 - 0006AC5F)
   19535/   68FD6 :                     ; Striped out
   19536/   68FD6 :                     ; UnkData_00068FD6:
   19537/   68FD6 :                     		binclude	"UnknownCodes/UnknownData_00068FD6.bin"
   19538/   6AC60 :                     ; ---------------------------------------------------------------------------
   19539/   6AC60 :                     ; ===========================================================================
   19540/   6AC60 :                     ; ---------------------------------------------------------------------------
   19541/   6AC60 :                     ; Align to $0006C000, Unknown Data
   19542/   6AC60 :                     ; ---------------------------------------------------------------------------
   19543/   6AC60 : (MACRO)              	align $2000
   19543/   6AC60 :  (MACRO-2)                   cnop 0,$2000
   19543/   6AC60 : =>TRUE                       if notZ80(MOMCPU)
   19543/   6AC60 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19543/   6AC60 : =>TRUE                       if notZ80(MOMCPU)
   19543/   6AC60 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19543/   6AC60 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19543/   6AC60 : =>TRUE                               else
   19543/   6C000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19543/   6C000 : [19543]                              endif
   19543/   6C000 : =>FALSE                      else
   19543/   6C000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19543/   6C000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19543/   6C000 :                                     else
   19543/   6C000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19543/   6C000 :                                                     db 0
   19543/   6C000 :                                             endm
   19543/   6C000 : [19543]                              endif
   19543/   6C000 : [19543]                      endif
   19543/   6C000 : =>FALSE                      else
   19543/   6C000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19543/   6C000 : [19543]                      endif
   19544/   6C000 :                     ; ---------------------------------------------------------------------------
   19545/   6C000 :                     ; Data Location (0006C000 - 0006CE07)
   19546/   6C000 :                     ; Striped out
   19547/   6C000 :                     ; UnkData_0006C000:
   19548/   6C000 :                     		binclude	"UnknownCodes/UnknownData_0006C000.bin"
   19549/   6CE08 :                     ; ---------------------------------------------------------------------------
   19550/   6CE08 :                     ; ===========================================================================
   19551/   6CE08 :                     ; ---------------------------------------------------------------------------
   19552/   6CE08 :                     ; Unknown Data
   19553/   6CE08 :                     ; ---------------------------------------------------------------------------
   19554/   6CE08 :                     ; Data Location (0006CE08 - 0006D1FF)
   19555/   6CE08 :                     ; Striped out
   19556/   6CE08 :                     ; UnkData_0006CE08:
   19557/   6CE08 :                     		binclude	"UnknownCodes/UnknownData_0006CE08.bin"
   19558/   6D200 :                     ; ---------------------------------------------------------------------------
   19559/   6D200 :                     ; ===========================================================================
   19560/   6D200 :                     ; ---------------------------------------------------------------------------
   19561/   6D200 :                     ; Align to $00070000, Unknown Data
   19562/   6D200 :                     ; ---------------------------------------------------------------------------
   19563/   6D200 : (MACRO)              	align $4000
   19563/   6D200 :  (MACRO-2)                   cnop 0,$4000
   19563/   6D200 : =>TRUE                       if notZ80(MOMCPU)
   19563/   6D200 :   (MACRO-3)                          org (*-1+($4000)-((*-1+(-(0)))#($4000)))
   19563/   6D200 : =>TRUE                       if notZ80(MOMCPU)
   19563/   6D200 : =>FALSE                              if (*-1+($4000)-((*-1+(-(0)))#($4000))) < *
   19563/   6D200 :                                             error "too much stuff before org $\{(*-1+($4000)-((*-1+(-(0)))#($4000)))} ($\{(*-(*-1+($4000)-((*-1+(-(0)))#($4000))))} bytes)"
   19563/   6D200 : =>TRUE                               else
   19563/   70000 :                                             !org (*-1+($4000)-((*-1+(-(0)))#($4000)))
   19563/   70000 : [19563]                              endif
   19563/   70000 : =>FALSE                      else
   19563/   70000 :                                     if (*-1+($4000)-((*-1+(-(0)))#($4000))) < $
   19563/   70000 :                                             error "too much stuff before org 0\{(*-1+($4000)-((*-1+(-(0)))#($4000)))}h (0\{($-(*-1+($4000)-((*-1+(-(0)))#($4000))))}h bytes)"
   19563/   70000 :                                     else
   19563/   70000 :                                             while (*-1+($4000)-((*-1+(-(0)))#($4000))) > $
   19563/   70000 :                                                     db 0
   19563/   70000 :                                             endm
   19563/   70000 : [19563]                              endif
   19563/   70000 : [19563]                      endif
   19563/   70000 : =>FALSE                      else
   19563/   70000 :                                     org ($-1+($4000)-(($-1+(-(0)))#($4000)))
   19563/   70000 : [19563]                      endif
   19564/   70000 :                     ; ---------------------------------------------------------------------------
   19565/   70000 :                     ; Data Location (00070000 - 00071813)
   19566/   70000 :                     ; Striped out
   19567/   70000 :                     ; UnkData_00070000:
   19568/   70000 :                     		binclude	"UnknownCodes/UnknownData_00070000.bin"
   19569/   71814 :                     ; ---------------------------------------------------------------------------
   19570/   71814 :                     ; ===========================================================================
   19571/   71814 :                     ; ---------------------------------------------------------------------------
   19572/   71814 :                     ; Align to $00072000, Unknown Data
   19573/   71814 :                     ; ---------------------------------------------------------------------------
   19574/   71814 : (MACRO)              	align $800
   19574/   71814 :  (MACRO-2)                   cnop 0,$800
   19574/   71814 : =>TRUE                       if notZ80(MOMCPU)
   19574/   71814 :   (MACRO-3)                          org (*-1+($800)-((*-1+(-(0)))#($800)))
   19574/   71814 : =>TRUE                       if notZ80(MOMCPU)
   19574/   71814 : =>FALSE                              if (*-1+($800)-((*-1+(-(0)))#($800))) < *
   19574/   71814 :                                             error "too much stuff before org $\{(*-1+($800)-((*-1+(-(0)))#($800)))} ($\{(*-(*-1+($800)-((*-1+(-(0)))#($800))))} bytes)"
   19574/   71814 : =>TRUE                               else
   19574/   72000 :                                             !org (*-1+($800)-((*-1+(-(0)))#($800)))
   19574/   72000 : [19574]                              endif
   19574/   72000 : =>FALSE                      else
   19574/   72000 :                                     if (*-1+($800)-((*-1+(-(0)))#($800))) < $
   19574/   72000 :                                             error "too much stuff before org 0\{(*-1+($800)-((*-1+(-(0)))#($800)))}h (0\{($-(*-1+($800)-((*-1+(-(0)))#($800))))}h bytes)"
   19574/   72000 :                                     else
   19574/   72000 :                                             while (*-1+($800)-((*-1+(-(0)))#($800))) > $
   19574/   72000 :                                                     db 0
   19574/   72000 :                                             endm
   19574/   72000 : [19574]                              endif
   19574/   72000 : [19574]                      endif
   19574/   72000 : =>FALSE                      else
   19574/   72000 :                                     org ($-1+($800)-(($-1+(-(0)))#($800)))
   19574/   72000 : [19574]                      endif
   19575/   72000 :                     ; ---------------------------------------------------------------------------
   19576/   72000 :                     ; Data Location (00072000 - 00072763)
   19577/   72000 :                     ; Striped out
   19578/   72000 :                     ; UnkData_00072000:
   19579/   72000 :                     		binclude	"UnknownCodes/UnknownData_00072000.bin"
   19580/   72764 :                     ; ---------------------------------------------------------------------------
   19581/   72764 :                     ; ===========================================================================
   19582/   72764 :                     ; ---------------------------------------------------------------------------
   19583/   72764 :                     ; Align to $00074000, Unknown Data
   19584/   72764 :                     ; ---------------------------------------------------------------------------
   19585/   72764 : (MACRO)              	align $2000
   19585/   72764 :  (MACRO-2)                   cnop 0,$2000
   19585/   72764 : =>TRUE                       if notZ80(MOMCPU)
   19585/   72764 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19585/   72764 : =>TRUE                       if notZ80(MOMCPU)
   19585/   72764 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19585/   72764 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19585/   72764 : =>TRUE                               else
   19585/   74000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19585/   74000 : [19585]                              endif
   19585/   74000 : =>FALSE                      else
   19585/   74000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19585/   74000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19585/   74000 :                                     else
   19585/   74000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19585/   74000 :                                                     db 0
   19585/   74000 :                                             endm
   19585/   74000 : [19585]                              endif
   19585/   74000 : [19585]                      endif
   19585/   74000 : =>FALSE                      else
   19585/   74000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19585/   74000 : [19585]                      endif
   19586/   74000 :                     ; ---------------------------------------------------------------------------
   19587/   74000 :                     ; Data Location (00074000 - 0007562F)
   19588/   74000 :                     ; Striped out
   19589/   74000 :                     ; UnkData_00074000:
   19590/   74000 :                     		binclude	"UnknownCodes/UnknownData_00074000.bin"
   19591/   75630 :                     ; ---------------------------------------------------------------------------
   19592/   75630 :                     ; ===========================================================================
   19593/   75630 :                     ; ---------------------------------------------------------------------------
   19594/   75630 :                     ; Align to $00076000, Unknown Data
   19595/   75630 :                     ; ---------------------------------------------------------------------------
   19596/   75630 : (MACRO)              	align $1000
   19596/   75630 :  (MACRO-2)                   cnop 0,$1000
   19596/   75630 : =>TRUE                       if notZ80(MOMCPU)
   19596/   75630 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19596/   75630 : =>TRUE                       if notZ80(MOMCPU)
   19596/   75630 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19596/   75630 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19596/   75630 : =>TRUE                               else
   19596/   76000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19596/   76000 : [19596]                              endif
   19596/   76000 : =>FALSE                      else
   19596/   76000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19596/   76000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19596/   76000 :                                     else
   19596/   76000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19596/   76000 :                                                     db 0
   19596/   76000 :                                             endm
   19596/   76000 : [19596]                              endif
   19596/   76000 : [19596]                      endif
   19596/   76000 : =>FALSE                      else
   19596/   76000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19596/   76000 : [19596]                      endif
   19597/   76000 :                     ; ---------------------------------------------------------------------------
   19598/   76000 :                     ; Data Location (00076000 - 00076703)
   19599/   76000 :                     ; Striped out
   19600/   76000 :                     ; UnkData_00076000:
   19601/   76000 :                     		binclude	"UnknownCodes/UnknownData_00076000.bin"
   19602/   76704 :                     ; ---------------------------------------------------------------------------
   19603/   76704 :                     ; ===========================================================================
   19604/   76704 :                     ; ---------------------------------------------------------------------------
   19605/   76704 :                     ; Uncompressed Art - Sonic
   19606/   76704 :                     ; ---------------------------------------------------------------------------
   19607/   76704 : (MACRO)              	align $10000
   19607/   76704 :  (MACRO-2)                   cnop 0,$10000
   19607/   76704 : =>TRUE                       if notZ80(MOMCPU)
   19607/   76704 :   (MACRO-3)                          org (*-1+($10000)-((*-1+(-(0)))#($10000)))
   19607/   76704 : =>TRUE                       if notZ80(MOMCPU)
   19607/   76704 : =>FALSE                              if (*-1+($10000)-((*-1+(-(0)))#($10000))) < *
   19607/   76704 :                                             error "too much stuff before org $\{(*-1+($10000)-((*-1+(-(0)))#($10000)))} ($\{(*-(*-1+($10000)-((*-1+(-(0)))#($10000))))} bytes)"
   19607/   76704 : =>TRUE                               else
   19607/   80000 :                                             !org (*-1+($10000)-((*-1+(-(0)))#($10000)))
   19607/   80000 : [19607]                              endif
   19607/   80000 : =>FALSE                      else
   19607/   80000 :                                     if (*-1+($10000)-((*-1+(-(0)))#($10000))) < $
   19607/   80000 :                                             error "too much stuff before org 0\{(*-1+($10000)-((*-1+(-(0)))#($10000)))}h (0\{($-(*-1+($10000)-((*-1+(-(0)))#($10000))))}h bytes)"
   19607/   80000 :                                     else
   19607/   80000 :                                             while (*-1+($10000)-((*-1+(-(0)))#($10000))) > $
   19607/   80000 :                                                     db 0
   19607/   80000 :                                             endm
   19607/   80000 : [19607]                              endif
   19607/   80000 : [19607]                      endif
   19607/   80000 : =>FALSE                      else
   19607/   80000 :                                     org ($-1+($10000)-(($-1+(-(0)))#($10000)))
   19607/   80000 : [19607]                      endif
   19608/   80000 :                     ; ---------------------------------------------------------------------------
   19609/   80000 :                     ARTUNC_Sonic:	binclude	"artunc/Sonic.bin"
   19610/   8C0A0 : (MACRO)              		even
   19610/   8C0A0 : =>TRUE                       if notZ80(MOMCPU)
   19610/   8C0A0 : =>FALSE                              if (*)&1
   19610/   8C0A0 :                                             dc.b 0                          ;ds.b 1
   19610/   8C0A0 : [19610]                              endif
   19610/   8C0A0 : =>FALSE                      else
   19610/   8C0A0 :                                     if ($)&1
   19610/   8C0A0 :                                             db 0
   19610/   8C0A0 : [19610]                              endif
   19610/   8C0A0 : [19610]                      endif
   19611/   8C0A0 :                     ; ---------------------------------------------------------------------------
   19612/   8C0A0 :                     ; ===========================================================================
   19613/   8C0A0 :                     ; ---------------------------------------------------------------------------
   19614/   8C0A0 :                     ; Unknown Data
   19615/   8C0A0 :                     ; ---------------------------------------------------------------------------
   19616/   8C0A0 :                     ; Data Location (0008C0A0 - 00090000)
   19617/   8C0A0 :                     ; Striped out
   19618/   8C0A0 :                     ; UnkData_0008C0A0:
   19619/   8C0A0 :                     		binclude	"UnknownCodes/UnknownData_0008C0A0.bin"
   19620/   90000 :                     ; ---------------------------------------------------------------------------
   19621/   90000 :                     ; ===========================================================================
   19622/   90000 :                     ; ---------------------------------------------------------------------------
   19623/   90000 :                     ; Uncompressed Art - Sonic Fields
   19624/   90000 :                     ; ---------------------------------------------------------------------------
   19625/   90000 : (MACRO)              	align $4000
   19625/   90000 :  (MACRO-2)                   cnop 0,$4000
   19625/   90000 : =>TRUE                       if notZ80(MOMCPU)
   19625/   90000 :   (MACRO-3)                          org (*-1+($4000)-((*-1+(-(0)))#($4000)))
   19625/   90000 : =>TRUE                       if notZ80(MOMCPU)
   19625/   90000 : =>FALSE                              if (*-1+($4000)-((*-1+(-(0)))#($4000))) < *
   19625/   90000 :                                             error "too much stuff before org $\{(*-1+($4000)-((*-1+(-(0)))#($4000)))} ($\{(*-(*-1+($4000)-((*-1+(-(0)))#($4000))))} bytes)"
   19625/   90000 : =>TRUE                               else
   19625/   90000 :                                             !org (*-1+($4000)-((*-1+(-(0)))#($4000)))
   19625/   90000 : [19625]                              endif
   19625/   90000 : =>FALSE                      else
   19625/   90000 :                                     if (*-1+($4000)-((*-1+(-(0)))#($4000))) < $
   19625/   90000 :                                             error "too much stuff before org 0\{(*-1+($4000)-((*-1+(-(0)))#($4000)))}h (0\{($-(*-1+($4000)-((*-1+(-(0)))#($4000))))}h bytes)"
   19625/   90000 :                                     else
   19625/   90000 :                                             while (*-1+($4000)-((*-1+(-(0)))#($4000))) > $
   19625/   90000 :                                                     db 0
   19625/   90000 :                                             endm
   19625/   90000 : [19625]                              endif
   19625/   90000 : [19625]                      endif
   19625/   90000 : =>FALSE                      else
   19625/   90000 :                                     org ($-1+($4000)-(($-1+(-(0)))#($4000)))
   19625/   90000 : [19625]                      endif
   19626/   90000 :                     ; ---------------------------------------------------------------------------
   19627/   90000 :                     ARTUNC_SonicField:
   19628/   90000 :                     		binclude	"artunc/SonicField.bin"
   19629/   93B20 : (MACRO)              		even
   19629/   93B20 : =>TRUE                       if notZ80(MOMCPU)
   19629/   93B20 : =>FALSE                              if (*)&1
   19629/   93B20 :                                             dc.b 0                          ;ds.b 1
   19629/   93B20 : [19629]                              endif
   19629/   93B20 : =>FALSE                      else
   19629/   93B20 :                                     if ($)&1
   19629/   93B20 :                                             db 0
   19629/   93B20 : [19629]                              endif
   19629/   93B20 : [19629]                      endif
   19630/   93B20 :                     ; ---------------------------------------------------------------------------
   19631/   93B20 :                     ; ===========================================================================
   19632/   93B20 :                     ; ---------------------------------------------------------------------------
   19633/   93B20 :                     ; Unknown Data
   19634/   93B20 :                     ; ---------------------------------------------------------------------------
   19635/   93B20 :                     ; Data Location (00093B20 - 0009562F)
   19636/   93B20 :                     ; Striped out
   19637/   93B20 :                     ; UnkData_00093B20:
   19638/   93B20 :                     		binclude	"UnknownCodes/UnknownData_00093B20.bin"
   19639/   95630 :                     ; ---------------------------------------------------------------------------
   19640/   95630 :                     ; ===========================================================================
   19641/   95630 :                     ; ---------------------------------------------------------------------------
   19642/   95630 :                     ; Align to $00096000, Unknown Data
   19643/   95630 :                     ; ---------------------------------------------------------------------------
   19644/   95630 : (MACRO)              	align $1000
   19644/   95630 :  (MACRO-2)                   cnop 0,$1000
   19644/   95630 : =>TRUE                       if notZ80(MOMCPU)
   19644/   95630 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19644/   95630 : =>TRUE                       if notZ80(MOMCPU)
   19644/   95630 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19644/   95630 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19644/   95630 : =>TRUE                               else
   19644/   96000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19644/   96000 : [19644]                              endif
   19644/   96000 : =>FALSE                      else
   19644/   96000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19644/   96000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19644/   96000 :                                     else
   19644/   96000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19644/   96000 :                                                     db 0
   19644/   96000 :                                             endm
   19644/   96000 : [19644]                              endif
   19644/   96000 : [19644]                      endif
   19644/   96000 : =>FALSE                      else
   19644/   96000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19644/   96000 : [19644]                      endif
   19645/   96000 :                     ; ---------------------------------------------------------------------------
   19646/   96000 :                     ; Data Location (00096000 - 00096703)
   19647/   96000 :                     ; Striped out
   19648/   96000 :                     ; UnkData_00096000:
   19649/   96000 :                     		binclude	"UnknownCodes/UnknownData_00096000.bin"
   19650/   96704 :                     ; ---------------------------------------------------------------------------
   19651/   96704 :                     ; ===========================================================================
   19652/   96704 :                     ; ---------------------------------------------------------------------------
   19653/   96704 :                     ; Uncompressed Art - Unknown Unused Small Hud Patterns
   19654/   96704 :                     ; ---------------------------------------------------------------------------
   19655/   96704 : (MACRO)              	align $2000
   19655/   96704 :  (MACRO-2)                   cnop 0,$2000
   19655/   96704 : =>TRUE                       if notZ80(MOMCPU)
   19655/   96704 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19655/   96704 : =>TRUE                       if notZ80(MOMCPU)
   19655/   96704 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19655/   96704 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19655/   96704 : =>TRUE                               else
   19655/   98000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19655/   98000 : [19655]                              endif
   19655/   98000 : =>FALSE                      else
   19655/   98000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19655/   98000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19655/   98000 :                                     else
   19655/   98000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19655/   98000 :                                                     db 0
   19655/   98000 :                                             endm
   19655/   98000 : [19655]                              endif
   19655/   98000 : [19655]                      endif
   19655/   98000 : =>FALSE                      else
   19655/   98000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19655/   98000 : [19655]                      endif
   19656/   98000 :                     ; ---------------------------------------------------------------------------
   19657/   98000 :                     ARTUNC_UnknownHud:
   19658/   98000 :                     		binclude	"artunc/UnknownHud.bin"
   19659/   98740 : (MACRO)              		even
   19659/   98740 : =>TRUE                       if notZ80(MOMCPU)
   19659/   98740 : =>FALSE                              if (*)&1
   19659/   98740 :                                             dc.b 0                          ;ds.b 1
   19659/   98740 : [19659]                              endif
   19659/   98740 : =>FALSE                      else
   19659/   98740 :                                     if ($)&1
   19659/   98740 :                                             db 0
   19659/   98740 : [19659]                              endif
   19659/   98740 : [19659]                      endif
   19660/   98740 :                     ; ---------------------------------------------------------------------------
   19661/   98740 :                     ; ===========================================================================
   19662/   98740 :                     ; ---------------------------------------------------------------------------
   19663/   98740 :                     ; Unknown Data
   19664/   98740 :                     ; ---------------------------------------------------------------------------
   19665/   98740 :                     ; Data Location (00098740 - 0009FFFF)
   19666/   98740 :                     ; Striped out
   19667/   98740 :                     ; UnkData_00098740:
   19668/   98740 :                     		binclude	"UnknownCodes/UnknownData_00098740.bin"
   19669/   A0000 :                     ; ---------------------------------------------------------------------------
   19670/   A0000 :                     ; ===========================================================================
   19671/   A0000 :                     ; ---------------------------------------------------------------------------
   19672/   A0000 :                     ; Uncompressed Art - Tails
   19673/   A0000 :                     ; ---------------------------------------------------------------------------
   19674/   A0000 : (MACRO)              	align $10
   19674/   A0000 :  (MACRO-2)                   cnop 0,$10
   19674/   A0000 : =>TRUE                       if notZ80(MOMCPU)
   19674/   A0000 :   (MACRO-3)                          org (*-1+($10)-((*-1+(-(0)))#($10)))
   19674/   A0000 : =>TRUE                       if notZ80(MOMCPU)
   19674/   A0000 : =>FALSE                              if (*-1+($10)-((*-1+(-(0)))#($10))) < *
   19674/   A0000 :                                             error "too much stuff before org $\{(*-1+($10)-((*-1+(-(0)))#($10)))} ($\{(*-(*-1+($10)-((*-1+(-(0)))#($10))))} bytes)"
   19674/   A0000 : =>TRUE                               else
   19674/   A0000 :                                             !org (*-1+($10)-((*-1+(-(0)))#($10)))
   19674/   A0000 : [19674]                              endif
   19674/   A0000 : =>FALSE                      else
   19674/   A0000 :                                     if (*-1+($10)-((*-1+(-(0)))#($10))) < $
   19674/   A0000 :                                             error "too much stuff before org 0\{(*-1+($10)-((*-1+(-(0)))#($10)))}h (0\{($-(*-1+($10)-((*-1+(-(0)))#($10))))}h bytes)"
   19674/   A0000 :                                     else
   19674/   A0000 :                                             while (*-1+($10)-((*-1+(-(0)))#($10))) > $
   19674/   A0000 :                                                     db 0
   19674/   A0000 :                                             endm
   19674/   A0000 : [19674]                              endif
   19674/   A0000 : [19674]                      endif
   19674/   A0000 : =>FALSE                      else
   19674/   A0000 :                                     org ($-1+($10)-(($-1+(-(0)))#($10)))
   19674/   A0000 : [19674]                      endif
   19675/   A0000 :                     ; ---------------------------------------------------------------------------
   19676/   A0000 :                     ARTUNC_Tails:	binclude	"artunc/Tails.bin"
   19677/   AB180 : (MACRO)              		even
   19677/   AB180 : =>TRUE                       if notZ80(MOMCPU)
   19677/   AB180 : =>FALSE                              if (*)&1
   19677/   AB180 :                                             dc.b 0                          ;ds.b 1
   19677/   AB180 : [19677]                              endif
   19677/   AB180 : =>FALSE                      else
   19677/   AB180 :                                     if ($)&1
   19677/   AB180 :                                             db 0
   19677/   AB180 : [19677]                              endif
   19677/   AB180 : [19677]                      endif
   19678/   AB180 :                     ; ---------------------------------------------------------------------------
   19679/   AB180 :                     ; ===========================================================================
   19680/   AB180 :                     ; ---------------------------------------------------------------------------
   19681/   AB180 :                     ; Align to $000AC000, Unknown Data
   19682/   AB180 :                     ; ---------------------------------------------------------------------------
   19683/   AB180 : (MACRO)              	align $1000
   19683/   AB180 :  (MACRO-2)                   cnop 0,$1000
   19683/   AB180 : =>TRUE                       if notZ80(MOMCPU)
   19683/   AB180 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19683/   AB180 : =>TRUE                       if notZ80(MOMCPU)
   19683/   AB180 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19683/   AB180 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19683/   AB180 : =>TRUE                               else
   19683/   AC000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19683/   AC000 : [19683]                              endif
   19683/   AC000 : =>FALSE                      else
   19683/   AC000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19683/   AC000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19683/   AC000 :                                     else
   19683/   AC000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19683/   AC000 :                                                     db 0
   19683/   AC000 :                                             endm
   19683/   AC000 : [19683]                              endif
   19683/   AC000 : [19683]                      endif
   19683/   AC000 : =>FALSE                      else
   19683/   AC000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19683/   AC000 : [19683]                      endif
   19684/   AC000 :                     ; ---------------------------------------------------------------------------
   19685/   AC000 :                     ; Data Location (000AC000 - 000AD1F9)
   19686/   AC000 :                     ; Striped out
   19687/   AC000 :                     ; UnkData_000AC000:
   19688/   AC000 :                     		binclude	"UnknownCodes/UnknownData_000AC000.bin"
   19689/   AD1FA :                     ; ---------------------------------------------------------------------------
   19690/   AD1FA :                     ; ===========================================================================
   19691/   AD1FA :                     ; ---------------------------------------------------------------------------
   19692/   AD1FA :                     ; Uncompressed Art - Tails Field
   19693/   AD1FA :                     ; ---------------------------------------------------------------------------
   19694/   AD1FA : (MACRO)              	align $4000
   19694/   AD1FA :  (MACRO-2)                   cnop 0,$4000
   19694/   AD1FA : =>TRUE                       if notZ80(MOMCPU)
   19694/   AD1FA :   (MACRO-3)                          org (*-1+($4000)-((*-1+(-(0)))#($4000)))
   19694/   AD1FA : =>TRUE                       if notZ80(MOMCPU)
   19694/   AD1FA : =>FALSE                              if (*-1+($4000)-((*-1+(-(0)))#($4000))) < *
   19694/   AD1FA :                                             error "too much stuff before org $\{(*-1+($4000)-((*-1+(-(0)))#($4000)))} ($\{(*-(*-1+($4000)-((*-1+(-(0)))#($4000))))} bytes)"
   19694/   AD1FA : =>TRUE                               else
   19694/   B0000 :                                             !org (*-1+($4000)-((*-1+(-(0)))#($4000)))
   19694/   B0000 : [19694]                              endif
   19694/   B0000 : =>FALSE                      else
   19694/   B0000 :                                     if (*-1+($4000)-((*-1+(-(0)))#($4000))) < $
   19694/   B0000 :                                             error "too much stuff before org 0\{(*-1+($4000)-((*-1+(-(0)))#($4000)))}h (0\{($-(*-1+($4000)-((*-1+(-(0)))#($4000))))}h bytes)"
   19694/   B0000 :                                     else
   19694/   B0000 :                                             while (*-1+($4000)-((*-1+(-(0)))#($4000))) > $
   19694/   B0000 :                                                     db 0
   19694/   B0000 :                                             endm
   19694/   B0000 : [19694]                              endif
   19694/   B0000 : [19694]                      endif
   19694/   B0000 : =>FALSE                      else
   19694/   B0000 :                                     org ($-1+($4000)-(($-1+(-(0)))#($4000)))
   19694/   B0000 : [19694]                      endif
   19695/   B0000 :                     ; ---------------------------------------------------------------------------
   19696/   B0000 :                     ARTUNC_TailsField:
   19697/   B0000 :                     		binclude	"artunc/TailsField.bin"
   19698/   B3820 : (MACRO)              		even
   19698/   B3820 : =>TRUE                       if notZ80(MOMCPU)
   19698/   B3820 : =>FALSE                              if (*)&1
   19698/   B3820 :                                             dc.b 0                          ;ds.b 1
   19698/   B3820 : [19698]                              endif
   19698/   B3820 : =>FALSE                      else
   19698/   B3820 :                                     if ($)&1
   19698/   B3820 :                                             db 0
   19698/   B3820 : [19698]                              endif
   19698/   B3820 : [19698]                      endif
   19699/   B3820 :                     ; ---------------------------------------------------------------------------
   19700/   B3820 :                     ; ===========================================================================
   19701/   B3820 :                     ; ---------------------------------------------------------------------------
   19702/   B3820 :                     ; Unknown Data
   19703/   B3820 :                     ; ---------------------------------------------------------------------------
   19704/   B3820 :                     ; Data Location (000B3820 - 000B562F)
   19705/   B3820 :                     ; Striped out
   19706/   B3820 :                     ; UnkData_000B3820:
   19707/   B3820 :                     		binclude	"UnknownCodes/UnknownData_000B3820.bin"
   19708/   B5630 :                     ; ---------------------------------------------------------------------------
   19709/   B5630 :                     ; ===========================================================================
   19710/   B5630 :                     ; ---------------------------------------------------------------------------
   19711/   B5630 :                     ; Align to $000B6000, Unknown Data
   19712/   B5630 :                     ; ---------------------------------------------------------------------------
   19713/   B5630 : (MACRO)              	align $1000
   19713/   B5630 :  (MACRO-2)                   cnop 0,$1000
   19713/   B5630 : =>TRUE                       if notZ80(MOMCPU)
   19713/   B5630 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19713/   B5630 : =>TRUE                       if notZ80(MOMCPU)
   19713/   B5630 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19713/   B5630 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19713/   B5630 : =>TRUE                               else
   19713/   B6000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19713/   B6000 : [19713]                              endif
   19713/   B6000 : =>FALSE                      else
   19713/   B6000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19713/   B6000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19713/   B6000 :                                     else
   19713/   B6000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19713/   B6000 :                                                     db 0
   19713/   B6000 :                                             endm
   19713/   B6000 : [19713]                              endif
   19713/   B6000 : [19713]                      endif
   19713/   B6000 : =>FALSE                      else
   19713/   B6000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19713/   B6000 : [19713]                      endif
   19714/   B6000 :                     ; ---------------------------------------------------------------------------
   19715/   B6000 :                     ; Data Location (000B6000 - 000B6703)
   19716/   B6000 :                     ; Striped out
   19717/   B6000 :                     ; UnkData_000B6000:
   19718/   B6000 :                     		binclude	"UnknownCodes/UnknownData_000B6000.bin"
   19719/   B6704 :                     ; ---------------------------------------------------------------------------
   19720/   B6704 :                     ; ===========================================================================
   19721/   B6704 :                     ; ---------------------------------------------------------------------------
   19722/   B6704 :                     ; Align to $000C0000, Unknown Data
   19723/   B6704 :                     ; ---------------------------------------------------------------------------
   19724/   B6704 : (MACRO)              	align $C000
   19724/   B6704 :  (MACRO-2)                   cnop 0,$C000
   19724/   B6704 : =>TRUE                       if notZ80(MOMCPU)
   19724/   B6704 :   (MACRO-3)                          org (*-1+($C000)-((*-1+(-(0)))#($C000)))
   19724/   B6704 : =>TRUE                       if notZ80(MOMCPU)
   19724/   B6704 : =>FALSE                              if (*-1+($C000)-((*-1+(-(0)))#($C000))) < *
   19724/   B6704 :                                             error "too much stuff before org $\{(*-1+($C000)-((*-1+(-(0)))#($C000)))} ($\{(*-(*-1+($C000)-((*-1+(-(0)))#($C000))))} bytes)"
   19724/   B6704 : =>TRUE                               else
   19724/   C0000 :                                             !org (*-1+($C000)-((*-1+(-(0)))#($C000)))
   19724/   C0000 : [19724]                              endif
   19724/   C0000 : =>FALSE                      else
   19724/   C0000 :                                     if (*-1+($C000)-((*-1+(-(0)))#($C000))) < $
   19724/   C0000 :                                             error "too much stuff before org 0\{(*-1+($C000)-((*-1+(-(0)))#($C000)))}h (0\{($-(*-1+($C000)-((*-1+(-(0)))#($C000))))}h bytes)"
   19724/   C0000 :                                     else
   19724/   C0000 :                                             while (*-1+($C000)-((*-1+(-(0)))#($C000))) > $
   19724/   C0000 :                                                     db 0
   19724/   C0000 :                                             endm
   19724/   C0000 : [19724]                              endif
   19724/   C0000 : [19724]                      endif
   19724/   C0000 : =>FALSE                      else
   19724/   C0000 :                                     org ($-1+($C000)-(($-1+(-(0)))#($C000)))
   19724/   C0000 : [19724]                      endif
   19725/   C0000 :                     ; ---------------------------------------------------------------------------
   19726/   C0000 :                     ; Data Location (000C0000 - 000CA887)
   19727/   C0000 :                     ; Striped out
   19728/   C0000 :                     ; UnkData_000C0000:
   19729/   C0000 :                     		binclude	"UnknownCodes/UnknownData_000C0000.bin"
   19730/   CA888 :                     ; ---------------------------------------------------------------------------
   19731/   CA888 :                     ; ===========================================================================
   19732/   CA888 :                     ; ---------------------------------------------------------------------------
   19733/   CA888 :                     ; Align to $000CC000, Unknown Data
   19734/   CA888 :                     ; ---------------------------------------------------------------------------
   19735/   CA888 : (MACRO)              	align $2000
   19735/   CA888 :  (MACRO-2)                   cnop 0,$2000
   19735/   CA888 : =>TRUE                       if notZ80(MOMCPU)
   19735/   CA888 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19735/   CA888 : =>TRUE                       if notZ80(MOMCPU)
   19735/   CA888 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19735/   CA888 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19735/   CA888 : =>TRUE                               else
   19735/   CC000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19735/   CC000 : [19735]                              endif
   19735/   CC000 : =>FALSE                      else
   19735/   CC000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19735/   CC000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19735/   CC000 :                                     else
   19735/   CC000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19735/   CC000 :                                                     db 0
   19735/   CC000 :                                             endm
   19735/   CC000 : [19735]                              endif
   19735/   CC000 : [19735]                      endif
   19735/   CC000 : =>FALSE                      else
   19735/   CC000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19735/   CC000 : [19735]                      endif
   19736/   CC000 :                     ; ---------------------------------------------------------------------------
   19737/   CC000 :                     ; Data Location (000CC000 - 000D58BF)
   19738/   CC000 :                     ; Striped out
   19739/   CC000 :                     ; UnkData_000CC000:
   19740/   CC000 :                     		binclude	"UnknownCodes/UnknownData_000CC000.bin"
   19741/   D58C0 :                     ; ---------------------------------------------------------------------------
   19742/   D58C0 :                     ; ===========================================================================
   19743/   D58C0 :                     ; ---------------------------------------------------------------------------
   19744/   D58C0 :                     ; Align to $000D6000, Unknown Data
   19745/   D58C0 :                     ; ---------------------------------------------------------------------------
   19746/   D58C0 : (MACRO)              	align $1000
   19746/   D58C0 :  (MACRO-2)                   cnop 0,$1000
   19746/   D58C0 : =>TRUE                       if notZ80(MOMCPU)
   19746/   D58C0 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19746/   D58C0 : =>TRUE                       if notZ80(MOMCPU)
   19746/   D58C0 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19746/   D58C0 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19746/   D58C0 : =>TRUE                               else
   19746/   D6000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19746/   D6000 : [19746]                              endif
   19746/   D6000 : =>FALSE                      else
   19746/   D6000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19746/   D6000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19746/   D6000 :                                     else
   19746/   D6000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19746/   D6000 :                                                     db 0
   19746/   D6000 :                                             endm
   19746/   D6000 : [19746]                              endif
   19746/   D6000 : [19746]                      endif
   19746/   D6000 : =>FALSE                      else
   19746/   D6000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19746/   D6000 : [19746]                      endif
   19747/   D6000 :                     ; ---------------------------------------------------------------------------
   19748/   D6000 :                     ; Data Location (000D6000 - 000D6703)
   19749/   D6000 :                     ; Striped out
   19750/   D6000 :                     ; UnkData_000D6000:
   19751/   D6000 :                     		binclude	"UnknownCodes/UnknownData_000D6000.bin"
   19752/   D6704 :                     ; ---------------------------------------------------------------------------
   19753/   D6704 :                     ; ===========================================================================
   19754/   D6704 :                     ; ---------------------------------------------------------------------------
   19755/   D6704 :                     ; Align to $000D8000, Unknown Data
   19756/   D6704 :                     ; ---------------------------------------------------------------------------
   19757/   D6704 : (MACRO)              	align $2000
   19757/   D6704 :  (MACRO-2)                   cnop 0,$2000
   19757/   D6704 : =>TRUE                       if notZ80(MOMCPU)
   19757/   D6704 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19757/   D6704 : =>TRUE                       if notZ80(MOMCPU)
   19757/   D6704 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19757/   D6704 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19757/   D6704 : =>TRUE                               else
   19757/   D8000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19757/   D8000 : [19757]                              endif
   19757/   D8000 : =>FALSE                      else
   19757/   D8000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19757/   D8000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19757/   D8000 :                                     else
   19757/   D8000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19757/   D8000 :                                                     db 0
   19757/   D8000 :                                             endm
   19757/   D8000 : [19757]                              endif
   19757/   D8000 : [19757]                      endif
   19757/   D8000 : =>FALSE                      else
   19757/   D8000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19757/   D8000 : [19757]                      endif
   19758/   D8000 :                     ; ---------------------------------------------------------------------------
   19759/   D8000 :                     ; Data Location (000D8000 - 000DA3FF)
   19760/   D8000 :                     ; Striped out
   19761/   D8000 :                     ; UnkData_000D8000:
   19762/   D8000 :                     		binclude	"UnknownCodes/UnknownData_000D8000.bin"
   19763/   DA400 :                     ; ---------------------------------------------------------------------------
   19764/   DA400 :                     ; ===========================================================================
   19765/   DA400 :                     ; ---------------------------------------------------------------------------
   19766/   DA400 :                     ; Align to $000E0000, Unknown Data
   19767/   DA400 :                     ; ---------------------------------------------------------------------------
   19768/   DA400 : (MACRO)              	align $7000
   19768/   DA400 :  (MACRO-2)                   cnop 0,$7000
   19768/   DA400 : =>TRUE                       if notZ80(MOMCPU)
   19768/   DA400 :   (MACRO-3)                          org (*-1+($7000)-((*-1+(-(0)))#($7000)))
   19768/   DA400 : =>TRUE                       if notZ80(MOMCPU)
   19768/   DA400 : =>FALSE                              if (*-1+($7000)-((*-1+(-(0)))#($7000))) < *
   19768/   DA400 :                                             error "too much stuff before org $\{(*-1+($7000)-((*-1+(-(0)))#($7000)))} ($\{(*-(*-1+($7000)-((*-1+(-(0)))#($7000))))} bytes)"
   19768/   DA400 : =>TRUE                               else
   19768/   E0000 :                                             !org (*-1+($7000)-((*-1+(-(0)))#($7000)))
   19768/   E0000 : [19768]                              endif
   19768/   E0000 : =>FALSE                      else
   19768/   E0000 :                                     if (*-1+($7000)-((*-1+(-(0)))#($7000))) < $
   19768/   E0000 :                                             error "too much stuff before org 0\{(*-1+($7000)-((*-1+(-(0)))#($7000)))}h (0\{($-(*-1+($7000)-((*-1+(-(0)))#($7000))))}h bytes)"
   19768/   E0000 :                                     else
   19768/   E0000 :                                             while (*-1+($7000)-((*-1+(-(0)))#($7000))) > $
   19768/   E0000 :                                                     db 0
   19768/   E0000 :                                             endm
   19768/   E0000 : [19768]                              endif
   19768/   E0000 : [19768]                      endif
   19768/   E0000 : =>FALSE                      else
   19768/   E0000 :                                     org ($-1+($7000)-(($-1+(-(0)))#($7000)))
   19768/   E0000 : [19768]                      endif
   19769/   E0000 :                     ; ---------------------------------------------------------------------------
   19770/   E0000 :                     ; Data Location (000E0000 - 000E3067)
   19771/   E0000 :                     ; Striped out
   19772/   E0000 :                     ; UnkData_000E0000:
   19773/   E0000 :                     		binclude	"UnknownCodes/UnknownData_000E0000.bin"
   19774/   E3068 :                     ; ---------------------------------------------------------------------------
   19775/   E3068 :                     ; ===========================================================================
   19776/   E3068 :                     ; ---------------------------------------------------------------------------
   19777/   E3068 :                     ; Align to $000E4000, Unknown Data
   19778/   E3068 :                     ; ---------------------------------------------------------------------------
   19779/   E3068 : (MACRO)              	align $1000
   19779/   E3068 :  (MACRO-2)                   cnop 0,$1000
   19779/   E3068 : =>TRUE                       if notZ80(MOMCPU)
   19779/   E3068 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19779/   E3068 : =>TRUE                       if notZ80(MOMCPU)
   19779/   E3068 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19779/   E3068 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19779/   E3068 : =>TRUE                               else
   19779/   E4000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19779/   E4000 : [19779]                              endif
   19779/   E4000 : =>FALSE                      else
   19779/   E4000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19779/   E4000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19779/   E4000 :                                     else
   19779/   E4000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19779/   E4000 :                                                     db 0
   19779/   E4000 :                                             endm
   19779/   E4000 : [19779]                              endif
   19779/   E4000 : [19779]                      endif
   19779/   E4000 : =>FALSE                      else
   19779/   E4000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19779/   E4000 : [19779]                      endif
   19780/   E4000 :                     ; ---------------------------------------------------------------------------
   19781/   E4000 :                     ; Data Location (000E4000 - 000E4EC7)
   19782/   E4000 :                     ; Striped out
   19783/   E4000 :                     ; UnkData_000E4000:
   19784/   E4000 :                     		binclude	"UnknownCodes/UnknownData_000E4000.bin"
   19785/   E4EC8 :                     ; ---------------------------------------------------------------------------
   19786/   E4EC8 :                     ; ===========================================================================
   19787/   E4EC8 :                     ; ---------------------------------------------------------------------------
   19788/   E4EC8 :                     ; Align to $000E6000, Unknown Data
   19789/   E4EC8 :                     ; ---------------------------------------------------------------------------
   19790/   E4EC8 : (MACRO)              	align $2000
   19790/   E4EC8 :  (MACRO-2)                   cnop 0,$2000
   19790/   E4EC8 : =>TRUE                       if notZ80(MOMCPU)
   19790/   E4EC8 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19790/   E4EC8 : =>TRUE                       if notZ80(MOMCPU)
   19790/   E4EC8 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19790/   E4EC8 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19790/   E4EC8 : =>TRUE                               else
   19790/   E6000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19790/   E6000 : [19790]                              endif
   19790/   E6000 : =>FALSE                      else
   19790/   E6000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19790/   E6000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19790/   E6000 :                                     else
   19790/   E6000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19790/   E6000 :                                                     db 0
   19790/   E6000 :                                             endm
   19790/   E6000 : [19790]                              endif
   19790/   E6000 : [19790]                      endif
   19790/   E6000 : =>FALSE                      else
   19790/   E6000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19790/   E6000 : [19790]                      endif
   19791/   E6000 :                     ; ---------------------------------------------------------------------------
   19792/   E6000 :                     ; Data Location (000E6000 - 000EAC5F)
   19793/   E6000 :                     ; Striped out
   19794/   E6000 :                     ; UnkData_000E6000:
   19795/   E6000 :                     		binclude	"UnknownCodes/UnknownData_000E6000.bin"
   19796/   EAC60 :                     ; ---------------------------------------------------------------------------
   19797/   EAC60 :                     ; ===========================================================================
   19798/   EAC60 :                     ; ---------------------------------------------------------------------------
   19799/   EAC60 :                     ; Align to $000EC000, Unknown Data
   19800/   EAC60 :                     ; ---------------------------------------------------------------------------
   19801/   EAC60 : (MACRO)              	align $2000
   19801/   EAC60 :  (MACRO-2)                   cnop 0,$2000
   19801/   EAC60 : =>TRUE                       if notZ80(MOMCPU)
   19801/   EAC60 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19801/   EAC60 : =>TRUE                       if notZ80(MOMCPU)
   19801/   EAC60 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19801/   EAC60 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19801/   EAC60 : =>TRUE                               else
   19801/   EC000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19801/   EC000 : [19801]                              endif
   19801/   EC000 : =>FALSE                      else
   19801/   EC000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19801/   EC000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19801/   EC000 :                                     else
   19801/   EC000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19801/   EC000 :                                                     db 0
   19801/   EC000 :                                             endm
   19801/   EC000 : [19801]                              endif
   19801/   EC000 : [19801]                      endif
   19801/   EC000 : =>FALSE                      else
   19801/   EC000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19801/   EC000 : [19801]                      endif
   19802/   EC000 :                     ; ---------------------------------------------------------------------------
   19803/   EC000 :                     ; Data Location (000EC000 - 000ED1FF)
   19804/   EC000 :                     ; Striped out
   19805/   EC000 :                     ; UnkData_000EC000:
   19806/   EC000 :                     		binclude	"UnknownCodes/UnknownData_000EC000.bin"
   19807/   ED200 :                     ; ---------------------------------------------------------------------------
   19808/   ED200 :                     ; ===========================================================================
   19809/   ED200 :                     ; ---------------------------------------------------------------------------
   19810/   ED200 :                     ; Align to $000F0000, Unknown Data
   19811/   ED200 :                     ; ---------------------------------------------------------------------------
   19812/   ED200 : (MACRO)              	align $3000
   19812/   ED200 :  (MACRO-2)                   cnop 0,$3000
   19812/   ED200 : =>TRUE                       if notZ80(MOMCPU)
   19812/   ED200 :   (MACRO-3)                          org (*-1+($3000)-((*-1+(-(0)))#($3000)))
   19812/   ED200 : =>TRUE                       if notZ80(MOMCPU)
   19812/   ED200 : =>FALSE                              if (*-1+($3000)-((*-1+(-(0)))#($3000))) < *
   19812/   ED200 :                                             error "too much stuff before org $\{(*-1+($3000)-((*-1+(-(0)))#($3000)))} ($\{(*-(*-1+($3000)-((*-1+(-(0)))#($3000))))} bytes)"
   19812/   ED200 : =>TRUE                               else
   19812/   F0000 :                                             !org (*-1+($3000)-((*-1+(-(0)))#($3000)))
   19812/   F0000 : [19812]                              endif
   19812/   F0000 : =>FALSE                      else
   19812/   F0000 :                                     if (*-1+($3000)-((*-1+(-(0)))#($3000))) < $
   19812/   F0000 :                                             error "too much stuff before org 0\{(*-1+($3000)-((*-1+(-(0)))#($3000)))}h (0\{($-(*-1+($3000)-((*-1+(-(0)))#($3000))))}h bytes)"
   19812/   F0000 :                                     else
   19812/   F0000 :                                             while (*-1+($3000)-((*-1+(-(0)))#($3000))) > $
   19812/   F0000 :                                                     db 0
   19812/   F0000 :                                             endm
   19812/   F0000 : [19812]                              endif
   19812/   F0000 : [19812]                      endif
   19812/   F0000 : =>FALSE                      else
   19812/   F0000 :                                     org ($-1+($3000)-(($-1+(-(0)))#($3000)))
   19812/   F0000 : [19812]                      endif
   19813/   F0000 :                     ; ---------------------------------------------------------------------------
   19814/   F0000 :                     ; Data Location (000F0000 - 000F1813)
   19815/   F0000 :                     ; Striped out
   19816/   F0000 :                     ; UnkData_000F0000:
   19817/   F0000 :                     		binclude	"UnknownCodes/UnknownData_000F0000.bin"
   19818/   F1814 :                     ; ---------------------------------------------------------------------------
   19819/   F1814 :                     ; ===========================================================================
   19820/   F1814 :                     ; ---------------------------------------------------------------------------
   19821/   F1814 :                     ; Align to $000F2000, Unknown Data
   19822/   F1814 :                     ; ---------------------------------------------------------------------------
   19823/   F1814 : (MACRO)              	align $800
   19823/   F1814 :  (MACRO-2)                   cnop 0,$800
   19823/   F1814 : =>TRUE                       if notZ80(MOMCPU)
   19823/   F1814 :   (MACRO-3)                          org (*-1+($800)-((*-1+(-(0)))#($800)))
   19823/   F1814 : =>TRUE                       if notZ80(MOMCPU)
   19823/   F1814 : =>FALSE                              if (*-1+($800)-((*-1+(-(0)))#($800))) < *
   19823/   F1814 :                                             error "too much stuff before org $\{(*-1+($800)-((*-1+(-(0)))#($800)))} ($\{(*-(*-1+($800)-((*-1+(-(0)))#($800))))} bytes)"
   19823/   F1814 : =>TRUE                               else
   19823/   F2000 :                                             !org (*-1+($800)-((*-1+(-(0)))#($800)))
   19823/   F2000 : [19823]                              endif
   19823/   F2000 : =>FALSE                      else
   19823/   F2000 :                                     if (*-1+($800)-((*-1+(-(0)))#($800))) < $
   19823/   F2000 :                                             error "too much stuff before org 0\{(*-1+($800)-((*-1+(-(0)))#($800)))}h (0\{($-(*-1+($800)-((*-1+(-(0)))#($800))))}h bytes)"
   19823/   F2000 :                                     else
   19823/   F2000 :                                             while (*-1+($800)-((*-1+(-(0)))#($800))) > $
   19823/   F2000 :                                                     db 0
   19823/   F2000 :                                             endm
   19823/   F2000 : [19823]                              endif
   19823/   F2000 : [19823]                      endif
   19823/   F2000 : =>FALSE                      else
   19823/   F2000 :                                     org ($-1+($800)-(($-1+(-(0)))#($800)))
   19823/   F2000 : [19823]                      endif
   19824/   F2000 :                     ; ---------------------------------------------------------------------------
   19825/   F2000 :                     ; Data Location (000F2000 - 000F2763)
   19826/   F2000 :                     ; Striped out
   19827/   F2000 :                     ; UnkData_000F2000:
   19828/   F2000 :                     		binclude	"UnknownCodes/UnknownData_000F2000.bin"
   19829/   F2764 :                     ; ---------------------------------------------------------------------------
   19830/   F2764 :                     ; ===========================================================================
   19831/   F2764 :                     ; ---------------------------------------------------------------------------
   19832/   F2764 :                     ; Align to $000F4000, Unknown Data
   19833/   F2764 :                     ; ---------------------------------------------------------------------------
   19834/   F2764 : (MACRO)              	align $2000
   19834/   F2764 :  (MACRO-2)                   cnop 0,$2000
   19834/   F2764 : =>TRUE                       if notZ80(MOMCPU)
   19834/   F2764 :   (MACRO-3)                          org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19834/   F2764 : =>TRUE                       if notZ80(MOMCPU)
   19834/   F2764 : =>FALSE                              if (*-1+($2000)-((*-1+(-(0)))#($2000))) < *
   19834/   F2764 :                                             error "too much stuff before org $\{(*-1+($2000)-((*-1+(-(0)))#($2000)))} ($\{(*-(*-1+($2000)-((*-1+(-(0)))#($2000))))} bytes)"
   19834/   F2764 : =>TRUE                               else
   19834/   F4000 :                                             !org (*-1+($2000)-((*-1+(-(0)))#($2000)))
   19834/   F4000 : [19834]                              endif
   19834/   F4000 : =>FALSE                      else
   19834/   F4000 :                                     if (*-1+($2000)-((*-1+(-(0)))#($2000))) < $
   19834/   F4000 :                                             error "too much stuff before org 0\{(*-1+($2000)-((*-1+(-(0)))#($2000)))}h (0\{($-(*-1+($2000)-((*-1+(-(0)))#($2000))))}h bytes)"
   19834/   F4000 :                                     else
   19834/   F4000 :                                             while (*-1+($2000)-((*-1+(-(0)))#($2000))) > $
   19834/   F4000 :                                                     db 0
   19834/   F4000 :                                             endm
   19834/   F4000 : [19834]                              endif
   19834/   F4000 : [19834]                      endif
   19834/   F4000 : =>FALSE                      else
   19834/   F4000 :                                     org ($-1+($2000)-(($-1+(-(0)))#($2000)))
   19834/   F4000 : [19834]                      endif
   19835/   F4000 :                     ; ---------------------------------------------------------------------------
   19836/   F4000 :                     ; Data Location (000F4000 - 000F562F)
   19837/   F4000 :                     ; Striped out
   19838/   F4000 :                     ; UnkData_000F4000:
   19839/   F4000 :                     		binclude	"UnknownCodes/UnknownData_000F4000.bin"
   19840/   F5630 :                     ; ---------------------------------------------------------------------------
   19841/   F5630 :                     ; ===========================================================================
   19842/   F5630 :                     ; ---------------------------------------------------------------------------
   19843/   F5630 :                     ; Align to $000F6000, Unknown Data
   19844/   F5630 :                     ; ---------------------------------------------------------------------------
   19845/   F5630 : (MACRO)              	align $1000
   19845/   F5630 :  (MACRO-2)                   cnop 0,$1000
   19845/   F5630 : =>TRUE                       if notZ80(MOMCPU)
   19845/   F5630 :   (MACRO-3)                          org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19845/   F5630 : =>TRUE                       if notZ80(MOMCPU)
   19845/   F5630 : =>FALSE                              if (*-1+($1000)-((*-1+(-(0)))#($1000))) < *
   19845/   F5630 :                                             error "too much stuff before org $\{(*-1+($1000)-((*-1+(-(0)))#($1000)))} ($\{(*-(*-1+($1000)-((*-1+(-(0)))#($1000))))} bytes)"
   19845/   F5630 : =>TRUE                               else
   19845/   F6000 :                                             !org (*-1+($1000)-((*-1+(-(0)))#($1000)))
   19845/   F6000 : [19845]                              endif
   19845/   F6000 : =>FALSE                      else
   19845/   F6000 :                                     if (*-1+($1000)-((*-1+(-(0)))#($1000))) < $
   19845/   F6000 :                                             error "too much stuff before org 0\{(*-1+($1000)-((*-1+(-(0)))#($1000)))}h (0\{($-(*-1+($1000)-((*-1+(-(0)))#($1000))))}h bytes)"
   19845/   F6000 :                                     else
   19845/   F6000 :                                             while (*-1+($1000)-((*-1+(-(0)))#($1000))) > $
   19845/   F6000 :                                                     db 0
   19845/   F6000 :                                             endm
   19845/   F6000 : [19845]                              endif
   19845/   F6000 : [19845]                      endif
   19845/   F6000 : =>FALSE                      else
   19845/   F6000 :                                     org ($-1+($1000)-(($-1+(-(0)))#($1000)))
   19845/   F6000 : [19845]                      endif
   19846/   F6000 :                     ; ---------------------------------------------------------------------------
   19847/   F6000 :                     ; Data Location (000F6000 - 000F6703)
   19848/   F6000 :                     ; Striped out
   19849/   F6000 :                     ; UnkData_000F6000:
   19850/   F6000 :                     		binclude	"UnknownCodes/UnknownData_000F6000.bin"
   19851/   F6704 :                     ; ---------------------------------------------------------------------------
   19852/   F6704 :                     ; ===========================================================================
   19853/   F6704 :                     ; ---------------------------------------------------------------------------
   19854/   F6704 :                     ; Align to $00100000, End Of Rom
   19855/   F6704 :                     ; ---------------------------------------------------------------------------
   19856/   F6704 : (MACRO)              		cnop -1,2<<lastbit(*)
   19856/   F6704 : =>TRUE                       if notZ80(MOMCPU)
   19856/   F6704 :  (MACRO-2)                           org (*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*))))
   19856/   F6704 : =>TRUE                       if notZ80(MOMCPU)
   19856/   F6704 : =>FALSE                              if (*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*)))) < *
   19856/   F6704 :                                             error "too much stuff before org $\{(*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*))))} ($\{(*-(*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*)))))} bytes)"
   19856/   F6704 : =>TRUE                               else
   19856/   FFFFF :                                             !org (*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*))))
   19856/   FFFFF : [19856]                              endif
   19856/   FFFFF : =>FALSE                      else
   19856/   FFFFF :                                     if (*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*)))) < $
   19856/   FFFFF :                                             error "too much stuff before org 0\{(*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*))))}h (0\{($-(*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*)))))}h bytes)"
   19856/   FFFFF :                                     else
   19856/   FFFFF :                                             while (*-1+(2<<lastbit(*))-((*-1+(-(-1)))#(2<<lastbit(*)))) > $
   19856/   FFFFF :                                                     db 0
   19856/   FFFFF :                                             endm
   19856/   FFFFF : [19856]                              endif
   19856/   FFFFF : [19856]                      endif
   19856/   FFFFF : =>FALSE                      else
   19856/   FFFFF :                                     org ($-1+(2<<lastbit(*))-(($-1+(-(-1)))#(2<<lastbit(*))))
   19856/   FFFFF : [19856]                      endif
   19857/   FFFFF : FF                  		dc.b $FF
   19858/  100000 :                     
   19859/  100000 :                     EndofROM:
   19860/  100000 :                     		END
 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 15 - 5/14/2025 18:0:23


  Symbol Table (* = unused):
  --------------------------

 ANI_Sonic :                  66D5C C |  ANI_SonicFields :            68A06 C |
 ANI_Tails :                  67CD2 C |  ANI_TailsFields :            68CFA C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ARTCRA_ElectricField8x8 :    4C054 C |  ARTCRA_RainbowField8x8 :     45966 C |
 ARTCRA_SegaLogo :             6FA2 C |  ARTNEM_MainMenusText :        75DA C |
 ARTNEM_MenuSelectorBorder :   90B6 C |
*ARTNEM_RingTetherStarsUnused :                                       30E80 C |
 ARTNEM_SSZ8x8_BG :           39B1E C |  ARTNEM_SSZ8x8_FG :           30EE2 C |
 ARTNEM_SpikesHoz :           41F76 C |  ARTNEM_SpikesVer :           4221E C |
 ARTNEM_Springs :             41B9C C |  ARTNEM_TTZ8x8_BG :           3F6C4 C |
 ARTNEM_TTZ8x8_FG :           3A7CE C | *ARTUNC_Sonic :               80000 C |
*ARTUNC_SonicArms :           60000 C | *ARTUNC_SonicField :          90000 C |
 ARTUNC_TTZAnimatedFanFG1 :   42486 C |  ARTUNC_TTZAnimatedFanFG2 :   42686 C |
 ARTUNC_TTZAnimatedTurbineBG1 :                                       42886 C |
 ARTUNC_TTZAnimatedTurbineBG2 :                                       42C86 C |
 ARTUNC_TTZAnimatedTurbineBG3 :                                       43086 C |
 ARTUNC_TTZAnimatedTurbineBG4 :                                       43486 C |
 ARTUNC_TTZAnimatedTurbineBG5 :                                       44886 C |
 ARTUNC_TTZAnimatedTurbineBG6 :                                       448C6 C |
 ARTUNC_TTZAnimatedTurbineBG7 :                                       44906 C |
 ARTUNC_Tails :               A0000 C | *ARTUNC_TailsArms :           64000 C |
*ARTUNC_TailsField :          B0000 C |  ARTUNC_TitleCardBGAndPause : 4194E C |
*ARTUNC_UnknownHud :          98000 C | *AniArt_Combi :               44946 C |
 AniArt_Hud1to9_Sym :         44F66 C | *AniArt_Limits :              44A66 C |
 AniArt_MiliSymbol :          45906 C |  AniArt_MultiStars :          454C6 C |
 AniArt_RingSprites :         45246 C | *AniArt_Rings :               44D66 C |
 AniArt_SLTime :              44E66 C | *AniArt_Score :               44C66 C |
*AniArt_StripBlock :          44BA6 C |  AniArt_Tether :              45446 C |
 AniSonFld_Ball :             68A3A C |  AniSonFld_Normal :           68A10 C |
 AniSonFld_WalkDw :           68A16 C |  AniSonFld_WalkLR :           68A22 C |
 AniSonFld_WalkUp :           68A2E C |  AniSon_Balnce1 :             66DF2 C |
 AniSon_Balnce2 :             66DFA C |  AniSon_Dizzy :               66E1C C |
 AniSon_Hurt :                66E18 C |  AniSon_Normal :              66D90 C |
 AniSon_Roll :                66DDE C |  AniSon_Run000 :              66DBE C |
 AniSon_Run045 :              66DC6 C |  AniSon_Run090 :              66DCE C |
 AniSon_Run135 :              66DD6 C |  AniSon_Skid :                66E02 C |
 AniSon_Spindsh :             66E0A C |  AniSon_Wait :                66DEA C |
 AniSon_Walk000 :             66D96 C |  AniSon_Walk045 :             66DA0 C |
 AniSon_Walk090 :             66DAA C |  AniSon_Walk135 :             66DB4 C |
 AniTalFld_Ball :             68D2E C |  AniTalFld_Normal :           68D04 C |
 AniTalFld_WalkDw :           68D0A C |  AniTalFld_WalkLR :           68D16 C |
 AniTalFld_WalkUp :           68D22 C |  AniTal_Balnce1 :             67D9A C |
 AniTal_Balnce2 :             67DA2 C |  AniTal_Dizzy :               67DC6 C |
 AniTal_Hurt :                67DC2 C |  AniTal_Normal :              67D06 C |
 AniTal_Roll :                67D54 C |  AniTal_Run000 :              67D3C C |
 AniTal_Run045 :              67D42 C |  AniTal_Run090 :              67D48 C |
 AniTal_Run135 :              67D4E C |  AniTal_Skid :                67DAA C |
 AniTal_Spindsh :             67DB2 C |  AniTal_Wait :                67D70 C |
 AniTal_Walk000 :             67D0C C |  AniTal_Walk045 :             67D18 C |
 AniTal_Walk090 :             67D24 C |  AniTal_Walk135 :             67D30 C |
 ArtUnc_HUD :                 30000 C |  BGMChnPtrs :                   750 C |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
 BuildSprites :                1640 C | *CASESENSITIVE :                  1 - |
 COL_SSZPrimary :             3931E C | *COL_SSZSecondary :           3971E C |
 COL_TTZPrimary :             3EEC4 C | *COL_TTZSecondary :           3F2C4 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
*CUSTOM :                         0 - |  CalcSine :                    3F14 C |
 CharacterDataTable :          87BC C | *Checksum :                     18E C |
 ClearPLC :                     F22 C |  ClearPLC.loop :                F28 C |
 ClearSoundID :                 605 C |  CmdPtrTable :                  52E C |
 CollisionArrayNorm :          1E14 C |  CollisionArrayRota :          2E14 C |
*ControlInit_Unused :           936 C |  CracDec :                     883C C |
 CurveResistMappings :         3E14 C |  DACBank :                    20000 C |
 DACLoop :                      EF3 C |  DAC_Index :                   11DE C |
 DAC_Index.dac81 :             11EC C |  DAC_Index.dac82 :             11F2 C |
 DAC_Index.dac83 :             11F8 C |  DAC_Index.dac84 :             11FE C |
 DAC_Index.dac85 :             1204 C |  DAC_Index.dac86 :             120A C |
 DAC_Index.dac87 :             1210 C |  DAC_Sample1 :                20000 C |
 DAC_Sample1_End :            201D4 C |  DAC_Sample2 :                201D4 C |
 DAC_Sample2_End :            20FB2 C |  DAC_Sample3 :                20FB2 C |
 DAC_Sample3_End :            21672 C |  DAC_Sample4 :                21672 C |
 DAC_Sample4_End :            22BEE C |  DAC_Sample5 :                22BEE C |
 DAC_Sample5_End :            244A2 C | *DATE :                 "5/14/2025" - |
 DebugSoundbanks :                1 - |  DecEniMapLocs :               9D62 C |
 DecTable :                     F64 C |  DisableSSGEG :                 87A C |
 DoFMVolEnv :                   366 C |  DoFading :                     7D9 C |
 DoModEnv :                     411 C |  DoModulation :                 3C0 C |
 DoNoteOff :                    2F0 C |  DoNoteOn :                     2D7 C |
 DoPSGVolEnv :                  E95 C |  DoPanAnimation :               306 C |
 DoPause :                      760 C |  DoPitchSlide :                 466 C |
 DoRawFreqMode :                277 C |  DoSoundQueue :                 8D6 C |
 DoTempo :                      8C0 C |  DrumUpdateTrack :              9FA C |
 DrumUpdate_Proc :              A01 C |  DumpTileSizedPixel :          6842 C |
 Electoria_Call00 :           107D9 C |  Electoria_Call01 :           107E7 C |
 Electoria_Call02 :           107F5 C |  Electoria_Call03 :           10802 C |
 Electoria_Call04 :           10181 C |  Electoria_Call05 :           1055D C |
 Electoria_Call06 :           101AE C |  Electoria_Call07 :           101C3 C |
 Electoria_Call08 :           101EE C |  Electoria_Call09 :           1025C C |
 Electoria_Call0A :           102CB C |  Electoria_Call0B :           100A1 C |
 Electoria_Call0C :           10728 C |  Electoria_Call0D :           10735 C |
 Electoria_Call0E :           106BA C |  Electoria_Call0F :           106CC C |
 Electoria_Call10 :           106DE C |  Electoria_Call11 :           106F2 C |
 Electoria_Call12 :           1063C C |  Electoria_Call13 :           1033A C |
 Electoria_DAC :              10748 C |  Electoria_FM1 :              10030 C |
 Electoria_FM2 :              100B2 C |  Electoria_FM3 :              103DD C |
 Electoria_FM4 :              104E8 C |  Electoria_FM5 :              1056F C |
*Electoria_Header :           10000 C |  Electoria_Jump00 :           103EF C |
 Electoria_Jump01 :           100C7 C |  Electoria_Loop00 :           10759 C |
 Electoria_Loop01 :           1076A C |  Electoria_Loop02 :           1077B C |
 Electoria_Loop03 :           10796 C |  Electoria_Loop04 :           107A7 C |
 Electoria_Loop05 :           10573 C |  Electoria_Loop06 :           1057C C |
 Electoria_Loop07 :           10586 C |  Electoria_Loop08 :           105A5 C |
 Electoria_Loop09 :           105AF C |  Electoria_Loop0A :           105BE C |
 Electoria_Loop0B :           104EE C |  Electoria_Loop0C :           104F8 C |
 Electoria_Loop0D :           10507 C |  Electoria_Loop0E :           10522 C |
 Electoria_Loop0F :           10536 C |  Electoria_Loop10 :           1054B C |
 Electoria_Loop11 :           103E3 C |  Electoria_Loop12 :           104CA C |
 Electoria_Loop13 :           104D9 C |  Electoria_Loop14 :           100B6 C |
 Electoria_Loop15 :           10173 C |  Electoria_Loop16 :           10043 C |
 Electoria_Loop17 :           1004B C |  Electoria_Loop18 :           10055 C |
 Electoria_Loop19 :           10078 C |  Electoria_Loop1A :           1008E C |
 Electoria_Loop1B :           10096 C |  Electoria_Loop1C :           106FF C |
 Electoria_Loop1D :           10707 C |  Electoria_Loop1E :           10712 C |
 Electoria_Loop1F :           1071D C |  Electoria_Loop20 :           10654 C |
 Electoria_Loop21 :           10663 C |  Electoria_Loop22 :           1066F C |
 Electoria_Loop23 :           1067C C |  Electoria_Loop24 :           10686 C |
 Electoria_Loop25 :           106A8 C |  Electoria_Loop26 :           105CD C |
 Electoria_Loop27 :           105D5 C |  Electoria_Loop28 :           105DD C |
 Electoria_Loop29 :           1060C C |  Electoria_Loop2A :           10616 C |
 Electoria_Loop2B :           1061E C |  Electoria_Loop2C :           10631 C |
 Electoria_PSG1 :             105C9 C |  Electoria_PSG2 :             1064E C |
 Electoria_PSG3 :             106FD C |  Electoria_Voices :           1080F C |
 EndofROM :                  100000 C |  EniDec :                      105C C |
 EniDec_00 :                   10A2 C |  EniDec_00.loop :              10A2 C |
 EniDec_01 :                   10AC C |  EniDec_01.loop :              10AC C |
 EniDec_100 :                  10B4 C |  EniDec_100.loop :             10B8 C |
 EniDec_101 :                  10C0 C |  EniDec_101.loop :             10C4 C |
 EniDec_110 :                  10CE C |  EniDec_110.loop :             10D2 C |
 EniDec_111 :                  10DC C |  EniDec_111.loop :             10E2 C |
 EniDec_Done :                 10FE C |  EniDec_Done.evenbyte :        1110 C |
 EniDec_Done.notnewbyte :      1108 C |  EniDec_FetchByte :            11C2 C |
 EniDec_FetchByte.locret :     11D0 C |  EniDec_FetchInlineValue :     1112 C |
 EniDec_FetchInlineValue.enoughbits :                                  118C C |
 EniDec_FetchInlineValue.justenough :                                  119E C |
 EniDec_FetchInlineValue.maskvalue :                                   117A C |
 EniDec_FetchInlineValue.skiphighpal :                                 1132 C |
 EniDec_FetchInlineValue.skiplowpal :                                  1140 C |
 EniDec_FetchInlineValue.skippriority :                                1124 C |
 EniDec_FetchInlineValue.skipxflip :                                   115C C |
 EniDec_FetchInlineValue.skipyflip :                                   114E C |
 EniDec_Index :                10EE C |  EniDec_Masks :                11A2 C |
 Eni_Loop :                    1078 C |  Eni_Loop.sevenbitentry :      1092 C |
 EntryPoint :                   200 C |  EntryPoint.clearCRAM :         268 C |
 EntryPoint.clearRAM :          25C C |  EntryPoint.clearVSRAM :        272 C |
 EntryPoint.port1okay :         20E C |  EntryPoint.psginit :           27A C |
 EntryPoint.skipsecurity :      22E C |  EntryPoint.skipsetup :         28C C |
 EntryPoint.vdploop :           238 C |  EntryPoint.waitZ80 :           24A C |
 EntryPoint.writeZ80 :          250 C |  ErrorTrap :                    41A C |
 Evening_Star_Call00 :        116B7 C |  Evening_Star_Call01 :        112F3 C |
 Evening_Star_Call02 :        114BD C |  Evening_Star_Call03 :        114EF C |
 Evening_Star_Call04 :        11520 C |  Evening_Star_Call05 :        114A6 C |
 Evening_Star_Call06 :        113B7 C |  Evening_Star_Call07 :        113E9 C |
 Evening_Star_Call08 :        1142D C |  Evening_Star_Call09 :        1141A C |
 Evening_Star_Call0A :        112AB C |  Evening_Star_Call0B :        112B7 C |
 Evening_Star_Call0C :        11661 C |  Evening_Star_Call0D :        1166C C |
 Evening_Star_DAC :           1167A C |  Evening_Star_FM1 :           11240 C |
 Evening_Star_FM2 :           112CC C |  Evening_Star_FM3 :           11367 C |
 Evening_Star_FM4 :           1143E C |  Evening_Star_FM5 :           11531 C |
*Evening_Star_Header :        11210 C |  Evening_Star_Jump00 :        1153F C |
 Evening_Star_Jump01 :        11258 C |  Evening_Star_Jump02 :        115BB C |
 Evening_Star_Jump03 :        11562 C |  Evening_Star_Loop00 :        1168E C |
 Evening_Star_Loop01 :        11696 C |  Evening_Star_Loop02 :        116AC C |
 Evening_Star_Loop03 :        11456 C |  Evening_Star_Loop04 :        11377 C |
 Evening_Star_Loop05 :        112E6 C |  Evening_Star_Loop06 :        11616 C |
 Evening_Star_Loop07 :        11623 C |  Evening_Star_PSG1 :          1154F C |
 Evening_Star_PSG2 :          115A1 C |  Evening_Star_PSG3 :          11614 C |
 Evening_Star_Voices :        116C7 C |  ExecPanAnim :                  350 C |
*FALSE :                          0 - |  FM3_FreqVals :                 D83 C |
 FMFreqs :                      9E2 C |  FMInitBytes :                  60B C |
 FMNoteOff :                    2FC C | *FULLPMMU :                       1 - |
 FadeInMusic :                  536 C |  FadeOutMusic :                 7B9 C |
 Field_LoadArt :               8634 C |  Field_PauseGame :             8064 C |
 Field_ReadController :        7F2E C |  Fields :                      7E08 C |
 Fields_MainLoop :             7EEC C |  Fields_MainLoop.wait :        7EF8 C |
 Fields_VDPSettings :          7ED8 C |  FinishFMTrkInit :              716 C |
 FinishTrkInit :                71D C |  FixDriverBugs :                  0 - |
 GMAReturn :                   508E C |  GameModeArray :               500E C |
 GameProgram :                  2FA C |  Game_Over_DAC :              11BF8 C |
 Game_Over_FM1 :              11B40 C |  Game_Over_FM2 :              11B77 C |
 Game_Over_FM3 :              11B96 C |  Game_Over_FM4 :              11BAB C |
 Game_Over_FM5 :              11BE1 C | *Game_Over_Header :           11B10 C |
 Game_Over_PSG1 :             11BF5 C |  Game_Over_PSG2 :             11BF6 C |
 Game_Over_PSG3 :             11BF7 C |  Game_Over_Voices :           11C01 C |
 GetFM3FreqPtr :                1ED C |  GetFMInsPtr :                  4AC C |
 GetNote :                      22F C |  GetSFXChnPtrs :                6D7 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 Hyper_Hyper_Call00 :         1117A C |  Hyper_Hyper_Call01 :         11187 C |
 Hyper_Hyper_Call02 :         11197 C |  Hyper_Hyper_Call03 :         10F7D C |
 Hyper_Hyper_Call04 :         10F2C C |  Hyper_Hyper_Call05 :         10F21 C |
 Hyper_Hyper_Call06 :         10E0F C |  Hyper_Hyper_Call07 :         10E2A C |
 Hyper_Hyper_Call08 :         10D06 C |  Hyper_Hyper_Call09 :         10D14 C |
 Hyper_Hyper_Call0A :         10D1F C |  Hyper_Hyper_Call0B :         10C5E C |
 Hyper_Hyper_Call0C :         10C53 C |  Hyper_Hyper_Call0D :         11110 C |
 Hyper_Hyper_Call0E :         1111E C |  Hyper_Hyper_Call0F :         11018 C |
 Hyper_Hyper_Call10 :         11009 C |  Hyper_Hyper_DAC :            11132 C |
 Hyper_Hyper_FM1 :            10C0A C |  Hyper_Hyper_FM2 :            10C70 C |
 Hyper_Hyper_FM3 :            10D34 C |  Hyper_Hyper_FM4 :            10E35 C |
 Hyper_Hyper_FM5 :            10F32 C | *Hyper_Hyper_Header :         10BDA C |
 Hyper_Hyper_Jump00 :         10E5D C |  Hyper_Hyper_Jump01 :         10D41 C |
 Hyper_Hyper_Jump02 :         10C7D C |  Hyper_Hyper_Jump03 :         11058 C |
 Hyper_Hyper_Jump04 :         10FA1 C |  Hyper_Hyper_Loop00 :         11143 C |
 Hyper_Hyper_Loop01 :         11154 C |  Hyper_Hyper_Loop02 :         10F34 C |
 Hyper_Hyper_Loop03 :         10F3C C |  Hyper_Hyper_Loop04 :         10F54 C |
 Hyper_Hyper_Loop05 :         10E3B C |  Hyper_Hyper_Loop06 :         10C23 C |
 Hyper_Hyper_Loop07 :         110C4 C |  Hyper_Hyper_Loop08 :         110CF C |
 Hyper_Hyper_Loop09 :         110DF C |  Hyper_Hyper_PSG1 :           10F89 C |
 Hyper_Hyper_PSG2 :           1103B C |  Hyper_Hyper_PSG3 :           110C2 C |
 Hyper_Hyper_Voices :         111AC C | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 InitDriver :                    B2 C |  InitialVDPSetupArray :         420 C |
 JumpToInsData :                4BB C | *KosDec :                      11D2 C |
 Kos_Done :                    126E C |  Kos_Loop :                    11DE C |
 Kos_Loop.chkbit :             11F0 C |  Kos_RLE :                     11F8 C |
 Kos_RLE.chkbit :              120C C |  Kos_RLE.loop1 :               1220 C |
 Kos_RLE.loop2 :               1232 C |  Kos_RLELoop :                 1252 C |
 Kos_SeparateRLE :             123C C |  Kos_SeparateRLE2 :            125E C |
*LISTON :                         1 - |  LevelSelect :                 8E0C C |
 LevelSelect.submodes :        8E14 C |  LevelSelect_Init :            8E1C C |
 LevelSelect_Main :            8EC0 C |  LevelSelect_Main.wait :       8EC6 C |
 LevelSelect_PlayField :       9014 C |  LevelSelect_PlayLevel :       9022 C |
 LevelSelect_PlaySpecial :     9000 C |  Level_AnimateBG :             F954 C |
 Level_LoadObjectArt :         8C30 C |  Level_LoadObjectArt.exit :    8C7E C |
 Level_MainLoop :              89E0 C |  Level_MainLoop.wait :         89EC C |
 Level_PauseGame :             8B7E C |  Level_ReadController :        8A3A C |
 Level_UpdateHUD :             EBAE C |  Level_VDPSettings :           89C8 C |
 Levels :                      8896 C | *MACEXP :                         7 - |
 MAINPROG :                    5000 C |  MAINPROGLOOP :                 410 C |
 MAPENI_SSZ128x128_BG :       3A6E8 C |  MAPENI_SSZ128x128_FG :       35762 C |
 MAPENI_SSZ16x16_BG :         3A5FE C |  MAPENI_SSZ16x16_FG :         3452C C |
 MAPENI_SSZLayout_BG :        3A7B8 C |  MAPENI_SSZLayout_FG :        39086 C |
 MAPENI_TTZ128x128_BG :       4108C C |  MAPENI_TTZ128x128_FG :       3C60A C |
 MAPENI_TTZ16x16_BG :         409E2 C |  MAPENI_TTZ16x16_FG :         3BB24 C |
 MAPENI_TTZLayout_BG :        4183E C |  MAPENI_TTZLayout_FG :        3ED12 C |
 MAPSon_BlncIn1 :             67350 C |  MAPSon_BlncIn2 :             6735C C |
 MAPSon_BlncIn3 :             67368 C |  MAPSon_BlncOut1 :            67374 C |
 MAPSon_BlncOut2 :            67386 C |  MAPSon_BlncOut3 :            67398 C |
 MAPSon_Climb1 :              676AA C |  MAPSon_Climb2 :              676B6 C |
 MAPSon_Climb3 :              676C2 C |  MAPSon_Climb4 :              676CE C |
 MAPSon_Climb5 :              676DA C |  MAPSon_Dizzy1 :              67650 C |
 MAPSon_Dizzy2 :              67662 C |  MAPSon_Dizzy3 :              6766E C |
 MAPSon_Dizzy4 :              6767A C |  MAPSon_Dizzy5 :              67686 C |
 MAPSon_Dizzy6 :              67698 C |  MAPSon_Hurt :                6732C C |
 MAPSon_LookDown :            67320 C |  MAPSon_LookUp :              67314 C |
 MAPSon_Pull1 :               67620 C |  MAPSon_Pull2 :               67626 C |
 MAPSon_Roll1 :               67632 C |  MAPSon_Roll2 :               67638 C |
 MAPSon_Roll3 :               6763E C |  MAPSon_Roll4 :               67644 C |
 MAPSon_Roll5 :               6764A C |  MAPSon_Run1_000 :            67530 C |
 MAPSon_Run1_045 :            67560 C |  MAPSon_Run1_090 :            67590 C |
 MAPSon_Run1_135 :            675C0 C |  MAPSon_Run2_000 :            6753C C |
 MAPSon_Run2_045 :            6756C C |  MAPSon_Run2_090 :            6759C C |
 MAPSon_Run2_135 :            675CC C |  MAPSon_Run3_000 :            67548 C |
 MAPSon_Run3_045 :            67578 C |  MAPSon_Run3_090 :            675A8 C |
 MAPSon_Run3_135 :            675D8 C |  MAPSon_Run4_000 :            67554 C |
 MAPSon_Run4_045 :            67584 C |  MAPSon_Run4_090 :            675B4 C |
 MAPSon_Run4_135 :            675E4 C |  MAPSon_Skid1 :               675F0 C |
 MAPSon_Skid2 :               675FC C |  MAPSon_Skid3 :               6760E C |
 MAPSon_Spindash1 :           67758 C |  MAPSon_Spindash2 :           6775E C |
 MAPSon_Spindash3 :           67764 C |  MAPSon_Spindash4 :           6776A C |
 MAPSon_Spindash5 :           67770 C |  MAPSon_Spindash6 :           67776 C |
 MAPSon_Stand :               67302 C |  MAPSon_Throw1 :              676E6 C |
 MAPSon_Throw2 :              676F8 C |  MAPSon_Throw3 :              67704 C |
 MAPSon_Throw4 :              67710 C |  MAPSon_Wait1 :               67338 C |
 MAPSon_Wait2 :               67344 C |  MAPSon_Walk1_000 :           673CE C |
 MAPSon_Walk1_045 :           67428 C |  MAPSon_Walk1_090 :           6748E C |
 MAPSon_Walk1_135 :           674E8 C |  MAPSon_Walk2_000 :           673DA C |
 MAPSon_Walk2_045 :           6743A C |  MAPSon_Walk2_090 :           6749A C |
 MAPSon_Walk2_135 :           674FA C |  MAPSon_Walk3_000 :           673E6 C |
 MAPSon_Walk3_045 :           6744C C |  MAPSon_Walk3_090 :           674A6 C |
 MAPSon_Walk3_135 :           6750C C |  MAPSon_Walk4_000 :           673F8 C |
 MAPSon_Walk4_045 :           6745E C |  MAPSon_Walk4_090 :           674B8 C |
 MAPSon_Walk4_135 :           6751E C |  MAPSon_Walk5_000 :           673AA C |
 MAPSon_Walk5_045 :           67404 C |  MAPSon_Walk5_090 :           67470 C |
 MAPSon_Walk5_135 :           674C4 C |  MAPSon_Walk6_000 :           673BC C |
 MAPSon_Walk6_045 :           67416 C |  MAPSon_Walk6_090 :           67482 C |
 MAPSon_Walk6_135 :           674D6 C |  MAPSon_WallJump1 :           6771C C |
 MAPSon_WallJump2 :           6772E C |  MAPSon_WallJump3 :           67734 C |
 MAPSon_WallJump4 :           67740 C |  MAPSon_WallJump5 :           6774C C |
 MAPTArm_BlncIn1 :            67BAC C |  MAPTArm_BlncIn2 :            67BB2 C |
 MAPTArm_BlncIn3 :            67BB8 C |  MAPTArm_BlncOut1 :           67B9A C |
 MAPTArm_BlncOut2 :           67BA0 C |  MAPTArm_BlncOut3 :           67BA6 C |
 MAPTArm_Hold1_000 :          67C48 C |  MAPTArm_Hold1_045 :          67C5A C |
 MAPTArm_Hold1_090 :          67C6C C |  MAPTArm_Hold1_135 :          67C7E C |
 MAPTArm_Hold2_000 :          67C4E C |  MAPTArm_Hold2_045 :          67C60 C |
 MAPTArm_Hold2_090 :          67C72 C |  MAPTArm_Hold2_135 :          67C84 C |
 MAPTArm_Hold3_000 :          67C54 C |  MAPTArm_Hold3_045 :          67C66 C |
 MAPTArm_Hold3_090 :          67C78 C |  MAPTArm_Hold3_135 :          67C8A C |
 MAPTArm_Pul_DwnRht_020 :     67B52 C |  MAPTArm_Pul_DwnRht_045 :     67B58 C |
 MAPTArm_Pul_DwnRht_060 :     67B5E C |  MAPTArm_Pul_Dwn_000 :        67B4C C |
 MAPTArm_Pul_LftDwn_020 :     67B3A C |  MAPTArm_Pul_LftDwn_045 :     67B40 C |
 MAPTArm_Pul_LftDwn_060 :     67B46 C |  MAPTArm_Pul_Lft_000 :        67B34 C |
 MAPTArm_Pul_RhtUp_020 :      67B6A C |  MAPTArm_Pul_RhtUp_045 :      67B70 C |
 MAPTArm_Pul_RhtUp_060 :      67B7C C |  MAPTArm_Pul_Rht_000 :        67B64 C |
 MAPTArm_Pul_UpDwn_020 :      67B88 C |  MAPTArm_Pul_UpDwn_045 :      67B8E C |
 MAPTArm_Pul_UpDwn_060 :      67B94 C |  MAPTArm_Pul_Up_000 :         67B82 C |
 MAPTArm_Run_000 :            67C30 C |  MAPTArm_Run_045 :            67C36 C |
 MAPTArm_Run_090 :            67C3C C |  MAPTArm_Run_135 :            67C42 C |
 MAPTArm_Unused_00 :          67C1E C |  MAPTArm_Unused_01 :          67C24 C |
 MAPTArm_Unused_02 :          67C2A C |  MAPTArm_Unused_03 :          67C90 C |
 MAPTArm_Unused_04 :          67C96 C |  MAPTArm_Unused_05 :          67C9C C |
 MAPTArm_Unused_06 :          67CA2 C |  MAPTArm_Unused_07 :          67CA8 C |
 MAPTArm_Unused_08 :          67CAE C |  MAPTArm_Unused_09 :          67CB4 C |
 MAPTArm_Unused_0A :          67CBA C |  MAPTArm_Unused_0B :          67CC0 C |
 MAPTArm_Unused_0C :          67CC6 C |  MAPTArm_Unused_0D :          67CCC C |
 MAPTArm_Walk1_000 :          67BC4 C |  MAPTArm_Walk1_045 :          67BDC C |
 MAPTArm_Walk1_090 :          67BF4 C |  MAPTArm_Walk1_135 :          67C0C C |
 MAPTArm_Walk2_000 :          67BCA C |  MAPTArm_Walk2_045 :          67BE2 C |
 MAPTArm_Walk2_090 :          67BFA C |  MAPTArm_Walk2_135 :          67C12 C |
 MAPTArm_Walk3_000 :          67BD0 C |  MAPTArm_Walk3_045 :          67BE8 C |
 MAPTArm_Walk3_090 :          67C00 C |  MAPTArm_Walk3_135 :          67C18 C |
 MAPTArm_Walk4_000 :          67BBE C |  MAPTArm_Walk4_045 :          67BD6 C |
 MAPTArm_Walk4_090 :          67BEE C |  MAPTArm_Walk4_135 :          67C06 C |
 MAPTal_BlncIn1 :             68862 C |  MAPTal_BlncIn2 :             6886E C |
 MAPTal_BlncIn3 :             6887A C |  MAPTal_BlncOut1 :            6884A C |
 MAPTal_BlncOut2 :            68850 C |  MAPTal_BlncOut3 :            6885C C |
 MAPTal_Dizzy1 :              688BC C |  MAPTal_Dizzy2 :              688C2 C |
 MAPTal_Dizzy3 :              688CE C |  MAPTal_Dizzy4 :              688DA C |
 MAPTal_Dizzy5 :              688E0 C |  MAPTal_Dizzy6 :              688E6 C |
 MAPTal_Dizzy7 :              688F2 C |  MAPTal_Dizzy8 :              688FE C |
 MAPTal_Fly :                 687FC C |  MAPTal_FlyHeliTails :        6880E C |
 MAPTal_FlyTired1 :           68802 C |  MAPTal_FlyTired2 :           68808 C |
 MAPTal_Hang2 :               688B0 C |  MAPTal_Hurt :                687F6 C |
 MAPTal_LookDown :            68538 C |  MAPTal_LookUp :              68532 C |
 MAPTal_Roll1 :               687D2 C |  MAPTal_Roll2 :               687D8 C |
 MAPTal_Roll3 :               687DE C |  MAPTal_Run1_000 :            68772 C |
 MAPTal_Run1_045 :            6878A C |  MAPTal_Run1_090 :            687A2 C |
 MAPTal_Run1_135 :            687BA C |  MAPTal_Run2_000 :            6877E C |
 MAPTal_Run2_045 :            68796 C |  MAPTal_Run2_090 :            687AE C |
 MAPTal_Run2_135 :            687C6 C |  MAPTal_RunFast01_000 :       68970 C |
 MAPTal_RunFast01_045 :       6898E C |  MAPTal_RunFast01_090 :       689AC C |
 MAPTal_RunFast01_135 :       689CA C |  MAPTal_RunFast02_000 :       68976 C |
 MAPTal_RunFast02_045 :       68994 C |  MAPTal_RunFast02_090 :       689B2 C |
 MAPTal_RunFast02_135 :       689D0 C |  MAPTal_RunNorm01_000 :       68964 C |
 MAPTal_RunNorm01_045 :       6897C C |  MAPTal_RunNorm01_090 :       689A0 C |
 MAPTal_RunNorm01_135 :       689B8 C |  MAPTal_RunNorm02_000 :       6896A C |
 MAPTal_RunNorm02_045 :       68988 C |  MAPTal_RunNorm02_090 :       689A6 C |
 MAPTal_RunNorm02_135 :       689BE C |  MAPTal_Skid1 :               68814 C |
 MAPTal_Skid2 :               68820 C |  MAPTal_Skid3 :               6882C C |
 MAPTal_Spindsh1 :            687E4 C |  MAPTal_Spindsh2 :            687EA C |
 MAPTal_Spindsh3 :            687F0 C |  MAPTal_Stand :               6852C C |
 MAPTal_TalJmp01_000 :        68904 C |  MAPTal_TalJmp01_045 :        6891C C |
 MAPTal_TalJmp01_090 :        68934 C |  MAPTal_TalJmp01_135 :        6894C C |
 MAPTal_TalJmp02_000 :        6890A C |  MAPTal_TalJmp02_045 :        68922 C |
 MAPTal_TalJmp02_090 :        6893A C |  MAPTal_TalJmp02_135 :        68952 C |
 MAPTal_TalJmp03_000 :        68910 C |  MAPTal_TalJmp03_045 :        68928 C |
 MAPTal_TalJmp03_090 :        68940 C |  MAPTal_TalJmp03_135 :        68958 C |
 MAPTal_TalJmp04_000 :        68916 C |  MAPTal_TalJmp04_045 :        6892E C |
 MAPTal_TalJmp04_090 :        68946 C |  MAPTal_TalJmp04_135 :        6895E C |
 MAPTal_Throw1 :              68886 C |  MAPTal_Throw2 :              68892 C |
 MAPTal_Throw3 :              6889E C |  MAPTal_Throw4 :              688AA C |
 MAPTal_UnkSkid1 :            68832 C |  MAPTal_UnkSkid2 :            6883E C |
 MAPTal_UnkTails1 :           689D6 C |  MAPTal_UnkTails2 :           689E2 C |
 MAPTal_Wait01 :              689E8 C |  MAPTal_Wait02 :              689EE C |
 MAPTal_Wait03 :              689F4 C |  MAPTal_Wait04 :              689FA C |
 MAPTal_Wait05 :              68A00 C |  MAPTal_WaitBlink1 :          68544 C |
 MAPTal_WaitBlink2 :          6853E C |  MAPTal_WaitStare :           6854A C |
 MAPTal_WaitYawn1 :           68550 C |  MAPTal_WaitYawn2 :           68556 C |
 MAPTal_WaitYawn3 :           6855C C |  MAPTal_Walk1_000 :           68586 C |
 MAPTal_Walk1_045 :           6860A C |  MAPTal_Walk1_090 :           6868E C |
 MAPTal_Walk1_135 :           68718 C |  MAPTal_Walk2_000 :           68598 C |
 MAPTal_Walk2_045 :           68616 C |  MAPTal_Walk2_090 :           686A0 C |
 MAPTal_Walk2_135 :           68724 C |  MAPTal_Walk3_000 :           685AA C |
 MAPTal_Walk3_045 :           68628 C |  MAPTal_Walk3_090 :           686B2 C |
 MAPTal_Walk3_135 :           68736 C |  MAPTal_Walk4_000 :           685BC C |
 MAPTal_Walk4_045 :           68634 C |  MAPTal_Walk4_090 :           686C4 C |
 MAPTal_Walk4_135 :           68742 C |  MAPTal_Walk5_000 :           685CE C |
 MAPTal_Walk5_045 :           68646 C |  MAPTal_Walk5_090 :           686D6 C |
 MAPTal_Walk5_135 :           68754 C |  MAPTal_Walk6_000 :           685E0 C |
 MAPTal_Walk6_045 :           68658 C |  MAPTal_Walk6_090 :           686E8 C |
 MAPTal_Walk6_135 :           68760 C |  MAPTal_Walk7_000 :           68562 C |
 MAPTal_Walk7_045 :           685EC C |  MAPTal_Walk7_090 :           6866A C |
 MAPTal_Walk7_135 :           686F4 C |  MAPTal_Walk8_000 :           68574 C |
 MAPTal_Walk8_045 :           685F8 C |  MAPTal_Walk8_090 :           6867C C |
 MAPTal_Walk8_135 :           68706 C |  MAPUNC_ElectricFieldBG :     530AC C |
 MAPUNC_ElectricFieldFG :     5108A C |  MAPUNC_RainbowFieldBG :      4B002 C |
 MAPUNC_RainbowFieldFG :      48FE0 C |  MAPUNC_SelectMenu_1 :         90EA C |
 MAPUNC_SelectMenu_2 :         922A C |  MAPUNC_SelectMenu_3 :         92CA C |
 MAPUNC_SelectMenu_4 :         936A C |  MAPUNC_SelectMenu_5 :         93AA C |
 MAPUNC_TitleMenu_1 :          78E8 C |  MAPUNC_TitleMenu_2 :          7DA8 C |
 MAPUNC_TitleMenu_3 :          7DE8 C |  MAP_Tails :                  6852C C |
 MAP_TailsArm :               67B34 C |  MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - |  MapSArm_Hold1_000 :          66C66 C |
 MapSArm_Hold1_045 :          66C78 C |  MapSArm_Hold1_090 :          66C8A C |
 MapSArm_Hold1_135 :          66C9C C |  MapSArm_Hold2_000 :          66C6C C |
 MapSArm_Hold2_045 :          66C7E C |  MapSArm_Hold2_090 :          66C90 C |
 MapSArm_Hold2_135 :          66CA2 C |  MapSArm_Hold3_000 :          66C72 C |
 MapSArm_Hold3_045 :          66C84 C |  MapSArm_Hold3_090 :          66C96 C |
 MapSArm_Hold3_135 :          66CA8 C |  MapSArm_Pul_DwnRht_020 :     66C0C C |
 MapSArm_Pul_DwnRht_045 :     66C12 C |  MapSArm_Pul_DwnRht_060 :     66C1E C |
 MapSArm_Pul_Dwn_000 :        66C06 C |  MapSArm_Pul_LftDwn_020 :     66BF4 C |
 MapSArm_Pul_LftDwn_045 :     66BFA C |  MapSArm_Pul_LftDwn_060 :     66C00 C |
 MapSArm_Pul_Lft_000 :        66BEE C |  MapSArm_Pul_RhtUp_020 :      66C30 C |
 MapSArm_Pul_RhtUp_045 :      66C36 C |  MapSArm_Pul_RhtUp_060 :      66C42 C |
 MapSArm_Pul_Rht_000 :        66C24 C |  MapSArm_Pul_UpDwn_020 :      66C4E C |
 MapSArm_Pul_UpDwn_045 :      66C54 C |  MapSArm_Pul_UpDwn_060 :      66C60 C |
 MapSArm_Pul_Up_000 :         66C48 C |  MapSArm_Run_000 :            66BD6 C |
 MapSArm_Run_045 :            66BDC C |  MapSArm_Run_090 :            66BE2 C |
 MapSArm_Run_135 :            66BE8 C |  MapSArm_Unused_00 :          66CAE C |
 MapSArm_Unused_01 :          66CB4 C |  MapSArm_Unused_02 :          66CBA C |
 MapSArm_Unused_03 :          66CC0 C |  MapSArm_Unused_04 :          66CC6 C |
 MapSArm_Unused_05 :          66CCC C |  MapSArm_Unused_06 :          66CD2 C |
 MapSArm_Unused_07 :          66CD8 C |  MapSArm_Unused_08 :          66CDE C |
 MapSArm_Unused_09 :          66CE4 C |  MapSArm_Unused_0A :          66CEA C |
 MapSArm_Unused_0B :          66CF0 C |  MapSArm_Unused_0C :          66CF6 C |
 MapSArm_Unused_0D :          66CFC C |  MapSArm_Unused_0E :          66D08 C |
 MapSArm_Unused_0F :          66D0E C |  MapSArm_Unused_10 :          66D14 C |
 MapSArm_Unused_11 :          66D1A C |  MapSArm_Unused_12 :          66D20 C |
 MapSArm_Unused_13 :          66D26 C |  MapSArm_Unused_14 :          66D2C C |
 MapSArm_Unused_15 :          66D32 C |  MapSArm_Unused_16 :          66D38 C |
 MapSArm_Unused_17 :          66D3E C |  MapSArm_Unused_18 :          66D44 C |
 MapSArm_Unused_19 :          66D4A C |  MapSArm_Unused_1A :          66D56 C |
 MapSArm_Wait1 :              66B34 C |  MapSArm_Wait2 :              66B3A C |
 MapSArm_Wait3 :              66B40 C |  MapSArm_Walk1_000 :          66B52 C |
 MapSArm_Walk1_045 :          66B76 C |  MapSArm_Walk1_090 :          66B9A C |
 MapSArm_Walk1_135 :          66BBE C |  MapSArm_Walk2_000 :          66B58 C |
 MapSArm_Walk2_045 :          66B7C C |  MapSArm_Walk2_090 :          66BA0 C |
 MapSArm_Walk2_135 :          66BC4 C |  MapSArm_Walk3_000 :          66B5E C |
 MapSArm_Walk3_045 :          66B82 C |  MapSArm_Walk3_090 :          66BA6 C |
 MapSArm_Walk3_135 :          66BCA C |  MapSArm_Walk4_000 :          66B64 C |
 MapSArm_Walk4_045 :          66B88 C |  MapSArm_Walk4_090 :          66BAC C |
 MapSArm_Walk4_135 :          66BD0 C |  MapSArm_Walk5_000 :          66B46 C |
 MapSArm_Walk5_045 :          66B6A C |  MapSArm_Walk5_090 :          66B8E C |
 MapSArm_Walk5_135 :          66BB2 C |  MapSArm_Walk6_000 :          66B4C C |
 MapSArm_Walk6_045 :          66B70 C |  MapSArm_Walk6_090 :          66B94 C |
 MapSArm_Walk6_135 :          66BB8 C |  MapScreen :                    8A2 C |
 MapScreen.cell :               8B6 C |  MapScreen.line :               8B0 C |
 MapSonFld_StandBckward :     68BFE C |  MapSonFld_StandForward :     68BE6 C |
 MapSonFld_StandLftRht :      68BF2 C |  MapSonFld_UncBall_1 :        68CE8 C |
 MapSonFld_UncBall_2 :        68CEE C |  MapSonFld_UncBall_3 :        68CF4 C |
 MapSonFld_WalkDwn_1 :        68C0A C |  MapSonFld_WalkDwn_2 :        68C16 C |
 MapSonFld_WalkDwn_3 :        68C22 C |  MapSonFld_WalkDwn_4 :        68C28 C |
 MapSonFld_WalkDwn_5 :        68C2E C |  MapSonFld_WalkDwn_6 :        68C3A C |
 MapSonFld_WalkDwn_7 :        68C46 C |  MapSonFld_WalkDwn_8 :        68C4C C |
 MapSonFld_WalkLR_1 :         68C52 C |  MapSonFld_WalkLR_2 :         68C5E C |
 MapSonFld_WalkLR_3 :         68C6A C |  MapSonFld_WalkLR_4 :         68C76 C |
 MapSonFld_WalkLR_5 :         68C82 C |  MapSonFld_WalkLR_6 :         68C88 C |
 MapSonFld_WalkLR_7 :         68C8E C |  MapSonFld_WalkLR_8 :         68C94 C |
 MapSonFld_WalkUp_1 :         68CA0 C |  MapSonFld_WalkUp_2 :         68CAC C |
 MapSonFld_WalkUp_3 :         68CB2 C |  MapSonFld_WalkUp_4 :         68CB8 C |
 MapSonFld_WalkUp_5 :         68CC4 C |  MapSonFld_WalkUp_6 :         68CD0 C |
 MapSonFld_WalkUp_7 :         68CD6 C |  MapSonFld_WalkUp_8 :         68CDC C |
 MapTalFld_StandBckward :     68EFE C |  MapTalFld_StandForward :     68EF2 C |
 MapTalFld_StandLftRht :      68EF8 C |  MapTalFld_UncBall_1 :        68FC4 C |
 MapTalFld_UncBall_2 :        68FCA C |  MapTalFld_UncBall_3 :        68FD0 C |
 MapTalFld_WalkDwn_1 :        68F04 C |  MapTalFld_WalkDwn_2 :        68F0A C |
 MapTalFld_WalkDwn_3 :        68F10 C |  MapTalFld_WalkDwn_4 :        68F16 C |
 MapTalFld_WalkDwn_5 :        68F1C C |  MapTalFld_WalkDwn_6 :        68F22 C |
 MapTalFld_WalkDwn_7 :        68F28 C |  MapTalFld_WalkDwn_8 :        68F2E C |
 MapTalFld_WalkLR_1 :         68F34 C |  MapTalFld_WalkLR_2 :         68F40 C |
 MapTalFld_WalkLR_3 :         68F4C C |  MapTalFld_WalkLR_4 :         68F58 C |
 MapTalFld_WalkLR_5 :         68F64 C |  MapTalFld_WalkLR_6 :         68F70 C |
 MapTalFld_WalkLR_7 :         68F7C C |  MapTalFld_WalkLR_8 :         68F88 C |
 MapTalFld_WalkUp_1 :         68F94 C |  MapTalFld_WalkUp_2 :         68F9A C |
 MapTalFld_WalkUp_3 :         68FA0 C |  MapTalFld_WalkUp_4 :         68FA6 C |
 MapTalFld_WalkUp_5 :         68FAC C |  MapTalFld_WalkUp_6 :         68FB2 C |
 MapTalFld_WalkUp_7 :         68FB8 C |  MapTalFld_WalkUp_8 :         68FBE C |
 Map_Sonic :                  67302 C |  Map_SonicArm :               66B34 C |
 Map_SonicFields :            68BE6 C |  Map_SpikesAng :              4234C C |
 Map_SpikesLR :               42346 C |  Map_SpikesUpLrg :            4233A C |
 Map_SpringAngUp :            42304 C |  Map_SpringLR :               422BC C |
 Map_SpringUp :               422E0 C |  Map_TailsFields :            68EF2 C |
 ModEnvPtrs :                  1010 C |  ModEnv_ChgMult :               447 C |
 ModEnv_Jump2Idx :              440 C |  ModEnv_Next :                  459 C |
 ModEnv_Positive :              457 C |  ModEnv_Reset :                 444 C |
 Moonrise_Call00 :            11A7C C |  Moonrise_Call01 :            11A87 C |
 Moonrise_Call02 :            118E7 C |  Moonrise_Call03 :            118FB C |
 Moonrise_Call04 :            11928 C |  Moonrise_Call05 :            1194C C |
 Moonrise_Call06 :            118AB C |  Moonrise_Call07 :            11874 C |
 Moonrise_Call08 :            11841 C |  Moonrise_Call09 :            11770 C |
 Moonrise_Call0A :            11A19 C |  Moonrise_Call0B :            11988 C |
 Moonrise_DAC :               11A2D C |  Moonrise_FM1 :               1175B C |
 Moonrise_FM2 :               11780 C |  Moonrise_FM3 :               1184E C |
 Moonrise_FM4 :               11881 C |  Moonrise_FM5 :               118B8 C |
*Moonrise_Header :            1172B C |  Moonrise_Jump00 :            11A4A C |
 Moonrise_Jump01 :            117C2 C |  Moonrise_Jump02 :            119FE C |
 Moonrise_Jump03 :            11982 C |  Moonrise_Loop00 :            118C7 C |
 Moonrise_Loop01 :            1188F C |  Moonrise_Loop02 :            1185C C |
 Moonrise_Loop03 :            117D5 C |  Moonrise_Loop04 :            11814 C |
 Moonrise_Loop05 :            1175D C |  Moonrise_Loop06 :            11765 C |
 Moonrise_Loop07 :            11A06 C |  Moonrise_Loop08 :            11A0E C |
 Moonrise_PSG1 :              11971 C |  Moonrise_PSG2 :              119E9 C |
 Moonrise_PSG3 :              11A04 C |  Moonrise_Voices :            11A93 C |
 MultiReturn :                 6524 C |  Music81 :                    10000 C |
 Music82 :                    1088C C |  Music83 :                    10BDA C |
 Music84 :                    11210 C |  Music85 :                    1172B C |
 Music86 :                    11B10 C |  MusicBank :                  10000 C |
 MusicBanks :                  114D C |  MusicIndex :                  1153 C |
*NESTMAX :                      100 - |  NemBCT_ChkEnd :                EA4 C |
 NemBCT_Loop :                  EAE C |  NemBCT_NewPALIndex :           EAC C |
 NemBCT_ShortCode :             EDC C |  NemBCT_ShortCode_Loop :        EE8 C |
 NemDec :                       DC8 C |  NemDecMain :                   DD8 C |
 NemDecToRAM :                  DD4 C |  NemDec_BuildCodeTable :        EA2 C |
 NemDec_ProcessCompressedData : DFE C |  NemPCD_InlineData :            E4A C |
 NemPCD_NewRow :                E40 C |  NemPCD_ProcessCompressedData : E34 C |
 NemPCD_WritePixel :            E36 C |  NemPCD_WritePixel_Loop :       E44 C |
 NemPCD_WriteRowToRAM :         E8C C | *NemPCD_WriteRowToRAM_XOR :     E96 C |
 NemPCD_WriteRowToVDP :         E76 C |  NemPCD_WriteRowToVDP_XOR :     E80 C |
 ObjPos_Pointers :             8C20 C |  Obj_Index :                   D224 C |
 Objpos_SSZ :                 4236A C |  Objpos_TTZ :                 423C4 C |
 OptimiseDriver :                 0 - |  OptionSoundTest :             93CC C |
 OptionSoundTest.submodes :    93D4 C |  OptionSoundTest_Exit :        944C C |
 OptionSoundTest_Exit.wait :   9452 C |  OptionSoundTest_Main :        93DC C |
*PACKING :                        0 - | *PADDING :                        0 - |
 PALCY_ElectricField_1 :       83EA C | *PALCY_ElectricField_2 :       8572 C |
 PALCY_RainbowField :          835C C |  PAL_ElectricField :          4C014 C |
 PAL_MainMenus :               749C C |  PAL_PrimaryColours :          8988 C |
 PAL_PrimaryColours_Field :    7E98 C |  PAL_RainbowField :           45926 C |
 PAL_Segalogo :                6F62 C |  PAL_SpeedSliderZone :         9C68 C |
 PAL_TechnoTowerZone :         8D08 C |  PAL_TechnoTowerZoneUnused :   9CF0 C |
*PAL_Unknown_1 :               44C4 C | *PAL_Unknown_2 :               4684 C |
 PLCMAP_SonArm_MainIndex :    66680 C |
 PLCMAP_SonicFields_MainIndex :                                       68A42 C |
 PLCMAP_Sonic_MainIndex :     66E26 C |
 PLCMAP_TailsFields_MainIndex :                                       68D36 C |
 PLCMAP_Tails_MainIndex :     67DD2 C |  PLCMAP_TalArm_MainIndex :    6777C C |
 PLCSArm_Hold1_000 :          669AE C |  PLCSArm_Hold1_045 :          669CC C |
 PLCSArm_Hold1_090 :          669EA C |  PLCSArm_Hold1_135 :          66A08 C |
 PLCSArm_Hold2_000 :          669B8 C |  PLCSArm_Hold2_045 :          669D6 C |
 PLCSArm_Hold2_090 :          669F4 C |  PLCSArm_Hold2_135 :          66A12 C |
 PLCSArm_Hold3_000 :          669C2 C |  PLCSArm_Hold3_045 :          669E0 C |
 PLCSArm_Hold3_090 :          669FE C |  PLCSArm_Hold3_135 :          66A1C C |
 PLCSArm_Pul_DwnRht_020 :     66940 C |  PLCSArm_Pul_DwnRht_045 :     6694A C |
 PLCSArm_Pul_DwnRht_060 :     66954 C |  PLCSArm_Pul_Dwn_000 :        66936 C |
 PLCSArm_Pul_LftDwn_020 :     66918 C |  PLCSArm_Pul_LftDwn_045 :     66922 C |
 PLCSArm_Pul_LftDwn_060 :     6692C C |  PLCSArm_Pul_Lft_000 :        6690E C |
 PLCSArm_Pul_RhtUp_020 :      66968 C |  PLCSArm_Pul_RhtUp_045 :      66972 C |
 PLCSArm_Pul_RhtUp_060 :      6697C C |  PLCSArm_Pul_Rht_000 :        6695E C |
 PLCSArm_Pul_UpDwn_020 :      66990 C |  PLCSArm_Pul_UpDwn_045 :      6699A C |
 PLCSArm_Pul_UpDwn_060 :      669A4 C |  PLCSArm_Pul_Up_000 :         66986 C |
 PLCSArm_Run_000 :            668E6 C |  PLCSArm_Run_045 :            668F0 C |
 PLCSArm_Run_090 :            668FA C |  PLCSArm_Run_135 :            66904 C |
 PLCSArm_Unused_00 :          66A26 C |  PLCSArm_Unused_01 :          66A30 C |
 PLCSArm_Unused_02 :          66A3A C |  PLCSArm_Unused_03 :          66A44 C |
 PLCSArm_Unused_04 :          66A4E C |  PLCSArm_Unused_05 :          66A58 C |
 PLCSArm_Unused_06 :          66A62 C |  PLCSArm_Unused_07 :          66A6C C |
 PLCSArm_Unused_08 :          66A76 C |  PLCSArm_Unused_09 :          66A80 C |
 PLCSArm_Unused_0A :          66A8A C |  PLCSArm_Unused_0B :          66A94 C |
 PLCSArm_Unused_0C :          66A9E C |  PLCSArm_Unused_0D :          66AA8 C |
 PLCSArm_Unused_0E :          66AB2 C |  PLCSArm_Unused_0F :          66ABC C |
 PLCSArm_Unused_10 :          66AC6 C |  PLCSArm_Unused_11 :          66AD0 C |
 PLCSArm_Unused_12 :          66ADA C |  PLCSArm_Unused_13 :          66AE4 C |
 PLCSArm_Unused_14 :          66AEE C |  PLCSArm_Unused_15 :          66AF8 C |
 PLCSArm_Unused_16 :          66B02 C |  PLCSArm_Unused_17 :          66B0C C |
 PLCSArm_Unused_18 :          66B16 C |  PLCSArm_Unused_19 :          66B20 C |
 PLCSArm_Unused_1A :          66B2A C |  PLCSArm_Wait1 :              667D8 C |
 PLCSArm_Wait2 :              667E2 C |  PLCSArm_Wait3 :              667EC C |
 PLCSArm_Walk1_000 :          6680A C |  PLCSArm_Walk1_045 :          66846 C |
 PLCSArm_Walk1_090 :          66882 C |  PLCSArm_Walk1_135 :          668BE C |
 PLCSArm_Walk2_000 :          66814 C |  PLCSArm_Walk2_045 :          66850 C |
 PLCSArm_Walk2_090 :          6688C C |  PLCSArm_Walk2_135 :          668C8 C |
 PLCSArm_Walk3_000 :          6681E C |  PLCSArm_Walk3_045 :          6685A C |
 PLCSArm_Walk3_090 :          66896 C |  PLCSArm_Walk3_135 :          668D2 C |
 PLCSArm_Walk4_000 :          66828 C |  PLCSArm_Walk4_045 :          66864 C |
 PLCSArm_Walk4_090 :          668A0 C |  PLCSArm_Walk4_135 :          668DC C |
 PLCSArm_Walk5_000 :          667F6 C |  PLCSArm_Walk5_045 :          66832 C |
 PLCSArm_Walk5_090 :          6686E C |  PLCSArm_Walk5_135 :          668AA C |
 PLCSArm_Walk6_000 :          66800 C |  PLCSArm_Walk6_045 :          6683C C |
 PLCSArm_Walk6_090 :          66878 C |  PLCSArm_Walk6_135 :          668B4 C |
 PLCSonFld_StandBckward :     68ACE C |  PLCSonFld_StandForward :     68ABA C |
 PLCSonFld_StandLftRht :      68AC4 C |  PLCSonFld_UncBall_1 :        68BC8 C |
 PLCSonFld_UncBall_2 :        68BD2 C |  PLCSonFld_UncBall_3 :        68BDC C |
 PLCSonFld_WalkDwn_1 :        68AD8 C |  PLCSonFld_WalkDwn_2 :        68AE2 C |
 PLCSonFld_WalkDwn_3 :        68AEC C |  PLCSonFld_WalkDwn_4 :        68AF6 C |
 PLCSonFld_WalkDwn_5 :        68B00 C |  PLCSonFld_WalkDwn_6 :        68B0A C |
 PLCSonFld_WalkDwn_7 :        68B14 C |  PLCSonFld_WalkDwn_8 :        68B1E C |
 PLCSonFld_WalkLR_1 :         68B28 C |  PLCSonFld_WalkLR_2 :         68B32 C |
 PLCSonFld_WalkLR_3 :         68B3C C |  PLCSonFld_WalkLR_4 :         68B46 C |
 PLCSonFld_WalkLR_5 :         68B50 C |  PLCSonFld_WalkLR_6 :         68B5A C |
 PLCSonFld_WalkLR_7 :         68B64 C |  PLCSonFld_WalkLR_8 :         68B6E C |
 PLCSonFld_WalkUp_1 :         68B78 C |  PLCSonFld_WalkUp_2 :         68B82 C |
 PLCSonFld_WalkUp_3 :         68B8C C |  PLCSonFld_WalkUp_4 :         68B96 C |
 PLCSonFld_WalkUp_5 :         68BA0 C |  PLCSonFld_WalkUp_6 :         68BAA C |
 PLCSonFld_WalkUp_7 :         68BB4 C |  PLCSonFld_WalkUp_8 :         68BBE C |
 PLCSon_BlncIn1 :             66FCE C |  PLCSon_BlncIn2 :             66FD8 C |
 PLCSon_BlncIn3 :             66FE2 C |  PLCSon_BlncOut1 :            66FEC C |
 PLCSon_BlncOut2 :            66FF6 C |  PLCSon_BlncOut3 :            67000 C |
 PLCSon_Climb1 :              6723A C |  PLCSon_Climb2 :              67244 C |
 PLCSon_Climb3 :              6724E C |  PLCSon_Climb4 :              67258 C |
 PLCSon_Climb5 :              67262 C |  PLCSon_Dizzy1 :              671FE C |
 PLCSon_Dizzy2 :              67208 C |  PLCSon_Dizzy3 :              67212 C |
 PLCSon_Dizzy4 :              6721C C |  PLCSon_Dizzy5 :              67226 C |
 PLCSon_Dizzy6 :              67230 C |  PLCSon_Hurt :                66FB0 C |
 PLCSon_LookDown :            66FA6 C |  PLCSon_LookUp :              66F9C C |
 PLCSon_Pull1 :               671B8 C |  PLCSon_Pull2 :               671C2 C |
 PLCSon_Roll1 :               671CC C |  PLCSon_Roll2 :               671D6 C |
 PLCSon_Roll3 :               671E0 C |  PLCSon_Roll4 :               671EA C |
 PLCSon_Roll5 :               671F4 C |  PLCSon_Run1_000 :            670FA C |
 PLCSon_Run1_045 :            67104 C |  PLCSon_Run1_090 :            6710E C |
 PLCSon_Run1_135 :            67118 C |  PLCSon_Run2_000 :            67122 C |
 PLCSon_Run2_045 :            6712C C |  PLCSon_Run2_090 :            67136 C |
 PLCSon_Run2_135 :            67140 C |  PLCSon_Run3_000 :            6714A C |
 PLCSon_Run3_045 :            67154 C |  PLCSon_Run3_090 :            6715E C |
 PLCSon_Run3_135 :            67168 C |  PLCSon_Run4_000 :            67172 C |
 PLCSon_Run4_045 :            6717C C |  PLCSon_Run4_090 :            67186 C |
 PLCSon_Run4_135 :            67190 C |  PLCSon_Skid1 :               6719A C |
 PLCSon_Skid2 :               671A4 C |  PLCSon_Skid3 :               671AE C |
 PLCSon_Spindash1 :           672C6 C |  PLCSon_Spindash2 :           672D0 C |
 PLCSon_Spindash3 :           672DA C |  PLCSon_Spindash4 :           672E4 C |
 PLCSon_Spindash5 :           672EE C |  PLCSon_Spindash6 :           672F8 C |
 PLCSon_Stand :               66F92 C |  PLCSon_Throw1 :              6726C C |
 PLCSon_Throw2 :              67276 C |  PLCSon_Throw3 :              67280 C |
 PLCSon_Throw4 :              6728A C |  PLCSon_Wait1 :               66FBA C |
 PLCSon_Wait2 :               66FC4 C |  PLCSon_Walk1_000 :           6701E C |
 PLCSon_Walk1_045 :           6705A C |  PLCSon_Walk1_090 :           67096 C |
 PLCSon_Walk1_135 :           670D2 C |  PLCSon_Walk2_000 :           67028 C |
 PLCSon_Walk2_045 :           67064 C |  PLCSon_Walk2_090 :           670A0 C |
 PLCSon_Walk2_135 :           670DC C |  PLCSon_Walk3_000 :           67032 C |
 PLCSon_Walk3_045 :           6706E C |  PLCSon_Walk3_090 :           670AA C |
 PLCSon_Walk3_135 :           670E6 C |  PLCSon_Walk4_000 :           6703C C |
 PLCSon_Walk4_045 :           67078 C |  PLCSon_Walk4_090 :           670B4 C |
 PLCSon_Walk4_135 :           670F0 C |  PLCSon_Walk5_000 :           6700A C |
 PLCSon_Walk5_045 :           67046 C |  PLCSon_Walk5_090 :           67082 C |
 PLCSon_Walk5_135 :           670BE C |  PLCSon_Walk6_000 :           67014 C |
 PLCSon_Walk6_045 :           67050 C |  PLCSon_Walk6_090 :           6708C C |
 PLCSon_Walk6_135 :           670C8 C |  PLCSon_WallJump1 :           67294 C |
 PLCSon_WallJump2 :           6729E C |  PLCSon_WallJump3 :           672A8 C |
 PLCSon_WallJump4 :           672B2 C |  PLCSon_WallJump5 :           672BC C |
 PLCTArm_BlncIn1 :            6794A C |  PLCTArm_BlncIn2 :            67954 C |
 PLCTArm_BlncIn3 :            6795E C |  PLCTArm_BlncOut1 :           6792C C |
 PLCTArm_BlncOut2 :           67936 C |  PLCTArm_BlncOut3 :           67940 C |
 PLCTArm_Hold1_000 :          67A4E C |  PLCTArm_Hold1_045 :          67A6C C |
 PLCTArm_Hold1_090 :          67A8A C |  PLCTArm_Hold1_135 :          67AA8 C |
 PLCTArm_Hold2_000 :          67A58 C |  PLCTArm_Hold2_045 :          67A76 C |
 PLCTArm_Hold2_090 :          67A94 C |  PLCTArm_Hold2_135 :          67AB2 C |
 PLCTArm_Hold3_000 :          67A62 C |  PLCTArm_Hold3_045 :          67A80 C |
 PLCTArm_Hold3_090 :          67A9E C |  PLCTArm_Hold3_135 :          67ABC C |
 PLCTArm_Pul_DwnRht_020 :     678BE C |  PLCTArm_Pul_DwnRht_045 :     678C8 C |
 PLCTArm_Pul_DwnRht_060 :     678D2 C |  PLCTArm_Pul_Dwn_000 :        678B4 C |
 PLCTArm_Pul_LftDwn_020 :     67896 C |  PLCTArm_Pul_LftDwn_045 :     678A0 C |
 PLCTArm_Pul_LftDwn_060 :     678AA C |  PLCTArm_Pul_Lft_000 :        6788C C |
 PLCTArm_Pul_RhtUp_020 :      678E6 C |  PLCTArm_Pul_RhtUp_045 :      678F0 C |
 PLCTArm_Pul_RhtUp_060 :      678FA C |  PLCTArm_Pul_Rht_000 :        678DC C |
 PLCTArm_Pul_UpDwn_020 :      6790E C |  PLCTArm_Pul_UpDwn_045 :      67918 C |
 PLCTArm_Pul_UpDwn_060 :      67922 C |  PLCTArm_Pul_Up_000 :         67904 C |
 PLCTArm_Run_000 :            67A26 C |  PLCTArm_Run_045 :            67A30 C |
 PLCTArm_Run_090 :            67A3A C |  PLCTArm_Run_135 :            67A44 C |
 PLCTArm_Unused_00 :          67A08 C |  PLCTArm_Unused_01 :          67A12 C |
 PLCTArm_Unused_02 :          67A1C C |  PLCTArm_Unused_03 :          67AC6 C |
 PLCTArm_Unused_04 :          67AD0 C |  PLCTArm_Unused_05 :          67ADA C |
 PLCTArm_Unused_06 :          67AE4 C |  PLCTArm_Unused_07 :          67AEE C |
 PLCTArm_Unused_08 :          67AF8 C |  PLCTArm_Unused_09 :          67B02 C |
 PLCTArm_Unused_0A :          67B0C C |  PLCTArm_Unused_0B :          67B16 C |
 PLCTArm_Unused_0C :          67B20 C |  PLCTArm_Unused_0D :          67B2A C |
 PLCTArm_Walk1_000 :          67972 C |  PLCTArm_Walk1_045 :          6799A C |
 PLCTArm_Walk1_090 :          679C2 C |  PLCTArm_Walk1_135 :          679EA C |
 PLCTArm_Walk2_000 :          6797C C |  PLCTArm_Walk2_045 :          679A4 C |
 PLCTArm_Walk2_090 :          679CC C |  PLCTArm_Walk2_135 :          679F4 C |
 PLCTArm_Walk3_000 :          67986 C |  PLCTArm_Walk3_045 :          679AE C |
 PLCTArm_Walk3_090 :          679D6 C |  PLCTArm_Walk3_135 :          679FE C |
 PLCTArm_Walk4_000 :          67968 C |  PLCTArm_Walk4_045 :          67990 C |
 PLCTArm_Walk4_090 :          679B8 C |  PLCTArm_Walk4_135 :          679E0 C |
 PLCTalFld_StandBckward :     68DDA C |  PLCTalFld_StandForward :     68DC6 C |
 PLCTalFld_StandLftRht :      68DD0 C |  PLCTalFld_UncBall_1 :        68ED4 C |
 PLCTalFld_UncBall_2 :        68EDE C |  PLCTalFld_UncBall_3 :        68EE8 C |
 PLCTalFld_WalkDwn_1 :        68DE4 C |  PLCTalFld_WalkDwn_2 :        68DEE C |
 PLCTalFld_WalkDwn_3 :        68DF8 C |  PLCTalFld_WalkDwn_4 :        68E02 C |
 PLCTalFld_WalkDwn_5 :        68E0C C |  PLCTalFld_WalkDwn_6 :        68E16 C |
 PLCTalFld_WalkDwn_7 :        68E20 C |  PLCTalFld_WalkDwn_8 :        68E2A C |
 PLCTalFld_WalkLR_1 :         68E34 C |  PLCTalFld_WalkLR_2 :         68E3E C |
 PLCTalFld_WalkLR_3 :         68E48 C |  PLCTalFld_WalkLR_4 :         68E52 C |
 PLCTalFld_WalkLR_5 :         68E5C C |  PLCTalFld_WalkLR_6 :         68E66 C |
 PLCTalFld_WalkLR_7 :         68E70 C |  PLCTalFld_WalkLR_8 :         68E7A C |
 PLCTalFld_WalkUp_1 :         68E84 C |  PLCTalFld_WalkUp_2 :         68E8E C |
 PLCTalFld_WalkUp_3 :         68E98 C |  PLCTalFld_WalkUp_4 :         68EA2 C |
 PLCTalFld_WalkUp_5 :         68EAC C |  PLCTalFld_WalkUp_6 :         68EB6 C |
 PLCTalFld_WalkUp_7 :         68EC0 C |  PLCTalFld_WalkUp_8 :         68ECA C |
 PLCTal_BlncIn1 :             68306 C |  PLCTal_BlncIn2 :             68310 C |
 PLCTal_BlncIn3 :             6831A C |  PLCTal_BlncOut1 :            682E8 C |
 PLCTal_BlncOut2 :            682F2 C |  PLCTal_BlncOut3 :            682FC C |
 PLCTal_Dizzy1 :              68356 C |  PLCTal_Dizzy2 :              68360 C |
 PLCTal_Dizzy3 :              6836A C |  PLCTal_Dizzy4 :              68374 C |
 PLCTal_Dizzy5 :              6837E C |  PLCTal_Dizzy6 :              68388 C |
 PLCTal_Dizzy7 :              68392 C |  PLCTal_Dizzy8 :              6839C C |
 PLCTal_Fly :                 6828E C |  PLCTal_FlyHeliTails :        682AC C |
 PLCTal_FlyTired1 :           68298 C |  PLCTal_FlyTired2 :           682A2 C |
 PLCTal_Hang2 :               6834C C |  PLCTal_Hurt :                68284 C |
 PLCTal_LookDown :            67FD2 C |  PLCTal_LookUp :              67FC8 C |
 PLCTal_Roll1 :               68248 C |  PLCTal_Roll2 :               68252 C |
 PLCTal_Roll3 :               6825C C |  PLCTal_Run1_000 :            681F8 C |
 PLCTal_Run1_045 :            6820C C |  PLCTal_Run1_090 :            68220 C |
 PLCTal_Run1_135 :            68234 C |  PLCTal_Run2_000 :            68202 C |
 PLCTal_Run2_045 :            68216 C |  PLCTal_Run2_090 :            6822A C |
 PLCTal_Run2_135 :            6823E C |  PLCTal_RunFast01_000 :       6845A C |
 PLCTal_RunFast01_045 :       68482 C |  PLCTal_RunFast01_090 :       684AA C |
 PLCTal_RunFast01_135 :       684D2 C |  PLCTal_RunFast02_000 :       68464 C |
 PLCTal_RunFast02_045 :       6848C C |  PLCTal_RunFast02_090 :       684B4 C |
 PLCTal_RunFast02_135 :       684DC C |  PLCTal_RunNorm01_000 :       68446 C |
 PLCTal_RunNorm01_045 :       6846E C |  PLCTal_RunNorm01_090 :       68496 C |
 PLCTal_RunNorm01_135 :       684BE C |  PLCTal_RunNorm02_000 :       68450 C |
 PLCTal_RunNorm02_045 :       68478 C |  PLCTal_RunNorm02_090 :       684A0 C |
 PLCTal_RunNorm02_135 :       684C8 C |  PLCTal_Skid1 :               682B6 C |
 PLCTal_Skid2 :               682C0 C |  PLCTal_Skid3 :               682CA C |
 PLCTal_Spindsh1 :            68266 C |  PLCTal_Spindsh2 :            68270 C |
 PLCTal_Spindsh3 :            6827A C |  PLCTal_Stand :               67FBE C |
 PLCTal_TalJmp01_000 :        683A6 C |  PLCTal_TalJmp01_045 :        683CE C |
 PLCTal_TalJmp01_090 :        683F6 C |  PLCTal_TalJmp01_135 :        6841E C |
 PLCTal_TalJmp02_000 :        683B0 C |  PLCTal_TalJmp02_045 :        683D8 C |
 PLCTal_TalJmp02_090 :        68400 C |  PLCTal_TalJmp02_135 :        68428 C |
 PLCTal_TalJmp03_000 :        683BA C |  PLCTal_TalJmp03_045 :        683E2 C |
 PLCTal_TalJmp03_090 :        6840A C |  PLCTal_TalJmp03_135 :        68432 C |
 PLCTal_TalJmp04_000 :        683C4 C |  PLCTal_TalJmp04_045 :        683EC C |
 PLCTal_TalJmp04_090 :        68414 C |  PLCTal_TalJmp04_135 :        6843C C |
 PLCTal_Throw1 :              68324 C |  PLCTal_Throw2 :              6832E C |
 PLCTal_Throw3 :              68338 C |  PLCTal_Throw4 :              68342 C |
 PLCTal_UnkSkid1 :            682D4 C |  PLCTal_UnkSkid2 :            682DE C |
 PLCTal_UnkTails1 :           684E6 C |  PLCTal_UnkTails2 :           684F0 C |
 PLCTal_Wait01 :              684FA C |  PLCTal_Wait02 :              68504 C |
 PLCTal_Wait03 :              6850E C |  PLCTal_Wait04 :              68518 C |
 PLCTal_Wait05 :              68522 C |  PLCTal_WaitBlink1 :          67FE6 C |
 PLCTal_WaitBlink2 :          67FDC C |  PLCTal_WaitStare :           67FF0 C |
 PLCTal_WaitYawn1 :           67FFA C |  PLCTal_WaitYawn2 :           68004 C |
 PLCTal_WaitYawn3 :           6800E C |  PLCTal_Walk1_000 :           68040 C |
 PLCTal_Walk1_045 :           680CC C |  PLCTal_Walk1_090 :           68130 C |
 PLCTal_Walk1_135 :           681BC C |  PLCTal_Walk2_000 :           68054 C |
 PLCTal_Walk2_045 :           680D6 C |  PLCTal_Walk2_090 :           68144 C |
 PLCTal_Walk2_135 :           681C6 C |  PLCTal_Walk3_000 :           68068 C |
 PLCTal_Walk3_045 :           680E0 C |  PLCTal_Walk3_090 :           68158 C |
 PLCTal_Walk3_135 :           681D0 C |  PLCTal_Walk4_000 :           6807C C |
 PLCTal_Walk4_045 :           680EA C |  PLCTal_Walk4_090 :           6816C C |
 PLCTal_Walk4_135 :           681DA C |  PLCTal_Walk5_000 :           68090 C |
 PLCTal_Walk5_045 :           680F4 C |  PLCTal_Walk5_090 :           68180 C |
 PLCTal_Walk5_135 :           681E4 C |  PLCTal_Walk6_000 :           680A4 C |
 PLCTal_Walk6_045 :           680FE C |  PLCTal_Walk6_090 :           68194 C |
 PLCTal_Walk6_135 :           681EE C |  PLCTal_Walk7_000 :           68018 C |
 PLCTal_Walk7_045 :           680B8 C |  PLCTal_Walk7_090 :           68108 C |
 PLCTal_Walk7_135 :           681A8 C |  PLCTal_Walk8_000 :           6802C C |
 PLCTal_Walk8_045 :           680C2 C |  PLCTal_Walk8_090 :           6811C C |
 PLCTal_Walk8_135 :           681B2 C |  PLC_Sonic :                  66F92 C |
 PLC_SonicArm :               667D8 C |  PLC_SonicFields :            68ABA C |
 PLC_Tails :                  67FBE C |  PLC_TailsArm :               6788C C |
 PLC_TailsFields :            68DC6 C |  PSG1 :                         F8C C |
 PSG2 :                         F8E C |  PSG3 :                         F95 C |
 PSG4 :                         F9D C |  PSG5 :                         FA9 C |
 PSG6 :                         FB4 C |  PSG7 :                         FC3 C |
 PSG8 :                         FCC C |  PSG9 :                         FDD C |
 PSGA :                         FE8 C |  PSGB :                         FFD C |
 PSGC :                        1007 C |  PSGFreqs :                     93A C |
 PSGInitBytes :                 619 C |  PSGInitValues :                2F6 C |
 PSGInitValues_End :            2FA C |  PaletteFadeOut :               6CC C |
 PanAniPtrList :                358 C |  PlayMusic :                   6402 C |
 PlaySFX :                      63A C |  PlaySFX.cnt :                    9 - |
*PlaySnd_Command :              523 C |  PlaySoundID :                  507 C |
 PlaySpcSFX :                   61F C |  PlaySpcSFX.cnt :                 9 - |
 PrepareModulat :               395 C |  ProcessDPLC_Pop :             1020 C |
*RELAXED :                        0 - | *ROM_Finish :                   1A4 C |
*ROM_Start :                    1A0 C |  ReadFMCommand :                B8A C |
 ReadPtrTable :                   8 C |  RefreshVolume :                B0F C |
 ResetSpcFM3Mode :              86D C |  RomStart :                       0 C |
 SFXChnPtrs :                   740 C |  SMPS2ASMVer :                    1 - |
 SSZ_ArtLocs :                 9C20 C |  SSZ_MapBGLocs :               9C5C C |
 SSZ_MapFGLocs :               9C3A C |  SegaContin :                  645A C |
 SegaPaletteCycle :            6588 C |  SegaPaletteStart :            6542 C |
 SegaPaletteStart.cycling :    654E C |  SegaScreen :                  6424 C |
 SegaScreen_VDPSettings :      6442 C |  SegaScrn_CheckRegion :        6612 C |
 SegaSubArray :                650C C |  SegaTM_Palette :              6626 C |
 SegaToVDP :                   6F38 C |  Sega_AltAnimation :           6C20 C |
 Sega_AltAnimation.submodes :  6C28 C |  Sega_AnimationTable :         653A C |
 Sega_ChooseAnimation :        6532 C |  Sega_GotoTitle :              65F6 C |
 Sega_MainAnimation :          696A C |  Sega_MainAnimation.submodes : 697A C |
 Sega_MapTiles :               682C C |  SegatoVDPRep :                6F4C C |
 SendAllFMOps :                 930 C |  SendFM3SpcMode :               D75 C |
 SendFMFreq :                   1A3 C |  SendFMIns :                    4E2 C |
 SendNoteOff :                  2F6 C |  Sends.bSGEG :                  E07 C |
 SetDuration :                  29D C |  SetInsFromSong :               BA6 C |
 SetMaxRelRate :                92C C |  SetRest :                      EC7 C |
 SetupVDPUsingTable :           8D0 C |  SetupVDPUsingTable.finish :    8FA C |
 SetupVDPUsingTable.loop :      8D4 C |  SetupVDPUsingTable.next :      8F0 C |
 SetupValues :                  28E C |  SilenceAll :                   881 C |
 SilenceFMChn :                 91C C |  SilencePSG :                   8B0 C |
 SilencePSGChn :                ED0 C |  Sine_Table :                  3F2A C |
 Snd00_Jump_FM6 :             1800A C | *Snd00_Jump_Header :          18000 C |
 Snd00_Jump_Voices :          1801A C |  Snd01_Cash_Register_FM4 :    18052 C |
 Snd01_Cash_Register_FM5 :    18049 C | *Snd01_Cash_Register_Header : 18033 C |
 Snd01_Cash_Register_PSG3 :   18059 C |  Snd01_Cash_Register_Voices : 18068 C |
 Snd02_FM5 :                  180A4 C | *Snd02_Header :               1809A C |
 Snd02_Voices :               180AE C |  Snd03_Bomb_FM5 :             180D1 C |
*Snd03_Bomb_Header :          180C7 C |  Snd03_Bomb_Voices :          180D6 C |
*Snd04_Skid_Header :          180EF C |  Snd04_Skid_Loop00 :          1811A C |
 Snd04_Skid_Loop01 :          18107 C |  Snd04_Skid_PSG2 :            180FF C |
 Snd04_Skid_PSG3 :            18111 C |  Snd05_Ring_Loss_FM5 :        18134 C |
 Snd05_Ring_Loss_FM6 :        18140 C | *Snd05_Ring_Loss_Header :     18124 C |
 Snd05_Ring_Loss_Voices :     1814C C |  Snd06_Ring_FM5 :             1816F C |
*Snd06_Ring_Header :          18165 C |  Snd06_Ring_Voices :          1817A C |
 Snd07_FM5 :                  181A3 C |  Snd07_FM6 :                  181AD C |
*Snd07_Header :               18193 C |  Snd07_Voices :               181B2 C |
 Snd08_FM5 :                  181EE C | *Snd08_Header :               181E4 C |
 Snd08_Loop00 :               18200 C |  Snd08_Voices :               1820D C |
 Snd09_FM5 :                  18262 C | *Snd09_Header :               1823F C |
 Snd09_Voices :               18249 C |  Snd0A_FM5 :                  18273 C |
*Snd0A_Header :               18269 C |  Snd0A_Voices :               18274 C |
 Snd0B_FM5 :                  18297 C | *Snd0B_Header :               1828D C |
 Snd0B_Voices :               18298 C |  Snd0C_FM5 :                  182BB C |
*Snd0C_Header :               182B1 C |  Snd0C_Voices :               182BC C |
 Snd0D_FM5 :                  182DF C | *Snd0D_Header :               182D5 C |
 Snd0D_Voices :               182E0 C |  Snd0E_FM5 :                  18303 C |
*Snd0E_Header :               182F9 C |  Snd0E_Voices :               18304 C |
 Snd0F_FM5 :                  18327 C | *Snd0F_Header :               1831D C |
 Snd0F_Voices :               18328 C |  SndPriorities :               1185 C |
 SonicDriverVer :                 3 - |  SoundA0 :                    18000 C |
 SoundA1 :                    18033 C |  SoundA2 :                    1809A C |
 SoundA3 :                    180C7 C |  SoundA4 :                    180EF C |
 SoundA5 :                    18124 C |  SoundA6 :                    18165 C |
 SoundA7 :                    18193 C |  SoundA8 :                    181E4 C |
 SoundA9 :                    1823F C |  SoundAA :                    18269 C |
 SoundAB :                    1828D C |  SoundAC :                    182B1 C |
 SoundAD :                    182D5 C |  SoundAE :                    182F9 C |
 SoundAF :                    1831D C |  SoundBank :                  18000 C |
 SoundDriverLoad :             518A C |  SoundDriverLoad.dumpRAM :     51B6 C |
 SoundDriverLoad.wait :        51BC C |  SoundIndex :                  115F C |
 SourceDriver :                   3 - |  SourceSMPS2ASM :                 1 - |
 SpcFM3_skip :                  D7F C |  SpcSFXChnPtrs :                730 C |
 SpecSoundIndex :              117F C |  StopAllSound :                 836 C |
 StopDrumPSG :                  7C6 C |  TCBG_Tile2 :                 41974 C |
 TCBG_Tile3 :                 4199A C |  TCBG_Tile4 :                 419C0 C |
 TCBG_Tile5 :                 419E6 C |  TCBG_Tile6 :                 41A0C C |
 TCBG_Tile7 :                 41A32 C |  TCBG_Tile8 :                 41A58 C |
 TCBG_Tile9 :                 41A7E C |  TCBG_TileA :                 41AA4 C |
 TCBG_TileB :                 41ACA C |  TCBG_TileC :                 41B10 C |
 TCBG_TileD :                 41B56 C | *TIME :                   "18:0:20" - |
*TRUE :                           1 - |  TTZ_AniTileLocs :             FA14 C |
 TTZ_ArtLocs :                 9CA8 C |  TTZ_MapBGLocs :               9CE4 C |
 TTZ_MapFGLocs :               9CC2 C |  TethCodingValue :             D204 C |
 TickMultiplier :               2C5 C |
 TitleCardBG_TileLocationArray :                                       F490 C |
 TitleLoad :                   7366 C |  TitleLoad_Continue :          739A C |
 TitleLoad_Continue.loadpalette :                                      7462 C |
 TitleScreen :                 7356 C |  TitleScreen.submodes :        735E C |
 TitleScreen_VDPSettings :     7382 C |  TitleScrn_PlayLevel :         7526 C |
 TitleScrn_ToLevSel :          7562 C |  TitleScrn_ToOption :          7552 C |
 TitleStart :                  74DC C |  TitleStart.wait :             74E2 C |
 TrackTimeout :                 2CF C |  TrkUpdateLoop :                14D C |
 TrkUpdate_Proc :               1FD C |  UR002Return :                 5188 C |
 UnkReps :                     FA68 C |  UnkRet001 :                   8E08 C |
 UnkRet002 :                   8E0A C |  UnkRet003 :                   93CA C |
 UnknownRout000 :               416 C |  UnknownRout001 :               418 C |
 UnknownRout002 :              5172 C |  UnpauseMusic :                 771 C |
 UnusedPSG2Loop00 :           115FA C |  UnusedPSG2Loop01 :           11607 C |
 UpdateAll :                     E9 C |  UpdatePSGTrk :                 E1F C |
 UpdateSFXTracks :              125 C |  UpdateSFXTracks.cnt :            9 - |
 UpdateTrack :                  15E C |  VDPClearArr_01 :               4C4 C |
 VDPClearArr_02 :               4CC C |  VDPSetup_01 :                  448 C |
 VDPSetup_01.setDMA :           48A C |  VDPSetup_02 :                  4CC C |
 VDPVAL003 :                    55E C | *VERSION :                     142F - |
*VInt :                          38 C |  VolEnvPtrs :                   F74 C |
 VolEnv_Hold :                  EBD C |  VolEnv_Next :                  EC3 C |
 VolEnv_Off :                   EB2 C |  VolEnv_Reset :                 EBA C |
 W1C6A_loc00 :                 1C7A C |  W1C6A_loc01 :                 1C8C C |
 W1C6A_loc02 :                 1CA4 C |  W1C6A_loc03 :                 1CBE C |
 W1C6A_loc04 :                 1CDC C |  W1C6A_loc05 :                 1CF4 C |
 W1C6A_loc06 :                 1D12 C |  W1C6A_loc07 :                 1D2E C |
*W1C6A_loc08 :                 1D52 C |  Walkin_Call00 :              10B6E C |
 Walkin_Call01 :              10ACB C |  Walkin_Call02 :              10ADA C |
 Walkin_Call03 :              10A0B C |  Walkin_Call04 :              10919 C |
 Walkin_Call05 :              108DE C |  Walkin_Call06 :              10B1B C |
 Walkin_Call07 :              1090A C |  Walkin_DAC :                 10B49 C |
 Walkin_FM1 :                 108BC C |  Walkin_FM2 :                 108FE C |
 Walkin_FM3 :                 10995 C |  Walkin_FM4 :                 10A32 C |
 Walkin_FM5 :                 10AB0 C | *Walkin_Header :              1088C C |
 Walkin_Jump00 :              1099B C |  Walkin_Jump01 :              10902 C |
 Walkin_Jump02 :              108CB C |  Walkin_Jump03 :              10AF2 C |
 Walkin_Loop00 :              10B50 C |  Walkin_Loop01 :              10AB4 C |
 Walkin_Loop02 :              10A38 C |  Walkin_Loop03 :              10B29 C |
 Walkin_Loop04 :              10B00 C |  Walkin_PSG1 :                10AE9 C |
 Walkin_PSG2 :                10AFC C |  Walkin_PSG3 :                10B25 C |
 Walkin_Voices :              10B76 C |  WriteFMI :                      26 C |
 WriteFMII :                     30 C |  WriteFMIIPart :                 2E C |
 WriteFMIorII :                  18 C |  WriteInsReg :                  501 C |
*Z80SYNTAX :                      0 - |  Z80StartupCodeBegin :          2C4 C |
 Z80StartupCodeEnd :            2EA C |  Z80_Driver :                  51EC C |
 Z80_Driver_end :              6402 C |  bgm_Electoria :                 81 - |
*bgm_EveningStar :               84 - |  bgm_First :                     81 - |
 bgm_GameOver :                  86 - | *bgm_HyperHyper :                83 - |
 bgm_Last :                      87 - | *bgm_Moonrise :                  85 - |
 bgm_Walkin :                    82 - | *bitA :                           6 - |
*bitB :                           4 - | *bitC :                           5 - |
*bitDn :                          1 - | *bitL :                           2 - |
*bitR :                           3 - | *bitStart :                       7 - |
*bitUp :                          0 - | *btnA :                          40 - |
 btnABC :                        70 - | *btnB :                          10 - |
*btnC :                          20 - |  btnDir :                         F - |
*btnDn :                          2 - | *btnL :                           4 - |
*btnR :                           8 - | *btnStart :                      80 - |
*btnUp :                          1 - |  byte_1024 :                   1024 C |
 byte_1030 :                   1030 C |  byte_103D :                   103D C |
 byte_1049 :                   1049 C |  byte_108B :                   108B C |
 byte_10C0 :                   10C0 C |  byte_10FD :                   10FD C |
 byte_1117 :                   1117 C |  byte_1131 :                   1131 C |
 byte_1139 :                   1139 C |  byte_1794 :                   1794 C |
 byte_17A4 :                   17A4 C |  byte_18B0 :                   18B0 C |
 byte_18C0 :                   18C0 C |  byte_360 :                     360 C |
 byte_361 :                     361 C |  byte_362 :                     362 C |
 byte_363 :                     363 C |  byte_8000 :                   8000 C |
 byte_8B0C :                   8B0C C |  byte_A4A :                     A4A C |
*cAqua :                        EE0 - |  cBlack :                         0 - |
 cBlue :                        E00 - | *cFM3 :                           2 - |
 cFM4 :                           4 - |  cFM5 :                           5 - |
 cFM6 :                           6 - |  cGreen :                        E0 - |
*cMagenta :                     E0E - |  cNoise :                        E0 - |
*cPSG1 :                         80 - |  cPSG2 :                         A0 - |
 cPSG3 :                         C0 - |  cRed :                           E - |
 cWhite :                       EEE - | *cYellow :                       EE - |
 cf00_SetTempo :                D9A C |  cf01_PlaySnd :                 DA1 C |
 cf02_MusPause :                DA5 C |  cf03_CopyMem :                 DE0 C |
 cf04_TickMulAll :              DEE C |  cf04_TickMulAll.loop :         DF3 C |
 cf05_SSGEG :                   DFD C |  cf06_FMVolEnv :                E16 C |
 cfE0_Pan :                     ABF C |  cfE1_Detune :                  ADB C |
 cfE2_SetComm :                 ADF C |  cfE3_SilenceTrk :              AE3 C |
 cfE4_PanAnim :                 AE9 C |  cfE5_ChgPFMVol :               AFC C |
 cfE6_ChgFMVol :                B04 C |  cfE7_Hold :                    B3E C |
 cfE8_NoteStop :                B44 C |  cfE9_SetLFO :                  AD0 C |
 cfEA_PlayDAC :                 AB6 C |  cfEB_LoopExit :                B4E C |
 cfEC_ChgPSGVol :               B64 C |  cfED_FMChnWrite :              B7E C |
 cfEE_FM1Write :                B83 C |  cfEF_SetIns :                  B90 C |
 cfF0_Mods.betup :              BCD C |  cfF1_ModTypePFM :              BDB C |
 cfF2_StopTrk :                 BE7 C |  cfF3_PSGNoise :                CAB C |
 cfF4_ModType :                 BE3 C |  cfF5_SetPSGIns :               CCA C |
 cfF6_GoTo :                    CD3 C |  cfF7_Loop :                    CD9 C |
 cfF8_GoSub :                   CF0 C |  cfF9_Return :                  D0A C |
 cfFA_TickMult :                D1D C |  cfFB_ChgTransp :               D21 C |
 cfFC_PitchSlide :              D28 C |  cfFD_RawFrqMode :              D3E C |
 cfFE_SpcFM3Mode :              D4C C |  cfHandler :                    A58 C |
 cfHandler_Drum :               A4E C |  cfMetaCoordFlag :              D93 C |
 cfMetaPtrTable :               AA8 C |  cfPtrTable :                   A68 C |
 cfReturn :                     A64 C |  cfReturn_Drum :                A54 C |
*dHey :                          87 - |  dHighTom :                      83 - |
 dKick :                         81 - | *dLetsGo :                       86 - |
 dLowTom :                       85 - |  dMidTom :                       84 - |
 dSnare :                        82 - |  data_197A :                   197A C |
 dword_6DBC :                  6DBC C |  dword_6E46 :                  6E46 C |
 dword_99F0 :                  99F0 C |  fixBugs :                        0 - |
*flg_FadeIn :                    E3 - |  flg_FadeOut :                   E0 - |
 flg_First :                     E0 - |  flg_Last :                      E4 - |
*flg_Stop :                      E1 - | *flg_StopPSG :                   E2 - |
 id_Field :                      10 - |  id_Level :                      18 - |
 id_LevelSelect :                30 - |  id_Null :                       20 - |
 id_Options :                    40 - | *id_Sega :                        0 - |
 id_Title :                       8 - | *loc_0 :                          0 C |
 loc_1026 :                    1026 C |  loc_1034 :                    1034 C |
 loc_1288 :                    1288 C |  loc_12B0 :                    12B0 C |
 loc_1358 :                    1358 C |  loc_1380 :                    1380 C |
 loc_13B2 :                    13B2 C |  loc_13E4 :                    13E4 C |
 loc_1426 :                    1426 C |  loc_1430 :                    1430 C |
 loc_144E :                    144E C |  loc_1480 :                    1480 C |
 loc_14B2 :                    14B2 C |  loc_1520 :                    1520 C |
 loc_1522 :                    1522 C |  loc_1532 :                    1532 C |
 loc_154A :                    154A C |  loc_154C :                    154C C |
 loc_155C :                    155C C |  loc_1570 :                    1570 C |
 loc_158A :                    158A C |  loc_158C :                    158C C |
 loc_159C :                    159C C |  loc_15B6 :                    15B6 C |
 loc_15B8 :                    15B8 C |  loc_15C8 :                    15C8 C |
 loc_15EE :                    15EE C |  loc_1600 :                    1600 C |
 loc_1616 :                    1616 C |  loc_1650 :                    1650 C |
 loc_1664 :                    1664 C |  loc_167E :                    167E C |
 loc_1684 :                    1684 C |  loc_16BA :                    16BA C |
 loc_16C0 :                    16C0 C |  loc_16E0 :                    16E0 C |
 loc_170E :                    170E C |  loc_1716 :                    1716 C |
 loc_174E :                    174E C |  loc_1756 :                    1756 C |
 loc_178C :                    178C C |  loc_17B4 :                    17B4 C |
 loc_17F4 :                    17F4 C |  loc_17FC :                    17FC C |
 loc_181 :                      181 C |  loc_1828 :                    1828 C |
 loc_1832 :                    1832 C |  loc_1868 :                    1868 C |
 loc_1872 :                    1872 C |  loc_18A6 :                    18A6 C |
 loc_18D0 :                    18D0 C |  loc_190E :                    190E C |
 loc_1934 :                    1934 C |  loc_193E :                    193E C |
 loc_1946 :                    1946 C |  loc_198 :                      198 C |
 loc_198E :                    198E C |  loc_19B0 :                    19B0 C |
 loc_19EC :                    19EC C |  loc_19F4 :                    19F4 C |
 loc_1A08 :                    1A08 C |  loc_1A10 :                    1A10 C |
 loc_1A64 :                    1A64 C |  loc_1A6E :                    1A6E C |
 loc_1AF :                      1AF C |  loc_1AF0 :                    1AF0 C |
 loc_1AFE :                    1AFE C |  loc_1B5C :                    1B5C C |
 loc_1B64 :                    1B64 C |  loc_1B8 :                      1B8 C |
 loc_1B8E :                    1B8E C |  loc_1B90 :                    1B90 C |
 loc_1BDE :                    1BDE C |  loc_1BE8 :                    1BE8 C |
 loc_1C24 :                    1C24 C |  loc_1C28 :                    1C28 C |
 loc_1C4E :                    1C4E C |  loc_1C50 :                    1C50 C |
 loc_1C60 :                    1C60 C |  loc_1C7 :                      1C7 C |
*loc_1D1E :                    1D1E C |  loc_1D72 :                    1D72 C |
 loc_1D9C :                    1D9C C |  loc_1D9E :                    1D9E C |
 loc_1DA4 :                    1DA4 C |  loc_1DB2 :                    1DB2 C |
 loc_1DF4 :                    1DF4 C |  loc_1E0C :                    1E0C C |
 loc_20B :                      20B C |  loc_245 :                      245 C |
 loc_24E :                      24E C |  loc_257 :                      257 C |
 loc_25D :                      25D C |  loc_270 :                      270 C |
 loc_288 :                      288 C |  loc_28A :                      28A C |
 loc_29B :                      29B C |  loc_29C :                      29C C |
 loc_2A3 :                      2A3 C |  loc_2CB :                      2CB C |
 loc_312 :                      312 C |  loc_326 :                      326 C |
 loc_32A :                      32A C |  loc_336 :                      336 C |
 loc_336.loop :                 34A C |  loc_341 :                      341 C |
 loc_34C :                      34C C |  loc_360 :                      360 C |
 loc_36E :                      36E C |  loc_36E.clrCRAM :              3D4 C |
 loc_36E.clrVRAM :              3BA C |  loc_36E.clrVSRAM :             3EE C |
 loc_36E.waitfordma :           38A C |  loc_382 :                      382 C |
 loc_38E :                      38E C |  loc_3FC :                      3FC C |
*loc_408 :                      408 C | *loc_40D :                      40D C |
 loc_419 :                      419 C |  loc_41B8 :                    41B8 C |
 loc_41C :                      41C C |  loc_41C2 :                    41C2 C |
 loc_41CE :                    41CE C |  loc_41E2 :                    41E2 C |
 loc_41FC :                    41FC C |  loc_4204 :                    4204 C |
 loc_4216 :                    4216 C |  loc_42A8 :                    42A8 C |
 loc_42C6 :                    42C6 C |  loc_42E4 :                    42E4 C |
 loc_42EE :                    42EE C |  loc_42FA :                    42FA C |
 loc_430E :                    430E C |  loc_4330 :                    4330 C |
 loc_433E :                    433E C |  loc_4356 :                    4356 C |
 loc_45F :                      45F C |  loc_470 :                      470 C |
 loc_492 :                      492 C |  loc_49F :                      49F C |
 loc_4A0 :                      4A0 C |  loc_4C1 :                      4C1 C |
 loc_4F3 :                      4F3 C |  loc_506 :                      506 C |
 loc_50CA :                    50CA C |  loc_50FC :                    50FC C |
 loc_5116 :                    5116 C |  loc_511A :                    511A C |
 loc_5122 :                    5122 C |  loc_5130 :                    5130 C |
 loc_5136 :                    5136 C |  loc_5138 :                    5138 C |
 loc_5142 :                    5142 C |  loc_5144 :                    5144 C |
 loc_5152 :                    5152 C |  loc_541 :                      541 C |
 loc_542 :                      542 C |  loc_552 :                      552 C |
 loc_5B2 :                      5B2 C |  loc_5B6 :                      5B6 C |
 loc_5BC :                      5BC C |  loc_5C0 :                      5C0 C |
 loc_5E7 :                      5E7 C |  loc_64AA :                    64AA C |
 loc_64F2 :                    64F2 C |  loc_64F2.wait :               64FE C |
 loc_652 :                      652 C |  loc_6526 :                    6526 C |
 loc_6594 :                    6594 C |  loc_65C6 :                    65C6 C |
 loc_65D2 :                    65D2 C |  loc_662A :                    662A C |
 loc_6632 :                    6632 C |  loc_664E :                    664E C |
 loc_667A :                    667A C |  loc_669A :                    669A C |
 loc_66A2 :                    66A2 C |  loc_66AC :                    66AC C |
 loc_66C2 :                    66C2 C |  loc_6728 :                    6728 C |
 loc_6738 :                    6738 C |  loc_674 :                      674 C |
 loc_674A :                    674A C |  loc_67BC :                    67BC C |
 loc_6860 :                    6860 C |  loc_6864 :                    6864 C |
 loc_688 :                      688 C |  loc_68B8 :                    68B8 C |
 loc_68BA :                    68BA C |  loc_68EE :                    68EE C |
 loc_68F0 :                    68F0 C |  loc_6932 :                    6932 C |
 loc_6934 :                    6934 C |  loc_69D2 :                    69D2 C |
 loc_69EC :                    69EC C |  loc_69F4 :                    69F4 C |
 loc_69FC :                    69FC C |  loc_6A02 :                    6A02 C |
 loc_6A36 :                    6A36 C |  loc_6A3E :                    6A3E C |
 loc_6A46 :                    6A46 C |  loc_6A4E :                    6A4E C |
 loc_6A54 :                    6A54 C |  loc_6A88 :                    6A88 C |
 loc_6A94 :                    6A94 C |  loc_6AA0 :                    6AA0 C |
 loc_6AAC :                    6AAC C |  loc_6AB6 :                    6AB6 C |
 loc_6AE6 :                    6AE6 C |  loc_6AF0 :                    6AF0 C |
 loc_6AFA :                    6AFA C |  loc_6B04 :                    6B04 C |
 loc_6B0C :                    6B0C C |  loc_6B6 :                      6B6 C |
 loc_6B70 :                    6B70 C |  loc_6B7C :                    6B7C C |
 loc_6B88 :                    6B88 C |  loc_6B94 :                    6B94 C |
 loc_6B9E :                    6B9E C |  loc_6BD8 :                    6BD8 C |
 loc_6C4 :                      6C4 C |  loc_6C48 :                    6C48 C |
 loc_6C70 :                    6C70 C |  loc_6CFC :                    6CFC C |
 loc_6D22 :                    6D22 C |  loc_6D38 :                    6D38 C |
 loc_6D6E :                    6D6E C |  loc_6DDC :                    6DDC C |
 loc_6DFE :                    6DFE C |  loc_6E0 :                      6E0 C |
 loc_6E3 :                      6E3 C |  loc_6E40 :                    6E40 C |
 loc_6E66 :                    6E66 C |  loc_6E8 :                      6E8 C |
 loc_6EB4 :                    6EB4 C |  loc_6FA :                      6FA C |
 loc_728 :                      728 C |  loc_74F4 :                    74F4 C |
 loc_74FC :                    74FC C |  loc_750 :                      750 C |
 loc_7512 :                    7512 C |  loc_754A :                    754A C |
 loc_7576 :                    7576 C |  loc_758 :                      758 C |
 loc_77E :                      77E C |  loc_780 :                      780 C |
 loc_78C :                      78C C |  loc_792 :                      792 C |
 loc_79E :                      79E C |  loc_79F :                      79F C |
 loc_7B0 :                      7B0 C |  loc_7B1 :                      7B1 C |
 loc_7DC :                      7DC C |  loc_7EE :                      7EE C |
 loc_7FA8 :                    7FA8 C |  loc_7FC6 :                    7FC6 C |
 loc_7FE :                      7FE C |  loc_8010 :                    8010 C |
 loc_8086 :                    8086 C |  loc_808A :                    808A C |
 loc_808A.wait :               8090 C |  loc_80B2 :                    80B2 C |
 loc_80C6 :                    80C6 C |  loc_80D2 :                    80D2 C |
 loc_80E0 :                    80E0 C |  loc_810E :                    810E C |
 loc_810E.gotolevel :          813E C |  loc_814C :                    814C C |
 loc_81C :                      81C C |  loc_81CC :                    81CC C |
 loc_81D :                      81D C |  loc_81FC :                    81FC C |
 loc_820 :                      820 C |  loc_8204 :                    8204 C |
 loc_8214 :                    8214 C |  loc_8236 :                    8236 C |
 loc_8254 :                    8254 C |  loc_8260 :                    8260 C |
 loc_827E :                    827E C |  loc_828C :                    828C C |
 loc_82A6 :                    82A6 C |  loc_82BA :                    82BA C |
 loc_82C4 :                    82C4 C |  loc_82D4 :                    82D4 C |
 loc_82DE :                    82DE C |  loc_82E :                      82E C |
 loc_8320 :                    8320 C |  loc_8328 :                    8328 C |
 loc_8356 :                    8356 C |  loc_837C :                    837C C |
 loc_837C.loop :               8392 C |  loc_83A :                      83A C |
 loc_83C8 :                    83C8 C |  loc_83E :                      83E C |
 loc_83E4 :                    83E4 C |  loc_849 :                      849 C |
 loc_856A :                    856A C |  loc_858 :                      858 C |
 loc_85C :                      85C C |  loc_85D6 :                    85D6 C |
 loc_862C :                    862C C |  loc_866E :                    866E C |
 loc_86BC :                    86BC C |  loc_86EC :                    86EC C |
 loc_86FC :                    86FC C |  loc_8714 :                    8714 C |
 loc_8748 :                    8748 C |  loc_8752 :                    8752 C |
 loc_878A :                    878A C |  loc_87A0 :                    87A0 C |
 loc_87A4 :                    87A4 C |  loc_8856 :                    8856 C |
 loc_885A :                    885A C |  loc_8870 :                    8870 C |
 loc_8882 :                    8882 C |  loc_88C :                      88C C |
 loc_88C2 :                    88C2 C |  loc_88D2 :                    88D2 C |
 loc_88E :                      88E C |  loc_894 :                      894 C |
 loc_8968 :                    8968 C | *loc_896C :                    896C C |
 loc_898 :                      898 C |  loc_8A6 :                      8A6 C |
 loc_8AB4 :                    8AB4 C |  loc_8AD2 :                    8AD2 C |
 loc_8B1C :                    8B1C C |  loc_8B5 :                      8B5 C |
 loc_8BA0 :                    8BA0 C |  loc_8BA4 :                    8BA4 C |
 loc_8BA4.wait :               8BAA C |  loc_8C86 :                    8C86 C |
 loc_8CDE :                    8CDE C |  loc_8CE4 :                    8CE4 C |
 loc_8CE4.load :               8D00 C |  loc_8D1 :                      8D1 C |
 loc_8E0 :                      8E0 C |  loc_8ED8 :                    8ED8 C |
 loc_8EE0 :                    8EE0 C |  loc_8F3A :                    8F3A C |
 loc_8F50 :                    8F50 C |  loc_8F84 :                    8F84 C |
 loc_8F94 :                    8F94 C |  loc_8FCA :                    8FCA C |
 loc_8FD :                      8FD C |  loc_8FE2 :                    8FE2 C |
 loc_8FE8 :                    8FE8 C |  loc_903C :                    903C C |
 loc_905 :                      905 C |  loc_90B :                      90B C |
 loc_932 :                      932 C |  loc_9440 :                    9440 C |
 loc_94A0 :                    94A0 C |  loc_94A8 :                    94A8 C |
 loc_94B4 :                    94B4 C |  loc_95 :                        95 C |
 loc_9528 :                    9528 C |  loc_9668 :                    9668 C |
 loc_9670 :                    9670 C |  loc_967C :                    967C C |
 loc_9720 :                    9720 C |  loc_972A :                    972A C |
 loc_9782 :                    9782 C |  loc_978C :                    978C C |
 loc_97AE :                    97AE C |  loc_97E2 :                    97E2 C |
 loc_980E :                    980E C |  loc_9846 :                    9846 C |
 loc_9884 :                    9884 C |  loc_988C :                    988C C |
 loc_9898 :                    9898 C |  loc_991E :                    991E C |
 loc_9928 :                    9928 C |  loc_9994 :                    9994 C |
 loc_99CC :                    99CC C |  loc_99E4 :                    99E4 C |
 loc_9A0 :                      9A0 C |  loc_9A2 :                      9A2 C |
 loc_9B0 :                      9B0 C |  loc_9B2 :                      9B2 C |
 loc_9B80 :                    9B80 C |  loc_9BA2 :                    9BA2 C |
 loc_9BA4 :                    9BA4 C |  loc_9C28 :                    9C28 C |
 loc_9C4A :                    9C4A C |  loc_9CB0 :                    9CB0 C |
 loc_9CD2 :                    9CD2 C |  loc_9DAC :                    9DAC C |
 loc_9DBC :                    9DBC C |  loc_9DCE :                    9DCE C |
 loc_9E26 :                    9E26 C |  loc_9E38 :                    9E38 C |
 loc_9E5C :                    9E5C C |  loc_9E6 :                      9E6 C |
 loc_9EDA :                    9EDA C |  loc_9EEC :                    9EEC C |
 loc_9F14 :                    9F14 C |  loc_9F1E :                    9F1E C |
 loc_9F34 :                    9F34 C |  loc_9F56 :                    9F56 C |
 loc_9F60 :                    9F60 C |  loc_9F76 :                    9F76 C |
 loc_9F90 :                    9F90 C |  loc_9FAC :                    9FAC C |
 loc_9FFA :                    9FFA C |  loc_A014 :                    A014 C |
 loc_A062 :                    A062 C |  loc_A07 :                      A07 C |
 loc_A07C :                    A07C C |  loc_A098 :                    A098 C |
 loc_A0B2 :                    A0B2 C |  loc_A0FE :                    A0FE C |
 loc_A118 :                    A118 C |  loc_A16 :                      A16 C |
 loc_A17C :                    A17C C |  loc_A184 :                    A184 C |
 loc_A192 :                    A192 C |  loc_A1AA :                    A1AA C |
 loc_A1BC :                    A1BC C |  loc_A1F2 :                    A1F2 C |
 loc_A1FC :                    A1FC C |  loc_A22A :                    A22A C |
 loc_A234 :                    A234 C |  loc_A262 :                    A262 C |
 loc_A26A :                    A26A C |  loc_A296 :                    A296 C |
 loc_A2CC :                    A2CC C |  loc_A2D4 :                    A2D4 C |
 loc_A2E4 :                    A2E4 C |  loc_A2F0 :                    A2F0 C |
 loc_A356 :                    A356 C |  loc_A36E :                    A36E C |
 loc_A37C :                    A37C C |  loc_A38 :                      A38 C |
 loc_A38A :                    A38A C |  loc_A3A6 :                    A3A6 C |
 loc_A3B8 :                    A3B8 C |  loc_A3CA :                    A3CA C |
 loc_A3D2 :                    A3D2 C |  loc_A3E :                      A3E C |
 loc_A3E0 :                    A3E0 C |  loc_A40A :                    A40A C |
 loc_A412 :                    A412 C |  loc_A420 :                    A420 C |
 loc_A42A :                    A42A C |  loc_A42E :                    A42E C |
 loc_A432 :                    A432 C |  loc_A43A :                    A43A C |
 loc_A44A :                    A44A C |  loc_A454 :                    A454 C |
 loc_A45A :                    A45A C |  loc_A488 :                    A488 C |
 loc_A4B4 :                    A4B4 C |  loc_A4D6 :                    A4D6 C |
 loc_A4E0 :                    A4E0 C |  loc_A4F0 :                    A4F0 C |
 loc_A506 :                    A506 C |  loc_A51E :                    A51E C |
 loc_A530 :                    A530 C |  loc_A550 :                    A550 C |
 loc_A56C :                    A56C C |  loc_A588 :                    A588 C |
 loc_A5A :                      A5A C |  loc_A5B :                      A5B C |
 loc_A5C8 :                    A5C8 C |  loc_A5D6 :                    A5D6 C |
 loc_A5E4 :                    A5E4 C |  loc_A5F2 :                    A5F2 C |
 loc_A5FC :                    A5FC C |  loc_A61A :                    A61A C |
 loc_A632 :                    A632 C |  loc_A63E :                    A63E C |
 loc_A64E :                    A64E C |  loc_A656 :                    A656 C |
 loc_A658 :                    A658 C |  loc_A66E :                    A66E C |
 loc_A67C :                    A67C C |  loc_A6B2 :                    A6B2 C |
 loc_A6C0 :                    A6C0 C |  loc_A6CE :                    A6CE C |
 loc_A6DC :                    A6DC C |  loc_A6E8 :                    A6E8 C |
 loc_A70E :                    A70E C |  loc_A716 :                    A716 C |
 loc_A718 :                    A718 C |  loc_A72E :                    A72E C |
 loc_A738 :                    A738 C |  loc_A744 :                    A744 C |
 loc_A778 :                    A778 C |  loc_A79A :                    A79A C |
 loc_A7A6 :                    A7A6 C |  loc_A7CE :                    A7CE C |
 loc_A7E0 :                    A7E0 C |  loc_A7E8 :                    A7E8 C |
 loc_A7F6 :                    A7F6 C |  loc_A800 :                    A800 C |
 loc_A804 :                    A804 C |  loc_A808 :                    A808 C |
 loc_A810 :                    A810 C |  loc_A820 :                    A820 C |
 loc_A82A :                    A82A C |  loc_A830 :                    A830 C |
 loc_A85E :                    A85E C |  loc_A88A :                    A88A C |
 loc_A8AC :                    A8AC C |  loc_A8B6 :                    A8B6 C |
 loc_A8C6 :                    A8C6 C |  loc_A8D6 :                    A8D6 C |
 loc_A8F8 :                    A8F8 C |  loc_A928 :                    A928 C |
 loc_A94E :                    A94E C |  loc_A96 :                      A96 C |
 loc_A96C :                    A96C C |  loc_A988 :                    A988 C |
 loc_A994 :                    A994 C |  loc_A9B2 :                    A9B2 C |
 loc_A9C0 :                    A9C0 C |  loc_A9C8 :                    A9C8 C |
 loc_AA08 :                    AA08 C |  loc_AA18 :                    AA18 C |
 loc_AA20 :                    AA20 C |  loc_AA22 :                    AA22 C |
 loc_AA3E :                    AA3E C |  loc_AA46 :                    AA46 C |
 loc_AA6E :                    AA6E C |  loc_AAC :                      AAC C |
 loc_AAD4 :                    AAD4 C |  loc_AB :                        AB C |
 loc_AB02 :                    AB02 C |  loc_AB2A :                    AB2A C |
 loc_AB30 :                    AB30 C |  loc_AB4 :                      AB4 C |
 loc_AB5C :                    AB5C C |  loc_AB92 :                    AB92 C |
 loc_AB9A :                    AB9A C |  loc_ABAA :                    ABAA C |
 loc_ABB6 :                    ABB6 C |  loc_AC1 :                      AC1 C |
 loc_AC1C :                    AC1C C |  loc_AC34 :                    AC34 C |
 loc_AC42 :                    AC42 C |  loc_AC50 :                    AC50 C |
 loc_AC6C :                    AC6C C |  loc_AC7E :                    AC7E C |
 loc_AC90 :                    AC90 C |  loc_AC98 :                    AC98 C |
 loc_ACA6 :                    ACA6 C |  loc_ACC4 :                    ACC4 C |
 loc_ACD2 :                    ACD2 C |  loc_ACDC :                    ACDC C |
 loc_ACE0 :                    ACE0 C |  loc_ACE4 :                    ACE4 C |
 loc_ACEC :                    ACEC C |  loc_ACFC :                    ACFC C |
 loc_AD06 :                    AD06 C |  loc_AD0C :                    AD0C C |
 loc_AD3A :                    AD3A C |  loc_AD66 :                    AD66 C |
 loc_AD88 :                    AD88 C |  loc_AD92 :                    AD92 C |
 loc_ADA2 :                    ADA2 C |  loc_ADB8 :                    ADB8 C |
 loc_ADD0 :                    ADD0 C |  loc_ADE2 :                    ADE2 C |
 loc_AE02 :                    AE02 C |  loc_AE1E :                    AE1E C |
 loc_AE3A :                    AE3A C |  loc_AE7A :                    AE7A C |
 loc_AE88 :                    AE88 C |  loc_AE96 :                    AE96 C |
 loc_AEA4 :                    AEA4 C |  loc_AEAE :                    AEAE C |
 loc_AECC :                    AECC C |  loc_AEE4 :                    AEE4 C |
 loc_AEF0 :                    AEF0 C |  loc_AF00 :                    AF00 C |
 loc_AF08 :                    AF08 C |  loc_AF0A :                    AF0A C |
 loc_AF20 :                    AF20 C |  loc_AF2E :                    AF2E C |
 loc_AF64 :                    AF64 C |  loc_AF72 :                    AF72 C |
 loc_AF80 :                    AF80 C |  loc_AF8E :                    AF8E C |
 loc_AF9A :                    AF9A C |  loc_AFC0 :                    AFC0 C |
 loc_AFC8 :                    AFC8 C |  loc_AFCA :                    AFCA C |
 loc_AFE0 :                    AFE0 C |  loc_AFEA :                    AFEA C |
 loc_B026 :                    B026 C |  loc_B048 :                    B048 C |
 loc_B054 :                    B054 C |  loc_B07C :                    B07C C |
 loc_B08E :                    B08E C |  loc_B096 :                    B096 C |
 loc_B0A4 :                    B0A4 C |  loc_B0AE :                    B0AE C |
 loc_B0B2 :                    B0B2 C |  loc_B0B6 :                    B0B6 C |
 loc_B0BE :                    B0BE C |  loc_B0CE :                    B0CE C |
 loc_B0D8 :                    B0D8 C |  loc_B0DE :                    B0DE C |
 loc_B10C :                    B10C C |  loc_B138 :                    B138 C |
 loc_B15A :                    B15A C |  loc_B164 :                    B164 C |
 loc_B174 :                    B174 C |  loc_B184 :                    B184 C |
 loc_B1A6 :                    B1A6 C |  loc_B1B :                      B1B C |
 loc_B1D6 :                    B1D6 C |  loc_B1FC :                    B1FC C |
 loc_B21A :                    B21A C |  loc_B236 :                    B236 C |
 loc_B240 :                    B240 C |  loc_B250 :                    B250 C |
 loc_B274 :                    B274 C |  loc_B28 :                      B28 C |
 loc_B292 :                    B292 C |  loc_B2A0 :                    B2A0 C |
 loc_B2A8 :                    B2A8 C |  loc_B2EC :                    B2EC C |
 loc_B2FC :                    B2FC C |  loc_B30 :                      B30 C |
 loc_B304 :                    B304 C |  loc_B306 :                    B306 C |
 loc_B32 :                      B32 C |  loc_B322 :                    B322 C |
 loc_B32A :                    B32A C |  loc_B33 :                      B33 C |
 loc_B352 :                    B352 C |  loc_B3B8 :                    B3B8 C |
 loc_B3E6 :                    B3E6 C |  loc_B40 :                      B40 C |
 loc_B40E :                    B40E C |  loc_B422 :                    B422 C |
 loc_B436 :                    B436 C |  loc_B47C :                    B47C C |
 loc_B492 :                    B492 C |  loc_B4A2 :                    B4A2 C |
 loc_B518 :                    B518 C |  loc_B5C0 :                    B5C0 C |
 loc_B5F :                      B5F C |  loc_B604 :                    B604 C |
 loc_B626 :                    B626 C |  loc_B646 :                    B646 C |
 loc_B668 :                    B668 C |  loc_B674 :                    B674 C |
 loc_B6E :                      B6E C |  loc_B6F6 :                    B6F6 C |
 loc_B7 :                        B7 C |  loc_B728 :                    B728 C |
 loc_B74A :                    B74A C |  loc_B76A :                    B76A C |
 loc_B78C :                    B78C C |  loc_B798 :                    B798 C |
 loc_B7A :                      B7A C |  loc_B7A0 :                    B7A0 C |
 loc_B7D2 :                    B7D2 C |  loc_B7DA :                    B7DA C |
 loc_B80E :                    B80E C |  loc_B81A :                    B81A C |
 loc_B82E :                    B82E C |  loc_B892 :                    B892 C |
 loc_B8A2 :                    B8A2 C | *loc_B9 :                        B9 C |
 loc_BA8C :                    BA8C C |  loc_BAA6 :                    BAA6 C |
 loc_BAE8 :                    BAE8 C |  loc_BB08 :                    BB08 C |
 loc_BB3A :                    BB3A C |  loc_BB5C :                    BB5C C |
 loc_BB7C :                    BB7C C |  loc_BB9E :                    BB9E C |
 loc_BBA :                      BBA C |  loc_BBAA :                    BBAA C |
 loc_BBB2 :                    BBB2 C |  loc_BBE8 :                    BBE8 C |
 loc_BBF :                      BBF C |  loc_BBF0 :                    BBF0 C |
 loc_BC24 :                    BC24 C |  loc_BC30 :                    BC30 C |
 loc_BC4 :                      BC4 C |  loc_BC44 :                    BC44 C |
 loc_BC8A :                    BC8A C |  loc_BC9 :                      BC9 C |
 loc_BCA0 :                    BCA0 C |  loc_BCBC :                    BCBC C |
 loc_BCC4 :                    BCC4 C |  loc_BCE6 :                    BCE6 C |
 loc_BCF0 :                    BCF0 C |  loc_BDA :                      BDA C |
 loc_BDD6 :                    BDD6 C |  loc_BDDE :                    BDDE C |
 loc_BE16 :                    BE16 C |  loc_BE1E :                    BE1E C |
 loc_BE26 :                    BE26 C |  loc_BE2E :                    BE2E C |
 loc_BE66 :                    BE66 C |  loc_BE9C :                    BE9C C |
 loc_BEE0 :                    BEE0 C |  loc_BF00 :                    BF00 C |
 loc_BF1E :                    BF1E C |  loc_BF62 :                    BF62 C |
 loc_BF90 :                    BF90 C |  loc_BFB4 :                    BFB4 C |
 loc_BFC4 :                    BFC4 C |  loc_BFD6 :                    BFD6 C |
 loc_BFDA :                    BFDA C |  loc_BFE4 :                    BFE4 C |
 loc_BFF6 :                    BFF6 C |  loc_BFF8 :                    BFF8 C |
 loc_C00C :                    C00C C |  loc_C03A :                    C03A C |
 loc_C054 :                    C054 C |  loc_C078 :                    C078 C |
 loc_C088 :                    C088 C |  loc_C09A :                    C09A C |
 loc_C09E :                    C09E C |  loc_C0B2 :                    C0B2 C |
 loc_C0C4 :                    C0C4 C |  loc_C0C6 :                    C0C6 C |
 loc_C0DA :                    C0DA C |  loc_C108 :                    C108 C |
 loc_C122 :                    C122 C |  loc_C146 :                    C146 C |
 loc_C156 :                    C156 C |  loc_C168 :                    C168 C |
 loc_C16C :                    C16C C |  loc_C17C :                    C17C C |
 loc_C186 :                    C186 C |  loc_C188 :                    C188 C |
 loc_C19C :                    C19C C |  loc_C1CA :                    C1CA C |
 loc_C1E :                      C1E C |  loc_C1E6 :                    C1E6 C |
 loc_C20A :                    C20A C |  loc_C21A :                    C21A C |
 loc_C22 :                      C22 C |  loc_C22C :                    C22C C |
 loc_C230 :                    C230 C |  loc_C240 :                    C240 C |
 loc_C24A :                    C24A C |  loc_C24C :                    C24C C |
 loc_C260 :                    C260 C |  loc_C28E :                    C28E C |
 loc_C2BE :                    C2BE C |  loc_C2CE :                    C2CE C |
 loc_C326 :                    C326 C |  loc_C334 :                    C334 C |
 loc_C34 :                      C34 C |  loc_C340 :                    C340 C |
 loc_C38 :                      C38 C |  loc_C39A :                    C39A C |
 loc_C3A8 :                    C3A8 C |  loc_C3B4 :                    C3B4 C |
 loc_C40E :                    C40E C |  loc_C41C :                    C41C C |
 loc_C428 :                    C428 C |  loc_C442 :                    C442 C |
 loc_C45 :                      C45 C |  loc_C48 :                      C48 C |
 loc_C480 :                    C480 C |  loc_C48E :                    C48E C |
 loc_C4BA :                    C4BA C |  loc_C4C :                      C4C C |
 loc_C4CA :                    C4CA C |  loc_C4FC :                    C4FC C |
 loc_C520 :                    C520 C |  loc_C524 :                    C524 C |
 loc_C54 :                      C54 C |  loc_C54.cnt :                    9 - |
 loc_C558 :                    C558 C |  loc_C57C :                    C57C C |
 loc_C580 :                    C580 C |  loc_C5B4 :                    C5B4 C |
 loc_C5C :                      C5C C |  loc_C5D8 :                    C5D8 C |
 loc_C5DC :                    C5DC C |  loc_C60E :                    C60E C |
 loc_C62 :                      C62 C |  loc_C632 :                    C632 C |
 loc_C66C :                    C66C C |  loc_C686 :                    C686 C |
 loc_C68A :                    C68A C |  loc_C6B4 :                    C6B4 C |
 loc_C6D0 :                    C6D0 C |  loc_C6EC :                    C6EC C |
 loc_C6FC :                    C6FC C |  loc_C70 :                      C70 C |
 loc_C714 :                    C714 C |  loc_C724 :                    C724 C |
 loc_C738 :                    C738 C |  loc_C746 :                    C746 C |
 loc_C75A :                    C75A C |  loc_C768 :                    C768 C |
 loc_C76C :                    C76C C |  loc_C7BC :                    C7BC C |
 loc_C7D6 :                    C7D6 C |  loc_C7E0 :                    C7E0 C |
 loc_C818 :                    C818 C |  loc_C82E :                    C82E C |
 loc_C832 :                    C832 C |  loc_C91 :                      C91 C |
 loc_C94 :                      C94 C |  loc_C99 :                      C99 C |
*loc_C9FA :                    C9FA C | *loc_CA06 :                    CA06 C |
 loc_CA0C :                    CA0C C |  loc_CA16 :                    CA16 C |
 loc_CA2C :                    CA2C C |  loc_CA8A :                    CA8A C |
 loc_CA9 :                      CA9 C |  loc_CAAC :                    CAAC C |
 loc_CAB4 :                    CAB4 C |  loc_CACC :                    CACC C |
 loc_CAD4 :                    CAD4 C |  loc_CAEA :                    CAEA C |
 loc_CB14 :                    CB14 C |  loc_CB1C :                    CB1C C |
 loc_CB2C :                    CB2C C |  loc_CB40 :                    CB40 C |
 loc_CB4E :                    CB4E C |  loc_CB60 :                    CB60 C |
 loc_CB74 :                    CB74 C |  loc_CB82 :                    CB82 C |
 loc_CB90 :                    CB90 C |  loc_CBD8 :                    CBD8 C |
 loc_CC0E :                    CC0E C |  loc_CC22 :                    CC22 C |
 loc_CC30 :                    CC30 C |  loc_CC44 :                    CC44 C |
 loc_CC52 :                    CC52 C |  loc_CC6 :                      CC6 C |
 loc_CC62 :                    CC62 C |  loc_CCB8 :                    CCB8 C |
 loc_CD80 :                    CD80 C |  loc_CDBC :                    CDBC C |
 loc_CDE6 :                    CDE6 C |  loc_CE14 :                    CE14 C |
 loc_CE2C :                    CE2C C |  loc_CE32 :                    CE32 C |
 loc_CE36 :                    CE36 C |  loc_CE4E :                    CE4E C |
 loc_CE5A :                    CE5A C |  loc_CE78 :                    CE78 C |
 loc_CE9 :                      CE9 C |  loc_CEA2 :                    CEA2 C |
 loc_CED0 :                    CED0 C |  loc_CEE8 :                    CEE8 C |
 loc_CEEE :                    CEEE C |  loc_CEF2 :                    CEF2 C |
 loc_CF2A :                    CF2A C |  loc_CF46 :                    CF46 C |
 loc_CF4A :                    CF4A C |  loc_CF74 :                    CF74 C |
 loc_CF7E :                    CF7E C |  loc_CF90 :                    CF90 C |
 loc_CFA :                      CFA C |  loc_CFD0 :                    CFD0 C |
 loc_D10 :                      D10 C |  loc_D14 :                      D14 C |
 loc_D18 :                      D18 C |  loc_D1C :                      D1C C |
 loc_D1E2 :                    D1E2 C |  loc_D20E :                    D20E C |
 loc_D216 :                    D216 C |  loc_D24 :                      D24 C |
 loc_D2A8 :                    D2A8 C |  loc_D2D6 :                    D2D6 C |
 loc_D308 :                    D308 C |  loc_D31 :                      D31 C |
 loc_D31C :                    D31C C |  loc_D34E :                    D34E C |
 loc_D362 :                    D362 C |  loc_D388 :                    D388 C |
 loc_D394 :                    D394 C |  loc_D3C2 :                    D3C2 C |
 loc_D3F4 :                    D3F4 C |  loc_D40A :                    D40A C |
 loc_D43C :                    D43C C |  loc_D452 :                    D452 C |
 loc_D47 :                      D47 C |  loc_D478 :                    D478 C |
 loc_D484 :                    D484 C |  loc_D4B2 :                    D4B2 C |
 loc_D4C :                      D4C C |  loc_D4E4 :                    D4E4 C |
 loc_D4FA :                    D4FA C |  loc_D52C :                    D52C C |
 loc_D542 :                    D542 C |  loc_D568 :                    D568 C |
 loc_D574 :                    D574 C |  loc_D58 :                      D58 C |
 loc_D5A2 :                    D5A2 C |  loc_D5D :                      D5D C |
 loc_D5D4 :                    D5D4 C |  loc_D5E8 :                    D5E8 C |
 loc_D61A :                    D61A C |  loc_D62E :                    D62E C |
 loc_D654 :                    D654 C |  loc_D660 :                    D660 C |
 loc_D68E :                    D68E C |  loc_D6CC :                    D6CC C |
 loc_D6E6 :                    D6E6 C |  loc_D72 :                      D72 C |
 loc_D724 :                    D724 C |  loc_D73E :                    D73E C |
 loc_D764 :                    D764 C |  loc_D770 :                    D770 C |
 loc_D79E :                    D79E C |  loc_D7DC :                    D7DC C |
 loc_D7F8 :                    D7F8 C |  loc_D836 :                    D836 C |
 loc_D852 :                    D852 C |  loc_D878 :                    D878 C |
 loc_D884 :                    D884 C |  loc_D8B2 :                    D8B2 C |
 loc_D8F0 :                    D8F0 C |  loc_D908 :                    D908 C |
 loc_D946 :                    D946 C |  loc_D95E :                    D95E C |
 loc_D98 :                      D98 C |  loc_D984 :                    D984 C |
 loc_D990 :                    D990 C |  loc_D9BE :                    D9BE C |
 loc_D9FC :                    D9FC C |  loc_DA16 :                    DA16 C |
 loc_DA54 :                    DA54 C |  loc_DA6E :                    DA6E C |
 loc_DA94 :                    DA94 C |  loc_DAA0 :                    DAA0 C |
 loc_DACE :                    DACE C | *loc_DAE :                      DAE C |
 loc_DB00 :                    DB00 C |  loc_DB14 :                    DB14 C |
 loc_DB46 :                    DB46 C |  loc_DB5A :                    DB5A C |
 loc_DB7 :                      DB7 C |  loc_DB80 :                    DB80 C |
 loc_DB8C :                    DB8C C |  loc_DBBA :                    DBBA C |
 loc_DBEC :                    DBEC C |  loc_DC02 :                    DC02 C |
 loc_DC34 :                    DC34 C |  loc_DC4A :                    DC4A C |
 loc_DC70 :                    DC70 C |  loc_DC7C :                    DC7C C |
 loc_DC8 :                      DC8 C |  loc_DCAA :                    DCAA C |
 loc_DCDC :                    DCDC C |  loc_DCF2 :                    DCF2 C |
 loc_DD24 :                    DD24 C |  loc_DD3A :                    DD3A C |
 loc_DD4 :                      DD4 C |  loc_DD60 :                    DD60 C |
 loc_DD6C :                    DD6C C |  loc_DD9A :                    DD9A C |
 loc_DDCC :                    DDCC C |  loc_DDE0 :                    DDE0 C |
 loc_DE12 :                    DE12 C |  loc_DE26 :                    DE26 C |
 loc_DE4C :                    DE4C C |  loc_DE58 :                    DE58 C |
 loc_DE6 :                      DE6 C |  loc_DE86 :                    DE86 C |
 loc_DEC4 :                    DEC4 C |  loc_DEDE :                    DEDE C |
 loc_DF1C :                    DF1C C |  loc_DF36 :                    DF36 C |
 loc_DF5C :                    DF5C C |  loc_DF68 :                    DF68 C |
 loc_DF96 :                    DF96 C |  loc_DFD4 :                    DFD4 C |
 loc_DFF0 :                    DFF0 C |  loc_E02E :                    E02E C |
 loc_E04A :                    E04A C |  loc_E070 :                    E070 C |
 loc_E07C :                    E07C C |  loc_E0AA :                    E0AA C |
 loc_E0C :                      E0C C |  loc_E0E8 :                    E0E8 C |
 loc_E100 :                    E100 C |  loc_E13E :                    E13E C |
 loc_E156 :                    E156 C |  loc_E17C :                    E17C C |
 loc_E188 :                    E188 C |  loc_E1B6 :                    E1B6 C |
 loc_E1F4 :                    E1F4 C |  loc_E20E :                    E20E C |
 loc_E24C :                    E24C C |  loc_E26 :                      E26 C |
 loc_E266 :                    E266 C |  loc_E28C :                    E28C C |
 loc_E2BE :                    E2BE C |  loc_E2C8 :                    E2C8 C |
 loc_E2E6 :                    E2E6 C |  loc_E31 :                      E31 C |
 loc_E32C :                    E32C C |  loc_E356 :                    E356 C |
 loc_E37C :                    E37C C |  loc_E38A :                    E38A C |
 loc_E398 :                    E398 C |  loc_E3C2 :                    E3C2 C |
 loc_E3C8 :                    E3C8 C |  loc_E3D :                      E3D C |
 loc_E3D0 :                    E3D0 C |  loc_E3D6 :                    E3D6 C |
 loc_E3DE :                    E3DE C |  loc_E43E :                    E43E C |
 loc_E44C :                    E44C C |  loc_E45A :                    E45A C |
 loc_E480 :                    E480 C |  loc_E48E :                    E48E C |
 loc_E49C :                    E49C C |  loc_E4B6 :                    E4B6 C |
 loc_E4C2 :                    E4C2 C |  loc_E4C8 :                    E4C8 C |
 loc_E4D0 :                    E4D0 C |  loc_E4D6 :                    E4D6 C |
 loc_E4DE :                    E4DE C |  loc_E4EC :                    E4EC C |
 loc_E4FE :                    E4FE C |  loc_E526 :                    E526 C |
 loc_E558 :                    E558 C |  loc_E560 :                    E560 C |
 loc_E58 :                      E58 C |  loc_E592 :                    E592 C |
 loc_E59A :                    E59A C |  loc_E5A6 :                    E5A6 C |
 loc_E5CE :                    E5CE C |  loc_E600 :                    E600 C |
 loc_E608 :                    E608 C |  loc_E63A :                    E63A C |
 loc_E642 :                    E642 C |  loc_E64E :                    E64E C |
 loc_E676 :                    E676 C |  loc_E6A8 :                    E6A8 C |
 loc_E6B0 :                    E6B0 C |  loc_E6E :                      E6E C |
 loc_E6E2 :                    E6E2 C |  loc_E6EA :                    E6EA C |
 loc_E6F6 :                    E6F6 C |  loc_E71E :                    E71E C |
 loc_E750 :                    E750 C |  loc_E758 :                    E758 C |
 loc_E78A :                    E78A C |  loc_E792 :                    E792 C |
 loc_E79E :                    E79E C |  loc_E7C6 :                    E7C6 C |
 loc_E7D :                      E7D C |  loc_E7F8 :                    E7F8 C |
 loc_E800 :                    E800 C |  loc_E832 :                    E832 C |
 loc_E83A :                    E83A C |  loc_E846 :                    E846 C |
 loc_E86E :                    E86E C |  loc_E8A0 :                    E8A0 C |
 loc_E8A8 :                    E8A8 C |  loc_E8C :                      E8C C |
 loc_E8DA :                    E8DA C |  loc_E8E2 :                    E8E2 C |
 loc_E8EE :                    E8EE C |  loc_E916 :                    E916 C |
 loc_E92 :                      E92 C |  loc_E948 :                    E948 C |
 loc_E950 :                    E950 C |  loc_E982 :                    E982 C |
 loc_E98A :                    E98A C |  loc_E996 :                    E996 C |
 loc_E9BE :                    E9BE C |  loc_E9F0 :                    E9F0 C |
 loc_E9F8 :                    E9F8 C |  loc_EA2A :                    EA2A C |
 loc_EA32 :                    EA32 C |  loc_EA64 :                    EA64 C |
 loc_EA6A :                    EA6A C |  loc_EA80 :                    EA80 C |
 loc_EA86 :                    EA86 C |  loc_EA96 :                    EA96 C |
 loc_EABA :                    EABA C |  loc_EAC0 :                    EAC0 C |
 loc_EADA :                    EADA C |  loc_EAFA :                    EAFA C |
 loc_EB1C :                    EB1C C |  loc_EB2C :                    EB2C C |
 loc_EB30 :                    EB30 C |  loc_EB34 :                    EB34 C |
 loc_EB58 :                    EB58 C |  loc_EB5E :                    EB5E C |
 loc_EB66 :                    EB66 C |  loc_EB6C :                    EB6C C |
 loc_EB78 :                    EB78 C |  loc_EB98 :                    EB98 C |
 loc_EBA2 :                    EBA2 C |  loc_EBB2 :                    EBB2 C |
 loc_EBBA :                    EBBA C |  loc_EBC8 :                    EBC8 C |
 loc_EBE0 :                    EBE0 C |  loc_EBFE :                    EBFE C |
 loc_EC02 :                    EC02 C |  loc_EC20 :                    EC20 C |
 loc_EC20.loop :               EC2E C |  loc_EC20.wait :               EC34 C |
 loc_EC62 :                    EC62 C |  loc_ECCE :                    ECCE C |
 loc_ED30 :                    ED30 C |  loc_ED36 :                    ED36 C |
 loc_ED5E :                    ED5E C |  loc_ED7C :                    ED7C C |
 loc_EDA6 :                    EDA6 C |  loc_EDC6 :                    EDC6 C |
 loc_EE0C :                    EE0C C |  loc_EE5C :                    EE5C C |
 loc_EE86 :                    EE86 C |  loc_EED :                      EED C |
 loc_EEDA :                    EEDA C |  loc_EF04 :                    EF04 C |
*loc_EF5 :                      EF5 C |  loc_EF58 :                    EF58 C |
 loc_EF7E :                    EF7E C |  loc_EF8 :                      EF8 C |
 loc_EFF8 :                    EFF8 C |  loc_F00 :                      F00 C |
 loc_F00A :                    F00A C |  loc_F00E :                    F00E C |
 loc_F02 :                      F02 C |  loc_F04 :                      F04 C |
 loc_F0DE :                    F0DE C |  loc_F106 :                    F106 C |
 loc_F11 :                      F11 C | *loc_F13 :                      F13 C |
 loc_F140 :                    F140 C |  loc_F18 :                      F18 C |
 loc_F1B8 :                    F1B8 C |  loc_F1C :                      F1C C |
 loc_F1C.loc_F52 :              F52 C |  loc_F1EE :                    F1EE C |
 loc_F1FA :                    F1FA C |  loc_F214 :                    F214 C |
 loc_F226 :                    F226 C |  loc_F244 :                    F244 C |
 loc_F270 :                    F270 C |  loc_F29A :                    F29A C |
 loc_F2A8 :                    F2A8 C |  loc_F2D0 :                    F2D0 C |
 loc_F320 :                    F320 C |  loc_F37C :                    F37C C |
 loc_F3AA :                    F3AA C |  loc_F3B6 :                    F3B6 C |
 loc_F3C6 :                    F3C6 C |  loc_F3E4 :                    F3E4 C |
 loc_F402 :                    F402 C |  loc_F420 :                    F420 C |
 loc_F43E :                    F43E C |  loc_F462 :                    F462 C |
 loc_F4D8 :                    F4D8 C |  loc_F52 :                      F52 C |
 loc_F520 :                    F520 C |  loc_F562 :                    F562 C |
 loc_F574 :                    F574 C |  loc_F59E :                    F59E C |
 loc_F5C2 :                    F5C2 C |  loc_F5D8 :                    F5D8 C |
 loc_F612 :                    F612 C |  loc_F63C :                    F63C C |
 loc_F652 :                    F652 C |  loc_F668 :                    F668 C |
 loc_F6B8 :                    F6B8 C |  loc_F6CA :                    F6CA C |
 loc_F720 :                    F720 C |  loc_F7E8 :                    F7E8 C |
 loc_F7F8 :                    F7F8 C |  loc_F884 :                    F884 C |
 loc_F8B2 :                    F8B2 C |  loc_F8C2 :                    F8C2 C |
 loc_F8F8 :                    F8F8 C |  loc_F90C :                    F90C C |
 loc_F934 :                    F934 C |  loc_F964 :                    F964 C |
 loc_F974 :                    F974 C |  loc_F982 :                    F982 C |
 loc_F9BC :                    F9BC C |  loc_F9BE :                    F9BE C |
 loc_F9D4 :                    F9D4 C |  loc_F9FC :                    F9FC C |
 loc_FA06 :                    FA06 C |  loc_FA0C :                    FA0C C |
 loc_FA4C :                    FA4C C |  loc_FBA :                      FBA C |
 loc_FEE :                      FEE C |  locb_78C :                     78C C |
 locret_101E :                 101E C |  locret_15CE :                 15CE C |
 locret_1714 :                 1714 C |  locret_1754 :                 1754 C |
 locret_1792 :                 1792 C |  locret_17FA :                 17FA C |
 locret_1830 :                 1830 C |  locret_1870 :                 1870 C |
 locret_18AE :                 18AE C |  locret_1916 :                 1916 C |
 locret_1BC6 :                 1BC6 C |  locret_1D92 :                 1D92 C |
 locret_6D20 :                 6D20 C |  locret_6DFC :                 6DFC C |
 locret_6E3E :                 6E3E C |  locret_6FC :                   6FC C |
 locret_734 :                   734 C |  locret_76C :                   76C C |
 locret_7EC :                   7EC C |  locret_8194 :                 8194 C |
 locret_81F6 :                 81F6 C |  locret_82A4 :                 82A4 C |
 locret_82AE :                 82AE C |  locret_8630 :                 8630 C |
 locret_86C :                   86C C |  locret_8BFC :                 8BFC C |
 locret_8CB8 :                 8CB8 C |  locret_8CE2 :                 8CE2 C |
 locret_9526 :                 9526 C |  locret_97B2 :                 97B2 C |
 locret_97E6 :                 97E6 C |  locret_987C :                 987C C |
 locret_987E :                 987E C |  locret_9880 :                 9880 C |
 locret_9882 :                 9882 C |  locret_9998 :                 9998 C |
 locret_9BDE :                 9BDE C |  locret_9BE0 :                 9BE0 C |
 locret_9BE2 :                 9BE2 C |  locret_9BE4 :                 9BE4 C |
 locret_9BE6 :                 9BE6 C |  locret_9BE8 :                 9BE8 C |
 locret_9BEA :                 9BEA C |  locret_9BEC :                 9BEC C |
 locret_9BEE :                 9BEE C |  locret_9BF0 :                 9BF0 C |
 locret_9BF2 :                 9BF2 C |  locret_9BF4 :                 9BF4 C |
 locret_9BF6 :                 9BF6 C |  locret_9BF8 :                 9BF8 C |
 locret_9BFA :                 9BFA C |  locret_9BFC :                 9BFC C |
 locret_9BFE :                 9BFE C |  locret_9C00 :                 9C00 C |
 locret_9C02 :                 9C02 C |  locret_9C04 :                 9C04 C |
 locret_9C06 :                 9C06 C |  locret_9C08 :                 9C08 C |
 locret_9C0A :                 9C0A C |  locret_9C0C :                 9C0C C |
 locret_9C0E :                 9C0E C |  locret_9C10 :                 9C10 C |
 locret_9C12 :                 9C12 C |  locret_9C14 :                 9C14 C |
 locret_9C16 :                 9C16 C |  locret_9C18 :                 9C18 C |
 locret_9C1A :                 9C1A C |  locret_9C1C :                 9C1C C |
 locret_9C1E :                 9C1E C |  locret_9D2 :                   9D2 C |
 locret_9E6C :                 9E6C C |  locret_9F38 :                 9F38 C |
 locret_9F7A :                 9F7A C |  locret_9FF8 :                 9FF8 C |
 locret_A132 :                 A132 C |  locret_A134 :                 A134 C |
 locret_A282 :                 A282 C |  locret_A3A4 :                 A3A4 C |
 locret_A3D0 :                 A3D0 C |  locret_A618 :                 A618 C |
 locret_A72C :                 A72C C |  locret_A7CC :                 A7CC C |
 locret_A992 :                 A992 C |  locret_AAA2 :                 AAA2 C |
 locret_AAF6 :                 AAF6 C |  locret_AB00 :                 AB00 C |
 locret_AB48 :                 AB48 C |  locret_AC6A :                 AC6A C |
 locret_AC96 :                 AC96 C |  locret_AECA :                 AECA C |
 locret_AFDE :                 AFDE C |  locret_B07A :                 B07A C |
 locret_B386 :                 B386 C |  locret_B3DA :                 B3DA C |
 locret_B3E4 :                 B3E4 C |  locret_B414 :                 B414 C |
 locret_B416 :                 B416 C |  locret_B418 :                 B418 C |
 locret_B41A :                 B41A C |  locret_B41C :                 B41C C |
 locret_B41E :                 B41E C |  locret_B420 :                 B420 C |
 locret_BF82 :                 BF82 C |  locret_C038 :                 C038 C |
 locret_C106 :                 C106 C |  locret_C1C8 :                 C1C8 C |
 locret_C28C :                 C28C C |  locret_C744 :                 C744 C |
 locret_C9DC :                 C9DC C |  locret_CCC8 :                 CCC8 C |
 locret_CF8E :                 CF8E C |  locret_D202 :                 D202 C |
 locret_D392 :                 D392 C |  locret_D482 :                 D482 C |
 locret_D572 :                 D572 C |  locret_D65E :                 D65E C |
 locret_D76E :                 D76E C |  locret_D882 :                 D882 C |
 locret_D98E :                 D98E C |  locret_DA9E :                 DA9E C |
 locret_DB8A :                 DB8A C |  locret_DC7A :                 DC7A C |
 locret_DD6A :                 DD6A C |  locret_DE56 :                 DE56 C |
 locret_DF66 :                 DF66 C |  locret_E07A :                 E07A C |
 locret_E186 :                 E186 C |  locret_E296 :                 E296 C |
 locret_E2BC :                 E2BC C |  locret_E352 :                 E352 C |
 locret_E354 :                 E354 C |  locret_E3A6 :                 E3A6 C |
 locret_E4AA :                 E4AA C |  locret_E4FA :                 E4FA C |
 locret_E4FC :                 E4FC C |  locret_E5A4 :                 E5A4 C |
 locret_E64C :                 E64C C |  locret_E6F4 :                 E6F4 C |
 locret_E79C :                 E79C C |  locret_E844 :                 E844 C |
 locret_E8EC :                 E8EC C |  locret_E994 :                 E994 C |
 locret_EA3C :                 EA3C C |  locret_EBAA :                 EBAA C |
 locret_EBAC :                 EBAC C |  locret_ECE4 :                 ECE4 C |
 locret_ED34 :                 ED34 C |  locret_ED7A :                 ED7A C |
 locret_EDE2 :                 EDE2 C |  locret_EE4A :                 EE4A C |
 locret_EEB8 :                 EEB8 C |  locret_EF36 :                 EF36 C |
 locret_EFA2 :                 EFA2 C |  locret_F0C :                   F0C C |
 locret_F1C8 :                 F1C8 C |  locret_F20 :                   F20 C |
 locret_F236 :                 F236 C |  locret_F284 :                 F284 C |
 locret_F2F2 :                 F2F2 C |  locret_F3B4 :                 F3B4 C |
 locret_F536 :                 F536 C |  locret_F58A :                 F58A C |
 locret_F5C0 :                 F5C0 C |  locret_F63A :                 F63A C |
 locret_F6B6 :                 F6B6 C |  locret_F7E6 :                 F7E6 C |
 locret_F84 :                   F84 C |  locret_F8B0 :                 F8B0 C |
 locret_FA04 :                 FA04 C |  locret_FA0A :                 FA0A C |
 nA0 :                           8A - |  nA1 :                           96 - |
 nA2 :                           A2 - |  nA3 :                           AE - |
 nA4 :                           BA - |  nA5 :                           C6 - |
 nA6 :                           D2 - | *nA7 :                           DE - |
*nAb0 :                          89 - |  nAb1 :                          95 - |
*nAb2 :                          A1 - |  nAb3 :                          AD - |
*nAb4 :                          B9 - |  nAb5 :                          C5 - |
*nAb6 :                          D1 - | *nAb7 :                          DD - |
*nB0 :                           8C - | *nB1 :                           98 - |
 nB2 :                           A4 - |  nB3 :                           B0 - |
 nB4 :                           BC - |  nB5 :                           C8 - |
 nB6 :                           D4 - | *nBb0 :                          8B - |
 nBb1 :                          97 - |  nBb2 :                          A3 - |
 nBb3 :                          AF - |  nBb4 :                          BB - |
 nBb5 :                          C7 - |  nBb6 :                          D3 - |
*nBb7 :                          DF - | *nC0 :                           81 - |
*nC1 :                           8D - |  nC2 :                           99 - |
 nC3 :                           A5 - |  nC4 :                           B1 - |
 nC5 :                           BD - |  nC6 :                           C9 - |
*nC7 :                           D5 - | *nCs0 :                          82 - |
*nCs1 :                          8E - | *nCs2 :                          9A - |
*nCs3 :                          A6 - |  nCs4 :                          B2 - |
*nCs5 :                          BE - |  nCs6 :                          CA - |
 nCs7 :                          D6 - | *nD0 :                           83 - |
 nD1 :                           8F - |  nD2 :                           9B - |
 nD3 :                           A7 - |  nD4 :                           B3 - |
 nD5 :                           BF - |  nD6 :                           CB - |
 nD7 :                           D7 - | *nE0 :                           85 - |
 nE1 :                           91 - |  nE2 :                           9D - |
 nE3 :                           A9 - |  nE4 :                           B5 - |
 nE5 :                           C1 - |  nE6 :                           CD - |
 nE7 :                           D9 - | *nEb0 :                          84 - |
 nEb1 :                          90 - |  nEb2 :                          9C - |
 nEb3 :                          A8 - |  nEb4 :                          B4 - |
 nEb5 :                          C0 - | *nEb6 :                          CC - |
*nEb7 :                          D8 - | *nF0 :                           86 - |
 nF1 :                           92 - |  nF2 :                           9E - |
 nF3 :                           AA - |  nF4 :                           B6 - |
 nF5 :                           C2 - |  nF6 :                           CE - |
*nF7 :                           DA - | *nFs0 :                          87 - |
 nFs1 :                          93 - |  nFs2 :                          9F - |
 nFs3 :                          AB - |  nFs4 :                          B7 - |
*nFs5 :                          C3 - | *nFs6 :                          CF - |
*nFs7 :                          DB - | *nG0 :                           88 - |
 nG1 :                           94 - |  nG2 :                           A0 - |
 nG3 :                           AC - |  nG4 :                           B8 - |
 nG5 :                           C4 - | *nG6 :                           D0 - |
 nG7 :                           DC - | *nMaxPSG :                       C7 - |
*nMaxPSG1 :                      D3 - |  nMaxPSG2 :                      D4 - |
 nRst :                          80 - |  nullsub_1 :                   82B0 C |
 nullsub_2 :                   AAF8 C |  nullsub_3 :                   B3DC C |
 obMap :                         10 - |  off_1C6A :                    1C6A C |
 off_A1CE :                    A1CE C |  off_A206 :                    A206 C |
 off_A23E :                    A23E C |  off_B448 :                    B448 C |
 off_B840 :                    B840 C |  off_C84A :                    C84A C |
 panCenter :                     C0 - | *panCentre :                     C0 - |
 panLeft :                       80 - | *panNone :                        0 - |
 panRight :                      40 - |  psgdelta :                       C - |
 ptr_GM_Field :                501E C |  ptr_GM_Level :                5026 C |
 ptr_GM_LevelSelect :          503E C |  ptr_GM_Null :                 502E C |
 ptr_GM_Options :              504E C |  ptr_GM_Sega :                 500E C |
 ptr_GM_Title :                5016 C |  ptr_flgE0 :                    52E C |
 ptr_flgE1 :                    530 C |  ptr_flgE2 :                    532 C |
 ptr_flgE3 :                    534 C |  ptr_flgend :                   536 C |
 ptr_mus81 :                   1153 C |  ptr_mus82 :                   1155 C |
 ptr_mus83 :                   1157 C |  ptr_mus84 :                   1159 C |
 ptr_mus85 :                   115B C |  ptr_mus86 :                   115D C |
 ptr_musend :                  115F C |  ptr_sndA0 :                   115F C |
 ptr_sndA1 :                   1161 C |  ptr_sndA2 :                   1163 C |
 ptr_sndA3 :                   1165 C |  ptr_sndA4 :                   1167 C |
 ptr_sndA5 :                   1169 C |  ptr_sndA6 :                   116B C |
 ptr_sndA7 :                   116D C |  ptr_sndA8 :                   116F C |
 ptr_sndA9 :                   1171 C |  ptr_sndAA :                   1173 C |
 ptr_sndAB :                   1175 C |  ptr_sndAC :                   1177 C |
 ptr_sndAD :                   1179 C |  ptr_sndAE :                   117B C |
 ptr_sndAF :                   117D C |  ptr_sndD0 :                   117F C |
 ptr_sndD1 :                   1181 C |  ptr_sndD2 :                   1183 C |
 ptr_sndend :                  117F C | *ptr_specend :                 1185 C |
*sTone_01 :                       1 - |  sTone_02 :                       2 - |
 sTone_03 :                       3 - |  sTone_04 :                       4 - |
 sTone_05 :                       5 - | *sTone_06 :                       6 - |
*sTone_07 :                       7 - | *sTone_08 :                       8 - |
*sTone_09 :                       9 - | *sTone_0A :                       A - |
*sTone_0B :                       B - |  sTone_0C :                       C - |
*sfx_A2 :                        A2 - | *sfx_AA :                        AA - |
*sfx_AB :                        AB - | *sfx_AC :                        AC - |
*sfx_AD :                        AD - | *sfx_AE :                        AE - |
*sfx_AF :                        AF - | *sfx_Bomb :                      A3 - |
*sfx_BreakItem :                 A7 - | *sfx_Cash :                      A1 - |
 sfx_First :                     A0 - | *sfx_Jump :                      A0 - |
*sfx_Lamppost :                  A9 - |  sfx_Last :                      B0 - |
*sfx_Ring :                      A6 - | *sfx_RingLoss :                  A5 - |
*sfx_Skid :                      A4 - | *sfx_Spring :                    A8 - |
 smpsNoAttack :                  E7 - | *smpsPitch00 :                    0 - |
*smpsPitch01hi :                  C - | *smpsPitch01lo :                 F4 - |
*smpsPitch02hi :                 18 - | *smpsPitch02lo :                 E8 - |
*smpsPitch03hi :                 24 - | *smpsPitch03lo :                 DC - |
*smpsPitch04hi :                 30 - | *smpsPitch04lo :                 D0 - |
*smpsPitch05hi :                 3C - | *smpsPitch05lo :                 C4 - |
*smpsPitch06hi :                 48 - | *smpsPitch06lo :                 B8 - |
*smpsPitch07hi :                 54 - | *smpsPitch07lo :                 AC - |
*smpsPitch08hi :                 60 - | *smpsPitch08lo :                 A0 - |
*smpsPitch09hi :                 6C - | *smpsPitch09lo :                 94 - |
*smpsPitch10hi :                 78 - | *smpsPitch10lo :                 88 - |
 songStart :                  1831D - | *soundBankName :          "DACBank" - |
 soundBankStart :             20000 - | *spec_Bomb :                     D2 - |
*spec_Cash :                     D1 - |  spec_First :                    D0 - |
*spec_Jump :                     D0 - | *spec_Last :                     D0 - |
 sub_1272 :                    1272 C |  sub_129A :                    129A C |
 sub_12C2 :                    12C2 C |  sub_12FA :                    12FA C |
 sub_1312 :                    1312 C |  sub_1348 :                    1348 C |
 sub_1416 :                    1416 C |  sub_14E4 :                    14E4 C |
 sub_15D0 :                    15D0 C |  sub_1918 :                    1918 C |
 sub_1980 :                    1980 C |  sub_19DA :                    19DA C |
 sub_1A3C :                    1A3C C |  sub_1AC8 :                    1AC8 C |
 sub_1B3E :                    1B3E C |  sub_1BF6 :                    1BF6 C |
 sub_1DA8 :                    1DA8 C |  sub_41AA :                    41AA C |
 sub_42CE :                    42CE C |  sub_5090 :                    5090 C |
 sub_50B4 :                    50B4 C |  sub_568 :                      568 C |
 sub_5A6 :                      5A6 C |  sub_5E8 :                      5E8 C |
 sub_626 :                      626 C |  sub_6CF0 :                    6CF0 C |
 sub_6F26 :                    6F26 C |  sub_6FE :                      6FE C |
 sub_6FE.loop :                 708 C |  sub_72C :                      72C C |
 sub_75BC :                    75BC C |  sub_76E :                      76E C |
 sub_7EE :                      7EE C |  sub_7FB0 :                    7FB0 C |
 sub_8196 :                    8196 C |  sub_81F8 :                    81F8 C |
 sub_821C :                    821C C |  sub_82B2 :                    82B2 C |
 sub_860A :                    860A C |  sub_86A0 :                    86A0 C |
 sub_86BA :                    86BA C |  sub_86E :                      86E C |
 sub_86EA :                    86EA C |  sub_8736 :                    8736 C |
 sub_8ABC :                    8ABC C |  sub_8BFE :                    8BFE C |
 sub_8CCE :                    8CCE C |  sub_9098 :                    9098 C |
 sub_94F6 :                    94F6 C |  sub_9514 :                    9514 C |
 sub_96E :                      96E C |  sub_97B4 :                    97B4 C |
 sub_992 :                      992 C |  sub_996A :                    996A C |
 sub_9D30 :                    9D30 C |  sub_9D4 :                      9D4 C |
 sub_9DA2 :                    9DA2 C |  sub_9DC6 :                    9DC6 C |
 sub_9DFE :                    9DFE C |  sub_9E6E :                    9E6E C |
 sub_9E84 :                    9E84 C |  sub_9EF8 :                    9EF8 C |
 sub_9F3A :                    9F3A C |  sub_9F7C :                    9F7C C |
 sub_9F82 :                    9F82 C |  sub_A06 :                      A06 C |
 sub_A14E :                    A14E C |  sub_A178 :                    A178 C |
 sub_AA76 :                    AA76 C |  sub_AAA4 :                    AAA4 C |
 sub_ACA :                      ACA C |  sub_B35A :                    B35A C |
 sub_B388 :                    B388 C |  sub_B4EC :                    B4EC C |
 sub_B512 :                    B512 C |  sub_B548 :                    B548 C |
 sub_B580 :                    B580 C |  sub_B5B8 :                    B5B8 C |
 sub_B5F0 :                    B5F0 C |  sub_B610 :                    B610 C |
 sub_B632 :                    B632 C |  sub_B652 :                    B652 C |
 sub_B67C :                    B67C C |  sub_B6A2 :                    B6A2 C |
 sub_B6CC :                    B6CC C |  sub_B6FE :                    B6FE C |
 sub_B714 :                    B714 C |  sub_B734 :                    B734 C |
 sub_B756 :                    B756 C |  sub_B776 :                    B776 C |
 sub_B7A8 :                    B7A8 C |  sub_B874 :                    B874 C |
 sub_B8F0 :                    B8F0 C |  sub_B916 :                    B916 C |
 sub_B95C :                    B95C C |  sub_B9A4 :                    B9A4 C |
 sub_B9EC :                    B9EC C |  sub_BA34 :                    BA34 C |
 sub_BA4A :                    BA4A C |  sub_BA60 :                    BA60 C |
 sub_BA76 :                    BA76 C |  sub_BA94 :                    BA94 C |
 sub_BAB4 :                    BAB4 C |  sub_BADE :                    BADE C |
 sub_BB10 :                    BB10 C |  sub_BB26 :                    BB26 C |
 sub_BB46 :                    BB46 C |  sub_BB68 :                    BB68 C |
 sub_BB88 :                    BB88 C |  sub_BBBA :                    BBBA C |
*sub_BC90 :                    BC90 C |  sub_BE72 :                    BE72 C |
 sub_BF84 :                    BF84 C |  sub_C048 :                    C048 C |
 sub_C0A :                      C0A C |  sub_C116 :                    C116 C |
 sub_C1C :                      C1C C |  sub_C1DA :                    C1DA C |
 sub_C29E :                    C29E C |  sub_C2E :                      C2E C |
 sub_C48 :                      C48 C |  sub_C49A :                    C49A C |
 sub_C636 :                    C636 C |  sub_C6D4 :                    C6D4 C |
 sub_C8CA :                    C8CA C |  sub_C9DE :                    C9DE C |
 sub_CA3C :                    CA3C C |  sub_CA82 :                    CA82 C |
 sub_CBC0 :                    CBC0 C |  sub_CC5C :                    CC5C C |
 sub_CCCA :                    CCCA C |  sub_D1E0 :                    D1E0 C |
 sub_D20A :                    D20A C |  sub_D3A :                      D3A C |
 sub_DAA :                      DAA C |  sub_E3A8 :                    E3A8 C |
 sub_E4AC :                    E4AC C |  sub_EA3E :                    EA3E C |
 sub_EAA0 :                    EAA0 C |  sub_EADE :                    EADE C |
 sub_EB00 :                    EB00 C |  sub_EB22 :                    EB22 C |
 sub_EB8C :                    EB8C C |  sub_ED26 :                    ED26 C |
 sub_EFD4 :                    EFD4 C |  sub_F116 :                    F116 C |
 sub_F12C :                    F12C C |  sub_F136 :                    F136 C |
 sub_F1CA :                    F1CA C |  sub_F22C :                    F22C C |
 sub_F238 :                    F238 C |  sub_F286 :                    F286 C |
 sub_F328 :                    F328 C |  sub_F374 :                    F374 C |
 sub_F390 :                    F390 C |  sub_F45C :                    F45C C |
 sub_F472 :                    F472 C |  sub_F4E4 :                    F4E4 C |
 sub_F4FE :                    F4FE C |  sub_F4FE.wait :               F504 C |
 sub_F538 :                    F538 C |  sub_F538.wait :               F53E C |
 sub_F58C :                    F58C C |  sub_F904 :                    F904 C |
 sub_F94A :                    F94A C |  sub_FA44 :                    FA44 C |
*tracenum :                       0 - |  unk_0200 :        FFFFFFFFFFFF0200 C |
 unk_0400 :        FFFFFFFFFFFF0400 C |  unk_0600 :        FFFFFFFFFFFF0600 C |
 unk_0800 :        FFFFFFFFFFFF0800 C |  unk_0A00 :        FFFFFFFFFFFF0A00 C |
 unk_0B02 :        FFFFFFFFFFFF0B02 C |  unk_0B84 :        FFFFFFFFFFFF0B84 C |
 unk_0C86 :        FFFFFFFFFFFF0C86 C |  unk_42358 :                  42358 C |
 unk_4235E :                  4235E C |  unk_42364 :                  42364 C |
 unk_C800 :        FFFFFFFFFFFFC800 C |  unk_C812 :        FFFFFFFFFFFFC812 C |
 unk_C818 :        FFFFFFFFFFFFC818 C |  unk_C81E :        FFFFFFFFFFFFC81E C |
 unk_C824 :        FFFFFFFFFFFFC824 C |  unk_C82A :        FFFFFFFFFFFFC82A C |
 unk_C830 :        FFFFFFFFFFFFC830 C |  unk_C836 :        FFFFFFFFFFFFC836 C |
 unk_C936 :        FFFFFFFFFFFFC936 C |  unk_C937 :        FFFFFFFFFFFFC937 C |
 unk_C938 :        FFFFFFFFFFFFC938 C | *unk_D164 :                    D164 C |
*unk_D184 :                    D184 C |  unk_ECE6 :                    ECE6 C |
 v_128x128 :       FFFFFFFFFFFF0D08 C |  v_gamemode :      FFFFFFFFFFFFD822 - |
 v_lagger :        FFFFFFFFFFFFFFC9 - |  v_menu_soundid :  FFFFFFFFFFFFD82A - |
 v_ngfx_buffer :   FFFFFFFFFFFFD59A - |  v_startofram :    FFFFFFFFFFFF0000 C |
 v_subgamemode :   FFFFFFFFFFFFD824 - |  v_systemstack :   FFFFFFFFFFFF0200 C |
 v_text :          FFFFFFFFFFFFFFC0 - |  v_titleselect :   FFFFFFFFFFFFD826 - |
 v_vdpindex :      FFFFFFFFFFFFC832 C |  vcAM1 :                          0 - |
 vcAM2 :                          0 - |  vcAM3 :                          0 - |
 vcAM4 :                          0 - |  vcAR1 :                         1F - |
 vcAR2 :                         1F - |  vcAR3 :                         1F - |
 vcAR4 :                         1F - |  vcAlgorithm :                    4 - |
 vcCF1 :                          1 - |  vcCF2 :                          1 - |
 vcCF3 :                          1 - |  vcCF4 :                          1 - |
 vcD1R1 :                         0 - |  vcD1R1Unk :                      0 - |
 vcD1R2 :                         0 - |  vcD1R2Unk :                      0 - |
 vcD1R3 :                         0 - |  vcD1R3Unk :                      0 - |
 vcD1R4 :                         0 - |  vcD1R4Unk :                      0 - |
 vcD2R1 :                         0 - |  vcD2R2 :                         0 - |
 vcD2R3 :                         0 - |  vcD2R4 :                         0 - |
 vcDL1 :                          0 - |  vcDL2 :                          0 - |
 vcDL3 :                          0 - |  vcDL4 :                          0 - |
 vcDT1 :                          0 - |  vcDT2 :                          0 - |
 vcDT3 :                          0 - |  vcDT4 :                          0 - |
 vcFeedback :                     7 - |  vcRR1 :                          F - |
 vcRR2 :                          F - |  vcRR3 :                          F - |
 vcRR4 :                          F - |  vcRS1 :                          0 - |
 vcRS2 :                          0 - |  vcRS3 :                          0 - |
 vcRS4 :                          0 - |  vcTL1 :                         80 - |
 vcTL2 :                          0 - |  vcTL3 :                         80 - |
 vcTL4 :                          0 - |  vcTLMask1 :                      0 - |
 vcTLMask2 :                      0 - |  vcTLMask3 :                      0 - |
 vcTLMask4 :                      0 - |  vcUnusedBits :                   0 - |
 vdp_control_port :          C00004 - |  vdp_data_port :             C00000 - |
 word_4220 :                   4220 C |  word_42A0 :                   42A0 C |
 word_4368 :                   4368 C |  word_8C18 :                   8C18 C |
 word_8CBA :                   8CBA C |  word_8FB6 :                   8FB6 C |
 word_B4CC :                   B4CC C |  word_B550 :                   B550 C |
 word_B588 :                   B588 C |  word_B69A :                   B69A C |
 word_B6AC :                   B6AC C |  word_B6D6 :                   B6D6 C |
 word_B7C6 :                   B7C6 C |  word_B8D0 :                   B8D0 C |
 word_B91C :                   B91C C |  word_B964 :                   B964 C |
 word_B9AC :                   B9AC C |  word_B9F4 :                   B9F4 C |
 word_BABE :                   BABE C |  word_BBD8 :                   BBD8 C |
 word_BC56 :                   BC56 C |  word_BD36 :                   BD36 C |
 word_BD76 :                   BD76 C |  word_BDFC :                   BDFC C |
 word_E298 :                   E298 C |  word_E2A4 :                   E2A4 C |
 word_E2B0 :                   E2B0 C |  word_E334 :                   E334 C |
 word_E376 :                   E376 C |  word_E47A :                   E47A C |
 word_EDE4 :                   EDE4 C |  word_EDF4 :                   EDF4 C |
 word_EE00 :                   EE00 C |  word_EE4C :                   EE4C C |
 word_EE54 :                   EE54 C |  word_EEBA :                   EEBA C |
 word_EECA :                   EECA C |  word_EED2 :                   EED2 C |
 word_EF38 :                   EF38 C |  word_EF48 :                   EF48 C |
 word_EF50 :                   EF50 C |  word_EFA4 :                   EFA4 C |
 word_EFB4 :                   EFB4 C |  word_EFC4 :                   EFC4 C |
 z80_bus_request :           A11100 - | *z80_dac_sample :            A01FFF - |
*z80_dac_status :            A01FFD - |  z80_expansion_control :     A1000C - |
 z80_port_1_control :        A10008 - |  z80_ram :                   A00000 - |
 z80_ram_end :               A02000 - |  z80_reset :                 A11200 - |
 z80_version :               A10001 - |  zBankRegister :               6000 - |
 zCommunicationByte :          1C16 C |  zCurrentTempo :               1C14 C |
 zDACIndex :                   1C3C C |  zDAC_Sample :                 1FFF - |
 zDAC_Status :                 1FFD - |  zFM3Settings :                1C12 C |
*zFMInstrumentAMD1RTable :      4CE C | *zFMInstrumentD1LRRTable :      4D6 C |
*zFMInstrumentD2RTable :        4D2 C |  zFMInstrumentOperatorTable :   4C6 C |
 zFMInstrumentOperatorTable_End :                                       4DA C |
*zFMInstrumentRSARTable :       4CA C |  zFMInstrumentRegTable :        4C5 C |
 zFMInstrumentSSGEGTable :      4DE C |  zFMInstrumentSSGEGTable_End :  4E2 C |
 zFMInstrumentTLTable :         4DA C |  zFMInstrumentTLTable_End :     4DE C |
 zFadeDelay :                  1C0E C |  zFadeDelayTimeout :           1C0F C |
 zFadeOutTimeout :             1C0D C |  zHaltFlag :                   1C11 C |
 zMusicBank :                  1C04 C |  zMusicMode :                  1C2A C |
 zPSG :                        7F11 - |  zPauseFlag :                  1C10 C |
 zPlayDigitalAudio :            EE5 C |  zPlayMusic :                   557 C |
 zROMWindow :                  8000 - |  zSFXMode :                    1C22 C |
 zSFXSaveIndex :               1C32 C |  zSFXTempoDivider :            1C3B C |
 zSFXVoiceTblPtr :             1C39 C |  zSFX_FM3 :                    1E20 C |
*zSFX_FM3.AMSFMSPan :          1E2A C | *zSFX_FM3.DataPointerHigh :    1E24 C |
*zSFX_FM3.DataPointerLow :     1E23 C | *zSFX_FM3.Detune :             1E30 C |
*zSFX_FM3.DurationTimeout :    1E2B C | *zSFX_FM3.FMVolEnv :           1E38 C |
*zSFX_FM3.FMVolEnvMask :       1E39 C | *zSFX_FM3.FeedbackAlgo :       1E3B C |
*zSFX_FM3.FreqHigh :           1E2E C | *zSFX_FM3.FreqLow :            1E2D C |
*zSFX_FM3.HaveSSGEGFlag :      1E38 C | *zSFX_FM3.LoopCounters :       1E48 C |
*zSFX_FM3.ModEnvIndex :        1E45 C | *zSFX_FM3.ModEnvSens :         1E42 C |
*zSFX_FM3.ModulationCtrl :     1E27 C | *zSFX_FM3.ModulationDelta :    1E46 C |
*zSFX_FM3.ModulationPtrHigh :  1E41 C | *zSFX_FM3.ModulationPtrLow :   1E40 C |
*zSFX_FM3.ModulationSteps :    1E47 C | *zSFX_FM3.ModulationValHigh :  1E43 C |
*zSFX_FM3.ModulationValLow :   1E42 C | *zSFX_FM3.ModulationWait :     1E44 C |
*zSFX_FM3.NoteFillMaster :     1E3F C | *zSFX_FM3.NoteFillTimeout :    1E3E C |
*zSFX_FM3.PSGNoise :           1E3A C | *zSFX_FM3.PanAni1 :            1E31 C |
*zSFX_FM3.PanAni2 :            1E32 C | *zSFX_FM3.PanAni3 :            1E33 C |
*zSFX_FM3.PanAni4 :            1E34 C | *zSFX_FM3.PanAni5 :            1E35 C |
*zSFX_FM3.PanAni6 :            1E36 C | *zSFX_FM3.PlaybackControl :    1E20 C |
*zSFX_FM3.SSGEGPointerHigh :   1E3A C | *zSFX_FM3.SSGEGPointerLow :    1E39 C |
*zSFX_FM3.SavedDuration :      1E2C C | *zSFX_FM3.StackPointer :       1E29 C |
*zSFX_FM3.TLPtrHigh :          1E3D C | *zSFX_FM3.TLPtrLow :           1E3C C |
*zSFX_FM3.TempoDivider :       1E22 C | *zSFX_FM3.Transpose :          1E25 C |
*zSFX_FM3.VoiceControl :       1E21 C | *zSFX_FM3.VoiceIndex :         1E28 C |
*zSFX_FM3.VoiceSongID :        1E2F C | *zSFX_FM3.VoicesHigh :         1E4B C |
*zSFX_FM3.VoicesLow :          1E4A C | *zSFX_FM3.VolEnv :             1E37 C |
*zSFX_FM3.Volume :             1E26 C |  zSFX_FM4 :                    1E50 C |
*zSFX_FM4.AMSFMSPan :          1E5A C | *zSFX_FM4.DataPointerHigh :    1E54 C |
*zSFX_FM4.DataPointerLow :     1E53 C | *zSFX_FM4.Detune :             1E60 C |
*zSFX_FM4.DurationTimeout :    1E5B C | *zSFX_FM4.FMVolEnv :           1E68 C |
*zSFX_FM4.FMVolEnvMask :       1E69 C | *zSFX_FM4.FeedbackAlgo :       1E6B C |
*zSFX_FM4.FreqHigh :           1E5E C | *zSFX_FM4.FreqLow :            1E5D C |
*zSFX_FM4.HaveSSGEGFlag :      1E68 C | *zSFX_FM4.LoopCounters :       1E78 C |
*zSFX_FM4.ModEnvIndex :        1E75 C | *zSFX_FM4.ModEnvSens :         1E72 C |
*zSFX_FM4.ModulationCtrl :     1E57 C | *zSFX_FM4.ModulationDelta :    1E76 C |
*zSFX_FM4.ModulationPtrHigh :  1E71 C | *zSFX_FM4.ModulationPtrLow :   1E70 C |
*zSFX_FM4.ModulationSteps :    1E77 C | *zSFX_FM4.ModulationValHigh :  1E73 C |
*zSFX_FM4.ModulationValLow :   1E72 C | *zSFX_FM4.ModulationWait :     1E74 C |
*zSFX_FM4.NoteFillMaster :     1E6F C | *zSFX_FM4.NoteFillTimeout :    1E6E C |
*zSFX_FM4.PSGNoise :           1E6A C | *zSFX_FM4.PanAni1 :            1E61 C |
*zSFX_FM4.PanAni2 :            1E62 C | *zSFX_FM4.PanAni3 :            1E63 C |
*zSFX_FM4.PanAni4 :            1E64 C | *zSFX_FM4.PanAni5 :            1E65 C |
*zSFX_FM4.PanAni6 :            1E66 C | *zSFX_FM4.PlaybackControl :    1E50 C |
*zSFX_FM4.SSGEGPointerHigh :   1E6A C | *zSFX_FM4.SSGEGPointerLow :    1E69 C |
*zSFX_FM4.SavedDuration :      1E5C C | *zSFX_FM4.StackPointer :       1E59 C |
*zSFX_FM4.TLPtrHigh :          1E6D C | *zSFX_FM4.TLPtrLow :           1E6C C |
*zSFX_FM4.TempoDivider :       1E52 C | *zSFX_FM4.Transpose :          1E55 C |
*zSFX_FM4.VoiceControl :       1E51 C | *zSFX_FM4.VoiceIndex :         1E58 C |
*zSFX_FM4.VoiceSongID :        1E5F C | *zSFX_FM4.VoicesHigh :         1E7B C |
*zSFX_FM4.VoicesLow :          1E7A C | *zSFX_FM4.VolEnv :             1E67 C |
*zSFX_FM4.Volume :             1E56 C |  zSFX_FM5 :                    1E80 C |
*zSFX_FM5.AMSFMSPan :          1E8A C | *zSFX_FM5.DataPointerHigh :    1E84 C |
*zSFX_FM5.DataPointerLow :     1E83 C | *zSFX_FM5.Detune :             1E90 C |
*zSFX_FM5.DurationTimeout :    1E8B C | *zSFX_FM5.FMVolEnv :           1E98 C |
*zSFX_FM5.FMVolEnvMask :       1E99 C | *zSFX_FM5.FeedbackAlgo :       1E9B C |
*zSFX_FM5.FreqHigh :           1E8E C | *zSFX_FM5.FreqLow :            1E8D C |
*zSFX_FM5.HaveSSGEGFlag :      1E98 C | *zSFX_FM5.LoopCounters :       1EA8 C |
*zSFX_FM5.ModEnvIndex :        1EA5 C | *zSFX_FM5.ModEnvSens :         1EA2 C |
*zSFX_FM5.ModulationCtrl :     1E87 C | *zSFX_FM5.ModulationDelta :    1EA6 C |
*zSFX_FM5.ModulationPtrHigh :  1EA1 C | *zSFX_FM5.ModulationPtrLow :   1EA0 C |
*zSFX_FM5.ModulationSteps :    1EA7 C | *zSFX_FM5.ModulationValHigh :  1EA3 C |
*zSFX_FM5.ModulationValLow :   1EA2 C | *zSFX_FM5.ModulationWait :     1EA4 C |
*zSFX_FM5.NoteFillMaster :     1E9F C | *zSFX_FM5.NoteFillTimeout :    1E9E C |
*zSFX_FM5.PSGNoise :           1E9A C | *zSFX_FM5.PanAni1 :            1E91 C |
*zSFX_FM5.PanAni2 :            1E92 C | *zSFX_FM5.PanAni3 :            1E93 C |
*zSFX_FM5.PanAni4 :            1E94 C | *zSFX_FM5.PanAni5 :            1E95 C |
*zSFX_FM5.PanAni6 :            1E96 C | *zSFX_FM5.PlaybackControl :    1E80 C |
*zSFX_FM5.SSGEGPointerHigh :   1E9A C | *zSFX_FM5.SSGEGPointerLow :    1E99 C |
*zSFX_FM5.SavedDuration :      1E8C C | *zSFX_FM5.StackPointer :       1E89 C |
*zSFX_FM5.TLPtrHigh :          1E9D C | *zSFX_FM5.TLPtrLow :           1E9C C |
*zSFX_FM5.TempoDivider :       1E82 C | *zSFX_FM5.Transpose :          1E85 C |
*zSFX_FM5.VoiceControl :       1E81 C | *zSFX_FM5.VoiceIndex :         1E88 C |
*zSFX_FM5.VoiceSongID :        1E8F C | *zSFX_FM5.VoicesHigh :         1EAB C |
*zSFX_FM5.VoicesLow :          1EAA C | *zSFX_FM5.VolEnv :             1E97 C |
*zSFX_FM5.Volume :             1E86 C |  zSFX_FM6 :                    1EB0 C |
*zSFX_FM6.AMSFMSPan :          1EBA C | *zSFX_FM6.DataPointerHigh :    1EB4 C |
*zSFX_FM6.DataPointerLow :     1EB3 C | *zSFX_FM6.Detune :             1EC0 C |
*zSFX_FM6.DurationTimeout :    1EBB C | *zSFX_FM6.FMVolEnv :           1EC8 C |
*zSFX_FM6.FMVolEnvMask :       1EC9 C | *zSFX_FM6.FeedbackAlgo :       1ECB C |
*zSFX_FM6.FreqHigh :           1EBE C | *zSFX_FM6.FreqLow :            1EBD C |
*zSFX_FM6.HaveSSGEGFlag :      1EC8 C | *zSFX_FM6.LoopCounters :       1ED8 C |
*zSFX_FM6.ModEnvIndex :        1ED5 C | *zSFX_FM6.ModEnvSens :         1ED2 C |
*zSFX_FM6.ModulationCtrl :     1EB7 C | *zSFX_FM6.ModulationDelta :    1ED6 C |
*zSFX_FM6.ModulationPtrHigh :  1ED1 C | *zSFX_FM6.ModulationPtrLow :   1ED0 C |
*zSFX_FM6.ModulationSteps :    1ED7 C | *zSFX_FM6.ModulationValHigh :  1ED3 C |
*zSFX_FM6.ModulationValLow :   1ED2 C | *zSFX_FM6.ModulationWait :     1ED4 C |
*zSFX_FM6.NoteFillMaster :     1ECF C | *zSFX_FM6.NoteFillTimeout :    1ECE C |
*zSFX_FM6.PSGNoise :           1ECA C | *zSFX_FM6.PanAni1 :            1EC1 C |
*zSFX_FM6.PanAni2 :            1EC2 C | *zSFX_FM6.PanAni3 :            1EC3 C |
*zSFX_FM6.PanAni4 :            1EC4 C | *zSFX_FM6.PanAni5 :            1EC5 C |
*zSFX_FM6.PanAni6 :            1EC6 C | *zSFX_FM6.PlaybackControl :    1EB0 C |
*zSFX_FM6.SSGEGPointerHigh :   1ECA C | *zSFX_FM6.SSGEGPointerLow :    1EC9 C |
*zSFX_FM6.SavedDuration :      1EBC C | *zSFX_FM6.StackPointer :       1EB9 C |
*zSFX_FM6.TLPtrHigh :          1ECD C | *zSFX_FM6.TLPtrLow :           1ECC C |
*zSFX_FM6.TempoDivider :       1EB2 C | *zSFX_FM6.Transpose :          1EB5 C |
*zSFX_FM6.VoiceControl :       1EB1 C | *zSFX_FM6.VoiceIndex :         1EB8 C |
*zSFX_FM6.VoiceSongID :        1EBF C | *zSFX_FM6.VoicesHigh :         1EDB C |
*zSFX_FM6.VoicesLow :          1EDA C | *zSFX_FM6.VolEnv :             1EC7 C |
*zSFX_FM6.Volume :             1EB6 C |  zSFX_PSG1 :                   1EE0 C |
*zSFX_PSG1.AMSFMSPan :         1EEA C | *zSFX_PSG1.DataPointerHigh :   1EE4 C |
*zSFX_PSG1.DataPointerLow :    1EE3 C | *zSFX_PSG1.Detune :            1EF0 C |
*zSFX_PSG1.DurationTimeout :   1EEB C | *zSFX_PSG1.FMVolEnv :          1EF8 C |
*zSFX_PSG1.FMVolEnvMask :      1EF9 C | *zSFX_PSG1.FeedbackAlgo :      1EFB C |
*zSFX_PSG1.FreqHigh :          1EEE C | *zSFX_PSG1.FreqLow :           1EED C |
*zSFX_PSG1.HaveSSGEGFlag :     1EF8 C | *zSFX_PSG1.LoopCounters :      1F08 C |
*zSFX_PSG1.ModEnvIndex :       1F05 C | *zSFX_PSG1.ModEnvSens :        1F02 C |
*zSFX_PSG1.ModulationCtrl :    1EE7 C | *zSFX_PSG1.ModulationDelta :   1F06 C |
*zSFX_PSG1.ModulationPtrHigh : 1F01 C | *zSFX_PSG1.ModulationPtrLow :  1F00 C |
*zSFX_PSG1.ModulationSteps :   1F07 C | *zSFX_PSG1.ModulationValHigh : 1F03 C |
*zSFX_PSG1.ModulationValLow :  1F02 C | *zSFX_PSG1.ModulationWait :    1F04 C |
*zSFX_PSG1.NoteFillMaster :    1EFF C | *zSFX_PSG1.NoteFillTimeout :   1EFE C |
*zSFX_PSG1.PSGNoise :          1EFA C | *zSFX_PSG1.PanAni1 :           1EF1 C |
*zSFX_PSG1.PanAni2 :           1EF2 C | *zSFX_PSG1.PanAni3 :           1EF3 C |
*zSFX_PSG1.PanAni4 :           1EF4 C | *zSFX_PSG1.PanAni5 :           1EF5 C |
*zSFX_PSG1.PanAni6 :           1EF6 C | *zSFX_PSG1.PlaybackControl :   1EE0 C |
*zSFX_PSG1.SSGEGPointerHigh :  1EFA C | *zSFX_PSG1.SSGEGPointerLow :   1EF9 C |
*zSFX_PSG1.SavedDuration :     1EEC C | *zSFX_PSG1.StackPointer :      1EE9 C |
*zSFX_PSG1.TLPtrHigh :         1EFD C | *zSFX_PSG1.TLPtrLow :          1EFC C |
*zSFX_PSG1.TempoDivider :      1EE2 C | *zSFX_PSG1.Transpose :         1EE5 C |
*zSFX_PSG1.VoiceControl :      1EE1 C | *zSFX_PSG1.VoiceIndex :        1EE8 C |
*zSFX_PSG1.VoiceSongID :       1EEF C | *zSFX_PSG1.VoicesHigh :        1F0B C |
*zSFX_PSG1.VoicesLow :         1F0A C | *zSFX_PSG1.VolEnv :            1EF7 C |
*zSFX_PSG1.Volume :            1EE6 C |  zSFX_PSG2 :                   1F10 C |
*zSFX_PSG2.AMSFMSPan :         1F1A C | *zSFX_PSG2.DataPointerHigh :   1F14 C |
*zSFX_PSG2.DataPointerLow :    1F13 C | *zSFX_PSG2.Detune :            1F20 C |
*zSFX_PSG2.DurationTimeout :   1F1B C | *zSFX_PSG2.FMVolEnv :          1F28 C |
*zSFX_PSG2.FMVolEnvMask :      1F29 C | *zSFX_PSG2.FeedbackAlgo :      1F2B C |
*zSFX_PSG2.FreqHigh :          1F1E C | *zSFX_PSG2.FreqLow :           1F1D C |
*zSFX_PSG2.HaveSSGEGFlag :     1F28 C | *zSFX_PSG2.LoopCounters :      1F38 C |
*zSFX_PSG2.ModEnvIndex :       1F35 C | *zSFX_PSG2.ModEnvSens :        1F32 C |
*zSFX_PSG2.ModulationCtrl :    1F17 C | *zSFX_PSG2.ModulationDelta :   1F36 C |
*zSFX_PSG2.ModulationPtrHigh : 1F31 C | *zSFX_PSG2.ModulationPtrLow :  1F30 C |
*zSFX_PSG2.ModulationSteps :   1F37 C | *zSFX_PSG2.ModulationValHigh : 1F33 C |
*zSFX_PSG2.ModulationValLow :  1F32 C | *zSFX_PSG2.ModulationWait :    1F34 C |
*zSFX_PSG2.NoteFillMaster :    1F2F C | *zSFX_PSG2.NoteFillTimeout :   1F2E C |
*zSFX_PSG2.PSGNoise :          1F2A C | *zSFX_PSG2.PanAni1 :           1F21 C |
*zSFX_PSG2.PanAni2 :           1F22 C | *zSFX_PSG2.PanAni3 :           1F23 C |
*zSFX_PSG2.PanAni4 :           1F24 C | *zSFX_PSG2.PanAni5 :           1F25 C |
*zSFX_PSG2.PanAni6 :           1F26 C | *zSFX_PSG2.PlaybackControl :   1F10 C |
*zSFX_PSG2.SSGEGPointerHigh :  1F2A C | *zSFX_PSG2.SSGEGPointerLow :   1F29 C |
*zSFX_PSG2.SavedDuration :     1F1C C | *zSFX_PSG2.StackPointer :      1F19 C |
*zSFX_PSG2.TLPtrHigh :         1F2D C | *zSFX_PSG2.TLPtrLow :          1F2C C |
*zSFX_PSG2.TempoDivider :      1F12 C | *zSFX_PSG2.Transpose :         1F15 C |
*zSFX_PSG2.VoiceControl :      1F11 C | *zSFX_PSG2.VoiceIndex :        1F18 C |
*zSFX_PSG2.VoiceSongID :       1F1F C | *zSFX_PSG2.VoicesHigh :        1F3B C |
*zSFX_PSG2.VoicesLow :         1F3A C | *zSFX_PSG2.VolEnv :            1F27 C |
*zSFX_PSG2.Volume :            1F16 C |  zSFX_PSG3 :                   1F40 C |
*zSFX_PSG3.AMSFMSPan :         1F4A C | *zSFX_PSG3.DataPointerHigh :   1F44 C |
*zSFX_PSG3.DataPointerLow :    1F43 C | *zSFX_PSG3.Detune :            1F50 C |
*zSFX_PSG3.DurationTimeout :   1F4B C | *zSFX_PSG3.FMVolEnv :          1F58 C |
*zSFX_PSG3.FMVolEnvMask :      1F59 C | *zSFX_PSG3.FeedbackAlgo :      1F5B C |
*zSFX_PSG3.FreqHigh :          1F4E C | *zSFX_PSG3.FreqLow :           1F4D C |
*zSFX_PSG3.HaveSSGEGFlag :     1F58 C | *zSFX_PSG3.LoopCounters :      1F68 C |
*zSFX_PSG3.ModEnvIndex :       1F65 C | *zSFX_PSG3.ModEnvSens :        1F62 C |
*zSFX_PSG3.ModulationCtrl :    1F47 C | *zSFX_PSG3.ModulationDelta :   1F66 C |
*zSFX_PSG3.ModulationPtrHigh : 1F61 C | *zSFX_PSG3.ModulationPtrLow :  1F60 C |
*zSFX_PSG3.ModulationSteps :   1F67 C | *zSFX_PSG3.ModulationValHigh : 1F63 C |
*zSFX_PSG3.ModulationValLow :  1F62 C | *zSFX_PSG3.ModulationWait :    1F64 C |
*zSFX_PSG3.NoteFillMaster :    1F5F C | *zSFX_PSG3.NoteFillTimeout :   1F5E C |
*zSFX_PSG3.PSGNoise :          1F5A C | *zSFX_PSG3.PanAni1 :           1F51 C |
*zSFX_PSG3.PanAni2 :           1F52 C | *zSFX_PSG3.PanAni3 :           1F53 C |
*zSFX_PSG3.PanAni4 :           1F54 C | *zSFX_PSG3.PanAni5 :           1F55 C |
*zSFX_PSG3.PanAni6 :           1F56 C | *zSFX_PSG3.PlaybackControl :   1F40 C |
*zSFX_PSG3.SSGEGPointerHigh :  1F5A C | *zSFX_PSG3.SSGEGPointerLow :   1F59 C |
*zSFX_PSG3.SavedDuration :     1F4C C | *zSFX_PSG3.StackPointer :      1F49 C |
*zSFX_PSG3.TLPtrHigh :         1F5D C | *zSFX_PSG3.TLPtrLow :          1F5C C |
*zSFX_PSG3.TempoDivider :      1F42 C | *zSFX_PSG3.Transpose :         1F45 C |
*zSFX_PSG3.VoiceControl :      1F41 C | *zSFX_PSG3.VoiceIndex :        1F48 C |
*zSFX_PSG3.VoiceSongID :       1F4F C | *zSFX_PSG3.VoicesHigh :        1F6B C |
*zSFX_PSG3.VoicesLow :         1F6A C | *zSFX_PSG3.VolEnv :            1F57 C |
*zSFX_PSG3.Volume :            1F46 C | *zSongDAC :                    1C40 C |
*zSongDAC.AMSFMSPan :          1C4A C | *zSongDAC.DataPointerHigh :    1C44 C |
*zSongDAC.DataPointerLow :     1C43 C | *zSongDAC.Detune :             1C50 C |
*zSongDAC.DurationTimeout :    1C4B C | *zSongDAC.FMVolEnv :           1C58 C |
*zSongDAC.FMVolEnvMask :       1C59 C | *zSongDAC.FeedbackAlgo :       1C5B C |
*zSongDAC.FreqHigh :           1C4E C | *zSongDAC.FreqLow :            1C4D C |
*zSongDAC.HaveSSGEGFlag :      1C58 C | *zSongDAC.LoopCounters :       1C68 C |
*zSongDAC.ModEnvIndex :        1C65 C | *zSongDAC.ModEnvSens :         1C62 C |
*zSongDAC.ModulationCtrl :     1C47 C | *zSongDAC.ModulationDelta :    1C66 C |
*zSongDAC.ModulationPtrHigh :  1C61 C | *zSongDAC.ModulationPtrLow :   1C60 C |
*zSongDAC.ModulationSteps :    1C67 C | *zSongDAC.ModulationValHigh :  1C63 C |
*zSongDAC.ModulationValLow :   1C62 C | *zSongDAC.ModulationWait :     1C64 C |
*zSongDAC.NoteFillMaster :     1C5F C | *zSongDAC.NoteFillTimeout :    1C5E C |
*zSongDAC.PSGNoise :           1C5A C | *zSongDAC.PanAni1 :            1C51 C |
*zSongDAC.PanAni2 :            1C52 C | *zSongDAC.PanAni3 :            1C53 C |
*zSongDAC.PanAni4 :            1C54 C | *zSongDAC.PanAni5 :            1C55 C |
*zSongDAC.PanAni6 :            1C56 C | *zSongDAC.PlaybackControl :    1C40 C |
*zSongDAC.SSGEGPointerHigh :   1C5A C | *zSongDAC.SSGEGPointerLow :    1C59 C |
*zSongDAC.SavedDuration :      1C4C C | *zSongDAC.StackPointer :       1C49 C |
*zSongDAC.TLPtrHigh :          1C5D C | *zSongDAC.TLPtrLow :           1C5C C |
*zSongDAC.TempoDivider :       1C42 C | *zSongDAC.Transpose :          1C45 C |
*zSongDAC.VoiceControl :       1C41 C | *zSongDAC.VoiceIndex :         1C48 C |
*zSongDAC.VoiceSongID :        1C4F C | *zSongDAC.VoicesHigh :         1C6B C |
*zSongDAC.VoicesLow :          1C6A C | *zSongDAC.VolEnv :             1C57 C |
*zSongDAC.Volume :             1C46 C |  zSongFM1 :                    1C70 C |
*zSongFM1.AMSFMSPan :          1C7A C | *zSongFM1.DataPointerHigh :    1C74 C |
*zSongFM1.DataPointerLow :     1C73 C | *zSongFM1.Detune :             1C80 C |
*zSongFM1.DurationTimeout :    1C7B C | *zSongFM1.FMVolEnv :           1C88 C |
*zSongFM1.FMVolEnvMask :       1C89 C | *zSongFM1.FeedbackAlgo :       1C8B C |
*zSongFM1.FreqHigh :           1C7E C | *zSongFM1.FreqLow :            1C7D C |
*zSongFM1.HaveSSGEGFlag :      1C88 C | *zSongFM1.LoopCounters :       1C98 C |
*zSongFM1.ModEnvIndex :        1C95 C | *zSongFM1.ModEnvSens :         1C92 C |
*zSongFM1.ModulationCtrl :     1C77 C | *zSongFM1.ModulationDelta :    1C96 C |
*zSongFM1.ModulationPtrHigh :  1C91 C | *zSongFM1.ModulationPtrLow :   1C90 C |
*zSongFM1.ModulationSteps :    1C97 C | *zSongFM1.ModulationValHigh :  1C93 C |
*zSongFM1.ModulationValLow :   1C92 C | *zSongFM1.ModulationWait :     1C94 C |
*zSongFM1.NoteFillMaster :     1C8F C | *zSongFM1.NoteFillTimeout :    1C8E C |
*zSongFM1.PSGNoise :           1C8A C | *zSongFM1.PanAni1 :            1C81 C |
*zSongFM1.PanAni2 :            1C82 C | *zSongFM1.PanAni3 :            1C83 C |
*zSongFM1.PanAni4 :            1C84 C | *zSongFM1.PanAni5 :            1C85 C |
*zSongFM1.PanAni6 :            1C86 C | *zSongFM1.PlaybackControl :    1C70 C |
*zSongFM1.SSGEGPointerHigh :   1C8A C | *zSongFM1.SSGEGPointerLow :    1C89 C |
*zSongFM1.SavedDuration :      1C7C C | *zSongFM1.StackPointer :       1C79 C |
*zSongFM1.TLPtrHigh :          1C8D C | *zSongFM1.TLPtrLow :           1C8C C |
*zSongFM1.TempoDivider :       1C72 C | *zSongFM1.Transpose :          1C75 C |
*zSongFM1.VoiceControl :       1C71 C | *zSongFM1.VoiceIndex :         1C78 C |
*zSongFM1.VoiceSongID :        1C7F C | *zSongFM1.VoicesHigh :         1C9B C |
*zSongFM1.VoicesLow :          1C9A C | *zSongFM1.VolEnv :             1C87 C |
*zSongFM1.Volume :             1C76 C | *zSongFM2 :                    1CA0 C |
*zSongFM2.AMSFMSPan :          1CAA C | *zSongFM2.DataPointerHigh :    1CA4 C |
*zSongFM2.DataPointerLow :     1CA3 C | *zSongFM2.Detune :             1CB0 C |
*zSongFM2.DurationTimeout :    1CAB C | *zSongFM2.FMVolEnv :           1CB8 C |
*zSongFM2.FMVolEnvMask :       1CB9 C | *zSongFM2.FeedbackAlgo :       1CBB C |
*zSongFM2.FreqHigh :           1CAE C | *zSongFM2.FreqLow :            1CAD C |
*zSongFM2.HaveSSGEGFlag :      1CB8 C | *zSongFM2.LoopCounters :       1CC8 C |
*zSongFM2.ModEnvIndex :        1CC5 C | *zSongFM2.ModEnvSens :         1CC2 C |
*zSongFM2.ModulationCtrl :     1CA7 C | *zSongFM2.ModulationDelta :    1CC6 C |
*zSongFM2.ModulationPtrHigh :  1CC1 C | *zSongFM2.ModulationPtrLow :   1CC0 C |
*zSongFM2.ModulationSteps :    1CC7 C | *zSongFM2.ModulationValHigh :  1CC3 C |
*zSongFM2.ModulationValLow :   1CC2 C | *zSongFM2.ModulationWait :     1CC4 C |
*zSongFM2.NoteFillMaster :     1CBF C | *zSongFM2.NoteFillTimeout :    1CBE C |
*zSongFM2.PSGNoise :           1CBA C | *zSongFM2.PanAni1 :            1CB1 C |
*zSongFM2.PanAni2 :            1CB2 C | *zSongFM2.PanAni3 :            1CB3 C |
*zSongFM2.PanAni4 :            1CB4 C | *zSongFM2.PanAni5 :            1CB5 C |
*zSongFM2.PanAni6 :            1CB6 C | *zSongFM2.PlaybackControl :    1CA0 C |
*zSongFM2.SSGEGPointerHigh :   1CBA C | *zSongFM2.SSGEGPointerLow :    1CB9 C |
*zSongFM2.SavedDuration :      1CAC C | *zSongFM2.StackPointer :       1CA9 C |
*zSongFM2.TLPtrHigh :          1CBD C | *zSongFM2.TLPtrLow :           1CBC C |
*zSongFM2.TempoDivider :       1CA2 C | *zSongFM2.Transpose :          1CA5 C |
*zSongFM2.VoiceControl :       1CA1 C | *zSongFM2.VoiceIndex :         1CA8 C |
*zSongFM2.VoiceSongID :        1CAF C | *zSongFM2.VoicesHigh :         1CCB C |
*zSongFM2.VoicesLow :          1CCA C | *zSongFM2.VolEnv :             1CB7 C |
*zSongFM2.Volume :             1CA6 C |  zSongFM3 :                    1CD0 C |
*zSongFM3.AMSFMSPan :          1CDA C | *zSongFM3.DataPointerHigh :    1CD4 C |
*zSongFM3.DataPointerLow :     1CD3 C | *zSongFM3.Detune :             1CE0 C |
*zSongFM3.DurationTimeout :    1CDB C | *zSongFM3.FMVolEnv :           1CE8 C |
*zSongFM3.FMVolEnvMask :       1CE9 C | *zSongFM3.FeedbackAlgo :       1CEB C |
*zSongFM3.FreqHigh :           1CDE C | *zSongFM3.FreqLow :            1CDD C |
*zSongFM3.HaveSSGEGFlag :      1CE8 C | *zSongFM3.LoopCounters :       1CF8 C |
*zSongFM3.ModEnvIndex :        1CF5 C | *zSongFM3.ModEnvSens :         1CF2 C |
*zSongFM3.ModulationCtrl :     1CD7 C | *zSongFM3.ModulationDelta :    1CF6 C |
*zSongFM3.ModulationPtrHigh :  1CF1 C | *zSongFM3.ModulationPtrLow :   1CF0 C |
*zSongFM3.ModulationSteps :    1CF7 C | *zSongFM3.ModulationValHigh :  1CF3 C |
*zSongFM3.ModulationValLow :   1CF2 C | *zSongFM3.ModulationWait :     1CF4 C |
*zSongFM3.NoteFillMaster :     1CEF C | *zSongFM3.NoteFillTimeout :    1CEE C |
*zSongFM3.PSGNoise :           1CEA C | *zSongFM3.PanAni1 :            1CE1 C |
*zSongFM3.PanAni2 :            1CE2 C | *zSongFM3.PanAni3 :            1CE3 C |
*zSongFM3.PanAni4 :            1CE4 C | *zSongFM3.PanAni5 :            1CE5 C |
*zSongFM3.PanAni6 :            1CE6 C | *zSongFM3.PlaybackControl :    1CD0 C |
*zSongFM3.SSGEGPointerHigh :   1CEA C | *zSongFM3.SSGEGPointerLow :    1CE9 C |
*zSongFM3.SavedDuration :      1CDC C | *zSongFM3.StackPointer :       1CD9 C |
*zSongFM3.TLPtrHigh :          1CED C | *zSongFM3.TLPtrLow :           1CEC C |
*zSongFM3.TempoDivider :       1CD2 C | *zSongFM3.Transpose :          1CD5 C |
*zSongFM3.VoiceControl :       1CD1 C | *zSongFM3.VoiceIndex :         1CD8 C |
*zSongFM3.VoiceSongID :        1CDF C | *zSongFM3.VoicesHigh :         1CFB C |
*zSongFM3.VoicesLow :          1CFA C | *zSongFM3.VolEnv :             1CE7 C |
*zSongFM3.Volume :             1CD6 C |  zSongFM4 :                    1D00 C |
*zSongFM4.AMSFMSPan :          1D0A C | *zSongFM4.DataPointerHigh :    1D04 C |
*zSongFM4.DataPointerLow :     1D03 C | *zSongFM4.Detune :             1D10 C |
*zSongFM4.DurationTimeout :    1D0B C | *zSongFM4.FMVolEnv :           1D18 C |
*zSongFM4.FMVolEnvMask :       1D19 C | *zSongFM4.FeedbackAlgo :       1D1B C |
*zSongFM4.FreqHigh :           1D0E C | *zSongFM4.FreqLow :            1D0D C |
*zSongFM4.HaveSSGEGFlag :      1D18 C | *zSongFM4.LoopCounters :       1D28 C |
*zSongFM4.ModEnvIndex :        1D25 C | *zSongFM4.ModEnvSens :         1D22 C |
*zSongFM4.ModulationCtrl :     1D07 C | *zSongFM4.ModulationDelta :    1D26 C |
*zSongFM4.ModulationPtrHigh :  1D21 C | *zSongFM4.ModulationPtrLow :   1D20 C |
*zSongFM4.ModulationSteps :    1D27 C | *zSongFM4.ModulationValHigh :  1D23 C |
*zSongFM4.ModulationValLow :   1D22 C | *zSongFM4.ModulationWait :     1D24 C |
*zSongFM4.NoteFillMaster :     1D1F C | *zSongFM4.NoteFillTimeout :    1D1E C |
*zSongFM4.PSGNoise :           1D1A C | *zSongFM4.PanAni1 :            1D11 C |
*zSongFM4.PanAni2 :            1D12 C | *zSongFM4.PanAni3 :            1D13 C |
*zSongFM4.PanAni4 :            1D14 C | *zSongFM4.PanAni5 :            1D15 C |
*zSongFM4.PanAni6 :            1D16 C | *zSongFM4.PlaybackControl :    1D00 C |
*zSongFM4.SSGEGPointerHigh :   1D1A C | *zSongFM4.SSGEGPointerLow :    1D19 C |
*zSongFM4.SavedDuration :      1D0C C | *zSongFM4.StackPointer :       1D09 C |
*zSongFM4.TLPtrHigh :          1D1D C | *zSongFM4.TLPtrLow :           1D1C C |
*zSongFM4.TempoDivider :       1D02 C | *zSongFM4.Transpose :          1D05 C |
*zSongFM4.VoiceControl :       1D01 C | *zSongFM4.VoiceIndex :         1D08 C |
*zSongFM4.VoiceSongID :        1D0F C | *zSongFM4.VoicesHigh :         1D2B C |
*zSongFM4.VoicesLow :          1D2A C | *zSongFM4.VolEnv :             1D17 C |
*zSongFM4.Volume :             1D06 C |  zSongFM5 :                    1D30 C |
*zSongFM5.AMSFMSPan :          1D3A C | *zSongFM5.DataPointerHigh :    1D34 C |
*zSongFM5.DataPointerLow :     1D33 C | *zSongFM5.Detune :             1D40 C |
*zSongFM5.DurationTimeout :    1D3B C | *zSongFM5.FMVolEnv :           1D48 C |
*zSongFM5.FMVolEnvMask :       1D49 C | *zSongFM5.FeedbackAlgo :       1D4B C |
*zSongFM5.FreqHigh :           1D3E C | *zSongFM5.FreqLow :            1D3D C |
*zSongFM5.HaveSSGEGFlag :      1D48 C | *zSongFM5.LoopCounters :       1D58 C |
*zSongFM5.ModEnvIndex :        1D55 C | *zSongFM5.ModEnvSens :         1D52 C |
*zSongFM5.ModulationCtrl :     1D37 C | *zSongFM5.ModulationDelta :    1D56 C |
*zSongFM5.ModulationPtrHigh :  1D51 C | *zSongFM5.ModulationPtrLow :   1D50 C |
*zSongFM5.ModulationSteps :    1D57 C | *zSongFM5.ModulationValHigh :  1D53 C |
*zSongFM5.ModulationValLow :   1D52 C | *zSongFM5.ModulationWait :     1D54 C |
*zSongFM5.NoteFillMaster :     1D4F C | *zSongFM5.NoteFillTimeout :    1D4E C |
*zSongFM5.PSGNoise :           1D4A C | *zSongFM5.PanAni1 :            1D41 C |
*zSongFM5.PanAni2 :            1D42 C | *zSongFM5.PanAni3 :            1D43 C |
*zSongFM5.PanAni4 :            1D44 C | *zSongFM5.PanAni5 :            1D45 C |
*zSongFM5.PanAni6 :            1D46 C | *zSongFM5.PlaybackControl :    1D30 C |
*zSongFM5.SSGEGPointerHigh :   1D4A C | *zSongFM5.SSGEGPointerLow :    1D49 C |
*zSongFM5.SavedDuration :      1D3C C | *zSongFM5.StackPointer :       1D39 C |
*zSongFM5.TLPtrHigh :          1D4D C | *zSongFM5.TLPtrLow :           1D4C C |
*zSongFM5.TempoDivider :       1D32 C | *zSongFM5.Transpose :          1D35 C |
*zSongFM5.VoiceControl :       1D31 C | *zSongFM5.VoiceIndex :         1D38 C |
*zSongFM5.VoiceSongID :        1D3F C | *zSongFM5.VoicesHigh :         1D5B C |
*zSongFM5.VoicesLow :          1D5A C | *zSongFM5.VolEnv :             1D47 C |
*zSongFM5.Volume :             1D36 C |  zSongFM6 :                    1D60 C |
*zSongFM6.AMSFMSPan :          1D6A C | *zSongFM6.DataPointerHigh :    1D64 C |
*zSongFM6.DataPointerLow :     1D63 C | *zSongFM6.Detune :             1D70 C |
*zSongFM6.DurationTimeout :    1D6B C | *zSongFM6.FMVolEnv :           1D78 C |
*zSongFM6.FMVolEnvMask :       1D79 C | *zSongFM6.FeedbackAlgo :       1D7B C |
*zSongFM6.FreqHigh :           1D6E C | *zSongFM6.FreqLow :            1D6D C |
*zSongFM6.HaveSSGEGFlag :      1D78 C | *zSongFM6.LoopCounters :       1D88 C |
*zSongFM6.ModEnvIndex :        1D85 C | *zSongFM6.ModEnvSens :         1D82 C |
*zSongFM6.ModulationCtrl :     1D67 C | *zSongFM6.ModulationDelta :    1D86 C |
*zSongFM6.ModulationPtrHigh :  1D81 C | *zSongFM6.ModulationPtrLow :   1D80 C |
*zSongFM6.ModulationSteps :    1D87 C | *zSongFM6.ModulationValHigh :  1D83 C |
*zSongFM6.ModulationValLow :   1D82 C | *zSongFM6.ModulationWait :     1D84 C |
*zSongFM6.NoteFillMaster :     1D7F C | *zSongFM6.NoteFillTimeout :    1D7E C |
*zSongFM6.PSGNoise :           1D7A C | *zSongFM6.PanAni1 :            1D71 C |
*zSongFM6.PanAni2 :            1D72 C | *zSongFM6.PanAni3 :            1D73 C |
*zSongFM6.PanAni4 :            1D74 C | *zSongFM6.PanAni5 :            1D75 C |
*zSongFM6.PanAni6 :            1D76 C | *zSongFM6.PlaybackControl :    1D60 C |
*zSongFM6.SSGEGPointerHigh :   1D7A C | *zSongFM6.SSGEGPointerLow :    1D79 C |
*zSongFM6.SavedDuration :      1D6C C | *zSongFM6.StackPointer :       1D69 C |
*zSongFM6.TLPtrHigh :          1D7D C | *zSongFM6.TLPtrLow :           1D7C C |
*zSongFM6.TempoDivider :       1D62 C | *zSongFM6.Transpose :          1D65 C |
*zSongFM6.VoiceControl :       1D61 C | *zSongFM6.VoiceIndex :         1D68 C |
*zSongFM6.VoiceSongID :        1D6F C | *zSongFM6.VoicesHigh :         1D8B C |
*zSongFM6.VoicesLow :          1D8A C | *zSongFM6.VolEnv :             1D77 C |
*zSongFM6.Volume :             1D66 C |  zSongPSG1 :                   1D90 C |
*zSongPSG1.AMSFMSPan :         1D9A C | *zSongPSG1.DataPointerHigh :   1D94 C |
*zSongPSG1.DataPointerLow :    1D93 C | *zSongPSG1.Detune :            1DA0 C |
*zSongPSG1.DurationTimeout :   1D9B C | *zSongPSG1.FMVolEnv :          1DA8 C |
*zSongPSG1.FMVolEnvMask :      1DA9 C | *zSongPSG1.FeedbackAlgo :      1DAB C |
*zSongPSG1.FreqHigh :          1D9E C | *zSongPSG1.FreqLow :           1D9D C |
*zSongPSG1.HaveSSGEGFlag :     1DA8 C | *zSongPSG1.LoopCounters :      1DB8 C |
*zSongPSG1.ModEnvIndex :       1DB5 C | *zSongPSG1.ModEnvSens :        1DB2 C |
*zSongPSG1.ModulationCtrl :    1D97 C | *zSongPSG1.ModulationDelta :   1DB6 C |
*zSongPSG1.ModulationPtrHigh : 1DB1 C | *zSongPSG1.ModulationPtrLow :  1DB0 C |
*zSongPSG1.ModulationSteps :   1DB7 C | *zSongPSG1.ModulationValHigh : 1DB3 C |
*zSongPSG1.ModulationValLow :  1DB2 C | *zSongPSG1.ModulationWait :    1DB4 C |
*zSongPSG1.NoteFillMaster :    1DAF C | *zSongPSG1.NoteFillTimeout :   1DAE C |
*zSongPSG1.PSGNoise :          1DAA C | *zSongPSG1.PanAni1 :           1DA1 C |
*zSongPSG1.PanAni2 :           1DA2 C | *zSongPSG1.PanAni3 :           1DA3 C |
*zSongPSG1.PanAni4 :           1DA4 C | *zSongPSG1.PanAni5 :           1DA5 C |
*zSongPSG1.PanAni6 :           1DA6 C | *zSongPSG1.PlaybackControl :   1D90 C |
*zSongPSG1.SSGEGPointerHigh :  1DAA C | *zSongPSG1.SSGEGPointerLow :   1DA9 C |
*zSongPSG1.SavedDuration :     1D9C C | *zSongPSG1.StackPointer :      1D99 C |
*zSongPSG1.TLPtrHigh :         1DAD C | *zSongPSG1.TLPtrLow :          1DAC C |
*zSongPSG1.TempoDivider :      1D92 C | *zSongPSG1.Transpose :         1D95 C |
*zSongPSG1.VoiceControl :      1D91 C | *zSongPSG1.VoiceIndex :        1D98 C |
*zSongPSG1.VoiceSongID :       1D9F C | *zSongPSG1.VoicesHigh :        1DBB C |
*zSongPSG1.VoicesLow :         1DBA C | *zSongPSG1.VolEnv :            1DA7 C |
*zSongPSG1.Volume :            1D96 C |  zSongPSG2 :                   1DC0 C |
*zSongPSG2.AMSFMSPan :         1DCA C | *zSongPSG2.DataPointerHigh :   1DC4 C |
*zSongPSG2.DataPointerLow :    1DC3 C | *zSongPSG2.Detune :            1DD0 C |
*zSongPSG2.DurationTimeout :   1DCB C | *zSongPSG2.FMVolEnv :          1DD8 C |
*zSongPSG2.FMVolEnvMask :      1DD9 C | *zSongPSG2.FeedbackAlgo :      1DDB C |
*zSongPSG2.FreqHigh :          1DCE C | *zSongPSG2.FreqLow :           1DCD C |
*zSongPSG2.HaveSSGEGFlag :     1DD8 C | *zSongPSG2.LoopCounters :      1DE8 C |
*zSongPSG2.ModEnvIndex :       1DE5 C | *zSongPSG2.ModEnvSens :        1DE2 C |
*zSongPSG2.ModulationCtrl :    1DC7 C | *zSongPSG2.ModulationDelta :   1DE6 C |
*zSongPSG2.ModulationPtrHigh : 1DE1 C | *zSongPSG2.ModulationPtrLow :  1DE0 C |
*zSongPSG2.ModulationSteps :   1DE7 C | *zSongPSG2.ModulationValHigh : 1DE3 C |
*zSongPSG2.ModulationValLow :  1DE2 C | *zSongPSG2.ModulationWait :    1DE4 C |
*zSongPSG2.NoteFillMaster :    1DDF C | *zSongPSG2.NoteFillTimeout :   1DDE C |
*zSongPSG2.PSGNoise :          1DDA C | *zSongPSG2.PanAni1 :           1DD1 C |
*zSongPSG2.PanAni2 :           1DD2 C | *zSongPSG2.PanAni3 :           1DD3 C |
*zSongPSG2.PanAni4 :           1DD4 C | *zSongPSG2.PanAni5 :           1DD5 C |
*zSongPSG2.PanAni6 :           1DD6 C | *zSongPSG2.PlaybackControl :   1DC0 C |
*zSongPSG2.SSGEGPointerHigh :  1DDA C | *zSongPSG2.SSGEGPointerLow :   1DD9 C |
*zSongPSG2.SavedDuration :     1DCC C | *zSongPSG2.StackPointer :      1DC9 C |
*zSongPSG2.TLPtrHigh :         1DDD C | *zSongPSG2.TLPtrLow :          1DDC C |
*zSongPSG2.TempoDivider :      1DC2 C | *zSongPSG2.Transpose :         1DC5 C |
*zSongPSG2.VoiceControl :      1DC1 C | *zSongPSG2.VoiceIndex :        1DC8 C |
*zSongPSG2.VoiceSongID :       1DCF C | *zSongPSG2.VoicesHigh :        1DEB C |
*zSongPSG2.VoicesLow :         1DEA C | *zSongPSG2.VolEnv :            1DD7 C |
*zSongPSG2.Volume :            1DC6 C |  zSongPSG3 :                   1DF0 C |
*zSongPSG3.AMSFMSPan :         1DFA C | *zSongPSG3.DataPointerHigh :   1DF4 C |
*zSongPSG3.DataPointerLow :    1DF3 C | *zSongPSG3.Detune :            1E00 C |
*zSongPSG3.DurationTimeout :   1DFB C | *zSongPSG3.FMVolEnv :          1E08 C |
*zSongPSG3.FMVolEnvMask :      1E09 C | *zSongPSG3.FeedbackAlgo :      1E0B C |
*zSongPSG3.FreqHigh :          1DFE C | *zSongPSG3.FreqLow :           1DFD C |
*zSongPSG3.HaveSSGEGFlag :     1E08 C | *zSongPSG3.LoopCounters :      1E18 C |
*zSongPSG3.ModEnvIndex :       1E15 C | *zSongPSG3.ModEnvSens :        1E12 C |
*zSongPSG3.ModulationCtrl :    1DF7 C | *zSongPSG3.ModulationDelta :   1E16 C |
*zSongPSG3.ModulationPtrHigh : 1E11 C | *zSongPSG3.ModulationPtrLow :  1E10 C |
*zSongPSG3.ModulationSteps :   1E17 C | *zSongPSG3.ModulationValHigh : 1E13 C |
*zSongPSG3.ModulationValLow :  1E12 C | *zSongPSG3.ModulationWait :    1E14 C |
*zSongPSG3.NoteFillMaster :    1E0F C | *zSongPSG3.NoteFillTimeout :   1E0E C |
*zSongPSG3.PSGNoise :          1E0A C | *zSongPSG3.PanAni1 :           1E01 C |
*zSongPSG3.PanAni2 :           1E02 C | *zSongPSG3.PanAni3 :           1E03 C |
*zSongPSG3.PanAni4 :           1E04 C | *zSongPSG3.PanAni5 :           1E05 C |
*zSongPSG3.PanAni6 :           1E06 C | *zSongPSG3.PlaybackControl :   1DF0 C |
*zSongPSG3.SSGEGPointerHigh :  1E0A C | *zSongPSG3.SSGEGPointerLow :   1E09 C |
*zSongPSG3.SavedDuration :     1DFC C | *zSongPSG3.StackPointer :      1DF9 C |
*zSongPSG3.TLPtrHigh :         1E0D C | *zSongPSG3.TLPtrLow :          1E0C C |
*zSongPSG3.TempoDivider :      1DF2 C | *zSongPSG3.Transpose :         1DF5 C |
*zSongPSG3.VoiceControl :      1DF1 C | *zSongPSG3.VoiceIndex :        1DF8 C |
*zSongPSG3.VoiceSongID :       1DFF C | *zSongPSG3.VoicesHigh :        1E1B C |
*zSongPSG3.VoicesLow :         1E1A C | *zSongPSG3.VolEnv :            1E07 C |
*zSongPSG3.Volume :            1DF6 C |  zSongPosition :               1C33 C |
 zSoundBank :                  1C05 C |  zSoundQueue0 :                1C09 C |
 zSoundQueue1 :                1C0A C | *zSoundQueue2 :                1C0B C |
*zSoundQueue3 :                1C0C C |  zSoundQueueEnd :              1C0D C |
 zSoundQueueStart :            1C09 C |  zSpecSFXMode :                1C1A C |
 zSpecSFX_FM3 :                1F70 C | *zSpecSFX_FM3.AMSFMSPan :      1F7A C |
*zSpecSFX_FM3.DataPointerHigh :                                        1F74 C |
*zSpecSFX_FM3.DataPointerLow : 1F73 C | *zSpecSFX_FM3.Detune :         1F80 C |
*zSpecSFX_FM3.DurationTimeout :                                        1F7B C |
*zSpecSFX_FM3.FMVolEnv :       1F88 C | *zSpecSFX_FM3.FMVolEnvMask :   1F89 C |
*zSpecSFX_FM3.FeedbackAlgo :   1F8B C | *zSpecSFX_FM3.FreqHigh :       1F7E C |
*zSpecSFX_FM3.FreqLow :        1F7D C | *zSpecSFX_FM3.HaveSSGEGFlag :  1F88 C |
*zSpecSFX_FM3.LoopCounters :   1F98 C | *zSpecSFX_FM3.ModEnvIndex :    1F95 C |
*zSpecSFX_FM3.ModEnvSens :     1F92 C | *zSpecSFX_FM3.ModulationCtrl : 1F77 C |
*zSpecSFX_FM3.ModulationDelta :                                        1F96 C |
*zSpecSFX_FM3.ModulationPtrHigh :                                      1F91 C |
*zSpecSFX_FM3.ModulationPtrLow :                                       1F90 C |
*zSpecSFX_FM3.ModulationSteps :                                        1F97 C |
*zSpecSFX_FM3.ModulationValHigh :                                      1F93 C |
*zSpecSFX_FM3.ModulationValLow :                                       1F92 C |
*zSpecSFX_FM3.ModulationWait : 1F94 C | *zSpecSFX_FM3.NoteFillMaster : 1F8F C |
*zSpecSFX_FM3.NoteFillTimeout :                                        1F8E C |
*zSpecSFX_FM3.PSGNoise :       1F8A C | *zSpecSFX_FM3.PanAni1 :        1F81 C |
*zSpecSFX_FM3.PanAni2 :        1F82 C | *zSpecSFX_FM3.PanAni3 :        1F83 C |
*zSpecSFX_FM3.PanAni4 :        1F84 C | *zSpecSFX_FM3.PanAni5 :        1F85 C |
*zSpecSFX_FM3.PanAni6 :        1F86 C |
*zSpecSFX_FM3.PlaybackControl :                                        1F70 C |
*zSpecSFX_FM3.SSGEGPointerHigh :                                       1F8A C |
*zSpecSFX_FM3.SSGEGPointerLow :                                        1F89 C |
*zSpecSFX_FM3.SavedDuration :  1F7C C | *zSpecSFX_FM3.StackPointer :   1F79 C |
*zSpecSFX_FM3.TLPtrHigh :      1F8D C | *zSpecSFX_FM3.TLPtrLow :       1F8C C |
*zSpecSFX_FM3.TempoDivider :   1F72 C | *zSpecSFX_FM3.Transpose :      1F75 C |
*zSpecSFX_FM3.VoiceControl :   1F71 C | *zSpecSFX_FM3.VoiceIndex :     1F78 C |
*zSpecSFX_FM3.VoiceSongID :    1F7F C | *zSpecSFX_FM3.VoicesHigh :     1F9B C |
*zSpecSFX_FM3.VoicesLow :      1F9A C | *zSpecSFX_FM3.VolEnv :         1F87 C |
*zSpecSFX_FM3.Volume :         1F76 C |  zSpecialFreqCommands :         1E9 C |
 zSpecialFreqCommands_End :     1ED C |  zStack :                      2000 - |
 zStartupCodeEndLoc :            26 C |  zTempVariablesEnd :           1FA0 C |
 zTempVariablesStart :         1C09 C |  zTempoAccumulator :           1C13 C |
 zTrack.AMSFMSPan :               A - |  zTrack.DataPointerHigh :         4 - |
 zTrack.DataPointerLow :          3 - |  zTrack.Detune :                 10 - |
 zTrack.DurationTimeout :         B - |  zTrack.FMVolEnv :               18 - |
 zTrack.FMVolEnvMask :           19 - |  zTrack.FeedbackAlgo :           1B - |
 zTrack.FreqHigh :                E - |  zTrack.FreqLow :                 D - |
 zTrack.HaveSSGEGFlag :          18 - |  zTrack.LoopCounters :           28 - |
 zTrack.ModEnvIndex :            25 - |  zTrack.ModEnvSens :             22 - |
 zTrack.ModulationCtrl :          7 - |  zTrack.ModulationDelta :        26 - |
 zTrack.ModulationPtrHigh :      21 - |  zTrack.ModulationPtrLow :       20 - |
 zTrack.ModulationSteps :        27 - |  zTrack.ModulationValHigh :      23 - |
 zTrack.ModulationValLow :       22 - |  zTrack.ModulationWait :         24 - |
 zTrack.NoteFillMaster :         1F - |  zTrack.NoteFillTimeout :        1E - |
 zTrack.PSGNoise :               1A - |  zTrack.PanAni1 :                11 - |
 zTrack.PanAni2 :                12 - |  zTrack.PanAni3 :                13 - |
 zTrack.PanAni4 :                14 - |  zTrack.PanAni5 :                15 - |
 zTrack.PanAni6 :                16 - |  zTrack.PlaybackControl :         0 - |
 zTrack.SSGEGPointerHigh :       1A - |  zTrack.SSGEGPointerLow :        19 - |
 zTrack.SavedDuration :           C - |  zTrack.StackPointer :            9 - |
 zTrack.TLPtrHigh :              1D - |  zTrack.TLPtrLow :               1C - |
 zTrack.TempoDivider :            2 - |  zTrack.Transpose :               5 - |
 zTrack.VoiceControl :            1 - |  zTrack.VoiceIndex :              8 - |
 zTrack.VoiceSongID :             F - |  zTrack.VoicesHigh :             2B - |
 zTrack.VoicesLow :              2A - |  zTrack.VolEnv :                 17 - |
 zTrack.Volume :                  6 - |  zTrack.len :                    30 - |
 zTrackInitPos :               1C35 C |  zTracksEnd :                  1E20 C |
 zTracksSFXEnd :               1F70 C |  zTracksSFXStart :             1E20 C |
 zTracksSpecSFXEnd :           1FA0 C |  zTracksSpecSFXStart :         1F70 C |
 zTracksStart :                1C40 C |  zUnk_1C06 :                   1C06 C |
 zUnk_1C15 :                   1C15 C |  zUnk_1C17 :                   1C17 C |
 zUnk_1C18 :                   1C18 C |  zUpdateSound :                1C19 C |
 zVoiceTblPtr :                1C37 C |  zYM2612_A0 :                  4000 - |
 zYM2612_A1 :                  4002 - |  zYM2612_D0 :                  4001 - |
 zYM2612_D1 :                  4003 - |  zeroOffsetOptimization :         0 - |

   4719 symbols
   1064 unused symbols

 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 16 - 5/14/2025 18:0:23


  Defined Macros:
  ---------------

CheckedChannelPointer                 | DACMeta                              
FillRAM                               | PSGPitchConvert                      
_add                                  | _addq                                
_clr                                  | _cmp                                 
_cmpi                                 | _move                                
_tst                                  | align                                
align0                                | bankswitch                           
bankswitch_2                          | cnop                                 
cnop0                                 | convertMainTempoMod                  
disable_ints                          | ds                                   
enable_ints                           | even                                 
finishBank                            | insn1op                              
insn2op                               | org                                  
org0                                  | resetZ80                             
resetZ80a                             | rsttarget                            
smpsAlterNote                         | smpsAlterPitch                       
smpsAlterVol                          | smpsAlternateSMPS                    
smpsCall                              | smpsChanTempoDiv                     
smpsChangeTransposition               | smpsClearPush                        
smpsConditionalJump                   | smpsContinuousLoop                   
smpsCopyData                          | smpsDetune                           
smpsFM3SpecialMode                    | smpsFMAlterVol                       
smpsFMFlutter                         | smpsFMICommand                       
smpsFMVolEnv                          | smpsFMvoice                          
smpsHaltMusic                         | smpsHeaderChan                       
smpsHeaderChanSFX                     | smpsHeaderDAC                        
smpsHeaderFM                          | smpsHeaderPSG                        
smpsHeaderSFXChannel                  | smpsHeaderStartSong                  
smpsHeaderTempo                       | smpsHeaderTempoSFX                   
smpsHeaderVoice                       | smpsHeaderVoiceNull                  
smpsHeaderVoiceUVB                    | smpsJump                             
smpsLoop                              | smpsMaxRelRate                       
smpsModChange                         | smpsModChange2                       
smpsModOff                            | smpsModOn                            
smpsModSet                            | smpsNop                              
smpsNoteFill                          | smpsPSGAlterVol                      
smpsPSGform                           | smpsPSGvoice                         
smpsPan                               | smpsPlayDACSample                    
smpsPlaySound                         | smpsResetSpindashRev                 
smpsReturn                            | smpsSSGEG                            
smpsSetNote                           | smpsSetTempoDiv                      
smpsSetTempoMod                       | smpsSetVol                           
smpsSetvoice                          | smpsSpindashRev                      
smpsStop                              | smpsStopFM                           
smpsStopSpecial                       | smpsVcAlgorithm                      
smpsVcAmpMod                          | smpsVcAttackRate                     
smpsVcCoarseFreq                      | smpsVcDecayLevel                     
smpsVcDecayRate1                      | smpsVcDecayRate2                     
smpsVcDetune                          | smpsVcFeedback                       
smpsVcRateScale                       | smpsVcReleaseRate                    
smpsVcTotalLevel                      | smpsVcUnusedBits                     
smpsWeirdD1LRR                        | startBank                            
startZ80                              | stopZ80                              
trace                                 | waitZ80                              

    108 macros

 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 17 - 5/14/2025 18:0:23


  Defined Structures/Unions:
  --------------------------

zTrack
  0          PlaybackControl
  1          VoiceControl
  2          TempoDivider
  3          DataPointerLow
  4          DataPointerHigh
  5          Transpose
  6          Volume
  7          ModulationCtrl
  8          VoiceIndex
  9          StackPointer
  A          AMSFMSPan
  B          DurationTimeout
  C          SavedDuration
  D          FreqLow
  E          FreqHigh
  F          VoiceSongID
 10          Detune
 11          PanAni1
 12          PanAni2
 13          PanAni3
 14          PanAni4
 15          PanAni5
 16          PanAni6
 17          VolEnv
 18          HaveSSGEGFlag
 18          FMVolEnv
 19          SSGEGPointerLow
 19          FMVolEnvMask
 1A          PSGNoise
 1A          SSGEGPointerHigh
 1B          FeedbackAlgo
 1C          TLPtrLow
 1D          TLPtrHigh
 1E          NoteFillTimeout
 1F          NoteFillMaster
 20          ModulationPtrLow
 21          ModulationPtrHigh
 22          ModulationValLow
 22          ModEnvSens
 23          ModulationValHigh
 24          ModulationWait
 25          ModEnvIndex
 26          ModulationDelta
 27          ModulationSteps
 28          LoopCounters
 2A          VoicesLow
 2B          VoicesHigh
1 structure
 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 18 - 5/14/2025 18:0:23


  Defined Functions:
  ------------------

zmake68kBank                          | zmake68kPtr                          
dpcmLoopCounter                       | pcmLoopCounter                       
ramaddr                               | little_endian                        
k68z80Pointer                         | z80_ptr                              
bytesToXcnt                           | bytesToWcnt                          
bytesToLcnt                           | signextendB                          
signextend                            | signmask                             
bit                                   | chkop                                
notZ80                                | s3TempotoS2                          
s3TempotoS1                           | s1TempotoS3                          
s1TempotoS2                           | s2TempotoS3                          
s2TempotoS1                           | conv0To256                           

 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 19 - 5/14/2025 18:0:23


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

3.18 seconds assembly time

  31181 lines source file
  49856 lines incl. macro expansions
      2 passes
      0 errors
      1 warning
